[
  {
    "url": "https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode",
    "markdown": "# Reject a testmode personalization design\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Reject a testmode personalization design | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode",
    "markdown": "# Deactivate a testmode personalization design\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Deactivate a testmode personalization design | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/personalization_designs/create",
    "markdown": "# Create a personalization design | Stripe API Reference\n\nCreates a personalization design object.\n\n### Parameters\n\n*   #### \n    \n    physical\\_bundlestringRequired\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the created personalization design object.\n\nPOST /v1/issuing/personalization\\_designs\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My personalization design name\" \\  -d \"preferences[is_default]\"=false \\  -d card_logo=file_1LzR9L2eZvKYlo2CelTpcvKu \\  -d physical_bundle=ics_Oiw9ahglMfql0U\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Update a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/update)\n\nUpdates a card personalization object.\n\n### Parameters\n\n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name. Providing an empty string will set the field to null.\n    \n*   The physical bundle object belonging to this personalization design.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Retrieve a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/retrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [List all personalization designs](https://docs.stripe.com/api/issuing/personalization_designs/list)\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```",
    "title": "Create a personalization design | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/personalization_designs/list",
    "markdown": "# List all personalization designs | Stripe API Reference\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all personalization designs | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/cards",
    "markdown": "# Cards | Stripe API Reference\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [The Card object](https://docs.stripe.com/api/issuing/cards/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    The reason why the card was canceled.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `design_rejected`<br><br>The design of this card was rejected by Stripe for violating our [partner guidelines](https://docs.stripe.com/issuing/cards/physical#design-review). |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n\n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.\n    \n*   The expiration month of the card.\n    \n*   The expiration year of the card.\n    \n*   The last 4 digits of the card number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n*   The type of the card.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More attributes\n\n*   #### \n    \n    cvcnullable stringExpandable\n    \n\n*   #### \n    \n    numbernullable stringExpandable\n    \n*   #### \n    \n    personalization\\_designnullable stringExpandable\n    \n*   #### \n    \n    replaced\\_bynullable stringExpandable\n    \n*   #### \n    \n    replacement\\_fornullable stringExpandable\n    \n*   #### \n    \n    replacement\\_reasonnullable enum\n    \n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Create a card](https://docs.stripe.com/api/issuing/cards/create)\n\nCreates an Issuing `Card` object.\n\n### Parameters\n\n*   The currency for the card.\n    \n*   The type of card to issue. Possible values are `physical` or `virtual`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n*   The [Cardholder](https://docs.stripe.com/api#issuing_cardholder_object) object with which the card will be associated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    personalization\\_designstring\n    \n\n### Returns\n\nReturns an Issuing `Card` object if creation succeeds.\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d cardholder=ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -d currency=usd \\  -d type=virtual\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Update a card](https://docs.stripe.com/api/issuing/cards/update)\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
    "title": "Cards | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/regulatory-receipts",
    "markdown": "# Regulatory receipts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about hosted transaction receipts.\n\nAll changes to a balance have a corresponding [Transaction object](https://docs.stripe.com/api/treasury/transactions/object) that provides a summary of money movements. Some transaction types are considered _regulated_ under Stripe’s money transmission licenses and require special treatment. You, the platform, must offer a transaction receipt and present disclosures to the customers of the sellers and service providers (connected accounts) on the platform taking part in regulated transactions.\n\n## Providing access to receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides hosted regulatory transaction receipts on all of our money movement resources, recording the URL as the value for the `hosted_regulatory_receipt_url` attribute. This hosted receipt includes a description of the transaction, amount, timing information, and relevant disclosures. Because the sellers and service providers (connected accounts) on your platform don’t have Stripe Dashboard access, you must provide them with the ability to retrieve receipts from within the product.\n\n![Hosted receipt of an outbound payment showing transaction id, amount sent, date posted, description of transaction, and a regulatory disclosure message.](https://b.stripecdn.com/docs-statics-srv/assets/receipt.4490fc802089baf86a8ee4bf9b98118a.png)\n\nRegulatory receipt\n\n#### Note\n\nDon’t store receipt URLs as they’re subject to change and only valid for 60 days.\n\nYou can find this hosted receipt in the `hosted_regulatory_receipt_url` attribute of the following objects:\n\n*   [InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/object#inbound_transfer_object-hosted_regulatory_receipt_url)\n*   [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/object#received_credit_object-hosted_regulatory_receipt_url)\n*   [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/object#received_debit_object-hosted_regulatory_receipt_url)\n*   [CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/object#credit_reversal_object-hosted_regulatory_receipt_url)\n*   [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/object#debit_reversal_object-hosted_regulatory_receipt_url)\n*   [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/object#outbound_transfer_object-hosted_regulatory_receipt_url)\n*   [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/object#outbound_payment_object-hosted_regulatory_receipt_url)",
    "title": "Regulatory receipts | Stripe Documentation",
    "description": "Learn about hosted transaction receipts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/marketing-treasury",
    "markdown": "# Marketing Treasury-based services | Stripe DocumentationThe Stripe Docs logo\n\n## Create precise messaging for your users that complies with regulations.\n\nMany states have statutory prohibitions on references to “banking,\" “banks,\" and “bank accounts” when the entities making these references are not state- or federally-chartered banks or credit unions. Imprecise terminology of Stripe Treasury accounts might draw scrutiny from regulators.\n\n## Recommended Terms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor your platform to efficiently leverage Stripe Treasury, you need to brand and communicate the nature of the product while being mindful of regulations. Refer to the following list of recommended terms to use in your messaging when building out your implementation of the product.\n\n*   Money management, or money management account or solution\n*   Cash management, or cash management account or solution\n*   \\[Your brand\\] account\n*   Financial services\n*   Financial account\n*   Financial product\n*   Financial service product\n*   Store of funds\n*   Wallet or open loop wallet\n*   Stored-value account\n*   Open-Loop stored-value account\n*   Prepaid access account\n*   Eligible for FDIC “pass-through” insurance\n*   Funds held at \\[Partner Bank\\], Member FDIC\n\n## Terms to Avoid![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvoid the terms in this list for any marketing programs you create because only financial institutions licensed as banks can use them.\n\n*   Stripe or \\[Your Brand\\] bank\n*   Bank account\n*   Bank balance\n*   Banking\n*   Banking account\n*   Banking product\n*   Banking platform\n*   Deposits\n*   Mobile banking\n*   \\[Your Brand\\] pays interest\n*   \\[Your Brand\\] sets interest rates\n*   \\[Your Brand\\] advances funds\n*   Phrases that suggest your users receive banking products or services directly from bank partners, for example:\n    *   Create a \\[Bank Partner\\] bank account\n    *   A better way to bank with \\[Bank Partner\\]\n    *   Mobile banking with \\[Bank Partner\\]\n\n## Yield compliance marketing guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a platform, you can provide your customers with yield, calculated as a percentage of their Treasury balance. We understand that this can be a great value proposition as part of your product. When you market and disclose yield to your potential and existing customers, don’t conflate yield with interest. We’ve outlined best practices for your marketing disclosures below. If you have any questions on how to present yield in your marketing, reach out to our compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com)\n\n*   Recommended Terms:\n    *   Always refer to yield as “yield.”\n    *   Always disclose prominently in your marketing materials that the yield percentage is subject to change and the conditions under which it might change.\n    *   Notify your existing customers whenever the yield percentage has changed. Prominently display the most recent yield percentage in their Dashboard.\n*   Terms to avoid\n    *   Never refer to yield as “interest.”\n    *   Don’t reference the Fed Funds Rate as a benchmark for setting your yield percentage.\n    *   Don’t imply that the yield is pass-through interest from a bank partner.\n\n### How to talk about FDIC insurance eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury balances are stored value accounts that are held “for the benefit of” our Stripe Treasury users with our bank partners, Evolve Bank & Trust and Goldman Sachs Bank USA. We disclose to you which of our partners hold your funds. For FDIC insurance to apply to a user’s balance in a “for the benefit of” account, we must satisfy the rules for FDIC pass-through deposit insurance, unlike a bank account directly with an FDIC insured bank.\n\nWe understand that FDIC insurance eligibility can be a valuable feature to your customers. Stripe has approved the variations of the phrase “FDIC Insurance **eligible**” noted below on marketing materials, as long as certain conditions are met. **Specifically**, the statement of FDIC insurance eligibility must always be paired with two disclosures:\n\n1.  Stripe Treasury Accounts are eligible for FDIC pass-through deposit insurance if they meet certain requirements. The accounts are eligible only to the extent pass-through insurance is permitted by the rules and regulations of the FDIC, and if the requirements for pass-through insurance are satisfied. The FDIC insurance applies up to 250,000 USD per depositor, per financial institution, for deposits held in the same type of account (business versus personal, and so on).\n2.  You must also disclose that neither Stripe nor you are an FDIC insured institution and that the FDIC’s deposit insurance coverage only protects against the failure of an FDIC insured depository institution.\n\n|     |     |\n| --- | --- |\n| The following terms that incorporate the term “eligible” are approved: | Don’t use the following terms: |\n| *   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | *   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\nWe have also prepared these FAQs that you can use when your customers have questions about FDIC insurance eligibility or any of the disclosures:\n\n|     |     |\n| --- | --- |\n| **Is FDIC insurance impacted if a customer holds deposits in other accounts with the same institution?** | It can be. It’s your responsibility to know which insured institutions hold your funds. If you have other business-purpose accounts with the same institution where Treasury funds are held, the FDIC might aggregate all of your business account balances with that institution in applying the 250,000 USD limit. The FDIC generally does not, however, aggregate your personal accounts with your business accounts. |\n| **Does FDIC insurance eligibility protect from fraud or financial loss?** | No, FDIC insurance eligibility is applicable only in the event of a bank failure. |\n| **How do I know if the requirements for FDIC pass-through insurance are met?** | Stripe Treasury accounts are designed to be eligible for FDIC pass-through insurance. The FDIC makes the final determination about the availability of pass-through insurance at the time of a bank’s failure. |",
    "title": "Marketing Treasury-based services | Stripe Documentation",
    "description": "Create precise messaging for your users that complies with regulations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools/stripes-risk-score",
    "markdown": "# Stripe's risk score | Stripe DocumentationThe Stripe Docs logo\n\n## Stripe's risk scoreBeta\n\n## Evaluate the level of fraud risk associated with an authorization.\n\nIncorporate Stripe’s risk assessment into your business needs when deciding whether to approve or reject an authorization. The following statistics provide directional guidance on the performance of our tools, dependent on what you’re optimizing for: approval rate or fraud prevention. While these settings might not be customized to your business model, geography, or cardholder behavior, you can use them as a source of directional guidance when using Stripe’s tools. Contact us for support in adjusting these thresholds.\n\n|     | Network tools |     | Stripe Issuing fraud tools |     |     |\n| --- | --- | --- | --- | --- | --- |\n|     |     | Optimizing for fraud prevention | Balancing fraud prevention and approval rate | Optimizing for approval rate |\n| **Precision**: _How likely the flagged charge is true fraud_ | 2%  | 10-15% | 15-20% | 25-30% |\n| **Recall**: _% of all fraud caught by tooling by transaction volume_ | 2%  | 25-30% | 20-25% | 10-15% |\n| **% Volume Impact**: _Estimated authorization volume impacted by fraud tooling_ | 0.10% | 0.06% - 0.07% | 0.02% - 0.04% | 0.01% - 0.02% |\n\nStripe provides a composite score and risk categorization to help you assess the risk level of an authorization. The values exist on a 0-99 scale, with higher values representing higher risk. In addition to the risk score, Stripe provides an assessment of the authorization’s riskiness in an enum value. We label every authorization as ‘normal’ or ’high’.\n\nWe recommend backtesting your data against the score to assess opportunities to use the score to drive down fraud rates. For example, you might find that `fraud_score > 20` and `risk_level = normal` equates to particularly risky authorizations for your portfolio and opt to block authorizations that satisfy those conditions.\n\nPrecision and recall are inversely related. When you block more transactions, the false positive rate increases while the likelihood of allowing fraud decreases. When you block fewer transactions, the false positive rate decreases. Set your blocking thresholds accordingly based on rigorous backtesting of your data and your own risk tolerance.\n\nLearn more about the [Stripe’s risk score](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-fraud_risk).\n\n## Fraud classification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile our model is reliable, it inevitably flags:\n\n*   False positives: Non-fraudulent transactions as high risk\n*   False negatives: Fraudulent transactions as non-high risk\n\nAs Stripe refines the performance of its risk models, you can actively contribute to our refinement process by flagging both fraudulent transactions that we might not accurately identify and non-fraudulent transactions. You’ll also be strengthening the fraud prevention capabilities of the industry as a whole: when you flag a false negative, we send a fraud report to card networks, telling them about the fraudulent activity.\n\n### Use the API to report false positives and negatives![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can report false positives and false negatives while validating correct assessments (true positives and true negatives) through the [Fraud Classification API](https://docs.stripe.com/api/issuing/fraud_classification/create). Using this API is optional for accessing Stripe’s risk score. However, your contributions improve the model over time. Due to this, we recommend automating reporting with this API in the early stages of your implementation\n\nLearn more about the [Fraud Classification API](https://docs.stripe.com/api/issuing/fraud_classification/create).\n\nStripe’s risk score is currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Stripe's risk score | Stripe Documentation",
    "description": "Evaluate the level of fraud risk associated with an authorization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools/compromised-card-alerting",
    "markdown": "# Compromised card alerting | Stripe DocumentationThe Stripe Docs logo\n\n## Compromised card alertingBeta\n\n## Cancel and reissue a card, file disputes, or notify a cardholder based on Stripe notifications.\n\nCanceling a card suspected to be compromised can help you prevent future fraudulent use of PANs that have been compromised. You can use these indicators to initiate communications and a reissuance workflow for cardholders. If Stripe observes that a card has been successfully used in a card testing attack, we flag the card as compromised.\n\n### Mitigate risk and take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe observes a successful authorization during a severe card testing attack (defined as a `risk_assessment.card_testing_risk.risk_level` of `elevated` or `highest`), the card’s `fraud_warning.type` field will have a value of `card_testing_exposure`. The `started_at` value corresponds to the date that the successful authorization in card testing attack took place. This value won’t update if the card is compromised again in a later attack.\n\nAfter Stripe sets the `type` field to `card_testing_exposure`, we recommend contacting the cardholder, canceling the card, and issuing a new one. This mitigates the risk of subsequent authorizations on what a fraudulent actor likely assumes is a valid PAN that they can use.\n\nLearn more about [compromised card alerting](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-fraud_warning)\n\nCompromised card alerting is currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Compromised card alerting | Stripe Documentation",
    "description": "Cancel and reissue a card, file disputes, or notify a cardholder based on Stripe notifications.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart",
    "markdown": "# Set up and manage real-time authorizations\n\nSearch the docs or ask a question",
    "title": "Set up and manage real-time authorizations | Stripe Documentation",
    "description": "Learn how to set up and deploy a webhook to respond to Issuing authorizations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration",
    "markdown": "# Migrate to direct webhook response\n\n## Learn how to migrate Issuing real-time authorizations from API calls to direct webhook responses.\n\nYou can now [respond directly to a `issuing_authorization.request` webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations) with a real-time authorization decision instead of making an API call to [approve](https://docs.stripe.com/api/issuing/authorizations/approve) and [decline](https://docs.stripe.com/api/issuing/authorizations/decline) endpoints during the webhook.\n\nResponding directly to the webhook event simplifies real-time authorizations, and removes an extra API call that can negatively impact your authorization rate with time outs.\n\nIf you’re building a new integration, use the new direct webhook response instead of making approve and decline API calls. We are deprecating the approve and decline endpoints, but existing users will continue to have access until at least the end of 2024. If you have an existing integration with real-time authorization, plan to migrate to direct webhook responses.\n\n#### Note\n\nThis guide only applies if you use the `/approve` and `/decline` endpoints for real-time authorizations.\n\n## Legacy API call flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, you needed to make an API call to `/approve` or `/decline` to make a decision for an incoming authorization request before responding to the `issuing_authorization.request` webhook.\n\n## New direct webhook response flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now respond directly to the `issuing_authorization.request` webhook with a decision in the response body, without needing to make a separate API call. After the decision, an `issuing_authorization.created` or `issuing_authorization.updated` webhook event is still sent.\n\nLearn more about this API in the [real-time authorization documentation](https://docs.stripe.com/issuing/controls/real-time-authorizations), and build an integration with [our interactive guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\nYou must respond with an HTTP status code of `200`, a `Stripe-Version` header set to a specific API version, and a Boolean of `approved` in the JSON body. The JSON body must correspond with the [specified API version](https://docs.stripe.com/api/versioning).\n\nFor controllable amount authorizations, [partial approvals](https://docs.stripe.com/issuing/purchases/authorizations?issuing-authorization-type=incremental_authorization#handling-other-authorizations) optionally include `amount`.\n\nFor direct webhook response [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object), we’ve made several additions:\n\n*   Added value `webhook_error` to [request\\_history.reason](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason). This value is present if the webhook response fails due to validation errors.\n*   New field `request_history.reason_message`, which includes a detailed error message if the `request_history.reason` is `webhook_error`.\n\n## Migrate to direct response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can try the direct webhook response in test mode. As a best practice, we recommend gradually shifting over from the legacy API call to responding directly to the webhook.\n\nIf you call an API method and include the direct webhook response body, the API method decision takes priority.\n\nHere’s an example of what a migration to the direct webhook might look like in Ruby. For other languages, see [our interactive guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\n`# User's existing API call webhook handling code, using Sinatra. # In this example, the synchronous webhook and normal webhook share an endpoint. post '/webhook' do   payload = request.body.read    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     # Approve with legacy API call.     Stripe::Issuing::Authorization.approve(auth[\"id\"])     status 200   elsif event['type'] == 'issuing_authorization.created'     auth = event['data']['object']     # If approved, will print \"webhook_approved\"     puts \"#{auth[\"request_history\"][-1][\"reason\"]}\"     status 200   end end`\n\nAfter testing in test mode, gradually shift traffic to the direct webhook response.\n\n`# User's API call and direct response webhook handling code, using Sinatra. # In this example, the synchronous webhook and normal webhook share an endpoint. post '/webhook' do   payload = request.body.read    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']      # Gradually shift traffic over from API approval to direct webhook response.     if should_use_direct_webhook_response?(auth[\"id\"])       # Direct webhook response.        body {         # Required field, containing decision.         \"approved\": true,       }.to_json        header {         # Required in header. Versions can be found in [https://stripe.com/docs/api/versioning](https://stripe.com/docs/api/versioning)         \"Stripe-Version\": \"2023-08-16\"       }        # Must respond with a 200.       status 200     else       # Legacy API call. Plan to remove this after traffic is completely shifted.       Stripe::Issuing::Authorization.approve(auth[\"id\"])       status 200     end   elsif event['type'] == 'issuing_authorization.created'     auth = event['data']['object']      # If approved, will print \"webhook_approved\"     puts \"#{auth[\"request_history\"][-1][\"reason\"]}\"      # Handle new reason value and field     if auth[\"request_history\"][-1][\"reason\"] == \"webhook_error\"       puts \"Direct webhook response decision failed: #{auth[\"request_history\"][-1][\"reason_message\"]}\"     end     status 200   end end`",
    "title": "Migrate to direct webhook response | Stripe Documentation",
    "description": "Learn how to migrate Issuing real-time authorizations from API calls to direct webhook responses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/prevention/advanced-fraud-detection",
    "markdown": "# Advanced fraud detection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about tools developers can use to maximize Stripe's ability to prevent fraudulent payments.\n\n[Stripe.js](https://docs.stripe.com/js) is Stripe’s JavaScript library designed to enable businesses to securely collect sensitive payment information from the customer’s browser. The Stripe [iOS SDK](https://docs.stripe.com/mobile/ios/basic) and [Android SDK](https://docs.stripe.com/mobile/android/basic) are the mobile app counterparts to Stripe.js.\n\nStripe.js and the mobile SDKs provide advanced fraud detection by looking at signals about device characteristics and user activity that help distinguish between legitimate and fraudulent transactions. These signals power Stripe’s fraud prevention systems, such as [Radar](https://docs.stripe.com/radar \"Radar\"). The signals are transmitted to Stripe’s back end by periodically making requests to the `m.stripe.com` endpoint.\n\nAlso, on each page where you load Stripe.js, it may load hCaptcha. hCaptcha is a type of CAPTCHA that helps stop fraud and provides additional signals to Stripe while being low friction for legitimate customers. To opt out of use of hCAPTCHA integration, reach out to [Stripe Support](https://support.stripe.com/contact/login).\n\nOur goal is to maximize payments from legitimate customers while minimizing fraud. Fraud can be one of the most challenging aspects of running an online business. Even businesses that don’t typically see significant amounts of fraud can see sudden, unexpected, and costly attacks. Stripe prevents more than 500 million USD in payment fraud for Stripe businesses every month. To do that, we collect and analyze information that helps us identify bad actors and bots, including both transactional data (such as amount, customer shipping address, date, and so on) and advanced fraud detection signals (device and activity signals).\n\nThe details of what we collect and how we use it are disclosed in our [privacy policy](https://stripe.com/privacy) and [cookie policy](https://stripe.com/cookies-policy/legal).\n\n## Types of signals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Device characteristics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDevice characteristics are signals about a customer’s browser, screen, or device. They help Stripe identify configurations consistent with anomalous browsing behavior, as well as compare this behavior to similar patterns observed across other businesses on Stripe’s network. Combinations of these parameters that are rare or unlikely to reflect a real user’s computing environment can expose fraudulent transactions.\n\n### Activity indicators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdvanced fraud detection signals also include activity indicators from actual shoppers that help us distinguish legitimate shoppers from fraudulent purchasers and bots. For example, bots tend to move through a website and checkout form much faster than a real person would; card numbers are also frequently copy-pasted rather than typed. These signals include mouse activity indicators and how long a user spends on different pages when shopping, which are both predictive of bot-like behavior across the duration of a session.\n\nStripe gathers data about the contents of the page only if they correspond to input fields in Stripe Elements. For example, Stripe might collect an email address to prefill Link signup and login. If the Stripe Element doesn’t have an email field, Stripe won’t collect that information from the contents of the page. This information is never saved. Signals corresponding to user activity are scoped to a single shopping session on a single site or app and aren’t linked across different shopping sessions, sites, or apps.\n\n## When signals are collected![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe more activity Stripe’s fraud engines can observe, the better Stripe’s fraud prevention will be. Stripe therefore encourages including Stripe.js on every page of the shopping experience, not just the checkout page. This level of Stripe.js coverage gives Stripe the richest possible set of such signals to distinguish fraudulent purchasers from real customers.\n\nIf Stripe.js isn’t used at all, the business must take on the full responsibility of [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\"), and additional fraud risk.\n\nThe iOS and Android SDK collect advanced fraud detection signals for an app when the SDK object is instantiated. The data is only transmitted to Stripe during a tokenization request.\n\n## Data privacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis advanced fraud detection signal data is never used for advertising and won’t be rented, sold, or given to advertisers, as outlined in our [privacy policy](https://stripe.com/privacy). Stripe only uses this data for fraud detection and security purposes, and retains it for as long as it’s useful for the purposes of fraud detection and security.\n\nInternally, this data is subject to strict access control policies enforced by Stripe, and restricted to a small number of Stripe employees working on fraud prevention and security.\n\n## Disable advanced fraud detection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe users can decide to disable the collection of advanced fraud detection signals on their own websites and apps. Doing so increases their risk of fraud, especially [card testing](https://docs.stripe.com/disputes/prevention/fraud-types#card-testing). Stripe will continue to collect fraud detection signals on Stripe domains, like on [Stripe Checkout](https://docs.stripe.com/payments/checkout) payment pages.\n\nAdditionally, disabling advanced fraud detection doesn’t affect the collection of events logged when a customer interacts with Stripe-managed fields in your checkout page (we use these events to prevent fraud and make sure Stripe Elements is working) nor basic device information collected during [3D Secure 2 authentication](https://support.stripe.com/questions/3d-secure-2-device-information) (we’re required to send this information to the issuing bank for their risk analysis).\n\n### Stripe.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo disable advanced fraud detection signals with [Stripe.js](https://docs.stripe.com/js/including), set `advancedFraudSignals` as a query parameter in the Stripe.js script tag, or update to the latest version of the [Stripe.js module](https://github.com/stripe/stripe-js), use the `pure` export, and call `setLoadParameters`:\n\n### iOS SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo disable advanced fraud detection signals with the [Stripe iOS SDK](https://github.com/stripe/stripe-ios), update to iOS SDK v19.1.1 or later. When configuring the Stripe SDK, set the `advancedFraudSignalsEnabled` property:\n\n`StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`StripeAPI.setAdvancedFraudSignalsEnabled(false)`\n\n### Android SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo disable advanced fraud detection signals with the [Android SDK](https://github.com/stripe/stripe-android), update to Android SDK v14.4.0 or later. When configuring the Stripe SDK, set the `advancedFraudSignalsEnabled` property before instantiating or accessing any Stripe SDK objects:\n\n`class MyApp : Application() {     override fun onCreate() {         super.onCreate()          Stripe.advancedFraudSignalsEnabled = false          PaymentConfiguration.init(             applicationContext,`\n            \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `)     } }`",
    "title": "Advanced fraud detection | Stripe Documentation",
    "description": "Learn about tools developers can use to maximize Stripe's ability to prevent fraudulent payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/including",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations/decline",
    "markdown": "# Decline an authorization | Stripe API Reference\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
    "title": "Decline an authorization | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations/approve",
    "markdown": "# Approve an authorization | Stripe API Reference\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Decline an authorization](https://docs.stripe.com/api/issuing/authorizations/decline)\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
    "title": "Approve an authorization | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/issuing/create_ephemeral_key_nonce",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/events/on_click",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/style",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/topups",
    "markdown": "# ups | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftopups)\n\n## [Top-ups](https://docs.stripe.com/api/topups)\n\n## [The Top-up object](https://docs.stripe.com/api/topups/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount transferred.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `failed` |\n    | `pending` |\n    | `reversed` |\n    | `succeeded` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    expected\\_availability\\_datenullable integer\n    \n*   #### \n    \n    failure\\_codenullable string\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    sourcenullable objectDeprecated\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    transfer\\_groupnullable string\n    \n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Create a top-up](https://docs.stripe.com/api/topups/create)\n\nTop up the balance of an account\n\n### Parameters\n\n*   A positive integer representing how much to transfer.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the top-up object.\n\n```\ncurl https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for Jenny Rosen\" \\  -d statement_descriptor=Top-up\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Update a top-up](https://docs.stripe.com/api/topups/update)\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```",
    "title": "Top-ups | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_create",
    "markdown": "# Create a test-mode authorization | Stripe API Reference\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
    "title": "Create a test-mode authorization | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/financial_accounts",
    "markdown": "# Financial Accounts | Stripe API Reference\n\n## [The FinancialAccount object](https://docs.stripe.com/api/treasury/financial_accounts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    active\\_featuresarray of enums\n    \n    The array of paths to active Features in the Features hash.\n    \n*   The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. Currently, FinancialAccounts can only carry balances in USD.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    featuresnullable objectExpandable\n    \n    The features and their statuses for this FinancialAccount.\n    \n*   #### \n    \n    financial\\_addressesarray of objects\n    \n    The set of credentials that resolve to a FinancialAccount.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_featuresarray of enums\n    \n    The array of paths to pending Features in the Features hash.\n    \n*   #### \n    \n    platform\\_restrictionsnullable object\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n*   #### \n    \n    restricted\\_featuresarray of enums\n    \n    The array of paths to restricted Features in the Features hash.\n    \n*   The enum specifying what state the account is in.\n    \n*   Details related to the status of this FinancialAccount.\n    \n*   #### \n    \n    supported\\_currenciesarray of enums\n    \n    The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n    \n\nThe FinancialAccount object\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Create a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/create)\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```",
    "title": "Financial Accounts | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/transactions",
    "markdown": "# Transactions | Stripe API Reference\n\nTransactions represent changes to a [FinancialAccount’s](#financial_accounts) balance.\n\n## [The Transaction object](https://docs.stripe.com/api/treasury/transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   The change made to each of the FinancialAccount’s sub-balances by the Transaction.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    entriesnullable objectExpandable\n    \n    A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.\n    \n*   The FinancialAccount associated with this object.\n    \n*   ID of the flow that created the Transaction.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow that created the Transaction.\n    \n*   Type of the flow that created the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Status of the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/treasury/transactions/retrieve)\n\nRetrieves the details of an existing Transaction.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Transaction object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transactions/trxn_1MtkYw2eZvKYlo2ClMGIO54z \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [List all Transactions](https://docs.stripe.com/api/treasury/transactions/list)\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Transactions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/received_debits",
    "markdown": "# Received Debits | Stripe API Reference\n\n## [The ReceivedDebit object](https://docs.stripe.com/api/treasury/received_debits/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn’t have sufficient funds, is closed, or is frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be pulled from a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be pulled from a frozen FinancialAccount. |\n    | `insufficient_funds`<br><br>The FinancialAccount doesn’t have a sufficient balance. |\n    | `other`<br><br>Funds can’t be pulled from the FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about how a ReceivedDebit was created.\n    \n*   Other flows linked to a ReceivedDebit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The network used for the ReceivedDebit.\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedDebit might be reversed.\n    \n*   Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Retrieve a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/retrieve)\n\nRetrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedDebit object.\n\nGET /v1/treasury/received\\_debits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_debits/rd_1MtkUY2eZvKYlo2CT9SYD1AF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [List all ReceivedDebits](https://docs.stripe.com/api/treasury/received_debits/list)\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```",
    "title": "Received Debits | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/received_credits",
    "markdown": "# Received Credits | Stripe API Reference\n\n## [The ReceivedCredit object](https://docs.stripe.com/api/treasury/received_credits/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be sent to a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be sent to a frozen FinancialAccount. |\n    | `other`<br><br>Funds can’t be sent to FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod used to send a ReceivedCredit.\n    \n*   Other flows linked to a ReceivedCredit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The rails used to send the funds.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ach` |\n    | `card` |\n    | `stripe` |\n    | `us_domestic_wire` |\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedCredit may be reversed.\n    \n*   Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe ReceivedCredit object\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Retrieve a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/retrieve)\n\nRetrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedCredit object.\n\nGET /v1/treasury/received\\_credits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_credits/rc_1MtkSr2eZvKYlo2CcysvUbEw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [List all ReceivedCredits](https://docs.stripe.com/api/treasury/received_credits/list)\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```",
    "title": "Received Credits | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/tokens",
    "markdown": "# Tokens | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Ftokens)\n\n## [Tokens](https://docs.stripe.com/api/issuing/tokens)Preview feature\n\n## [The Token object](https://docs.stripe.com/api/issuing/tokens/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Card associated with this token.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    device\\_fingerprintnullable string\n    \n    The hashed ID derived from the device ID from the card network associated with the token.\n    \n*   The last four digits of the token.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The token service provider / card network associated with the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `mastercard`<br><br>MasterCard token service provider. |\n    | `visa`<br><br>Visa token service provider. |\n    \n*   #### \n    \n    network\\_datanullable objectPreview featureExpandable\n    \n    Additional details obtained from the network about the token, primarily related to the token creation process. For security reasons, this is only available to view in the first 24 hours after token creation, based on the `created` value, and will be omitted unless you explicitly request it with [the `expand` parameter](https://docs.stripe.com/api/expanding_objects). Additionally, it’s only available via the [“Retrieve a token” endpoint](https://docs.stripe.com/api/issuing/tokens/retrieve) and [“Update a token status” endpoint](https://docs.stripe.com/api/issuing/tokens/update).\n    \n*   #### \n    \n    network\\_updated\\_attimestamp\n    \n    Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.\n    \n*   The usage state of the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n*   #### \n    \n    wallet\\_providernullable enum\n    \n    The digital wallet for this token, if one was used.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `apple_pay`<br><br>Apple Pay. |\n    | `google_pay`<br><br>Google Pay. |\n    | `samsung_pay`<br><br>Samsung Pay. |\n    \n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Update a token status](https://docs.stripe.com/api/issuing/tokens/update)\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```",
    "title": "Tokens | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/tokens/object",
    "markdown": "# The Token object | Stripe API Reference\n\n## [The Token object](https://docs.stripe.com/api/issuing/tokens/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Card associated with this token.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    device\\_fingerprintnullable string\n    \n    The hashed ID derived from the device ID from the card network associated with the token.\n    \n*   The last four digits of the token.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The token service provider / card network associated with the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `mastercard`<br><br>MasterCard token service provider. |\n    | `visa`<br><br>Visa token service provider. |\n    \n*   #### \n    \n    network\\_datanullable objectPreview featureExpandable\n    \n    Additional details obtained from the network about the token, primarily related to the token creation process. For security reasons, this is only available to view in the first 24 hours after token creation, based on the `created` value, and will be omitted unless you explicitly request it with [the `expand` parameter](https://docs.stripe.com/api/expanding_objects). Additionally, it’s only available via the [“Retrieve a token” endpoint](https://docs.stripe.com/api/issuing/tokens/retrieve) and [“Update a token status” endpoint](https://docs.stripe.com/api/issuing/tokens/update).\n    \n*   #### \n    \n    network\\_updated\\_attimestamp\n    \n    Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.\n    \n*   The usage state of the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n*   #### \n    \n    wallet\\_providernullable enum\n    \n    The digital wallet for this token, if one was used.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `apple_pay`<br><br>Apple Pay. |\n    | `google_pay`<br><br>Google Pay. |\n    | `samsung_pay`<br><br>Samsung Pay. |\n    \n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Update a token status](https://docs.stripe.com/api/issuing/tokens/update)\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Token object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/tokens/list",
    "markdown": "# List all issuing tokens for card\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all issuing tokens for card | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/tokens/retrieve",
    "markdown": "# Retrieve an issuing token | Stripe API Reference\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve an issuing token | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/balance-transaction-types",
    "markdown": "# Balance transaction types | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the different types of balance transactions that represent funds moving through your Stripe account.\n\nBalance transactions are our recommended starting point for reporting on your account’s balance activity. We create them for every type of transaction that comes into, or flows out of, your Stripe account’s balance.\n\nYou can create reports that make use of balance transactions using the [API](https://docs.stripe.com/api/) or [Sigma](https://docs.stripe.com/stripe-data/query-transactions).\n\nWhen you first receive a payment in your account, we initially reflect it as a `pending` balance (less any Stripe fees). This balance becomes `available` according to your payout schedule. The [status](https://docs.stripe.com/api#balance_transaction_object-status) attribute on balance transactions indicates the type of the balance.\n\nTo classify transactions for [accounting purposes](https://docs.stripe.com/reports/reporting-categories), use the `reporting_category` field instead of the `type` field.\n\n## Balance transaction source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBalance transactions include a [source](https://docs.stripe.com/api#balance_transaction_object-source) field that contains the ID of the related Stripe object.\n\nUse the [API](https://docs.stripe.com/api/) to retrieve additional information about the payment activity that caused the creation of the Balance transaction. Using [Sigma](https://docs.stripe.com/stripe-data/query-transactions), you can also join the `balance_transactions` table with other tables using the `source_id` column.\n\n## Balance transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can organize balance transaction types into different groups based on the underlying activity that generated the balance transactions.\n\nIf you’re not using the Connect API or Issuing API, your balance transactions belong in the first two groups (“related to charges and payments” or “related to Stripe balance changes”).\n\n### Balance transaction types related to charges and payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese balance transaction types are related to creating and refunding charges as part of processing payments.\n\n| **Type** | **Description** |\n| --- | --- |\n| **charge** | Created when a [credit card charge](https://docs.stripe.com/payments/accept-a-payment-charges) is created successfully. |\n| **payment** | Created when a [local payment method](https://docs.stripe.com/payments/payment-methods/overview) charge is created successfully. |\n| **payment\\_failure\\_refund** | [ACH, direct debit](https://docs.stripe.com/payments/payment-methods/overview), and other [delayed notification payment methods](https://docs.stripe.com/payments/payment-methods#payment-notification) remain in a pending state until they either succeed or fail. You’ll see a pending Balance transaction of type `payment` when the payment is created. Another Balance transaction of type `payment_failure_refund` appears if the pending payment later fails. |\n| **payment\\_refund** | Created when a [local payment method](https://docs.stripe.com/payments/payment-methods/overview) refund is initiated.<br><br>Additionally, if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card) Stripe returns the funds to your balance. The returned funds are represented as a Balance transaction with the type `payment_refund`. |\n| **payment\\_reversal** | Created when a debit/failure related to a payment is detected from a banking partner. This balance transaction takes funds that were previously credited to the merchant for a payment out of the merchant balance. |\n| **refund** | Created when a [credit card charge refund](https://docs.stripe.com/refunds) is initiated.<br><br>If you [authorize and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) separately and the capture amount is less than the initial authorization, you see a balance transaction of type `charge` for the full authorization amount and another balance transaction of type `refund` for the uncaptured portion. |\n| **refund\\_failure** | Created when a [credit card charge refund](https://docs.stripe.com/refunds) fails, and Stripe returns the funds to your balance.<br><br>This may occur if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card). |\n\nThese balance transaction types are related to changes that affect your Stripe balance such as payouts, fees and top-ups.\n\n| **Type** | **Description** |\n| --- | --- |\n| **adjustment** | Adjustments correspond to additions or deductions from your Stripe balance that are made outside of the normal charge/refund flow. For example, some of the most common reasons for adjustments are:<br><br>*   **Refund failures**. If your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card) Stripe returns the funds to your balance. The returned funds are represented as a Balance transaction with the type `adjustment`, where the description indicates the related refund object.<br>*   **Disputes**. When a customer [disputes a charge](https://docs.stripe.com/disputes), Stripe deducts the disputed amount from your balance. The deduction is represented as a Balance transaction with the type `adjustment`, where the source object is a dispute.<br>*   **Dispute reversals**. When you [win a dispute](https://docs.stripe.com/disputes#responding-to-a-dispute), the disputed amount is returned to your balance. The returned funds are represented as a Balance transaction with the type `adjustment`, where the source object is a dispute.<br>*   In the past, fees for Stripe software and services (e.g., for Radar, Connect and Billing) were represented as adjustments.<br>*   In the past, Connect platform fee refunds were represented as adjustments.<br><br>The `description` field on the Balance transaction describes the purpose of each adjustment. |\n| **anticipation\\_repayment** | Repayments made to service an anticipation loan in Brazil. These repayments go to the financial institution to whom you have sold your receivables. |\n| **balance\\_transfer\\_inbound** | Funds moving into a balance (e.g. Issuing balance) from another balance (e.g. Stripe balance) |\n| **balance\\_transfer\\_outbound** | Funds moving from your Stripe balance to a different (e.g. Issuing) balance. |\n| **climate\\_order\\_purchase** | Funds used to purchase carbon removal units from Frontier Climate. |\n| **climate\\_order\\_refund** | Funds refunded to your balance when a Climate Order is canceled. |\n| **contribution** | Funds contributed via Stripe to a cause (currently Stripe Climate). |\n| **obligation\\_outbound** | Obligation for receivable unit received. |\n| **obligation\\_reversal\\_inbound** | Obligation for receivable unit reversed. |\n| **payment\\_network\\_reserve\\_hold** | Funds that a payment network holds in reserve (e.g. to mitigate risk). |\n| **payment\\_network\\_reserve\\_release** | Funds that a payment network releases from a reserve. |\n| **payment\\_unreconciled** | Created when a customer has unreconciled funds within Stripe for more than ninety days. This balance transaction transfers those funds to your balance. |\n| **payout** | [Payouts](https://docs.stripe.com/payouts) from your Stripe balance to your bank account. |\n| **payout\\_cancel** | Created when a payout to your bank account is cancelled and the funds are returned to your Stripe balance. |\n| **payout\\_failure** | Created when a [payout to your bank account fails](https://docs.stripe.com/payouts#payout-failures) and the funds are returned to your Stripe balance. |\n| **reserved\\_funds** | When Stripe holds your funds in reserve to mitigate risk, two balance transactions are created: one to debit the funds from your balance, and a second to credit the funds back to your balance at the end of the reserve period. |\n| **stripe\\_fee** | Fees for Stripe software and services (e.g., for [Radar](https://docs.stripe.com/radar), [Connect](https://docs.stripe.com/connect), [Billing](https://docs.stripe.com/billing), and [Identity](https://docs.stripe.com/identity)). |\n| **stripe\\_fx\\_fee** | Stripe currency conversion fee |\n| **tax\\_fee** | Taxes collected by Stripe to be remitted to the appropriate local governments. Typically, this is a tax on Stripe fees. |\n| **topup** | Funds you transferred into your Stripe balance from your bank account. [Learn more](https://docs.stripe.com/connect/top-ups). |\n| **topup\\_reversal** | If an initially successful top-up fails or is cancelled, the credit to your Stripe balance is reversed. [Learn more](https://docs.stripe.com/connect/top-ups). |\n\nThese balance transaction types are created as part of using the [Issuing API](https://docs.stripe.com/issuing).\n\n| **Type** | **Description** |\n| --- | --- |\n| **issuing\\_authorization\\_hold** | When [an issued card](https://docs.stripe.com/issuing) is used to make a purchase, an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is created. If the authorization is approved, a balance transaction is created with the type `issuing_authorization_hold` to hold the authorized amount in reserve from your account balance, until the authorization is either captured or voided. Some merchants can also update an authorization to request an additional amount (e.g., to extend a hotel booking or add a tip), and this is also represented as a balance transaction with the type `issuing_authorization_hold`. |\n| **issuing\\_authorization\\_release** | When an authorized purchase, made with [an issued card](https://docs.stripe.com/issuing), is captured by the merchant, the funds previously held for the authorization (`issuing_authorization_hold`) are released with a `issuing_authorization_release` balance transaction. Simultaneously, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance in another balance transaction with the type `issuing_transaction`. |\n| **issuing\\_dispute** | When you dispute an [Issuing transaction](https://docs.stripe.com/issuing/transactions) and funds return to your Stripe balance. |\n| **issuing\\_transaction** | When an authorized purchase, made with an [issued card](https://docs.stripe.com/issuing), has been authorized and captured by the merchant, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance with a `issuing_transaction` balance transaction. |\n\nThese balance transaction types are related to using the [Connect API](https://docs.stripe.com/connect) and related APIs, such as [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\n| **Type** | **Description** |\n| --- | --- |\n| **advance** | Incrementing available funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference. |\n| **advance\\_funding** | Decrementing pending funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference. |\n| **application\\_fee** | Earnings you’ve generated by collecting [platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) via [Stripe Connect charges](https://docs.stripe.com/connect/charges). |\n| **application\\_fee\\_refund** | [Platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) that you have returned to your connected accounts. |\n| **connect\\_collection\\_transfer** | If one of your connected accounts has a negative balance for 180 days, Stripe transfers a portion of your balance, to zero out that account’s balance. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances). |\n| **reserve\\_transaction** | If one of your connected accounts’ balances becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered.<br><br>If one of your connected accounts’ previously negative balance becomes less negative due to activity on account, another `reserve_transaction` is created to release a corresponding portion of the funds held in reserve. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances). |\n| **transfer** | Funds sent from your balance to the balance of your [connected accounts](https://docs.stripe.com/connect/separate-charges-and-transfers). |\n| **transfer\\_cancel** | Transfers to your connected accounts that have been cancelled. |\n| **transfer\\_failure** | Transfers to your connected accounts that failed. Transfer failures add to your platform’s balance and subtract from the connected account’s balance. |\n| **transfer\\_refund** | Transfers to your connected accounts that you [reversed](https://docs.stripe.com/connect/separate-charges-and-transfers#reversing-transfers) or that were reversed as a result of a failure in [payments](https://docs.stripe.com/payments/payment-methods/overview) made through ACH, direct debit, and other [delayed notification payment methods](https://docs.stripe.com/payments/payment-methods#payment-notification). Transfer reversals add to your platform’s balance and subtract from the connected account’s balance. |",
    "title": "Balance transaction types | Stripe Documentation",
    "description": "Learn more about the different types of balance transactions that represent funds moving through your Stripe account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/tokens/update",
    "markdown": "# Update a token status | Stripe API Reference\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a token status | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/transactions/test_mode_refund",
    "markdown": "# Refund a test-mode transaction | Stripe API Reference\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Refund a test-mode transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund",
    "markdown": "# Create a test-mode unlinked refund\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a test-mode unlinked refund | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/debit_reversals",
    "markdown": "# Debit Reversals | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftreasury%2Fdebit_reversals)\n\n## [The DebitReversal object](https://docs.stripe.com/api/treasury/debit_reversals/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    linked\\_flowsnullable object\n    \n    Other flows linked to a DebitReversal.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedDebit being reversed.\n    \n*   Status of the DebitReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The network has resolved the DebitReversal against the user. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    | `succeeded`<br><br>The network has resolved the DebitReversal in the users favour. A crediting Transaction is created. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Create a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/create)\n\nReverses a ReceivedDebit and creates a DebitReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_debitstringRequired\n    \n    The ReceivedDebit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a DebitReversal object.\n\nPOST /v1/treasury/debit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_debit=rd_1MtkMLLkdIwHu7ixoiUFN4qd\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Retrieve a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/retrieve)\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```",
    "title": "Debit Reversals | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account_links",
    "markdown": "# Account Links | Stripe API Reference\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [The Account Link object](https://docs.stripe.com/api/account_links/object)\n\n### Attributes\n\n*   The timestamp at which this account link will expire.\n    \n*   The URL for the account link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Create an account link](https://docs.stripe.com/api/account_links/create)\n\nCreates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.\n\n### Parameters\n\n*   The identifier of the account to create an account link for.\n    \n*   The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_onboarding`<br><br>Provides a form for inputting outstanding requirements. Send the user to the form in this mode to just collect the new information you need. |\n    | `account_update`<br><br>Displays the fields that are already populated on the account object, and allows your user to edit previously provided information. Consider framing this as “edit my profile” or “update my verification information”. |\n    \n*   #### \n    \n    refresh\\_urlstringRequired\n    \n    The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link’s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.\n    \n*   The URL that the user will be redirected to upon leaving or completing the linked flow.\n    \n\n### More parameters\n\n### Returns\n\nReturns an account link object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/account_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1Mt0CORHFI4mz9Rw \\  --data-urlencode refresh_url=\"https://example.com/reauth\" \\  --data-urlencode return_url=\"https://example.com/return\" \\  -d type=account_onboarding\n```\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Account Links | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers",
    "markdown": "# Moving money with Treasury using InboundTransfer objects\n\n## Learn how to transfer money from another account you own into a Treasury financial account.\n\nInbound transfers move money from an external US bank account into a financial account using the ACH network. These transfers are initiated with [InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers) objects.\n\nInbound transfers take 2-4 business days to complete unless you’re using the same-day ACH capability. For more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#inboundtransfer-transactions) guide.\n\n#### Note\n\nYou can use inbound transfers to move funds from a financial account owner’s bank account. To accept funds from an external party into a financial account, use an [ACH Debit](https://docs.stripe.com/payments/ach-debit/accept-a-payment) into the Payments balance, followed by a [payout to the financial account](https://docs.stripe.com/treasury/moving-money/payouts).\n\n[](#createibt)\n\nUse `POST /v1/treasury/inbound_transfers` to create an `InboundTransfer` object, which represents pull-based transfers from an external account that you own into your financial account. In other words, you create an `InboundTransfer` to move funds into your financial account by debiting your external US bank account. You must include the following parameters with your request:\n\n*   `amount`: The amount in cents to be transferred into the financial account.\n*   `currency`: Three-letter ISO currency code (`usd` is currently the only supported value).\n*   `financial_account`: The ID of the financial account receiving the transfer.\n*   `origin_payment_method`: The source of funds for the inbound transfer. You must first set up the account-attached payment method for inbound flows and verify the bank account using a [SetupIntent](https://docs.stripe.com/api/setup_intents). Alternatively, you can use an existing [BankAccount](https://docs.stripe.com/api/customer_bank_accounts) previously set up as a verified [ExternalAccount](https://docs.stripe.com/api/external_accounts). Whether you use a payment method or a bank account, you need the [account owner’s permission](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects) to debit the funds from the account.\n\nThe following JSON shows the data you can include in the body of your request.\n\n`{   // The source PaymentMethod or BankAccount. Funds are pulled from this account.   \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\" | \"{{BANK_ACCOUNT_ID}}\",   // The destination FinancialAccount. Funds arrive in this account.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to debit. 10.00 USD in this case.   \"amount\": 1000,   \"currency\": \"usd\",   // An optional, internal description for the InboundTransfer.   \"description\": \"Funds for vendor payment payment_234281\",   // An optional descriptor for the InboundTransfer to send   // to the network with the debit request. Max 10 characters   \"statement_descriptor\": \"payment_1\",   // Stripe does not support updating InboundTransfers after creation.   // You can only set metadata at creation time.   \"metadata\": null | {{Hash}} }`\n\nThe following request transfers 200 USD using an account-attached payment method into the financial account with the provided ID. The `Stripe-Account` header value identifies the Stripe account that owns both the financial account and the payment method.\n\n`curl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d origin_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=20000 \\  -d currency=usd \\  -d description=\"Funds for repair\" \\  -d statement_descriptor=\"Invoice 12\"`\n\nIf successful, the response provides the `InboundTransfer` object. The object includes a `hosted_regulatory_receipt_url` that provides access to details of the transaction for the account holder on your platform.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Funds for repair\",     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{IBT_URL}}\",     \"linked_flows\": null,     \"livemode\": false,     \"metadata\": {},     \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     ...     \"statement_descriptor\": \"Invoice 12\",     \"status\": \"processing\",     ... }`\n\n#### Warning\n\nIn rare cases, Stripe might cancel an InboundTransfer request due to various risk factors. In these scenarios, the API request errors with response code 402. The error message provides additional detail on the risk factors that led to the intervention.\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables funds to arrive in the originating financial account within the same business day if the `InboundTransfer` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--inbound). To use same-day ACH, set the `origin_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n#### Note\n\nThe fast settlement of same-day ACH inbound transfers can expose your platform to greater financial risk than from standard ACH inbound transfers. For example, a connected account can initiate an inbound transfer that gets returned due to insufficient funds in the source account. Same-day settlement leaves more time to potentially withdraw the funds from the financial account before they’re returned. If the connected account withdraws the funds, and then the return causes a negative balance in the financial account, [your platform is responsible](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions#overdrafts)\n\n[](#getibt)\n\nUse `GET /v1/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}` to retrieve the `InboundTransfer` object with the associated ID.\n\nThe following JSON shows the data you can include in the body of your request. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{INBOUND_TRANSFER_ID}}\",   \"object\": \"inbound_transfer\",   \"livemode\": false,   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // The only current valid PaymentMethod type for InboundTransfers is us_bank_account   \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",`\n\nThe following request retrieves the `InboundTransfer` with the `id` value of `{{INBOUND_TRANSFER_ID}}`. Including `transaction` in the `expand[]` array of the body returns the relevant expanded information.\n\n`curl -G https://api.stripe.com/v1/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=financial_account`\n\nIf successful, the response returns the `InboundTransfer` object with the expanded information.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Inbound transfer\",     \"failure_details\": null,     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{INBOUND_TRANSFER_ID}}\",`\n\n[](#listibt)\n\nUse `GET /v1/treasury/inbound_transfers` to retrieve all the `InboundTransfers` for the financial account with the associated ID. You can filter the list with the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"succeeded\" | \"failed\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Required }`\n\nThe following request retrieves all the inbound transfers with a status of `succeeded` for the financial account with ID `{{FINANCIAL_ACCOUNT_ID}}`, which is attached to the connected account with ID `{{CONNECTED_ACCOUNT_ID}}`.\n\n`curl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d status=succeeded`\n\n[](#ibtstates)\n\nThe following table describes each status and what the possible transition states are.\n\n| STATUS | DESCRIPTION | TRANSITIONS TO STATE |\n| --- | --- | --- |\n| `processing` | The `InboundTransfer` creation succeeded. Stripe instructs movement of funds on the network. | `failed`, `canceled`, `succeeded` |\n| `failed` (terminal) | The `InboundTransfer` failed to confirm. No transaction was created, and the `payment_method` hasn’t been debited. | N/A |\n| `canceled` (terminal) | The `InboundTransfer` was canceled prior to submission to the network. Stripe voids the transaction and no funds are moved from the external bank account. | N/A |\n| `succeeded` (terminal) | The `InboundTransfer` succeeded and funds have landed in the account. A Transaction has been created. InboundTransfers can be returned after succeeding if the external account pulls back their funds, which is represented by a linked ReceivedDebit. | N/A |\n\n[](#testingibts)\n\nTo test your integration end-to-end, use the [SetupIntents requests in test mode](https://docs.stripe.com/api/setup_intents) to create a `PaymentMethod`, then pass that `PaymentMethod` into an `InboundTransfer` creation request. Valid `PaymentMethods` result in succeeded `InboundTransfers`, while invalid `PaymentMethods` (for example, of unsupported types, containing an unverified bank account, or not set up for inbound flows) throw the same errors as in live mode.\n\n[](#testingibtstate)\n\nStripe also provides a set of test `PaymentMethod` tokens you can use to trigger specific state transitions:\n\n| PAYMENT\\_METHOD VALUE | RESULT |\n| --- | --- |\n| `pm_usBankAccount` | `InboundTransfer` that transitions from `processing` to `succeeded`. |\n| `pm_usBankAccount_processing` | `InboundTransfer` that remains in the `processing` state. |\n| `pm_usBankAccount_internalFailure` | `InboundTransfer` that transitions from `processing` to `failed`. |\n\nTo test various edge cases more quickly, `PaymentMethod` tokens simulate specific failure types:\n\n| PAYMENT\\_METHOD VALUE | RESULT |\n| --- | --- |\n| `pm_usBankAccount_noAccount` | `InboundTransfer` that transitions to failed with `failure_details.code= \"no_account\"`. |\n| `pm_usBankAccount_accountClosed` | `InboundTransfer` that transitions to `failed` with `failure_details.code= \"account_closed\"`. |\n| `pm_usBankAccount_invalidAccountNumber` | `InboundTransfer` that transitions to failed with `failure_details.code= \"invalid_account_number\"`. |\n| `pm_usBankAccount_insufficientFunds` | `InboundTransfer` that transitions to failed with `failure_details.code= \"insufficient_funds\"`. |\n| `pm_usBankAccount_debitNotAuthorized` | `InboundTransfer` that transitions to failed with `failure_details.code= \"debit_not_authorized\"`. |\n| `pm_usBankAccount_dispute` | `InboundTransfer` that transitions from `processing` to `succeeded` and is later disputed. `inbound_transfer.returned` becomes `true`, and a linked `ReceivedDebit` is created. |\n\nIn all cases, the `InboundTransfer` response begins in the `processing` state. You receive [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `InboundTransfer` after creation returns the expected state.\n\n[](#ibthelperendpoints)\n\nStripe also provides endpoints that enable you to test `InboundTransfers` in different states. Create an `InboundTransfer`, then:\n\n*   Use the [test `succeed` endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed) to move the transfer with the associated ID directly into the `succeeded` state.\n    \n    `POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/succeed`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail) to move the transfer with the associated ID directly into the `failed` state.\n    \n    `POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/fail`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require action from the external account the InboundTransfer was pulling funds from.\n\nInclude the optional `failure_details.code` parameter in the body to indicate why the transfer failed. If you don’t provide it, the transfer fails with the default `could_not_process` failure code.\n\n`{   \"failure_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" | // Generic fallback code           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\"   } }`\n\nTreasury also provides a `return` endpoint to simulate an InboundTransfer that succeeds, but is later returned.\n\nUse the [test return endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return) to initiate the simulated return on the `InboundTransfer` with the associated ID.\n\n`POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/return`\n\nAll test endpoints trigger [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `InboundTransfer` after transition returns the expected state.\n\n[](#ibtwebhooks)\n\nStripe emits the following `InboundTransfer` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.inbound_transfer.created` on `InboundTransfer` creation.\n*   `treasury.inbound_transfer.{{new_status}}` when an `InboundTransfer` changes status. Available status value options include:\n    *   `treasury.inbound_transfer.succeeded`\n    *   `treasury.inbound_transfer.failed`",
    "title": "Moving money with Treasury using InboundTransfer objects | Stripe Documentation",
    "description": "Learn how to transfer money from another account you own into a Treasury financial account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers",
    "markdown": "# Moving money with Treasury using OutboundTransfer objects\n\n## Learn how to transfer money out of Treasury financial accounts to external accounts.\n\nAn `OutboundTransfer` object facilitates money movement out of a financial account. Use `OutboundTransfer` to send funds over ACH rails or through a domestic wire transfer to an external bank account that a connected account owns.\n\nOutbound transfers typically arrive at the receiving bank between the same day and 2 business days, depending on whether you use a wire or ACH.\n\n#### Note\n\nMulti FA beta If enrolled in the Multi FA beta, you can use `OutboundTransfer` to send funds over `stripe` network rails to another financial account associated with the same connected account. Funds arrive in the destination financial account within minutes.\n\nFor more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#outboundpayment-and-outboundtransfer-transactions) guide.\n\n`OutboundTransfers` support the `us_bank_account` type of payment method. Alternatively, you can use an existing [BankAccount](https://docs.stripe.com/payments/ach-debit/migrating-from-charges) that belongs to the merchant as an [ExternalAccount](https://docs.stripe.com/api/external_accounts).\n\n[](#createobt)\n\nUse `POST /v1/treasury/outbound_transfers` to create an [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/create) for the financial account with the associated ID. Among the request’s possible parameters, four are required:\n\n*   `amount`: Amount of transfer in cents.\n*   `currency`: Three-letter ISO currency code.\n*   `financial_account`: Source financial account ID to pull funds from.\n*   `destination_payment_method`: Destination `PaymentMethod` ID or `BankAccount` ID to receive funds.\n\n``{   // The source financial account to pull funds from.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to send. 10.00 USD in this case.   \"amount\": 1000,   \"currency\": \"usd\",   // The destination PaymentMethod or BankAccount.   \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\"  | \"{{BANK_ACCOUNT_ID}}\",   // Optionally, to explicitly specify a network, override the `network` value   \"destination_payment_method_options\": {     \"us_bank_account\": {       \"network\": \"ach\" | \"us_domestic_wire\"     }   },   // A description visible on the external bank statement.   \"statement_descriptor\": \"Bank xfer\",   // An optional internal description to identify this OutboundTransfer   \"description\": \"Transfer to my external account\",   // Stripe does not support updating originated transfers after creation.   // You can only set metadata at creation.   \"metadata\": nil | Hash, }``\n\nThe following request creates an `OutboundTransfer` on an account-attached `PaymentMethod` with the source of funds coming from the identified financial account.\n\n`curl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=1000 \\  -d currency=usd \\  -d destination_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d statement_descriptor=\"Test xfer\" \\  -d \"destination_payment_method_options[us_bank_account][network]\"=ach`\n\nIf successful, the response returns the newly created `OutboundTransfer` object.\n\n`{     \"id\": \"{{OUTBOUND_TRANSFER_ID}}\",     \"object\": \"outbound_transfer\",     \"amount\": 1000,     \"cancelable\": true,     \"created\": 1648479987,     \"currency\": \"usd\",     \"description\": null,     \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     \"destination_payment_method_details\": {`\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables sending funds that arrive the same business day if the `OutboundTransfer` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--outbound). To use same-day ACH, set the `destination_payment_method_options.us_bank_account.network` parameter to `ach` and the `destination_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n### Wire transfer: routing numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome banks might use a separate wire transfer routing number that differs from ACH. Consequently, you might receive an error during wire creation if the routing number on the payment method doesn’t support wire transfers. If you receive this error, you need to add a new payment method with your bank’s wire routing number.\n\n### Wire transfer: recipient address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWire transfers require ACH metadata plus recipient name and billing address. The address is the address of the account holder receiving the wire, not the address of their bank.\n\nWhen entering the `billing_details.address` for a payment method, all address fields must be complete. Attempting to send a wire with incomplete fields on the `billing_details.address` results in an error.\n\n#### Note\n\nWhen sending a wire using an `OutboundTransfer`, if you don’t fill out any address fields, Stripe defaults to the legal entity of the primary Stripe account holder.\n\n[](#retrieveobt)\n\nUse `GET /v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}` to retrieve details for the `OutboundTransfer` with the associated ID.\n\nThe following request retrieves the `OutboundTransfer` with the associated ID, expanding the details of the `Transaction`.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=transaction`\n\nIf successful, the response returns the `OutboundTransfer` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{OUTBOUND_TRANSFER_ID}}\",   \"object\": \"outbound_transfer\",   \"livemode\": Boolean,   \"created\": Timestamp,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"description\": \"Transfer to my external account\",`\n\n[](#cancelobt)\n\nUse `POST /v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/cancel` to cancel the `OutboundTransfer` with the associated ID. The `OutboundTransfer` object includes a `cancelable` parameter with a Boolean value to indicate whether you can cancel the transfer. After an `OutboundTransfer` submits to the network, the `cancelable` value becomes `false` and you receive an error from this endpoint for that transfer.\n\n`curl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundTransfer` object with a status of `canceled`.\n\n`{     \"id\": \"{{OUTBOUND_TRANSFER_ID}} \",     \"object\": \"outbound_transfer\",     \"amount\": 1000,     \"cancelable\": false,     \"created\": 1648487177,     \"currency\": \"usd\",     ...     \"status\": \"canceled\",     \"status_transitions\": {         \"canceled_at\": 1648487198,         \"failed_at\": null,         \"posted_at\": null,         \"returned_at\": null     },     \"transaction\": \"{{TRANSACTION_ID}}\" }`\n\n[](#listobt)\n\nUse `GET /v1/treasury/outbound_transfers` to list the `OutboundTransfers` sent from the financial account with the ID of the `financial_account` parameter. You can filter the list with the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"posted\" | \"failed\" | \"returned\" | \"canceled\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", }`\n\nThe following request retrieves `OutboundTransfers` from the financial account identified. The included parameters limit the response to the first three transfers after the `OutboundTransfer` with the provided ID.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=3 \\  -d starting_after={{OUTBOUND_TRANSFER_ID}}`\n\nIf successful, the response returns a list of [OutboundTransfer objects](https://docs.stripe.com/api/treasury/outbound_transfers/object) that satisfy any filtering conditions.\n\n[](#statesobt)\n\nThe following table describes each `status` for `OutboundTransfers` and what the possible transition states are.\n\n| STATUS | DESCRIPTION | TRANSITIONS TO STATE |\n| --- | --- | --- |\n| `processing` | The `OutboundTransfer` starting state. Funds are allotted to a pending transaction (but are still part of the current balance). The user can cancel the `OutboundTransfer` while the value of the `cancelable` parameter is `true`. | `posted`, `canceled`, `failed` |\n| `canceled` (terminal) | A user canceled the `OutboundTransfer` before posting. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `posted` | The `OutboundTransfer` has been sent to the network and funds have left the account (with the transaction posting). | `returned` |\n| `returned` (terminal) | The `OutboundTransfer` failed to successfully arrive at the destination (for example, due to incorrect account details). Stripe returns the funds to the user with `returned_details[transaction]`. | N/A |\n| `failed` (terminal) | The `OutboundTransfer` failed to be sent to the network. Stripe voids the pending transaction and returns the funds to the user. Stripe might use this state to indicate internal errors. | N/A |\n\n[](#testingobt)\n\nIn test mode, you can specify the `destination_payment_method` as a test mode payment method. You can create your own test mode [PaymentMethods](https://docs.stripe.com/api/payment_methods) or use our test IDs when testing your integration.\n\n| TYPE | OUTCOME | PAYMENT METHOD |\n| --- | --- | --- |\n| `us_bank_account` | Default, transitions to `posted`. | `pm_usBankAccount` |\n| `us_bank_account` | Transitions to `posted`, adds one day to the original `expected_arrival_date`. | `pm_usBankAccount_expectedArrivalDateUpdated` |\n| `us_bank_account` | Remains in `processing`. | `pm_usBankAccount_processing` |\n| `us_bank_account` | Transitions to `canceled`. | `pm_usBankAccount_canceledByUser` |\n| `us_bank_account` | Transitions to `failed`. | `pm_usBankAccount_internalFailure` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"no_account\"`. | `pm_usBankAccount_noAccount` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"account_closed\"`. | `pm_usBankAccount_accountClosed` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"invalid_account_number\"`. | `pm_usBankAccount_invalidAccountNumber` |\n\nIn all cases, the `OutboundTransfer` response is in the `processing` state. Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for the relevant state transitions, and fetching the `OutboundTransfer` after creation returns the expected state.\n\n### OutboundTransfer test helper endpoints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides endpoints to help you test `OutboundTransfers` in different states. After creating an `OutboundTransfer`, use these endpoints to move the `OutboundTransfer` directly to a new state of `posted`, `failed`, `canceled`, or `returned`.\n\n*   Use the [test post endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post) to move the identified `OutboundTransfer` from `processing` to `posted`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/post`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail) to move the identified `OutboundTransfer` from `processing` to `failed`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/fail`\n    \n*   Use the [test return endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return) to move the identified `OutboundTransfer` from `posted` to `returned`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/return`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require outside action.\n\nFor the `return` endpoint, include the optional `returned_details.code` parameter in the body to indicate why the transfer was returned. If not provided, the transfer defaults to the `declined` return code.\n\n`{   \"returned_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" |           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\" |           \"declined\"   } }`\n\nWe also provide a [test update endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update) to simulate the posting of tracking details on a test mode `Outbound Transfer`. The `tracking_details` field can only be set for test mode objects.\n\nIn all cases, Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `OutboundTransfer` after transition returns the expected state.\n\n[](#obtwebhooks)\n\nStripe emits the following `OutboundTransfer` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.outbound_transfer.created` on OutboundTransfer creation.\n*   `treasury.outbound_transfer.{{new_status}}` when an OutboundTransfer changes status. Available status value options include:\n    *   `treasury.outbound_transfer.posted`\n    *   `treasury.outbound_transfer.failed`\n    *   `treasury.outbound_transfer.returned`\n    *   `treasury.outbound_transfer.canceled`\n*   `treasury.outbound_transfer.expected_arrival_date_updated` when the `expected_arrival_date` of an OutboundTransfer changes.\n*   `treasury.outbound_transfer.tracking_details_updated` when the tracking details for an `OutboundTransfer` are updated.",
    "title": "Moving money with Treasury using OutboundTransfer objects | Stripe Documentation",
    "description": "Learn how to transfer money out of Treasury financial accounts to external accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit",
    "markdown": "# ACH Direct Debit | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how businesses can accept payments with ACH Direct Debit.\n\nACH lets you accept payments from customers with a US bank account. ACH Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. It can take [up to 4 business days](https://docs.stripe.com/payments/ach-debit#timing) to receive acknowledgement of success or failure. Because ACH Direct Debit isn’t a guaranteed payment method, there’s a risk of failed payments and [disputes](https://docs.stripe.com/payments/ach-debit#disputed-payments).\n\nAccepting bank accounts is slightly different from accepting cards:\n\n1.  Your customer must [authorize](https://docs.stripe.com/payments/ach-debit#mandates) the payment terms.\n2.  Bank accounts must be [verified](#verification).\n\n*   **Customer locations**\n    \n    US\n    \n*   **Presentment currency**\n    \n    USD\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    2-5 days\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nAt checkout, the customer selects **ACH Direct Debit**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nThe customer signs into their bank account to provide account information.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nThe merchant presents the mandate. The customer accepts it by completing the purchase.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nThe customer is notified when payment is complete.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf ACH is all you want, learn how to [accept a payment](https://docs.stripe.com/payments/ach-debit/accept-a-payment) with ACH. Below are options to skip writing that code.\n\n### Dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou don’t have to integrate ACH Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable ACH Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add ACH Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\n### Manually add each payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you prefer to manually list payment methods or want to save ACH Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure ACH Direct Debit as a payment](https://docs.stripe.com/payments/ach-debit/accept-a-payment)\n*   [Save ACH Direct Debit details for future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment)\n\n## Timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith ACH Direct Debit, it can take time for funds to become available in your Stripe balance. The amount of time it takes for funds to become available is referred to as the settlement timing. The following tables describe the settlement timings for ACH Direct Debit payments that Stripe offers.\n\nInitial payments made from select bank accounts that use temporary account numbers with Financial Connections might be subject to settlement delays.\n\n| Settlement type | Timing | Cutoff time | Additional information |\n| --- | --- | --- | --- |\n| Standard settlement (T+4) | 4 business days from payment creation | 21:00 US/Eastern | After ACH Direct Debit payments settle to your Stripe account balance, we make payouts to your bank account according to your set payout schedule. |\n| Faster settlement (T+2) | 2 business days from payment creation | 14:00 US/Eastern | This option is available only to eligible US users. You can check your eligibility and activate this option on the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). For more information on faster settlement, see the [Support](https://support.stripe.com/questions/two-day-settlement-for-ach-direct-debit) page. |\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/settlement-timings.a7d03de51dbe6630245b69df27038ce1.svg)\n\nA diagram showing the two settlement timings for ACH Direct Debit: standard (4 days) and faster (2 days).\n\nFor information on how to cancel payments, see [Refund and cancel payments](https://docs.stripe.com/refunds#cancel-payment).\n\n## ACH transaction failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH Direct Debit transactions can fail any time after the payment is initiated through payment confirmation. These failures can occur for a number of reasons, such as:\n\n*   Insufficient funds\n*   An invalid account number\n*   A customer disabling debits from their bank account\n\nIf a payment fails after funds have been made available in your Stripe balance, Stripe immediately removes funds from your Stripe account.\n\nIn rare situations, Stripe might receive an ACH failure from the bank after a PaymentIntent has transitioned to `succeeded`. If this happens, Stripe creates a dispute with a `reason` of:\n\n*   `insufficient_funds`\n*   `incorrect_account_details`\n*   `bank_cannot_process`\n\nStripe charges a failure fee in this situation.\n\n## Verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn about [validation and verification](https://support.stripe.com/questions/nacha-bank-account-validation-rule) requirements.\n\nStripe lets your customers securely share their financial data by linking their financial accounts to your business. Use [Financial Connections](https://docs.stripe.com/financial-connections) to access customer-permissioned financial data such as tokenized account and routing numbers, balance data, ownership details, and transaction data.\n\nYour customers might enter their bank account manually instead of authenticating with Stripe Financial Connections. In these cases, Stripe provides a fully-hosted flow for collecting bank account details and verifies them with microdeposits.\n\nWhen you use [Stripe.js](https://docs.stripe.com/payments/elements), our JavaScript library for building payment flows, Stripe provides a fully-hosted collection of bank account details, instant bank verification, and (if needed) delayed verification using microdeposits. This verification process is a requirement for many businesses, and it helps reduce payment failures and fraudulent activities.\n\n## ACH Mandates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nACH Direct Debit rules require that you first get authorization from a customer to take payments before you can debit their bank account. To obtain authorization, you present a mandate to them. This mandate specifies the terms for one-time or recurring payments. The customer must agree to this mandate before you can collect any payments from their bank account.\n\nWhen you use Stripe to initiate ACH transactions with your customers, make sure you have all the necessary authorizations and approvals from your customers for Stripe to transmit an ACH debit transaction to the customer’s bank account. The information you provide Stripe about each ACH transaction must be accurate and complete, including the name of your customer that authorized you to initiate the ACH transaction to their bank account.\n\n#### Types of mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two types of mandates: online and offline.\n\n*   **Online mandates**: Appear as part of the payment flow on a website. Customers accept online mandates through a user interface element, such as clicking an **Accept** or **Pay** button, or by checking a box.\n    \n*   **Offline mandates**: Require that you present the specific terms of the transaction to your customer in writing or over the phone. The customer accepts those terms when they sign the paper or verbally agree to the terms over the phone. See the [details on the offline mandate types](https://docs.stripe.com/payments/ach-debit/sec-codes) Stripe supports.\n    \n\nStripe displays an online mandate on the payment page for you if you use one of the following hosted products:\n\n*   Checkout\n*   Payment Element\n*   Hosted Invoices Page\n\n### Mandates for online custom payment forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor custom payment forms that directly integrate with the Payment Intents API, you must display the mandate terms on your payment page before confirming the PaymentIntent or SetupIntent.\n\nYou only need to display a mandate the first time you collect a customer’s bank account.\n\n#### Recommended mandate text (online)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend that you use the following mandate text for your online custom payment form. This text must include the customer’s name, bank account information, and the date.\n\nFor details on displaying the correct business name for Connect users, see [merchant of record and statement descriptors](#connect-merchant-of-record).\n\nBy clicking \\[accept\\], you authorize Rocket Rides to debit the bank account specified above for any amount owed for charges arising from your use of Rocket Rides’ services and/or purchase of products from Rocket Rides, pursuant to Rocket Rides’ website and terms, until this authorization is revoked. You may amend or cancel this authorization at any time by providing notice to Rocket Rides with 30 (thirty) days notice.\n\nIf you plan to use the customer’s bank account for future payments with the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter or by [saving bank details](https://docs.stripe.com/payments/ach-debit/set-up-payment) for a future payment, also include:\n\nIf you use Rocket Rides’ services or purchase additional products periodically pursuant to Rocket Rides’ terms, you authorize Rocket Rides to debit your bank account periodically. Payments that fall outside of the regular debits authorized above will only be debited after your authorization is obtained.\n\n#### Caution\n\nIf you originate recurring preauthorized debits, you must disclose to your customers how these amounts are calculated or a range the customer can anticipate. You must also give your customer at least 7 calendar days notice if you change the timing of any recurring preauthorized debits.\n\n### Mandate and microdeposit emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, if your customer provides a [billing email address](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe automatically emails your customer the following information:\n\n*   Confirmation of the mandate, per Nacha requirements.\n*   Notification if Stripe needs to use microdeposits to verify your customer’s bank account. These notification emails link to a hosted verification page.\n\n#### Sending custom mandate notifications (online)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can send custom mandate notifications to customers.\n\nTo send custom mandate notifications:\n\n1.  Turn off Stripe emails in the Stripe Dashboard [email settings](https://dashboard.stripe.com/settings/emails)\n2.  Send a mandate confirmation email when you receive your customer’s bank account and mandate authorization.\n\nIn the email, include the following information:\n\n*   Authorization date\n*   Account holder name\n*   Financial institution\n*   Routing number\n*   Last four digits of the account number\n\nThe following is a sample mandate confirmation email that you can send.\n\n|     |     |\n| --- | --- |\n| Agreement Date | **June 28, 2021** |\n| Account Holder Name | **Jenny Rosen** |\n| Financial Institution | **Chase Bank** |\n| Routing Number | **021000021** |\n| Account Number | \\*\\*\\*\\***6789** |\n\nThank you for signing up for direct debits from Rocket Rides. You have authorized Rocket Rides to debit the bank account specified above for any amount owed for charges arising from your use of Rocket Rides’ services and/or purchase of products from Rocket Rides, pursuant to Rocket Rides’ website and terms, until this authorization is revoked. You may amend or cancel this authorization at any time by providing notice to Rocket Rides with 30 (thirty) days notice.\n\nIf you collected the customer’s bank account for future payments with the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter or by [saving bank details](https://docs.stripe.com/payments/ach-debit/set-up-payment), also include:\n\nYou have authorized Rocket Rides to debit your bank account periodically if and when you use Rocket Rides’ services or purchase more than one of Rocket Rides’ products periodically pursuant to Rocket Rides’ terms. Payments that fall outside of the regular debits authorized above will only be debited after your authorization is obtained.\n\n#### Caution\n\n## ACH disputes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nACH Direct Debit provides a dispute process for bank account holders to dispute payments. Customers can generally dispute a payment through their bank for up to 60 calendar days after a debit on a personal account, or up to 2 business days for a business account. In rare instances, a debit payment can be successfully disputed outside these timelines. This is called a late return. The late return process is primarily managed by and ultimately decided at the discretion of the banks involved in the transaction.\n\nWhen a dispute is created, Stripe sends both the [charge.dispute.created](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created) and [charge.dispute.closed](https://docs.stripe.com/api/events/types#event_types-charge.dispute.closed) [webhook](https://docs.stripe.com/webhooks \"webhook\") events and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike credit card disputes, all ACH Direct Debit disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation.\n\n#### Caution\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. Follow the guidelines in the following section on refunds to avoid this situation.\n\n### Resolving disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer disputes an ACH Direct Debit payment, it invalidates the mandate associated with the payment method and you can’t reuse it. To attempt a charge again, you must resolve the dispute with the customer and [collect a new mandate authorization](https://docs.stripe.com/payments/ach-debit/accept-a-payment#resolving-disputes).\n\nIf they dispute a subsequent payment, Stripe blocks the bank account from further re-use. To learn more about resolution steps, see [Blocked bank accounts](https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts).\n\n## ACH refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have a maximum of 180 days from the date of the original payment to submit a refund for an ACH Direct Debit payment. Refunds require at least 3 business days to process.\n\n#### Avoid disputes\n\nIf you accidentally debit your customer, contact them immediately to avoid a payment dispute. Factors such as slightly longer settlement time periods and the way banks process ACH Direct Debit transactions can cause confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction, so it’s important to communicate with your customer about the processing time and the status of their refund.\n\nIf you request a refund for a payment that hasn’t completed yet (within a few hours of creating the Payment Intent), Stripe doesn’t submit the charge to the bank, essentially canceling the original payment rather than refunding it.\n\nStripe doesn’t explicitly label ACH Direct Debit refunds as refunds when we deposit the funds back to a customer’s bank account. Instead, we process refunds as a credit and include a reference to the statement descriptor for the original payment.\n\n## Statement descriptors for ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery ACH Direct Debit payment shows up on customers’ bank statements with the _name of the merchant_. For payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, specify the [`statement_descriptor`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nYour statement descriptor truncates to the first 16 alphanumeric characters on the bank statement. For example, if your statement descriptor is `ROCKETRIDESLIMITED`, the customer sees `ROCKETRIDESLIMIT`.\n\nAdditionally, statement descriptors cannot use the special characters `<`, `>`, `'`, or `\"`.\n\nThe table below illustrates the _merchant name_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Bank statement descriptor |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `Rocket Rides` | `Rocket Rides` |\n| Rocket Rides | `Sunday Ride` | `Rocket Rides` | `Sunday Ride` |\n\nEach bank formats these fields differently. Depending on your customer’s bank, some fields may appear in all lowercase or uppercase.\n\n## Connect and ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/connect \"Connect\"), you must take the following into consideration before you enable and use ACH Direct Debits.\n\n### Request ACH Debit capabilities for your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the `us_bank_account_ach_payments` capability to `active` on your platform account, and for any connected accounts you want to enable for ACH debits. You can also [request more account capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting).\n\n### Merchant of record and statement descriptors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the default statement descriptor and the merchant name that appears on the customer’s bank statement. The charge type can also change:\n\n*   The merchant of record shown on the mandate\n*   The merchant shown on confirmation emails\n*   The merchant shown on microdeposit reminder emails\n\nThe merchant of record determines the Stripe account authorized to create payments with a particular [PaymentMethod](https://docs.stripe.com/api/payment_methods/object). To learn more about sharing this authorization across multiple connected accounts, see [PaymentMethod and Mandate cloning](#payment-method-and-mandate-cloning).\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\n### PaymentMethod and mandate cloning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can collect customer bank accounts on the platform account and [clone](https://docs.stripe.com/payments/payment-methods/connect#cloning-payment-methods) ACH Direct debit payment methods. Cloning these methods allows you to save customer bank accounts for later use on connected accounts. When you clone ACH Direct Debit payment methods, Stripe duplicates the mandate authorization to the connected account, but we don’t send any new mandate confirmation emails.\n\n#### Caution\n\nYou can’t use a mandate authorized for a PaymentIntent or SetupIntent [`on_behalf_of`](https://docs.stripe.com/connect/charges#on_behalf_of) of a connected account with a different connected account.\n\nWhen collecting a bank account that you intend to clone to connected accounts, you must communicate to the customer that their authorization extends to connected accounts on your platform. For example, you can communicate this message to a customer through the mandate terms. Failure to communicate this message to your customers could result in customer confusion and increase the risk of disputed payments.\n\n## Testing ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |",
    "title": "ACH Direct Debit | Stripe Documentation",
    "description": "Learn how businesses can accept payments with ACH Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments",
    "markdown": "# Moving money with Treasury using OutboundPayment objects\n\n## Learn how to create outbound payments to move money out of Treasury financial accounts to third parties.\n\n`OutboundPayment` objects represent push-based transfers from your Treasury financial account to a third-party external account using ACH or wire transfer, or another financial account associated with the same platform instantly using the `stripe` network. For example, if you want to send money from your financial account to your vendor’s external US bank account, you create an `OutboundPayment` to move the funds. The receiving accounts for an `OutboundPayment` are either an external bank account or another financial account.\n\nThe typical transfer time for outbound payments can range from minutes (when using the Stripe network), same day, to 1-2 business days (when using the ACH network). For more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#outboundpayment-and-outboundtransfer-transactions) guide.\n\n[](#createobp)\n\nUse `POST /v1/treasury/outbound_payments` to create an `OutboundPayment`. Among the request’s possible parameters, the following are required:\n\n*   `amount`: Amount in cents to pay.\n*   `currency`: Three-letter ISO currency code (only `usd` supported).\n*   `financial_account`: The source financial account funds are sent from.\n*   `destination_payment_method` or `destination_payment_method_data`: Information about the destination of funds for the payment.\n    *   With `destination_payment_method`, you must first set up the `PaymentMethod` for outbound flows using a [SetupIntent](https://docs.stripe.com/api/setup_intents). You must also specify the customer ID that matches the `Customer` object the `PaymentMethod` is attached to. Alternatively, you can use an existing legacy [BankAccount](https://docs.stripe.com/payments/ach-debit/migrating-from-charges) attached to the `Customer` in place of a `PaymentMethod`.\n    *   With `destination_payment_method_data`, you can specify payment method details inline. You can use this parameter to specify bank account details or when you’re [sending funds to another financial account](#create-obp-for-fa) over the Stripe network.\n\n[](#obpexternal)\n\nUse `POST /v1/treasury/outbound_payments` to create an `OutboundPayment` from the financial account identified by the ID in the `financial_account` parameter value of the body. The following request adds `statement_descriptor` and `destination_payment_method_data` information.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=2000 \\  -d currency=usd \\  -d statement_descriptor=payment_1 \\  -d \"destination_payment_method_data[type]\"=us_bank_account \\  -d \"destination_payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"destination_payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"destination_payment_method_data[us_bank_account][account_number]\"=1234567890 \\   --data-urlencode \"destination_payment_method_data[billing_details][email]\"=\"jenny@example.com\" \\  -d \"destination_payment_method_data[billing_details][phone]\"=7135551212 \\  -d \"destination_payment_method_data[billing_details][address][city]\"=Alvin \\  -d \"destination_payment_method_data[billing_details][address][state]\"=TX \\  -d \"destination_payment_method_data[billing_details][address][postal_code]\"=77511 \\  -d \"destination_payment_method_data[billing_details][address][line1]\"=\"123 Main St.\" \\  -d \"destination_payment_method_data[billing_details][name]\"=\"Jenny Rosen\"`\n\nIf successful, the response returns the newly created `OutboundPayment`.\n\n`` {   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   // The source FinancialAccount. Funds are pulled from this account.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to send. 10.00 USD in this case.   \"amount\": 1000,   \"cancelable\": true | false,   \"currency\": \"usd\",   // The destination payment method. Either this or `destination_payment_method_data` ``\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables sending funds that arrive the same business day if the `OutboundPayment` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--outbound). To use same-day ACH, set the `destination_payment_method_options.us_bank_account.network` parameter to `ach` and the `destination_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n### Wire transfer: routing numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome banks might use a separate wire transfer routing number that differs from ACH. Consequently, you might receive an error during wire creation if the routing number on the payment method doesn’t support wire transfers. If you receive this error, you need to add a new payment method with your bank’s wire routing number.\n\n### Wire transfer: recipient address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWire transfers require ACH metadata plus recipient name and billing address. The address is the address of the account holder receiving the wire, not the address of their bank.\n\nWhen entering the `billing_details.address` for a payment method, all address fields must be complete. Attempting to send a wire with incomplete fields on the `billing_details.address` results in an error.\n\n#### Note\n\nWhen sending a wire using an `OutboundTransfer`, if you don’t fill out any address fields, Stripe defaults to the legal entity of the primary Stripe account holder.\n\n[](#create-obp-for-fa)\n\nTo move money between financial accounts, call `POST /v1/treasury/outbound_payments` on the origin account and specify the destination account in the `destination_payment_method_data` parameter. Both financial accounts must be associated with the same platform, but can be attached to either a connected account or the platform financial account.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account={{SOURCE_FINANCIAL_ACCOUNT_ID}} \\   -d amount=2000 \\  -d currency=usd \\  -d statement_descriptor=\"Test outbound payment to FA\" \\  -d \"destination_payment_method_data[type]\"=financial_account \\  -d \"destination_payment_method_data[financial_account]\"={{DESTINATION_FINANCIAL_ACCOUNT_ID}}`\n\nThe body of your request must be `x-www-form-urlencoded`, but the following JSON defines the data you can send.\n\n``{   // The source FinancialAccount. Funds are pulled from this account.   \"financial_account\": \"{{SOURCE_FINANCIAL_ACCOUNT_ID}}\",   // The amount to send.   \"amount\": 1000,   \"currency\": \"usd\",   // The destination payment method. This parameter is the only way to   // send an OutboundPayment via the `stripe` network.   \"destination_payment_method_data\": {     \"type\": \"financial_account\",``\n\n[](#retrieveobp)\n\nUse `GET /v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}` to retrieve details for the `OutboundPayment` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundPayment` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n``{   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   \"livemode\": true | false,   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // Will only be set if `destination_payment_method` was used during the creation of   // the OutboundPayment``\n\n[](#cancelobp)\n\nUse `POST /v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/cancel` to cancel the `OutboundPayment` with the associated ID. The `OutboundPayment` object includes a `cancelable` parameter with a Boolean value to indicate whether you can cancel the transfer. After an `OutboundPayment` submits to the network, the `cancelable` value becomes `false` and you receive an error from this endpoint for that transfer.\n\n`curl -X POST https://api.stripe.com/v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundPayment` object with the `status` value set to `canceled`.\n\n`{   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   \"livemode\": false,   \"created\": 123456,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"amount\": 1000,   \"currency\": \"usd\",   ...   \"status\": \"canceled\",`\n\n[](#listobp)\n\nUse `GET /v1/treasury/outbound_payments` to list the `OutboundPayments` from the financial account with the associated ID. You can filter the list with the standard list parameters or by `status` or by `customer`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"canceled\" | \"failed\" | \"posted\" | \"returned\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by Customer   \"customer\": \"{{CUSTOMER_ID}}\", }`\n\nThe following request retrieves the last five [OutboundPayment objects](https://docs.stripe.com/api/treasury/outbound_payments/object) for the financial account attached to the platform and paid to the identified `Customer`.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=5 \\  -d customer=  {{CUSTOMER_ID}}    `\n\n[](#obpstates)\n\nThe following table describes each status and what the possible transition states are.\n\n| STATUS | DESCRIPTION | CAN TRANSITION TO STATE |\n| --- | --- | --- |\n| `processing` | The `OutboundPayment` starting state. Funds are allotted to a pending transaction (but are still part of the current balance). The user can cancel the `OutboundPayment` while the value of the `cancelable` parameter is `true`. | `posted`, `canceled`, `failed` |\n| `failed` (terminal) | `OutboundPayment` failed to confirm. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `canceled` (terminal) | A user canceled the `OutboundPayment` before posting. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `posted` | The `OutboundPayment` posted and funds have left the account. The underlying transaction posts. | `returned` |\n| `returned` (terminal) | `OutboundPayment` failed to successfully arrive at the destination. Funds return to the user with a transaction (`returned_details[transaction]`). | N/A |\n\n[](#testingobp)\n\nTo test your integration end-to-end, we recommend using the [SetupIntent requests in test mode](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#setupintents) to create a `PaymentMethod`, then passing that `PaymentMethod` into an `OutboundPayment` creation request using the `destination_payment_method` parameter.\n\nStripe also allows test `PaymentMethod` tokens and numbers to trigger specific functionality:\n\n*   By passing in a test `PaymentMethod` token to `destination_payment_method` (for `ach` and `us_domestic_wire` networks)\n    *   If you’re passing in a test `PaymentMethod` token directly into `destination_payment_method`, you must still pass in a customer ID to the `customer` parameter. For convenience, Stripe allows you to pass in any existing test mode customer. This differs from live mode, which requires the existing `PaymentMethod` to be attached to a `Customer` and that same customer ID passed into the `customer` parameter.\n*   By passing in test routing and account numbers to `destination_payment_method_data[us_bank_account]` (for `ach` and `us_domestic_wire` networks).\n*   By passing in the ID of an existing test mode financial account owned by an intra-platform account to `destination_payment_method_data[financial_account]` (for Stripe network).\n\nIn all cases, the `OutboundPayment` response returns the processing status. Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for the relevant state transitions, and fetching the `OutboundPayment` after creation returns the expected state.\n\n| CREATES | DESTINATION\\_PAYMENT\\_METHOD (WITH ANY EXISTING TEST MODE CUSTOMER) | DESTINATION\\_PAYMENT\\_METHOD\\_DATA\\[US\\_BANK\\_ACCOUNT\\] |\n| --- | --- | --- |\n| `OutboundPayment` in initial processing state | `pm_usBankAccount_processing` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000009 |\n| `OutboundPayment` that transitions to `posted` (from `processing`) | `pm_usBankAccount` | *   `routing_number`: 110000000<br>*   `account_number`: 000123456789 |\n| `OutboundPayment` that transitions to `posted` (from `processing`), additionally adding one day to the original `expected_arrival_date` | `pm_usBankAccount_expectedArrivalDateUpdated` | *   `routing_number`: 110000000<br>*   `account_number`: 000123457890 |\n| `OutboundPayment` that transitions to `canceled` (from `processing`) | `pm_usBankAccount_canceledByUser` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000123 |\n| `OutboundPayment` that transitions to `failed` (from `processing`) | `pm_usBankAccount_internalFailure` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000234 |\n| `OutboundPayment` that transitions to `returned` due to account closure (from processing after posted) | `pm_usBankAccount_accountClosed` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111113 |\n| `OutboundPayment` that transitions to returned due to no account (from processing after posted) | `pm_usBankAccount_noAccount` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111116 |\n| `OutboundPayment` that transitions to `returned` due to invalid account number (from processing after posted) | `pm_usBankAccount_invalidAccountNumber` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111119 |\n\n### OutboundPayment test helper endpoints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides endpoints to help you test `OutboundPayments` in different states. Use the test endpoints to move an `OutboundPayment` you create directly to a new state of `posted`, `failed`, or `returned`.\n\n*   Use the [test post endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post) to move the identified `OutboundPayment` from `processing` to `posted`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/post`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail) to move the identified `OutboundPayment` from `processing` to `failed`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/fail`\n    \n*   Use the [test return endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return) to move the identified `OutboundPayment` from `processing` to `returned`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/return`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require outside action.\n\nFor the `return` endpoint, include the optional `returned_details.code` parameter in the body to indicate why the transfer was returned. If not provided, the transfer defaults to the `declined` return code.\n\n`{   \"returned_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" |           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\" |           \"declined\"   } }`\n\nWe also provide a [test update endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update) to simulate the posting of tracking details on a test mode `Outbound Payment`. The `tracking_details` field can only be set for test mode objects.\n\nIn all cases, Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `OutboundPayment` after transition returns the expected state.\n\n[](#obpwebhooks)\n\nStripe emits the following `OutboundPayment` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.outbound_payment.created` on `OutboundPayment` creation.\n*   `treasury.outbound_payment.{{new_status}}` when an `OutboundPayment` changes status. Available status value options include:\n    *   `treasury.outbound_payment.posted`\n    *   `treasury.outbound_payment.failed`\n    *   `treasury.outbound_payment.canceled`\n    *   `treasury.outbound_payment.returned`\n*   `treasury.outbound_payment.expected_arrival_date_updated` when the `expected_arrival_date` of an `OutboundPayment` changes.\n*   `treasury.outbound_payment.tracking_details_updated` when the tracking details for an `OutboundPayment` are updated.",
    "title": "Moving money with Treasury using OutboundPayment objects | Stripe Documentation",
    "description": "Learn how to create outbound payments to move money out of Treasury financial accounts to third parties.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/received_credits/test_mode_create",
    "markdown": "# Test mode: Create a ReceivedCredit\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Test mode: Create a ReceivedCredit | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/outbound_payments",
    "markdown": "# Outbound Payments | Stripe API Reference\n\n## [The Outbound Payment object](https://docs.stripe.com/api/treasury/outbound_payments/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   ID of the [customer](https://docs.stripe.com/api/customers) to whom an OutboundPayment is sent.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an OutboundPayment.\n    \n*   #### \n    \n    end\\_user\\_detailsnullable object\n    \n    Details about the end user.\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundPayment. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).\n    \n*   Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe Outbound Payment object\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Create an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/create)\n\nCreates an OutboundPayment.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_dataobject\n    \n    Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Payment method-specific configuration for this OutboundPayment.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is “payment”.\n    \n\n### Returns\n\nReturns an OutboundPayment object if there were no issues with OutboundPayment creation.\n\nPOST /v1/treasury/outbound\\_payments\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d customer=cus_4QFOF3xrvBT2nU \\  -d destination_payment_method=pm_1MtaD82eZvKYlo2Cn1XtS23o \\  -d description=\"OutboundPayment to a 3rd party\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Retrieve an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/retrieve)\n\nRetrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundPayment object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [List all OutboundPayments](https://docs.stripe.com/api/treasury/outbound_payments/list)\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```",
    "title": "Outbound Payments | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted",
    "markdown": "# Save details for future payments with ACH Direct Debit\n\nYou can use Checkout in [setup mode](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-mode) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis guide shows you how to extend the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=stripe-hosted) Checkout integration to add support for ACH Direct Debit payments.\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#setup-a-payment)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `us_bank_account` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `usd` currency.\n3.  Set the `permissions` parameter to include `payment_method`.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=setup \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=us_bank_account \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\nDuring the Checkout session, the customer sees a dialog that gives them the option to use instant verification or provide bank account details for microdeposit verification.\n\nIf the customer opts for microdeposit verification, Stripe automatically sends two small deposits to the provided bank account. These deposits can take 1-2 business days to appear on the customer’s online bank statement. When the deposits arrive, the customer receives an email with a link to confirm these amounts and verify the bank account with Stripe. After verification completes, the payment begins processing.\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#use-the-payment-method)\n\nAfter completing the Checkout Session, you can [collect](https://docs.stripe.com/payments/save-and-reuse#retrieve-checkout-session) the [PaymentMethod](https://docs.stripe.com/api/payment_methods) ID. You can use these PaymentMethod IDs to initiate future payments without having to prompt the customer for their bank account a second time.\n\nWhen [creating a PaymentIntent](https://docs.stripe.com/api/payment_intents/create), provide the `payment_method` and customer IDs to charge your customer using their saved bank account information.",
    "title": "Save details for future payments with ACH Direct Debit | Stripe Documentation",
    "description": "Learn how to save payment method details for future ACH Direct Debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/retrieve",
    "markdown": "# Retrieve account | Stripe API Reference\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```\n\n## [Reject an account](https://docs.stripe.com/api/account/reject)\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/financial_connections/sessions/object",
    "markdown": "# The Session object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder for whom accounts are collected in this session.\n    \n*   The accounts that were collected as part of this Session.\n    \n*   A value that will be passed to the client to launch the authentication flow.\n    \n*   Filters applied to this session that restrict the kinds of accounts to collect.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    permissionsarray of enums\n    \n    Permissions requested for accounts collected during this session.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests access for balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests access for ownership data on accounts collected in this session. |\n    | `payment_method`<br><br>Requests permission for the creation of a payment method from an account collected in this session. |\n    | `transactions`<br><br>Requests access for transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    prefetchnullable array of enums\n    \n    Data features requested to be retrieved upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Create a Session](https://docs.stripe.com/api/financial_connections/sessions/create)\n\nTo launch the Financial Connections authorization flow, create a `Session`. The session’s `client_secret` can be used to launch the flow using Stripe.js.\n\n### Parameters\n\n*   #### \n    \n    account\\_holderobjectRequired\n    \n    The account holder to link accounts for.\n    \n*   #### \n    \n    permissionsarray of stringsRequired\n    \n    List of data features that you would like to request access to.\n    \n    Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.\n    \n*   Filters to restrict the kinds of accounts to collect.\n    \n*   List of data features that you would like to retrieve upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n### Returns\n\nReturns the `Session` object.\n\nPOST /v1/financial\\_connections/sessions\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account_holder[type]\"=customer \\  -d \"account_holder[customer]\"=cus_NiKSWdaFz2F6I0 \\  -d \"permissions[]\"=payment_method \\  -d \"permissions[]\"=balances \\  -d \"filters[countries][]\"=US\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/financial_connections/sessions/retrieve)\n\nRetrieves the details of a Financial Connections `Session`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Session` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions/fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web",
    "markdown": "# Save details for future payments with ACH Direct Debit\n\n## Learn how to save payment method details for future ACH Direct Debit payments.\n\nYou can use the [Setup Intents API](https://docs.stripe.com/payments/setup-intents) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this set-up process.\n\nCreate a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to us\\_bank\\_account and specify the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id).\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=balances`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-details)\n\nWhen a customer clicks to pay with ACH Direct Debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire SetupIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can complete the Payment Method setup process. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.collectBankAccountForSetup](https://docs.stripe.com/js/setup_intents/collect_bank_account_for_setup) to collect bank account details with [Financial Connections](https://docs.stripe.com/financial-connections), create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), and attach that PaymentMethod to the SetupIntent. Including the account holder’s name in the `billing_details` parameter is required to create an ACH Direct Debit PaymentMethod.\n\n`// Use the form that already exists on the web page. const paymentMethodForm = document.getElementById('payment-method-form'); const confirmationForm = document.getElementById('confirmation-form');  paymentMethodForm.addEventListener('submit', (ev) => {   ev.preventDefault();   const accountHolderNameField = document.getElementById('account-holder-name-field');   const emailField = document.getElementById('email-field');    // Calling this method will open the instant verification dialog.   stripe.collectBankAccountForSetup({     clientSecret: clientSecret,     params: {       payment_method_type: 'us_bank_account',       payment_method_data: {         billing_details: {           name: accountHolderNameField.value,           email: emailField.value,         },       },     },     expand: ['payment_method'],   })   .then(({setupIntent, error}) => {     if (error) {       console.error(error.message);       // PaymentMethod collection failed for some reason.     } else if (setupIntent.status === 'requires_payment_method') {       // Customer canceled the hosted verification modal. Present them with other       // payment method type options.     } else if (setupIntent.status === 'requires_confirmation') {       // We collected an account - possibly instantly verified, but possibly       // manually-entered. Display payment method details and mandate text       // to the customer and confirm the intent once they accept       // the mandate.       confirmationForm.show();     }   }); });`\n\nThe [Financial Connections authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) automatically handles bank account details collection and verification. When your customer completes the authentication flow, the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") automatically attaches to the SetupIntent, and creates a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts).\n\n#### Common mistake\n\nBank accounts that your customers link through manual entry and microdeposits won’t have access to additional bank account data like balances, ownership, and transactions.\n\nTo provide the best user experience on all devices, set the viewport `minimum-scale` for your page to 1 using the viewport `meta` tag.\n\n`<meta name=\"viewport\" content=\"width=device-width, minimum-scale=1\" />`\n\n[\n\n## Collect mandate acknowledgement and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nBefore you can complete the SetupIntent and save the payment method details for the customer, you must obtain authorization for payment by displaying mandate terms for the customer to accept.\n\nTo be compliant with Nacha rules, you must obtain authorization from your customer before you can initiate payment by displaying mandate terms for them to accept. For more information on mandates, see [Mandates](https://docs.stripe.com/payments/ach-debit#mandates).\n\nWhen the customer accepts the mandate terms, you must confirm the SetupIntent. Use [stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) to complete the payment when the customer submits the form.\n\n`confirmationForm.addEventListener('submit', (ev) => {   ev.preventDefault();   stripe.confirmUsBankAccountSetup(clientSecret)   .then(({setupIntent, error}) => {     if (error) {       console.error(error.message);       // The payment failed for some reason.     } else if (setupIntent.status === \"requires_payment_method\") {       // Confirmation failed. Attempt again with a different payment method.     } else if (setupIntent.status === \"succeeded\") {       // Confirmation succeeded! The account is now saved.       // Display a message to customer.     } else if (setupIntent.next_action?.type === \"verify_with_microdeposits\") {       // The account needs to be verified via microdeposits.       // Display a message to consumer with next steps (consumer waits for       // microdeposits, then enters a statement descriptor code on a page sent to them via email).     }   }); });`\n\n#### Note\n\n[stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) may take several seconds to complete. During that time, disable resubmittals of your form and show a waiting indicator (for example, a spinner). If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a SetupIntent object, with one of the following possible statuses:\n\n| Status | Description | Next Steps |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification was not necessary. | No action needed |\n| `requires_action` | Further action needed to complete bank account verification. | Step 6: [Verifying bank accounts with microdeposits](https://docs.stripe.com/payments/ach-debit/accept-a-payment#web-verify-with-microdeposits) |\n\nAfter successfully confirming the SetupIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) if you prefer.\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn these cases, Stripe sends a `descriptor_code` microdeposit and might fall back to an `amount` microdeposit if any further issues arise with verifying the bank account. These deposits take 1-2 business days to appear on the customer’s online statement.\n\n*   **Descriptor code**. Stripe sends a single, 0.01 USD microdeposit to the customer’s bank account with a unique, 6-digit `descriptor_code` that starts with SM. Your customer uses this string to verify their bank account.\n*   **Amount**. Stripe sends two, non-unique microdeposits to the customer’s bank account, with a statement descriptor that reads `ACCTVERIFY`. Your customer uses the deposit amounts to verify their bank account.\n\nThe result of the [stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) method call in the previous step is a SetupIntent in the `requires_action` state. The SetupIntent contains a `next_action` field that contains some useful information for completing the verification.\n\n`next_action: {   type: \"verify_with_microdeposits\",   verify_with_microdeposits: {     arrival_date: 1647586800,     hosted_verification_url: \"[https://payments.stripe.com/…](https://payments.stripe.com/%E2%80%A6)\",     microdeposit_type: \"descriptor_code\"   } }`\n\nIf you supplied a [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe notifies your customer via this email when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\n#### Warning\n\nVerification attempts have a limit of ten failures for descriptor-based microdeposits and three for amount-based ones. If you exceed this limit, we can no longer verify the bank account. In addition, microdeposit verifications have a timeout of 10 days. If you can’t verify microdeposits in that time, the SetupIntent reverts to requiring new payment method details. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Send custom email notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOptionally, you can send [custom email notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) to your customer. After you set up custom emails, you need to specify how the customer responds to the verification email. To do so, choose _one_ of the following:\n\n*   Use the Stripe-hosted verification page. To do this, use the `verify_with_microdeposits[hosted_verification_url]` URL in the [`next_action`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-verify_with_microdeposits-hosted_verification_url) object to direct your customer to complete the verification process.\n    \n*   If you prefer not to use the Stripe-hosted verification page, create a form on your site. Your customers then use this form to relay microdeposit amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n    \n    *   At minimum, set up the form to handle the `descriptor code` parameter, which is a 6-digit string for verification purposes.\n    *   Stripe also recommends that you set your form to handle the `amounts` parameter, as some banks your customers use may require it.\n    \n    Integrations only pass in the `descriptor_code` _or_ `amounts`. To determine which one your integration uses, check the value for `verify_with_microdeposits[microdeposit_type]` in the `next_action` object.\n    \n\n``stripe.verifyMicrodepositsForSetup(clientSecret, {   // Provide either a descriptor_code OR amounts, not both   descriptor_code: `SMT86W`,   amounts: [32, 45], });``\n\nWhen the bank account is successfully verified, Stripe returns the SetupIntent object with a `status` of `succeeded`, and sends a [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or Asynchronous | Message | Status change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, or asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#web-future-payments)\n\nWhen the SetupIntent succeeds, it will create a new [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") attached to a [Customer](https://docs.stripe.com/api/customers). These can be used to initiate future payments without having to prompt the customer for their bank account a second time.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method\"=\"{{PAYMENT_METHOD_ID}}\" \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"confirm\"=\"true\"`",
    "title": "Save details for future payments with ACH Direct Debit | Stripe Documentation",
    "description": "Learn how to save payment method details for future ACH Direct Debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/financial_accounts/create",
    "markdown": "# Create a FinancialAccount | Stripe API Reference\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a FinancialAccount | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/expand",
    "markdown": "# Expanding responses | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reduce the number of requests you make to the Stripe API by expanding objects in responses.\n\nThis guide describes how to request additional properties from the API. You will learn to modify your requests to include:\n\n*   properties from related objects\n*   properties from distantly related objects\n*   additional properties on all objects in a list\n*   properties that aren’t included by default in a response\n\n## How it works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe API is organized into resources represented by objects with state, configuration, and contextual properties. These objects all have unique IDs that you can use to retrieve, update, and delete them. The API also uses these IDs to link related objects together. A [Checkout Session](https://docs.stripe.com/api/checkout/sessions/object), for example, links to a [Customer](https://docs.stripe.com/api/customers/object) by the [Customer ID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer).\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"customer\": \"cus_HQmikpKnGHkNwW\",   ... }`\n\nIn cases where you need information from a linked object, you can retrieve the linked object in a new call using its ID. However, this approach requires two API requests to access just one value. If you need information from multiple linked objects, each would also require separate requests, which all adds to the latency and complexity of your application.\n\nThe API has an Expand feature that allows you to retrieve linked objects in a single call, effectively replacing the object ID with all its properties and values. For example, say you wanted to access details on a customer tied to a given Checkout Session. You would retrieve the Checkout Session and pass the `customer` property to the `expand` array, which tells Stripe to include the entire Customer object in the response:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=customer`\n\nWhich returns the Checkout Session with the full Customer object instead of its ID:\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"customer\": {     \"id\": \"cus_HQmikpKnGHkNwW\",     \"object\": \"customer\",     ...     \"metadata\": {       \"user_id\": \"user_xyz\"     },     ...   } }`\n\n#### Note\n\nNot all properties can be expanded. The API reference marks expandable properties with the “Expandable” label.\n\n## Expanding multiple properties ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo expand multiple properties in one call, add additional items to the expand array. For example, if you want to expand both the [customer](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer) and the [payment\\_intent](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_intent) for a given Checkout Session, you would pass `expand` an array with both the `customer` and `payment_intent` strings:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=payment_intent`\n\n## Expanding multiple levels ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the value you want is nested deeply across multiple linked resources, you can reach it by recursively expanding using dot notation. For instance, if you needed to know the type of payment method that was used for a given Checkout Session, you would first retrieve the Checkout Session’s payment intent, then retrieve the payment intent’s linked payment method to get its type. With `expand`, you can do this in one call:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=\"payment_intent.payment_method\"`\n\nWhich returns the Checkout Session with the full [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) and [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) objects instead of their IDs:\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"mode\": \"payment\",   \"payment_intent\": {     \"id\": \"pi_1GkXXDLHughnNhxyLlsnvUuY\",     \"object\": \"payment_intent\",     \"amount\": 100,     ...     \"charges\": {...},     \"client_secret\": \"pi_1GkXXDLHughnNhxyLlsnvUuY_secret_oLbwpm0ME0ieJ9Aykz2SwKzj5\",     ...     \"payment_method\": {       \"id\": \"pm_1GkXXuLHughnNhxy8xpAdGtf\",       \"object\": \"payment_method\",       \"billing_details\": {...},       \"card\": {...},`\n\n#### Note\n\nExpansions have a maximum depth of four levels. Meaning that an `expand` string can contain no more than four properties: `property1.property2.property3.property4`.\n\n## Expanding properties in lists ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the API returns a list of objects, you can use the `data` keyword to expand a given property on each object in that list. For example, say you need information about the payment methods used by one of your customers. To get this information, you would [list the customer’s PaymentIntents](https://docs.stripe.com/api/payment_intents/list#list_payment_intents-customer), which returns an object with the following structure:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"pi_1GrvBKLHughnNhxy6N28q8gt\",       \"object\": \"payment_intent\",       \"amount\": 1000,       ...       \"payment_method\": \"pm_1GrvBxLHughnNhxyJjtBtHcc\",       ...     },`\n\n#### Note\n\nAll lists returned in the API have the above structure, where the `data` property contains the array of objects being listed. You can use the `data` keyword in any position in an expand string to move the expand cursor into the list.\n\nRather than looping through each payment intent in the list and retrieving the linked payment methods in separate calls, you can expand all the payment methods at once using the `data` keyword:\n\n`curl -G https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"expand[]\"=\"data.payment_method\"`\n\nThe list then includes the full payment method object on each payment intent:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"pi_1GrvBKLHughnNhxy6N28q8gt\",       \"object\": \"payment_intent\",       \"amount\": 1000,       ...       \"payment_method\": {         \"id\": \"pm_1GrvBxLHughnNhxyJjtBtHcc\",         \"object\": \"payment_method\",         \"billing_details\": {...},         \"card\": {           \"brand\": \"visa\",           ...`\n\n#### Note\n\nExpanding responses has performance implications. To keep requests fast, try to limit many nested expansions on list requests.\n\n## Using expansion to request includable properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, resources have properties that aren’t included by default. One example is the Checkout Session’s [line\\_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) property, which is only included in responses if requested using the `expand` parameter, for example:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=line_items`\n\n#### Note\n\nLike other expandable properties, the API reference marks properties that are includable with the “Expandable” label.\n\n## Using expansion with webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t receive [webhook](https://docs.stripe.com/webhooks \"webhook\") events with properties auto-expanded. Objects sent in events are always in their minimal form. To access nested values in expandable properties, you must retrieve the object in a separate call within your webhook handler.",
    "title": "Expanding responses | Stripe Documentation",
    "description": "Learn how to reduce the number of requests you make to the Stripe API by expanding objects in responses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/financial_accounts/object",
    "markdown": "# The FinancialAccount object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    active\\_featuresarray of enums\n    \n    The array of paths to active Features in the Features hash.\n    \n*   The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. Currently, FinancialAccounts can only carry balances in USD.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    featuresnullable objectExpandable\n    \n    The features and their statuses for this FinancialAccount.\n    \n*   #### \n    \n    financial\\_addressesarray of objects\n    \n    The set of credentials that resolve to a FinancialAccount.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_featuresarray of enums\n    \n    The array of paths to pending Features in the Features hash.\n    \n*   #### \n    \n    platform\\_restrictionsnullable object\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n*   #### \n    \n    restricted\\_featuresarray of enums\n    \n    The array of paths to restricted Features in the Features hash.\n    \n*   The enum specifying what state the account is in.\n    \n*   Details related to the status of this FinancialAccount.\n    \n*   #### \n    \n    supported\\_currenciesarray of enums\n    \n    The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n    \n\nThe FinancialAccount object\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Create a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/create)\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```",
    "title": "The FinancialAccount object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_bank_accounts/create",
    "markdown": "# Create a bank account | Stripe API Reference\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=btok_1NAiJy2eZvKYlo2Cnh6bIs9c\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```",
    "title": "Create a bank account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/notification-of-change",
    "markdown": "# ACH Notification of Change handling\n\n## Learn how external account information is updated.\n\nWhen you originate an ACH transaction with Stripe (for example, using `InboundTransfer`, `OutboundTransfer`, or `OutboundPayment` objects with Treasury), the financial institution receiving the transaction might return a Notification of Change (NOC). This is a message indicating that new information is available about the destination account (such as a new account number or routing number).\n\nACH network rules require Stripe to update saved account information when we receive an NOC. We automatically process the NOC by updating the relevant `PaymentMethod` or `BankAccount` object and notify you through a webhook. You might want to monitor these webhooks to inform your users that account information has changed or to update account information that you’ve persisted outside of Stripe.\n\n| NOC type | Fields updated |\n| --- | --- |\n| Account number | `account_number`, `last4`, `fingerprint` |\n| Routing number | `routing_number`, `fingerprint` |\n| Account use (for example, checking or savings) | `account_type`, `fingerprint` |\n\nNOCs aren’t processed for `OutboundPayment` objects where payment method details are provided inline (using `destination_payment_method_data`) as there is no persisted `PaymentMethod` or `BankAccount` object in this case to update.\n\n## NOC for a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen we receive an NOC for a transaction originated with a `PaymentMethod` object:\n\n*   Stripe updates the `PaymentMethod` and triggers a `payment_method.updated` webhook.\n*   If the `PaymentMethod` is attached to a `Customer` (for use with `OutboundPayment` objects), Stripe triggers a `customer.source.updated` webhook.\n*   If the `PaymentMethod` is attached directly to a Stripe account (for use with `InboundTransfer` or `OutboundTransfer` objects), Stripe triggers an `account.external_account.updated` webhook.\n\n## NOC for a BankAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen we receive an NOC for a transaction originated with a `BankAccount` object:\n\n*   Stripe updates the `BankAccount` object.\n*   If the `BankAccount` is attached to a `Customer` (for use with `OutboundPayment` objects), Stripe triggers a `customer.source.updated` webhook.\n*   If the `BankAccount` is attached directly to a Stripe account (for use with `InboundTransfer` or `OutboundTransfer` objects), Stripe triggers an `account.external_account.updated` webhook.\n\nIn cases where the `BankAccount` that’s set up as your platform’s primary external account is updated, Stripe also notifies you by email. We don’t send an email for updates to external accounts that are attached to your connected accounts’ Stripe accounts, or for updates to external accounts attached to `Customer` objects.",
    "title": "ACH Notification of Change handling | Stripe Documentation",
    "description": "Learn how external account information is updated.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payouts/object",
    "markdown": "# The Payout object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount (in cents) that transfers to your bank account or debit card.\n    \n*   Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    Extra information about a payout that displays on the user’s bank statement.\n    \n*   Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it’s submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destinationnullable stringExpandable\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    original\\_payoutnullable stringExpandable\n    \n*   #### \n    \n    reconciliation\\_statusenum\n    \n*   #### \n    \n    reversed\\_bynullable stringExpandable\n    \n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Create a payout](https://docs.stripe.com/api/payouts/create)\n\nTo send funds to your own bank account, create a new payout object. Your [Stripe balance](#balance) must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.\n\nIf you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](#balance_object) details available and pending amounts by source type.\n\n### Parameters\n\n*   A positive integer in cents representing how much to payout.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    A string that displays on the recipient’s bank or card statement (up to 22 characters). A `statement_descriptor` that’s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a payout object if no initial errors are present during the payout creation (invalid routing number, insufficient funds, and so on). We initially mark the status of the payout object as `pending`.\n\n```\ncurl https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1100 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Update a payout](https://docs.stripe.com/api/payouts/update)\n\nUpdates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the payout object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Retrieve a payout](https://docs.stripe.com/api/payouts/retrieve)\n\nRetrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payout object if a you provide a valid identifier. raises [An error](#errors) occurs otherwise.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [List all payouts](https://docs.stripe.com/api/payouts/list)\n\nReturns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.\n\n### Parameters\n\n*   Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payouts, starting after payout `starting_after`. Each entry in the array is a separate payout object. If no other payouts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payouts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",      \"object\": \"payout\",      \"amount\": 1100,      \"arrival_date\": 1680652800,      \"automatic\": false,      \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",      \"created\": 1680648691,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",      \"failure_balance_transaction\": null,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"metadata\": {},      \"method\": \"standard\",      \"original_payout\": null,      \"reconciliation_status\": \"not_applicable\",      \"reversed_by\": null,      \"source_type\": \"card\",      \"statement_descriptor\": null,      \"status\": \"pending\",      \"type\": \"bank_account\"    }    {...}    {...}  ],}\n```",
    "title": "The Payout object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/top-ups",
    "markdown": "# Add funds to your platform balance\n\n## Platforms can add funds to their balance from a bank account.\n\nPlatforms can add funds to their Stripe balance to pay connected accounts for goods or services. There are a number of different use cases for adding funds to pay connected accounts for goods or services, including:\n\n*   Paying bonuses or other one-off [payouts](https://docs.stripe.com/payouts \"payout\"), independent of specific charges.\n*   Providing customer discounts while still paying full price for goods or services to sellers.\n*   Adding funds from non-Stripe income (for example, checks or funds from another processor).\n*   Enabling faster payouts (for example, pay a vendor before incoming funds become available).\n\nWhere permitted, Platforms can also add funds to their Stripe balance to send funds to recipients off of Stripe (for example, via [cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts)). They can also pay out added funds to other accounts they own.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll of these requirements must be met to add funds to your Stripe balance:\n\n*   Your platform is in the US and the connected account receiving the funds either is in the US or has a [recipient](https://docs.stripe.com/connect/service-agreement-types#recipient) service agreement.\n*   Your platform profile is approved. You can check the status in your [settings](https://dashboard.stripe.com/connect/settings/profile) after completing the platform profile.\n\nWhen adding funds to your balance, best practice is to use a manual payout schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n#### Note\n\nIf you’re new to [Connect](https://docs.stripe.com/connect \"Connect\"), start with a guide to add funds to your platform balance and [pay out money](https://docs.stripe.com/connect/add-and-pay-out-guide).\n\n[](#confirm-funding-purpose)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/balance_card.9038431ffab8e9df92d41f8b5a08010f.png)\n\nClick **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nClick **Pay out connected accounts** to add funds that are paid out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, click **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n[](#verify-bank-account)\n\nYou must use a verified bank account to add funds. You’ll go through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account.\n\nIf your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear on your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` for the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits should have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n[](#add-funds)\n\nOnce verified, you can use the [Dashboard](https://dashboard.stripe.com/test/balance/overview) or the [API](https://docs.stripe.com/api#topups) to add funds to your account balance.\n\n1.  In the Dashboard, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section.\n2.  In the **Add to balance** window, enter an amount in USD and click **Connect payouts**.\n3.  In the resulting modal window (shown below), enter an amount in USD.\n4.  Verify the amount and click **Add funds.**\n5.  The resulting object is called a [top-up](https://docs.stripe.com/api/topups/object) and can be viewed in the [Top-ups](https://dashboard.stripe.com/test/topups) section of the Dashboard.\n6.  After the funds are available in your platform’s Stripe balance, you can transfer funds to a connected account through the [API](https://docs.stripe.com/api#transfers) or the [Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds). In the Dashboard, transfer funds to a connected account by clicking **Add funds** in the **Balance** section of the connected account’s detail page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/topup_modal.5523d356678b312020e4e063e7de8eb4.png)\n\n## View your funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your added funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID with the format `tu_XXXXXX`, which you can see on the detailed view for the top-up.\n\n## Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUS platforms add funds via ACH debit, and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfer](https://docs.stripe.com/get-started/account/add-funds), and be available in 1-2 business days.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard or the API to [test adding funds to your balance](https://docs.stripe.com/connect/testing#testing-top-ups).",
    "title": "Add funds to your platform balance | Stripe Documentation",
    "description": "Platforms can add funds to their balance from a bank account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_bank_accounts/create?lang=node",
    "markdown": "# Create a bank account | Stripe API Reference\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.createExternalAccount(  'acct_1032D82eZvKYlo2C',  {    external_account: 'btok_1NAiJy2eZvKYlo2Cnh6bIs9c',  });\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.updateExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAiwl2eZvKYlo2CRdCLZSxO',  {    metadata: {      order_id: '6735',    },  });\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.retrieveExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAinX2eZvKYlo2CpFGcuuEG');\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccounts = await stripe.accounts.listExternalAccounts(  'acct_1032D82eZvKYlo2C',  {    object: 'bank_account',  });\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const deleted = await stripe.accounts.deleteExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAz2w2eZvKYlo2CgeR2w6yU');\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```",
    "title": "Create a bank account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/standard-entry-class",
    "markdown": "# ACH Standard Entry Class (SEC) handling\n\n## Learn how SEC codes are determined for ACH transfers.\n\nEach ACH transaction has an associated Standard Entry Class (SEC) code that describes the accounts involved and how the transaction was authorized.\n\nStripe Treasury determines the SEC code based on whether the account receiving the ACH entry is owned by a company or an individual. You specify the account holder type in [destination\\_payment\\_method\\_data.us\\_bank\\_account.account\\_holder\\_type](https://docs.stripe.com/api/treasury/outbound_payments/create#create_outbound_payment-destination_payment_method_data-us_bank_account-account_holder_type) when:\n\n*   You make [OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\n*   You set up a [stored PaymentMethod](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#setupintents)\n\nOnly send [InboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers) and [OutboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to accounts owned by the FinancialAccount owner and with a `company` owner type.\n\nSEC codes are determined based on the receiving account’s owner type as follows:\n\n| Money movement | Owner type | SEC code |\n| --- | --- | --- |\n| InboundTransfer | `company` | `CCD` |\n| OutboundTransfer | `company` | `CCD` |\n| OutboundPayment | `company` | `CCD` |\n| OutboundPayment | `individual` | `PPD` |",
    "title": "ACH Standard Entry Class (SEC) handling | Stripe Documentation",
    "description": "Learn how SEC codes are determined for ACH transfers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/ach-deprecated",
    "markdown": "# ACH Direct Debit with Charges\n\n## ACH Direct Debit with ChargesDeprecated\n\n## Legacy guide for accepting ACH payments with our older Charges API.\n\n#### Legacy\n\nThe content below describes a Legacy method for collecting ACH payments.\n\nIf you’re building a new integration, use one of our current methods for [accepting ACH payments](https://docs.stripe.com/payments/ach-debit) instead.\n\nIf you have an existing integration that accepts ACH payments using the Charges API, we recommend [migrating to the Payment Intents API](https://docs.stripe.com/payments/ach-debit/migrating-from-charges). The Payment Intents API includes built-in instant verification.\n\nStripe allows you to accept ACH payments in nearly the same way as you accept credit card payments, by providing a verified bank account as the `source` argument for a charge request. However, accepting bank accounts requires a slightly different initial workflow than accepting credit cards:\n\n1.  You must first [verify](#verifying) bank accounts.\n2.  Your customer must [authorize](#authorization) you to use them.\n\nAfter taking both steps for a bank account, your customer can use it like other payment methods, including for recurring charges and [Connect](#connect) applications. The two key differences between using bank accounts and credit cards are:\n\n*   ACH payments take up to 5 business days to receive acknowledgment of their success or failure. Because of this, your Stripe balance takes up to 7 business days to reflect ACH payments in your available Stripe balance.\n*   You can only accept funds in USD and only from US bank accounts. In addition, your account must have a US (USD) bank account to accept ACH payments.\n\n## Collecting and verifying bank accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can create an ACH charge, you must first collect and verify your customer’s bank account and routing number. In order to properly identify the bank account, you also need to collect the name of the person or business who owns the account, and if the account is owned by an individual or a company. Stripe provides two methods for doing so: instant collection and verification with [Plaid](https://plaid.com/docs/auth/partnerships/stripe/) or collection using [Stripe.js](https://docs.stripe.com/payments/elements) with delayed-verification using microdeposits. You may incur additional costs when using Plaid, depending on the size of your business. Take this into account when making your decision.\n\nBecause charging a bank account requires both verification of the account and customer authorization to use it, the best practice is to store the bank account on a `Customer` object in Stripe so you can reuse it.\n\n## Using Plaid ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![plaid logo](https://b.stripecdn.com/docs-statics-srv/assets/plaid.291ca97692152302c6cbab16a1c39257.png)\n\nPlaid provides the quickest way to collect and verify your customer’s banking information. Using the Stripe + Plaid integration, you can instantly receive a verified bank account, which allows for immediate charging. This is done using [Plaid Link](https://plaid.com/docs/auth/partnerships/stripe/), and you receive the Stripe bank account token directly from Plaid.\n\n**Step 1: Set up your Plaid account**\n\nIf you don’t have a Plaid account, [create one](https://plaid.com/docs/auth/partnerships/stripe). Your account is automatically enabled for integration access. To verify that your Plaid account is enabled for the Stripe integration, go to the [Integrations](https://dashboard.plaid.com/team/integrations) section of the account dashboard. Make sure your Stripe account is connected there.\n\n**Step 2: Fetch a Link token**\n\nA `link_token` is a one-time use token that initializes Plaid Link. You can create a link\\_token and configure it for your specific Link flow by calling the [Create Link Token](https://plaid.com/docs/#create-link-token) endpoint from your server.\n\n`curl https://sandbox.plaid.com/link/token/create \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\",\\\"secret\\\": \\\"{{PLAID_SECRET}}\\\",\\\"client_name\\\": \\\"My App\\\",\\\"user\\\": {\\\"client_user_id\\\": \\\"Stripe test\\\"},\\\"products\\\": [\\\"auth\\\"],\\\"country_codes\\\": [\\\"US\\\"],\\\"language\\\": \\\"en\\\", \\\"webhook\\\": \\\"https://webhook.sample.com/\\\"}\"`\n\n**Step 3: Integrate with Plaid Link**\n\nIntegrating with Link only takes a few lines of client-side JavaScript and a small server-side handler to exchange the Link `public_token` for a Plaid `access_token` and a Stripe bank account token.\n\n`<button id=\"link-button\">Link Account</button>  <script src=\"https://cdn.plaid.com/link/v2/stable/link-initialize.js\"></script> <script type=\"text/javascript\"> (async function() {    const configs = {     // Pass the link_token generated in step 2.     token: '{{LINK_TOKEN}}',     onLoad: function() {       // The Link module finished loading.     },     onSuccess: function(public_token, metadata) {       // The onSuccess function is called when the user has       // successfully authenticated and selected an account to       // use.       //       // When called, you will send the public_token       // and the selected account ID, metadata.accounts,       // to your backend app server.       //       // sendDataToBackendServer({       //   public_token: public_token,       //   account_id: metadata.accounts[0].id       // });       console.log('Public Token: ' + public_token);       switch (metadata.accounts.length) {         case 0:           // Select Account is disabled: https://dashboard.plaid.com/link/account-select           break;         case 1:           console.log('Customer-selected account ID: ' + metadata.accounts[0].id);           break;         default:           // Multiple Accounts is enabled: https://dashboard.plaid.com/link/account-select       }     },     onExit: async function(err, metadata) {       // The user exited the Link flow.       if (err != null) {           // The user encountered a Plaid API error           // prior to exiting.       }       // metadata contains information about the institution       // that the user selected and the most recent       // API request IDs.       // Storing this information can be helpful for support.     },   };    var linkHandler = Plaid.create(configs);    document.getElementById('link-button').onclick = function() {     linkHandler.open();   }; })(); </script>`\n\n**Step 4: Write server-side handler**\n\nThe Link module handles the entire onboarding flow securely and quickly, but doesn’t actually retrieve account data for a user. Instead, the Link module returns a `public_token` and an `accounts` array, which is a property on the `metadata` object, and part of the `onSuccess` callback.\n\nThe `accounts` array contains information about bank accounts associated with the credentials entered by the user, and may contain multiple accounts if the user has more than one bank account at the institution. To avoid any confusion about which account your user wants to use with Stripe, set [Select Account](https://dashboard.plaid.com/link/account-select) to **Enabled for one account** in the Plaid developer dashboard. When you select this setting, it means the accounts array will always contain exactly one element.\n\nWhen your server has the `public_token` and `account_id`, you must make two calls to the Plaid server to get the Stripe bank account token along with the Plaid `access_token` to use for other Plaid API requests.\n\n`curl https://sandbox.plaid.com/item/public_token/exchange \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\", \\\"secret\\\": \\\"{{PLAID_SECRET}}\\\", \\\"public_token\\\": \\\"{{PLAID_LINK_PUBLIC_TOKEN}}\\\"}\" curl https://sandbox.plaid.com/processor/stripe/bank_account_token/create \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\", \\\"secret\\\": \\\"{{PLAID_SECRET}}\\\", \\\"access_token\\\": \\\"{{PLAID_ACCESS_TOKEN}}\\\", \\\"account_id\\\": \\\"{{PLAID_ACCOUNT_ID}}\\\"}\"`\n\nThe response contains a verified Stripe bank account token ID. You can attach this token to a Stripe `Customer` object, or create a charge directly on it.\n\n`{   \"stripe_bank_account_token\": \"btok_PSpOThjFqK9TW3BFpayt\",   \"request_id\": \"[Unique request ID]\" }`\n\n**Step 5: Get ready for production**\n\nPlaid uses different API hosts for test and production requests. The above request uses Plaid’s Sandbox environment, which uses simulated data. To test with live users, use Plaid’s Development environment. Plaid’s Development environment supports up to 100 live objects, which you won’t be billed for. When it’s time to go live, use [Plaid’s Production environment](https://plaid.com/docs/auth/partnerships/stripe/#step4).\n\n## Manually collecting and verifying bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlaid supports instant verification for many of the most popular banks. However, if Plaid doesn’t support your customer’s bank or you don’t want to integrate with Plaid, collect and verify the customer’s bank using Stripe alone.\n\nFirst, use [Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=bank_account) to securely collect your customer’s bank account information, receiving a representative token in return. When you have that, attach it to a Stripe customer in your account. To comply with [Nacha rules](https://www.nacha.org/newrules), make sure you provide a valid account holder name for the customer.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"name\"=\"Jenny Rosen\" \\   -d \"source\"=\"btok_4XNshPRgmDRCVi\"`\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") bank accounts require verification. When using Stripe without Plaid, Stripe automatically sends two small deposits for this purpose. These deposits take 1-2 business days to appear on the customer’s online statement. The statement has a description that includes `ACCTVERIFY`. Your customer must relay these amounts to you.\n\nWhen accepting these amounts, be aware that the limit is three failed verification attempts. If you exceed this limit, we can’t verify the bank account. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues. As soon as you have these amounts, you can verify the bank account.\n\n`curl https://api.stripe.com/v1/customers/cus_AFGbOSiITuJVDs/sources/ba_17SHwa2eZvKYlo2CUx7nphbZ/verify \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amounts[]\"=32 \\   -d \"amounts[]\"=45`\n\nAfter we verify the bank account, you can make charges against it.\n\nBefore creating an ACH charge, get authorization from your customer to debit their account. Doing so ensures compliance with the ACH network and helps protect you from disputes, additional fees, and reversed payments. See the [support page](https://support.stripe.com/questions/collect-ach-authorization-from-customers) for more information on authorization requirements.\n\n## Creating an ACH charge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a charge on a verified bank account, use the stored `Customer` object the same way you would when using a card.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500 \\  -d currency=usd \\  -d customer=cus_AFGbOSiITuJVDs`\n\nAttempting to charge an unverified bank account results in an error with the message “The customer’s bank account must be verified in order to create an ACH payment.”\n\nIf the customer has multiple stored sources (of any type), specify which bank account to use by passing its ID in as the [source](https://docs.stripe.com/api#create_charge-source) parameter.\n\n## Testing this integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mimic successful and failed ACH charges using the following bank routing and account numbers:\n\n*   Routing number: `110000000`\n*   Account number:\n    *   `000123456789` (success)\n    *   `000111111116` (failure upon use)\n    *   `000111111113`(account closed)\n    *   `000222222227` (NSF/insufficient funds)\n    *   `000333333335` (debit not authorized)\n    *   `000444444440` (invalid currency)\n\nTo mimic successful and failed bank account verifications, use these meaningful amounts:\n\n*   `[32, 45]` (success)\n*   `[any other number combinations]` (failure)\n\n## ACH payments workflow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH payments take up to 5 business days to receive acknowledgment of their success or failure:\n\n*   When created, ACH charges have the initial status of `pending`.\n*   A _pending_ balance transaction is immediately created reflecting the payment amount, less our fee.\n*   Payments created on or after 22:00 UTC are currently processed on the next business day.\n*   During the following 4 business days, the payment transitions to either `succeeded` or `failed` depending on the customer’s bank.\n*   Successful ACH payments are reflected in your Stripe available balance after 7 business days, at which point the funds are available for automatic or manual transfer to your bank account.\n*   Failed ACH payments reverse the _pending_ balance transaction created.\n*   Your customer sees the payment reflected on their bank statement 1-2 days after creating the charge. (Your customer knows if the payment succeeds before the bank notifies Stripe.)\n\nFailures can happen for a number of reasons such as insufficient funds, a bad account number, or the customer disabling debits from their bank account.\n\nIn rare situations, Stripe might receive an ACH failure from the bank after a payment has transitioned to `succeeded`. If this happens, Stripe creates a dispute with a `reason` of:\n\n*   `insufficient_funds`\n*   `incorrect_account_details`\n*   `bank_cannot_process`\n\nStripe charges a failure fee in this situation.\n\n## Handling disputes in this integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisputes on ACH payments are fundamentally different than those on credit card payments. If a customer’s bank accepts the request to return the funds for a disputed charge, Stripe immediately removes the funds from your Stripe account. Unlike credit card disputes, you can’t contest ACH reversals. You must contact your customer to resolve the situation.\n\nCustomers can generally dispute an ACH Direct Debit payment through their bank for up to 60 calendar days after a debit on a personal account, or up to 2 business days for a business account. In rare instances, a debit payment can be successfully disputed outside these timelines.\n\n### Risk of double-crediting with ACH refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you proactively issue your customer a refund while their bank also initiates the dispute process, they may receive two credits for the same transaction.\n\nWhen issuing a refund for an ACH payment, you must notify your customer immediately that you’re issuing the refund and that it may take 2-5 business days for the funds to appear in their bank account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can refund ACH charges, for up to 90 days from the date of the original payment, using the [Refund endpoint](https://docs.stripe.com/api#refunds), but the timing and risks associated with ACH refunds are different from card refunds. If a refund for an ACH charge succeeds, Stripe won’t send any notification. If a refund for an ACH charge fails, however, you’ll receive a `charge.refund.updated` notification, which means that we haven’t been able to process the refund. You must return the funds to your customer outside of Stripe. This is rare—normally occurring when an account is frozen between the original charge and the refund request.\n\n## ACH-specific webhook notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using ACH, you’ll receive many of the standard charge [webhook](https://docs.stripe.com/webhooks \"webhook\") notifications, with a couple of notable differences:\n\n*   After creating the charge, you receive a `charge.pending` notification. You won’t receive `charge.succeeded` or `charge.failed` notification until up to 5 business days later.\n*   You receive a `charge.succeeded` notification after the charge has transitioned to `succeeded` and the funds are available in your balance.\n*   You receive a `charge.failed` notification if the ACH transfer fails for any reason. The charge’s `failure_code` and `failure_message` will be set, and the funds are reversed from your Stripe pending balance at this point.\n*   You receive a `customer.source.updated` notification when the bank account is properly verified. The bank account’s `status` is set to `verified`.\n*   If the bank account couldn’t be verified because either of the two small deposits failed, you receive a `customer.source.updated` notification. The bank account’s `status` is set to `verification_failed`.\n\n## Connect support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Connect](https://docs.stripe.com/connect \"Connect\"), your platform can earn money while [processing charges](https://docs.stripe.com/connect/charges). You can either:\n\n*   Create the customer on the connected account, then create a [direct charge](https://docs.stripe.com/connect/direct-charges)\n*   Create the customer [on the platform account](https://docs.stripe.com/connect/cloning-customers-across-accounts), then create a [destination charge](https://docs.stripe.com/connect/destination-charges) using the `transfer_data` parameter (as in the code below)\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500 \\  -d currency=usd \\  -d customer=cus_AFGbOSiITuJVDs \\  -d \"transfer_data[amount]\"=850 \\  -d \"transfer_data[destination]\"={{CONNECTED_STRIPE_ACCOUNT_ID}}`\n\n## Services Agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse of the live mode API is subject to the Stripe [Services Agreement](https://stripe.com/legal). Let us know if you have any questions on that agreement.",
    "title": "ACH Direct Debit with Charges | Stripe Documentation",
    "description": "Legacy guide for accepting ACH payments with our older Charges API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/risk-management/best-practices",
    "markdown": "# Best practices for risk management\n\n## Protect your integration by implementing best practices for preventing, mitigating, and responding to payments risk.\n\nThese best practices for protecting your Connect integration are based on what we’ve learned from thousands of platforms, extensions, and plug-ins.\n\n## Decide your approach to negative balance liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause your choice of negative balance liability can significantly impact your platform and connected accounts, consider it carefully before onboarding any accounts. We advise that new platforms have Stripe take responsibility for negative balances on connected accounts. Only consider taking responsibility as the platform if you’re confident in your ability to manage merchant risk.\n\n## Best practices for both approaches![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Prevent fraudulent transactions by enabling Radar![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you enable Radar, payment risk scoring is on by default at the user level, preventing transactions with high fraud risk. For information on using Radar with connected accounts, see [Using Radar with Connect](https://docs.stripe.com/connect/radar).\n\n### Manage notifications and communications with Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Webhook notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses [webhooks](https://docs.stripe.com/webhooks \"webhook\") to notify you of your connected accounts’ activities. Set up [Connect webhooks](https://docs.stripe.com/connect/webhooks) so you can avoid delays in fund transfers by promptly responding to connected account updates and Stripe requests.\n\nStripe requests additional information if the provided user information fails verification. An incorrect date of birth or last name might be the result of a data entry error. You can help your connected accounts respond to failed verifications by directing them to [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) or [Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding), or request the data yourself if you use [API onboarding](https://docs.stripe.com/connect/api-onboarding).\n\nWhen a user updates their account information (for example, bank account), Stripe sends you a notification of the change.\n\n#### Accounts to review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Accounts to Review](https://dashboard.stripe.com/connect/accounts_to_review) tab in your Connect Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. This tab allows you to view any risk or onboarding restrictions that impact your accounts or that will impact them in the future. It also provides clear instructions on how to resolve open requirements.\n\n#### Support transparency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use your Connect dashboard to [view support cases](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#view-and-unblock-support-cases) that your connected accounts have opened with Stripe and help unblock them by providing additional context. Specifically, you can view a list of support cases, review conversations between connected accounts and Stripe, and send private messages to Stripe Support with information to help resolve issues.\n\n### Concerns about sanctions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs a US company, Stripe complies with all sanctions programs administered by the US Office of Foreign Assets Control (OFAC), along with a number of other national and international sanctions regimes. That includes prohibitions against interactions with certain individuals and entities, as well as comprehensive bans on business dealings involving certain countries or regions targeted by sanctions regimes.\n\nStripe screens all accounts, including connected accounts, in compliance with our own obligations under sanctions regimes. If a connected account is flagged as a possible sanctions concern, Stripe pauses payouts from that account and emails the platform to request additional information. If you have a preferred email address for receiving sanctions-related requests, [contact Stripe Support](https://support.stripe.com/contact).\n\nPayouts from the connected account remain paused until the review has been cleared. Disregarding or violating sanctions can lead to fines, regulatory action, and loss of licensing for both Stripe and our users.\n\n## Best practices for platform negative balance liability connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Core considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms can bring merchant risk management in-house and further tailor their connected accounts’ experiences using risk tooling that Stripe provides. For additional details on strategy and approach to risk management, see our [guide on risk management for software platforms](https://stripe.com/guides/introduction-to-risk-management). Starting a risk management solution involves several investments. Some of the core considerations include:\n\n*   Screening and detection: Risk screening infrastructure to understand the risk profile of connected accounts and prevent or reduce fraud and credit risk. This includes building detection mechanisms to identify risky connected accounts.\n*   Monitoring and mitigation: Systems to monitor risk signals and take action (such as pausing payouts, pay-ins, and so on) to mitigate exposure in response to changes in risk signals over time. Building workflows in your product to make sure that users have resolution paths in response to actions, such as uploading identity documents, verifying legal entity information or providing additional risk related information.\n*   Risk specialists: Risk operations teams can monitor risk exposure and intervene in response to signals. Make sure that your operations teams can support connected account owners with questions about risk actions taken on their account.\n\n### Reduce the risk of fraudulent merchants using your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore going live, establish best practices for preventing fraud and managing risk. There’s no foolproof method to detect bad actors. Mitigate [fraud risk](https://docs.stripe.com/disputes/prevention/fraud-types) by following risk management best practices to assess an account’s holistic risk profile. The more you understand your connected account and their business, the better the risk assessment. Stripe recommends that you:\n\n*   Verify your connected accounts before they can do business through your platform.\n*   Examine an account’s online presence through social or professional profiles like Facebook, Twitter, or LinkedIn.\n*   Closely review the account’s website, including considering whether it’s appropriate for them to have one.\n*   Collect any appropriate licenses for their business.\n*   Confirm their email address if it’s linked to their business domain. For example, send an email to an address at that domain and require a response from it.\n*   Collect and verify platform-appropriate information such as a physical address, inventory list, or selling history.\n*   Monitor activity on your platform to get a sense of typical behavior, which you can use to identify future suspicious behavior.\n*   Pause payments or payouts when suspicious behavior is detected.\n*   Use the built-in fraud tools to identify and prevent fraud on individual charge attempts. For information on how Radar works with Connect, see [Using Radar with Connect](https://docs.stripe.com/connect/radar).\n*   Add additional verifications to Connect onboarding and disable payouts or payments until the checks pass.\n\nIf you suspect that a connected account is committing fraud, Stripe recommends rejecting that account. That reduces losses by preventing the account from receiving more funds and helps improve Stripe’s fraud detection systems.\n\n### Prevent account take-overs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBad actors can target your connected accounts and compromise them, an attack known as account takeover (ATO). Attackers commonly obtain account credentials using methods like phishing, data breaches, and guessable passwords. They use the credentials to create unauthorized transactions and other fraudulent activities on the account. To help prevent account takeovers, it’s good practice to:\n\n*   Require two-factor authentication when your connected account users log in\n*   Educate your connected accounts about phishing and other vulnerabilities\n*   Enforce unique password policies\n*   Monitor anomalous login activity, especially when it involves new device identifiers or IP addresses\n*   Monitor changes to sensitive account data such as passwords, email addresses, and bank account information that originates from new devices\n*   Use identity checks to assist in two-factor authentication recovery or in response to suspicious activity\n\n### Mitigate credit risks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManaging [disputes and chargebacks](https://docs.stripe.com/disputes/prevention) are a normal part of doing business when accepting card payments. To build an effective strategy for preventing disputes, employ a number of different methods. The following subsections contain some recommendations to help you manage your exposure, protect your business, and support your accounts.\n\n### Account monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMonitor your accounts. The more you understand your connected account and their business, the better you can assess their risk.\n\n*   Examine connected account balances through [the API](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances) or [the Dashboard](https://docs.stripe.com/connect/dashboard/viewing-all-accounts). In the [Dashboard’s accounts overview](https://dashboard.stripe.com/test/connect/accounts/overview), use filters to investigate accounts that might require you to take action, such as accounts with negative balances.\n*   Review financial activity on an account. When viewing the account in the Dashboard, click **View financial reports** in the **Activity** card.\n*   Create alerts to monitor riskier accounts so you can quickly adjust your strategies. Riskier accounts have higher dispute rates (dispute activity above 0.75% is generally considered excessive), sharply reduced volume, or negative balances.\n\n### Riskier accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor newer sellers or service providers that might be riskier, consider delaying or holding payouts until goods or services are delivered. Learn more about [account balances](https://docs.stripe.com/connect/account-balances) and [payout scheduling](https://docs.stripe.com/connect/manage-payout-schedule).\n\nFor platforms with users on manual payouts, you can update your payout creation logic to defer or slow down payouts for riskier accounts.\n\nFor connected accounts that receive automatic payouts, you can slow them by extending the payout schedule on a per-account basis in the Dashboard or by setting [settings.payouts.schedule](https://docs.stripe.com/api/accounts/update#update_account-settings-payouts-schedule) in the API. When [viewing the account in the Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), click **Edit payout schedule** in the **Balance** card’s overflow menu :\n\n![Edit the payout schedule in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/edit-payout-schedule.0ad82911f52d981bc62e0a046efca02a.png)\n\n### Impact from chargebacks and negative balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConsider product or service refunds instead of having to manage chargebacks and negative balances. It might be better for the customer and also less expensive for you. Your options include:\n\n*   Issue refunds. You can check whether the connected account’s balance can cover the refund using the [Dashboard](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) or by [retrieving it](https://docs.stripe.com/api/balance/balance_retrieve) using the API. If their balance can’t cover the refund, you can [reverse the transfer](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers) without issuing the refund, which results in a negative balance on the account.\n*   Issue refunds based on certain parameters. For example, you can wait until the account’s balance is no longer negative to issue refunds or immediately issue the refund knowing that future payments can cover the amount.\n*   Proactively cancel and refund charges that are likely to be disputed. The loss on the transaction might be better for the account than getting a chargeback. In addition, there are costs that come with chargebacks and the [potential scrutiny](https://docs.stripe.com/disputes/monitoring-programs) from card networks.\n*   Permit your team to handle refunds by [adding them to your platform account](https://docs.stripe.com/get-started/account/teams/roles).\n*   Pause collection of recurring payments for [subscriptions](https://docs.stripe.com/billing/subscriptions/pause-payment) that are at high risk for chargebacks. That gives you more control over when to resume the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). For example, if your platform offers classes that have been canceled for the next few months, you can pause collection of payments for those classes.\n*   Protect your platform from negative balances by [adding funds](https://docs.stripe.com/connect/top-ups) to your platform balance.\n*   If you have access to [Stripe Sigma](https://docs.stripe.com/stripe-data), use it to generate a report of each account’s [negative balance over time](https://dashboard.stripe.com/sigma/queries/templates/Account%20balances%20for%20each%20connected%20account).\n\n### Negative balances on accounts Australia Canada Europe (SEPA, UK) New Zealand US![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your connected accounts are in Australia, Canada, Europe (SEPA countries, including the UK), New Zealand, or the US, you can allow Stripe to cover negative balances by automatically debiting their external accounts. In New Zealand, automatic debiting is only supported for connected accounts where Stripe is responsible for collecting updated information when requirements are due or change (including Standard and Express accounts). Otherwise, connected accounts can cover negative balances with future payment volume.\n\nBy default, automatic debiting is set to false for connected accounts where the platform is responsible for collecting updated information when requirements are due or change (including Custom accounts). You can toggle the automatic debits setting on an account using the Dashboard or by setting [debit\\_negative\\_balances](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-debit_negative_balances) using the API.\n\nFrom the [Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), select an account and open the **Balance** card’s overflow menu (). You can view all connected accounts that have the automatic debits setting turned off by using the **Debit negative balances** filter:\n\n![Stripe Dashboard using the Debit negative balances filter](https://b.stripecdn.com/docs-statics-srv/assets/debit-negative-balances-filter.ae29916e89cbf02aad1826a8e6e9ba50.png)\n\n### Use Stripe’s tools to manage merchant risks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides platforms with several tools to monitor and manage risk.\n\n**Loss prevention tools**\n\n*   **[Debit Negative Balances](https://docs.stripe.com/connect/account-balances#automatically-debit-connected-accounts)**: For connected accounts in certain countries, you can allow Stripe to automatically debit their external accounts to cover negative balances. Otherwise, negative balances can be covered by future payment volume. You can toggle the automatic debits setting on an account using the Dashboard or by setting [debit\\_negative\\_balances](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-debit_negative_balances) using the Accounts API.\n    \n*   **[Set payout timing](https://docs.stripe.com/connect/manage-payout-schedule)**: You can set default [delay\\_days](https://docs.stripe.com/api/accounts/update#update_account-settings-payouts-schedule-delay_days) for payouts to connected accounts that are considered risky or are located in countries with higher fraud rates.\n    \n\n**Additional risk signals**\n\n*   **[Identity](https://docs.stripe.com/identity)**: Streamline risk processes by providing ID verification during onboarding or prior to enabling payouts.\n*   **[Financial Connections](https://docs.stripe.com/financial-connections)**: Minimize fraud by matching bank account ownership with the identity of a connected account user before accepting payments or payouts. Fully underwrite accounts with a deep understanding of balance and transaction data.\n\n**Actioning**\n\n*   **[Pause payouts](https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts)**: In the Dashboard, you can pause payouts as a first line of defense after you identify suspicious activity. Pausing payouts stops a connected account from completing payouts to their bank account.\n*   **[Pause payments](https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts)**: In the Dashboard, you can pause payments as a second line of defense. Pausing payments on a suspicious connected account limits your exposure by stopping it from collecting payments through your platform.\n*   **[Reject account](https://docs.stripe.com/api/account/reject)**: You can use the API or Dashboard to remove fraudulent or risky connected accounts from your platform. Rejecting an account is permanent and should only be used as the last line of defense.",
    "title": "Best practices for risk management | Stripe Documentation",
    "description": "Protect your integration by implementing best practices for preventing, mitigating, and responding to payments risk.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/setup_intents/create",
    "markdown": "# Create a SetupIntent | Stripe API Reference\n\nCreates a SetupIntent object.\n\nAfter you create the SetupIntent, attach a payment method and [confirm](https://docs.stripe.com/api/setup_intents/confirm) it to collect any required permissions to charge the payment method later.\n\n### Parameters\n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this SetupIntent accepts payment methods that you enable in the Dashboard and that are compatible with its other parameters.\n    \n*   Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.\n    \n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n*   Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. |\n    \n\n### More parameters\n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"payment_method_types[]\"=card\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Update a SetupIntent](https://docs.stripe.com/api/setup_intents/update)\n\nUpdates a SetupIntent object.\n\n### Parameters\n\n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\nPOST /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Retrieve a SetupIntent](https://docs.stripe.com/api/setup_intents/retrieve)\n\nRetrieves the details of a SetupIntent that has previously been created.\n\nClient-side retrieval using a publishable key is allowed when the `client_secret` is provided in the query string.\n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the [SetupIntent](#setup_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if using publishable key\n    \n    The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.\n    \n\n### Returns\n\nReturns a SetupIntent if a valid identifier was provided.\n\nGET /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [List all SetupIntents](https://docs.stripe.com/api/setup_intents/list)\n\nReturns a list of SetupIntents.\n\n### Parameters\n\n*   Only return SetupIntents for the customer specified by this customer ID.\n    \n*   Only return SetupIntents that associate with the specified payment method.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` SetupIntents, starting after SetupIntent `starting_after`. Each entry in the array is a separate SetupIntent object. If no more SetupIntents are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/setup_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",      \"object\": \"setup_intent\",      \"application\": null,      \"cancellation_reason\": null,      \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",      \"created\": 1678942624,      \"customer\": null,      \"description\": null,      \"flow_directions\": null,      \"last_setup_error\": null,      \"latest_attempt\": null,      \"livemode\": false,      \"mandate\": null,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        }      },      \"payment_method_types\": [        \"card\"      ],      \"single_use_mandate\": null,      \"status\": \"requires_payment_method\",      \"usage\": \"off_session\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a SetupIntent](https://docs.stripe.com/api/setup_intents/cancel)\n\nYou can cancel a SetupIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_confirmation`, or `requires_action`.\n\nAfter you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this SetupIntent. Possible values are: `abandoned`, `requested_by_customer`, or `duplicate`\n    \n\n### Returns\n\nReturns a SetupIntent object if the cancellation succeeds. Returns an error if the SetupIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/setup\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"canceled\",  \"usage\": \"off_session\"}\n```",
    "title": "Create a SetupIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/outbound_transfers",
    "markdown": "# Outbound Transfers | Stripe API Reference\n\n## [The OutboundTransfer object](https://docs.stripe.com/api/treasury/outbound_transfers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod used as the payment instrument for an OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod for an OutboundTransfer\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundTransfer. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Information about the OutboundTransfer to be sent to the recipient account.\n    \n*   Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe OutboundTransfer object\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Create an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/create)\n\nCreates an OutboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Hash describing payment method configuration details.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is “transfer”.\n    \n\n### Returns\n\nReturns an OutboundTransfer object if there were no issues with OutboundTransfer creation. The status of the created OutboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/outbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1 \\  -d destination_payment_method=pm_1234567890 \\  -d amount=500 \\  -d currency=usd \\  -d description=\"OutboundTransfer to my external bank account\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Retrieve an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/retrieve)\n\nRetrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [List all OutboundTransfers](https://docs.stripe.com/api/treasury/outbound_transfers/list)\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```",
    "title": "Outbound Transfers | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/transaction_entries",
    "markdown": "# Transaction Entries | Stripe API Reference\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [The TransactionEntry object](https://docs.stripe.com/api/treasury/transaction_entries/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The current impact of the TransactionEntry on the FinancialAccount’s balance.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   When the TransactionEntry will impact the FinancialAccount’s balance.\n    \n*   The FinancialAccount associated with this object.\n    \n*   Token of the flow associated with the TransactionEntry.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow associated with the TransactionEntry.\n    \n*   Type of the flow associated with the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n*   The specific money movement that generated the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The TransactionEntry was generated by a CreditReversal. |\n    | `credit_reversal_posting`<br><br>The TransactionEntry was generated by a posted CreditReversal. |\n    | `debit_reversal`<br><br>The TransactionEntry was generated by a DebitReversal. |\n    | `inbound_transfer`<br><br>The TransactionEntry was generated by an InboundTransfer. |\n    | `inbound_transfer_return`<br><br>The TransactionEntry was generated by an InboundTransferReturn. |\n    | `issuing_authorization_hold`<br><br>The TransactionEntry was generated by an Issuing authorization hold. |\n    | `issuing_authorization_release`<br><br>The TransactionEntry was generated by an Issuing authorization release. |\n    | `other`<br><br>The TransactionEntry was generated by some other money movement. |\n    | `outbound_payment`<br><br>The TransactionEntry was generated by an OutboundPayment. |\n    | `outbound_payment_cancellation`<br><br>The TransactionEntry was generated by a cancelled OutboundPayment. |\n    | Show 10 more |\n    \n\nThe TransactionEntry object\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [Retrieve a TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries/retrieve)\n\nRetrieves a TransactionEntry object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a TransactionEntry object.\n\nGET /v1/treasury/transaction\\_entries/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transaction_entries/trxne_1MtkgV2eZvKYlo2CmofEnIwJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [List all TransactionEntries](https://docs.stripe.com/api/treasury/transaction_entries/list)\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Transaction Entries | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/received-debits",
    "markdown": "# Moving money with Treasury using ReceivedDebit objects\n\n## Learn how external account holders can pull funds from a Treasury financial account.\n\nCertain processes initiated outside of Stripe Treasury result in money being pulled out of a Treasury financial account. This includes:\n\n*   Spending money on a card through [Stripe Issuing](https://docs.stripe.com/issuing/purchases/transactions#using-with-stripe-treasury)\n*   Pulling money out of a financial account into an external account using ACH debits\n*   Pulling money out of a platform’s financial account into that platform’s Stripe Payments balance using [top-ups](https://docs.stripe.com/treasury/moving-money/payouts#top-ups)\n\nThese money movements result in the creation of `ReceivedDebit` objects. You don’t create `ReceivedDebits` directly, rather you observe `ReceivedDebit` object creation with webhooks. If there are insufficient funds in the account, the `ReceivedDebit` fails in most cases.\n\n[](#retrieverecdeb)\n\nUse `GET /v1/treasury/received_debits/{{RECEIVED_DEBIT_ID}}` to retrieve the `ReceivedDebit` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/received_debits/{{RECEIVED_DEBIT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `ReceivedDebit` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{RECEIVED_DEBIT_ID}}\",   \"object\": \"received_debit\",   \"livemode\": Boolean,   \"created\": Timestamp,   // The FinancialAccount funds have been pulled from   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   \"description\": \"Testing\",`\n\n[](#listrecdeb)\n\nUse `GET /v1/treasury/received_debits` to retrieve all `ReceivedDebits` for a financial account. You must specify a financial account ID for the `financial_account` parameter. You can filter the results by the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by status   \"status\": \"succeeded\" | \"failed\" }`\n\nThe following request retrieves the last successful [ReceivedDebit object](https://docs.stripe.com/api/treasury/received_debits/object) that occurred before the provided `ReceivedDebit` for the financial account identified.\n\n`curl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=1 \\  -d ending_before={{RECEIVED_DEBIT_ID}}`\n\n[](#test-received-debit)\n\nStripe Treasury provides test endpoints for `ReceivedDebit` objects. Use `POST /v1/test_helpers/treasury/received_debits` to simulate `ReceivedDebit` creation in test mode. You can’t create `ReceivedDebit` objects in live mode, so using this endpoint enables you to test the flow of funds when a third party initiates creation of a `ReceivedDebit`. Set `financial_account` to the ID of the financial account to send money from. Set `network` to `ach` and optionally provide the ABA financial address details for the `source_details.aba` parameter. As in live mode, test mode `ReceivedDebits` fail if there are insufficient funds available.\n\n[](#webhookrecdeb)\n\nStripe emits the following `ReceivedDebit` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.received_debit.created` on `ReceivedDebit` creation.",
    "title": "Moving money with Treasury using ReceivedDebit objects | Stripe Documentation",
    "description": "Learn how external account holders can pull funds from a Treasury financial account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits",
    "markdown": "# Moving money with Treasury using ReceivedCredit objects\n\n## Learn how to move money into a Treasury financial account from another Treasury financial account or bank account.\n\nWhen funds move into a financial account, Stripe creates a corresponding [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) object on the account. A `ReceivedCredit` contains information on how the funds were sent and from what account, where possible. You can send funds to a financial account with the account’s routing and account numbers for `ach` and `us_domestic_wire`, or the financial account ID for transfers between financial accounts.\n\nWhen the origin of the funds is another Treasury financial account, the `ReceivedCredit` contains a `linked_flows.source_flow` reference to the originating money movement. In this case, the source `OutboundPayment` has `stripe` as its `network` value.\n\n[](#retrieverc)\n\nUse `GET /v1/treasury/received_credits/{{RECEIVED_CREDIT_ID}}` to retrieve the [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) with the specified ID.\n\nThe following request retrieves the `ReceivedCredit` with the specified ID. The response for this request includes expanded [Transaction object](https://docs.stripe.com/api/treasury/transactions) details.\n\n`curl -G https://api.stripe.com/v1/treasury/received_credits/{{RECEIVED_CREDIT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=transaction`\n\nIf successful, the response provides the requested `ReceivedCredit` object. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter of your request. The fields that you can expand have an `Expandable` comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{RECEIVED_CREDIT_ID}}\",   \"object\": \"received_credit\",   \"livemode\": true | false,   \"created\": \"{{Timestamp}}\",   // The FinancialAccount that received the funds   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // The description of this movement sent by the originator`\n\n[](#listrc)\n\nUse `GET /v1/treasury/received_credits` to retrieve all of the `ReceivedCredits` for the financial account with the ID of the required `financial_account` parameter. You can filter the list with the standard list parameters, by `status`, or by `linked_flows.source_flow_type`.\n\n``{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by FinancialAccount (required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by status   \"status\": \"succeeded\" | \"failed\",   // Filter by `source_flow_type`   \"linked_flows.source_flow_type\": nil | \"payout\" | \"outbound_payment\" }``\n\nThe following request retrieves the `ReceivedCredits` that have a status of `failed` for the specified financial account.\n\n`curl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d status=failed`\n\nIf successful, the response includes the [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) objects that match the criteria specified in the request.\n\n[](#testingrc)\n\nUse `POST /v1/test_helpers/treasury/received_credits` to simulate receiving funds in a financial account. To simulate a bank transfer from an account outside of Stripe to your financial account, set `initiating_payment_method_details` to the values of the external bank account, and set `network` to `ach` or `us_domestic_wire`.\n\nThe following request creates a test mode `ReceivedCredit` from an external bank account using an `OutboundPayment` between two financial accounts on the same platform.\n\n`curl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account={{DESTINATION_FINANCIAL_ACCOUNT_ID}} \\   -d network=ach \\  -d amount=1234 \\  -d currency=usd`\n\nIf successful, the response returns a `ReceivedCredit` object. The following is an example of a response for a bank transfer.\n\n`{   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"network\": \"ach\",   \"amount\": \"1234\",   \"currency\": \"usd\",   \"description\": \"Test\",   \"source_details\": {     \"type\": \"aba\",     \"aba\": {       \"country\": \"US\",       \"routing_number\": \"12341234\",       \"account_number\": \"0123456789\",       \"account_holder_name\": \"Jenny Rosen\",     }   } }`\n\n[](#webhooksrc)\n\nStripe emits the following `ReceivedCredit` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.received_credit.created` on `ReceivedCredit` creation.\n*   `treasury.received_credit.{{new_status}}` when an `ReceivedCredit` changes status. Available status value options include:\n    *   `treasury.received_credit.succeeded`\n    *   `treasury.received_credit.failed`\n*   `treasury.received_credit.reversed` on `ReceivedCredit` [reversal](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals).",
    "title": "Moving money with Treasury using ReceivedCredit objects | Stripe Documentation",
    "description": "Learn how to move money into a Treasury financial account from another Treasury financial account or bank account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/credit_reversals/object",
    "markdown": "# The CreditReversal object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedCredit being reversed.\n    \n*   Status of the CreditReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe CreditReversal object\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Create a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/create)\n\nReverses a ReceivedCredit and creates a CreditReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_creditstringRequired\n    \n    The ReceivedCredit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a CreditReversal object.\n\nPOST /v1/treasury/credit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_credit=rc_1MtkGJLkdIwHu7ixWPuY9DGn\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Retrieve a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/retrieve)\n\nRetrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CreditReversal object.\n\nGET /v1/treasury/credit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals/credrev_1Mtklw2eZvKYlo2CJG2MWJM7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [List all CreditReversals](https://docs.stripe.com/api/treasury/credit_reversals/list)\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The CreditReversal object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/checklist",
    "markdown": "# Account checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Complete this checklist before taking your Stripe account live.\n\nThe items in this checklist apply to all Stripe accounts, regardless of how or where you signed up for Stripe. We also have checklists for [taking your integration live](https://docs.stripe.com/get-started/checklist/go-live) and adhering to [website payment best practices](https://docs.stripe.com/get-started/checklist/website). For the safety and security of your Stripe account, follow these steps before going live:\n\n*   Enable two-step authentication\n    \n    For security purposes, [enable two-factor authentication (2FA)](https://support.stripe.com/questions/how-do-i-enable-two-step-verification) on your Stripe account. Two-factor authentication requires that you log in with both your username and password, and enter a code sent to your mobile device. Using 2FA makes it harder for someone else to access your Stripe account.\n    \n*   Confirm your statement descriptor and public information\n    \n    The [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) appears on customer statements when you charge their card. Missing or incorrect information can result in confused customers creating disputes, so make sure to review your statement descriptor in the [Dashboard](https://dashboard.stripe.com/settings/public). Statement descriptors are limited to between 5 and 22 characters. They must contain at least 5 letters and can’t use the following special characters: `<`, `>`, `\\`, `'`, or `\"`. Stripe also recommends that you add text to your site that tells your users what they’ll see on their statements.\n    \n    The card issuer can automatically include other account information—for example, business name, address, email, or phone number—to show on your customer’s statements. Check that all of this information in your Stripe account is acceptable for your customers to see.\n    \n*   Set up email notifications\n    \n    Stripe can notify you of account activity by email. You can choose events to be notified of in your [Communication preferences](https://dashboard.stripe.com/settings/communication-preferences). If multiple [team members](https://docs.stripe.com/get-started/account/teams) have access to your account, each one can set their own notification preferences. At a minimum, we recommend turning on emails for successful charges and disputes.\n    \n*   Set up SMS from Stripe for critical account health updates\n    \n    Choose the events to receive notification of in your [Communication preferences](https://dashboard.stripe.com/settings/communication-preferences). Any [team member](https://docs.stripe.com/get-started/account/teams) with account access can set their own notification preferences.\n    \n*   Prevent and manage fraud and disputes\n    \n    [Fraud and disputes](https://docs.stripe.com/disputes/prevention) are unfortunate realities in all commerce. While Stripe is constantly improving its tools to help reduce these incidents, we recommend that you’re set up to:\n    \n    *   Regularly review [payments in the Dashboard](https://dashboard.stripe.com/test/payments).\n    *   [Report charges](https://docs.stripe.com/radar/risk-evaluation) that appear suspicious using the Dashboard or API.\n    *   Have [evidence](https://docs.stripe.com/disputes/responding#respond) at the ready for disputes.\n    *   Prevent and mitigate [card testing](https://docs.stripe.com/disputes/prevention/card-testing).\n*   Review your bank account information\n    \n    Incorrect bank information is a common cause of [payout delays](https://docs.stripe.com/payouts#payout-failures). Before accepting live charges, confirm [your bank details](https://dashboard.stripe.com/settings/payouts) are correct. If you process charges in [multiple currencies](https://docs.stripe.com/currencies) and have multiple bank accounts, also confirm you’ve established the correct default currency. Multiple bank accounts for additional currencies are optional as Stripe can convert any payments into your default currency.\n    \n    When reviewing your bank information, set your preferred [payout schedule](https://docs.stripe.com/payouts#payout-schedule). The recommended and default option is daily—as funds become available—but you can change this to best suit your business and reporting needs.\n    \n*   Give your team members access to your Stripe account\n    \n    You can give your [team members](https://docs.stripe.com/get-started/account/teams) access to your Stripe account. Stripe even lets you give different team members different permissions depending on their [roles](https://docs.stripe.com/get-started/account/teams/roles).\n    \n    Whenever you give a team member access to your Stripe account, don’t give them your login credentials. We also recommend that you ask your team members to enable 2FA.\n    \n    If a team member no longer needs access to your Stripe account, remove them from your account.\n    \n*   Understand industry-specific restrictions\n    \n    Review our [Prohibited & Restricted businesses list](https://stripe.com/legal/restricted-businesses) to determine if your business operates in an industry that Stripe restricts or prohibits.\n    \n    If your business operates in a restricted industry, you might need to provide additional documentation before you can use Stripe as your payment processor. If your business operates in a prohibited industry, you won’t be able to use Stripe.\n    \n    If you have any questions about onboarding requirements or restrictions applicable to your business, [contact us](https://stripe.com/contact).",
    "title": "Account checklist | Stripe Documentation",
    "description": "Complete this checklist before taking your Stripe account live.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account",
    "markdown": "# Create an account | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to activate and manage your Stripe account.\n\nYou can begin using your Stripe account in [test mode](https://docs.stripe.com/test-mode \"test mode\") as soon as you [create it](https://dashboard.stripe.com/register). In test mode, you can simulate using all of Stripe’s features without moving real money. After you activate your account, you can accept payments, create additional accounts, start a team, and set up a custom email domain.\n\nStripe generates an ID for your account. This ID is different from your account’s name and uniquely identifies your account. You can find your account ID in your [Account](https://dashboard.stripe.com/settings/account) and [Profile](https://dashboard.stripe.com/settings/user) settings.\n\n## Get started with a Stripe account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Manage your account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Create an account | Stripe Documentation",
    "description": "Learn how to activate and manage your Stripe account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/add-funds",
    "markdown": "# Add funds to your Stripe balance\n\n## Cover increased refunds and chargebacks by adding funds to your balance.\n\nTo keep your business healthy when your account has a negative balance or when you expect an increase in customer refunds, you can add funds directly to your Stripe balance using a wire or bank transfer.\n\nYou can proactively add funds to use for future refunds or chargebacks. These funds are held separately from your earnings, [payouts](https://docs.stripe.com/payouts \"payout\"), and funds from other Stripe products.\n\n## Add funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo add funds to your balance using the Dashboard:\n\n1.  Determine how much you want to add to your balance.\n    \n2.  Go to the [Balances](https://dashboard.stripe.com/balance/overview) page in the Dashboard, and click **Add to balance**.\n    \n3.  Select whether you want to use a wire or local bank transfer, review Stripe’s bank information, and click **Done**.\n    \n4.  Initiate the transfer from your bank account.\n    \n5.  After your bank has sent the funds, return to [Balances](https://dashboard.stripe.com/balance/overview), and click **Add to balance**.\n    \n6.  _(Optional)_ If the dialog prompts you for a receipt, upload a screenshot or the file that proves that your bank transferred the funds.\n    \n    *   To fund your Stripe balance faster, we might ask you to include a screenshot or PDF of your bank’s transfer or wire confirmation.\n7.  Click **Confirm Transfer**.\n    \n\n![Add to your balance](https://b.stripecdn.com/docs-statics-srv/assets/balance.33f25616b262a378ffd6c0623ef9f5ac.png)\n\nAdd to your balance\n\n## View and use your funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo see the total amount of funds set aside for future refunds, disputes, or negative balances, go to **Future refunds or disputes or negative balance** in the [Balances](https://dashboard.stripe.com/balance/overview) page. Stripe uses these funds first when it processes a refund or a customer disputes a payment. If no funds remain, we process refunds and disputes from your available balance. If you receive an email from Stripe about debiting your bank account, first check your balance.\n\n#### Payouts\n\nIf you don’t need to have extra funds set aside, you can pay them out to your bank.\n\n## Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFunds typically show up in your balance within 1 to 7 business days, depending on the method used to add funds. For ACH transfers, it usually takes 1 to 5 business days.\n\nTo have funds settle to your account without delay, make sure the wire or transfer from your bank includes your Stripe unique reference code in the transfer memo. Find this unique reference code on the [Balances](https://dashboard.stripe.com/balance/overview) page in the Dashboard.",
    "title": "Add funds to your Stripe balance | Stripe Documentation",
    "description": "Cover increased refunds and chargebacks by adding funds to your balance.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/teams",
    "markdown": "# Start a team | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to invite and interact with team members.\n\nYou can [invite members](https://dashboard.stripe.com/settings/team?invite_shown=true) of your team to access your Stripe account. You must assign each team member at least one role before you can invite them. Roles protect your sensitive information and restrict the actions team members can perform on your account. See the [list of actions](https://docs.stripe.com/get-started/account/teams/roles) that each role can and can’t perform before assigning the role to a team member.\n\nYou can invite team members individually, or invite multiple users at the same time by separating their email addresses with a comma or space. You can also assign multiple roles to a team member, which gives them the combined set of permissions granted by those roles. Invites to your Stripe account expire after 10 days.\n\n![Invite a team member to access your Stripe account](https://b.stripecdn.com/docs-statics-srv/assets/invite-team-members.56ae9525e14e736f8fd9d7045b7e96f1.png)\n\nInvite a team member to access your Stripe account\n\nAfter a team member has accepted their invite, you can edit their role at any time from your account’s [Team](https://dashboard.stripe.com/settings/team) settings. To edit a team member’s role, click the overflow menu (), then click **Edit**.\n\n## Mention team members ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mention team members when you add a note to a payment. If you mention a team member, they receive an email notification with the note and a link to the associated payment.\n\n![Mention a team member when you add a note to a payment](https://b.stripecdn.com/docs-statics-srv/assets/mention-team-members.b21aa27e9cf6862239796d842d869428.png)\n\nMention a team member\n\n## Receive email notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure email notifications under **Communication preferences** in your [Profile](https://dashboard.stripe.com/settings/user), and apply them on a per-user basis. If your team members also want to receive notifications, they must customize their own settings. Stripe sends email notifications to you when any of the following events occur:\n\n*   A successful payment is received.\n*   An [application fee](https://docs.stripe.com/connect/direct-charges#collect-fees) is collected from a connected account.\n*   A payment is [disputed](https://docs.stripe.com/disputes) by a customer.\n*   A payment is marked as [elevated risk](https://docs.stripe.com/radar/risk-evaluation#elevated-risk) by Stripe or a custom [Stripe Radar](https://docs.stripe.com/radar) rule.\n*   You’re mentioned in a note.\n*   A customer sends an incorrect amount to pay their [invoice](https://docs.stripe.com/invoicing).\n*   A [webhook](https://docs.stripe.com/webhooks) delivery fails.\n\nFor a full list of notification events, go to your **Communication preferences** under **Profile**.",
    "title": "Start a team | Stripe Documentation",
    "description": "Learn how to invite and interact with team members.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/branding",
    "markdown": "# Branding your Stripe account | Stripe DocumentationThe Stripe Docs logo\n\nCustomize the appearance of your emails, checkout, payment links, customer portal, and invoices in your [Branding settings](https://dashboard.stripe.com/account/branding).\n\n## Branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIcons and logos must be in JPG or PNG format, less than 512kb in size, and equal to or greater than 128px by 128px.\n\n*   **Icon**—A square, digital-friendly icon or logo.\n*   **Logo**—A non-square logo to override some uses of the icon.\n*   **Brand color**—Used on receipts, invoices, and the customer portal.\n*   **Accent color**—Used as a background on emails and pages.\n\n### Apply brand settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBrand settings apply to your whole account and take effect in many places.\n\n| Setting | Emails | Checkout & Payment Links | Customer portal | Hosted Invoice Page | Invoice PDFs |\n| --- | --- | --- | --- | --- | --- |\n| **Icon** | Yes | Yes | Yes | Yes | Yes |\n| **Logo** | No  | Yes | No  | No  | Yes |\n| **Brand color** | Yes | No  | Yes | Yes | Yes |\n| **Accent color** | Yes (background color) | Yes | Yes | Yes | No  |\n\n### Branding with Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you maintain a platform with Connect, the customer portal uses the brand settings of the connected account under these circumstances:\n\n*   The platform uses direct charges\n*   The platform uses destination charges with `on_behalf_of`\n\nFor all other connected accounts, you can configure the brand settings with the [Accounts](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) API.\n\n## Customize policies and contact information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can display your return, refund, and legal policies, and your support contact information to your customers on Checkout. Go to [Checkout Settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display, including:\n\n*   Details about your return and refund policies\n*   Your support phone number, email, and website\n*   Links to your terms of service and privacy policy\n\nPresenting this information can increase buyer confidence and minimize cart abandonment.\n\n#### Configure support and legal policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom [Checkout Settings](https://dashboard.stripe.com/settings/checkout), add support contact information to your sessions by enabling **Contact information**. Similarly, add links to your **Terms of service** and **Privacy policy** to your sessions by enabling **Legal policies**. If you require customers to implicitly consent to your legal policies when they complete their checkout, select the **Display agreement to legal terms** checkbox.\n\nYou must add your support contact information and legal policy links in your [Public Detail Settings](https://dashboard.stripe.com/settings/public).\n\nThe following previews show how Checkout displays a dialog with the support contact information, links to the store legal policies, and information about the payment terms.\n\n![A checkout page with contact information.](https://b.stripecdn.com/docs-statics-srv/assets/contact-modal.2b81bc2e74657f7c94a45a743439c81f.png)\n\nPreview of contact information on Checkout.\n\n![A checkout page with legal policies.](https://b.stripecdn.com/docs-statics-srv/assets/legal-modal.9351cb51408c2a9f5c0ae23aab03e138.png)\n\nPreview of legal policies on Checkout.\n\n#### Configure return and refund policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisplay your return, refund, or exchange policies, by enabling **Return and Refund policies**. Although businesses that sell physical goods use return policies, businesses that sell digital goods or customized physical goods typically use refund policies. Because they’re not mutually exclusive, you can select both options if your business sells both categories of goods. You can edit your return and refund details, including:\n\n*   Whether you accept returns, refunds, or exchanges\n*   Whether returns, refunds, or exchanges are free or if they’re subject to a fee\n*   How many days after a purchase you’ll accept returns, refunds, or exchanges\n*   How customers can return items shipped to them\n*   Whether you accept in-store returns\n*   A link to the full return and refund policy\n*   A custom message\n\nIf you accept free returns, refunds, or exchanges, Checkout highlights the policy for customers.\n\nThe following previews show how Checkout displays a return policy. In this example, it’s for purchases that can be returned by shipping them or in-store for a full refund (or exchange) for up to 60 days. You can display similar information for refunds.\n\n![Preview of return policies on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/return-policy-modal.0c7a9ff71b8bc2c155842532801e06a8.png)\n\nPreview of return policies on Checkout.\n\n![Preview of a policy highlight on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/policy-highlight.334828420693a33d376977a2c0fe5851.png)\n\nPreview of a policy highlight on Checkout.\n\n## Other customization options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Custom domains**\n    \n    Checkout, Payment Links, and customer portal pages use stripe.com as the default domain. You can optionally set up your own [custom domain](https://docs.stripe.com/payments/checkout/custom-domains) for those products.\n    \n*   **Custom email domain**\n    \n    By default, when Stripe sends invoices, receipts, and failed payment notifications to your customers, it sends them from the stripe.com domain. Set up your own [custom domain](https://docs.stripe.com/get-started/account/email-domain) to change this.\n    \n*   **Payments, debits, and bank transfer emails**\n    \n    You can decide which emails your customers receive about payments, debits, and bank transfers in your [Customer emails settings](https://dashboard.stripe.com/settings/emails). You can also choose the default language to use for emails when you don’t know a customer’s preference.\n    \n*   **Billing (subscription and invoicing) emails**\n    \n    You can turn on customer emails for [Billing](https://docs.stripe.com/billing/revenue-recovery/customer-emails) and [Invoicing](https://docs.stripe.com/invoicing/send-email) in the Dashboard or through the API.",
    "title": "Branding your Stripe account | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/multiple-accounts",
    "markdown": "# Multiple accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create and manage multiple Stripe accounts.\n\nYou can create additional Stripe accounts associated with your email address. You might create some accounts yourself, or you might be given access to other accounts as a [team member](https://docs.stripe.com/get-started/account/teams). To create a new account, click on the name of your current Stripe account in the upper-left corner, and select **New account**. To switch the account you’re currently viewing in the [Dashboard](https://dashboard.stripe.com/), click on the name of your current Stripe account in the upper-left corner and then select the account to switch to.\n\nYou must use separate Stripe accounts for projects, websites, or businesses that operate independently from one another. When you activate a new account, it’s subject to Stripe’s standard policies and pricing—it doesn’t inherit any special status or other similar considerations that might apply to your existing account.\n\nUsing additional accounts has a number of benefits:\n\n*   **Separate tax and legal entity information**: You can only associate each account with the tax ID and legal entity of one business. If you operate multiple businesses that have separate tax ID information (for example, separate legal entities), you must create additional accounts for each.\n    \n*   **Unique statement descriptor and public business information**: Using the same Stripe account for separate businesses can cause confusion as the [public business information](https://docs.stripe.com/get-started/account/activate#public-business-information) used is the same for both. For example, a customer who purchases from your business “XYZ” might see a charge from your business “ABC” on their statement, potentially resulting in a dispute. Each additional account has its own public information to accurately describe your business and payments.\n    \n*   **Reporting and reconciliation**: Separating the payments processed by your businesses helps you find payments, create and export [reports](https://docs.stripe.com/reports), and reconcile payouts to your bank account.\n    \n*   **Payouts to separate bank accounts**: Each additional account can use a separate bank account for [payouts](https://docs.stripe.com/payouts) (although you can use the same bank account if you want).\n    \n\nIf your business requires multiple separate accounts for local acquiring or maintaining separate business lines, you can create an [organization](https://docs.stripe.com/get-started/account/orgs) for centralized reporting and management.\n\nWhen you have multiple projects or businesses that operate under the same legal entity, you can use the same tax ID and business information across multiple accounts. Make sure to provide suitable [public business information](https://docs.stripe.com/get-started/account/activate#public-business-information) to avoid customer confusion.",
    "title": "Multiple accounts | Stripe Documentation",
    "description": "Learn how to create and manage multiple Stripe accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/custom-domains",
    "markdown": "# Use your custom domain | Stripe DocumentationThe Stripe Docs logo\n\nIn this section, you’ll create the DNS records you need to connect your domain. As you go through each step, check each checkbox to keep track of where you are in the process.\n\nSelect the tab that matches your DNS provider from the tabs below—this gives you specific, guided instructions for creating the required DNS records. If your DNS provider isn’t an option, follow the Standard instructions:\n\nThese are standard instructions for creating your DNS records. If you have issues with any of the steps, please contact your DNS provider for more assistance.\n\n#### Note\n\nTo track your progress, go through each step and check it off when you’ve completed it.\n\n*   Sign into your DNS provider\n    \n    Most DNS providers have a control panel you can sign into to manage your DNS. Find your provider’s control panel page and sign in.\n    \n*   Find the page to manage the DNS for your domain\n    \n    Now that you’re logged in, find where you can manage the DNS records for your domain in your provider’s control panel.\n    \n    If you’re having issues finding the right page, you can:\n    \n    *   See if your DNS provider has a help article for adding new DNS records that can point you in the right direction.\n    *   Contact your DNS provider for additional support.\n*   From your DNS control panel, add a new record that maps your desired subdomain to Checkout. Most DNS providers ask you for the record type, name, value, and TTL or expiration when creating a new record.\n    \n    #### Note\n    \n    This record is what connects your subdomain to Stripe Checkout.\n    \n    Enter these values and save the new DNS record:\n    \n    | Field | Instructions | Description |\n    | --- | --- | --- |\n    | **Type** | Select `CNAME` from the dropdown | What kind of DNS record this is. |\n    | **Name** | If your custom subdomain is **checkout.powdur.me**, enter `checkout` | For CNAME records, this field is the first part of your subdomain (the part leading up to the first period). |\n    | **Value** | Enter `hosted-checkout.stripecdn.com` | This is what the new subdomain record points to–in this case, Stripe.<br><br>Some providers may expect a trailing period (`.`) after the CNAME value. Make sure to verify that your CNAME value matches the format your provider expects. |\n    | **TTL/Expiry** | Enter `300` | An expiration of 5 minutes (300 seconds) is OK. Your DNS provider might not allow you to change the TTL value. If this field is missing or you can’t change it, it’s safe to ignore this part of the configuration. |\n    \n*   From your DNS control panel, add a new TXT record.\n    \n    #### Note\n    \n    This TXT record lets us verify that you’re the owner of this domain. This is required to issue TLS certificates for your domain, so you can continue to accept payments securely.\n    \n    Enter these values and save the new DNS record:\n    \n    | Field | Instructions | Description |\n    | --- | --- | --- |\n    | **Type** | Select `TXT` from the dropdown | What kind of DNS record this is. |\n    | **Name** | If your custom domain is **checkout.powdur.me**, enter `_acme-challenge.checkout` | For TXT records, this field is the subdomain portion of your domain. |\n    | **Value** | Visit the [Dashboard settings](https://dashboard.stripe.com/settings/custom-domains) and click **View instructions** to copy the correct TXT value record. | This is a long, unique string used for domain verification. |\n    | **TTL/Expiry** | Enter `300` | An expiration of 5 minutes (300 seconds) is OK. Your DNS provider might not allow you to change the TTL value. If this field is missing or you can’t change it, it’s safe to ignore this part of the configuration. |\n    \n*   Verify your CNAME record is setup\n    \n    After you save your DNS record, verify that it has the correct values.\n    \n    1.  Wait up to 10 minutes for your DNS provider to update its nameservers.\n    2.  Replace **checkout.powdur.me** with your custom domain in the following command and run it from your terminal:\n    \n    `nslookup -querytype=CNAME checkout.powdur.me`\n    \n    You should see output like:\n    \n    `<your subdomain> \tcanonical name = hosted-checkout.stripecdn.com.`\n    \n    When you see that output, move onto the next step.\n    \n*   After you save your DNS record, verify that it has the correct values.\n    \n    1.  Wait up to 10 minutes for your DNS provider to update its nameservers.\n    2.  Replace **checkout.powdur.me** with your custom domain in the following command and run it from your terminal:\n    \n    `nslookup -querytype=TXT _acme-challenge.checkout.powdur.me`\n    \n    You should see output like this:\n    \n    `_acme-challenge.<your domain>   text = \"<your unique TXT record value>\"`\n    \n    If you don’t see your unique TXT record value in the output, wait a bit longer and try running the command again.\n    \n    When you finish this step, your DNS records are configured.\n    \n\nNow that you’ve created your DNS records and verified them, Stripe verifies the connection and provisions your domain on our end. We’ll send you an email and a Dashboard notification when the domain is ready for you to enable it. You can also visit the [Dashboard settings](https://dashboard.stripe.com/settings/custom-domains) at any time to see the current status of your custom domain connection.",
    "title": "Use your custom domain | Stripe Documentation",
    "description": "Learn how to bring your own custom domain to Stripe Checkout, Payment Links, and customer portal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/statement-descriptors",
    "markdown": "# Statement descriptors | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how statement descriptors work.\n\nStatement descriptors explain charges or payments on bank statements. Using clear and accurate statement descriptors can reduce chargebacks and disputes. Banks and card networks require the inclusion of certain types of information that help customers understand their statements, and statement descriptors provide this information.\n\nWhen you activate your account, you can set a single statement descriptor (static statement descriptor) that appears on all customer statements. For card charges, you can also create a statement descriptor that contains a static prefix associated with your account but with a dynamic suffix associated with each charge. This enables you to specify details about the product, service, or payment on bank or card statements.\n\nMost banks display this information consistently, but some might display it incorrectly or not at all.\n\n## Statement descriptor requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA complete statement descriptor—either a single static descriptor or the combination of a prefix and suffix—must meet the following requirements:\n\n*   Contains only Latin characters.\n*   Contains between 5 and 22 characters, inclusive.\n*   Contains at least one letter (if using a prefix and a suffix, both require at least one letter).\n*   Doesn’t contain any of the following special characters: `<`, `>`, `\\`, `'` `\"` `*`.\n*   Reflects your Doing Business As (DBA) name.\n*   Contains more than a single common term or common website URL. A website URL only is acceptable if it provides a clear and accurate description of a transaction on a customer’s statement.\n\nA static prefix, also called a shortened descriptor in the Dashboard, must contain between 2 and 10 characters, inclusive. The remaining characters are reserved for the dynamic suffix.\n\n## Set the static statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou set a static statement descriptor or the shortened descriptor (prefix) in the [Dashboard](https://dashboard.stripe.com/settings/public). This value appears on all customer statements for charges or payments.\n\nA static statement descriptor is sufficient if:\n\n*   Your business provides only a single product or service.\n*   Your customers understand a static value for any transaction with your business.\n*   You prefer to provide the same statement descriptor for all transactions.\n\nFor card charges, consider a static prefix with dynamic suffix if:\n\n*   You provide multiple products or services.\n*   Your customers might not understand a single value for all their transactions with your business.\n*   You prefer to provide transaction-specific details on the statement descriptor.\n\nSet both the statement descriptor and the shortened statement descriptor for flexibility in setting statement descriptors on charges.\n\nIf you set the statement descriptor on card charges and don’t set a prefix (shortened descriptor), Stripe truncates the account statement descriptor as needed to set the prefix value. If the account statement descriptor contains fewer than 10 characters, we don’t truncate it.\n\n## Set a dynamic suffix ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDynamic suffixes are supported only for card charges. The suffix should specify details about the transaction so your customer can understand it clearly on their statement. The suffix is concatenated with the prefix, the `*` symbol, and a space to form the complete statement descriptor that your customer sees.\n\nMake sure that the total length of the concatenated descriptor is no more than 22 characters, including the `*` symbol and the space. If the prefix is `RUNCLUB` (7 characters), the dynamic suffix can contain up to 13 characters—for example, `9-22-19 10K` (11 characters) or `OCT MARATHON` (12 characters). The computed statement descriptor is `RUNCLUB* 9-22-19 10K` or `RUNCLUB* OCT MARATHON`.\n\nFor card charges, providing a dynamic statement descriptor requires the `statement_descriptor_suffix` value. For non-card charges, if you set a value only for `statement_descriptor` on a payment intent, Stripe uses it in place of the account statement descriptor (static descriptor).\n\nThe following examples show how to add a suffix to the PaymentIntent object.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"example descriptor\"`\n\n## Set the statement descriptor on non-card charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `statement_descriptor` parameter to set the complete statement descriptor for non-card charges. Attempting to set this parameter for card charges results in a 400 error. For payments made with a card, use `statement_descriptor_suffix` instead.\n\n## Set Japanese statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nJapanese merchants can set kanji and kana statement descriptors. Providing clear and easy to understand statement descriptors is important to reduce confusion and chargebacks. We recommend setting statement descriptors in all three supported scripts (kanji, kana, and Latin characters).\n\nYou can change your account’s [static](https://docs.stripe.com/get-started/account/statement-descriptors#static) kanji and kana statement descriptors and shortened descriptors (prefix) in the [Dashboard](https://dashboard.stripe.com/settings/public).\n\nFor card charges, you can set [dynamic suffixes](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) in kanji and kana on Payment Intents and Checkout Sessions. We compute the full descriptor that cardholders see by concatenating the shortened prefix and separators, in the same way as `statement_descriptor_suffix`.\n\nThe following example shows how to set kanji and kana suffixes on a Payment Intent.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=jpy \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"example descriptor\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kanji]\"=\"漢字サフィックス\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kana]\"=\"カナサフィックス\"`\n\n### Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile Japanese statement descriptors share some requirements with [English requirements](https://docs.stripe.com/get-started/account/statement-descriptors#requirements), the following table shows additional requirements for kanji and kana descriptors.\n\n|     | Kanji | Kana |\n| --- | --- | --- |\n| Maximum total length | 17  | 22  |\n| Minimum prefix length | 1   | 2   |\n| Maximum prefix length | 10  | 10  |\n| Supported character type | Kanji, kana, and Latin | Kana |\n| Validation rule | `< > \\ ' \" * ＊` are not allowed | Only kana, spaces, dashes, and dots are allowed |\n\n#### Note\n\nTotal length is the length of either the static descriptor or the concatenated descriptor (prefix + separator + suffix). Descriptors exceeding the maximum length are truncated.\n\n### Issuer behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nJapanese statement descriptors are available only when both of these are true:\n\n*   The card is a Visa or Mastercard issued in Japan.\n*   The charge is processed by a Japanese merchant or on behalf of a Japanese merchant.\n\nWhile most issuers use a Japanese statement descriptor rather than a Latin one, it is ultimately up to the issuer to decide which statement descriptor (kanji, kana, or Latin) to show on the cardholder’s statement.\n\nThe [calculated\\_statement\\_descriptor](https://docs.stripe.com/api/charges/object#charge_object-calculated_statement_descriptor) in API responses is always the Latin statement descriptor, but it doesn’t mean the issuer needs to select the Latin statement descriptor rather than the Japanese one.\n\n### `ST*` prefix![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the behavior described above, Japanese merchants’ JPY-denominated Mastercard payments are prefixed with `ST*` (or `ＳＴ＊` for kanji descriptors) automatically to comply with brand requirements.\n\n### Statement descriptor display timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStatement descriptors for Japanese merchants’ JPY-denominated payments are sent to issuers at time of payment capture. As a result, they usually take a few days to appear on cardholder statements. In the meantime, depending on the card, a temporary descriptor might be visible to cardholders:\n\n*   **Mastercard:** `ST*ONLINE PAYMENT`, `ＳＴ＊オンライン決済` (kanji), or `ST*オンラインケッサイ` (kana)\n*   **Visa, JCB, Diners Club, and Discover:** the account’s default statement descriptor",
    "title": "Statement descriptors | Stripe Documentation",
    "description": "Learn how statement descriptors work.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/sso",
    "markdown": "# Single sign-on (SSO) | Stripe DocumentationThe Stripe Docs logo\n\n## Authenticate to the Stripe Dashboard with an Identity Provider.\n\n#### Note\n\nSingle sign-on for the Dashboard is currently in invite only beta.\n\nSSO is an account security feature which allows customers to mandate sign-in requirements and team member access to systems like the Stripe Dashboard. Specifically, Stripe supports Security Assertion Markup Language (SAML) version 2.0, which allows for the creation and authentication of team member accounts to be deferred to an Identity Provider (IdP).\n\nSSO is an account security feature which allows customers to mandate sign-in requirements and team member access to systems like the Stripe Dashboard. It leverages authentication decisions defined through an IdP, such as password policies and mandating two-factor authentication and allows new team members to instantly sign in to the Dashboard using Just-in-Time (JIT) account provisioning.\n\n#### Security incidents\n\nIf your IdP is compromised, unauthorized parties might be able to access your Stripe account. You’re responsible for mitigating your exposure to security incidents by assessing the security requirements of your business as well as selecting and implementing security procedures and controls.\n\n## Features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports the following SSO features:\n\n*   **SSO configuration options**: Configure Stripe accounts to either mandate SSO for all team members or allow sign-in using SSO or email and password.\n*   **JIT account creation**: Provision new Stripe accounts for team members without existing access, upon their first SSO sign-in.\n*   **Custom Dashboard roles for team members**: Configure Dashboard roles through the IdP. This is compatible with [user roles](https://docs.stripe.com/get-started/account/teams).\n*   **IdP-initiated login**: Directly authenticate from an IdP’s website or browser extension, assuming the IdP supports Service-Provider-Initiated login.\n\nStripe doesn’t support the following features:\n\n*   **User Deletion in SAML**: Due to the limitations of SAML, Stripe won’t be notified if user access is revoked in IdP. When users try to log in again through SSO after the current session expires, Stripe revokes their access. If this needs to happen instantly, you can delete the users in your [Team settings](https://dashboard.stripe.com/settings/team).\n*   **System for Cross-domain Identity Management (SCIM)**: SCIM is a protocol that an IdP can use to synchronize user identity lifecycle processes (for example, provisioning and deprovisioning access, and populating user details) with the service provider, such as Stripe.",
    "title": "Single sign-on (SSO) | Stripe Documentation",
    "description": "Authenticate to the Stripe Dashboard with an Identity Provider.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/handle-verification-updates",
    "markdown": "# Handle verification updates | Stripe DocumentationThe Stripe Docs logo\n\n## Help your connected accounts maintain compliance with changing verification requirements.\n\nBefore your connected accounts can accept payments and send payouts, you must fulfill what are typically called Know Your Customer (KYC) requirements. To do so, you must collect [certain information about your connected accounts](https://docs.stripe.com/connect/required-verification-information) and send it to Stripe for verification.\n\nStripe frequently updates KYC requirements, often due to changes implemented by financial regulators, card networks, and other financial institutions.\n\n#### Get risk requirements with the API\n\nAs part of a current beta, you can handle current and upcoming risk-related account issues with the [account.requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) attribute. To learn more about how to participate in the beta, [submit your email.](#)\n\nThese updates might require you to take the following actions:\n\n1.  Modify your onboarding flow to account for the changed requirements.\n2.  Collect updated information from affected connected accounts and handle verification responses.\n\nWhen [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts, we’ll notify you.\n\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). For embedded onboarding, include the `collectionOptions` attribute in the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). For Stripe-hosted onboarding, specify the `collection_options` parameter when [creating account links](https://docs.stripe.com/api/account_links/create#create_account_link-collection_options).\n\n### API version considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn [API version 2023-10-16](https://docs.stripe.com/upgrades#2023-10-16) and later, the `account` object’s [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array specifies the latest verification error types in the `code` attribute. We recommend upgrading to API version 2023-10-16 and using `requirements.errors`.\n\nIf you can’t update to version 2023-10-16, earlier versions of the `requirements.errors` array include a `detailed_code` field to return verification errors that weren’t compatible with the `code` attribute. The `detailed_code` attribute doesn’t appear in the API reference.\n\nIf you’re using account or remediation links to collect new requirements, set the [API version to 2021-09-07](https://docs.stripe.com/libraries/set-version) or later.\n\nIf you’re receiving `account.updated` events. Set the webhooks [API version to 2021-09-07](https://docs.stripe.com/upgrades#2021-09-07) or later.\n\n[](#modify-your-onboarding-flow)\n\n### Onboarding flow options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen requirements change, we update Stripe-hosted and embedded onboarding flows to reflect the changes. However, if you use a custom API-based onboarding flow, you must update it to handle any changed requirements.\n\nRegardless of the onboarding flow type, you must address requirements changes for your existing connected accounts.\n\n| Onboarding Flow Type | Description | Update Responsibility |\n| --- | --- | --- |\n| [API-based](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding) | You build custom flows using Stripe APIs for your connected accounts. Your integration must meet all of Stripe’s onboarding requirements. | You’re responsible for identifying requirements changes and updating your flows to handle them. |\n| [Embedded](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) new | (**Recommended method**) Your connected accounts interact with a [highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components) and [customizable](https://docs.stripe.com/connect/embedded-onboarding#customize-policies-shown-to-your-users) UI in an embedded component without leaving your application. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates embedded onboarding components accordingly. |\n| [Stripe-hosted](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) | Your application redirects your connected accounts to Stripe to complete the onboarding process in a co-branded interface. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates hosted onboarding accordingly. |\n\nIf you use embedded components or Stripe-hosted onboarding, requirements changes don’t require you to update your onboarding flow. Skip to the section on [collecting updated information](#collect-updated-information-from-affected-users).\n\nIf you use a custom API-based onboarding flow, handle updated requirements by following these steps or by replacing your onboarding flow with embedded components or Stripe-hosted onboarding.\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n### Modify your API-based onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### 1\\. Preview updated verification requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen verification requirements change, you must collect updated information by [a certain date](https://support.stripe.com/user/questions/onboarding-requirements-updates). Otherwise, connected accounts won’t be able to use the capabilities you request (for example, `card_payments`). See details about the [information you need to collect](https://docs.stripe.com/connect/required-verification-information) based on an account’s region, capabilities requested, and other factors.\n\nYou can avoid disruption of your connected accounts’ capabilities by planning the collection of updated information before the `current_deadline`. To preview information about upcoming requirements changes, look at the Account object’s [future\\_requirements hash](https://docs.stripe.com/api/accounts/object#account_object-future_requirements).\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"future_requirements\": {     \"current_deadline\": 1656608400,     \"currently_due\": [       \"company.tax_id\"     ],     \"disabled_reason\": null,     \"errors\": [],     \"eventually_due\": [       \"company.tax_id\"     ],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n#### Note\n\n#### 2\\. Add required fields to your onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you’ve identified the updated information you need to collect, add corresponding fields to your onboarding flow and update your connected accounts using the Accounts API.\n\nTo avoid disruption to your connected accounts, have your onboarding flow address all requirements listed in the Account object’s [future\\_requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-future_requirements-currently_due) list.\n\nYou can also prepare for requirements that will apply when an account reaches their thresholds by considering the [future\\_requirements.eventually\\_due](https://docs.stripe.com/api/accounts/object#account_object-future_requirements-eventually_due) list.\n\n#### 3\\. Test your updated onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo simulate future verification requirements, create a test account using the Accounts API with `enforce_future_requirements` in the email field. That populates the account’s `requirements` hash with all known future verification requirements.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\  -d business_type=individual \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\   --data-urlencode email=\"jenny.rosen+enforce_future_requirements@example.com\"`\n\nTo verify that your updated onboarding flow fulfills the account requirements, onboard the test account and check its `requirements` hash. If your flow covers all the requirements, the [currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) list is empty.\n\n#### 4\\. Listen for account status changes to enable functionality ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDetect account status changes by listening to the `account.updated` event. After an account has gone through your onboarding flow, inspect the `currently_due` and `pending_verification` lists in the account’s `requirements` hash. When both are empty, and `requirements.disabled_reason` is null, you can enable functionality for the account. When `payouts_enabled` is true, the account can receive payouts. When `charges_enabled` is true, unlock payments for the account.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"charges_enabled\": true,   \"payouts_enabled\": true,   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [],     \"disabled_reason\": null,     \"errors\": [],     \"eventually_due\": [],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n[](#collect-updated-information-from-affected-users)\n\nYou can collect updated information from your connected accounts using embedded components, Stripe-hosted onboarding, or the Stripe API. We recommend either integrating embedded components or directing your connected accounts to [Stripe-hosted onboarding using Account Links](https://docs.stripe.com/connect/custom/hosted-onboarding).\n\nIn all cases, follow these steps:\n\n### 1\\. Adjust your integration to handle new verification responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe receives updated information about your connected accounts, it takes time to verify the associated account fields. Until we complete verification, assume that any related functionality remains disabled. To detect field verification updates, listen for [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) events and inspect them for [verification errors](https://docs.stripe.com/connect/handling-api-verification#validation-and-verification-errors). If you don’t resolve an error before its deadline, it disables requested capabilities for affected accounts.\n\nA disabled capability’s `requirements` hash contains a [disabled\\_reason](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-disabled_reason) that you can use to determine the action you must take. To investigate or to provide required information, use the [Accounts to review tab](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) in your Connect Dashboard.\n\n### 2\\. Identify accounts with outstanding requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your Connect Dashboard, select [Accounts to review](https://dashboard.stripe.com/connect/accounts_to_review). It displays a list of connected accounts with current or future outstanding requirements. You can filter the list by account issue and status.\n\nYou can also see what information each connected account must provide, and the deadline, in the account object’s [future\\_requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements) hash or by using a [Sigma query](https://docs.stripe.com/stripe-data/query-connect-data).\n\n### 3\\. Prepare for enforcement of updated requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the enforcement date for an account (`future_requirements.current_deadline`), the contents of the `future_requirements` hash move to the `requirements` hash and Stripe generates an [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. Because this enforcement can cause more accounts to require review, use the enforcement date as a reminder to check the [Accounts to review tab](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) in your Connect Dashboard.\n\n#### Note\n\nWe plan to introduce a feature that lets you start enforcing requirements before the deadline by applying updated verification requirements to connected accounts. It will let you proactively catch and resolve issues in your updated integration by applying requirements to connected accounts in batches.\n\n### 4\\. Send connected accounts to the information collection flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf any account has [currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) requirements or [verification errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors), you must address them by the requirements [current\\_deadline](https://docs.stripe.com/api/accounts/object#account_object-requirements-current_deadline). At that deadline, the requirements in the `requirements.currently_due` array are added to the `requirements.past_due` array and any associated capabilities become disabled until you provide the information and resolve the errors.\n\nFuture requirements can immediately affect an account’s capabilities when they become current requirements. Make sure to address all requirements before their deadlines, even if they’re still in `future_requirements`.\n\nWhen your accounts have `requirements` that are `currently_due`, direct your accounts to address any issues according to your onboarding flow or with remediation links:\n\n*   **API-based onboarding:** Use your [custom onboarding flow](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding), optionally collecting `future_requirements` as well.\n*   **Embedded onboarding:** Render the [embedded onboarding component](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) for affected accounts.\n*   **Stripe-hosted onboarding:** Use the [Account Links API](https://docs.stripe.com/api/account_links) to generate a single-use link to [Stripe-hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding). Send your connected accounts to this link from your application.\n*   **Remediation links:** Use the Dashboard to generate [remediation links](https://docs.stripe.com/connect/dashboard/remediation-links) that your connected accounts can use to provide required information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling verification with the API](https://docs.stripe.com/connect/handling-api-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)",
    "title": "Handle verification updates | Stripe Documentation",
    "description": "Help your connected accounts maintain compliance with changing verification requirements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/adaptive-pricing",
    "markdown": "# Adaptive Pricing | Stripe DocumentationThe Stripe Docs logo\n\n## Let customers pay in their local currency with Adaptive Pricing (formerly Automatic Currency Conversion).\n\n#### Regional considerations\n\nAdaptive Pricing is available to businesses in the following regions:\n\nAustralia\n\nBrazil\n\nBulgaria\n\nCanada\n\nCzech Republic\n\nDenmark\n\nEU\n\nHong Kong\n\nHungary\n\nIndia\n\nJapan\n\nLiechtenstein\n\nMalaysia\n\nMexico\n\nNew Zealand\n\nNorway\n\nPoland\n\nRomania\n\nSingapore\n\nSweden\n\nSwitzerland\n\nThailand\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nAdaptive Pricing lets your customers pay in their local currency in more than 50 countries.\n\nWith Adaptive Pricing, Stripe automatically calculates the localized price and handles all currency conversion. The presentment currency is inferred from the buyer’s public IP address. Enabling Adaptive Pricing can increase conversion rates from global buyers, and businesses have had on average a 17% increase in international revenue.\n\nUse Adaptive Pricing to:\n\n*   Display pricing in local currencies based on location\n*   Calculate prices in real-time using an exchange rate guaranteed for 24 hours\n*   Unlock payment methods that require local currency\n*   Ensure regulatory compliance in all supported currencies\n\n![A customer in Canada views a price localized from USD to CAD](https://b.stripecdn.com/docs-statics-srv/assets/localized-price.dbd22a8f02691381a7aeef78fa6c909a.png)\n\n## Enable Adaptive Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable Adaptive Pricing in your [payment settings](https://dashboard.stripe.com/settings/adaptive-pricing). You can enable Adaptive Pricing in test mode and live mode. Disabling Adaptive Pricing doesn’t affect Checkout Sessions that have already been converted.\n\nAdaptive Pricing works with Checkout, Payment Links, Pricing Table, and local payment methods.\n\n### Webhooks and reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nEnabling Adaptive Pricing can affect some parts of your integration, like webhook handling and reporting. Review your integration to make sure it can handle [webhooks](#webhooks-reporting) and PaymentIntent objects with local currencies.\n\n*   Use the [currency\\_conversion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency_conversion) hash on the Checkout Session object to determine what your customer would have paid in the default currency.\n*   Use the [BalanceTransactions API](https://docs.stripe.com/api/balance_transactions) to determine how much you receive after fees.\n\n[](#supported-currencies)\n\nMerchants in supported regions can automatically convert prices to the local currencies of their customers in the following markets:\n\n*   United Arab Emirates (AED)\n    \n\n[](#local-payment-methods)\n\nYou can configure which payment methods you accept in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nAdaptive Pricing can increase usage of local payment methods significantly (up to 6.5x on some merchants) by ensuring customers have the option to pay in their currency and with payment methods most relevant to them. As an example, iDEAL is used by 70% of all e-commerce transactions in the Netherlands, but only works with EUR.\n\nAdaptive Pricing enables the following payment methods:\n\n[](#restrictions)\n\nAdaptive Pricing does not yet work with Connect or Elements.\n\nAdditionally, Adaptive Pricing requires the [currency for your prices](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency) to be the same as your default settlement currency. Prices automatically convert during checkout. This applies to [prices](https://docs.stripe.com/products-prices/manage-prices#prices-create) you create and reference with a price ID and prices you create inline with [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) when you create a Checkout Session.\n\nAdaptive Pricing does not apply for Checkout Sessions that:\n\n*   Contain explicitly defined [manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices).\n*   Are in `subscription` mode.\n*   Use Connect parameters like `application_fee_amount`, `on_behalf_of`, and `transfer_data`.\n*   Use [`capture_method`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method) as `manual`.\n*   Set the [currency](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-currency) value on creation.\n*   Present the customer a local currency that is also configured as a [settlement currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies). For example, if an account settles in `eur` or `gbp` and prices in `eur`, customers with local currency `gbp` don’t see Adaptive Pricing. Customers with local currency other than `eur` or `gbp`, such as `jpy`, see Adaptive Pricing.\n\nIn Sessions that aren’t supported by Adaptive Pricing, Checkout presents prices in the original currency that you’ve set your prices in.\n\n[](#exchange-rate)\n\nStripe uses the mid-market exchange rate and applies a fee to guarantee the rate for the duration of the Checkout Session (up to 24 hours) through settlement. If the exchange rate changes by more than 2% in that time, Stripe might use the updated exchange rate to calculate your payout.\n\nLearn more about how Stripe handles [currency conversions](https://docs.stripe.com/currencies/conversions) and [Adaptive Pricing fees](https://support.stripe.com/questions/adaptive-pricing#:~:text=Adaptive%20Pricing%20is%20a%20Checkout,latest%20Stripe%2Dprovided%20exchange%20rates).\n\n[](#refunds)\n\nStripe pays out refunds in the currency your customer pays in using the latest Stripe-provided exchange rate. This means that you might pay more or less to cover the refund depending on how the exchange rate changes.\n\n### Example refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe ignore Stripe fees in this example for simplicity. Suppose:\n\n1.  You’re a US business that uses Checkout to sell a product for 100 USD and have activated Adaptive Pricing.\n2.  A customer in Canada views your Checkout page, sees the localized price of 137 CAD at an exchange rate of 1.37 CAD per 1 USD, and completes the purchase.\n3.  Stripe processes the payment, converting the 137 CAD to 100 USD to pay you in your settlement currency.\n4.  Later, when the exchange rate has changed to 1.40 CAD per 1 USD, you issue a full refund to the customer.\n5.  Stripe deducts 97.86 USD from your account, exchanging it at 1.40 CAD per 1 USD to pay out the 137 CAD refund.\n\nLearn more about how Stripe helps you manage [refunds](https://docs.stripe.com/refunds).\n\n[](#webhooks-reporting)\n\nDepending on the user-selected currency, both the Checkout Session and the underlying PaymentIntent objects update automatically to reflect the selected currency and amount. After a user pays in local currency, the Checkout Session object’s currency and total amount is in local currency and contains a `currency_conversion` hash to reflect what the user would have paid in the default currency. Learn more about what’s [deposited in your account after fees](https://docs.stripe.com/api/balance_transactions).\n\nThe [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event contains a `currency_conversion` hash that includes the `amount_total` and `amount_subtotal` in the `source_currency`. The amounts reflect what your customer would have paid in the source currency.\n\n`{   \"id\":` \n\n`'{{EVENT_ID}}'`\n\n`,   \"object\": \"event\",   \"type\": \"checkout.session.completed\",   \"data\": {     \"object\": {       \"id\":   '{{SESSION_ID}}'  ,       \"object\": \"checkout.session\",       \"currency\": \"cad\",       \"amount_total\": 2055,       \"amount_subtotal\": 2055,       \"currency_conversion\": {         \"amount_subtotal\": 1500,         \"amount_total\": 1500,         \"source_currency\": \"usd\",         \"fx_rate\": \"1.37\"       }     }   } }`\n\n[](#testing)\n\nTo test local currency presentment for Checkout, Payment Links, and the [pricing table](https://docs.stripe.com/payments/checkout/pricing-table), pass in a location-formatted customer email that includes a suffix in a `+location_XX` format in the local part of the email. `XX` must be a valid [two-letter ISO country code](https://www.nationsonline.org/oneworld/country_code_list.htm).\n\nFor example, to test currency presentment for a customer in France, pass in an email like `test+location_FR@example.com`.\n\nWhen you visit the URL for a Checkout Session, Payment Link, or pricing table created with a location-formatted email, you see the same currency as a customer does in the specified country.\n\n### Testing Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create a Checkout Session, pass the location-formatted email as [customer\\_email](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_email) to simulate Checkout from a particular country.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d success_url=\"https://example.com/success\" \\   --data-urlencode customer_email=\"test+location_FR@example.com\"`\n\nYou can also create a [Customer](https://docs.stripe.com/api/customers/create) and specify their email that contains the `+location_XX` suffix. Stripe test cards work as usual.\n\nWhen it’s possible to present the customer’s local currency in Checkout, the [Checkout Session](https://docs.stripe.com/api/checkout/sessions/object) object changes. Fields like `currency`, `payment_method_types`, and `amount_total` reflect the local currency and price.\n\n### Testing Payment Links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor Payment Links, pass the location-formatted email as the `prefilled_email` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to test currency presentment for customers in different countries.\n\n### Testing Pricing table![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor the pricing table, pass the location-formatted email as the [customer-email](https://docs.stripe.com/payments/checkout/pricing-table#customer-email) attribute to test currency presentment for customers in different countries.",
    "title": "Adaptive Pricing | Stripe Documentation",
    "description": "Let customers pay in their local currency with Adaptive Pricing (formerly Automatic Currency Conversion).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/how-checkout-works",
    "markdown": "# How Checkout works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Checkout to collect payments on your website.\n\nStripe Checkout is a prebuilt payment form that allows businesses to securely accept payments online. Checkout’s built-in features allow you to reduce your development time. It supports 40+ payment methods, including [Link](https://docs.stripe.com/payments/link), Stripe’s 1-click payment solution. You can accept payments by embedding Checkout directly into your website or directing customers to a Stripe-hosted payment page.\n\nYou can also customize Checkout and access additional functionality with the [Checkout Session API](https://docs.stripe.com/api/checkout/sessions) and the Stripe Dashboard. For a complete list of features, see its [built-in and customizable features](https://docs.stripe.com/payments/checkout/how-checkout-works#features).\n\nCheckout supports payments for both [one-time purchases](https://docs.stripe.com/payments/online-payments) and [subscriptions](https://docs.stripe.com/subscriptions).\n\n## Checkout lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  When customers are ready to complete their purchase, your application creates a new Checkout Session.\n2.  The Checkout Session provides a URL that redirects customers to a Stripe-hosted payment page.\n3.  Customers enter their payment details on the payment page and complete the transaction.\n4.  After the transaction, a [webhook](https://docs.stripe.com/webhooks \"webhook\") [fulfills the order](https://docs.stripe.com/checkout/fulfillment) using the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event.\n\n## Low-code integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheckout requires minimal coding and is the best choice for most integrations because of its prebuilt functionalities and customization options. You can integrate Checkout by creating a Checkout Session and collecting customer payment details. Collect payment by [embedding a payment form](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form) in your website or redirecting customers to a [Stripe-hosted payment page](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\n[Compare Checkout](https://docs.stripe.com/payments/online-payments#compare-features-and-availability) to other Stripe payment options to determine the best one for you. Checkout displays a payment form to collect customer payment information, validates cards, handles errors, and so on.\n\n## Built-in and customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout has the following built-in and customizable features:\n\n### Built-in features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   PayPal, Google Pay, Apple Pay, and Link\n*   Responsive mobile design\n*   SCA-ready\n*   CAPTCHAs\n*   PCI compliance\n*   Card validation\n*   Error messaging\n*   [Adjustable quantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)\n*   [Automatic tax collection](https://docs.stripe.com/tax/checkout)\n*   International language support\n*   [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)\n\n### Customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Custom branding with colors, buttons, and font](https://docs.stripe.com/payments/checkout/customization)\n*   [Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells)\n*   [Global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods)\n*   [Subscription upsells](https://docs.stripe.com/payments/checkout/upsells)\n*   [Custom domains](https://docs.stripe.com/payments/checkout/custom-domains) (Stripe-hosted page only)\n*   [Email receipts](https://docs.stripe.com/receipts)\n*   [Apply discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Custom success page](https://docs.stripe.com/payments/checkout/custom-success-page)\n*   [Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts)\n*   [Autofill payment details with Link](https://docs.stripe.com/payments/checkout/customization#link)\n*   [Collect Tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Collect shipping information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers)\n*   [Set the subscription billing cycle date](https://docs.stripe.com/payments/checkout/billing-cycle)\n\n### Custom branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set fonts, colors, icons, and field styles for your Stripe-hosted Checkout page using your Stripe Dashboard’s [Branding settings](https://dashboard.stripe.com/settings/branding/checkout). Toggle between `Stripe-hosted` and `embedded` to see the branding options for the integration type you chose. For more information, see [Customize your integration](https://docs.stripe.com/payments/checkout/customization).\n\n### Custom domains ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use Stripe’s [custom domain feature](https://docs.stripe.com/payments/checkout/custom-domains), you can serve Stripe-hosted Checkout pages on a subdomain of your custom domain. Custom domains are a paid feature. For information, see [Pricing and fees](https://stripe.com/pricing).\n\n## Checkout Session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Checkout Session is a programmatic representation of what your customers see on the payment form. After creating a Checkout Session, redirect your customers to the Session’s URL to complete the purchase. When customers complete their purchase, you can [fulfill their orders](https://docs.stripe.com/checkout/fulfillment) by configuring webhooks on Checkout Session events. This code snippet from the [quickstart guide](https://docs.stripe.com/checkout/quickstart) is an example of how to create a Checkout Session in your application.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\"`\n\n### One-time and recurring payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAllow customers to make one-time payments or subscribe to a product or service by setting the [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) parameter in a Checkout Session.\n\n| Mode | Purchase type |\n| --- | --- |\n| Payment | One-time purchases |\n| [Subscription](https://docs.stripe.com/billing/subscriptions/overview) | *   Recurring purchases<br>*   Mixed cart: Recurring purchases with one-time purchases |\n\n### Mixed cart ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a mixed cart in Checkout that lets your customers purchase Subscription items and one-time purchase items at the same time. To create a mixed cart, set the `mode` parameter to `subscription` and include the Price IDs, or `price_data`, for each line\\_item in the [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) array. Price IDs come from Price objects created using the Stripe Dashboard or API and allow you to store information about your product catalog in Stripe.\n\nYou can also use [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) to reference information from an external database where you’re hosting price and product details without storing product catalog information on Stripe. For more information, see [Build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"={{RECURRING_PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d \"line_items[1][price]\"={{ONE_TIME_PRICE_ID}} \\   -d \"line_items[1][quantity]\"=1 \\  -d mode=subscription \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\n### Payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view, enable, and disable different payment methods in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) at any time. Stripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. View our [complete list of payment methods](https://docs.stripe.com/payments/payment-methods/overview).\n\n### Save payment details and default payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [save payment details for future use](https://docs.stripe.com/payments/save-and-reuse) by sending an API parameter when you create a Session. Options to save payment details include:\n\n*   **Single payment**—If your Checkout Session uses `payment` mode, set the [payment\\_intent\\_data.setup\\_future\\_usage](https://docs.stripe.com/payments/payment-intents#future-usage) parameter.\n*   **Subscription payment**—If your Checkout Session uses `subscription` mode, Stripe saves the payment method by default.\n*   **Multiple saved payment methods**—If a customer has multiple payment methods saved, you can store a default payment method to the Customer object’s [default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) field. However, by default, these payment methods don’t appear for return purchases in Checkout. [(Learn more)](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=checkout#save-payment-method-details).\n\n## Complete a transaction ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFulfill orders when a customer completes their purchase by running webhooks after the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event sends a notification. Webhooks are HTTP calls that run when an event occurs. For example, if a customer doesn’t make a purchase and their cart expires, you can set a webhook on the [checkout.session.expired](https://docs.stripe.com/api/events/types#event_types-checkout.session.expired) event and return items to your inventory or you can send them a cart [abandonment](https://docs.stripe.com/payments/checkout/abandoned-carts) email.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Checkout quickstart](https://docs.stripe.com/checkout/quickstart)\n*   [Fulfill your orders](https://docs.stripe.com/checkout/fulfillment)\n*   [Collect taxes in Checkout](https://docs.stripe.com/payments/checkout/taxes)\n*   [Manage limited inventory with Checkout](https://docs.stripe.com/payments/checkout/managing-limited-inventory)\n*   [Automatically convert to local currencies in Checkout with Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)",
    "title": "How Checkout works | Stripe Documentation",
    "description": "Learn how to use Checkout to collect payments on your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-element/migration",
    "markdown": "# Migrate to the Payment Element\n\n## Learn how to migrate your existing integration with individual payment method Elements into a single Element.\n\n#### Note\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nPreviously, each payment method (cards, iDEAL, and so on) required a separate Element. By migrating to the Payment Element, you can accept many payment methods with a single Element.\n\nPaymentIntents and SetupIntents each have their own set of migration guidelines. See the appropriate guide for your integration path, including example code.\n\nIf your existing integration uses the [Payment Intents](https://docs.stripe.com/payments/payment-intents) API to create and track payments or save card details during a payment, follow the steps below to use the Payment Element.\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#one-time-update-elements)\n\nNext, update your client-side code to pass `mode`, `currency`, and `amount` when you create the Elements instance. For use with a PaymentIntent, set the `mode` to `'payment'` and the `currency` and `amount` to what you’ll charge your customer.\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const options = {   mode: 'payment',   currency: 'usd',   amount: 1099, }; const elements = stripe.elements(options);`\n\n[](#one-time-add-payment-element)\n\nYou can now replace the Card Element and individual payment methods Elements with the Payment Element. The Payment Element automatically adjusts to collect input fields based on the payment method and country (for example, full billing address collection for SEPA Direct Debit) so you don’t have to maintain customized input fields anymore.\n\nThe following example replaces `CardElement` with `PaymentElement`:\n\n`<form id=\"payment-form\">   <div id=\"card-element\">   </div>   <div id=\"payment-element\">     <!-- Mount the Payment Element here -->   </div>   <button id=\"submit\">Submit</button> </form>`\n\n`const cardElement = elements.create(\"card\"); cardElement.mount(\"#card-element\"); const paymentElement = elements.create(\"payment\"); paymentElement.mount(\"#payment-element\");`\n\nIf your payment flow already always collects details like the customer’s name or email address, you can prevent the Payment Element from collecting this information by passing the [fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-fields) option when creating the Payment Element. If you disable the collection of a certain field, you must pass that same data back with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment).\n\n[](#one-time-payment-intent)\n\nThe Payment Element allows you to accept multiple payment methods. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. We prioritize payment methods that increase conversion and are most relevant to the customer’s currency and location.\n\nAny of the additional elements options passed when creating the Elements group in the earlier step should also be passed when creating the PaymentIntent.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"payment_method_types[]\"=card \\   -d \"automatic_payment_methods[enabled]\"=true \\`\n\n#### Caution\n\nEach payment method needs to support the currency passed in the PaymentIntent and your business needs to be based in one of the countries each payment method supports. See the [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options) page for more details about what’s supported.\n\n[](#one-time-update-method)\n\nInstead of using individual confirm methods like `stripe.confirmCardPayment` or `stripe.confirmP24Payment`, use [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to collect payment information and submit it to Stripe.\n\nTo confirm the PaymentIntent, make the following updates to your submit handler:\n\n*   Call `await elements.submit()` to trigger form validation and collect any data required for [wallets](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-wallets).\n*   Optional: Move PaymentIntent creation to the submit handler. This way you only create the PaymentIntent when you’re sure of the final amount.\n*   Pass the `elements` instance you used to create the Payment Element and the `clientSecret` from the PaymentIntent as parameters to `stripe.confirmPayment`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any [required actions](https://docs.stripe.com/payments/paymentintents/lifecycle), such as authenticating your customers by displaying a 3DS dialog or redirecting them to a bank authorization page. When confirmation is complete, users are directed to the `return_url` you configured, which normally corresponds to a page on your website that [provides the status of the payment](https://docs.stripe.com/payments/accept-a-payment#web-post-payment).\n\nIf you want to keep the same checkout flow for card payments and only redirect for redirect-based payment methods, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`.\n\nThe following code example replaces `stripe.confirmCardPayment` with `stripe.confirmPayment`:\n\n`// Create the PaymentIntent and obtain clientSecret const res = await fetch(\"/create-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"}, });  const {client_secret: clientSecret} = await res.json();  const handleSubmit = async (event) => {   event.preventDefault();    if (!stripe) {     // Stripe.js hasn't yet loaded.     // Make sure to disable form submission until Stripe.js has loaded.     return;   }    setLoading(true);    const {error} = await stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: elements.getElement(CardElement)     }   });    if (error) {     handleError(error);   } };`\n\n`const handleSubmit = async (event) => {   event.preventDefault();    if (!stripe) {     // Stripe.js hasn't yet loaded.     // Make sure to disable form submission until Stripe.js has loaded.     return;   }    setLoading(true);    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentIntent and obtain clientSecret   const res = await fetch(\"/create-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},   });    const {client_secret: clientSecret} = await res.json();    // Use the clientSecret and Elements instance to confirm the setup   const {error} = await stripe.confirmPayment({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },     // Uncomment below if you only want redirect for redirect-based payments     // redirect: \"if_required\",   });    if (error) {     handleError(error);   } };`\n\n[](#post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
    "title": "Migrate to the Payment Element | Stripe Documentation",
    "description": "Learn how to migrate your existing integration with individual payment method Elements into a single Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/migration",
    "markdown": "# Checkout migration guide | Stripe DocumentationThe Stripe Docs logo\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/migration.4db0b4061fb36d6a43762c3f23ef9c00.png)\n\nThe legacy version of Checkout presented customers with a modal dialog that collected card information, and returned a token or a source to your website. In contrast, the current version of Checkout is a smart payment page hosted by Stripe that creates payments or [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). It supports Apple Pay, Dynamic [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), and [many other features](https://docs.stripe.com/payments/checkout).\n\nThe current version of Checkout provides more flexibility, with support for dynamic line items, [Connect](https://docs.stripe.com/connect \"Connect\"), re-using existing [Customers](https://docs.stripe.com/api/customers \"Customers\"), and advanced subscription features. You can also use the client-only integration if you want to get started more quickly or if you have a simpler product catalog.\n\nTo migrate from the legacy version to the current version, follow the guide that most closely represents your business model. Each guide recommends an integration path along with example code.\n\n*   [Dynamic product catalog and pricing](#api-products)\n    \n    If you have a large product catalog or require support for dynamically generated line items (such as donations or taxes).\n    \n*   [Dynamic subscriptions](#api-subscriptions)\n    \n    If you’re a SaaS provider billing users and need support for advanced features.\n    \n*   [Connect platforms and marketplaces](#connect)\n    \n    If you’re operating a marketplace connecting service providers with customers.\n    \n*   [Saving payment methods for future use](#setup-mode)\n    \n    If you’re operating a business which doesn’t charge the customer until after services rendered.\n    \n*   [Simple product catalog with fixed pricing](#client-products)\n    \n    If you’re selling a few products with pre-determined prices.\n    \n*   [Simple subscriptions](#client-subscriptions)\n    \n    If you’re a SaaS provider with a monthly subscription plan.\n    \n\nAs you follow the relevant migration guide, you can also reference the [conversion table](#parameter-conversion) for a mapping of specific parameters and configuration options between the two versions of Checkout.\n\n## Dynamic product catalog and pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re selling products where the amount or line items are determined dynamically (say, with a large product catalog or for donations), see [accepting one-time payments](https://docs.stripe.com/payments/accept-a-payment?integration=checkout).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a charge. The current version of the Checkout server integration reverses this flow—you create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the dynamic amount and description and collect card information from your customer.\n\n`<form action=\"/purchase\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Custom t-shirt\"     data-description=\"Your custom designed t-shirt\"     data-amount=\"{{ORDER_AMOUNT}}\"     data-currency=\"usd\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server and charge it.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"Custom t-shirt\" \\   -d \"amount\"=\"{{ORDER_AMOUNT}}\" \\   -d \"currency\"=\"usd\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[][price_data][product]\"=\"{{PRODUCT_ID}}\" \\   -d \"line_items[][price_data][unit_amount]\"=1500 \\   -d \"line_items[][price_data][currency]\"=\"usd\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"payment\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete payment.\n\nIf you need to fulfill purchased goods after the payment, refer to [Checkout purchase fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\n## Dynamic subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing subscription services that are dynamically determined or require support for other advanced features, see [setting up a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a customer and subscription. The current version of the Checkout server integration reverses this flow—you first create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the subscription information and collect card information from your customer.\n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Gold Tier\"     data-description=\"Monthly subscription with 30 days trial\"     data-amount=\"2000\"     data-label=\"Subscribe\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server to create a customer and a subscription.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/subscriptions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"{PRICE_ID}\" \\   -d \"trial_period_days\"=30`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"subscription_data[trial_period_days]\"=30 \\   -d \"line_items[][price]\"=\"{PRICE_ID}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"subscription\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after the customer and subscription have been created.\n\nIf you need to fulfill purchased services after the payment, refer to [Checkout Purchase Fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\nYou can also [update subscription information](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details) using Checkout.\n\n## Connect platforms and marketplaces ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re operating a Connect platform or marketplace and create payments involving connected accounts, consider using the current version of the Checkout server integration.\n\nThe following example demonstrates using the Checkout Sessions API to process a direct charge. Follow the guide for details on how to create [destination charges](https://docs.stripe.com/connect/destination-charges?platform=web&ui=stripe-hosted).\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you would collect card information from your customer on the client.\n\n`<form action=\"/purchase\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Food Marketplace\"     data-description=\"10 cucumbers from Roger's Farm\"     data-amount=\"2000\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server and charge it on behalf of the connected account.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{TOKEN_ID}}\" \\   -d \"description\"=\"10 cucumbers from Roger\\\"s Farm\" \\   -d \"amount\"=2000 \\   -d \"currency\"=\"usd\" \\   -d \"application_fee_amount\"=200 \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server on behalf of the connected account.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"payment_intent_data[application_fee_amount]\"=200 \\   -d \"mode\"=\"payment\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment. Make sure to provide the connected account’s ID when initializing Stripe.js.\n\n`// Initialize Stripe.js with the same connected account ID used when creating // the Checkout Session. const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``, {   stripeAccount:   '{{CONNECTED_ACCOUNT_ID}}'  }); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete payment.\n\nIf you need to fulfill purchased goods or services after the payment, refer to [Checkout Purchase Fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\n## Saving payment methods for future use ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing services that don’t charge your customers immediately, see [setting up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to save for later use. The current version of the Checkout server integration reverses this flow—you first create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the charge information and collect card information from your customer.\n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Cleaning Service\"     data-description=\"Charged after your home is spotless\"     data-amount=\"2000\">   </script> </form>`\n\nNext, you would send the resulting token or source to your server to eventually create a charge.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"Cleaning service\" \\   -d \"amount\"=\"{{ORDER_AMOUNT}}\" \\   -d \"currency\"=\"usd\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server using [setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to gather payment method details.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete the flow.\n\nFrom there, you can [retrieve the Setup Intent](https://docs.stripe.com/payments/save-and-reuse#retrieve-checkout-session) from the Checkout flow and use it to prepare your transaction.\n\n## Simple product catalog with fixed pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re selling products with fixed pricing (such as t-shirts or e-books), see the guide on [one-time payments](https://docs.stripe.com/payments/checkout/client) to learn how to generate a code snippet to add to your website.\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a charge. The current version of Checkout automatically creates the payment for you, and no server integration is required.\n\n### Client-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`<form action=\"/pay\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"T-shirt\"     data-description=\"Comfortable cotton t-shirt\"     data-amount=\"500\"     data-currency=\"usd\">   </script> </form>`\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  var checkoutButton = document.querySelector('#checkout-button'); checkoutButton.addEventListener('click', function () {   stripe.redirectToCheckout({     lineItems: [{       // Define the product and price in the Dashboard first, and use the price       // ID in your client-side code.       price: '{PRICE_ID}',       quantity: 1     }],     mode: 'payment',     successUrl: '[https://www.example.com/success](https://www.example.com/success)',     cancelUrl: '[https://www.example.com/cancel](https://www.example.com/cancel)'   }); });`\n\n### Server-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"{{STRIPE_EMAIL}}\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"T-shirt\" \\   -d \"amount\"=500 \\   -d \"currency\"=\"usd\"`\n\nThe current version of Checkout automatically creates payments for you. After your customer pays, they’re redirected to the [successUrl](https://docs.stripe.com/js/deprecated/redirect_to_checkout#stripe_checkout_redirect_to_checkout-options-successUrl) configured on the client. Then learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment) after the payment.\n\nThe [conversion table](#parameter-conversion) below provides a mapping of configuration options between the two versions of Checkout. For a full list of configuration options for the current version, see the [`redirectToCheckout`](https://docs.stripe.com/js#stripe-redirect-to-checkout) reference.\n\n## Simple subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing a simple subscription service (such as monthly access to software), see the guide on [subscriptions](https://docs.stripe.com/billing/quickstart) to learn how to create a plan in the Dashboard and generate a code snippet to add to your website.\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a customer and a subscription. The current version of Checkout, however, automatically creates both the customer and the subscription for you, and no server integration is required.\n\n### Client-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Gold Tier\"     data-description=\"Monthly subscription\"     data-amount=\"2000\"     data-currency=\"usd\"     data-label=\"Subscribe\">   </script> </form>`\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  var checkoutButton = document.querySelector('#checkout-button'); checkoutButton.addEventListener('click', function () {   stripe.redirectToCheckout({     lineItems: [{       // Define the product and price in the Dashboard first, and use the price       // ID in your client-side code. You may also pass a SKU id into the `price`       // field       price: '{PRICE_ID}',       quantity: 1     }],     mode: 'subscription',     successUrl: '[https://www.example.com/success](https://www.example.com/success)',     cancelUrl: '[https://www.example.com/cancel](https://www.example.com/cancel)'   }); });``\n\n### Server-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"{{STRIPE_EMAIL}}\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/subscriptions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[][price]\"=\"{PRICE_ID}\" \\   -d \"items[][quantity]\"=1`\n\nThe current version of Checkout automatically creates subscriptions for you. After the subscription is created, your customer is redirected to the [successUrl](https://docs.stripe.com/js/deprecated/redirect_to_checkout#stripe_checkout_redirect_to_checkout-options-successUrl) configured on the client. Then learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment) after the payment.\n\nThe [conversion table](#parameter-conversion) below provides a mapping of configuration options between the two versions of Checkout. For a full list of configuration options for the current version, see the [`redirectToCheckout`](https://docs.stripe.com/js#stripe-redirect-to-checkout) reference.\n\n## Parameter conversion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe current version of Checkout supports most of the functionality of the legacy version of Checkout. However, the two versions do not share the same API. The table below maps parameters and configuration options between the legacy version and the current version.\n\nFor a full list of configuration options accepted by the current version of Checkout, see the [Stripe.js reference](https://docs.stripe.com/js#stripe-redirect-to-checkout) and the [API reference](https://docs.stripe.com/api/checkout/sessions) for Checkout Sessions.\n\n| Legacy version | Current version | Integration tips |\n| --- | --- | --- |\n| `allowRememberMe` | *   Not supported | The current version of Checkout doesn’t support Remember Me. To reuse existing customers, we recommend specifying the `customer` parameter when creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create). |\n| `amount` | *   Automatically calculated as the sum of amounts over all `line_items`.<br>*   Client-only integration: Automatically calculated as the sum of amounts over all prices. | The total amount is the sum of the line items you pass to Checkout. |\n| `billingAddress` | *   `Session.billing_address_collection`<br>*   Client-only integration: `billingAddressCollection` | Checkout automatically collects the billing address when required for fraud-prevention or regulatory purposes. Set this parameter to `required` to always collect the billing address. |\n| `billingAddress` | *   `Session.billing_address_collection`<br>*   Client-only integration: `billingAddressCollection` | Checkout automatically collects the billing address when required for fraud-prevention or regulatory purposes. Set this parameter to `required` to always collect the billing address. |\n| `closed` | *   `cancelUrl` | When a customer wants to close Checkout, they either close the browser tab or navigate to the `cancelUrl`. |\n| `currency` | *   `Session.currency`<br>*   Client-only integration: The price’s `currency` |     |\n| `description` | *   `Session.line_items.description` or `product.description`<br>*   Client-only integration: The price’s `product.description` | If you specify a price, Checkout displays an automatically computed description of how often payments occur. If you specify `Session.line_items`, Checkout displays the `name` for each line item. |\n| `email` | *   `Session.customer_email`<br>*   Client-only integration: `customerEmail` | If you already know your customer’s email, specify it here so they do not need to enter it again. |\n| `image` | *   **Business branding** Upload your business logo or icon in the Dashboard.<br>*   **Product images** Specify images for each line item with`product.images` | Checkout uses specific images for your business’s [branding](https://docs.stripe.com/payments/checkout/customization#branding) and for the products you’re selling. Checkout displays your business logo by default and falls back to your business icon alongside your business name. |\n| `key` | *   No longer a parameter passed to Checkout |\n| `locale` | *   `Session.locale`<br>*   Client-only integration: `locale` | You can specify a supported [locale](https://docs.stripe.com/payments/checkout/customization#localization) when creating a Checkout Session. |\n| `name` | *   `product.name` for prices specified in `Session.line_items`<br>*   Client-only integration: The `product.name` for the price | If you specify a price, Checkout displays the name of the product that belongs to the price. If you specify `Session.line_items`, Checkout displays the `name` for each line item. |\n| `panelLabel` | *   `submit_type` | Checkout automatically customizes the button text depending on the items you’re selling. For one-time payments, use [submit\\_type](https://docs.stripe.com/payments/checkout/customization#submit-button) to customize the button text. |\n| `shippingAddress` | *   `session.shipping_address_collection` | [Collect shipping address information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout) by passing an array of `allowed_countries` that you want to ship to. |\n| `token` or `source` | *   `successUrl` | There is no longer a callback in JavaScript when the payment completes. As your customer is paying on a different page, set the `successUrl` to redirect your customer after they’ve completed payment. |\n| `zipCode` | *   Automatically collected by Checkout | Checkout automatically collects the postal code when required for fraud-prevention or regulatory purposes. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add more payment methods](https://docs.stripe.com/payments/dashboard-payment-methods#view-dash)\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)\n*   [Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page)",
    "title": "Checkout migration guide | Stripe Documentation",
    "description": "Learn how to migrate from the legacy version of Checkout to the current version.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/amazon-pay",
    "markdown": "# Amazon Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments with Amazon Pay.\n\n[Amazon Pay](https://pay.amazon.com/) is a wallet payment method that lets your customers check out the same way as on Amazon.com.\n\nWhen customers select Amazon Pay as their payment method, Stripe redirects them to Amazon’s website, where they can check out using the shipping and payment information stored in their Amazon account. After completing the payment, Amazon redirects them back to your website.\n\n*   **Customer locations**\n    \n    Worldwide\n    \n*   **Presentment currency**\n    \n    USD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Wallet\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Amazon Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Amazon Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Amazon Pay from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Amazon Pay as a payment](https://docs.stripe.com/payments/amazon-pay/accept-a-payment).\n\n[](#refunds)\n\nAmazon Pay supports partial or full refunds for up to 90 days after the original purchase, and processes them asynchronously. After Stripe initiates a refund, Amazon Pay issues the refund to the customer’s original form of payment. We notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way to provide your customer with a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Amazon Pay payments by logging into their Amazon account. This requirement helps reduce the risk of fraud or unrecognized payments.\n\nCustomers have up to 240 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Amazon resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Amazon determine if a dispute is valid or if it should be rejected. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 10 calendar days. Amazon Pay makes a decision within 90 calendar days of evidence submission. If Amazon resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Amazon rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Amazon Pay payments in the currencies that map to your country. The default local currency for Amazon Pay is `usd` and customers also see their purchase amount in `usd`.\n\n| Currency | Country |\n| --- | --- |\n| `usd` | United States |\n\n[](#available-payment-methods)\n\nUse Amazon Pay to store card credentials. They support the following alternative payment methods:\n\n| Country | Payment methods |\n| --- | --- |\n| United States | Amazon Private Label Credit Card, Amazon Co-branded Credit Card Equal Monthly Payments, Citi Afford, Shop with Points, ACH Direct Debit, Credit Option, Credit Line, Affirm Interest Bearing Installments Product, and Monthly Invoice with Amazon. |",
    "title": "Amazon Pay payments | Stripe Documentation",
    "description": "Learn how to accept payments with Amazon Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/apple-pay",
    "markdown": "# Apple Pay | Stripe DocumentationThe Stripe Docs logo\n\nApple Pay is compatible with most Stripe products and features. Stripe users can accept [Apple Pay](https://stripe.com/apple-pay) in iOS applications in iOS 9 and above, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and [pricing](https://stripe.com/pricing) is the same as for other card transactions.\n\nApple Pay is available to cardholders at participating banks in supported countries. For more information, refer to Apple’s [participating banks](https://support.apple.com/en-us/ht204916) documentation.\n\nFor sales of physical goods, services, and certain other things, your app can accept Apple Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, sales of digital products, content, and certain other things must use Apple’s [in-app purchases](https://developer.apple.com/in-app-purchase). Those payments are processed by Apple and are subject to their transaction fees.\n\nStripe offers a variety of methods to add Apple Pay as a payment method. For integration details, select the method you prefer:\n\nWith the [Stripe iOS SDK](https://github.com/stripe/stripe-ios), you can accept both Apple Pay and traditional credit card payments. Before starting, you need to be enrolled in the [Apple Developer Program](https://developer.apple.com/programs/). Next, follow these steps:\n\n1.  [Set up Stripe](#setup)\n2.  [Register for an Apple Merchant ID](#merchantid)\n3.  [Create a new Apple Pay certificate](#csr)\n4.  [Integrate with Xcode](#xcode-pay)\n5.  [Check if Apple Pay is supported](#check-if-apple-pay-supported)\n6.  [Create the payment request](#create-payment-request)\n7.  [Present the payment sheet](#present-payment-sheet)\n8.  [Submit the payment to Stripe](#handle-payment)\n\n[](#setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use the official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripeApplePay** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import StripeApplePay  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#merchantid)\n\nObtain an Apple Merchant ID by [registering for a new identifier](https://developer.apple.com/account/resources/identifiers/add/merchant) on the Apple Developer website.\n\nFill out the form with a description and identifier. Your description is for your own records and you can modify it in the future. Stripe recommends using the name of your app as the identifier (for example, `merchant.com.{{YOUR_APP_NAME}}`).\n\n[](#csr)\n\nCreate a certificate for your app to encrypt payment data.\n\nGo to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard, click **Add new application**, and follow the guide.\n\nDownload a Certificate Signing Request (CSR) file to get a secure certificate from Apple that allows you to use Apple Pay.\n\nOne CSR file must be used to issue exactly one certificate. If you switch your Apple Merchant ID, you must go to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard to obtain a new CSR and certificate.\n\n[](#xcode-pay)\n\nAdd the Apple Pay capability to your app. In Xcode, open your project settings, click the **Signing & Capabilities** tab, and add the **Apple Pay** capability. You might be prompted to log in to your developer account at this point. Select the merchant ID you created earlier, and your app is ready to accept Apple Pay.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/xcode.a701d4c1922d19985e9c614a6f105bf1.png)\n\nEnable the Apple Pay capability in Xcode\n\n[](#check-if-apple-pay-supported)\n\n#### Note\n\nBefore displaying Apple Pay as a payment option in your app, determine if the user’s device supports Apple Pay and that they have a card added to their wallet:\n\nCheckoutViewController.swift\n\n`import StripeApplePay import PassKit  class CheckoutViewController: UIViewController, ApplePayContextDelegate {     let applePayButton: PKPaymentButton = PKPaymentButton(paymentButtonType: .plain, paymentButtonStyle: .black)      override func viewDidLoad() {         super.viewDidLoad()         // Only offer Apple Pay if the customer can pay with it         applePayButton.isHidden = !StripeAPI.deviceSupportsApplePay()         applePayButton.addTarget(self, action: #selector(handleApplePayButtonTapped), for: .touchUpInside)     }      // ...continued in next step }`\n\n[](#create-payment-request)\n\nWhen the user taps the **Apple Pay** button, call [StripeAPI paymentRequestWithMerchantIdentifier:country:currency:](https://stripe.dev/stripe-ios/stripe-payments/Classes/StripeAPI.html#/c:@M@StripeCore@objc(cs)StripeAPI(cm)paymentRequestWithMerchantIdentifier:country:currency:) to create a [PKPaymentRequest](https://developer.apple.com/documentation/passkit/pkpaymentrequest).\n\nThen, configure the `PKPaymentRequest` to display your business name and the total. You can also collect information like billing details or shipping information.\n\nSee [Apple’s documentation](https://developer.apple.com/design/human-interface-guidelines/apple-pay/overview/checkout-and-payment/#customize-the-payment-sheet) for full guidance on how to customize the payment request.\n\nCheckoutViewController.swift\n\n`func handleApplePayButtonTapped() {     let merchantIdentifier = \"merchant.com.your_app_name\"     let paymentRequest = StripeAPI.paymentRequest(withMerchantIdentifier: merchantIdentifier, country: \"US\", currency: \"USD\")      // Configure the line items on the payment request     paymentRequest.paymentSummaryItems = [         // The final line should represent your company;         // it'll be prepended with the word \"Pay\" (that is, \"Pay iHats, Inc $50\")         PKPaymentSummaryItem(label: \"iHats, Inc\", amount: 50.00),     ]     // ...continued in next step }`\n\n[](#present-payment-sheet)\n\nCreate an [STPApplePayContext](https://stripe.dev/stripe-ios/stripe-applepay/Classes/STPApplePayContext.html) instance with the `PKPaymentRequest` and use it to present the Apple Pay sheet:\n\nCheckoutViewController.swift\n\n`func handleApplePayButtonTapped() {     // ...continued from previous step      // Initialize an STPApplePayContext instance     if let applePayContext = STPApplePayContext(paymentRequest: paymentRequest, delegate: self) {         // Present Apple Pay payment sheet         applePayContext.presentApplePay(on: self)     } else {         // There is a problem with your Apple Pay configuration     } }`\n\n[\n\n## Submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment)\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake an endpoint that creates a PaymentIntent with an [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) and [currency](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-currency). Always decide how much to charge on the server side, a trusted environment, as opposed to the client side. This prevents malicious customers from choosing their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImplement `applePayContext(_:didCreatePaymentMethod:completion:)` to call the completion block with the PaymentIntent client secret retrieved from the endpoint above.\n\nAfter you call the completion block, `STPApplePayContext` completes the payment, dismisses the Apple Pay sheet, and calls `applePayContext(_:didCompleteWithStatus:error:)` with the status of the payment. Implement this method to show a receipt to your customer.\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {     func applePayContext(_ context: STPApplePayContext, didCreatePaymentMethod paymentMethod: StripeAPI.PaymentMethod, paymentInformation: PKPayment, completion: @escaping STPIntentClientSecretCompletionBlock) {         let clientSecret = ... // Retrieve the PaymentIntent client secret from your backend (see Server-side step above)         // Call the completion block with the client secret or an error         completion(clientSecret, error)     }      func applePayContext(_ context: STPApplePayContext, didCompleteWith status: STPApplePayContext.PaymentStatus, error: Error?) {           switch status {         case .success:             // Payment succeeded, show a receipt view             break         case .error:             // Payment failed, show the error             break         case .userCancellation:             // User canceled the payment             break         @unknown default:             fatalError()         }     } }`\n\nFinally, [handle post-payment events](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-post-payment) to do things like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\n### Troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re seeing errors from the Stripe API when attempting to create tokens, you most likely have a problem with your Apple Pay Certificate. You’ll need to generate a new certificate and upload it to Stripe, as described on this page. Make sure you use a CSR obtained from your Dashboard and not one you generated yourself. Xcode often incorrectly caches old certificates, so in addition to generating a new certificate, Stripe recommends creating a new Apple Merchant ID as well.\n\nIf you receive the error:\n\n> You haven’t added your Apple merchant account to Stripe\n\nit’s likely your app is sending data encrypted with a previous (non-Stripe) CSR/Certificate. Make sure any certificates generated by non-Stripe CSRs are revoked under your Apple Merchant ID. If this doesn’t resolve the issue, delete the merchant ID in your Apple account and re-create it. Then, create a new certificate based on the same (Stripe-provided) CSR that was previously used. You don’t need to upload this new certificate to Stripe. When finished, toggle the Apple Pay Credentials off and on in your app to ensure they refresh properly.\n\n## App Clips![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `StripeApplePay` module is a lightweight Stripe SDK optimized for use in an [App Clip](https://developer.apple.com/app-clips/). Follow [the above steps](https://docs.stripe.com/apple-pay?platform=ios#accept) to add the `StripeApplePay` module to your App Clip’s target.\n\n#### Note\n\nThe `StripeApplePay` module is only supported in Swift. Objective-C users must import `STPApplePayContext` from the `Stripe` module.\n\n### Migrating from STPApplePayContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re an existing user of `STPApplePayContext` and wish to switch to the lightweight Apple Pay SDK, follow these steps:\n\n1.  In your App Clip target’s dependencies, replace the `Stripe` module with the `StripeApplePay` module.\n2.  In your code, replace `import Stripe` with `import StripeApplePay`.\n3.  Replace your usage of `STPApplePayContextDelegate` with the new `ApplePayContextDelegate` protocol.\n4.  Change your implementation of `applePayContext(_:didCreatePaymentMethod:completion:)` to accept a `StripeAPI.PaymentMethod`.\n5.  Change your implementation of `applePayContext(_:didCompleteWith:error:)` to accept an `STPApplePayContext.PaymentStatus`.\n\n`import Stripe  class CheckoutViewController: UIViewController, STPApplePayContextDelegate {     func applePayContext(_ context: STPApplePayContext,       didCreatePaymentMethod paymentMethod: STPPaymentMethod,       paymentInformation: PKPayment,       completion: @escaping STPIntentClientSecretCompletionBlock) {         // ...     }      func applePayContext(_ context: STPApplePayContext,       didCompleteWith status: STPPaymentStatus,       error: Error?) {         // ...     } }`\n\n`import StripeApplePay  class CheckoutViewController: UIViewController, ApplePayContextDelegate {     func applePayContext(_ context: STPApplePayContext,       didCreatePaymentMethod paymentMethod: StripeAPI.PaymentMethod,       paymentInformation: PKPayment,       completion: @escaping STPIntentClientSecretCompletionBlock) {         // ...     }      func applePayContext(_ context: STPApplePayContext,       didCompleteWith status: STPApplePayContext.PaymentStatus,       error: Error?) {         // ...     } }`\n\n## Recurring payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn iOS 16 or later, you can adopt [merchant tokens](https://developer.apple.com/apple-pay/merchant-tokens/) by setting the `recurringPaymentRequest` or `automaticReloadPaymentRequest` properties on `PKPaymentRequest`.\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {   func handleApplePayButtonTapped() {     let request = StripeAPI.paymentRequest(withMerchantIdentifier: merchantIdentifier, country: \"US\", currency: \"USD\")      let billing = PKRecurringPaymentSummaryItem(label: \"My Subscription\", amount: NSDecimalNumber(string: \"59.99\"))     billing.startDate = Date()     billing.endDate = Date().addingTimeInterval(60 * 60 * 24 * 365)     billing.intervalUnit = .month      request.recurringPaymentRequest = PKRecurringPaymentRequest(paymentDescription: \"Recurring\",                                                                 regularBilling: billing,                                                                 managementURL: URL(string: \"[https://my-backend.example.com/customer-portal](https://my-backend.example.com/customer-portal)\")!)     request.recurringPaymentRequest?.billingAgreement = \"You'll be billed $59.99 every month for the next 12 months. To cancel at any time, go to Account and click 'Cancel Membership.'\"     request.paymentSummaryItems = [billing]   } }`\n\nTo learn more about how to use recurring payments with Apple Pay, see [Apple’s PassKit documentation](https://developer.apple.com/documentation/passkit/pkpaymentrequest).\n\n## Order tracking![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo adopt [order tracking](https://developer.apple.com/design/human-interface-guidelines/technologies/wallet/designing-order-tracking) in iOS 16 or later, implement the [`applePayContext(context:willCompleteWithResult:handler:)`](https://github.com/stripe/stripe-ios/blob/22.8.0/StripeApplePay/StripeApplePay/Source/ApplePayContext/STPApplePayContext.swift#L38) function in your `ApplePayContextDelegate`. Stripe calls your implementation after the payment is complete, but before iOS dismisses the Apple Pay sheet.\n\nIn your implementation:\n\n1.  Fetch the order details from your server for the completed order.\n2.  Add these details to the provided [`PKPaymentAuthorizationResult`](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationresult).\n3.  Call the provided completion handler on the main queue.\n\nTo learn more about order tracking, see [Apple’s Wallet Orders documentation](https://developer.apple.com/documentation/walletorders).\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {     func applePayContext(_ context: STPApplePayContext, willCompleteWithResult authorizationResult: PKPaymentAuthorizationResult, handler: @escaping (PKPaymentAuthorizationResult) -> Void) {         // Fetch the order details from your service         MyAPIClient.shared.fetchOrderDetails(orderID: myOrderID) { myOrderDetails             authorizationResult.orderDetails = PKPaymentOrderDetails(                 orderTypeIdentifier: myOrderDetails.orderTypeIdentifier, // \"com.myapp.order\"                 orderIdentifier: myOrderDetails.orderIdentifier, // \"ABC123-AAAA-1111\"                 webServiceURL: myOrderDetails.webServiceURL, // \"[https://my-backend.example.com/apple-order-tracking-backend](https://my-backend.example.com/apple-order-tracking-backend)\"                 authenticationToken: myOrderDetails.authenticationToken) // \"abc123\"             // Call the handler block on the main queue with your modified PKPaymentAuthorizationResult             handler(authorizationResult)         }     } }`\n\nStripe test card information can’t be saved to Wallet in iOS. Instead, Stripe recognizes when you’re using your test [API keys](https://docs.stripe.com/keys) and returns a successful test card token for you to use. This allows you to make test payments using a live card without it being charged.",
    "title": "Apple Pay | Stripe Documentation",
    "description": "Allow customers to securely make payments using Apple Pay on their iPhone, iPad, or Apple Watch.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/client",
    "markdown": "# One-time payments with Checkout | Stripe DocumentationThe Stripe Docs logo\n\n## One-time payments with CheckoutClient-only integration\n\n## Learn how to accept one-time card payments with just a few lines of code.\n\nWith the client-only integration, you define your products directly in the Stripe Dashboard and reference them by ID on the client side. This approach makes it possible to integrate Checkout into your website without any server-side code.\n\n#### Warning\n\n[\n\n## Enable Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-checkout)\n\nTo begin using Checkout, log into the Stripe Dashboard and navigate to the [Checkout settings](https://dashboard.stripe.com/settings/checkout). From here you can enable the client-only integration and customize the look and feel of your checkout page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout-disabled.ec8f13a264bf2e39b83378dd40e547e0.png)\n\n[\n\n## Create products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a T-shirt _product_ that has 2 _prices_ for different currencies: 20 USD and 15 EUR. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through [the Stripe Dashboard](https://dashboard.stripe.com/products).\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** in the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\nMake sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the items you want to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/test/products) section in the Dashboard\n*   Click **Add product**\n*   Select **One time** when setting the price\n\nThe product name, description, and image that you supply are displayed to customers in Checkout.\n\n[\n\n## Redirect to Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#generate-checkout-button)\n\nTo use Checkout on your website, you must add a snippet of code that includes the desired price. You can use the Dashboard to generate the necessary code, or you can write it yourself.\n\nIn the [Products section](https://dashboard.stripe.com/products) of the Dashboard, select the product that you want to sell.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/price-listing.ae7c9fe11492c36509feb1e6b2364228.png)\n\nIn the product detail view, click the **Get Checkout code snippet** selection in the overflow menu next to a price to generate a code snippet that you can add to your website.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/snippet-generator.de62343b5dc9ef77465daf373f6cba9f.png)\n\nCopy and paste the snippet into the body of a web page. The snippet adds a button to the page that, when clicked, redirects the customer to Checkout. You can include multiple checkout buttons on the same page.\n\nWhen your customer successfully completes their payment, they’re redirected to the success URL that you specified when configuring the code snippet. Typically, this is a page on your website that informs the customer that their payment succeeded.\n\nWhen your customer clicks on your logo in a Checkout session without completing a payment, Checkout redirects them back to your website by navigating to the cancel URL you specified when configuring the code snippet. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nBefore going live, make sure to [configure your domains list](https://dashboard.stripe.com/account/checkout/settings) in the Dashboard to match the success and cancel URLs.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[\n\n## Confirm the payment is successful![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#testing)\n\nThere are several test cards you can use to make sure your integration is ready for production. Use them with any CVC, postal code, and future expiration date.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | 3D Secure 2 authentication must be completed for a successful payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).\n\n### Apple Pay and Google Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNo configuration or integration changes are required to enable Apple Pay or Google Pay in Stripe Checkout. These payments are handled the same way as other card payments.\n\nThe Apple Pay button is displayed in a given Checkout Session if all of the following apply:\n\n*   Apple Pay is enabled for Checkout in your [Stripe Dashboard](https://dashboard.stripe.com/settings/checkout).\n*   The customer’s device is running macOS 10.14.1+ or iOS 12.1+.\n*   The customer is using the Safari browser.\n*   The customer has a valid card registered with Apple Pay.\n\nThis ensures that Checkout only displays the Apple Pay button to customers who are able to use it.",
    "title": "One-time payments with Checkout | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-js/elements/payment-request-button",
    "markdown": "# Payment Request Button | Stripe DocumentationThe Stripe Docs logo\n\nThe Payment Request Button Element dynamically displays wallet options during checkout, giving you a single integration for [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), and [Link](#link-prb). Alternatively, you can use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to offer multiple one-click payment buttons to your customers. [Compare](https://docs.stripe.com/elements/express-checkout-element/comparison) the Express Checkout Element and Payment Request Button.\n\nCustomers see Apple Pay or Google Pay if they enabled them on their device, and depending on the browser they use. If Link appears, it could be because customers:\n\n*   Don’t have Apple Pay or Google Pay enabled on their device.\n*   Use Chrome with active, authenticated Link sessions.\n\n| Browser + Wallet | Payment Button |\n| --- | --- |\n| Safari + Apple Pay enabled | Apple Pay |\n| Chrome + Link authenticated | Link |\n| Chrome + Google Pay enabled and Link not authenticated | Google Pay |\n| Chrome on iOS 16 + Apple Pay and Google Pay enabled | Apple Pay |\n| Any browser + No active Apple Pay or Google Pay | Link |\n\n[\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#prerequisites)\n\nBefore you start, you need to:\n\n*   Review the requirements for each payment button type:\n    \n    *   Apple Pay and Google Pay don’t display for IP addresses in India, so plan your integration testing accordingly.\n    *   Apple Pay requires macOS 10.12.1+ or iOS 10.1+.\n    *   Compatible devices automatically support Google Pay.\n*   **[Register and verify your domain](https://docs.stripe.com/payments/payment-methods/pmd-registration)** in both test mode and live mode.\n    \n*   **[Add a payment method to your browser.](#testing)** For example, you can save a card in Chrome, add a card to your Google Pay account, or add a card to your Wallet for Safari.\n    \n*   **Serve your application over HTTPS.** This is a requirement both in development and production. One way to get started is to use a service such as [ngrok](https://ngrok.com/).\n    \n\n[\n\n## Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe-elements)\n\nElements is available as part of [Stripe.js](https://docs.stripe.com/payments/elements). Include this in your page and create a container to use for the `paymentRequestButton` Element:\n\n`<script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> <div id=\"payment-request-button\">   <!-- A Stripe Element will be inserted here. --> </div>`\n\nYour Stripe publishable [API key](https://docs.stripe.com/keys) is also required as it identifies your website to Stripe:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   apiVersion: \"2024-06-20\", });`\n\n[\n\n## Create a paymentRequest instance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-request-instance)\n\nCreate an instance of [`stripe.paymentRequest`](https://docs.stripe.com/js#stripe-payment-request) with all required options.\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },   requestPayerName: true,   requestPayerEmail: true, });`\n\n#### Note\n\nUse the `requestPayerName` parameter to collect the payer’s billing address for Apple Pay and Link. You can use the billing address to perform address verification and block fraudulent payments. All other payment methods automatically collect the billing address when one is available.\n\n[\n\n## Create and mount the paymentRequestButton![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#mount-element)\n\nCreate the `paymentRequestButton` Element and check to make sure that your customer has an active payment method using `canMakePayment()`. If they do, mount the Element to the container to display the **Payment Request** button. If they don’t, you can’t mount the Element, and we recommend that you show a traditional checkout form instead.\n\n#### Note\n\nIf you accept Apple Pay with the Payment Request Button, you must offer Apple Pay as the primary payment option on your website per [Apple guidelines](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/#:~:text=canMakePaymentWithActiveCard). Internally, the Payment Request Button uses the Apple Pay `canMakePaymentWithActiveCard` API.\n\n`const elements = stripe.elements(); const prButton = elements.create('paymentRequestButton', {   paymentRequest, });  (async () => {   // Check the availability of the Payment Request API first.   const result = await paymentRequest.canMakePayment();   if (result) {     prButton.mount('#payment-request-button');   } else {     document.getElementById('payment-request-button').style.display = 'none';   } })();`\n\n[\n\n## Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment)\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/accept-a-payment-web.d86e3fb67cf265d70d77d77244464e0a.png)\n\nCreate a `PaymentIntent` on your server with an amount and currency. Always decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card`\n\nIncluded in the returned PaymentIntent is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which you use to securely complete the payment process instead of passing the entire PaymentIntent object. Send the client secret back to the client to use in the next step.\n\n[\n\n## Complete the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#complete-payment)\n\nListen to the `paymentmethod` event to receive a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") object. Pass the PaymentMethod ID and the PaymentIntent’s client secret to [stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) to complete the payment.\n\n``paymentRequest.on('paymentmethod', async (ev) => {   // Confirm the PaymentIntent without handling potential next actions (yet).   const {paymentIntent, error: confirmError} = await stripe.confirmCardPayment(     clientSecret,     {payment_method: ev.paymentMethod.id},     {handleActions: false}   );    if (confirmError) {     // Report to the browser that the payment failed, prompting it to     // re-show the payment interface, or show an error message and close     // the payment interface.     ev.complete('fail');   } else {     // Report to the browser that the confirmation was successful, prompting     // it to close the browser payment method collection interface.     ev.complete('success');     // Check if the PaymentIntent requires any actions and, if so, let Stripe.js     // handle the flow. If using an API version older than \"2019-02-11\"     // instead check for: `paymentIntent.status === \"requires_source_action\"`.     if (paymentIntent.status === \"requires_action\") {       // Let Stripe.js handle the rest of the payment flow.       const {error} = await stripe.confirmCardPayment(clientSecret);       if (error) {         // The payment failed -- ask your customer for a new payment method.       } else {         // The payment has succeeded -- show a success message to your customer.       }     } else {       // The payment has succeeded -- show a success message to your customer.     }   } });``\n\n#### Caution\n\nThe customer can dismiss the payment interface in some browsers even after they authorize the payment. This means that you might receive a [cancel event](https://docs.stripe.com/js#payment-request-on) on your PaymentRequest object after receiving a `paymentmethod` event. If you use the `cancel` event as a hook for canceling the customer’s order, make sure you also refund the payment that you just created.\n\n[\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#testing)\n\nTo test your integration, you must use HTTPS and a supported browser. If you use the `paymentRequestButton` Element within an iframe, the iframe must have the [allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest) attribute set to equal “payment \\*”.\n\nStripe Elements doesn’t support Google Pay or Apple Pay for Stripe accounts and customers in India. Therefore, you can’t test your Google Pay or Apple Pay integration if the tester’s IP address is in India, even if the Stripe account is based outside India.\n\nIn addition, each payment method and browser has specific requirements:\n\n#### Safari![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Safari on Mac running macOS Sierra or later\n*   A compatible device with a card in its Wallet paired to your Mac with Handoff, or a Mac with TouchID. You can find instructions on the [Apple Support site](https://support.apple.com/en-us/HT204681).\n*   A [verified domain with Apple Pay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n*   When using an iframe, its origin must match the top-level origin (except for Safari 17 when specifying `allow=\"payment\"` attribute). Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n\n#### Mobile Safari![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Mobile Safari on iOS 10.1 or later\n*   A card in your Wallet (go to **Settings** > **Wallet & Apple Pay**).\n*   A [verified domain with Apple Pay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n*   When using an iframe, its origin must match the top-level origin (except for Safari 17 when specifying `allow=\"payment\"` attribute). Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n\nAs of iOS 16, Apple Pay might work in some non-Safari mobile browsers with a card saved in your Wallet.\n\n## Collect shipping information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo collect shipping information, begin by including `requestShipping: true` when creating the payment request.\n\nYou can also provide an array of `shippingOptions` at this point, if your shipping options don’t depend on the customer’s address.\n\n``const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },    requestShipping: true,   // `shippingOptions` is optional at this point:   shippingOptions: [     // The first shipping option in this list appears as the default     // option in the browser payment interface.     {       id: 'free-shipping',       label: 'Free shipping',       detail: 'Arrives in 5 to 7 days',       amount: 0,     },   ], });``\n\nNext, listen to the `shippingaddresschange` event to detect when a customer selects a shipping address. Use the address to fetch valid shipping options from your server, update the total, or perform other business logic. You can anonymize the address data on the `shippingaddresschange` event in the browser to not reveal sensitive information that isn’t necessary for shipping cost calculation.\n\nThe customer must provide valid `shippingOptions` at this point to proceed in the flow.\n\n`paymentRequest.on('shippingaddresschange', async (ev) => {   if (ev.shippingAddress.country !== 'US') {     ev.updateWith({status: 'invalid_shipping_address'});   } else {     // Perform server-side request to fetch shipping options     const response = await fetch('/calculateShipping', {       data: JSON.stringify({         shippingAddress: ev.shippingAddress       })     });     const result = await response.json();      ev.updateWith({       status: 'success',       shippingOptions: result.supportedShippingOptions,     });   } });`\n\n## Display line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [`displayItems`](https://docs.stripe.com/js/payment_request/create#stripe_payment_request-options-displayItems) to display [`PaymentItem`](https://docs.stripe.com/js/appendix/payment_item_object) objects and show the price breakdown in the browser’s payment interface.\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 2000,   },    displayItems: [     {       label: 'Sample item',       amount: 1000,     },     {       label: 'Shipping cost',       amount: 1000,     }   ], });`\n\n## Style the button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following parameters to customize the Element:\n\n`elements.create('paymentRequestButton', {   paymentRequest,   style: {     paymentRequestButton: {       type: 'default',       // One of 'default', 'book', 'buy', or 'donate'       // Defaults to 'default'        theme: 'dark',       // One of 'dark', 'light', or 'light-outline'       // Defaults to 'dark'        height: '64px',       // Defaults to '40px'. The width is always '100%'.     },   }, });`\n\n### Using your own button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to design your own button instead of using the `paymentRequestButton` Element, you can show your custom button based on the result of [paymentRequest.canMakePayment()](https://docs.stripe.com/js#payment-request-can-make-payment). Then, use [paymentRequest.show()](https://docs.stripe.com/js#payment-request-show) to display the browser interface when your button is clicked.\n\nWhen building your own button, follow the Apple Pay [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines) and Google Pay [Brand Guidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines).\n\n#### Caution\n\nLink isn’t supported in custom button configurations and won’t display for the customer if you decide to use one.\n\n## Add an Apple Pay merchant token for merchant initiated transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up your Payment Request Button to request an [Apple Pay MPAN](https://docs.stripe.com/apple-pay/merchant-tokens) to facilitate merchant initiated transactions (MIT) for recurring, auto-load, or deferred payments.\n\n1.  Create an instance of the [Payment Request](#create-payment-request-instance).\n2.  Pass the `applePay` object relevant to your MPAN use case (choose from the drop-down to see use case code samples).\n3.  Include relevant parameters for your use case.\n\n`const paymentRequest = stripe.paymentRequest({   applePay: {     recurringPaymentRequest: {       paymentDescription: 'My subscription',       managementURL: '[https://example.com/billing](https://example.com/billing)',       regularBilling: {         amount: 2500,         label: 'Monthly subscription fee',         recurringPaymentIntervalUnit: 'month',         recurringPaymentIntervalCount: 1,       },     },   },   // Other options });`\n\n## Use the Payment Request Button with Stripe Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms that either create direct charges or add the token to a Customer on the connected account must take additional steps when using the Payment Request Button.\n\n1.  On your frontend, before creating the `PaymentRequest` instance, set the `stripeAccount` option on the Stripe instance:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   apiVersion: \"2024-06-20\",   stripeAccount: 'CONNECTED_STRIPE_ACCOUNT_ID', });`\n\n1.  [Register all domains](https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api#register-your-domain-while-using-connect) where you plan to show the Payment Request Button.\n\n## Link for the Payment Request Button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen new customers come to your site, they can use [Link in the Payment Request Button](https://docs.stripe.com/payments/link/payment-request-button-link) to pay with their saved payment details. With [Link](https://docs.stripe.com/payments/link/what-is-link), they don’t need to manually enter their payment information. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Payment Request Button | Stripe Documentation",
    "description": "Collect payment and address information from customers who use Apple Pay, Google Pay, or Link.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/google-pay",
    "markdown": "# Google Pay | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments using Google Pay.\n\nGoogle Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer’s Google account.\n\nGoogle Pay is fully compatible with Stripe’s products and features (for example, recurring payments), allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical goods, donations, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and so on.\n\n## Using Stripe and Google Pay versus the Google Play billing system![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sales of physical goods and services, your app can accept Google Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, in-app purchases of digital products and content must use the [Google Play billing system](https://developer.android.com/google/play/billing). Those payments are processed by Google and are subject to their transaction fees.\n\nFor more information about which purchases must use the Google Play billing system, see Google Play’s [developer terms](https://support.google.com/googleplay/android-developer/answer/10281818).\n\n## Accept a payment using Google Pay in your Android app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`GooglePayLauncher`, part of the Stripe Android SDK, is the fastest and easiest way to start accepting Google Pay in your Android apps.\n\n[](#html-js-prerequisites)\n\nTo support Google Pay in Android, you need the following:\n\n*   A `minSdkVersion` of `19` or higher.\n*   A `compileSdkVersion` of `28` or higher.\n\nAdditionally, if you wish to test with your own device, you need to [add a payment method to your Google Account](https://support.google.com/wallet/answer/12058983?visit_id=637947092743186187-653786796&rd=1).\n\n[](#setup)\n\nTo use Google Pay, first enable the Google Pay API by adding the following to the `<application>` tag of your **AndroidManifest.xml**:\n\n`<application>   ...   <meta-data     android:name=\"com.google.android.gms.wallet.api.enabled\"     android:value=\"true\" /> </application>`\n\nThis guide assumes you’re using the latest version of the Stripe Android SDK.\n\n`dependencies {     implementation 'com.stripe:stripe-android:20.48.0' }`\n\nFor more details, see Google Pay’s [Set up Google Pay API](https://developers.google.com/pay/api/android/guides/setup) for Android.\n\n[](#button)\n\nAdd the Google Pay button to your app by following [Google’s tutorial](https://developers.google.com/pay/api/android/guides/tutorial#add-button). This ensures you’re using the correct assets.\n\n[](#instantiate)\n\nNext, create an instance of [GooglePayLauncher](https://github.com/stripe/stripe-android/blob/master/payments-core/src/main/java/com/stripe/android/googlepaylauncher/GooglePayLauncher.kt) in your `Activity` or `Fragment`. This must be done in `Activity#onCreate()`.\n\n`GooglePayLauncher.Config` exposes both required and optional properties that configure `GooglePayLauncher`. See `GooglePayLauncher.Config` for more details on the configuration options.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayLauncher(             activity = this,             config = GooglePayLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"US\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     }      private fun onGooglePayReady(isReady: Boolean) {         // implemented below     }      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         // implemented below     } }``\n\nAfter instantiating `GooglePayLauncher`, the `GooglePayLauncher.ReadyCallback` instance is called with a flag indicating whether Google Pay is available and ready to use. This flag can be used to update your UI to indicate to your customer that Google Pay is ready to be used.\n\n`import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // continued from above      private lateinit var googlePayButton: PayButton      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     } }`\n\n[](#launch-google-pay)\n\nAfter Google Pay is available and your app has obtained a `PaymentIntent` or `SetupIntent` client secret, launch `GooglePayLauncher` using the appropriate method. When confirming a `PaymentIntent`, use `GooglePayLauncher#presentForPaymentIntent(clientSecret)`. When confirming a `SetupIntent`, use `GooglePayLauncher#presentForSetupIntent(clientSecret)`.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)          // instantiate `googlePayLauncher`          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     } }``\n\n[\n\n## Handle the result![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-result)\n\nFinally, implement `GooglePayLauncher.ResultCallback` to handle the result of the `GooglePayLauncher` operation.\n\nThe result can be `GooglePayLauncher.Result.Completed`, `GooglePayLauncher.Result.Canceled`, or `GooglePayLauncher.Result.Failed`.\n\n``class CheckoutActivity : AppCompatActivity() {     // continued from above      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         when (result) {             GooglePayLauncher.Result.Completed -> {                 // Payment succeeded, show a receipt view             }             GooglePayLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``\n\n[](#going-live)\n\nFollow [Google’s instructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access) to request production access for your app. Choose the integration type **Gateway** when prompted, and provide screenshots of your app for review.\n\nAfter your app has been approved, test your integration in production by setting the environment to `GooglePayEnvironment.Production`, and launching Google Pay from a signed, release build of your app. Remember to use your live mode [API keys](https://docs.stripe.com/keys). You can use a `PaymentIntent` with [`capture_method` = `manual`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to process a transaction without capturing the payment.\n\n## Creating a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you confirm your payment on your server, you can use `GooglePayPaymentMethodLauncher` to only collect a `PaymentMethod` instead of confirm payment.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayPaymentMethodLauncher(             activity = this,             config = GooglePayPaymentMethodLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"FR\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             googlePayLauncher.present(                 currencyCode = \"EUR\",                 amount = 2500             )         }     }      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     }      private fun onGooglePayResult(         result: GooglePayPaymentMethodLauncher.Result     ) {         when (result) {             is GooglePayPaymentMethodLauncher.Result.Completed -> {                 // Payment details successfully captured.                 // Send the paymentMethodId to your server to finalize payment.                 val paymentMethodId = result.paymentMethod.id             }             GooglePayPaymentMethodLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayPaymentMethodLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``",
    "title": "Google Pay | Stripe Documentation",
    "description": "Learn how to accept payments using Google Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal",
    "markdown": "# PayPal payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PayPal, a digital wallet popular with businesses in Europe.\n\nPayPal is a payment method that enables customers in any country to pay using their PayPal account.\n\nTo pay using PayPal, customers are redirected from your website to PayPal. They choose a funding source: PayPal wallet, linked card or bank account, or buy now, pay later. Then they authenticate the payment. After successful authorization, the customer is redirected back to your website. You receive an [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of the payment’s success or failure.\n\n*   **Customer locations**\n    \n    Worldwide\n    \n*   **Presentment currency**\n    \n    EUR, GBP, USD, CHF, CZK, DKK, NOK, PLN, SEK, AUD, CAD, HKD, NZD, SGD\n    \n*   **Payment method family**\n    \n    Wallets\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Partial (requires manual approval, see details below)\n    \n*   **Recurring payments**\n    \n    Requires approval\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer is redirected to PayPal and enters login details\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Connect support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayPal is available for online marketplaces using [Stripe Connect](https://stripe.com/connect). These online marketplaces include businesses such as Deliveroo and ManoMano that collect payments from customers, and later pay out to sub-accounts or service providers. PayPal isn’t available for platforms that onboard other businesses and enable them to accept payments directly, such as Shopify or Squarespace.\n\n#### Note\n\nOnline marketplaces need to submit an onboarding request from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to get access to PayPal. Stripe sends email updates about the progress of all requests, and the current status is also reflected on the [Payment Method Settings page](https://dashboard.stripe.com/settings/payment_methods).\n\nThe following [Connect charges](https://docs.stripe.com/connect/charges) types, typically used by online marketplaces, are available to businesses using PayPal.\n\n| Destination charges | Separate charges and transfers | Direct charges | on\\_behalf\\_of |\n| --- | --- | --- | --- |\n|     |     |     |     |\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdd PayPal and other payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) without making updates to your code. For each customer, Stripe determines the list of supported payment methods most likely to drive conversion. Learn how to [accept PayPal and other payment methods automatically](https://docs.stripe.com/payments/accept-a-payment) with Checkout or Elements. To accept PayPal and other payment methods without any code, use [Payment Links](https://docs.stripe.com/payment-links).\n\nWhen you’re ready to go live, follow the steps to [activate PayPal payments](https://docs.stripe.com/payments/paypal/connect-your-paypal-account).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers must authenticate payments with their PayPal accounts, helping to reduce the risk of fraud or unrecognized payments. However, customers can still dispute transactions after they complete payment. Some common reasons for disputes are customers determining that items weren’t as described, or not receiving items at all. You can submit evidence to contest a dispute directly from the Stripe Dashboard.\n\nLearn how to [manage PayPal disputes](https://docs.stripe.com/payments/paypal/disputed-payments) in the Dashboard.\n\nFor certain dispute types, PayPal enables you communicate directly to customers to try resolving the dispute. Contacting customers directly must be handled through the PayPal dashboard, and not the Stripe Dashboard.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayPal payments can be refunded up to 180 days after the original payment. Stripe uses either your Stripe balance or your PayPal balance to refund the payment, depending on the [settlement preference you selected](https://docs.stripe.com/payments/paypal/choose-settlement-preference).\n\nYou can use the Stripe Dashboard or API to initiate refund requests, as with other payment methods. If you choose to settle funds to Stripe, refunds will be withdrawn from the funds available in your Stripe account. If you choose to settle funds to PayPal, refunds funded using your PayPal balance or any other funding source available on your PayPal account.\n\n## Reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal fees are included in the **Less fees** sections of [Balance and Balance Activity reports](https://dashboard.stripe.com/reports/balance). PayPal fees aren’t included in your [tax invoice from Stripe](https://dashboard.stripe.com/settings/documents). You can access these documents from your PayPal dashboard.\n\n## Seller protection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal’s Seller Protection program offers coverage for sellers under eligible transactions. It includes scenarios such as unauthorized transactions or buyers’ claims of non-receipt of item. For more information on the Seller Protection program and eligibility, visit [PayPal Seller Protection](https://www.paypal.com/uk/legalhub/seller-protection).\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the business categories restricted from using Stripe overall, PayPal requires pre-approval to accept payments for certain services. Refer to the [PayPal Acceptable Use Policy](https://www.paypal.com/us/legalhub/acceptableuse-full) for details.\n\n## Minimum and maximum charge amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal doesn’t have a minimum charge amount, but Stripe enforces the same [minimum and maximum charge amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) for PayPal as for other payment methods.",
    "title": "PayPal payments | Stripe Documentation",
    "description": "Learn about PayPal, a digital wallet popular with businesses in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/express-checkout-element/comparison",
    "markdown": "# Express Checkout Element comparison | Stripe DocumentationThe Stripe Docs logo\n\n## Compare the features for the Express Checkout Element and the Payment Request Button.\n\nLike the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button), you can use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to accept card or [wallet](https://docs.stripe.com/payments/wallets) payments through one or more payment buttons. While both Elements support common payment flows, the Express Checkout Element provides instant access to additional payment methods.\n\nIf you currently use the Payment Request Button, you can [migrate](https://docs.stripe.com/elements/express-checkout-element/migration) to the Express Checkout Element.\n\n| Features | Express Checkout Element | Payment Request Button |\n| --- | --- | --- |\n| Accept all Stripe-supported [card brands](https://docs.stripe.com/payments/cards#supported-card-brands) through wallet pay buttons |     |     |\n| Accept payments with other payment methods |     |     |\n| Enable faster checkout with [Link](https://docs.stripe.com/payments/link) |     |     |\n| Enable using different [funding sources](https://docs.stripe.com/payments/link/add-link-elements-integration#multiple-funding-sources) with Link |     |     |\n| Support Apple Pay [merchant tokens](https://developer.apple.com/apple-pay/merchant-tokens/) |     |     |\n| Display multiple buttons (such as Apple Pay and Google Pay) at the same time |     |     |\n| Change the button appearance and theme |     |     |\n| Handle [3D Secure](https://docs.stripe.com/payments/3d-secure) authentication |     |     |",
    "title": "Express Checkout Element comparison | Stripe Documentation",
    "description": "Compare the features for the Express Checkout Element and the Payment Request Button.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/express-checkout-element/migration",
    "markdown": "# Migrate to the Express Checkout Element\n\n## Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.\n\nThe [Payment Request Button Element](https://docs.stripe.com/stripe-js/elements/payment-request-button) allows you to accept card payments only through [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), or [Link](https://docs.stripe.com/payments/link). When you migrate to the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element), you can accept card or [wallet](https://docs.stripe.com/payments/wallets) payments through one or more payment buttons, including [PayPal](https://docs.stripe.com/payments/paypal). See the [comparison guide](https://docs.stripe.com/elements/express-checkout-element/comparison) for more details.\n\n| If your existing integration uses | Do the following |\n| --- | --- |\n| [Payment Intents](https://docs.stripe.com/api/payment_intents) API to create and track payments or save card details during a payment | Follow the steps in this guide to use the Express Checkout Element. |\n| [Charges](https://docs.stripe.com/api/charges) API with tokens | Migrate to the [Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration#web) before proceeding. |\n\n[](#enable-payment-methods)\n\nEnable the payment methods you want to support in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods). You must enable at least one payment method.\n\nBy default, Stripe enables cards and other common payment methods. You can enable additional payment methods that are relevant for your business and customers. See the [payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#one-time-update-elements)\n\nNext, update your client-side code to pass the mode (payment), amount, and currency. These values determine which payment methods to show to your customers.\n\nFor example, if you pass the `eur` currency on the `PaymentIntent` and enable OXXO in the Dashboard, your customer won’t see OXXO because OXXO doesn’t support `eur` payments.\n\nStripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. We prioritize payment methods that increase conversion and are most relevant to the currency and customer location.\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const options = {   mode: 'payment',   amount: 1099,   currency: 'usd', }; const elements = stripe.elements(options);`\n\n[](#one-time-payment-intent)\n\nThe `PaymentIntent` includes the payment methods shown to customers during checkout. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"automatic_payment_methods[enabled]\"=true \\`\n\nIf your existing integration supports multiple payment methods or you want to accept payment methods other than cards, you can [enable more payment methods](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\n[](#one-time-add-express-checkout-element)\n\nReplace the Payment Request Button Element with the Express Checkout Element. The examples below demonstrate how to replace `PaymentRequestButtonElement` with `ExpressCheckoutElement`.\n\nYou no longer need to create a `paymentRequest` object. Instead, pass the properties through the `click` event once.\n\n`<div id=\"payment-request-button\"> </div>`\n\n`<div id=\"express-checkout-element\">   <!-- Mount the Express Checkout Element here --> </div>`\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },   requestPayerName: true,   requestPayerEmail: true, }); const paymentRequestButton = elements.create('paymentRequestButton', {   paymentRequest: paymentRequest, }); paymentRequestButton.mount(\"#payment-request-button\"); paymentRequest.canMakePayment().then(function(result) {   if (result) {     prButton.mount('#payment-request-button');   } else {     document.getElementById('payment-request-button').style.display = 'none';   } });`\n\n`const expressCheckoutElement = elements.create(\"expressCheckout\"); expressCheckoutElement.mount(\"#express-checkout-element\"); expressCheckoutElement.on('click', (event) => {   const options = {     emailRequired: true   };   event.resolve(options); });`\n\n[](#one-time-update-method)\n\nListen to the [confirm](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event) event to handle confirmation. To collect and submit payment information to Stripe, use [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) instead of individual confirmation methods like `stripe.confirmCardPayment`.\n\nInstead of a PaymentMethod ID, `stripe.confirmPayment` uses the Elements instance from the Express Checkout Element and the client secret from the created `PaymentIntent`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any required actions, such as authenticating your customers by displaying a 3DS dialog or redirecting them to a bank authorization page. After confirmation completes, users are directed to the [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) that you configured, which corresponds to a page on your website that provides the payment status.\n\nIf you want the checkout flow for card payments to redirect only for payment methods that require it, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`. This doesn’t apply to the Express Checkout Element.\n\nThe example below replaces `stripe.confirmCardPayment` with `stripe.confirmPayment`.\n\n`paymentRequest.on('paymentmethod', function(ev) {   stripe.confirmCardPayment(     '{{CLIENT_SECRET}}',     {payment_method: ev.paymentMethod.id},     {handleActions: false}   ).then(function(confirmResult) {     if (confirmResult.error) {       ev.complete('fail');     } else {       ev.complete('success');       if (confirmResult.paymentIntent.status === \"requires_action\") {         stripe.confirmCardPayment(clientSecret).then(           function(result) {             if (result.error) {               // The payment failed -- ask your customer for a new payment method.             } else {               // The payment succeeded.             }           }         );       } else {         // The payment succeeded.       }     }   }); });`\n\n``expressCheckoutElement.on('confirm', async (event) => {   const {error} = await stripe.confirmPayment({     // `Elements` instance that's used to create the Express Checkout Element.     elements,     // `clientSecret` from the created PaymentIntent     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },     // Uncomment below if you only want redirect for redirect-based payments.     // redirect: 'if_required',   });    if (error) {     // This point is reached only if there's an immediate error when confirming the payment. Show the error to your customer (for example, payment details incomplete).   } else {     // Your customer will be redirected to your `return_url`.   } });``\n\n[](#post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |",
    "title": "Migrate to the Express Checkout Element | Stripe Documentation",
    "description": "Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/customization/font-compatibility",
    "markdown": "# Font compatibility | Stripe DocumentationThe Stripe Docs logo\n\nBe Vietnam Pro`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Bitter`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Chakra Petch`bg`, `el`, `ja`, `ko`, `ru`, `zh`, `zh-HK`, `zh-TW`Hahmlet`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Inconsolata`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Inter`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Lato`bg`, `cs`, `el`, `hr`, `ja`, `ko`, `lt`, `lv`, `mt`, `ro`, `ru`, `sl`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Lora`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`M PLUS 1 Code`bg`, `el`, `ko`, `lt`, `lv`, `ru`, `sk`, `sl`, `th`, `tr`Montserrat`el`, `hr`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Nunito`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Noto Sans`ja`, `ko`, `th`Noto Serif`th`Open Sans`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`PT Sans`el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`PT Serif`el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Pridi`bg`, `el`, `ja`, `ko`, `ru`, `zh`, `zh-HK`, `zh-TW`Raleway`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Roboto`ja`, `ko`, `zh`, `zh-HK`, `zh-TW`Roboto Slab`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Source Sans Pro`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Titillium Web`bg`, `el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Ubuntu Mono`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Zen Maru Gothic`bg`, `cs`, `el`, `hr`, `ko`, `lt`, `lv`, `pl`, `ro`, `ru`, `sk`, `th`, `vi`",
    "title": "Font compatibility | Stripe Documentation",
    "description": "Learn about font support for different locales.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/customization",
    "markdown": "# Customize Checkout | Stripe DocumentationThe Stripe Docs logo\n\nYou can customize the text that your customers see, as well as the policies Checkout displays.\n\n### Add custom text![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can present additional text to customers when they pay with Stripe Checkout, such as shipping and processing times.\n\n#### Warning\n\nYou are prohibited from using this feature to create custom text that will violate or create ambiguity with the Stripe generated text on Checkout, obligations under your Stripe agreement, Stripe’s policies, and applicable laws.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d \"shipping_address_collection[allowed_countries][0]\"=US \\   --data-urlencode \"custom_text[shipping_address][message]\"=\"Please note that we can't guarantee 2-day delivery for PO boxes at this time.\" \\   --data-urlencode \"custom_text[submit][message]\"=\"We'll email you instructions on how to get started.\" \\   --data-urlencode \"custom_text[after_submit][message]\"=\"Learn more about **your purchase** on our [product page]([https://www.stripe.com/).](https://www.stripe.com/))\" \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n![Custom text near shipping address collection](https://b.stripecdn.com/docs-statics-srv/assets/shipping-address-custom-text.b0b578d66d2bd415d0b0fe03106d27df.png)\n\nCustom text near the shipping address collection fields\n\n![Custom text above the pay button](https://b.stripecdn.com/docs-statics-srv/assets/submit-custom-text.bf46135c06b7c33c1ce9c9b09e4206c9.png)\n\nCustom text above the **Pay** button\n\n![Custom text below the pay button](https://b.stripecdn.com/docs-statics-srv/assets/custom-text-after-submit.32dbd97008b3f189145bcd07c4562bb4.png)\n\nCustom text after the **Pay** button\n\nYour custom text can be up to 1200 characters in length. However, Stripe Checkout is optimized for conversion, and adding extra information might affect your conversion rate. You can bold text or insert a link using [Markdown syntax](https://www.markdownguide.org/cheat-sheet/).\n\n### Customize policies and contact information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can display your return, refund, legal policies, and support contact information to your customers on Checkout. Go to [Checkout Settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display, including:\n\n*   Details about your return and refund policies\n*   Your support phone number, email, and website\n*   Links to your terms of service and privacy policy\n\nPresenting this information can increase buyer confidence and minimize cart abandonment.\n\n#### Configure support and legal policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom [Checkout Settings](https://dashboard.stripe.com/settings/checkout), add support contact information to your sessions by enabling **Contact information**. Similarly, add links to your **Terms of service** and **Privacy policy** to your sessions by enabling **Legal policies**. If you require customers to implicitly consent to your legal policies when they complete their checkout, select the **Display agreement to legal terms** checkbox.\n\nYou must add your support contact information and legal policy links in your [Public Detail Settings](https://dashboard.stripe.com/settings/public).\n\nThe following previews show how Checkout displays a dialog with the support contact information, links to the store legal policies, and information about the payment terms.\n\n![A checkout page with contact information.](https://b.stripecdn.com/docs-statics-srv/assets/contact-modal.2b81bc2e74657f7c94a45a743439c81f.png)\n\nPreview of contact information on Checkout.\n\n![A checkout page with legal policies.](https://b.stripecdn.com/docs-statics-srv/assets/legal-modal.9351cb51408c2a9f5c0ae23aab03e138.png)\n\nPreview of legal policies on Checkout.\n\n#### Configure return and refund policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisplay your return, refund, or exchange policies, by enabling **Return and Refund policies**. Although businesses that sell physical goods use return policies, businesses that sell digital goods or customized physical goods typically use refund policies. Because they’re not mutually exclusive, you can select both options if your business sells both categories of goods. You can edit your return and refund details, including:\n\n*   Whether you accept returns, refunds, or exchanges\n*   Whether returns, refunds, or exchanges are free or if they’re subject to a fee\n*   How many days after a purchase you’ll accept returns, refunds, or exchanges\n*   How customers can return items shipped to them\n*   Whether you accept in-store returns\n*   A link to the full return and refund policy\n*   A custom message\n\nIf you accept free returns, refunds, or exchanges, Checkout highlights the policy for customers.\n\nThe following previews show how Checkout displays a return policy. In this example, it’s for purchases that can be returned by shipping them or in-store for a full refund (or exchange) for up to 60 days. You can display similar information for refunds.\n\n![Preview of return policies on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/return-policy-modal.0c7a9ff71b8bc2c155842532801e06a8.png)\n\nPreview of return policies on Checkout.\n\n![Preview of a policy highlight on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/policy-highlight.334828420693a33d376977a2c0fe5851.png)\n\nPreview of a policy highlight on Checkout.\n\n#### Collect a terms of service agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses often require their customers to agree to their terms of service before they can pay. This might depend on the type of product or subscription. Checkout helps you collect the necessary agreement by requiring a customer to accept your terms before paying.\n\n![Collect terms of service agreement](https://b.stripecdn.com/docs-statics-srv/assets/terms-of-service-consent-collection.dec90bde6d1a3c5d4c0b3e7b8e644a52.png)\n\nCollect terms of service agreement\n\nYou can collect a terms of service agreement with Stripe Checkout when you create a Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[terms_of_service]\"=required \\   --data-urlencode \"custom_text[terms_of_service_acceptance][message]\"=\"I agree to the [Terms of Service]([https://example.com/terms)](https://example.com/terms))\"`\n\nWhen `consent_collection.terms_of_service='required'`, Checkout dynamically displays a checkbox for collecting the customer’s terms of service agreement. If `consent_collection.terms_of_service='none'`, Checkout won’t display the checkbox and won’t require customers to accept the terms of service. Before requiring agreement to your terms, set your terms of service URL in your business’ [Public details](https://dashboard.stripe.com/settings/public). Setting a privacy policy URL is optional—Checkout also links to your privacy policy when a URL to your Privacy policy is set in your [Public details](https://dashboard.stripe.com/settings/public).\n\nAfter a customer completes checkout, you can verify that the customer accepted your terms of service by looking at the Session object in the `checkout.session.completed` webhook, or by retrieving the Session using the API. When the terms are accepted, the Session’s [`consent.terms_of_service`](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-consent) field is set to `accepted`.\n\nYou can customize the text that appears next to the checkbox by using `custom_text.terms_of_service_acceptance`. You need to set `consent_collection.terms_of_service='required'`. To use your own terms, insert a Markdown link. For example: `I agree to the [Terms of Service](https://example.com/terms)`\n\n#### Warning\n\nConsult your legal and compliance advisors before making any changes to this text. You may not use this feature to display custom text that violates or creates ambiguity with the Stripe-generated text on Checkout, obligations under your Stripe agreement, Stripe policies, and applicable laws.\n\n#### Collect consent for promotional emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can send promotional emails to inform customers of new products and to share coupons and discounts. Before doing so, you must [collect their consent](https://docs.stripe.com/payments/checkout/promotional-emails-consent) to receive promotional emails.",
    "title": "Customize Checkout | Stripe Documentation",
    "description": "Customize the appearance and behavior of Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links",
    "markdown": "# Charge for shipping | Stripe DocumentationThe Stripe Docs logo\n\n## Create different shipping rates for your customers.\n\nShipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates. Charge your customer for shipping using different Stripe products, some of which require coding. Before you create a shipping rate, learn how to [collect billing and shipping addresses](https://docs.stripe.com/payments/collect-addresses).\n\n#### Third-party plugins\n\nIf you’re using a third-party application with Stripe (for example, [Thrivecart](https://support.thrivecart.com/help/setting-your-physical-fulfilment-shipping-options/) or [Shopify](https://help.shopify.com/en/manual/shipping/setting-up-and-managing-your-shipping/setting-up-shipping-rates)) and want to adjust the shipping rate, visit the docs for that service.\n\n1.  Create a [payment link](https://dashboard.stripe.com/test/payment-links/create) and select **Collect customers’ addresses** with the **Billing and shipping addresses** option.\n2.  Select the countries you ship to.\n3.  Click **Add shipping rates** to select an existing shipping rate or add a new one. You can only use shipping rates with one-time prices on payment links.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-payment-link-with-shipping-rate.299819920f996e92c28c393f7a9d91cc.png)\n\nAdd a new shipping rate for a payment link in the Dashboard",
    "title": "Charge for shipping | Stripe Documentation",
    "description": "This guide covers setting shipping rates for Stripe Payment Links, Checkout, and Elements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/limit-subscriptions",
    "markdown": "# Limit customers to one subscription\n\n## Direct customers to manage their subscription when they already have one.\n\nYou can redirect customers that already have an active subscription to the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\") or your website to manage their subscription. This redirection works with [Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") (including the [pricing table](https://docs.stripe.com/payments/checkout/pricing-table)) and Payment Links.\n\nStripe uses either the [Customer object](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer) (if you provide it in the checkout session) or the email address to detect if a customer already has an active subscription.\n\n![Manage subscription](https://b.stripecdn.com/docs-statics-srv/assets/manage-subscription.47036dfee120d3651fc3819c8b7abfbb.png)\n\n## Active subscription statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nActive subscriptions have the following [four statuses](https://docs.stripe.com/api/subscriptions/object#subscription_object-status):\n\n*   `Active`\n*   `PastDue`\n*   `Unpaid`\n*   `Paused`\n\n## Direct your customers to the customer portal or your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Activate the no-code customer portal](https://docs.stripe.com/customer-management/activate-no-code-customer-portal) to allow your customers to log in and manage their subscriptions. You need to keep the login link for the customer portal enabled to keep this feature enabled. Disabling the login link disables this feature, which means that customers can create multiple subscriptions.\n2.  Enable redirecting your customers to the customer portal in your [Checkout and Payment Links settings](https://dashboard.stripe.com/settings/checkout#subscriptions).\n\n![Subscription settings](https://b.stripecdn.com/docs-statics-srv/assets/subscription-settings.28f8c4efc7a1ca0efceeee8ebeae4786.png)",
    "title": "Limit customers to one subscription | Stripe Documentation",
    "description": "Direct customers to manage their subscription when they already have one.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/customer-portal",
    "markdown": "# Customer self-service with a customer portal\n\n## Allow your customers to manage their own accounts and subscriptions.\n\nProvide self-service functions to your customers by setting up a customer portal. You can configure it entirely in the Dashboard, or implement more powerful features, such as multiple configurations for different customers or for [connected accounts](https://docs.stripe.com/connect \"connected account\"), using the API.\n\nYou can fully automate many of your customer interactions by combining a customer portal with customer communications controlled by [Stripe Billing automations](https://docs.stripe.com/billing/automations). You create and manage automations in the Dashboard.\n\n## Get started with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/No-code.3f0b11f68b584b5471c4f0922566ae29.svg)](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\nCreate and configure a customer portal using the Dashboard.\n\n## Customer portal features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer portal allows your customers to self-manage their payment details, invoices, and subscriptions in one place.\n\n|     |     |\n| --- | --- |\n| See what your customers can do in the customer portal | **Key customer portal features**<br><br>*   Download invoices<br>*   Update payment methods<br>*   Cancel a subscription<br>*   Update customer information<br>*   Upgrade and downgrade subscriptions<br><br>[View demo](https://billing.stripe.com/customer-portal-demo) |\n\n| Feature | Description |\n| --- | --- |\n| Customer management | Offer your customers a self-serve method to:<br><br>*   Update billing information, including their tax IDs<br>*   Update payment methods<br>*   Update subscriptions<br>*   Cancel, pause, resume, and view subscriptions<br>*   Pay, download, and view current and past invoices |\n| Cancellation deflection | Reduce churn by offering your customers a coupon when they try to cancel their subscription. Customers who cancel anyway can share why. You can collect those reasons through webhooks or Stripe Sigma. |\n| Interoperability | Use the portal with other Stripe products:<br><br>*   [Checkout](https://docs.stripe.com/payments/checkout)<br>*   [Payment Links](https://docs.stripe.com/payment-links)<br>*   [Connect](https://docs.stripe.com/connect)<br>*   [Invoices](https://docs.stripe.com/invoicing)<br>*   [Billing](https://docs.stripe.com/billing)<br>*   [Stripe Tax](https://docs.stripe.com/tax) |\n| Localization support | Automatically localize the portal based on your customers’ preferred language. To view a localized version of the portal, set your browser’s default language to the language you want to preview. See the full list of supported languages in the table below. |\n| Customized branding | Configure the portal to match your branding, including your icon, logo, colors, and business information. |\n| Payment methods | Manage payment methods to make it convenient for your customers to pay you. See the full list of [supported payment methods](#supported-payment-methods). Read the [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) guide to learn more. |\n| Invoice-only support | Yes. You don’t need to use subscriptions for the customer portal to be useful for your business and your customers. To preview invoicing management in the portal, complete the following step<br><br>1.  Turn on test mode in the Dashboard (nothing you do in test mode affects your live setup).<br>2.  Go to the [Customers page](https://dashboard.stripe.com/customers), and select a customer.<br>3.  Create a new invoice for the customer.<br>4.  Click **Actions**, then **Open customer portal**. For security reasons, the quick view option isn’t available for live mode customers. |\n| Language support | **Languages supported by the customer portal**<br><br>*   Bulgarian (bg)<br>*   Chinese Simplified (zh)<br>*   Chinese Traditional—Hong Kong (zh-Hant-HK)<br>*   Chinese Traditional—Taiwan (zh-Hant-TW)<br>*   Croatian (hr)<br>*   Czech (cs)<br>*   Danish (da)<br>*   Dutch (nl)<br>*   English, US (en)<br>*   English, UK (en-GB)<br>*   Estonian (et)<br>*   Filipino (fil)<br>*   Finnish (fi)<br>*   French, France (fr)<br>*   French, Canada (fr-CA)<br>*   German (de)<br>*   Greek (el)<br>*   Hungarian (hu)<br>*   Indonesian (id)<br>*   Italian (it)<br>*   Japanese (ja)<br>*   Korean (ko)<br>*   Latvian (lv)<br>*   Lithuanian (lt)<br>*   Malay (ms)<br>*   Maltese (mt)<br>*   Norwegian Bokmål (nb-NO)<br>*   Polish (pl)<br>*   Portuguese, Portugal (pt)<br>*   Portuguese, Brazil (pt-BR)<br>*   Romanian (ro)<br>*   Russian (ru)<br>*   Slovak (sk)<br>*   Slovenian (sl)<br>*   Spanish, Spain (es)<br>*   Spanish, Latin America (es-419)<br>*   Swedish (sv)<br>*   Thai (th)<br>*   Turkish (tr)<br>*   Vietnamese (vi) |\n| Stripe Connect compatibility | The customer portal works with Stripe Connect. If you’re using the customer portal with Stripe Connect, make sure you configure the customer portal for the platform instead of a connected account. |\n| Ephemeral sessions | Portal sessions are temporary. New portal sessions expire after a 5 minute period. If a customer uses it within that time period, the session expires within 1 hour of the most recent activity. |\n\n### Customer portal limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe customer portal has the following limitations:\n\n*   If subscriptions use any of the following, customers can only _cancel_ them in the portal (they can’t _update_ such subscriptions):\n    \n    *   [Multiple products](https://docs.stripe.com/billing/subscriptions/multiple-products)\n    *   [Usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n    *   Sending invoices for collection. Read more about the `collection_method` [parameter](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method). If you use the Dashboard to create the subscription, you make this selection in the **Payment method** section.\n    *   Unsupported payment methods\n*   Customers can’t update or cancel subscriptions that currently have an update scheduled with a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n    \n*   Customers can only modify subscriptions if the new price has the same [tax behavior](https://docs.stripe.com/api/prices/create#create_price-tax_behavior) as the initial price. Additionally, no modifications are allowed if the tax behavior is `unspecified`, even if the tax behavior of the new price is `unspecified`. Learn more about the `tax_behavior` parameter and how it [relates to subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=stripe-tax#product-and-price-setup).\n    \n*   The portal doesn’t display the payment method section if the portal doesn’t support the customer’s default payment method.\n    \n*   Customers can’t define multiple [Prices](https://docs.stripe.com/api/prices) with the same `product` and `recurring.interval` values. For example, to offer a magazine for 4.00 USD per month regular price and 3.00 USD per month for students, create a separate student magazine [Product](https://docs.stripe.com/api/product) version.\n    \n*   Customer modifications to a `trialing` subscription will end the free trial and create an invoice for immediate payment.\n    \n*   When you [allow customers to switch plans](https://docs.stripe.com/customer-management/configure-portal#configure-subscription-management), you can specify a maximum of 10 products for them to choose from.\n    \n\n## Supported payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| [Payment method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) | Description | Currencies | Merchant Country | Limitations |\n| --- | --- | --- | --- | --- |\n| ACH Direct Debit (`us_bank_account`) | Stripe users can receive bank transfers directly from customers. | USD | US  | None |\n| AU BECS Debit (`au_becs_debit`) | Bulk Electronic Clearing System (BECS) Direct Debit payments from customers with an Australian bank account. | AUD | AUS | None |\n| Boleto (`boleto`) | Boleto is a popular payment method in Brazil where customers pay by using a Boleto voucher with a generated number. | BRL | BR  | You must have a Brazilian Stripe account to accept Boleto from your customers. |\n| Cards (`card`) | Cards are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process. | Most currencies | Most locations | None |\n| Cash App Pay (`cashapp`) | Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. | USD | US  | None |\n| Link (`link`) | Link saves and autofills payment and shipping information for your customers so they don’t need to enter payment details manually. | Most currencies | Most locations | None |\n| PayPal (`paypal`) | PayPal is a payment method that enables customers in any country to pay using their PayPal account. | Most currencies | Europe | [Requires approval](https://docs.stripe.com/payments/paypal/set-up-future-payments#enable-recurring-payments-support-from-stripe-dashboard) |\n| Pre-authorized debits (`acss_debit`) | PADs are a low-cost, high volume batch processing network for financial transactions in Canada. | CAD, USD | CA, US | None |\n| SEPA direct debit (`sepa_debit`) | The Single Euro Payments Area (SEPA) is an initiative of the European Union to simplify payments within and across member countries. | EUR | AU, CA, Europe, HK, JP, MX, NZ, SG, US | None |\n| UK BACS Debit (`uk_bacs_debit`) | Bacs Direct Debit is a reusable, delayed notification payment method available to bank account holders from the United Kingdom. | GBP | UK  | You must have a UK Stripe account and a UK bank account to accept UK BACS Debit from your customers. |\n\n## Other hosted resources to use with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers multiple prebuilt resources so you can bill your customers quickly and maximize revenue retention and recovery.\n\n[](https://docs.stripe.com/payment-links \"Payment links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link.f0b2a66175b477e86a89e39eba75fb6c.svg)](https://docs.stripe.com/payment-links \"Payment links\")\n\nShare a link with your customers to get them signed up for your service through a payment page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout \"Checkout\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4abfc4af6b46ecac81ce96bc8ff0213e.svg)](https://docs.stripe.com/payments/checkout \"Checkout\")\n\nLet your customers sign up through a prebuilt payment form. You can embed it in your site or redirect your users to a page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/pricing-table.f5d39b6bee7ac0aa8441b103ac986988.png)](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\nCreate a pricing table in the Stripe Dashboard and embed the table in your site. Your customers select a plan then pay through Stripe Checkout.",
    "title": "Customer self-service with a customer portal | Stripe Documentation",
    "description": "Allow your customers to manage their own accounts and subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/promotion_codes",
    "markdown": "# Promotion Code | Stripe API Reference\n\n## [The Promotion Code object](https://docs.stripe.com/api/promotion_codes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.\n    \n*   Hash describing the coupon for this promotion code.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n\nThe Promotion Code object\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Create a promotion code](https://docs.stripe.com/api/promotion_codes/create)\n\nA promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.\n\n### Parameters\n\n*   The coupon for this promotion code.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the promotion code object.\n\n```\ncurl https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d coupon=nVJYDOag\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Update a promotion code](https://docs.stripe.com/api/promotion_codes/update)\n\nUpdates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated promotion code object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Retrieve a promotion code](https://docs.stripe.com/api/promotion_codes/retrieve)\n\nRetrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing `code` use [list](https://docs.stripe.com/api/promotion_codes/list) with the desired `code`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a promotion code if a valid promotion code ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```",
    "title": "Promotion Code | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/abandoned-carts",
    "markdown": "# Recover abandoned carts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to recover abandoned Checkout pages and boost revenue.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") may leave Checkout before completing their purchase. In e-commerce, this is known as [cart abandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails). To help bring customers back to Checkout, create a recovery flow where you follow up with customers over email to complete their purchases. You can do this with webhooks (see below) or with [no-code Cart Recovery Emails](https://docs.stripe.com/no-code/cart-recovery-emails).\n\nCart abandonment emails fall into the broader category of _promotional emails_, which includes emails that inform customers of new products and that share coupons and discounts. Customers must agree to receive promotional emails before you can contact them.\n\nCheckout helps you:\n\n1.  Collect consent from customers to send them promotional emails.\n2.  Get notified when customers abandon Checkout so you can send cart abandonment emails.\n\n[](#collect-promotional-consent)\n\nConfigure Checkout to collect consent for promotional content. See the [full guide](https://docs.stripe.com/payments/checkout/promotional-emails-consent) for more details.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[promotions]\"=auto`\n\nIf you collect the customer’s email address and request consent for promotional content before redirecting to Checkout, you may skip using `consent_collection[promotions]`.\n\n[](#configure-recovery)\n\nA Checkout Session becomes abandoned when it reaches its [expires\\_at](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-expires_at) timestamp and the buyer hasn’t completed checking out. When this occurs, the session is no longer accessible and Stripe fires the `checkout.session.expired` [webhook](https://docs.stripe.com/webhooks \"webhook\"), which you can listen to and try to bring the customer back to a new Checkout Session to complete their purchase.\n\nTo use this feature, enable `after_expiration.recovery` when you create the session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"consent_collection[promotions]\"=auto \\  -d \"after_expiration[recovery][enabled]\"=true \\  -d \"after_expiration[recovery][allow_promotion_codes]\"=true`\n\n[](#webhook)\n\nListen to the `checkout.session.expired` webhook to be notified when customers abandon Checkout and sessions expire. When the session expires with recovery enabled, the webhook payload contains [after\\_expiration](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-after_expiration-recovery), which includes a URL denoted by `after_expiration.recovery.url` that you can embed in cart abandonment emails. When the customer opens this URL, **it creates a new Checkout Session that’s a copy of the original expired session**. The customer uses this copied session to complete the purchase on a Stripe-hosted payment page.\n\n#### Note\n\nFor security purposes, the recovery URL for a session is usable for 30 days, denoted by the `after_expiration.recovery.expires_at` timestamp.\n\n`{   \"id\": \"evt_123456789\",   \"object\": \"event\",   \"type\": \"checkout.session.expired\",   // ...other webhook attributes   \"data\": {     \"object\": {       \"id\": \"cs_12356789\",       \"object\": \"checkout.session\",       // ...other Checkout Session attributes       \"consent_collection\": {         \"promotions\": \"auto\",       },       \"consent\": {         \"promotions\": \"opt_in\"       },       \"after_expiration\": {         \"recovery\": {           \"enabled\": true,           \"url\": \"[https://buy.stripe.com/r/live_asAb1724](https://buy.stripe.com/r/live_asAb1724)\",           \"allow_promotion_code\": true,           \"expires_at\": 1622908282,         }       }     }   } }`\n\n[](#send-recovery-emails)\n\nTo send recovery emails, create a webhook handler for expired sessions and send an email that embeds the session’s recovery URL. One customer may abandon multiple Checkout Sessions, each triggering its own `checkout.session.expired` webhook so make sure to record when you send recovery emails to customers and avoid spamming them.\n\n``// Find your endpoint's secret in your Dashboard's webhook settings const endpointSecret = 'whsec_...';  // Using Express const app = require('express')();  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const sendRecoveryEmail = (email, recoveryUrl) => {   // TODO: fill me in   console.log(\"Sending recovery email\", email, recoveryUrl); }  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (request, response) => {   const payload = request.body;   const sig = request.headers['stripe-signature'];    let event;    try {     event = stripe.webhooks.constructEvent(payload, sig, endpointSecret);   } catch (err) {     return response.status(400).send(`Webhook Error: ${err.message}`);   }    // Handle the checkout.session.expired event   if (event.type === 'checkout.session.expired') {     const session = event.data.object;      // When a Checkout Session expires, the buyer's email is not returned in     // the webhook payload unless they give consent for promotional content     const email = session.customer_details?.email     const recoveryUrl = session.after_expiration?.recovery?.url      // Do nothing if the Checkout Session has no email or recovery URL     if (!email || !recoveryUrl) {       return response.status(200).end();     }      // Check if the buyer has consented to promotional emails and     // avoid spamming people who abandon Checkout multiple times     if (       session.consent?.promotions === 'opt_in'       && !hasSentRecoveryEmailToCustomer(email)     ) {       sendRecoveryEmail(email, recoveryUrl)     }   }   response.status(200).end(); });``",
    "title": "Recover abandoned carts | Stripe Documentation",
    "description": "Learn how to recover abandoned Checkout pages and boost revenue.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/free-trials",
    "markdown": "# Configure a free trial without collecting payment details\n\n## Use Stripe Checkout to collect a customer's information for a free trial without collecting their payment details.\n\nStripe Checkout lets you sign up customers for a free trial of a subscription service without collecting their payment details. At the end of the trial period you specify, use Stripe to configure a reminder email to collect a customer’s payment details.\n\n[](#section-1)\n\nCreate a Checkout Session with the following:\n\n*   A `subscription_data` parameter with:\n    *   `trial_period_days` set to the length (in days) of your free trial. In this example, the trial period is 30 days.\n    *   `trial_settings[end_behavior][missing_payment_method]` set to `cancel` (or `pause`) if the trial ends without a payment method attached. View [Use trial periods](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment) to learn more.\n*   The `payment_method_collection` parameter set to `if_required`. This tells Stripe that collecting payment information at checkout is optional.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=subscription \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"={{PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d \"subscription_data[trial_settings][end_behavior][missing_payment_method]\"=cancel \\  -d \"subscription_data[trial_period_days]\"=30 \\  -d payment_method_collection=if_required`\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/skip-payment-method-collection.44ef515675b659555a1d80475114f89f.png)\n\n[](#collect-payment)\n\nBefore the trial expires, collect payment details from your customer.\n\nUnder **Manage free trial messaging** in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic), you can choose to automatically send a reminder email when a customer’s trial is about to expire.\n\nNext, select the **Link to a Stripe-hosted page** option so the reminder email contains a link for the customer to add or update their payment details. We don’t send free trial reminder emails in test mode. Learn more about how to [set up free trial reminders](https://docs.stripe.com/billing/revenue-recovery/customer-emails#trial-ending-reminders).\n\nYou must comply with card network requirements when offering trials. Learn more about [compliance requirements for trials and promotion](https://docs.stripe.com/billing/subscriptions/trials#compliance).",
    "title": "Configure a free trial without collecting payment details | Stripe Documentation",
    "description": "Use Stripe Checkout to collect a customer's information for a free trial without collecting their payment details.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/guest-customers",
    "markdown": "# Guest customers | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to track the activity of guest customers.\n\nThe [Customer object](https://docs.stripe.com/api/customers) represents a customer of your business, and it helps tracking subscriptions and payments that belong to the same customer. Checkout Sessions that don’t create Customers are associated with [guest customers](https://dashboard.stripe.com/customers?type=guest) instead. Stripe automatically groups guest customers in the Dashboard based on them having used the same card, email, or phone to make payments. This unified view helps you review purchasing behavior, refunds, chargebacks, or fraud.\n\nCheckout supports passing in a [`customer`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) to enable you to [prefill customer information](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#handling-existing-customers) on the Checkout page and to associate the payment or subscription with a specific customer.\n\nIf you don’t pass in a `customer`, you can set [`customer_creation`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_creation) to configure whether or not Checkout automatically creates a Customer object when the session is confirmed.\n\n## Managing and monitoring guest customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEven though you can’t manage or monitor guest customers in the same way as with Checkout Sessions that create Customers, you can still manage them and monitor their activity.\n\n### Grouping payments under guest customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use credit card number as the unique identifier to group credit card payments of your guest customers under the same guest identity. See the [guest customer support page](https://support.stripe.com/questions/guest-customer-faq) for additional details on the matching logic. If the same credit card was used by different guest customers (for example, two spouses using the same credit card to checkout at different times), all guest payments for that credit card show up together under one guest customer. Because we group by credit card, we consider it the same guest customer.\n\n### Updating your privacy policy or other privacy notices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou’re in the best position to know whether this feature is consistent with your privacy policy or other privacy notices. It’s a good practice to review your privacy notices and privacy policy when considering any new feature. Guest customers give you a view of your existing guest data, which can help you better detect fraud and help you manage customer service inquiries.\n\n### Exporting guest customer data from the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can export guest customer data from the [Customers](https://dashboard.stripe.com/customers) tab in the Dashboard. Guest customer information isn’t included in exports from the [Payments](https://dashboard.stripe.com/payments) tab.\n\n### Not seeing any guest customers in the Guests tab ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t see any guest customers under the **Guests** tab, this is because your Stripe integration is passing a Customer ID when creating Checkout Sessions. We only create guest customers for payments without a specific Customer object associated with them.",
    "title": "Guest customers | Stripe Documentation",
    "description": "Learn how to track the activity of guest customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/discounts",
    "markdown": "# Add discounts for one-time payments with Checkout\n\n## Reduce the amount charged to a customer by discounting their subtotal with coupons and promotion codes.\n\nYou can use discounts in Checkout to reduce the amount charged to a customer for one-time payments. Coupons and promotion codes allow for great flexibility in how you define and use them. They can:\n\n*   Apply a discount to an entire purchase subtotal\n*   Apply a discount to specific products\n*   Reduce the total charged by a percentage or a flat amount\n*   Create customer-facing promotion codes on top of coupons to share directly with customers\n\nTo use coupons for discounting [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") with Checkout and Billing, see [Discounts for subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n## Coupons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons specify a fixed value discount. You can create customer-facing promotion codes that map to a single underlying coupon.\n\nThis means that the codes `FALLPROMO` and `SPRINGPROMO` can both point to one 25% off coupon.\n\n### Create a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons are created in the [Dashboard](https://dashboard.stripe.com/coupons) or with the [API](https://docs.stripe.com/api#coupons):\n\n`curl https://api.stripe.com/v1/coupons \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d percent_off=20 \\  -d duration=once`\n\nIf you want to create a session with an applied discount, pass the [coupon ID](https://docs.stripe.com/api/coupons/object#coupon_object-id) in the `coupon` parameter of the [discounts](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts) array. Checkout currently supports up to one coupon or promotion code.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"discounts[0][coupon]\"=  {{COUPON_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Configure a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons have the following parameters that you can use for one-time payments:\n\n*   `id`, a unique identifier for the coupon\n*   `currency`\n*   `percent_off` or `amount_off`\n*   `max_redemptions`\n*   `redeem_by`, the latest date at which this coupon can be applied\n*   `applies_to`, limits the products that the coupon applies to\n\n#### Note\n\nThe coupon object adds discounts to both one-time payments and subscriptions. Some coupon object parameters, like `duration`, only apply to [subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n### Limit redemption usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `max_redemptions` and `redeem_by` values apply to the coupon across every application. For example, you can restrict a coupon to the first 50 usages of it, or you can make a coupon expire by a certain date.\n\n### Limit eligible products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can limit the products that are eligible for discounts using a coupon by adding the product IDs to the `applies_to` hash in the Coupon object. Any promotion codes that map to this coupon only apply to the list of eligible products.\n\n### Delete a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can delete coupons in the Dashboard or the API. Deleting a coupon prevents it from being applied to future transactions or customers.\n\nPromotion codes are customer-facing codes created on top of coupons. You can also specify additional restrictions that control when a customer can apply the promotion. You can share these codes with customers who can enter them into Checkout to apply a discount.\n\n### Create a promotion code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a [promotion code](https://docs.stripe.com/api/promotion_codes), specify an existing `coupon` and any restrictions (for example, limiting it to a specific `customer`). If you have a specific code to give to your customer (for example, `FALL25OFF`), set the `code`. If you leave this field blank, we’ll generate a random `code` for you.\n\nThe `code` is case-insensitive and unique across active promotion codes for any customer. For example:\n\n*   You can create multiple customer-restricted promotion codes with the same `code`, but you can’t reuse that `code` for a promotion code redeemable by any customer.\n*   If you create a promotion code that is redeemable by any customer, you can’t create another active promotion code with the same `code`.\n*   You can create a promotion code with `code: NEWUSER`, inactivate it by passing `active: false`, and then create a new promotion code with `code: NEWUSER`.\n\nPromotion codes can be created in the coupons section of the [Dashboard](https://dashboard.stripe.com/coupons/create) or with the [API](https://docs.stripe.com/api#promotion_codes):\n\n`curl https://api.stripe.com/v1/promotion_codes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d coupon={{COUPON_ID}} \\   -d code=VIPCODE`\n\nEnable user-redeemable promotion codes using the [allow\\_promotion\\_codes](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-allow_promotion_codes) parameter in a Checkout Session. This enables a field in Checkout to allow users to input promotion codes.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d allow_promotion_codes=true \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nWith Promotion Code object parameters, you can customize eligible customers, redemptions, and other limits.\n\n### Limit by customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo limit a promotion to a particular customer, specify a `customer` when creating the promotion code. If no customer is specified, the code can be redeemed by any customer.\n\n### Limit by first-time order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also limit the promotion code to first-time customers with the `first_time_transaction` parameter of the `restrictions` attribute. If the `customer` isn’t defined, or if a defined `customer` has no prior payments or non-void [invoices](https://docs.stripe.com/api/invoices \"invoices\"), it’s considered a first-time transaction.\n\n#### Note\n\nSessions that don’t create [Customers](https://docs.stripe.com/api/customers) instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first-time customers are still accepted for these Sessions.\n\n### Set a minimum amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith promotion codes, you can set a minimum transaction amount for eligible discount by configuring the `minimum_amount` and the `minimum_amount_currency` properties. Since promotion code restrictions are checked at redemption time, the minimum transaction amount only applies to the initial payment for a subscription.\n\n### Customize expirations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set an expiration date on the promotion code using `expires_at`. If the underlying coupon already has `redeem_by` set, then the expiration date for the promotion code can’t be later than that of the coupon. If `promotion_code[expires_at]` isn’t specified, the coupon’s `redeem_by` automatically populates `expires_at`.\n\nFor example, you might have plans to support a coupon for a year, but you only want it to be redeemable for one week after a customer receives it. You would set `coupon[redeem_by]` to one year from now, and set each `promotion_code[expires_at]` to one week after it is created.\n\n### Limit redemptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can limit the number of redemptions by using `max_redemptions`, which works similarly to the coupon parameter. If the underlying coupon already has `max_redemptions` set, then the `max_redemptions` for the promotion code can’t be greater than that of the coupon.\n\nFor example, you might want a seasonal sale coupon to be redeemable by the first 50 customers, but the winter promotion can only use 20 of those redemptions. In this scenario, you would set `coupon[max_redemptions]: 50` and `promotion_code[max_redemptions]: 20`.\n\n### Inactive promotions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set whether a promotion code is currently redeemable by using the `active` parameter. However, if the underlying coupon for a promotion code becomes invalid, all of its promotion codes become permanently inactive. Similarly, if a promotion code reaches its `max_redemptions` or `expires_at`, it becomes permanently inactive. You can’t reactivate these promotion codes.\n\n### Deleting promotions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can delete promotions in the Dashboard or the API. Deleting a promotion prevents it from being applied to future transactions or customers.",
    "title": "Add discounts for one-time payments with Checkout | Stripe Documentation",
    "description": "Discounts in Checkout allow you to reduce the amount charged to a customer for one-time payments by discounting their subtotal with coupons and promotion codes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/cross-sells",
    "markdown": "# sells | Stripe DocumentationThe Stripe Docs logo\n\n## Cross-sells\n\n## Enable customers to purchase complementary products at checkout by using cross-sells.\n\n![Cross-sell product in Checkout](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-session.32236b96e980634a6c0060050eea5dbf.png)\n\nA cross-sell is a product that you can add to an order using Checkout.\n\nCross-sells enable customers to optionally purchase other related products using Checkout. Cross-sells can increase your average order value and revenue.\n\nFor Checkout to offer a product as a cross-sell, the product must meet the following criteria:\n\n*   The product must be associated with only a single [Price](https://docs.stripe.com/api/prices/object#price_object-product).\n*   The [currency](https://docs.stripe.com/api/prices/object#price_object-currency) of the cross-sell product’s price must match the currency of the other prices in the Checkout Session.\n*   If the cross-sell product’s price [type](https://docs.stripe.com/api/prices/object#price_object-type) is `recurring`, the Checkout Session must be in subscription mode and its recurring interval must match the recurring interval of the other prices in the Checkout Session.\n*   If you’re using [subscription upsells](https://docs.stripe.com/payments/checkout/upsells), cross-sells only support products with non-recurring prices. For example, you can cross-sell a one-time setup fee while also upselling a monthly subscription to annual billing.\n*   If you’re using [automatic taxes](https://docs.stripe.com/tax), cross-sells only support products with prices with specified [tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior). You can either [set tax behavior for a price](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) or set the default tax behavior for all prices under [Tax Settings](https://dashboard.stripe.com/test/settings/tax) in the Stripe Dashboard.\n\n## Create a cross-sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![Configure a cross-sell on the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/add-cross-sell.685564769c217a27f88b9ab9605d9c65.gif)\n\nConfigure a cross-sell on the Product detail page.\n\nYou can configure a cross-sell in the [Dashboard](https://dashboard.stripe.com/products?active=true) on the Product details page. Visit the Product details page for the product from which you want to cross-sell another complementary product. You’ll see a **Cross-sells** section with a dropdown menu containing your other Products. Select a Product with a single Price. After you configure it, all eligible Checkout Sessions cross-sell the product selected from the dropdown menu. For example, a customer purchasing a ‘Togethere Professional’ subscription would be cross-sold the ‘Professional Services: Deployment’ product.\n\n## Checkout experience ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn Checkout, buyers see an option to add the cross-sell to their purchase. If buyers add the cross-sell to the Checkout Session, they can also remove it. If they remove it, the option to add the cross-sell appears again.\n\n#### Note\n\nThe quantity of cross-sell line items cannot be adjusted. The current maximum is 1.\n\n![Customer preview of a cross-sell on the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-preview.cc9b1a4716015a18004f62de760cf29a.gif)\n\nCustomer preview.\n\n## Retrieve Checkout Session line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a customer adds a cross-sell, the `line_items` for the Checkout Session update to reflect the addition. When [fulfilling your order](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler) using the `checkout.session.completed` webhook, make sure to [retrieve the line items](https://docs.stripe.com/api/checkout/sessions/line_items).\n\n## Remove a cross-sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo remove a cross-sell, click the **x** next to it. After you remove it, the product won’t be offered to any new Checkout Sessions.\n\n![Remove a cross-sell from the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/remove-cross-sell.a08765b1278a8187c282964f89641b92.gif)\n\nRemove a cross-sell.",
    "title": "Cross-sells | Stripe Documentation",
    "description": "Enable customers to purchase complementary products at checkout by using cross-sells.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_sessions/object",
    "markdown": "# The Customer Session object | Stripe API Reference\n\n### Attributes\n\n*   The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.\n    \n    The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n*   This hash defines which component is enabled and the features it supports.\n    \n*   The Customer the Customer Session was created for.\n    \n*   The timestamp at which this Customer Session will expire.\n    \n\n### More attributes\n\nThe Customer Session object\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Create a Customer Session](https://docs.stripe.com/api/customer_sessions/create)\n\nCreates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.\n\n### Parameters\n\n*   Configuration for each component. Exactly 1 component must be enabled.\n    \n*   The ID of an existing customer for which to create the Customer Session.\n    \n\n### Returns\n\nReturns a Customer Session object.\n\nPOST /v1/customer\\_sessions\n\n```\ncurl https://api.stripe.com/v1/customer_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_PO34b57IOUb83c \\  -d \"components[pricing_table][enabled]\"=true\n```\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Customer Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/fulfillment",
    "markdown": "# Fulfill Checkout and Payment Link payments\n\n## Learn how to fulfill payments received with Checkout and Payment Links.\n\nWhen you receive a payment, you might need to take action to provide your customer with what they paid for. For example, you might need to grant them access to a service, or you might need to ship them physical goods. This process is known as fulfillment, and you have two ways to handle this process when using [Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") and [Payment Links](https://docs.stripe.com/payment-links \"Payment Links\"):\n\n*   **Manually**: You can manually fulfill orders using information that Stripe makes available to you. For example, you can monitor the [Dashboard](https://docs.stripe.com/dashboard/basics), check payment notification emails, or look at reports and then fulfill orders.\n*   **Automatically**: You can build an automated fulfillment system. Recommended\n\nThe first option works for low volume or experimental ventures, but for most situations we recommend automating fulfillment. The rest of this guide shows you how to build an automatic fulfillment system.\n\n## Automatic fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe automatic fulfillment system outlined below uses a combination of [webhooks](https://docs.stripe.com/webhooks \"webhook\") and a redirect to your website to trigger fulfillment. You must use webhooks to make sure fulfillment happens for every payment, and redirects let your customers access services or fulfillment details immediately after paying.\n\n#### Note\n\nPayment Links use Checkout, so all of the information below applies to both Payment Links and Checkout unless otherwise noted.\n\n[](#create-fulfillment-function)\n\nCreate a function on your server to fulfill Checkout payments. Webhooks trigger this function, and it’s called when customers are sent to your website after completing Checkout. This guide refers to this function as `fulfill_checkout`, but you can name the function whatever you wish.\n\nYour `fulfill_checkout` function must:\n\n1.  Correctly handle being called multiple times with the same Checkout Session ID.\n2.  Accept a [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\") ID as an argument.\n3.  Retrieve the Checkout Session from the API with the [line\\_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) property [expanded](https://docs.stripe.com/api/expanding_objects).\n4.  Check the [payment\\_status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status) property to determine if it requires fulfillment.\n5.  Perform fulfillment of the line items.\n6.  Record fulfillment status for the provided Checkout Session.\n\nUse the code below as a starting point for your `fulfill_checkout` function. The `TODO` comments indicate any functionality you must implement.\n\n#### Note\n\nThe code snippets below might name the `fulfill_checkout` function `fulfillCheckout` or `FulfillCheckout` depending on the language selected, but they all represent the same function.\n\n`def fulfill_checkout(session_id)   # Set your secret key. Remember to switch to your live secret key in production.   # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)   Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n  `puts \"Fullfilling Checkout Session #{session_id}\"    # TODO: Make this function safe to run multiple times,   # even concurrently, with the same session ID    # TODO: Make sure fulfillment hasn't already been   # peformed for this Checkout Session    # Retrieve the Checkout Session from the API with line_items expanded   checkout_session = Stripe::Checkout::Session.retrieve({     id: session_id,     expand: ['line_items'],   })    # Check the Checkout Session's payment_status property   # to determine if fulfillment should be peformed   if checkout_session.payment_status != 'unpaid'     # TODO: Perform fulfillment of the line items      # TODO: Record/save fulfillment status for this     # Checkout Session   end end`\n\n#### Note\n\nDepending on the payment methods you accept and your business needs, you might want to have your `fulfill_checkout` function do the following:\n\n*   Provision access to services.\n*   Trigger shipment of goods.\n*   Save a copy of the payment details and line items in your own database.\n*   Send the customer a custom receipt email if you don’t have [Stripe’s receipts](https://docs.stripe.com/receipts) enabled.\n*   Reconcile line items and quantities purchased if you allow customers to adjust quantities in Checkout.\n*   Update inventory or stock records.\n\n[\n\n## Create a payment event handler![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-event-handler)\n\nTo trigger fulfillment, create a webhook event handler to listen for payment events and trigger your `fulfill_checkout` function.\n\nWhen someone pays you with Checkout, it creates a `checkout.session.completed` event. Set up an endpoint on your server to accept, process, and confirm receipt of these events.\n\nSome payment methods aren’t instant, such as [ACH direct debit](https://docs.stripe.com/payments/ach-debit) and other bank transfers. Funds won’t be immediately available when Checkout completes. Delayed payment methods generate a `checkout.session.async_payment_succeeded` event when payment succeeds later.\n\n#### Note\n\nThe webhook secret (`whsec_...`) shown in the code below comes from either the Stripe CLI or your webhook endpoint. You can use the Stripe CLI for local testing, and Stripe uses a webhook endpoint to send events to your handler when it’s running on a server. See the next section for more details.\n\n`require 'sinatra'  # Use the secret provided by Stripe CLI for local testing # or your webhook endpoint's secret. endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    if event['type'] == 'checkout.session.completed' ||   event['type'] == 'checkout.session.async_payment_succeeded'     fulfill_checkout(event['data']['object']['id'])   end    status 200 end`\n\nYou might also want to listen for and handle `checkout.session.async_payment_failed` events. For example, you can send an email to your customer when a delayed payment fails.\n\n[\n\n## Test your event handler locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test-event-handler)\n\nThe quickest way to develop and test your webhook event handler is with the [Stripe CLI](https://docs.stripe.com/stripe-cli). If you don’t have the Stripe CLI, follow the [install guide](https://docs.stripe.com/stripe-cli#install) to get started.\n\nWhen the Stripe CLI is installed, you can test your event handler locally. Run your server (for example, on `localhost:4242`), then run the [stripe listen](https://docs.stripe.com/cli/listen) command to have the Stripe CLI forward events to your local server:\n\n`stripe listen --forward-to localhost:4242/webhook  Ready! Your webhook signing secret is 'whsec_<REDACTED>' (^C to quit)`\n\nAdd the webhook secret (`whsec_...`) to your event handling code, then test fulfillment by going through Checkout as a customer:\n\n*   Press the checkout button that takes you to Checkout, or visit your Payment Link\n*   Provide the following test data in Checkout:\n    *   Enter `4242 4242 4242 4242` as the card number\n    *   Enter any future date for card expiry\n    *   Enter any 3-digit number for CVV\n    *   Enter any billing postal code (`90210`)\n*   Press the **Pay** button\n\nWhen the payment completes, verify the following:\n\n*   On your command line, where `stripe listen` is running, it shows a `checkout.session.completed` event forwarded to your local server.\n*   Your server logs show the expected output from your `fulfill_checkout` function.\n\n[](#create-webhook-endpoint)\n\nAfter testing locally, get your webhook event handler up and running on your server. Next, [create a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) to send `checkout.session.completed` events to your server, then test the Checkout flow again.\n\n[\n\n## Configure a landing page URL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#configure-landing-page-url)\n\nConfigure Checkout to send your customer to a page on your website after they complete Checkout. Include the `{CHECKOUT_SESSION_ID}` placeholder in your page’s URL, which is replaced with the Checkout Session ID when your customer is redirected from Checkout.\n\n### Hosted Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Checkout Sessions with the default [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) of `hosted`, set the `success_url`.\n\n#### Note\n\nWhen you have a webhook endpoint set up to listen for `checkout.session.completed` events and you set a `success_url`, Checkout waits for your server to respond to the webhook event delivery before redirecting your customer. If you use this approach, make sure your server responds to `checkout.session.completed` events as quickly as possible.\n\n### Checkout with a non-default `ui_mode` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Checkout Sessions with [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) not set to `hosted`, set the `return_url`.\n\n### Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Payment Links you create with the API, set the [after\\_completion.redirect.url](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion-redirect-url).\n\nFor Payment Links you [create in the Dashboard](https://dashboard.stripe.com/payment-links/create):\n\n1.  Go to the **After Payment** tab.\n2.  Select **Don’t show confirmation page**.\n3.  Provide the URL to your landing page that includes the `{CHECKOUT_SESSION_ID}` placeholder (for example, `https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}`)\n\n[\n\n## Trigger fulfillment on your landing page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#trigger-fulfillment-on-landing-page)\n\n[Listening to webhooks](#create-payment-event-handler) is required to make sure you always trigger fulfillment for every payment, but webhooks can sometimes be delayed. To optimize your payment flow and guarantee immediate fulfillment when your customer is present, trigger fulfillment from your landing page as well.\n\nUse the Checkout Session ID from the URL you specified in the previous step to do the following:\n\n1.  When your server receives a request for your Checkout landing page, extract the Checkout Session ID from the URL.\n2.  Run your `fulfill_checkout` function with the ID provided.\n3.  Render the page after the fulfillment attempt is complete.\n\nWhen you render your landing page you can display the following:\n\n*   Details from the fulfillment process.\n*   Links or information about services the customer now has access to.\n*   Shipping or logistical details for physical goods.\n\n#### Webhooks are required\n\nYou can’t rely on triggering fulfillment only from your Checkout landing page, because your customers aren’t guaranteed to visit that page. For example, someone can pay successfully in Checkout and then lose their connection to the internet before your landing page loads.\n\n[Set up a webhook event handler](#create-payment-event-handler) to have Stripe send payment events directly to your server, bypassing the client entirely. Webhooks are the most reliable way to know when you get paid. If webhook event delivery fails, we [retry several times](https://docs.stripe.com/webhooks#retries).",
    "title": "Fulfill Checkout and Payment Link payments | Stripe Documentation",
    "description": "Learn how to fulfill payments received with Checkout and Payment Links.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links/object",
    "markdown": "# The Payment Link object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    The line items representing what is being sold.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The public URL that can be shared with customers.\n    \n\n### More attributes\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    inactive\\_messagenullable string\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_intent\\_datanullable object\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesnullable array of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    restrictionsnullable object\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscription\\_datanullable object\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Create a payment link](https://docs.stripe.com/api/payment_links/payment_links/create)\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```",
    "title": "The Payment Link object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links/update",
    "markdown": "# Update a payment link | Stripe API Reference\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a payment link | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-method-rules",
    "markdown": "# Payment method rules | Stripe DocumentationThe Stripe Docs logo\n\n## Control when payment methods are available to your buyers.\n\nPayment method rules allow you to set conditions on payment methods directly from the Dashboard without any custom logic or code. Rules allow you to:\n\n*   Hide or show a payment method if the order amount is over or under a certain amount\n*   Hide or show a payment method for buyers in certain countries or using certain currencies\n\n## Payment method rules considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNon-card payment methods can help offer improved unit economics compared to cards and they often drive higher AOV and conversion rates.\n\nWhen you turn on these payment methods, you might want to apply specific business logic to control when payment methods are available to your buyers. With payment method rules, you can apply these insights directly in Dashboard—no code required.\n\nPayment method rules is compatible with Stripe [A/B Testing](https://docs.stripe.com/payments/a-b-testing). This allows you to run A/B tests using the targeting criteria you select or test additional criteria. For example, you can test the impact of only showing a specific payment method when the price is greater than a certain dollar amount.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You must use either the Stripe [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout).\n*   You must use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable additional payment methods from the Stripe Dashboard, which won’t require any code changes.\n    *   To set up dynamic payment methods for direct users, see the [payment method integration](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) guide.\n    *   Connect To set up dynamic payment methods for Connect platforms, see [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n[](#set-rule-conditions)\n\n1.  In your Dashboard, go to [Payment methods settings](https://dashboard.stripe.com/test/settings/payment_methods).\n2.  In the payment method row, select **Create custom rules**.\n    \n    ![Klarna Row](https://b.stripecdn.com/docs-statics-srv/assets/pmt-klarna-row.931f50a1bd9a4d872657f0372dead2d8.png)\n    \n3.  Set custom rules (for example, a new minimum of 100 USD for Klarna), then select **Apply Overrides**. The configured payment method now has a **Customized** tag. A customized payment method appears only in Checkout or Payment Element sessions that meet its targeting criteria.\n\n![A checkout page showing Klarna.](https://b.stripecdn.com/docs-statics-srv/assets/pmt-checkout-klarna-present.fab9fed6ec4dfc1e187b38beb944fc65.png)\n\nBefore\n\n![A checkout page with Klarna hidden.](https://b.stripecdn.com/docs-statics-srv/assets/pmt-checkout-klarna-hidden.e1d585ab6318861be8aa813cdde91fb4.png)\n\nAfter",
    "title": "Payment method rules | Stripe Documentation",
    "description": "Control when payment methods are available to your buyers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-method-configurations",
    "markdown": "# Payment method configurations | Stripe DocumentationThe Stripe Docs logo\n\n## Create different sets of payment methods to display to customers based on specific checkout scenarios.\n\nPayment method configurations allows [dynamic payment method](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) users to display different sets of payment methods to customers for specific checkout scenarios.\n\nYou can create a configuration to:\n\n*   Display a unique set of payment methods for certain products\n*   Enable a set of payment methods for your one-time payment checkout flow and a different set of payment methods for your subscription checkout flow\n*   Connect Offer connected accounts access to additional payment methods for a different subscription fee\n\nAfter you create a payment method configuration, you can toggle each payment method on or off for a given scenario directly in Dashboard—no code required. Then at checkout, select which configuration you want to use. Stripe ranks the payment methods that are enabled within that configuration to optimize for conversion.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You must use either the Stripe [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout).\n*   You must use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable additional payment methods from the Stripe Dashboard, which won’t require any code changes.\n    *   To set up dynamic payment methods for direct users, see the [payment method integration](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) guide.\n    *   Connect To set up dynamic payment methods for Connect platforms, see [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n[](#create-payment-method-configuration)\n\nBy default, you have one payment method configuration called **Default Config**. You can create additional payment method configurations using both the Stripe Dashboard and the API.\n\n1.  In your Dashboard, go to [Payment methods settings](https://dashboard.stripe.com/test/settings/payment_methods).\n2.  In the **Configuration Management** section, click the overflow menu (), then select **Create a configuration**.\n3.  Give your new configuration a name.\n4.  Click **Save configuration**.\n\n![Payment method configuration page](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-configurations.a766550ad4dd95854a7a9b9f178e1d45.png)\n\nThe page displays your new configuration. All payment methods are initially disabled by default.\n\nTo switch between configurations, use the **Select configuration** dropdown near the top of the page.\n\n[](#enable-payment-methods)\n\nIn the Dashboard, open the configuration and turn on the payment methods that you want to make available to buyers when using that configuration. A buyer sees only payment methods that are turned on and compatible with the payment location and currency.\n\n#### Note\n\nSome payment methods don’t show edit controls until you expand them.\n\n[](#section-4)\n\nCopy the `configuration ID` in the Dashboard from the configuration you want to use in your checkout flow.\n\nIf you’re using the [deferred intent creation integration path](https://docs.stripe.com/payments/accept-a-payment-deferred), pass the `payment_method_configuration` ID when you create your Payment Element component. The Payment Element automatically pulls the payment methods associated with that configuration and ranks them to best convert buyers.\n\n`const options = {    mode: 'payment',    amount: 1099,    currency: 'usd',    payment_method_configuration: 'pmc_234' }`\n\nIf you aren’t using a Payment Element, pass the `payment_method_configuration` ID when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d currency=usd \\  -d payment_method_configuration=pmc_234`\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#create-payment-intent)\n\nCreate a PaymentIntent on your server using the payment method configuration.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d payment_method_configuration=pmc_123`\n\nIn the latest version of the API, the `automatic_payment_methods` parameter is optional because it’s enabled by default.",
    "title": "Payment method configurations | Stripe Documentation",
    "description": "Create different sets of payment methods to display to customers based on specific checkout scenarios.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/pmd-registration",
    "markdown": "# Register domains for payment methods\n\n## Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.\n\nTo use certain payment methods with [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") or [Checkout’s embeddable payment form](https://docs.stripe.com/payments/checkout/how-checkout-works?payment-ui=embedded-form), you must register every web domain that will show the payment method. This includes registering top-level domains and subdomains. For example, if you have the domain **yourdomain.com** and subdomains like **shop.yourdomain.com** and **www.yourdomain.com**, this guide explains how to register them.\n\nAfter you register a domain, that domain is ready for use with other payment methods that you might enable in the future.\n\nThe following payment methods require registration:\n\n*   Google Pay\n*   Link\n*   PayPal\n*   Apple Pay (additional verification step required)\n\n#### Apple Pay and merchant validation\n\nThe Apple Pay documentation describes their process of “merchant validation,\" which Stripe handles for you behind the scenes. You don’t need to create an Apple Merchant ID or CSR. Instead, follow the steps in this guide.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also need to register domains for testing. When testing locally, you can use a tool such as [ngrok](https://ngrok.com/) to get an HTTPS domain. You can either register in test mode, or register in live mode and the domain will also be registered in test mode automatically. Remember to register your domains in live mode before going live.\n\nYou can create and manage domains in the Dashboard on the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains) for use in production and testing.\n\n#### Using Connect\n\nConnect platforms that create direct charges must use the API to manage domains for their [connected accounts](#register-a-domain-using-connect), not the Stripe Dashboard.\n\n## Register your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo register a domain:\n\n1.  On the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains), click **Add a new domain**.\n2.  Enter your domain name.\n3.  Click **Save and continue**.\n4.  If you’re setting up Apple Pay, verify ownership of your domain with Apple by following the steps described later on this page.\n5.  (Optional) Repeat steps 1-4 for additional domains that you need to register.\n\nAfter completing these steps, your domain shows up on the Payment method domains page.\n\n### Using an iframe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When using an iframe, its origin must match the top-level origin, except in Safari 17+. Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n*   When using a cross-origin iframe in Safari 17+ you must specify the `allow=“payment”` attribute. To enable Apple Pay, you must also register the source domain that the iframe loads.\n\n## Verify ownership of your domain with Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring registration, Stripe automatically attempts to verify ownership of your domain with Apple. If the domain isn’t already verified, register your domain and then follow these steps to verify your registered domain with Apple Pay.\n\n#### Common mistake\n\nApple attempts to request your domain association file, so it needs to be publicly available to [Apple’s servers](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server#3179116).\n\n1.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n2.  Host the file at `/.well-known/apple-developer-merchantid-domain-association`. For example, if you register `https://yourdomain.com`, make that file available at `https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association`.\n3.  Click **Verify**.\n\n## Manage your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see a list of all of your domains in the Dashboard.\n\nTo disable a domain, click the row action and then click **Disable**. If a domain is disabled, the payment methods no longer appear in Elements or Checkout’s embeddable payment form on that domain.\n\nTo enable a disabled domain, click the row action and then click **Enable**.\n\n## Register your domain while using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms must register all domains where Elements or Checkout’s embeddable payment form displays the payment methods listed above. The domain where the charge is being run needs to be registered for the user running the charge.\n\nIf the platform creates [direct charges](https://docs.stripe.com/connect/direct-charges), use your platform’s secret key to authenticate the request and set the Stripe-Account header to your connected account’s Stripe ID.\n\nIf the platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), use your platform’s secret key to authenticate the request and omit the Stripe-Account header.\n\nLearn more about [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication).\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d domain_name=\"example.com\"`",
    "title": "Register domains for payment methods | Stripe Documentation",
    "description": "Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/cards",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Cards\n\n## Learn more about accepting card payments with Stripe.\n\nCards are linked to a debit or credit account at a bank. To complete a payment online, customers enter their card information at checkout. [Cards are enabled](https://docs.stripe.com/payments/payment-methods/integration-options#low-code) by default and are supported by all Stripe products. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n## The payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer initiates a card payment at checkout by entering their credit card information. Depending on their card network and country location, customers have some card functionalities like additional security verification steps.\n\n![A flowchart showing the three required and one optional step for a customer to pay with card.](https://b.stripecdn.com/docs-statics-srv/assets/pay-with-card.059eb99f8cad148c1aea3bb2a29b8284.svg)\n\nCards can act as the funding source for other Stripe payment products and methods like [Link](https://docs.stripe.com/payments/link) and [wallets](https://docs.stripe.com/payments/wallets). For instance, customers can leverage Link to save their card payment data for fast checkout with any merchant that has Link enabled.\n\nWith wallets, customers can store their card details in a [digital wallet](https://docs.stripe.com/payments/payment-methods \"digital wallet\"). From your end, their payment method is managed using a `wallet`, but for the customer, the transaction shows up in their card history as a charge from their digital wallet provider.\n\n## Supported card brands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports several card brands, from large global networks like Visa and Mastercard to local networks like Cartes Bancaires in France or Interac in Canada. When you integrate Stripe, you can begin accepting a diversity of card brands without any additional configurations, including:\n\n*   American Express\n*   China UnionPay (CUP)\n*   Discover & Diners Club\n*   eftpos Australia\n*   Japan Credit Bureau (JCB)\n*   Mastercard\n*   Visa\n\nSome card brands require additional configuration, such as [Cartes Bancaires](https://docs.stripe.com/payments/cartes-bancaires) and [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments).\n\n### Online card brand capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table describes some of the different features and restrictions of each card brand online, including limitations on countries where Stripe users can accept the brand (Stripe Account Country), countries where most cardholders of the brand are located (Customer Country) and support for key features like 3D Secure Authentication, and [Wallets](https://docs.stripe.com/payments/wallets) (like Apple Pay and Google Pay).\n\n#### Note\n\nStripe supports processing payments in [135+ currencies](https://docs.stripe.com/currencies), but some card brand networks have limitations on [supported currencies](https://docs.stripe.com/currencies#presentment-currencies) that charges can be made with.\n\n| Card Brand | Stripe Account Country | Customer Country | 3D Secure Authentication | Wallets |\n| --- | --- | --- | --- | --- |\n| **Visa** | All countries | Global |     |     |\n| **Mastercard** | All countries | Global |     |     |\n| **American Express** | All countries except Brazil, Malaysia, Thailand, and the United Arab Emirates | Global, except India1 |     |     |\n| **Discover & Diners Club** | Canada, Japan, United Kingdom, United States, and the following European Economic Area countries: Austria, Belgium, Cyprus, Denmark, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Slovakia, Slovenia, Spain, Sweden, and Switzerland | Global |     |     |\n| **China UnionPay** | Australia, Canada, Hong Kong, Malaysia, New Zealand, Singapore, United Kingdom, United States, Switzerland, and all countries in the European Economic Area except Croatia, Iceland, and Lichtenstein | Global |     | Not supported |\n| **Japan Credit Bureau (JCB)** | Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland | Global | Hong Kong, Japan, Singapore, Switzerland, United Kingdom, and all countries in the European Economic Area except Iceland |     |\n| **Cartes Bancaires** | All countries in the [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) region | France |     | Not supported |\n| **eftpos** | Australia | Australia | Not supported, payments will be routed to the co-brand network | Not supported |\n\n### Exclude card brands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can disallow the use of specific card brands in the following ways:\n\n*   If you use Stripe Radar, [set up a rule](https://docs.stripe.com/radar/rules) to reject the desired brands.\n*   Add custom client-side code that checks the [brand](https://docs.stripe.com/api/cards/object#card_object-brand) of a card.\n*   Use the Payment Element to [filter cards by brand](https://docs.stripe.com/payments/customize-payment-methods#filter-card-brands).\n\n## Geographic considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe, along with other platforms, offer a solid infrastructure that handles secure payments and complies with specific regulations from different regions. This becomes particularly important with the roll-out of Strong Customer Authentication (SCA) rules in regulated markets like Europe and India, wherein additional verification steps are usually necessary.\n\nIt’s essential to ensure your Stripe integration is lined up with SCA rules and 3D Secure (3DS) criteria. Moreover, adjusting your approach to suit regional nuances—like installment payments and card brand preferences—is vital for seamless, compliant, and user-centered transactions.\n\n### SCA and 3D Secure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome banks, especially in regulated regions like Europe and India, might prompt the customer to authenticate a purchase (for example, by texting the customer a code to enter on the bank’s website). This authentication step is part of [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) Requirements. Making sure that your integration meets SCA requirements for 3DS can sometimes require extra steps.\n\n[SCA](https://docs.stripe.com/strong-customer-authentication), a rule in effect as of September 14, 2019, as part of PSD2 regulation in Europe, requires changes to how your European customers authenticate online payments. Card payments require a different user experience, namely [3DS](https://docs.stripe.com/payments/3d-secure), to meet SCA requirements.\n\nStripe supports 3DS by default in Stripe Checkout, Payment Links, and a Hosted Invoice Page. You can configure your integration to use 3DS with Subscriptions and [Connect](https://docs.stripe.com/connect \"Connect\") with the following:\n\n*   [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\")\n*   [Setup Intents API](https://docs.stripe.com/api/setup_intents \"Setup Intents API\")\n*   Elements\n*   Mobile SDKs\n\n### Installments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome regions have card brands that support installment payments - which are managed by the card issuer and not by creating Subscriptions or using SetupIntents with Stripe.\n\nIf you want to create recurring payments and your region or card network doesn’t support [Messes sin interesses](https://docs.stripe.com/payments/mx-installments) or Installments in Brazil, see how to [set up future payments](https://docs.stripe.com/payments/save-and-reuse) or [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\n### Card brand choice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe European Union requires businesses to allow their customers the option to pick which card brand processes their transaction because cards in the EU might have both a local network, like Cartes Bancaires, and an affiliated card network, like Visa or Mastercard. You can enable this choice using Elements or Payments APIs so that [customers can choose which card brand](https://docs.stripe.com/co-badged-cards-compliance) processes their payment.\n\n### Accept card payments in India ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Reserve Bank of India (RBI) has specific regulations for online transactions that apply to Stripe accounts in India. Stripe Support includes a consolidated list of important resources, for many payment methods in the [India FAQs](https://support.stripe.com/questions/india-faq).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Integrate card payment methods](https://docs.stripe.com/payments/payment-methods/integration-options)\n*   [Understand card updates and change default payment methods](https://docs.stripe.com/payments/cards/overview#card-updates)\n*   [Customize the way PaymentElements handle cards](https://docs.stripe.com/payments/customize-payment-methods)",
    "title": "Cards | Stripe Documentation",
    "description": "Learn more about accepting card payments with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sources/credit-transfers",
    "markdown": "# Credit transfers (Sources) | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank transfers with Stripe.\n\n#### Warning\n\nBank transfers let customers send money to you directly from their bank account. Bank transfers are often used by:\n\n*   Software or services businesses accepting large, one-off payments from other businesses.\n*   Businesses that want a low-cost alternative to cards for large one-time consumer payments, like car or auction purchases.\n\nBank transfers might not be a good fit for your business if:\n\n*   You accept many low value transactions. Customers have to initiate bank transfers through their bank account, and can send the wrong amount.\n*   You need payments to be completed at a specific time. It might take a customer hours or even days to send payment through their bank and bank transfers have varying speeds by market\n*   You frequently send refunds. Most bank transfer methods don’t support refunds directly. To refund a transaction, Stripe contacts the customer to find the best way to refund them. The customer might not always respond.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, you instruct the customer to send funds to an account number provided by Stripe (known as a “virtual account number”). The customer initiates the transfer from their bank’s site, app, ATM, or in-person branch.\n\n![Figure describing the four step payment flow. First, customer elects pay by bank transfer. Next, they receive a virtual bank account number created by Stripe. Then, they send payment through their bank to the virtual account number. Finally, they are notified payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.eb89dee4d8cf3a2bd038b6c790fd0cf4.svg)\n\nSome bank transfer methods let you control the amount the customer sends, or reuse virtual account numbers.\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Subscriptions | Payment Element | Payment Links | Mobile Payment Element |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Multibanco (beta)](https://docs.stripe.com/sources/multibanco) | Portugal |     |     |     |     |     |     |     |     |\n\n## Additional bank transfer methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe is expanding support for bank transfers to the PaymentIntents API, including automatic reconciliation and refunds. You can read more on [Bank Transfer Payments](https://docs.stripe.com/payments/bank-transfers).\n\n*   JPY bank transfers in Japan\n*   GBP bank transfers in the UK\n*   EUR bank transfers in SEPA countries\n*   MXN bank transfers in Mexico\n*   USD bank transfers in the US\n\nPlease [contact us](https://support.stripe.com/contact) if you’re interested in joining one of these betas or would like to request another bank transfer method.",
    "title": "Credit transfers (Sources) | Stripe Documentation",
    "description": "Learn about bank transfers with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/local-markets/korea",
    "markdown": "# Korean payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Korean payment methodsBeta\n\n## Accept wallets and all local cards in South Korea without a local entity.\n\nYou can localize your customer experience and accept payments from the majority of payment methods available in Korea without a local Korean entity by using Stripe and our local processor partner.\n\nCard usage is popular in Korea, with many different card issuers but not a single predominant brand. Customers typically pay by selecting their card issuer and authenticating through their card or bank’s app rather than manually entering their card details. Wallets are also becoming more popular in Korea. To provide a familiar experience to customers and increase conversion rates, offer a selection of local wallets and cards.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers who pay with a local card are redirected to the local processor to select their issuer. In this demo, the customer is paying with their Shinhan card.\n\nAfter the customer enters their information in Stripe’s checkout page and clicks **Pay**, they’re redirected to the checkout page of the payment method provider or local processor to complete the payment.\n\n## Available payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can accept popular local wallets and all local cards.\n\nPopular local wallets include:\n\n*   [Naver Pay](https://pay.naver.com/)\n*   [Kakao Pay](https://www.kakaopay.com/)\n*   [Samsung Pay](https://www.samsung.com/us/apps/samsung-wallet/)\n*   [PayCo](https://www.payco.com/)\n\nAll locally issued cards are supported, including:\n\n*   [Shinhan Card](https://www.shinhancard.com/)\n*   [Hyundai Card](https://www.hyundaicard.com/)\n*   [Samsung Card](https://www.samsungcard.com/company/english/main/UHPPCI0245M0.jsp)\n\n#### Caution\n\nMake sure that in providing goods and services to Korean customers, your business complies with Korean legal and tax requirements. Use Stripe Tax to [collect tax in Korea](https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea).\n\n*   **Customer locations**\n    \n    Korea\n    \n*   **Presentment currency**\n    \n    KRW\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Local markets\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Korean payment methods and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Korean payment methods. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Korean payment methods from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\n### Integrate through the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) to accept payments from Korean customers using local cards and local payment methods. Follow our guide to [test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow](https://docs.stripe.com/testing?testing-method=payment-methods#redirects).\n\n## Payment process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers who elect to pay with Korean cards or payment methods are redirected to the local processor or underlying payment method provider’s checkout page as applicable, where they [authorize the transaction](https://docs.stripe.com/payments/payment-methods#customer-actions). After the payment is approved, funds are available in your Stripe account after 4 days.\n\nWe currently support the all local Korean cards and the majority of Korean payment methods\n\n## Installments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLocal card issuers in Korea may offer installments on purchases 50,000 KRW and above. This enables customers to pay for their purchase over time, for example, to complete the payment over 3 months. Installments are popular with customers who want to purchase goods with higher order values.\n\nInstallments are solely between customers and their card issuers. As a business, you receive the full amount for your purchase up front, and your customer is responsible for completing the installment payments to the issuer. In the event that your customer is unable to complete their installments to their issuer, you keep the funds.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Korean payment methods can only be submitted for refund within 365 calendar days from the date of the original charge. After 365 days, it’s no longer possible to refund the charge.\n\n## Fraud and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLocal cards and payment methods in Korea enforce strong authentication, which helps reduce the risk of fraud or unrecognized payments. Customers have up to 365 calendar days from the date of purchase to file a dispute. Stripe may request you to provide information and documentation in cases of customer disputes. After a customer files a dispute, you have up to 5 days to submit evidence upon notification. Make sure you comply promptly with these requests. When using Korean payment methods, you must make a reasonable effort to detect fraud or unauthorized transactions, and to minimize disputes.",
    "title": "Korean payment methods | Stripe Documentation",
    "description": "Accept wallets and all local cards in South Korea without a local entity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/real-time",
    "markdown": "# Real-time payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about real-time payments with Stripe.\n\nReal-time payment methods let customers directly transfer money from their bank account or alternate funding source using an authenticating intermediary, like a phone number. Because this payment method type increases transaction speeds, it can improve conversion rates. Stripe supports real-time payments in Brazil, Singapore, Thailand, Sweden, and India.\n\n## Payment process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe real-time payment method process is as follows:\n\n1.  Stripe sends the customer an identifier that lists the payable amount.\n2.  The customer makes the payment through their application or third-party service.\n3.  The application or third-party service communicates with the customers bank to secure the funds.\n\nWhen a customer uses a real-time payment method, their statement lists the application or third-party service as the payment type.\n\n## Product and country support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table lists what products and which countries support each real-time payment method:\n\n| Payment method | Customer country | Payment Intents | Checkout | Connect | Invoicing | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- |\n| [Pix](https://docs.stripe.com/payments/pix) | Brazil |     |     |     |     |     |\n| [Pay by Bank](https://docs.stripe.com/payments/pay-by-bank) | United Kingdom |     |     |     |     |     |\n| [PayNow](https://docs.stripe.com/payments/paynow) | Singapore |     |     |     | \\*  | \\*  |\n| [PromptPay](https://docs.stripe.com/payments/promptpay) | Thailand |     |     |     | \\*  | \\*  |\n| [Swish](https://docs.stripe.com/payments/swish) | Sweden |     |     |     |     |     |\n| UPI | India |     |     |     |     |     |\n\n\\* Invoices and subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).",
    "title": "Real-time payments | Stripe Documentation",
    "description": "Learn about real-time payments with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments",
    "markdown": "# Scheduled payments | Stripe DocumentationThe Stripe Docs logo\n\n## Let your customers schedule their payments through the Hosted Invoice Page.\n\nStripe offers flexibility by enabling your customers to schedule payments for a future date through the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). The scheduled payments feature lets your customers take action immediately so that they won’t forget to pay. Your customers can also go back to the Hosted Invoice Page at any time and update their payment method and or scheduled date.\n\n#### Note\n\nThe scheduled payments feature is currently only available in the US.\n\n![Allow your customer to schedule their payments](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-web-mobile.0729fa213232ddd1c6470c88d9ad661b.png)\n\nAllow your customers to schedule their payments\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice), you can enable or disable scheduled payments for all invoices, including those that are outstanding. You can’t leverage the Stripe API to toggle the scheduled payments feature, or receive webhooks when an end merchant schedules a payment.\n\n![Turn on the scheduled payments feature for your customers](https://b.stripecdn.com/docs-statics-srv/assets/settings-scheduled-payments.313042ca8b7e49ee4fa08a0c3c50b8cf.png)\n\nTurn on the scheduled payments feature for your customers\n\nIf your customer chooses to schedule their payment, the invoice appears on your [Invoices page](https://dashboard.stripe.com/test/invoices) under **Scheduled**. A badge also appears next to the invoice that indicates the invoice’s scheduled status. Hovering over the badge tells you the invoice’s scheduled and estimated delivery dates.\n\n## End customer features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn end customer that receives a Stripe invoice and pays it through the Hosted Invoice Page can:\n\n*   Choose whether to initiate payment now, or on a future date.\n*   See the invoice due date using the calendar popup.\n*   Know the estimated date a payment will reach your account.\n*   Be warned if the payment delivery is past the due date.\n*   Cancel or edit the scheduled payment before the due date.\n\n#### Note\n\nYour customers can still choose to schedule payments past the due date.\n\n![A past due payment delivery](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-past-due.a868bc3e45e003425cf46cdf2711342b.png)\n\nA past due payment delivery\n\n## Email notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends email notifications to your customers when a payment has been scheduled, and 3 days before the payment initiates (to make sure that they have enough funds). Both emails contain a link to the Hosted Invoice Page for reference.\n\n#### Note\n\nIf a customer doesn’t have an associated email, they won’t receive payment reminders.\n\nAfter Stripe initiates the payment, the customer receives an email receipt. You can also configure Stripe to send email notifications upon failed payment attempts, or if your customer’s card on file is about to expire. To learn more, see [Send email reminders](https://docs.stripe.com/invoicing/send-email).\n\n![Invoicing email notifications](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-reminder.69e7aefd8919ce80950bca3727ebfe46.png)\n\nInvoicing email notifications\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customer faces certain limitations when they use the scheduled payments feature.\n\n### Collection method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   The scheduled payments feature is supported only when [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) is set to `send_invoice`.\n\n### Payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Only credit cards are supported.\n    \n*   Apple and Google Pay aren’t supported.\n    \n*   International cards might be declined due to regulatory requirements for step-up authentication (3DS). (We email the customer in these instances.)\n    \n\n### Invoice due dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   The scheduled payments feature isn’t available if the invoice is due the same day, next day, or is already past due.\n    \n*   You can’t schedule a payment that’s 60 days or more out from the current date. For example, you can’t schedule a payment for February 21, 2022, if the current date is December 23, 2021.",
    "title": "Scheduled payments | Stripe Documentation",
    "description": "Let your customers schedule their payments through the Hosted Invoice Page.",
    "languageCode": "en-US"
  }
]