TypedArray` species is the `MyTypedArray` constructor. However, you might want to overwrite this, in order to return a parent [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) object in your derived class methods:\n\n```\nclass MyTypedArray extends Uint8Array {\n  // Overwrite MyTypedArray species to the parent Uint8Array constructor\n  static get [Symbol.species]() {\n    return Uint8Array;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-%typedarray%-@@species](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-get-%typedarray%-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray[@@species] - JavaScript | MDN",
  "description": "The TypedArray[@@species] static accessor property returns the constructor used to construct return values from typed array methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin",
  "markdown": "# TypedArray.prototype.copyWithin() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`copyWithin()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as [`Array.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncopyWithin(target, start)\ncopyWithin(target, start, end)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nZero-based index at which to copy the sequence to, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). This corresponds to where the element at `start` will be copied to, and all elements between `start` and `end` are copied to succeeding indices.\n\n[`start`](#start)\n\nZero-based index at which to start copying elements from, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n[`end`](#end) Optional\n\nZero-based index at which to end copying elements from, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `copyWithin()` copies up to but not including `end`.\n\n### [Return value](#return_value)\n\nThe modified typed array.\n\n## [Description](#description)\n\nSee [`Array.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using copyWithin()](#using_copywithin)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\nuint8.set([1, 2, 3]);\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\nuint8.copyWithin(3, 0, 3);\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 1, 2, 3, 0, 0 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.copywithin](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.copywithin) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.copyWithin() - JavaScript | MDN",
  "description": "The copyWithin() method of TypedArray instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as Array.prototype.copyWithin().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every",
  "markdown": "# TypedArray.prototype.every() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`every()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nevery(callbackFn)\nevery(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `every()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n`true` unless `callbackFn` returns a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value for a typed array element, in which case `false` is immediately returned.\n\n## [Description](#description)\n\nSee [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Testing size of all typed array elements](#testing_size_of_all_typed_array_elements)\n\nThe following example tests whether all elements in the typed array are 10 or bigger.\n\n```\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\nnew Uint8Array([12, 5, 8, 130, 44]).every(isBigEnough); // false\nnew Uint8Array([12, 54, 18, 130, 44]).every(isBigEnough); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.every](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.every) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.every() - JavaScript | MDN",
  "description": "The every() method of TypedArray instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as Array.prototype.every().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at",
  "markdown": "# TypedArray.prototype.at() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`at()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as [`Array.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nZero-based index of the typed array element to be returned, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). Negative index counts back from the end of the typed array — if `index < 0`, `index + array.length` is accessed.\n\n### [Return value](#return_value)\n\nThe element in the typed array matching the given index. Always returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if `index < -array.length` or `index >= array.length` without attempting to access the corresponding property.\n\n## [Description](#description)\n\nSee [`Array.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Return the last value of a typed array](#return_the_last_value_of_a_typed_array)\n\nThe following example provides a function which returns the last element found in a specified array.\n\n```\nconst uint8 = new Uint8Array([1, 2, 4, 7, 11, 18]);\n\n// A function which returns the last item of a given array\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\nconst lastItem = returnLast(uint8);\nconsole.log(lastItem); // 18\n```\n\n### [Comparing methods](#comparing_methods)\n\nHere we compare different ways to select the penultimate (last but one) item of a [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray). Whilst all below methods are valid, it highlights the succinctness and readability of the `at()` method.\n\n```\n// Our typed array with values\nconst uint8 = new Uint8Array([1, 2, 4, 7, 11, 18]);\n\n// Using length property\nconst lengthWay = uint8[uint8.length - 2];\nconsole.log(lengthWay); // 11\n\n// Using slice() method. Note an array is returned\nconst sliceWay = uint8.slice(-2, -1);\nconsole.log(sliceWay[0]); // 11\n\n// Using at() method\nconst atWay = uint8.at(-2);\nconsole.log(atWay); // 11\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.at](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.at) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.at() - JavaScript | MDN",
  "description": "The at() method of TypedArray instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as Array.prototype.at().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill",
  "markdown": "# TypedArray.prototype.fill() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`fill()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as [`Array.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfill(value)\nfill(value, start)\nfill(value, start, end)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nValue to fill the typed array with.\n\n[`start`](#start) Optional\n\nZero-based index at which to start filling, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n[`end`](#end) Optional\n\nZero-based index at which to end filling, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `fill()` fills up to but not including `end`.\n\n### [Return value](#return_value)\n\nThe modified typed array, filled with `value`.\n\n## [Description](#description)\n\nSee [`Array.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using fill()](#using_fill)\n\n```\nnew Uint8Array([1, 2, 3]).fill(4); // Uint8Array [4, 4, 4]\nnew Uint8Array([1, 2, 3]).fill(4, 1); // Uint8Array [1, 4, 4]\nnew Uint8Array([1, 2, 3]).fill(4, 1, 2); // Uint8Array [1, 4, 3]\nnew Uint8Array([1, 2, 3]).fill(4, 1, 1); // Uint8Array [1, 2, 3]\nnew Uint8Array([1, 2, 3]).fill(4, -3, -2); // Uint8Array [4, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.fill](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.fill) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.fill() - JavaScript | MDN",
  "description": "The fill() method of TypedArray instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as Array.prototype.fill().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries",
  "markdown": "# TypedArray.prototype.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`entries()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as [`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nSee [`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\n```\nconst array = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrayEntries = arr.entries();\nfor (const element of arrayEntries) {\n  console.log(element);\n}\n```\n\n### [Alternative iteration](#alternative_iteration)\n\n```\nconst array = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrayEntries = arr.entries();\n\nconsole.log(arrayEntries.next().value); // [0, 10]\nconsole.log(arrayEntries.next().value); // [1, 20]\nconsole.log(arrayEntries.next().value); // [2, 30]\nconsole.log(arrayEntries.next().value); // [3, 40]\nconsole.log(arrayEntries.next().value); // [4, 50]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.entries](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.entries() - JavaScript | MDN",
  "description": "The entries() method of TypedArray instances returns a new array iterator object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as Array.prototype.entries().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter",
  "markdown": "# TypedArray.prototype.filter() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`filter()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to keep the element in the resulting typed array, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `filter()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nA copy of the given typed array containing just the elements that pass the test. If no elements pass the test, an empty typed array is returned.\n\n## [Description](#description)\n\nSee [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Filtering out all small values](#filtering_out_all_small_values)\n\nThe following example uses `filter()` to create a filtered typed array that has all elements with values less than 10 removed.\n\n```\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\nnew Uint8Array([12, 5, 8, 130, 44]).filter(isBigEnough);\n// Uint8Array [ 12, 130, 44 ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.filter](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.filter) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.filter() - JavaScript | MDN",
  "description": "The filter() method of TypedArray instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find",
  "markdown": "# TypedArray.prototype.find() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`find()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned. This method has the same algorithm as [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfind(callbackFn)\nfind(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `find()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe first element in the typed array that satisfies the provided testing function. Otherwise, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n## [Description](#description)\n\nSee [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Find a prime number in a typed array](#find_a_prime_number_in_a_typed_array)\n\nThe following example finds an element in the typed array that is a prime number (or returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no prime number).\n\n```\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconst uint8 = new Uint8Array([4, 5, 8, 12]);\nconsole.log(uint8.find(isPrime)); // 5\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.find](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.find) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.find() - JavaScript | MDN",
  "description": "The find() method of TypedArray instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.find().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex",
  "markdown": "# TypedArray.prototype.findLastIndex() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`findLastIndex()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as [`Array.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindLastIndex(callbackFn)\nfindLastIndex(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `findLastIndex()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe index of the last (highest-index) element in the typed array that passes the test. Otherwise `-1` if no matching element is found.\n\n## [Description](#description)\n\nSee [`Array.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Find the index of the last prime number in a typed array](#find_the_index_of_the_last_prime_number_in_a_typed_array)\n\nThe following example returns the index of the last element in the typed array that is a prime number, or `-1` if there is no prime number.\n\n```\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet uint8 = new Uint8Array([4, 6, 8, 12]);\nconsole.log(uint8.findLastIndex(isPrime));\n// -1 (no primes in array)\nuint8 = new Uint8Array([4, 5, 7, 8, 9, 11, 12]);\nconsole.log(uint8.findLastIndex(isPrime));\n// 5\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.findlastindex](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.findlastindex) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.findLastIndex() - JavaScript | MDN",
  "description": "The findLastIndex() method of TypedArray instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findLastIndex().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLast",
  "markdown": "# TypedArray.prototype.findLast() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2022\n\nNewly available\n\nThe **`findLast()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned. This method has the same algorithm as [`Array.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindLast(callbackFn)\nfindLast(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `findLast()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe last (highest-index) element in the typed array that satisfies the provided testing function; [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if no matching element is found.\n\n## [Description](#description)\n\nSee [`Array.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Find the last prime number in a typed array](#find_the_last_prime_number_in_a_typed_array)\n\nThe following example returns the value of the last element in the typed array that is a prime number, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no prime number.\n\n```\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet uint8 = new Uint8Array([4, 6, 8, 12]);\nconsole.log(uint8.findLast(isPrime)); // undefined (no primes in array)\nuint8 = new Uint8Array([4, 5, 7, 8, 9, 11, 12]);\nconsole.log(uint8.findLast(isPrime)); // 11\n```\n\n### [All elements are visited and may be modified by the callback](#all_elements_are_visited_and_may_be_modified_by_the_callback)\n\nThe following examples show that all elements _are_ visited, and that the value passed to the callback is their value when visited:\n\n```\n// Declare array with no elements at indexes 2, 3, and 4\n// The missing elements will be initialized to zero.\nconst uint8 = new Uint8Array([0, 1, , , , 5, 6]);\n\n// Iterate through the elements in reverse order.\n// Note that all elements are visited.\nuint8.findLast((value, index) => {\n  console.log(`Visited index ${index} with value ${value}`);\n});\n\n// Shows all indexes, including deleted\nuint8.findLast((value, index) => {\n  // Modify element 3 on first iteration\n  if (index === 6) {\n    console.log(\"Set uint8[3] to 44\");\n    uint8[3] = 44;\n  }\n  // Element 3 is still visited but will have a new value.\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value 0\n// Visited index 3 with value 0\n// Visited index 2 with value 0\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n// Set uint8[3] to 44\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value 0\n// Visited index 3 with value 44\n// Visited index 2 with value 0\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.findlast](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.findlast) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.findLast() - JavaScript | MDN",
  "description": "The findLast() method of TypedArray instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned. This method has the same algorithm as Array.prototype.findLast().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex",
  "markdown": "# TypedArray.prototype.findIndex() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`findIndex()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as [`Array.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfindIndex(callbackFn)\nfindIndex(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `findIndex()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nThe index of the first element in the typed array that passes the test. Otherwise, `-1`.\n\n## [Description](#description)\n\nSee [`Array.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Find the index of a prime number in a typed array](#find_the_index_of_a_prime_number_in_a_typed_array)\n\nThe following example finds the index of an element in the typed array that is a prime number (or returns `-1` if there is no prime number).\n\n```\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconst uint8 = new Uint8Array([4, 6, 8, 12]);\nconst uint16 = new Uint16Array([4, 6, 7, 12]);\n\nconsole.log(uint8.findIndex(isPrime)); // -1, not found\nconsole.log(uint16.findIndex(isPrime)); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.findindex](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.findindex) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.findIndex() - JavaScript | MDN",
  "description": "The findIndex() method of TypedArray instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as Array.prototype.findIndex().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes",
  "markdown": "# TypedArray.prototype.includes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`includes()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances determines whether a typed array includes a certain value among its entries, returning `true` or `false` as appropriate. This method has the same algorithm as [`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nincludes(searchElement)\nincludes(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nThe value to search for.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### [Return value](#return_value)\n\nA boolean value which is `true` if the value `searchElement` is found within the typed array (or the part of the typed array indicated by the index `fromIndex`, if specified).\n\n## [Description](#description)\n\nSee [`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using includes()](#using_includes)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.includes(2); // true\nuint8.includes(4); // false\nuint8.includes(3, 3); // false\n\n// NaN handling (only relevant for floating point arrays)\nnew Uint8Array([NaN]).includes(NaN); // false, since the NaN passed to the constructor gets converted to 0\nnew Float32Array([NaN]).includes(NaN); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.includes](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.includes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.includes() - JavaScript | MDN",
  "description": "The includes() method of TypedArray instances determines whether a typed array includes a certain value among its entries, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf",
  "markdown": "# TypedArray.prototype.indexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`indexOf()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as [`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nindexOf(searchElement)\nindexOf(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nElement to locate in the typed array.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### [Return value](#return_value)\n\nThe first index of `searchElement` in the typed array; `-1` if not found.\n\n## [Description](#description)\n\nSee [`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using indexOf()](#using_indexof)\n\n```\nconst uint8 = new Uint8Array([2, 5, 9]);\nuint8.indexOf(2); // 0\nuint8.indexOf(7); // -1\nuint8.indexOf(9, 2); // 2\nuint8.indexOf(2, -1); // -1\nuint8.indexOf(2, -3); // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.indexof](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.indexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.indexOf() - JavaScript | MDN",
  "description": "The indexOf() method of TypedArray instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join",
  "markdown": "# TypedArray.prototype.join() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`join()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as [`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`separator`](#separator) Optional\n\nA string to separate each pair of adjacent elements of the typed array. If omitted, the typed array elements are separated with a comma (\",\").\n\n### [Return value](#return_value)\n\nA string with all typed array elements joined. If `array.length` is `0`, the empty string is returned.\n\n## [Description](#description)\n\nSee [`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using join()](#using_join)\n\n```\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.join(); // '1,2,3'\nuint8.join(\" / \"); // '1 / 2 / 3'\nuint8.join(\"\"); // '123'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.join](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.join) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.join() - JavaScript | MDN",
  "description": "The join() method of TypedArray instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as Array.prototype.join().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach",
  "markdown": "# TypedArray.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`forEach()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances executes a provided function once for each typed array element. This method has the same algorithm as [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `forEach()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nSee [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Logging the contents of a typed array](#logging_the_contents_of_a_typed_array)\n\nThe following code logs a line for each element in a typed array:\n\n```\nfunction logArrayElements(element, index, array) {\n  console.log(`a[${index}] = ${element}`);\n}\n\nnew Uint8Array([0, 1, 2, 3]).forEach(logArrayElements);\n// Logs:\n// a[0] = 0\n// a[1] = 1\n// a[2] = 2\n// a[3] = 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.foreach](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.forEach() - JavaScript | MDN",
  "description": "The forEach() method of TypedArray instances executes a provided function once for each typed array element. This method has the same algorithm as Array.prototype.forEach().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf",
  "markdown": "# TypedArray.prototype.lastIndexOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`lastIndexOf()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at `fromIndex`. This method has the same algorithm as [`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nlastIndexOf(searchElement)\nlastIndexOf(searchElement, fromIndex)\n```\n\n### [Parameters](#parameters)\n\n[`searchElement`](#searchelement)\n\nElement to locate in the typed array.\n\n[`fromIndex`](#fromindex) Optional\n\nZero-based index at which to start searching backwards, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### [Return value](#return_value)\n\nThe last index of `searchElement` in the typed array; `-1` if not found.\n\n## [Description](#description)\n\nSee [`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Using lastIndexOf()](#using_lastindexof)\n\n```\nconst uint8 = new Uint8Array([2, 5, 9, 2]);\nuint8.lastIndexOf(2); // 3\nuint8.lastIndexOf(7); // -1\nuint8.lastIndexOf(2, 3); // 3\nuint8.lastIndexOf(2, 2); // 0\nuint8.lastIndexOf(2, -2); // 0\nuint8.lastIndexOf(2, -1); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.lastindexof](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.lastindexof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.lastIndexOf() - JavaScript | MDN",
  "description": "The lastIndexOf() method of TypedArray instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create",
  "markdown": "# Object.create() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.create()`** static method creates a new object, using an existing object as the prototype of the newly created object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.create(proto)\nObject.create(proto, propertiesObject)\n```\n\n### [Parameters](#parameters)\n\n[`proto`](#proto)\n\nThe object which should be the prototype of the newly-created object.\n\n[`propertiesObject`](#propertiesobject) Optional\n\nIf specified and not [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), an object whose [enumerable own properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties).\n\n### [Return value](#return_value)\n\nA new object with the specified prototype object and properties.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `proto` is neither [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) nor an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).\n\n## [Examples](#examples)\n\n### [Classical inheritance with Object.create()](#classical_inheritance_with_object.create)\n\nBelow is an example of how to use `Object.create()` to achieve classical inheritance. This is for a single inheritance, which is all that JavaScript supports.\n\n```\n// Shape - superclass\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// superclass method\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.info(\"Shape moved.\");\n};\n\n// Rectangle - subclass\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// subclass extends superclass\nRectangle.prototype = Object.create(Shape.prototype, {\n  // If you don't set Rectangle.prototype.constructor to Rectangle,\n  // it will take the prototype.constructor of Shape (parent).\n  // To avoid that, we set the prototype.constructor to Rectangle (child).\n  constructor: {\n    value: Rectangle,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n\nconst rect = new Rectangle();\n\nconsole.log(\"Is rect an instance of Rectangle?\", rect instanceof Rectangle); // true\nconsole.log(\"Is rect an instance of Shape?\", rect instanceof Shape); // true\nrect.move(1, 1); // Logs 'Shape moved.'\n```\n\nNote that there are caveats to watch out for using `create()`, such as re-adding the [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property to ensure proper semantics. Although `Object.create()` is believed to have better performance than mutating the prototype with [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf), the difference is in fact negligible if no instances have been created and property accesses haven't been optimized yet. In modern code, the [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) syntax should be preferred in any case.\n\n### [Using propertiesObject argument with Object.create()](#using_propertiesobject_argument_with_object.create)\n\n`Object.create()` allows fine-tuned control over the object creation process. The [object initializer syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) is, in fact, a syntax sugar of `Object.create()`. With `Object.create()`, we can create objects with a designated prototype and also some properties. Note that the second parameter maps keys to _property descriptors_ — this means you can control each property's enumerability, configurability, etc. as well, which you can't do in object initializers.\n\n```\no = {};\n// Is equivalent to:\no = Object.create(Object.prototype);\n\no = Object.create(Object.prototype, {\n  // foo is a regular data property\n  foo: {\n    writable: true,\n    configurable: true,\n    value: \"hello\",\n  },\n  // bar is an accessor property\n  bar: {\n    configurable: false,\n    get() {\n      return 10;\n    },\n    set(value) {\n      console.log(\"Setting `o.bar` to\", value);\n    },\n  },\n});\n\n// Create a new object whose prototype is a new, empty\n// object and add a single property 'p', with value 42.\no = Object.create({}, { p: { value: 42 } });\n```\n\nWith `Object.create()`, we can create an object [with `null` as prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). The equivalent syntax in object initializers would be the [`__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) key.\n\n```\no = Object.create(null);\n// Is equivalent to:\no = { __proto__: null };\n```\n\nBy default properties are _not_ writable, enumerable or configurable.\n\n```\no.p = 24; // throws in strict mode\no.p; // 42\n\no.q = 12;\nfor (const prop in o) {\n  console.log(prop);\n}\n// 'q'\n\ndelete o.p;\n// false; throws in strict mode\n```\n\nTo specify a property with the same attributes as in an initializer, explicitly specify `writable`, `enumerable` and `configurable`.\n\n```\no2 = Object.create(\n  {},\n  {\n    p: {\n      value: 42,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    },\n  },\n);\n// This is not equivalent to:\n// o2 = Object.create({ p: 42 })\n// which will create an object with prototype { p: 42 }\n```\n\nYou can use `Object.create()` to mimic the behavior of the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```\nfunction Constructor() {}\no = new Constructor();\n// Is equivalent to:\no = Object.create(Constructor.prototype);\n```\n\nOf course, if there is actual initialization code in the `Constructor` function, the `Object.create()` method cannot reflect it.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.create](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.create) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.create() - JavaScript | MDN",
  "description": "The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight",
  "markdown": "# TypedArray.prototype.reduceRight() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reduceRight()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as [`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreduceRight(callbackFn)\nreduceRight(callbackFn, initialValue)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduceRight()`. The function is called with the following arguments:\n\n[`accumulator`](#accumulator)\n\nThe value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the last element of the typed array.\n\n[`currentValue`](#currentvalue)\n\nThe value of the current element. On the first call, its value is the last element if `initialValue` is specified; otherwise its value is the second-to-last element.\n\n[`currentIndex`](#currentindex)\n\nThe index position of `currentValue` in the typed array. On the first call, its value is `array.length - 1` if `initialValue` is specified, otherwise `array.length - 2`.\n\n[`array`](#array)\n\nThe typed array `reduceRight()` was called upon.\n\n[`initialValue`](#initialvalue) Optional\n\nValue to use as accumulator to the first call of the `callbackFn`. If no initial value is supplied, the last element in the typed array will be used and skipped. Calling `reduceRight()` on an empty typed array without an initial value creates a `TypeError`.\n\n### [Return value](#return_value)\n\nThe value that results from the reduction.\n\n## [Description](#description)\n\nSee [`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Sum up all values within an array](#sum_up_all_values_within_an_array)\n\n```\nconst total = new Uint8Array([0, 1, 2, 3]).reduceRight((a, b) => a + b);\n// total === 6\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.reduceright](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.reduceright) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.reduceRight() - JavaScript | MDN",
  "description": "The reduceRight() method of TypedArray instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",
  "markdown": "# Object.keys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.keys()`** static method returns an array of a given object's own enumerable string-keyed property names.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nAn array of strings representing the given object's own enumerable string-keyed property keys.\n\n## [Description](#description)\n\n`Object.keys()` returns an array whose elements are strings corresponding to the enumerable string-keyed property names found directly upon `object`. This is the same as iterating with a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.keys()` is the same as that provided by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\nIf you need the property values, use [`Object.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values) instead. If you need both the property keys and values, use [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) instead.\n\n## [Examples](#examples)\n\n### [Using Object.keys()](#using_object.keys)\n\n```\n// Simple array\nconst arr = [\"a\", \"b\", \"c\"];\nconsole.log(Object.keys(arr)); // ['0', '1', '2']\n\n// Array-like object\nconst obj = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.keys(obj)); // ['0', '1', '2']\n\n// Array-like object with random key ordering\nconst anObj = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.keys(anObj)); // ['2', '7', '100']\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = 1;\nconsole.log(Object.keys(myObj)); // ['foo']\n```\n\nIf you want _all_ string-keyed own properties, including non-enumerable ones, see [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames).\n\n### [Using Object.keys() on primitives](#using_object.keys_on_primitives)\n\nNon-object arguments are [coerced to objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```\n// Strings have indices as enumerable own properties\nconsole.log(Object.keys(\"foo\")); // ['0', '1', '2']\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.keys(100)); // []\n```\n\n**Note:** In ES5, passing a non-object to `Object.keys()` threw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.keys](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.keys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.keys() - JavaScript | MDN",
  "description": "The Object.keys() static method returns an array of a given object's own enumerable string-keyed property names.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce",
  "markdown": "# TypedArray.prototype.reduce() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`reduce()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances executes a user-supplied \"reducer\" callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n\n[`accumulator`](#accumulator)\n\nThe value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is `array[0]`.\n\n[`currentValue`](#currentvalue)\n\nThe value of the current element. On the first call, its value is `array[0]` if `initialValue` is specified; otherwise its value is `array[1]`.\n\n[`currentIndex`](#currentindex)\n\nThe index position of `currentValue` in the typed array. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n\n[`array`](#array)\n\nThe typed array `reduce()` was called upon.\n\n[`initialValue`](#initialvalue) Optional\n\nA value to which `accumulator` is initialized the first time the callback is called. If `initialValue` is specified, `callbackFn` starts executing with the first value in the typed array as `currentValue`. If `initialValue` is _not_ specified, `accumulator` is initialized to the first value in the typed array, and `callbackFn` starts executing with the second value in the typed array as `currentValue`. In this case, if the typed array is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### [Return value](#return_value)\n\nThe value that results from running the \"reducer\" callback function to completion over the entire typed array.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the typed array contains no elements and `initialValue` is not provided.\n\n## [Description](#description)\n\nSee [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Sum up all values within an array](#sum_up_all_values_within_an_array)\n\n```\nconst total = new Uint8Array([0, 1, 2, 3]).reduce((a, b) => a + b);\n// total === 6\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.reduce](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.reduce) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.reduce() - JavaScript | MDN",
  "description": "The reduce() method of TypedArray instances executes a user-supplied \"reducer\" callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as Array.prototype.reduce().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map",
  "markdown": "# TypedArray.prototype.map() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`map()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nmap(callbackFn)\nmap(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the typed array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the typed array.\n\n[`array`](#array)\n\nThe typed array `map()` was called upon.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`. See [iterative methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### [Return value](#return_value)\n\nA new typed array with each element being the result of the callback function.\n\n## [Description](#description)\n\nSee [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Mapping a typed array to a typed array of square roots](#mapping_a_typed_array_to_a_typed_array_of_square_roots)\n\nThe following code takes a typed array and creates a new typed array containing the square roots of the numbers in the first typed array.\n\n```\nconst numbers = new Uint8Array([1, 4, 9]);\nconst roots = numbers.map(Math.sqrt);\n// roots is now: Uint8Array [1, 2, 3],\n// numbers is still Uint8Array [1, 4, 9]\n```\n\n### [Mapping a typed array of numbers using a function containing an argument](#mapping_a_typed_array_of_numbers_using_a_function_containing_an_argument)\n\nThe following code shows how `map()` works when a function requiring one argument is used with it. The argument will automatically be assigned to each element of the typed array as `map()` loops through the original typed array.\n\n```\nconst numbers = new Uint8Array([1, 4, 9]);\nconst doubles = numbers.map((num) => num * 2);\n// doubles is now Uint8Array [2, 8, 18]\n// numbers is still Uint8Array [1, 4, 9]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.map](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.map) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.map() - JavaScript | MDN",
  "description": "The map() method of TypedArray instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as Array.prototype.map().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys",
  "markdown": "# TypedArray.prototype.keys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`keys()`** method of [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instances returns a new _[array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each index in the typed array. This method has the same algorithm as [`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nSee [`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys) for more details. This method is not generic and can only be called on typed array instances.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\n```\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrKeys = arr.keys();\nfor (const n of arrKeys) {\n  console.log(n);\n}\n```\n\n### [Alternative iteration](#alternative_iteration)\n\n```\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrKeys = arr.keys();\nconsole.log(arrKeys.next().value); // 0\nconsole.log(arrKeys.next().value); // 1\nconsole.log(arrKeys.next().value); // 2\nconsole.log(arrKeys.next().value); // 3\nconsole.log(arrKeys.next().value); // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%typedarray%.prototype.keys](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.keys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypedArray.prototype.keys() - JavaScript | MDN",
  "description": "The keys() method of TypedArray instances returns a new array iterator object that contains the keys for each index in the typed array. This method has the same algorithm as Array.prototype.keys().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
  "markdown": "# Object.getOwnPropertyNames() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.getOwnPropertyNames()`** static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.getOwnPropertyNames(obj)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object whose enumerable and non-enumerable properties are to be returned.\n\n### [Return value](#return_value)\n\nAn array of strings that corresponds to the properties found directly in the given object.\n\n## [Description](#description)\n\n`Object.getOwnPropertyNames()` returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object `obj`. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop (or by [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)) over the properties of the object. The non-negative integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion.\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, a non-object argument will be coerced to an object.\n\n```\nObject.getOwnPropertyNames(\"foo\");\n// TypeError: \"foo\" is not an object (ES5 code)\n\nObject.getOwnPropertyNames(\"foo\");\n// [\"0\", \"1\", \"2\", \"length\"]  (ES2015 code)\n```\n\n## [Examples](#examples)\n\n### [Using Object.getOwnPropertyNames()](#using_object.getownpropertynames)\n\n```\nconst arr = [\"a\", \"b\", \"c\"];\nconsole.log(Object.getOwnPropertyNames(arr).sort());\n// [\"0\", \"1\", \"2\", \"length\"]\n\n// Array-like object\nconst obj = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.getOwnPropertyNames(obj).sort());\n// [\"0\", \"1\", \"2\"]\n\nObject.getOwnPropertyNames(obj).forEach((val, idx, array) => {\n  console.log(`${val} -> ${obj[val]}`);\n});\n// 0 -> a\n// 1 -> b\n// 2 -> c\n\n// non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n      enumerable: false,\n    },\n  },\n);\nmyObj.foo = 1;\n\nconsole.log(Object.getOwnPropertyNames(myObj).sort()); // [\"foo\", \"getFoo\"]\n```\n\nIf you want only the enumerable properties, see [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) or use a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)).\n\nItems on the prototype chain are not listed:\n\n```\nfunction ParentClass() {}\nParentClass.prototype.inheritedMethod = function () {};\n\nfunction ChildClass() {\n  this.prop = 5;\n  this.method = function () {};\n}\nChildClass.prototype = new ParentClass();\nChildClass.prototype.prototypeMethod = function () {};\n\nconsole.log(Object.getOwnPropertyNames(new ChildClass()));\n// [\"prop\", \"method\"]\n```\n\n### [Get non-enumerable properties only](#get_non-enumerable_properties_only)\n\nThis uses the [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function to remove the enumerable keys (obtained with [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)) from a list of all keys (obtained with `Object.getOwnPropertyNames()`) thus giving only the non-enumerable keys as output.\n\n```\nconst target = myObject;\nconst enumAndNonenum = Object.getOwnPropertyNames(target);\nconst enumOnly = new Set(Object.keys(target));\nconst nonenumOnly = enumAndNonenum.filter((key) => !enumOnly.has(key));\n\nconsole.log(nonenumOnly);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.getownpropertynames](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.getownpropertynames) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.getOwnPropertyNames() - JavaScript | MDN",
  "description": "The Object.getOwnPropertyNames() static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply",
  "markdown": "# Reflect.apply() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.apply()`** static method calls a target function with arguments as specified.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.apply(target, thisArgument, argumentsList)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target function to call.\n\n[`thisArgument`](#thisargument)\n\nThe value of `this` provided for the call to `target`.\n\n[`argumentsList`](#argumentslist)\n\nAn [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) specifying the arguments with which `target` should be called.\n\n### [Return value](#return_value)\n\nThe result of calling the given `target` function with the specified `this` value and arguments.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not a function or `argumentsList` is not an object.\n\n## [Description](#description)\n\n`Reflect.apply()` provides the reflective semantic of a function call. That is, `Reflect.apply(target, thisArgument, argumentsList)` is semantically equivalent to:\n\n```\nMath.floor.apply(null, [1.75]);\nReflect.apply(Math.floor, null, [1.75]);\n```\n\nThe only differences are:\n\n*   `Reflect.apply()` takes the function to call as the `target` parameter instead of the `this` context.\n*   `Reflect.apply()` throws if `argumentsList` is omitted instead of defaulting to calling with no parameters.\n\n`Reflect.apply()` invokes the `[[Call]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.apply()](#using_reflect.apply)\n\n```\nReflect.apply(Math.floor, undefined, [1.75]);\n// 1;\n\nReflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]);\n// \"hello\"\n\nReflect.apply(RegExp.prototype.exec, /ab/, [\"confabulation\"]).index;\n// 4\n\nReflect.apply(\"\".charAt, \"ponies\", [3]);\n// \"i\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.apply](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.apply) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.apply() - JavaScript | MDN",
  "description": "The Reflect.apply() static method calls a target function with arguments as specified.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties",
  "markdown": "# Object.defineProperties() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.defineProperties()`** static method defines new or modifies existing properties directly on an object, returning the object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.defineProperties(obj, props)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object on which to define or modify properties.\n\n[`props`](#props)\n\nAn object whose keys represent the names of properties to be defined or modified and whose values are objects describing those properties. Each value in `props` must be either a data descriptor or an accessor descriptor; it cannot be both (see [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) for more details).\n\nData descriptors and accessor descriptors may optionally contain the following keys:\n\n[`configurable`](#configurable)\n\n`true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. **Defaults to `false`.**\n\n[`enumerable`](#enumerable)\n\n`true` if and only if this property shows up during enumeration of the properties on the corresponding object. **Defaults to `false`.**\n\nA data descriptor also has the following optional keys:\n\n[`value`](#value)\n\nThe value associated with the property. Can be any valid JavaScript value (number, object, function, etc.). **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\n[`writable`](#writable)\n\n`true` if and only if the value associated with the property may be changed with an [assignment operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators). **Defaults to `false`.**\n\nAn accessor descriptor also has the following optional keys:\n\n[`get`](#get)\n\nA function which serves as a getter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no getter. The function's return value will be used as the value of the property. **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\n[`set`](#set)\n\nA function which serves as a setter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no setter. The function will receive as its only argument the new value being assigned to the property. **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\nIf a descriptor has neither of `value`, `writable`, `get` and `set` keys, it is treated as a data descriptor. If a descriptor has both `value` or `writable` and `get` or `set` keys, an exception is thrown.\n\n### [Return value](#return_value)\n\nThe object that was passed to the function.\n\n## [Examples](#examples)\n\n### [Using Object.defineProperties](#using_object.defineproperties)\n\n```\nconst obj = {};\nObject.defineProperties(obj, {\n  property1: {\n    value: true,\n    writable: true,\n  },\n  property2: {\n    value: \"Hello\",\n    writable: false,\n  },\n  // etc. etc.\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.defineproperties](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.defineproperties) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.defineProperties() - JavaScript | MDN",
  "description": "The Object.defineProperties() static method defines new or\n  modifies existing properties directly on an object, returning the object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array",
  "markdown": "# BigUint64Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`BigUint64Array()`** constructor creates [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array) objects. The contents are initialized to `0n` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew BigUint64Array()\nnew BigUint64Array(length)\nnew BigUint64Array(typedArray)\nnew BigUint64Array(object)\n\nnew BigUint64Array(buffer)\nnew BigUint64Array(buffer, byteOffset)\nnew BigUint64Array(buffer, byteOffset, length)\n```\n\n**Note:** `BigUint64Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a BigUint64Array](#different_ways_to_create_a_biguint64array)\n\n```\n// From a length\nconst biguint64 = new BigUint64Array(2);\nbiguint64[0] = 42n;\nconsole.log(biguint64[0]); // 42n\nconsole.log(biguint64.length); // 2\nconsole.log(biguint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigUint64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigUint64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigUint64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst biguint64FromIterable = new BigUint64Array(iterable);\nconsole.log(biguint64FromIterable);\n// BigUint64Array [1n, 2n, 3n]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "BigUint64Array() constructor - JavaScript | MDN",
  "description": "The BigUint64Array() constructor creates BigUint64Array objects. The contents are initialized to 0n unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy",
  "markdown": "# Object.groupBy() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\n**Note:** In some versions of some browsers, this method was implemented as the method `Array.prototype.group()`. Due to web compatibility issues, it is now implemented as a static method. Check the [browser compatibility table](#browser_compatibility) for details.\n\nThe **`Object.groupBy()`** static method groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.\n\nThis method should be used when group names can be represented by strings. If you need to group elements using a key that is some arbitrary value, use [`Map.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/groupBy) instead.\n\n## [Syntax](#syntax)\n\n```\nObject.groupBy(items, callbackFn)\n```\n\n### [Parameters](#parameters)\n\n[`items`](#items)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) whose elements will be grouped.\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the iterable. It should return a value that can get coerced into a property key (string or [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)) indicating the group of the current element. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\nA [`null`\\-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) with properties for all groups, each assigned to an array containing the elements of the associated group.\n\n## [Description](#description)\n\n`Object.groupBy()` calls a provided `callbackFn` function once for each element in an iterable. The callback function should return a string or symbol (values that are neither type are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion)) indicating the group of the associated element. The values returned by `callbackFn` are used as keys for the object returned by `Map.groupBy()`. Each key has an associated array containing all the elements for which the callback returned the same value.\n\nThe elements in the returned object and the original iterable are the same (not [deep copies](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy)). Changing the internal structure of the elements will be reflected in both the original iterable and the returned object.\n\n## [Examples](#examples)\n\n### [Using Object.groupBy()](#using_object.groupby)\n\nFirst we define an array containing objects representing an inventory of different foodstuffs. Each food has a `type` and a `quantity`.\n\n```\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\", quantity: 5 },\n  { name: \"bananas\", type: \"fruit\", quantity: 0 },\n  { name: \"goat\", type: \"meat\", quantity: 23 },\n  { name: \"cherries\", type: \"fruit\", quantity: 5 },\n  { name: \"fish\", type: \"meat\", quantity: 22 },\n];\n```\n\nThe code below groups the elements by the value of their `type` property.\n\n```\nconst result = Object.groupBy(inventory, ({ type }) => type);\n\n/* Result is:\n{\n  vegetables: [\n    { name: 'asparagus', type: 'vegetables', quantity: 5 },\n  ],\n  fruit: [\n    { name: \"bananas\", type: \"fruit\", quantity: 0 },\n    { name: \"cherries\", type: \"fruit\", quantity: 5 }\n  ],\n  meat: [\n    { name: \"goat\", type: \"meat\", quantity: 23 },\n    { name: \"fish\", type: \"meat\", quantity: 22 }\n  ]\n}\n*/\n```\n\nThe arrow function just returns the `type` of each array element each time it is called. Note that the function argument `{ type }` is a basic example of [object destructuring syntax for function arguments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_properties_from_objects_passed_as_a_function_parameter). This unpacks the `type` property of an object passed as a parameter, and assigns it to a variable named `type` in the body of the function. This is a very succinct way to access the relevant values of elements within a function.\n\nWe can also create groups inferred from values in one or more properties of the elements. Below is a very similar example that puts the items into `ok` or `restock` groups based on the value of the `quantity` field.\n\n```\nfunction myCallback({ quantity }) {\n  return quantity > 5 ? \"ok\" : \"restock\";\n}\n\nconst result2 = Object.groupBy(inventory, myCallback);\n\n/* Result is:\n{\n  restock: [\n    { name: \"asparagus\", type: \"vegetables\", quantity: 5 },\n    { name: \"bananas\", type: \"fruit\", quantity: 0 },\n    { name: \"cherries\", type: \"fruit\", quantity: 5 }\n  ],\n  ok: [\n    { name: \"goat\", type: \"meat\", quantity: 23 },\n    { name: \"fish\", type: \"meat\", quantity: 22 }\n  ]\n}\n*/\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Array Grouping  <br>\\# sec-object.groupby](https://tc39.es/proposal-array-grouping/#sec-object.groupby) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.groupBy() - JavaScript | MDN",
  "description": "The Object.groupBy() static method groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/groupBy",
  "markdown": "# Map.groupBy() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\n**Note:** In some versions of some browsers, this method was implemented as the method `Array.prototype.groupToMap()`. Due to web compatibility issues, it is now implemented as a static method. Check the [browser compatibility table](#browser_compatibility) for details.\n\nThe **`Map.groupBy()`** static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n\nThe method is primarily useful when grouping elements that are associated with an object, and in particular when that object might change over time. If the object is invariant, you might instead represent it using a string, and group elements with [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMap.groupBy(items, callbackFn)\n```\n\n### [Parameters](#parameters)\n\n[`items`](#items)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) whose elements will be grouped.\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element in the iterable. It should return a value ([object](https://developer.mozilla.org/en-US/docs/Glossary/Object) or [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)) indicating the group of the current element. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\nA [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object with keys for each group, each assigned to an array containing the elements of the associated group.\n\n## [Description](#description)\n\n`Map.groupBy()` calls a provided `callbackFn` function once for each element in an iterable. The callback function should return a value indicating the group of the associated element. The values returned by `callbackFn` are used as keys for the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) returned by `Map.groupBy()`. Each key has an associated array containing all the elements for which the callback returned the same value.\n\nThe elements in the returned [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and the original iterable are the same (not [deep copies](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy)). Changing the internal structure of the elements will be reflected in both the original iterable and the returned [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map).\n\nThis method is useful when you need to group information that is related to a particular object that might potentially change over time. This is because even if the object is modified, it will continue to work as a key to the returned `Map`. If you instead create a string representation for the object and use that as a grouping key in [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy), you must maintain the mapping between the original object and its representation as the object changes.\n\n**Note:** To access the groups in the returned `Map`, you must use the same object that was originally used as a key in the `Map` (although you may modify its properties). You can't use another object that just happens to have the same name and properties.\n\n`Map.groupBy` does not read the value of `this`. It can be called on any object and a new [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance will be returned.\n\n## [Examples](#examples)\n\n### [Using Map.groupBy()](#using_map.groupby)\n\nFirst we define an array containing objects representing an inventory of different foodstuffs. Each food has a `type` and a `quantity`.\n\n```\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\", quantity: 9 },\n  { name: \"bananas\", type: \"fruit\", quantity: 5 },\n  { name: \"goat\", type: \"meat\", quantity: 23 },\n  { name: \"cherries\", type: \"fruit\", quantity: 12 },\n  { name: \"fish\", type: \"meat\", quantity: 22 },\n];\n```\n\nThe code below uses `Map.groupBy()` with an arrow function that returns the object keys named `restock` or `sufficient`, depending on whether the element has `quantity < 6`. The returned `result` object is a `Map` so we need to call `get()` with the key to obtain the array.\n\n```\nconst restock = { restock: true };\nconst sufficient = { restock: false };\nconst result = Map.groupBy(inventory, ({ quantity }) =>\n  quantity < 6 ? restock : sufficient,\n);\nconsole.log(result.get(restock));\n// [{ name: \"bananas\", type: \"fruit\", quantity: 5 }]\n```\n\nNote that the function argument `{ quantity }` is a basic example of [object destructuring syntax for function arguments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_properties_from_objects_passed_as_a_function_parameter). This unpacks the `quantity` property of an object passed as a parameter, and assigns it to a variable named `quantity` in the body of the function. This is a very succinct way to access the relevant values of elements within a function.\n\nThe key to a `Map` can be modified and still used. However you can't recreate the key and still use it. For this reason it is important that anything that needs to use the map keeps a reference to its keys.\n\n```\n// The key can be modified and still used\nrestock[\"fast\"] = true;\nconsole.log(result.get(restock));\n// [{ name: \"bananas\", type: \"fruit\", quantity: 5 }]\n\n// A new key can't be used, even if it has the same structure!\nconst restock2 = { restock: true };\nconsole.log(result.get(restock2)); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Array Grouping  <br>\\# sec-map.groupby](https://tc39.es/proposal-array-grouping/#sec-map.groupby) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.groupBy() - JavaScript | MDN",
  "description": "The Map.groupBy() static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned Map uses the unique values from the test function as keys, which can be used to get the array of elements in each group.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",
  "markdown": "# Promise.allSettled() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.allSettled()`** static method takes an iterable of promises as input and returns a single [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nPromise.allSettled(iterable)\n```\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of promises.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that is:\n\n*   **Already fulfilled**, if the `iterable` passed is empty.\n*   **Asynchronously fulfilled**, when all promises in the given `iterable` have settled (either fulfilled or rejected). The fulfillment value is an array of objects, each describing the outcome of one promise in the `iterable`, in the order of the promises passed, regardless of completion order. Each outcome object has the following properties:\n    \n    [`status`](#status)\n    \n    A string, either `\"fulfilled\"` or `\"rejected\"`, indicating the eventual state of the promise.\n    \n    [`value`](#value)\n    \n    Only present if `status` is `\"fulfilled\"`. The value that the promise was fulfilled with.\n    \n    [`reason`](#reason)\n    \n    Only present if `status` is `\"rejected\"`. The reason that the promise was rejected with.\n    \n    If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n\n## [Description](#description)\n\nThe `Promise.allSettled()` method is one of the [promise concurrency](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. `Promise.allSettled()` is typically used when you have multiple asynchronous tasks that are not dependent on one another to complete successfully, or you'd always like to know the result of each promise.\n\nIn comparison, the Promise returned by [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) may be more appropriate if the tasks are dependent on each other, or if you'd like to immediately reject upon any of them rejecting.\n\n## [Examples](#examples)\n\n### [Using Promise.allSettled()](#using_promise.allsettled)\n\n```\nPromise.allSettled([\n  Promise.resolve(33),\n  new Promise((resolve) => setTimeout(() => resolve(66), 0)),\n  99,\n  Promise.reject(new Error(\"an error\")),\n]).then((values) => console.log(values));\n\n// [\n//   { status: 'fulfilled', value: 33 },\n//   { status: 'fulfilled', value: 66 },\n//   { status: 'fulfilled', value: 99 },\n//   { status: 'rejected', reason: Error: an error }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.allsettled](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.allsettled) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.allSettled() - JavaScript | MDN",
  "description": "The Promise.allSettled() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",
  "markdown": "# Promise.all() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.all()`** static method takes an iterable of promises as input and returns a single [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of promises.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that is:\n\n*   **Already fulfilled**, if the `iterable` passed is empty.\n*   **Asynchronously fulfilled**, when all the promises in the given `iterable` fulfill. The fulfillment value is an array of fulfillment values, in the order of the promises passed, regardless of completion order. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n*   **Asynchronously rejected**, when any of the promises in the given `iterable` rejects. The rejection reason is the rejection reason of the first promise that was rejected.\n\n## [Description](#description)\n\nThe `Promise.all()` method is one of the [promise concurrency](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. It can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully — all of whom we want to fulfill before the code execution continues.\n\n`Promise.all()` will reject immediately upon **any** of the input promises rejecting. In comparison, the promise returned by [`Promise.allSettled()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled) will wait for all input promises to complete, regardless of whether or not one rejects. Use `allSettled()` if you need the final result of every promise in the input iterable.\n\n## [Examples](#examples)\n\n### [Using Promise.all()](#using_promise.all)\n\n`Promise.all` waits for all fulfillments (or the first rejection).\n\n```\nconst p1 = Promise.resolve(3);\nconst p2 = 1337;\nconst p3 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 100);\n});\n\nPromise.all([p1, p2, p3]).then((values) => {\n  console.log(values); // [3, 1337, \"foo\"]\n});\n```\n\nIf the `iterable` contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):\n\n```\n// All values are non-promises, so the returned promise gets fulfilled\nconst p = Promise.all([1, 2, 3]);\n// The only input promise is already fulfilled,\n// so the returned promise gets fulfilled\nconst p2 = Promise.all([1, 2, 3, Promise.resolve(444)]);\n// One (and the only) input promise is rejected,\n// so the returned promise gets rejected\nconst p3 = Promise.all([1, 2, 3, Promise.reject(555)]);\n\n// Using setTimeout, we can execute code after the queue is empty\nsetTimeout(() => {\n  console.log(p);\n  console.log(p2);\n  console.log(p3);\n});\n\n// Logs:\n// Promise { <state>: \"fulfilled\", <value>: Array[3] }\n// Promise { <state>: \"fulfilled\", <value>: Array[4] }\n// Promise { <state>: \"rejected\", <reason>: 555 }\n```\n\n### [Asynchronicity or synchronicity of Promise.all](#asynchronicity_or_synchronicity_of_promise.all)\n\nThis following example demonstrates the asynchronicity of `Promise.all` when a non-empty `iterable` is passed:\n\n```\n// Passing an array of promises that are already resolved,\n// to trigger Promise.all as soon as possible\nconst resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nconst p = Promise.all(resolvedPromisesArray);\n// Immediately logging the value of p\nconsole.log(p);\n\n// Using setTimeout, we can execute code after the queue is empty\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"fulfilled\", <value>: Array[2] }\n```\n\nThe same thing happens if `Promise.all` rejects:\n\n```\nconst mixedPromisesArray = [Promise.resolve(33), Promise.reject(44)];\nconst p = Promise.all(mixedPromisesArray);\nconsole.log(p);\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p);\n});\n\n// Logs:\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"rejected\", <reason>: 44 }\n```\n\n`Promise.all` resolves synchronously if and only if the `iterable` passed is empty:\n\n```\nconst p = Promise.all([]); // Will be immediately resolved\nconst p2 = Promise.all([1337, \"hi\"]); // Non-promise values are ignored, but the evaluation is done asynchronously\nconsole.log(p);\nconsole.log(p2);\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p2);\n});\n\n// Logs:\n// Promise { <state>: \"fulfilled\", <value>: Array[0] }\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"fulfilled\", <value>: Array[2] }\n```\n\n### [Using Promise.all() with async functions](#using_promise.all_with_async_functions)\n\nWithin [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), it's very common to \"over-await\" your code. For example, given the following functions:\n\n```\nfunction promptForDishChoice() {\n  return new Promise((resolve, reject) => {\n    const dialog = document.createElement(\"dialog\");\n    dialog.innerHTML = `\n<form method=\"dialog\">\n  <p>What would you like to eat?</p>\n  <select>\n    <option value=\"pizza\">Pizza</option>\n    <option value=\"pasta\">Pasta</option>\n    <option value=\"salad\">Salad</option>\n  </select>\n  <menu>\n    <li><button value=\"cancel\">Cancel</button></li>\n    <li><button type=\"submit\" value=\"ok\">OK</button></li>\n  </menu>\n</form>\n    `;\n    dialog.addEventListener(\"close\", () => {\n      if (dialog.returnValue === \"ok\") {\n        resolve(dialog.querySelector(\"select\").value);\n      } else {\n        reject(new Error(\"User cancelled dialog\"));\n      }\n    });\n    document.body.appendChild(dialog);\n    dialog.showModal();\n  });\n}\n\nasync function fetchPrices() {\n  const response = await fetch(\"/prices\");\n  return await response.json();\n}\n```\n\nYou may write a function like this:\n\n```\nasync function getPrice() {\n  const choice = await promptForDishChoice();\n  const prices = await fetchPrices();\n  return prices[choice];\n}\n```\n\nHowever, note that the execution of `promptForDishChoice` and `fetchPrices` don't depend on the result of each other. While the user is choosing their dish, it's fine for the prices to be fetched in the background, but in the code above, the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) operator causes the async function to pause until the choice is made, and then again until the prices are fetched. We can use `Promise.all` to run them concurrently, so that the user doesn't have to wait for the prices to be fetched before the result is given:\n\n```\nasync function getPrice() {\n  const [choice, prices] = await Promise.all([\n    promptForDishChoice(),\n    fetchPrices(),\n  ]);\n  return prices[choice];\n}\n```\n\n`Promise.all` is the best choice of [concurrency method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) here, because error handling is intuitive — if any of the promises reject, the result is no longer available, so the whole `await` expression throws.\n\n`Promise.all` accepts an iterable of promises, so if you are using it to run several async functions concurrently, you need to call the async functions and use the returned promises. Directly passing the functions to `Promise.all` does not work, since they are not promises.\n\n```\nasync function getPrice() {\n  const [choice, prices] = await Promise.all([\n    promptForDishChoice,\n    fetchPrices,\n  ]);\n  // `choice` and `prices` are still the original async functions;\n  // Promise.all() does nothing to non-promises\n}\n```\n\n### [Promise.all fail-fast behavior](#promise.all_fail-fast_behavior)\n\n`Promise.all` is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then `Promise.all` will reject immediately.\n\n```\nconst p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"one\"), 1000);\n});\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"two\"), 2000);\n});\nconst p3 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"three\"), 3000);\n});\nconst p4 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"four\"), 4000);\n});\nconst p5 = new Promise((resolve, reject) => {\n  reject(new Error(\"reject\"));\n});\n\n// Using .catch:\nPromise.all([p1, p2, p3, p4, p5])\n  .then((values) => {\n    console.log(values);\n  })\n  .catch((error) => {\n    console.error(error.message);\n  });\n\n// Logs:\n// \"reject\"\n```\n\nIt is possible to change this behavior by handling possible rejections:\n\n```\nconst p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"p1_delayed_resolution\"), 1000);\n});\n\nconst p2 = new Promise((resolve, reject) => {\n  reject(new Error(\"p2_immediate_rejection\"));\n});\n\nPromise.all([p1.catch((error) => error), p2.catch((error) => error)]).then(\n  (values) => {\n    console.log(values[0]); // \"p1_delayed_resolution\"\n    console.error(values[1]); // \"Error: p2_immediate_rejection\"\n  },\n);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.all](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.all) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.all() - JavaScript | MDN",
  "description": "The Promise.all() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject",
  "markdown": "# Promise.reject() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.reject()`** static method returns a `Promise` object that is rejected with a given reason.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`reason`](#reason)\n\nReason why this `Promise` rejected.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that is rejected with the given reason.\n\n## [Description](#description)\n\nThe static `Promise.reject` function returns a `Promise` that is rejected. For debugging purposes and selective error catching, it is useful to make `reason` an `instanceof` [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n`Promise.reject()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters. `Promise.reject()` is essentially a shorthand for `new Promise((resolve, reject) => reject(reason))`.\n\nUnlike [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve), `Promise.reject()` always wraps `reason` in a new `Promise` object, even when `reason` is already a `Promise`.\n\n## [Examples](#examples)\n\n### [Using the static Promise.reject() method](#using_the_static_promise.reject_method)\n\n```\nPromise.reject(new Error(\"fail\")).then(\n  () => {\n    // not called\n  },\n  (error) => {\n    console.error(error); // Stacktrace\n  },\n);\n```\n\n### [Rejecting with a promise](#rejecting_with_a_promise)\n\nUnlike [`Promise.resolve`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve), the `Promise.reject` method does not reuse existing `Promise` instances. It always returns a new `Promise` instance that wraps `reason`.\n\n```\nconst p = Promise.resolve(1);\nconst rejected = Promise.reject(p);\nconsole.log(rejected === p); // false\nrejected.catch((v) => {\n  console.log(v === p); // true\n});\n```\n\n### [Calling reject() on a non-Promise constructor](#calling_reject_on_a_non-promise_constructor)\n\n`Promise.reject()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes it `console.log` as `reject`:\n\n```\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the\n    // native promise's, but Promise.reject() calls them in the same way.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nPromise.reject.call(NotPromise, \"foo\"); // Logs \"Rejected foo\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.reject](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.reject) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.reject() - JavaScript | MDN",
  "description": "The Promise.reject() static method returns a Promise object that is rejected with a given reason.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",
  "markdown": "# Promise.race() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise.race()`** static method takes an iterable of promises as input and returns a single [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). This returned promise settles with the eventual state of the first promise that settles.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of promises.\n\n### [Return value](#return_value)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that **asynchronously settles** with the eventual state of the first promise in the `iterable` to settle. In other words, it fulfills if the first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever if the `iterable` passed is empty. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) settled.\n\n## [Description](#description)\n\nThe `Promise.race()` method is one of the [promise concurrency](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. It's useful when you want the first async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\n\nIf the iterable contains one or more non-promise values and/or an already settled promise, then `Promise.race()` will settle to the first of these values found in the iterable.\n\n## [Examples](#examples)\n\n### [Using Promise.race()](#using_promise.race)\n\nThis example shows how `Promise.race()` can be used to race several timers implemented with [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout). The timer with the shortest time always wins the race and becomes the resulting promise's state.\n\n```\nfunction sleep(time, value, state) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === \"fulfill\") {\n        return resolve(value);\n      } else {\n        return reject(new Error(value));\n      }\n    }, time);\n  });\n}\n\nconst p1 = sleep(500, \"one\", \"fulfill\");\nconst p2 = sleep(100, \"two\", \"fulfill\");\n\nPromise.race([p1, p2]).then((value) => {\n  console.log(value); // \"two\"\n  // Both fulfill, but p2 is faster\n});\n\nconst p3 = sleep(100, \"three\", \"fulfill\");\nconst p4 = sleep(500, \"four\", \"reject\");\n\nPromise.race([p3, p4]).then(\n  (value) => {\n    console.log(value); // \"three\"\n    // p3 is faster, so it fulfills\n  },\n  (error) => {\n    // Not called\n  },\n);\n\nconst p5 = sleep(500, \"five\", \"fulfill\");\nconst p6 = sleep(100, \"six\", \"reject\");\n\nPromise.race([p5, p6]).then(\n  (value) => {\n    // Not called\n  },\n  (error) => {\n    console.error(error.message); // \"six\"\n    // p6 is faster, so it rejects\n  },\n);\n```\n\n### [Asynchronicity of Promise.race](#asynchronicity_of_promise.race)\n\nThis following example demonstrates the asynchronicity of `Promise.race`. Unlike other promise concurrency methods, `Promise.race` is always asynchronous: it never settles synchronously, even when the `iterable` is empty.\n\n```\n// Passing an array of promises that are already resolved,\n// to trigger Promise.race as soon as possible\nconst resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nconst p = Promise.race(resolvedPromisesArray);\n// Immediately logging the value of p\nconsole.log(p);\n\n// Using setTimeout, we can execute code after the stack is empty\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(p);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"fulfilled\", <value>: 33 }\n```\n\nAn empty iterable causes the returned promise to be forever pending:\n\n```\nconst foreverPendingPromise = Promise.race([]);\nconsole.log(foreverPendingPromise);\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(foreverPendingPromise);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"pending\" }\n```\n\nIf the iterable contains one or more non-promise value and/or an already settled promise, then `Promise.race` will settle to the first of these values found in the array:\n\n```\nconst foreverPendingPromise = Promise.race([]);\nconst alreadyFulfilledProm = Promise.resolve(100);\n\nconst arr = [foreverPendingPromise, alreadyFulfilledProm, \"non-Promise value\"];\nconst arr2 = [foreverPendingPromise, \"non-Promise value\", Promise.resolve(100)];\nconst p = Promise.race(arr);\nconst p2 = Promise.race(arr2);\n\nconsole.log(p);\nconsole.log(p2);\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(p);\n  console.log(p2);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"fulfilled\", <value>: 100 }\n// Promise { <state>: \"fulfilled\", <value>: \"non-Promise value\" }\n```\n\n### [Using Promise.race() to implement request timeout](#using_promise.race_to_implement_request_timeout)\n\nYou can race a potentially long-lasting request with a timer that rejects, so that when the time limit has elapsed, the resulting promise automatically rejects.\n\n```\nconst data = Promise.race([\n  fetch(\"/api\"),\n  new Promise((resolve, reject) => {\n    // Reject after 5 seconds\n    setTimeout(() => reject(new Error(\"Request timed out\")), 5000);\n  }),\n])\n  .then((res) => res.json())\n  .catch((err) => displayError(err));\n```\n\nIf the `data` promise fulfills, it will contain the data fetched from `/api`; otherwise, it will reject if `fetch` remains pending for 5 seconds and loses the race with the `setTimeout` timer.\n\n### [Using Promise.race() to detect the status of a promise](#using_promise.race_to_detect_the_status_of_a_promise)\n\nBecause `Promise.race()` resolves to the first non-pending promise in the iterable, we can check a promise's state, including if it's pending. This example is adapted from [`promise-status-async`](https://github.com/kudla/promise-status-async/blob/master/lib/promiseState.js).\n\n```\nfunction promiseState(promise) {\n  const pendingState = { status: \"pending\" };\n\n  return Promise.race([promise, pendingState]).then(\n    (value) =>\n      value === pendingState ? value : { status: \"fulfilled\", value },\n    (reason) => ({ status: \"rejected\", reason }),\n  );\n}\n```\n\nIn this function, if `promise` is pending, the second value, `pendingState`, which is a non-promise, becomes the result of the race; otherwise, if `promise` is already settled, we may know its state through the `onFulfilled` and `onRejected` handlers. For example:\n\n```\nconst p1 = new Promise((res) => setTimeout(() => res(100), 100));\nconst p2 = new Promise((res) => setTimeout(() => res(200), 200));\nconst p3 = new Promise((res, rej) => setTimeout(() => rej(300), 100));\n\nasync function getStates() {\n  console.log(await promiseState(p1));\n  console.log(await promiseState(p2));\n  console.log(await promiseState(p3));\n}\n\nconsole.log(\"Immediately after initiation:\");\ngetStates();\nsetTimeout(() => {\n  console.log(\"After waiting for 100ms:\");\n  getStates();\n}, 100);\n\n// Logs:\n// Immediately after initiation:\n// { status: 'pending' }\n// { status: 'pending' }\n// { status: 'pending' }\n// After waiting for 100ms:\n// { status: 'fulfilled', value: 100 }\n// { status: 'pending' }\n// { status: 'rejected', reason: 300 }\n```\n\n**Note:** The `promiseState` function still runs asynchronously, because there is no way to synchronously get a promise's value (i.e. without `then()` or `await`), even when it is already settled. However, `promiseState()` always fulfills within one tick and never actually waits for any promise's settlement.\n\n### [Comparison with Promise.any()](#comparison_with_promise.any)\n\n`Promise.race` takes the first settled [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"one\");\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(reject, 100, \"two\");\n});\n\nPromise.race([promise1, promise2])\n  .then((value) => {\n    console.log(\"succeeded with value:\", value);\n  })\n  .catch((reason) => {\n    // Only promise1 is fulfilled, but promise2 is faster\n    console.error(\"failed with reason:\", reason);\n  });\n// failed with reason: two\n```\n\n[`Promise.any`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any) takes the first fulfilled [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"one\");\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(reject, 100, \"two\");\n});\n\nPromise.any([promise1, promise2])\n  .then((value) => {\n    // Only promise1 is fulfilled, even though promise2 settled sooner\n    console.log(\"succeeded with value:\", value);\n  })\n  .catch((reason) => {\n    console.error(\"failed with reason:\", reason);\n  });\n// succeeded with value: one\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.race](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.race) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.race() - JavaScript | MDN",
  "description": "The Promise.race() static method takes an iterable of promises as input and returns a single Promise. This returned promise settles with the eventual state of the first promise that settles.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally",
  "markdown": "# Promise.prototype.finally() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`finally()`** method of [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns another [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object, allowing you to [chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods.\n\nThis lets you avoid duplicating code in both the promise's [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) and [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) handlers.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npromiseInstance.finally(onFinally)\n```\n\n### [Parameters](#parameters)\n\n[`onFinally`](#onfinally)\n\nA function to asynchronously execute when this promise becomes settled. Its return value is ignored unless the returned value is a rejected promise. The function is called with no arguments.\n\n### [Return value](#return_value)\n\nReturns a new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) immediately. This new promise is always pending when returned, regardless of the current promise's status. If `onFinally` throws an error or returns a rejected promise, the new promise will reject with that value. Otherwise, the new promise will settle with the same state as the current promise.\n\n## [Description](#description)\n\nThe `finally()` method can be useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome.\n\nThe `finally()` method is very similar to calling [`then(onFinally, onFinally)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then). However, there are a couple of differences:\n\n*   When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it.\n*   The `onFinally` callback does not receive any argument. This use case is for precisely when you _do not care_ about the rejection reason or the fulfillment value, and so there's no need to provide it.\n*   A `finally()` call is usually transparent and reflects the eventual state of the original promise. So for example:\n    *   Unlike `Promise.resolve(2).then(() => 77, () => {})`, which returns a promise eventually fulfilled with the value `77`, `Promise.resolve(2).finally(() => 77)` returns a promise eventually fulfilled with the value `2`.\n    *   Similarly, unlike `Promise.reject(3).then(() => {}, () => 88)`, which returns a promise eventually fulfilled with the value `88`, `Promise.reject(3).finally(() => 88)` returns a promise eventually rejected with the reason `3`.\n\n**Note:** A `throw` (or returning a rejected promise) in the `finally` callback still rejects the returned promise. For example, both `Promise.reject(3).finally(() => { throw 99; })` and `Promise.reject(3).finally(() => Promise.reject(99))` reject the returned promise with the reason `99`.\n\nLike [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), `finally()` internally calls the `then` method on the object upon which it was called. If `onFinally` is not a function, `then()` is called with `onFinally` as both arguments — which, for [`Promise.prototype.then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), means that no useful handler is attached. Otherwise, `then()` is called with two internally created functions, which behave like the following:\n\n**Warning:** This is only for demonstration purposes and is not a polyfill.\n\n```\npromise.then(\n  (value) => Promise.resolve(onFinally()).then(() => value),\n  (reason) =>\n    Promise.resolve(onFinally()).then(() => {\n      throw reason;\n    }),\n);\n```\n\nBecause `finally()` calls `then()`, it supports subclassing. Moreover, notice the [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) call above — in reality, `onFinally()`'s return value is resolved using the same algorithm as `Promise.resolve()`, but the actual constructor used to construct the resolved promise will be the subclass. `finally()` gets this constructor through [`promise.constructor[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species).\n\n## [Examples](#examples)\n\n### [Using finally()](#using_finally)\n\n```\nlet isLoading = true;\n\nfetch(myRequest)\n  .then((response) => {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  })\n  .then((json) => {\n    /* process your JSON further */\n  })\n  .catch((error) => {\n    console.error(error); // this line can also throw, e.g. when console = {}\n  })\n  .finally(() => {\n    isLoading = false;\n  });\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.prototype.finally](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.prototype.finally) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.prototype.finally() - JavaScript | MDN",
  "description": "The finally() method of Promise instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns another Promise object, allowing you to chain calls to other promise methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species",
  "markdown": "# Promise\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Promise[@@species]`** static accessor property returns the constructor used to construct return values from promise methods.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from promise chaining methods that create new promises.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `Promise` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```\n// Hypothetical underlying implementation for illustration\nclass Promise {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```\nclass SubPromise extends Promise {}\nSubPromise[Symbol.species] === SubPromise; // true\n```\n\nPromise chaining methods — [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), and [`finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) — return new promise objects. They get the constructor to construct the new promise through `this.constructor[@@species]`. If `this.constructor` is `undefined`, or if `this.constructor[@@species]` is `undefined` or `null`, the default [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor is used. Otherwise, the constructor returned by `this.constructor[@@species]` is used to construct the new promise object.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `Symbol.species` property returns the default constructor function, which is the `Promise` constructor for `Promise`.\n\n```\nPromise[Symbol.species]; // [Function: Promise]\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `Promise` subclass, such as `MyPromise`, the `MyPromise` species is the `MyPromise` constructor. However, you might want to override this, in order to return parent `Promise` objects in your derived class methods.\n\n```\nclass MyPromise extends Promise {\n  // Override MyPromise species to the parent Promise constructor\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n```\n\nBy default, promise methods would return promises with the type of the subclass.\n\n```\nclass MyPromise extends Promise {\n  someValue = 1;\n}\n\nconsole.log(MyPromise.resolve(1).then(() => {}).someValue); // 1\n```\n\nBy overriding `@@species`, the promise methods will return the base `Promise` type.\n\n```\nclass MyPromise extends Promise {\n  someValue = 1;\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n\nconsole.log(MyPromise.resolve(1).then(() => {}).someValue); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-promise-@@species](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-get-promise-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise[@@species] - JavaScript | MDN",
  "description": "The Promise[@@species] static accessor property returns the constructor used to construct return values from promise methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers",
  "markdown": "# Promise.withResolvers() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`Promise.withResolvers()`** static method returns an object containing a new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA plain object containing the following properties:\n\n[`promise`](#promise)\n\nA [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object.\n\n[`resolve`](#resolve)\n\nA function that resolves the promise. For its semantics, see the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor reference.\n\n[`reject`](#reject)\n\nA function that rejects the promise. For its semantics, see the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor reference.\n\n## [Description](#description)\n\n`Promise.withResolvers()` is exactly equivalent to the following code:\n\n```\nlet resolve, reject;\nconst promise = new Promise((res, rej) => {\n  resolve = res;\n  reject = rej;\n});\n```\n\nExcept that it is more concise and does not require the use of [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\nThe key difference when using `Promise.withResolvers()` is that the resolution and rejection functions now live in the same scope as the promise itself, instead of being created and used once within the executor. This may enable some more advanced use cases, such as when reusing them for recurring events, particularly with streams and queues. This also generally results in less nesting than wrapping a lot of logic within the executor.\n\n`Promise.withResolvers()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will contain a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters.\n\n## [Examples](#examples)\n\n### [Transforming a stream to an async iterable](#transforming_a_stream_to_an_async_iterable)\n\nThe use case of `Promise.withResolvers()` is when you have a promise that should be resolved or rejected by some event listener that cannot be wrapped inside the promise executor. The following example transforms a Node.js [readable stream](https://nodejs.org/api/stream.html#class-streamreadable) to an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). Each `promise` here represents a single batch of data available, and each time the current batch is read, a new promise is created for the next batch. Note how the event listeners are only attached once, but actually call a different version of the `resolve` and `reject` functions each time.\n\n```\nasync function* readableToAsyncIterable(stream) {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  stream.on(\"error\", (error) => reject(error));\n  stream.on(\"end\", () => resolve());\n  stream.on(\"readable\", () => resolve());\n\n  while (stream.readable) {\n    await promise;\n    let chunk;\n    while ((chunk = stream.read())) {\n      yield chunk;\n    }\n    ({ promise, resolve, reject } = Promise.withResolvers());\n  }\n}\n```\n\n### [Calling withResolvers() on a non-Promise constructor](#calling_withresolvers_on_a_non-promise_constructor)\n\n`Promise.withResolvers()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes `console.log` as the `resolve` and `reject` functions to `executor`:\n\n```\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the native\n    // promise's, but Promise.withResolvers() just returns them, as is.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nconst { promise, resolve, reject } = Promise.withResolvers.call(NotPromise);\nresolve(\"hello\");\n// Logs: Resolved hello\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ES Promise.withResolvers (2023)  <br>\\# sec-promise.withResolvers](https://tc39.es/proposal-promise-with-resolvers/#sec-promise.withResolvers) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.withResolvers() - JavaScript | MDN",
  "description": "The Promise.withResolvers() static method returns an object containing a new Promise object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the Promise() constructor.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",
  "markdown": "# Promise.prototype.then() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`then()`** method of [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the `Promise`. It immediately returns another [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object, allowing you to [chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nthen(onFulfilled)\nthen(onFulfilled, onRejected)\n```\n\n### [Parameters](#parameters)\n\n[`onFulfilled`](#onfulfilled)\n\nA function to asynchronously execute when this promise becomes fulfilled. Its return value becomes the fulfillment value of the promise returned by `then()`. The function is called with the following arguments:\n\n[`value`](#value)\n\nThe value that the promise was fulfilled with.\n\nIf it is not a function, it is internally replaced with an _identity_ function (`(x) => x`) which simply passes the fulfillment value forward.\n\n[`onRejected`](#onrejected) Optional\n\nA function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by `then()`. The function is called with the following arguments:\n\n[`reason`](#reason)\n\nThe value that the promise was rejected with.\n\nIf it is not a function, it is internally replaced with a _thrower_ function (`(x) => { throw x; }`) which throws the rejection reason it received.\n\n### [Return value](#return_value)\n\nReturns a new [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) immediately. This new promise is always pending when returned, regardless of the current promise's status.\n\nOne of the `onFulfilled` and `onRejected` handlers will be executed to handle the current promise's fulfillment or rejection. The call always happens asynchronously, even when the current promise is already settled. The behavior of the returned promise (call it `p`) depends on the handler's execution result, following a specific set of rules. If the handler function:\n\n*   returns a value: `p` gets fulfilled with the returned value as its value.\n*   doesn't return anything: `p` gets fulfilled with `undefined` as its value.\n*   throws an error: `p` gets rejected with the thrown error as its value.\n*   returns an already fulfilled promise: `p` gets fulfilled with that promise's value as its value.\n*   returns an already rejected promise: `p` gets rejected with that promise's value as its value.\n*   returns another pending promise: `p` is pending and becomes fulfilled/rejected with that promise's value as its value immediately after that promise becomes fulfilled/rejected.\n\n## [Description](#description)\n\nThe `then()` method schedules callback functions for the eventual completion of a Promise — either fulfillment or rejection. It is the primitive method of promises: the [thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) protocol expects all promise-like objects to expose a `then()` method, and the [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) and [`finally()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) methods both work by invoking the object's `then()` method.\n\nFor more information about the `onRejected` handler, see the [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) reference.\n\n`then()` returns a new promise object. If you call the `then()` method twice on the same promise object (instead of chaining), then this promise object will have two pairs of settlement handlers. All handlers attached to the same promise object are always called in the order they were added. Moreover, the two promises returned by each call of `then()` start separate chains and do not wait for each other's settlement.\n\n[Thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) objects that arise along the `then()` chain are always [resolved](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function) — the `onFulfilled` handler never receives a thenable object, and any thenable returned by either handler are always resolved before being passed to the next handler. This is because when constructing the new promise, the `resolve` and `reject` functions passed by the `executor` are saved, and when the current promise settles, the respective function will be called with the fulfillment value or rejection reason. The resolving logic comes from the `resolve` function passed by the [`Promise()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor.\n\n`then()` supports subclassing, which means it can be called on instances of subclasses of `Promise`, and the result will be a promise of the subclass type. You can customize the type of the return value through the [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species) property.\n\n## [Examples](#examples)\n\n### [Using the then() method](#using_the_then_method)\n\n```\nconst p1 = new Promise((resolve, reject) => {\n  resolve(\"Success!\");\n  // or\n  // reject(new Error(\"Error!\"));\n});\n\np1.then(\n  (value) => {\n    console.log(value); // Success!\n  },\n  (reason) => {\n    console.error(reason); // Error!\n  },\n);\n```\n\n### [Having a non-function as either parameter](#having_a_non-function_as_either_parameter)\n\n```\nPromise.resolve(1).then(2).then(console.log); // 1\nPromise.reject(1).then(2, 2).then(console.log, console.log); // 1\n```\n\n### [Chaining](#chaining)\n\nThe `then` method returns a new `Promise`, which allows for method chaining.\n\nIf the function passed as handler to `then` returns a `Promise`, an equivalent `Promise` will be exposed to the subsequent `then` in the method chain. The below snippet simulates asynchronous code with the `setTimeout` function.\n\n```\nPromise.resolve(\"foo\")\n  // 1. Receive \"foo\", concatenate \"bar\" to it, and resolve that to the next then\n  .then(\n    (string) =>\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          string += \"bar\";\n          resolve(string);\n        }, 1);\n      }),\n  )\n  // 2. receive \"foobar\", register a callback function to work on that string\n  // and print it to the console, but not before returning the unworked on\n  // string to the next then\n  .then((string) => {\n    setTimeout(() => {\n      string += \"baz\";\n      console.log(string); // foobarbaz\n    }, 1);\n    return string;\n  })\n  // 3. print helpful messages about how the code in this section will be run\n  // before the string is actually processed by the mocked asynchronous code in the\n  // previous then block.\n  .then((string) => {\n    console.log(\n      \"Last Then: oops... didn't bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising\",\n    );\n\n    // Note that `string` will not have the 'baz' bit of it at this point. This\n    // is because we mocked that to happen asynchronously with a setTimeout function\n    console.log(string); // foobar\n  });\n\n// Logs, in order:\n// Last Then: oops... didn't bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising\n// foobar\n// foobarbaz\n```\n\nThe value returned from `then()` is resolved in the same way as [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve). This means [thenable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) are supported, and if the return value is not a promise, it's implicitly wrapped in a `Promise` and then resolved.\n\n```\nconst p2 = new Promise((resolve, reject) => {\n  resolve(1);\n});\n\np2.then((value) => {\n  console.log(value); // 1\n  return value + 1;\n}).then((value) => {\n  console.log(value, \"- A synchronous value works\"); // 2 - A synchronous value works\n});\n\np2.then((value) => {\n  console.log(value); // 1\n});\n```\n\nA `then` call returns a promise that eventually rejects if the function throws an error or returns a rejected Promise.\n\n```\nPromise.resolve()\n  .then(() => {\n    // Makes .then() return a rejected promise\n    throw new Error(\"Oh no!\");\n  })\n  .then(\n    () => {\n      console.log(\"Not called.\");\n    },\n    (error) => {\n      console.error(`onRejected function called: ${error.message}`);\n    },\n  );\n```\n\nIn practice, it is often desirable to [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) rejected promises rather than `then()`'s two-case syntax, as demonstrated below.\n\n```\nPromise.resolve()\n  .then(() => {\n    // Makes .then() return a rejected promise\n    throw new Error(\"Oh no!\");\n  })\n  .catch((error) => {\n    console.error(`onRejected function called: ${error.message}`);\n  })\n  .then(() => {\n    console.log(\"I am always called even if the prior then's promise rejects\");\n  });\n```\n\nIn all other cases, the returned promise eventually fulfills. In the following example, the first `then()` returns `42` wrapped in a fulfilled Promise, even though the previous Promise in the chain was rejected.\n\n```\nPromise.reject()\n  .then(\n    () => 99,\n    () => 42,\n  ) // onRejected returns 42 which is wrapped in a fulfilled Promise\n  .then((solution) => console.log(`Resolved with ${solution}`)); // Fulfilled with 42\n```\n\nIf `onFulfilled` returns a promise, the return value of `then` will be fulfilled/rejected based on the eventual state of that promise.\n\n```\nfunction resolveLater(resolve, reject) {\n  setTimeout(() => {\n    resolve(10);\n  }, 1000);\n}\nfunction rejectLater(resolve, reject) {\n  setTimeout(() => {\n    reject(new Error(\"Error\"));\n  }, 1000);\n}\n\nconst p1 = Promise.resolve(\"foo\");\nconst p2 = p1.then(() => {\n  // Return promise here, that will be resolved to 10 after 1 second\n  return new Promise(resolveLater);\n});\np2.then(\n  (v) => {\n    console.log(\"resolved\", v); // \"resolved\", 10\n  },\n  (e) => {\n    // not called\n    console.error(\"rejected\", e);\n  },\n);\n\nconst p3 = p1.then(() => {\n  // Return promise here, that will be rejected with 'Error' after 1 second\n  return new Promise(rejectLater);\n});\np3.then(\n  (v) => {\n    // not called\n    console.log(\"resolved\", v);\n  },\n  (e) => {\n    console.error(\"rejected\", e); // \"rejected\", 'Error'\n  },\n);\n```\n\nYou can use chaining to implement one function with a Promise-based API on top of another such function.\n\n```\nfunction fetchCurrentData() {\n  // The fetch() API returns a Promise. This function\n  // exposes a similar API, except the fulfillment\n  // value of this function's Promise has had more\n  // work done on it.\n  return fetch(\"current-data.json\").then((response) => {\n    if (response.headers.get(\"content-type\") !== \"application/json\") {\n      throw new TypeError();\n    }\n    const j = response.json();\n    // maybe do something with j\n\n    // fulfillment value given to user of\n    // fetchCurrentData().then()\n    return j;\n  });\n}\n```\n\n### [Asynchronicity of then()](#asynchronicity_of_then)\n\nThe following is an example to demonstrate the asynchronicity of the `then` method.\n\n```\n// Using a resolved promise 'resolvedProm' for example,\n// the function call 'resolvedProm.then(...)' returns a new promise immediately,\n// but its handler '(value) => {...}' will get called asynchronously as demonstrated by the console.logs.\n// the new promise is assigned to 'thenProm',\n// and thenProm will be resolved with the value returned by handler\nconst resolvedProm = Promise.resolve(33);\nconsole.log(resolvedProm);\n\nconst thenProm = resolvedProm.then((value) => {\n  console.log(\n    `this gets called after the end of the main stack. the value received is: ${value}, the value returned is: ${\n      value + 1\n    }`,\n  );\n  return value + 1;\n});\nconsole.log(thenProm);\n\n// Using setTimeout, we can postpone the execution of a function to the moment the stack is empty\nsetTimeout(() => {\n  console.log(thenProm);\n});\n\n// Logs, in order:\n// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseResult]]: 33}\n// Promise {[[PromiseStatus]]: \"pending\", [[PromiseResult]]: undefined}\n// \"this gets called after the end of the main stack. the value received is: 33, the value returned is: 34\"\n// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseResult]]: 34}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-promise.prototype.then](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.prototype.then) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Promise.prototype.then() - JavaScript | MDN",
  "description": "The then() method of Promise instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the Promise. It immediately returns another Promise object, allowing you to chain calls to other promise methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString",
  "markdown": "# Date.prototype.toLocaleDateString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleDateString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string with a language-sensitive representation of the date portion of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleDateString()\ntoLocaleDateString(locales)\ntoLocaleDateString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. The `timeStyle` option must be undefined, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) would be thrown. If `weekday`, `year`, `month`, and `day` are all undefined, then `year`, `month`, and `day` will be set to `\"numeric\"`.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the date portion of the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`, where `options` has been normalized as described above.\n\n**Note:** Most of the time, the formatting returned by `toLocaleDateString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleDateString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleDateString()](#using_tolocaledatestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleDateString() without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(date.toLocaleDateString());\n// \"12/11/2012\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleDateString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleDateStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized date formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses month-day-year order\nconsole.log(date.toLocaleDateString(\"en-US\"));\n// \"12/20/2012\"\n\n// British English uses day-month-year order\nconsole.log(date.toLocaleDateString(\"en-GB\"));\n// \"20/12/2012\"\n\n// Korean uses year-month-day order\nconsole.log(date.toLocaleDateString(\"ko-KR\"));\n// \"2012. 12. 20.\"\n\n// Event for Persian, It's hard to manually convert date to Solar Hijri\nconsole.log(date.toLocaleDateString(\"fa-IR\"));\n// \"۱۳۹۱/۹/۳۰\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(date.toLocaleDateString(\"ar-EG\"));\n// \"٢٠‏/١٢‏/٢٠١٢\"\n\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(date.toLocaleDateString(\"ja-JP-u-ca-japanese\"));\n// \"24/12/20\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(date.toLocaleDateString([\"ban\", \"id\"]));\n// \"20/12/2012\"\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleDateString()` can be customized using the `options` parameter:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Request a weekday along with a long date\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(date.toLocaleDateString(\"de-DE\", options));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// An application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(date.toLocaleDateString(\"en-US\", options));\n// \"Thursday, December 20, 2012, UTC\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.tolocaledatestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.tolocaledatestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-date.prototype.tolocaledatestring](https://tc39.es/ecma402/#sup-date.prototype.tolocaledatestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toLocaleDateString() - JavaScript | MDN",
  "description": "The toLocaleDateString() method of Date instances returns a string with a language-sensitive representation of the date portion of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now",
  "markdown": "# Date.now() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Date.now()`** static method returns the number of milliseconds elapsed since the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of the current time.\n\n## [Description](#description)\n\n### [Reduced time precision](#reduced_time_precision)\n\nTo offer protection against timing attacks and [fingerprinting](https://developer.mozilla.org/en-US/docs/Glossary/Fingerprinting), the precision of `Date.now()` might get rounded depending on browser settings. In Firefox, the `privacy.reduceTimerPrecision` preference is enabled by default and defaults to 2ms. You can also enable `privacy.resistFingerprinting`, in which case the precision will be 100ms or the value of `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`, whichever is larger.\n\nFor example, with reduced time precision, the result of `Date.now()` will always be a multiple of 2, or a multiple of 100 (or `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`) with `privacy.resistFingerprinting` enabled.\n\n```\n// reduced time precision (2ms) in Firefox 60\nDate.now();\n// Might be:\n// 1519211809934\n// 1519211810362\n// 1519211811670\n// …\n\n// reduced time precision with `privacy.resistFingerprinting` enabled\nDate.now();\n// Might be:\n// 1519129853500\n// 1519129858900\n// 1519129864400\n// …\n```\n\n## [Examples](#examples)\n\n### [Measuring time elapsed](#measuring_time_elapsed)\n\nYou can use `Date.now()` to get the current time in milliseconds, then subtract a previous time to find out how much time elapsed between the two calls.\n\n```\nconst start = Date.now();\ndoSomeLongRunningProcess();\nconsole.log(`Time elapsed: ${Date.now() - start} ms`);\n```\n\nFor more complex scenarios, you may want to use the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/High_precision_timing) instead.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.now](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.now) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.now() - JavaScript | MDN",
  "description": "The Date.now() static method returns the number of milliseconds elapsed since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime",
  "markdown": "# Date.prototype.getTime() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTime()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the number of milliseconds for this date since the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of this date. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\n`Date` objects are fundamentally represented by a [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), and this method allows you to retrieve the timestamp. You can use this method to help assign a date and time to another [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. This method is functionally equivalent to the [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) method.\n\n## [Examples](#examples)\n\n### [Using getTime() for copying dates](#using_gettime_for_copying_dates)\n\nConstructing a date object with the identical time value.\n\n```\n// Since month is zero based, birthday will be January 10, 1995\nconst birthday = new Date(1994, 12, 10);\nconst copy = new Date();\ncopy.setTime(birthday.getTime());\n```\n\n### [Measuring execution time](#measuring_execution_time)\n\nSubtracting two subsequent `getTime()` calls on newly generated [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. See also [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now) to prevent instantiating unnecessary [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects.\n\n```\nlet end, start;\n\nstart = new Date();\nfor (let i = 0; i < 1000; i++) {\n  Math.sqrt(i);\n}\nend = new Date();\n\nconsole.log(`Operation took ${end.getTime() - start.getTime()} msec`);\n```\n\n**Note:** In browsers that support the [Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance_API)'s high-resolution time feature, [`Performance.now()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) can provide more reliable and precise measurements of elapsed time than [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.gettime](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.gettime) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getTime() - JavaScript | MDN",
  "description": "The getTime() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear",
  "markdown": "# Date.prototype.setFullYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setFullYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the year, month, and/or day of month for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetFullYear(yearValue)\nsetFullYear(yearValue, monthValue)\nsetFullYear(yearValue, monthValue, dateValue)\n```\n\n### [Parameters](#parameters)\n\n[`yearValue`](#yearvalue)\n\nAn integer representing the year. For example, 1995.\n\n[`monthValue`](#monthvalue) Optional\n\nAn integer representing the month: 0 for January, 1 for February, and so on.\n\n[`dateValue`](#datevalue) Optional\n\nAn integer between 1 and 31 representing the day of the month. If you specify `dateValue`, you must also specify `monthValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `monthValue` and `dateValue` parameters, the same values as what are returned by [`getMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth) and [`getDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate) are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object are updated accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1 (`yearValue + 1`), and 3 is used for the month.\n\n## [Examples](#examples)\n\n### [Using setFullYear()](#using_setfullyear)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setFullYear(1997);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setfullyear](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setfullyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setFullYear() - JavaScript | MDN",
  "description": "The setFullYear() method of Date instances changes the year, month, and/or day of month for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth",
  "markdown": "# Date.prototype.getMonth() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getMonth()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 11, representing the month for the given date according to local time: 0 for January, 1 for February, and so on. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nThe return value of `getMonth()` is zero-based, which is useful for indexing into arrays of months, for example:\n\n```\nconst valentines = new Date(\"1995-02-14\");\nconst month = valentines.getMonth();\nconst monthNames = [\"January\", \"February\", \"March\" /* , … */];\n\nconsole.log(monthNames[month]); // \"February\"\n```\n\nHowever, for the purpose of internationalization, you should prefer using [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) with the `options` parameter instead.\n\n```\nconst options = { month: \"long\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(valentines));\n// \"February\"\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(valentines));\n// \"Februar\"\n```\n\n## [Examples](#examples)\n\n### [Using getMonth()](#using_getmonth)\n\nThe `month` variable has value `11`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst month = xmas95.getMonth();\n\nconsole.log(month); // 11\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getmonth](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getmonth) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getMonth() - JavaScript | MDN",
  "description": "The getMonth() method of Date instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay",
  "markdown": "# Date.prototype.getDay() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getDay()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see [`Date.prototype.getDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 6, representing the day of the week for the given date according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nThe return value of `getDay()` is zero-based, which is useful for indexing into arrays of days, for example:\n\n```\nconst valentines = new Date(\"1995-02-14\");\nconst day = valentines.getDay();\nconst dayNames = [\"Sunday\", \"Monday\", \"Tuesday\" /* , … */];\n\nconsole.log(dayNames[day]); // \"Monday\"\n```\n\nHowever, for the purpose of internationalization, you should prefer using [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) with the `options` parameter instead.\n\n```\nconst options = { weekday: \"long\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(valentines));\n// \"Monday\"\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(valentines));\n// \"Montag\"\n```\n\n## [Examples](#examples)\n\n### [Using getDay()](#using_getday)\n\nThe `weekday` variable has value `1`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`, because December 25, 1995 is a Monday.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst weekday = xmas95.getDay();\n\nconsole.log(weekday); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getday](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getday) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getDay() - JavaScript | MDN",
  "description": "The getDay() method of Date instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see Date.prototype.getDate().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear",
  "markdown": "# Date.prototype.getFullYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getFullYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the year for this date according to local time.\n\nUse this method instead of the [`getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear) method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer representing the year for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nUnlike [`getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear), the value returned by `getFullYear()` is an absolute number. For dates between the years 1000 and 9999, `getFullYear()` returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.\n\n## [Examples](#examples)\n\n### [Using getFullYear()](#using_getfullyear)\n\nThe `fullYear` variable has value `1995`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst fullYear = xmas95.getFullYear();\n\nconsole.log(fullYear); // 1995\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getfullyear](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getfullyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getFullYear() - JavaScript | MDN",
  "description": "The getFullYear() method of Date instances returns the year for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy",
  "markdown": "# Proxy() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Proxy()`** constructor creates [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, handler)\n```\n\n**Note:** `Proxy()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nA target object to wrap with `Proxy`. It can be any sort of object, including a native array, a function, or even another proxy.\n\n[`handler`](#handler)\n\nAn object whose properties are functions that define the behavior of the proxy when an operation is performed on it.\n\n## [Description](#description)\n\nUse the `Proxy()` constructor to create a new `Proxy` object. This constructor takes two mandatory arguments:\n\n*   `target` is the object for which you want to create the proxy\n*   `handler` is the object that defines the custom behavior of the proxy.\n\nAn empty handler will create a proxy that behaves, in almost all respects, exactly like the target. By defining any of a set group of functions on the `handler` object, you can customize specific aspects of the proxy's behavior. For example, by defining `get()` you can provide a customized version of the target's [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n\n### [Handler functions](#handler_functions)\n\n## [Examples](#examples)\n\n### [Selectively proxy property accessors](#selectively_proxy_property_accessors)\n\nIn this example the target has two properties, `notProxied` and `proxied`. We define a handler that returns a different value for `proxied`, and lets any other accesses through to the target.\n\n```\nconst target = {\n  notProxied: \"original value\",\n  proxied: \"original value\",\n};\n\nconst handler = {\n  get(target, prop, receiver) {\n    if (prop === \"proxied\") {\n      return \"replaced value\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy = new Proxy(target, handler);\n\nconsole.log(proxy.notProxied); // \"original value\"\nconsole.log(proxy.proxied); // \"replaced value\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-constructor](https://tc39.es/ecma262/multipage/reflection.html#sec-proxy-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Proxy() constructor - JavaScript | MDN",
  "description": "The Proxy() constructor creates Proxy objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable",
  "markdown": "# Proxy.revocable() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Proxy.revocable()`** static method creates a revocable [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) object.\n\n## [Syntax](#syntax)\n\n```\nProxy.revocable(target, handler)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nA target object to wrap with `Proxy`. It can be any sort of object, including a native array, a function, or even another proxy.\n\n[`handler`](#handler)\n\nAn object whose properties are functions defining the behavior of `proxy` when an operation is performed on it.\n\n### [Return value](#return_value)\n\nA plain object with the following two properties:\n\n[`proxy`](#proxy)\n\nA Proxy object exactly the same as one created with a [`new Proxy(target, handler)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) call.\n\n[`revoke`](#revoke)\n\nA function with no parameters to revoke (switch off) the `proxy`.\n\n## [Description](#description)\n\nThe `Proxy.revocable()` factory function is the same as the [`Proxy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) constructor, except that in addition to creating a proxy object, it also creates a `revoke` function that can be called to disable the proxy. The proxy object and the `revoke` function are wrapped in a plain object.\n\nThe `revoke` function does not take any parameters, nor does it rely on the `this` value. The created `proxy` object is attached to the `revoke` function as a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) that the `revoke` function accesses on itself when called (the existence of the private property is not observable from the outside, but it has implications on how garbage collection happens). The `proxy` object is _not_ captured within the [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) of the `revoke` function (which will make garbage collection of `proxy` impossible if `revoke` is still alive).\n\nAfter the `revoke()` function gets called, the proxy becomes unusable: any trap to a handler throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). Once a proxy is revoked, it remains revoked, and calling `revoke()` again has no effect — in fact, the call to `revoke()` detaches the `proxy` object from the `revoke` function, so the `revoke` function will not be able to access the proxy again at all. If the proxy is not referenced elsewhere, it will then be eligible for garbage collection. The `revoke` function also detaches `target` and `handler` from the `proxy`, so if `target` is not referenced elsewhere, it will also be eligible for garbage collection, even when its proxy is still alive, since there's no longer a way to meaningfully interact with the target object.\n\nLetting users interact with an object through a revocable proxy allows you to [control the lifetime](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management) of the object exposed to the user — you can make the object garbage-collectable even when the user is still holding a reference to its proxy.\n\n## [Examples](#examples)\n\n### [Using Proxy.revocable()](#using_proxy.revocable)\n\n```\nconst revocable = Proxy.revocable(\n  {},\n  {\n    get(target, name) {\n      return `[[${name}]]`;\n    },\n  },\n);\nconst proxy = revocable.proxy;\nconsole.log(proxy.foo); // \"[[foo]]\"\n\nrevocable.revoke();\n\nconsole.log(proxy.foo); // TypeError is thrown\nproxy.foo = 1; // TypeError again\ndelete proxy.foo; // still TypeError\ntypeof proxy; // \"object\", typeof doesn't trigger any trap\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy.revocable](https://tc39.es/ecma262/multipage/reflection.html#sec-proxy.revocable) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Proxy.revocable() - JavaScript | MDN",
  "description": "The Proxy.revocable() static method creates a revocable Proxy object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get",
  "markdown": "# handler.get() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.get()`** method is a trap for the `[[Get]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  get(target, property, receiver) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `get()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n[`receiver`](#receiver)\n\nThe `this` value for getters; see [`Reflect.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get). This is usually either the proxy itself or an object that inherits from the proxy.\n\n### [Return value](#return_value)\n\nThe `get()` method can return any value, representing the property value.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   Property access: `proxy[foo]` and `proxy.bar`\n*   [`Reflect.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get)\n\nOr any other operation that invokes the `[[Get]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[Get]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The value reported for a property must be the same as the value of the corresponding target object property, if the target object property is a non-writable, non-configurable own data property. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, writable: false` for the property on `target`, then the trap must return the same value as the `value` attribute in the `target`'s property descriptor.\n*   The value reported for a property must be `undefined`, if the corresponding target object property is a non-configurable own accessor property that has an undefined getter. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, get: undefined` for the property on `target`, then the trap must return `undefined`.\n\n## [Examples](#examples)\n\n### [Trap for getting a property value](#trap_for_getting_a_property_value)\n\nThe following code traps getting a property value.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    get(target, property, receiver) {\n      console.log(`called: ${property}`);\n      return 10;\n    },\n  },\n);\n\nconsole.log(p.a);\n// \"called: a\"\n// 10\n```\n\nThe following code violates an invariant.\n\n```\nconst obj = {};\nObject.defineProperty(obj, \"a\", {\n  configurable: false,\n  enumerable: false,\n  value: 10,\n  writable: false,\n});\n\nconst p = new Proxy(obj, {\n  get(target, property) {\n    return 20;\n  },\n});\n\np.a; // TypeError is thrown\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.get() - JavaScript | MDN",
  "description": "The handler.get() method is a trap for the [[Get]] object internal method, which is used by operations such as property accessors.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions",
  "markdown": "# handler.preventExtensions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.preventExtensions()`** method is a trap for the `[[PreventExtensions]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  preventExtensions(target) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameter is passed to the `preventExtensions()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n### [Return value](#return_value)\n\nThe `preventExtensions()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the operation was successful. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nMany operations, including [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the `[[PreventExtensions]]` internal method returns `false`.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n*   [`Reflect.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions)\n*   [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n*   [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\nOr any other operation that invokes the `[[PreventExtensions]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[PreventExtensions]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The result is only `true` if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) on the target object returns `false` after calling `handler.preventExtensions()`.\n\n## [Examples](#examples)\n\n### [Trapping of preventExtensions](#trapping_of_preventextensions)\n\nThe following code traps [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions).\n\n```\nconst p = new Proxy(\n  {},\n  {\n    preventExtensions(target) {\n      console.log(\"called\");\n      Object.preventExtensions(target);\n      return true;\n    },\n  },\n);\n\nconsole.log(Object.preventExtensions(p));\n// \"called\"\n// false\n```\n\nThe following code violates the invariant.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    preventExtensions(target) {\n      return true;\n    },\n  },\n);\n\nObject.preventExtensions(p); // TypeError is thrown\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-preventextensions](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-preventextensions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.preventExtensions() - JavaScript | MDN",
  "description": "The handler.preventExtensions() method is a trap for the [[PreventExtensions]] object internal method, which is used by operations such as Object.preventExtensions().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf",
  "markdown": "# handler.getPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.getPrototypeOf()`** method is a trap for the `[[GetPrototypeOf]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  getPrototypeOf(target) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameter is passed to the `getPrototypeOf()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n### [Return value](#return_value)\n\nThe `getPrototypeOf()` method must return an object or `null`, representing the prototype of the target object.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\n### [Invariants](#invariants)\n\nThe proxy's `[[GetPrototypeOf]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The result must be either an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) or `null`.\n*   If the target object is not extensible (that is, [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`), the result must be the same as the result of `Reflect.getPrototypeOf(target)`.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\nconst obj = {};\nconst proto = {};\nconst handler = {\n  getPrototypeOf(target) {\n    console.log(target === obj); // true\n    console.log(this === handler); // true\n    return proto;\n  },\n};\n\nconst p = new Proxy(obj, handler);\nconsole.log(Object.getPrototypeOf(p) === proto); // true\n```\n\n### [Five ways to trigger the getPrototypeOf trap](#five_ways_to_trigger_the_getprototypeof_trap)\n\n```\nconst obj = {};\nconst p = new Proxy(obj, {\n  getPrototypeOf(target) {\n    return Array.prototype;\n  },\n});\nconsole.log(\n  Object.getPrototypeOf(p) === Array.prototype, // true\n  Reflect.getPrototypeOf(p) === Array.prototype, // true\n  p.__proto__ === Array.prototype, // true\n  Array.prototype.isPrototypeOf(p), // true\n  p instanceof Array, // true\n);\n```\n\n### [Two kinds of exceptions](#two_kinds_of_exceptions)\n\n```\nconst obj = {};\nconst p = new Proxy(obj, {\n  getPrototypeOf(target) {\n    return \"foo\";\n  },\n});\nObject.getPrototypeOf(p); // TypeError: \"foo\" is not an object or null\n\nconst obj2 = Object.preventExtensions({});\nconst p2 = new Proxy(obj2, {\n  getPrototypeOf(target) {\n    return {};\n  },\n});\nObject.getPrototypeOf(p2); // TypeError: expected same prototype value\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-getprototypeof](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.getPrototypeOf() - JavaScript | MDN",
  "description": "The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] object internal method, which is used by operations such as Object.getPrototypeOf().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has",
  "markdown": "# handler.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.has()`** method is a trap for the `[[HasProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  has(target, property) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to `has()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n### [Return value](#return_value)\n\nThe `has()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the property exists. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   The [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator: `foo in proxy`\n*   [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) check: `with(proxy) { (foo); }`\n*   [`Reflect.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has)\n\nOr any other operation that invokes the `[[HasProperty]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[HasProperty]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false` for the property on `target`, the trap must return `true`.\n*   A property cannot be reported as non-existent, if it exists as an own property of the target object and the target object is not extensible. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`, and [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns a property descriptor for the property on `target`, the trap must return `true`.\n\n## [Examples](#examples)\n\n### [Trapping the in operator](#trapping_the_in_operator)\n\nThe following code traps the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    has(target, prop) {\n      console.log(`called: ${prop}`);\n      return true;\n    },\n  },\n);\n\nconsole.log(\"a\" in p);\n// \"called: a\"\n// true\n```\n\nThe following code violates an invariant.\n\n```\nconst obj = { a: 10 };\nObject.preventExtensions(obj);\n\nconst p = new Proxy(obj, {\n  has(target, prop) {\n    return false;\n  },\n});\n\n\"a\" in p; // TypeError is thrown\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.has() - JavaScript | MDN",
  "description": "The handler.has() method is a trap for the [[HasProperty]] object internal method, which is used by operations such as the in operator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor",
  "markdown": "# handler.getOwnPropertyDescriptor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.getOwnPropertyDescriptor()`** method is a trap for the `[[GetOwnProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  getOwnPropertyDescriptor(target, property) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `getOwnPropertyDescriptor()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n### [Return value](#return_value)\n\nThe `getOwnPropertyDescriptor()` method must return an object or `undefined`, representing the property descriptor. Missing attributes are normalized in the same way as [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n*   [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor)\n\nOr any other operation that invokes the `[[GetOwnProperty]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[GetOwnProperty]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The result must be either an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) or `undefined`.\n*   A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false` for the property on `target`, then the trap must not return `undefined`.\n*   A property cannot be reported as non-existent, if it exists as an own property of a non-extensible target object. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` for the target object, then the trap must not return `undefined`.\n*   A property cannot be reported as existent, if it does not exist as an own property of the target object and the target object is not extensible. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` for the target object, and [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `undefined` for the property on `target`, then the trap must return `undefined`.\n*   A property cannot be reported as non-configurable, unless it exists as a non-configurable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `undefined` or `configurable: true` for the property on `target`, then the trap must not return `configurable: false`.\n*   A property cannot be reported as both non-configurable and non-writable, unless it exists as a non-configurable, non-writable own property of the target object. That is, in addition to the previous invariant, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, writable: true` for the property on `target`, then the trap must not return `configurable: false, writable: false`.\n*   If a property has a corresponding property on the target object, then the target object property's descriptor must be compatible with `descriptor`. That is, pretending `target` is an ordinary object, then [`Object.defineProperty(target, property, resultObject)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) must not throw an error. The `Object.defineProperty()` reference contains more information, but to summarize, when the target property is non-configurable, the following must hold:\n    *   `configurable`, `enumerable`, `get`, and `set` must be the same as original. `writable` must also be the original by virtue of the previous invariant.\n    *   the property must stay as data or accessor\n    *   the `value` attribute can only be changed if `writable` is `true`\n\n## [Examples](#examples)\n\n### [Trapping of getOwnPropertyDescriptor](#trapping_of_getownpropertydescriptor)\n\nThe following code traps [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor).\n\n```\nconst p = new Proxy(\n  { a: 20 },\n  {\n    getOwnPropertyDescriptor(target, prop) {\n      console.log(`called: ${prop}`);\n      return { configurable: true, enumerable: true, value: 10 };\n    },\n  },\n);\n\nconsole.log(Object.getOwnPropertyDescriptor(p, \"a\").value);\n// \"called: a\"\n// 10\n```\n\nThe following code violates an invariant.\n\n```\nconst obj = { a: 10 };\nObject.preventExtensions(obj);\nconst p = new Proxy(obj, {\n  getOwnPropertyDescriptor(target, prop) {\n    return undefined;\n  },\n});\n\nObject.getOwnPropertyDescriptor(p, \"a\"); // TypeError is thrown\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.getOwnPropertyDescriptor() - JavaScript | MDN",
  "description": "The handler.getOwnPropertyDescriptor() method is a trap for the [[GetOwnProperty]] object internal method, which is used by operations such as Object.getOwnPropertyDescriptor().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible",
  "markdown": "# handler.isExtensible() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.isExtensible()`** method is a trap for the `[[IsExtensible]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  isExtensible(target) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameter is passed to the `isExtensible()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n### [Return value](#return_value)\n\nThe `isExtensible()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the target object is extensible. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n*   [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible)\n\nOr any other operation that invokes the `[[IsExtensible]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[IsExtensible]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The result must be the same as [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) on the target object.\n\n## [Examples](#examples)\n\n### [Trapping of isExtensible](#trapping_of_isextensible)\n\nThe following code traps [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible).\n\n```\nconst p = new Proxy(\n  {},\n  {\n    isExtensible(target) {\n      console.log(\"called\");\n      return true;\n    },\n  },\n);\n\nconsole.log(Object.isExtensible(p));\n// \"called\"\n// true\n```\n\nThe following code violates the invariant.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    isExtensible(target) {\n      return false;\n    },\n  },\n);\n\nObject.isExtensible(p); // TypeError is thrown\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-isextensible](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-isextensible) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.isExtensible() - JavaScript | MDN",
  "description": "The handler.isExtensible() method is a trap for the [[IsExtensible]] object internal method, which is used by operations such as Object.isExtensible().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty",
  "markdown": "# handler.defineProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.defineProperty()`** method is a trap for the `[[DefineOwnProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  defineProperty(target, property, descriptor) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `defineProperty()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n[`descriptor`](#descriptor)\n\nThe descriptor for the property being defined or modified.\n\n### [Return value](#return_value)\n\nThe `defineProperty()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the property has been successfully defined. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nMany operations, including [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the `[[DefineOwnProperty]]` internal method returns `false`.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n*   [`Reflect.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty)\n\nOr any other operation that invokes the `[[DefineOwnProperty]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[DefineOwnProperty]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   A property cannot be added, if the target object is not extensible. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`, and [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `undefined` for the property on `target`, then the trap must return a falsy value.\n*   A property cannot be non-configurable, unless there exists a corresponding non-configurable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `undefined` or `configurable: true` for the property on `target`, and `descriptor.configurable` is `false`, then the trap must return a falsy value.\n*   A non-configurable property cannot be non-writable, unless there exists a corresponding non-configurable, non-writable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, writable: true` for the property on `target`, and `descriptor.writable` is `false`, then the trap must return a falsy value.\n*   If a property has a corresponding property on the target object, then the target object property's descriptor must be compatible with `descriptor`. That is, pretending `target` is an ordinary object, and [`Object.defineProperty(target, property, descriptor)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) would throw an error, then the trap must return a falsy value. The `Object.defineProperty()` reference contains more information, but to summarize, when the target property is non-configurable, the following must hold:\n    *   `configurable`, `enumerable`, `get`, and `set` cannot be changed\n    *   the property cannot be switched between data and accessor\n    *   the `writable` attribute can only be changed from `true` to `false`\n    *   the `value` attribute can only be changed if `writable` is `true`\n\n## [Examples](#examples)\n\n### [Trapping of defineProperty](#trapping_of_defineproperty)\n\nThe following code traps [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n```\nconst p = new Proxy(\n  {},\n  {\n    defineProperty(target, prop, descriptor) {\n      console.log(`called: ${prop}`);\n      return true;\n    },\n  },\n);\n\nconst desc = { configurable: true, enumerable: true, value: 10 };\nObject.defineProperty(p, \"a\", desc); // \"called: a\"\n```\n\nWhen calling [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) or [`Reflect.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty), the `descriptor` passed to `defineProperty()` trap has one restriction—only following properties are usable (non-standard properties will be ignored):\n\n*   `enumerable`\n*   `configurable`\n*   `writable`\n*   `value`\n*   `get`\n*   `set`\n\n```\nconst p = new Proxy(\n  {},\n  {\n    defineProperty(target, prop, descriptor) {\n      console.log(descriptor);\n      return Reflect.defineProperty(target, prop, descriptor);\n    },\n  },\n);\n\nObject.defineProperty(p, \"name\", {\n  value: \"proxy\",\n  type: \"custom\",\n}); // { value: 'proxy' }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.defineProperty() - JavaScript | MDN",
  "description": "The handler.defineProperty() method is a trap for the [[DefineOwnProperty]] object internal method, which is used by operations such as Object.defineProperty().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf",
  "markdown": "# handler.setPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.setPrototypeOf()`** method is a trap for the `[[SetPrototypeOf]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  setPrototypeOf(target, prototype) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `setPrototypeOf()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`prototype`](#prototype)\n\nThe object's new prototype or `null`.\n\n### [Return value](#return_value)\n\nThe `setPrototypeOf()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the prototype was successfully changed. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nMany operations, including [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the `[[SetPrototypeOf]]` internal method returns `false`.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n*   [`Reflect.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf)\n\nOr any other operation that invokes the `[[SetPrototypeOf]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[SetPrototypeOf]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   If the target object is not extensible, the prototype cannot be changed. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`, and `prototype` is not the same as the result of `Reflect.getPrototypeOf(target)`, then the trap must return a falsy value.\n\n## [Examples](#examples)\n\nIf you want to disallow setting a new prototype for your object, your handler's `setPrototypeOf()` method can either return `false`, or it can throw an exception.\n\n### [Approach 1: Returning false](#approach_1_returning_false)\n\nThis approach means that any mutating operation that throws an exception on failure to mutate, must create the exception itself.\n\nFor example, [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) will create and throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) itself. If the mutation is performed by an operation that _doesn't_ ordinarily throw in case of failure, such as [`Reflect.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf), no exception will be thrown.\n\n```\nconst handlerReturnsFalse = {\n  setPrototypeOf(target, newProto) {\n    return false;\n  },\n};\n\nconst newProto = {},\n  target = {};\n\nconst p1 = new Proxy(target, handlerReturnsFalse);\nObject.setPrototypeOf(p1, newProto); // throws a TypeError\nReflect.setPrototypeOf(p1, newProto); // returns false\n```\n\n### [Approach 2: Throwing an Exception](#approach_2_throwing_an_exception)\n\nThe latter approach will cause _any_ operation that attempts to mutate, to throw. This approach is best if you want even non-throwing operations to throw on failure, or you want to throw a custom exception value.\n\n```\nconst handlerThrows = {\n  setPrototypeOf(target, newProto) {\n    throw new Error(\"custom error\");\n  },\n};\n\nconst newProto = {},\n  target = {};\n\nconst p2 = new Proxy(target, handlerThrows);\nObject.setPrototypeOf(p2, newProto); // throws new Error(\"custom error\")\nReflect.setPrototypeOf(p2, newProto); // throws new Error(\"custom error\")\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.setPrototypeOf() - JavaScript | MDN",
  "description": "The handler.setPrototypeOf() method is a trap for the [[SetPrototypeOf]] object internal method, which is used by operations such as Object.setPrototypeOf().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set",
  "markdown": "# handler.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.set()`** method is a trap for the `[[Set]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as using [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to set a property's value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  set(target, property, value, receiver) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `set()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n[`value`](#value)\n\nThe new value of the property to set.\n\n[`receiver`](#receiver)\n\nThe `this` value for setters; see [`Reflect.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set). This is usually either the proxy itself or an object that inherits from the proxy.\n\n### [Return value](#return_value)\n\nThe `set()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the assignment succeeded. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nMany operations, including using property accessors in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the `[[Set]]` internal method returns `false`.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   Property assignment: `proxy[foo] = bar` and `proxy.foo = bar`\n*   [`Reflect.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set)\n\nOr any other operation that invokes the `[[Set]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[Set]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   Cannot change the value of a property to be different from the value of the corresponding target object property, if the corresponding target object property is a non-writable, non-configurable own data property. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, writable: false` for the property on `target`, and `value` is different from the `value` attribute in the `target`'s property descriptor, then the trap must return a falsy value.\n*   Cannot set the value of a property if the corresponding target object property is a non-configurable own accessor property that has an undefined setter. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false, set: undefined` for the property on `target`, then the trap must return a falsy value.\n\n## [Examples](#examples)\n\n### [Trap setting of a property value](#trap_setting_of_a_property_value)\n\nThe following code traps setting a property value.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    set(target, prop, value, receiver) {\n      target[prop] = value;\n      console.log(`property set: ${prop} = ${value}`);\n      return true;\n    },\n  },\n);\n\nconsole.log(\"a\" in p); // false\n\np.a = 10; // \"property set: a = 10\"\nconsole.log(\"a\" in p); // true\nconsole.log(p.a); // 10\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.set() - JavaScript | MDN",
  "description": "The handler.set() method is a trap for the [[Set]] object internal method, which is used by operations such as using property accessors to set a property's value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys",
  "markdown": "# handler.ownKeys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.ownKeys()`** method is a trap for the `[[OwnPropertyKeys]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), [`Reflect.ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys), etc.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  ownKeys(target) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameter is passed to the `ownKeys()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n### [Return value](#return_value)\n\nThe `ownKeys()` method must return an [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array-like_objects) where each element is either a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) containing no duplicate items.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n*   [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)\n*   [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n*   [`Reflect.ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys)\n\nOr any other operation that invokes the `[[OwnPropertyKeys]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[OwnPropertyKeys]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The result is an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).\n*   The list of keys contains no duplicate values.\n*   The type of each key is either a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol).\n*   The result list must contain the keys of all non-configurable own properties of the target object. That is, for all keys returned by [`Reflect.ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys) on the target object, if the key reports `configurable: false` by [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor), then the key must be included in the result List.\n*   If the target object is not extensible, then the result list must contain all the keys of the own properties of the target object and no other values. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`, then the result list must contain the same values as the result of [`Reflect.ownKeys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys) on `target`.\n\n## [Examples](#examples)\n\n### [Trapping of getOwnPropertyNames](#trapping_of_getownpropertynames)\n\nThe following code traps [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames).\n\n```\nconst p = new Proxy(\n  {},\n  {\n    ownKeys(target) {\n      console.log(\"called\");\n      return [\"a\", \"b\", \"c\"];\n    },\n  },\n);\n\nconsole.log(Object.getOwnPropertyNames(p));\n// \"called\"\n// [ 'a', 'b', 'c' ]\n```\n\nThe following code violates an invariant.\n\n```\nconst obj = {};\nObject.defineProperty(obj, \"a\", {\n  configurable: false,\n  enumerable: true,\n  value: 10,\n});\n\nconst p = new Proxy(obj, {\n  ownKeys(target) {\n    return [123, 12.5, true, false, undefined, null, {}, []];\n  },\n});\n\nconsole.log(Object.getOwnPropertyNames(p));\n\n// TypeError: proxy [[OwnPropertyKeys]] must return an array\n// with only string and symbol elements\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.ownKeys() - JavaScript | MDN",
  "description": "The handler.ownKeys() method is a trap for the [[OwnPropertyKeys]] object internal method, which is used by operations such as Object.keys(), Reflect.ownKeys(), etc.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply",
  "markdown": "# handler.apply() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.apply()`** method is a trap for the `[[Call]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as function calls.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  apply(target, thisArg, argumentsList) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `apply()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target callable object.\n\n[`thisArg`](#thisarg)\n\nThe `this` argument for the call.\n\n[`argumentsList`](#argumentslist)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) containing the arguments passed to the function.\n\n### [Return value](#return_value)\n\nThe `apply()` method can return any value, representing the return value of the function call.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   Function call: `proxy(...args)`\n*   [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) and [`Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n*   [`Reflect.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply)\n\nOr any other operation that invokes the `[[Call]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[Call]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The `target` must be a callable itself. That is, it must be a function object.\n\n## [Examples](#examples)\n\n### [Trapping a function call](#trapping_a_function_call)\n\nThe following code traps a function call.\n\n```\nconst p = new Proxy(function () {}, {\n  apply(target, thisArg, argumentsList) {\n    console.log(`called: ${argumentsList}`);\n    return argumentsList[0] + argumentsList[1] + argumentsList[2];\n  },\n});\n\nconsole.log(p(1, 2, 3)); // \"called: 1,2,3\"\n// 6\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.apply() - JavaScript | MDN",
  "description": "The handler.apply() method is a trap for the [[Call]] object internal method, which is used by operations such as function calls.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct",
  "markdown": "# handler.construct() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.construct()`** method is a trap for the `[[Construct]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  construct(target, argumentsList, newTarget) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `construct()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target constructor object.\n\n[`argumentsList`](#argumentslist)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) containing the arguments passed to the constructor.\n\n[`newTarget`](#newtarget)\n\nThe constructor that was originally called.\n\n### [Return value](#return_value)\n\nThe `construct()` method must return an object, representing the newly created object.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   The [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator: `new myFunction(...args)`\n*   [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct)\n\nOr any other operation that invokes the `[[Construct]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[Construct]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   The `target` must be a constructor itself.\n*   The result must be an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).\n\n## [Examples](#examples)\n\n### [Trapping the new operator](#trapping_the_new_operator)\n\nThe following code traps the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```\nconst p = new Proxy(function () {}, {\n  construct(target, argumentsList, newTarget) {\n    console.log(`called: ${argumentsList}`);\n    return { value: argumentsList[0] * 10 };\n  },\n});\n\nconsole.log(new p(1).value); // \"called: 1\"\n// 10\n```\n\nThe following code violates the invariant.\n\n```\nconst p = new Proxy(function () {}, {\n  construct(target, argumentsList, newTarget) {\n    return 1;\n  },\n});\n\nnew p(); // TypeError is thrown\n```\n\nThe following code improperly initializes the proxy. The `target` in Proxy initialization must itself be a valid constructor for the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    construct(target, argumentsList, newTarget) {\n      return {};\n    },\n  },\n);\n\nnew p(); // TypeError is thrown, \"p\" is not a constructor\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.construct() - JavaScript | MDN",
  "description": "The handler.construct() method is a trap for the [[Construct]] object internal method, which is used by operations such as the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString",
  "markdown": "# Boolean.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) values returns a string representing the specified boolean value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the specified boolean value.\n\n## [Description](#description)\n\nThe [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For `Boolean` values, the `toString` method returns a string representation of the boolean value, which is either `\"true\"` or `\"false\"`.\n\nThe `toString()` method requires its `this` value to be a `Boolean` primitive or wrapper object. It throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for other `this` values without attempting to coerce them to boolean values.\n\nBecause `Boolean` doesn't have a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `Boolean` _object_ is used in a context expecting a string, such as in a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). However, boolean _primitive_ values do not consult the `toString()` method to be [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```\nBoolean.prototype.toString = () => \"Overridden\";\nconsole.log(`${true}`); // \"true\"\nconsole.log(`${new Boolean(true)}`); // \"Overridden\"\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nconst flag = new Boolean(true);\nconsole.log(flag.toString()); // \"true\"\nconsole.log(false.toString()); // \"false\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-boolean.prototype.tostring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Boolean.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of Boolean values returns a string representing the specified boolean value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty",
  "markdown": "# handler.deleteProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`handler.deleteProperty()`** method is a trap for the `[[Delete]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Proxy(target, {\n  deleteProperty(target, property) {\n  }\n})\n```\n\n### [Parameters](#parameters)\n\nThe following parameters are passed to the `deleteProperty()` method. `this` is bound to the handler.\n\n[`target`](#target)\n\nThe target object.\n\n[`property`](#property)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property name.\n\n### [Return value](#return_value)\n\nThe `deleteProperty()` method must return a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the property has been successfully deleted. Other values are [coerced to booleans](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nMany operations, including the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator when in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the `[[Delete]]` internal method returns `false`.\n\n## [Description](#description)\n\n### [Interceptions](#interceptions)\n\nThis trap can intercept these operations:\n\n*   The [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator: `delete proxy[foo]` and `delete proxy.foo`\n*   [`Reflect.deleteProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty)\n\nOr any other operation that invokes the `[[Delete]]` [internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### [Invariants](#invariants)\n\nThe proxy's `[[Delete]]` internal method throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the handler definition violates one of the following invariants:\n\n*   A property cannot be reported as deleted, if it exists as a non-configurable own property of the target object. That is, if [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns `configurable: false` for the property on `target`, then the trap must return a falsy value.\n*   A property cannot be reported as deleted, if it exists as an own property of the target object and the target object is non-extensible. That is, if [`Reflect.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible) returns `false` on `target`, and [`Reflect.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) returns a property descriptor for the property on `target`, then the trap must return a falsy value.\n\n## [Examples](#examples)\n\n### [Trapping the delete operator](#trapping_the_delete_operator)\n\nThe following code traps the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator.\n\n```\nconst p = new Proxy(\n  {},\n  {\n    deleteProperty(target, prop) {\n      if (!(prop in target)) {\n        console.log(`property not found: ${prop}`);\n        return false;\n      }\n      delete target[prop];\n      console.log(`property removed: ${prop}`);\n      return true;\n    },\n  },\n);\n\np.a = 10;\nconsole.log(\"a\" in p); // true\n\nconst result1 = delete p.a; // \"property removed: a\"\nconsole.log(result1); // true\nconsole.log(\"a\" in p); // false\n\nconst result2 = delete p.a; // \"property not found: a\"\nconsole.log(result2); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-proxy-object-internal-methods-and-internal-slots-delete-p](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-proxy-object-internal-methods-and-internal-slots-delete-p) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "handler.deleteProperty() - JavaScript | MDN",
  "description": "The handler.deleteProperty() method is a trap for the [[Delete]] object internal method, which is used by operations such as the delete operator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",
  "markdown": "# Object.defineProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.defineProperty()`** static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.defineProperty(obj, prop, descriptor)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object on which to define the property.\n\n[`prop`](#prop)\n\nA string or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) specifying the key of the property to be defined or modified.\n\n[`descriptor`](#descriptor)\n\nThe descriptor for the property being defined or modified.\n\n### [Return value](#return_value)\n\nThe object that was passed to the function, with the specified property added or modified.\n\n## [Description](#description)\n\n`Object.defineProperty()` allows a precise addition to or modification of a property on an object. Normal property addition through [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) creates properties which show up during property enumeration ([`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in), [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), etc.), whose values may be changed and which may be [deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete). This method allows these extra details to be changed from their defaults. By default, properties added using `Object.defineProperty()` are not writable, not enumerable, and not configurable. In addition, `Object.defineProperty()` uses the [`[[DefineOwnProperty]]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty) internal method, instead of [`[[Set]]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set), so it does not invoke [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set), even when the property is already present.\n\nProperty descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A **data descriptor** is a property with a value that may or may not be writable. An **accessor descriptor** is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\n\nBoth data and accessor descriptors are objects. They share the following optional keys (please note: the **defaults** mentioned here are in the case of defining properties using `Object.defineProperty()`):\n\n[`configurable`](#configurable)\n\nwhen this is set to `false`,\n\n*   the type of this property cannot be changed between data property and accessor property, and\n*   the property may not be deleted, and\n*   other attributes of its descriptor cannot be changed (however, if it's a data descriptor with `writable: true`, the `value` can be changed, and `writable` can be changed to `false`).\n\n**Defaults to `false`.**\n\n[`enumerable`](#enumerable)\n\n`true` if and only if this property shows up during enumeration of the properties on the corresponding object. **Defaults to `false`.**\n\nA **data descriptor** also has the following optional keys:\n\n[`value`](#value)\n\nThe value associated with the property. Can be any valid JavaScript value (number, object, function, etc.). **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\n[`writable`](#writable)\n\n`true` if the value associated with the property may be changed with an [assignment operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators). **Defaults to `false`.**\n\nAn **accessor descriptor** also has the following optional keys:\n\n[`get`](#get)\n\nA function which serves as a getter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no getter. When the property is accessed, this function is called without arguments and with `this` set to the object through which the property is accessed (this may not be the object on which the property is defined due to inheritance). The return value will be used as the value of the property. **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\n[`set`](#set)\n\nA function which serves as a setter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no setter. When the property is assigned, this function is called with one argument (the value being assigned to the property) and with `this` set to the object through which the property is assigned. **Defaults to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).**\n\nIf a descriptor doesn't have any of the `value`, `writable`, `get`, and `set` keys, it is treated as a data descriptor. If a descriptor has both \\[`value` or `writable`\\] and \\[`get` or `set`\\] keys, an exception is thrown.\n\nThese attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze existing objects in the descriptor object's prototype chain upfront, specify all options explicitly, or create a [`null`\\-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects).\n\n```\nconst obj = {};\n// 1. Using a null prototype: no inherited properties\nconst descriptor = Object.create(null);\ndescriptor.value = \"static\";\n\n// not enumerable, not configurable, not writable as defaults\nObject.defineProperty(obj, \"key\", descriptor);\n\n// 2. Being explicit by using a throw-away object literal with all attributes present\nObject.defineProperty(obj, \"key2\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n\n// 3. Recycling same object\nfunction withValue(value) {\n  const d =\n    withValue.d ||\n    (withValue.d = {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value,\n    });\n\n  // avoiding duplicate operation for assigning value\n  if (d.value !== value) d.value = value;\n\n  return d;\n}\n// and\nObject.defineProperty(obj, \"key\", withValue(\"static\"));\n\n// if freeze is available, prevents adding or\n// removing the object prototype properties\n// (value, get, set, enumerable, writable, configurable)\n(Object.freeze || Object)(Object.prototype);\n```\n\nWhen the property already exists, `Object.defineProperty()` attempts to modify the property according to the values in the descriptor and the property's current configuration.\n\nIf the old descriptor had its `configurable` attribute set to `false`, the property is said to be _non-configurable_. It is not possible to change any attribute of a non-configurable accessor property, and it is not possible to switch between data and accessor property types. For data properties with `writable: true`, it is possible to modify the value and change the `writable` attribute from `true` to `false`. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown when attempts are made to change non-configurable property attributes (except `value` and `writable`, if permitted), except when defining a value same as the original value on a data property.\n\nWhen the current property is configurable, defining an attribute to `undefined` effectively deletes it. For example, if `o.k` is an accessor property, `Object.defineProperty(o, \"k\", { set: undefined })` will remove the setter, making `k` only have a getter and become readonly. If an attribute is absent from the new descriptor, the old descriptor attribute's value is kept (it won't be implicitly re-defined to `undefined`). It is possible to toggle between data and accessor property by giving a descriptor of a different \"flavor\". For example, if the new descriptor is a data descriptor (with `value` or `writable`), the original descriptor's `get` and `set` attributes will both be dropped.\n\n## [Examples](#examples)\n\n### [Creating a property](#creating_a_property)\n\nWhen the property specified doesn't exist in the object, `Object.defineProperty()` creates a new property as described. Fields may be omitted from the descriptor and default values for those fields are inputted.\n\n```\nconst o = {}; // Creates a new object\n\n// Example of an object property added\n// with defineProperty with a data property descriptor\nObject.defineProperty(o, \"a\", {\n  value: 37,\n  writable: true,\n  enumerable: true,\n  configurable: true,\n});\n// 'a' property exists in the o object and its value is 37\n\n// Example of an object property added\n// with defineProperty with an accessor property descriptor\nlet bValue = 38;\nObject.defineProperty(o, \"b\", {\n  get() {\n    return bValue;\n  },\n  set(newValue) {\n    bValue = newValue;\n  },\n  enumerable: true,\n  configurable: true,\n});\no.b; // 38\n// 'b' property exists in the o object and its value is 38\n// The value of o.b is now always identical to bValue,\n// unless o.b is redefined\n\n// You cannot try to mix both:\nObject.defineProperty(o, \"conflict\", {\n  value: 0x9f91102,\n  get() {\n    return 0xdeadbeef;\n  },\n});\n// throws a TypeError: value appears\n// only in data descriptors,\n// get appears only in accessor descriptors\n```\n\n### [Modifying a property](#modifying_a_property)\n\nWhen modifying an existing property, the current property configuration determines if the operator succeeds, does nothing, or throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n#### Writable attribute\n\nWhen the `writable` property attribute is `false`, the property is said to be \"non-writable\". It cannot be reassigned. Trying to write to a non-writable property doesn't change it and results in an error in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```\nconst o = {}; // Creates a new object\n\nObject.defineProperty(o, \"a\", {\n  value: 37,\n  writable: false,\n});\n\nconsole.log(o.a); // 37\no.a = 25; // No error thrown\n// (it would throw in strict mode,\n// even if the value had been the same)\nconsole.log(o.a); // 37; the assignment didn't work\n\n// strict mode\n(() => {\n  \"use strict\";\n  const o = {};\n  Object.defineProperty(o, \"b\", {\n    value: 2,\n    writable: false,\n  });\n  o.b = 3; // throws TypeError: \"b\" is read-only\n  return o.b; // returns 2 without the line above\n})();\n```\n\n#### Enumerable attribute\n\nThe `enumerable` property attribute defines whether the property is considered by [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) or the [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) operator. For non-[`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties, it also defines whether it shows up in a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop and [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) or not. For more information, see [Enumerability and ownership of properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties).\n\n```\nconst o = {};\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  enumerable: true,\n});\nObject.defineProperty(o, \"b\", {\n  value: 2,\n  enumerable: false,\n});\nObject.defineProperty(o, \"c\", {\n  value: 3,\n}); // enumerable defaults to false\no.d = 4; // enumerable defaults to true when creating a property by setting it\nObject.defineProperty(o, Symbol.for(\"e\"), {\n  value: 5,\n  enumerable: true,\n});\nObject.defineProperty(o, Symbol.for(\"f\"), {\n  value: 6,\n  enumerable: false,\n});\n\nfor (const i in o) {\n  console.log(i);\n}\n// Logs 'a' and 'd' (always in that order)\n\nObject.keys(o); // ['a', 'd']\n\no.propertyIsEnumerable(\"a\"); // true\no.propertyIsEnumerable(\"b\"); // false\no.propertyIsEnumerable(\"c\"); // false\no.propertyIsEnumerable(\"d\"); // true\no.propertyIsEnumerable(Symbol.for(\"e\")); // true\no.propertyIsEnumerable(Symbol.for(\"f\")); // false\n\nconst p = { ...o };\np.a; // 1\np.b; // undefined\np.c; // undefined\np.d; // 4\np[Symbol.for(\"e\")]; // 5\np[Symbol.for(\"f\")]; // undefined\n```\n\n#### Configurable attribute\n\nThe `configurable` attribute controls whether the property can be deleted from the object and whether its attributes (other than `value` and `writable`) can be changed.\n\nThis example illustrates a non-configurable accessor property.\n\n```\nconst o = {};\nObject.defineProperty(o, \"a\", {\n  get() {\n    return 1;\n  },\n  configurable: false,\n});\n\nObject.defineProperty(o, \"a\", {\n  configurable: true,\n}); // throws a TypeError\nObject.defineProperty(o, \"a\", {\n  enumerable: true,\n}); // throws a TypeError\nObject.defineProperty(o, \"a\", {\n  set() {},\n}); // throws a TypeError (set was undefined previously)\nObject.defineProperty(o, \"a\", {\n  get() {\n    return 1;\n  },\n}); // throws a TypeError\n// (even though the new get does exactly the same thing)\nObject.defineProperty(o, \"a\", {\n  value: 12,\n}); // throws a TypeError\n// ('value' can be changed when 'configurable' is false, but only when the property is a writable data property)\n\nconsole.log(o.a); // 1\ndelete o.a; // Nothing happens; throws an error in strict mode\nconsole.log(o.a); // 1\n```\n\nIf the `configurable` attribute of `o.a` had been `true`, none of the errors would be thrown and the property would be deleted at the end.\n\nThis example illustrates a non-configurable but writable data property. The property's `value` can still be changed, and `writable` can still be toggled from `true` to `false`.\n\n```\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: true,\n  configurable: false,\n});\nconsole.log(o.b); // undefined\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // Even when configurable is false, because the object is writable, we may still replace the value\nconsole.log(o.b); // 1\no.b = 2; // We can change the value with assignment operators as well\nconsole.log(o.b); // 2\n// Toggle the property's writability\nObject.defineProperty(o, \"b\", {\n  writable: false,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // TypeError: because the property is neither writable nor configurable, it cannot be modified\n// At this point, there's no way to further modify 'b'\n// or restore its writability\n```\n\nThis example illustrates a configurable but non-writable data property. The property's `value` may still be replaced with `defineProperty` (but not with assignment operators), and `writable` may be toggled.\n\n```\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: false,\n  configurable: true,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // We can replace the value with defineProperty\nconsole.log(o.b); // 1\no.b = 2; // throws TypeError in strict mode: cannot change a non-writable property's value with assignment\n```\n\nThis example illustrates a non-configurable and non-writable data property. There's no way to update any attribute of the property, including its `value`.\n\n```\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: false,\n  configurable: false,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // TypeError: the property cannot be modified because it is neither writable nor configurable.\n```\n\n### [Adding properties and default values](#adding_properties_and_default_values)\n\nIt is important to consider the way default values of attributes are applied. There is often a difference between using [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to assign a value and using `Object.defineProperty()`, as shown in the example below.\n\n```\nconst o = {};\n\no.a = 1;\n// is equivalent to:\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  writable: true,\n  configurable: true,\n  enumerable: true,\n});\n\n// On the other hand,\nObject.defineProperty(o, \"a\", { value: 1 });\n// is equivalent to:\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  writable: false,\n  configurable: false,\n  enumerable: false,\n});\n```\n\n### [Custom setters and getters](#custom_setters_and_getters)\n\nThe example below shows how to implement a self-archiving object. When `temperature` property is set, the `archive` array gets a log entry.\n\n```\nfunction Archiver() {\n  let temperature = null;\n  const archive = [];\n\n  Object.defineProperty(this, \"temperature\", {\n    get() {\n      console.log(\"get!\");\n      return temperature;\n    },\n    set(value) {\n      temperature = value;\n      archive.push({ val: temperature });\n    },\n  });\n\n  this.getArchive = () => archive;\n}\n\nconst arc = new Archiver();\narc.temperature; // 'get!'\narc.temperature = 11;\narc.temperature = 13;\narc.getArchive(); // [{ val: 11 }, { val: 13 }]\n```\n\nIn this example, a getter always returns the same value.\n\n```\nconst pattern = {\n  get() {\n    return \"I always return this string, whatever you have assigned\";\n  },\n  set() {\n    this.myname = \"this is my name string\";\n  },\n};\n\nfunction TestDefineSetAndGet() {\n  Object.defineProperty(this, \"myproperty\", pattern);\n}\n\nconst instance = new TestDefineSetAndGet();\ninstance.myproperty = \"test\";\nconsole.log(instance.myproperty);\n// I always return this string, whatever you have assigned\n\nconsole.log(instance.myname); // this is my name string\n```\n\n### [Inheritance of properties](#inheritance_of_properties)\n\nIf an accessor property is inherited, its `get` and `set` methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects.\n\n```\nfunction MyClass() {}\n\nlet value;\nObject.defineProperty(MyClass.prototype, \"x\", {\n  get() {\n    return value;\n  },\n  set(x) {\n    value = x;\n  },\n});\n\nconst a = new MyClass();\nconst b = new MyClass();\na.x = 1;\nconsole.log(b.x); // 1\n```\n\nThis can be fixed by storing the value in another property. In `get` and `set` methods, `this` points to the object which is used to access or modify the property.\n\n```\nfunction MyClass() {}\n\nObject.defineProperty(MyClass.prototype, \"x\", {\n  get() {\n    return this.storedX;\n  },\n  set(x) {\n    this.storedX = x;\n  },\n});\n\nconst a = new MyClass();\nconst b = new MyClass();\na.x = 1;\nconsole.log(b.x); // undefined\n```\n\nUnlike accessor properties, data properties are always set on the object itself, not on a prototype. However, if a non-writable data property is inherited, it is still prevented from being modified on the object.\n\n```\nfunction MyClass() {}\n\nMyClass.prototype.x = 1;\nObject.defineProperty(MyClass.prototype, \"y\", {\n  writable: false,\n  value: 1,\n});\n\nconst a = new MyClass();\na.x = 2;\nconsole.log(a.x); // 2\nconsole.log(MyClass.prototype.x); // 1\na.y = 2; // Ignored, throws in strict mode\nconsole.log(a.y); // 1\nconsole.log(MyClass.prototype.y); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.defineproperty](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.defineproperty) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.defineProperty() - JavaScript | MDN",
  "description": "The Object.defineProperty() static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean",
  "markdown": "# Boolean() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Boolean()`** constructor creates [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) objects. When called as a function, it returns primitive values of type Boolean.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Boolean(value)\nBoolean(value)\n```\n\n**Note:** `Boolean()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe initial value of the `Boolean` object.\n\n### [Return value](#return_value)\n\nWhen `Boolean()` is called as a function (without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new)), it returns `value` [coerced to a boolean primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion).\n\nWhen `Boolean()` is called as a constructor (with `new`), it coerces `value` to a boolean primitive and returns a wrapping [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object, which is **not** a primitive.\n\n**Warning:** You should rarely find yourself using `Boolean` as a constructor.\n\n## [Description](#description)\n\nThe value passed as the first parameter is [converted to a boolean value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion). If the value is omitted or is `0`, `-0`, `0n`, [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), `false`, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), or the empty string (`\"\"`), then the object has an initial value of `false`. All other values, including any object, an empty array (`[]`), or the string `\"false\"`, create an object with an initial value of `true`.\n\n**Note:** When the non-standard property [`document.all`](https://developer.mozilla.org/en-US/docs/Web/API/Document/all) is used as an argument for this constructor, the result is a `Boolean` object with the value `false`. This property is legacy and non-standard and should not be used.\n\n## [Examples](#examples)\n\n### [Creating Boolean objects with an initial value of false](#creating_boolean_objects_with_an_initial_value_of_false)\n\n```\nconst bZero = new Boolean(0);\nconst bNull = new Boolean(null);\nconst bEmptyString = new Boolean(\"\");\nconst bfalse = new Boolean(false);\n\ntypeof bfalse; // \"object\"\nBoolean(bfalse); // true\n```\n\nNote how converting a `Boolean` object to a primitive with `Boolean()` always yields `true`, even if the object holds a value of `false`. You are therefore always advised to avoid constructing `Boolean` wrapper objects.\n\nIf you need to take the primitive value out from the wrapper object, instead of using the `Boolean()` function, use the object's [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf) method instead.\n\n```\nconst bfalse = new Boolean(false);\n\nbfalse.valueOf(); // false\n```\n\n### [Creating `Boolean` objects with an initial value of `true`](#creating_boolean_objects_with_an_initial_value_of_true)\n\n```\nconst btrue = new Boolean(true);\nconst btrueString = new Boolean(\"true\");\nconst bfalseString = new Boolean(\"false\");\nconst bSuLin = new Boolean(\"Su Lin\");\nconst bArrayProto = new Boolean([]);\nconst bObjProto = new Boolean({});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-boolean-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Boolean() constructor - JavaScript | MDN",
  "description": "The Boolean() constructor creates Boolean objects. When called as a function, it returns primitive values of type Boolean.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf",
  "markdown": "# Boolean.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) values returns the primitive value of a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe primitive value of the given [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object.\n\n## [Description](#description)\n\nThe `valueOf()` method of [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) returns the primitive value of a `Boolean` object or literal `Boolean` as a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n## [Examples](#examples)\n\n### [Using `valueOf()`](#using_valueof)\n\n```\nx = new Boolean();\nmyVar = x.valueOf(); // assigns false to myVar\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-boolean.prototype.valueof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-boolean.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Boolean.prototype.valueOf() - JavaScript | MDN",
  "description": "The valueOf() method of Boolean values returns the primitive value of a\n  Boolean object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset",
  "markdown": "# DataView.prototype.byteOffset - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`byteOffset`** accessor property of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances returns the offset (in bytes) of this view from the start of its [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer).\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `byteOffset` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when an `DataView` is constructed and cannot be changed.\n\n## [Examples](#examples)\n\n### [Using the byteOffset property](#using_the_byteoffset_property)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.byteOffset; // 0 (no offset specified)\n\nconst dataview2 = new DataView(buffer, 3);\ndataview2.byteOffset; // 3 (as specified when constructing the DataView)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-dataview.prototype.byteoffset](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-dataview.prototype.byteoffset) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.byteOffset - JavaScript | MDN",
  "description": "The byteOffset accessor property of DataView instances returns the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64",
  "markdown": "# DataView.prototype.getBigInt64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getBigInt64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetBigInt64(byteOffset)\ngetBigInt64(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nA [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) from -263 to 263\\-1, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getBigInt64()](#using_getbigint64)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getBigInt64(1)); // 72623859790382856n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getbigint64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getbigint64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getBigInt64() - JavaScript | MDN",
  "description": "The getBigInt64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64",
  "markdown": "# DataView.prototype.getFloat64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getFloat64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetFloat64(byteOffset)\ngetFloat64(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nAny number value.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getFloat64()](#using_getfloat64)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getFloat64(1)); // 8.20788039913184e-304\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getfloat64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getfloat64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getFloat64() - JavaScript | MDN",
  "description": "The getFloat64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView",
  "markdown": "# DataView() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`DataView()`** constructor creates [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew DataView(buffer)\nnew DataView(buffer, byteOffset)\nnew DataView(buffer, byteOffset, byteLength)\n```\n\n**Note:** `DataView()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`buffer`](#buffer)\n\nAn existing [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) to use as the storage backing the new `DataView` object.\n\n[`byteOffset`](#byteoffset) Optional\n\nThe offset, in bytes, to the first byte in the above buffer for the new view to reference. If unspecified, the buffer view starts with the first byte.\n\n[`byteLength`](#bytelength) Optional\n\nThe number of elements in the byte array. If unspecified, the view's length will match the buffer's length.\n\n### [Return value](#return_value)\n\nA new [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) object representing the specified data buffer.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` or `byteLength` parameter values result in the view extending past the end of the buffer. In other words, `byteOffset + byteLength > buffer.byteLength`.\n\n## [Examples](#examples)\n\n### [Using DataView](#using_dataview)\n\n```\nconst buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview-constructor](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView() constructor - JavaScript | MDN",
  "description": "The DataView() constructor creates DataView objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64",
  "markdown": "# DataView.prototype.getBigUint64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getBigUint64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetBigUint64(byteOffset)\ngetBigUint64(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nA [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) from 0 to 264\\-1, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getBigUint64()](#using_getbiguint64)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getBigUint64(1)); // 72623859790382856n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getbiguint64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getbiguint64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getBigUint64() - JavaScript | MDN",
  "description": "The getBigUint64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32",
  "markdown": "# DataView.prototype.getFloat32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getFloat32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetFloat32(byteOffset)\ngetFloat32(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nA floating point number from `-3.4e38` to `3.4e38`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getFloat32()](#using_getfloat32)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getFloat32(1)); // 2.387939260590663e-38\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getfloat32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getfloat32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getFloat32() - JavaScript | MDN",
  "description": "The getFloat32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16",
  "markdown": "# DataView.prototype.getInt16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getInt16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetInt16(byteOffset)\ngetInt16(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nAn integer from -32768 to 32767, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getInt16()](#using_getint16)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt16(1)); // 258\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getint16](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getint16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getInt16() - JavaScript | MDN",
  "description": "The getInt16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32",
  "markdown": "# DataView.prototype.getInt32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getInt32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetInt32(byteOffset)\ngetInt32(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nAn integer from -2147483648 to 2147483647, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getInt32()](#using_getint32)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt32(1)); // 16909060\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getint32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getint32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getInt32() - JavaScript | MDN",
  "description": "The getInt32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat16",
  "markdown": "# DataView.prototype.getFloat16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getFloat16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetFloat16(byteOffset)\ngetFloat16(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nA floating point number from `-65504` to `65504`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getFloat16()](#using_getfloat16)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getFloat16(1)); // 0.00001537799835205078\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Float16Array  <br>\\# sec-dataview.prototype.getfloat16](https://tc39.es/proposal-float16array/#sec-dataview.prototype.getfloat16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getFloat16() - JavaScript | MDN",
  "description": "The getFloat16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32",
  "markdown": "# DataView.prototype.getUint32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUint32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetUint32(byteOffset)\ngetUint32(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nAn integer from 0 to 4294967295, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getUint32()](#using_getuint32)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint32(1)); // 16909060\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getuint32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getuint32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getUint32() - JavaScript | MDN",
  "description": "The getUint32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8",
  "markdown": "# DataView.prototype.getUint8() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUint8()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit unsigned integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n### [Return value](#return_value)\n\nAn integer from 0 to 255, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getUint8()](#using_getuint8)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint8(1)); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getuint8](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getuint8) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getUint8() - JavaScript | MDN",
  "description": "The getUint8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit unsigned integer.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16",
  "markdown": "# DataView.prototype.getUint16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUint16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ngetUint16(byteOffset)\ngetUint16(byteOffset, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### [Return value](#return_value)\n\nAn integer from 0 to 65535, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getUint16()](#using_getuint16)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint16(1)); // 258\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getuint16](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getuint16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getUint16() - JavaScript | MDN",
  "description": "The getUint16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32",
  "markdown": "# DataView.prototype.setFloat32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setFloat32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetFloat32(byteOffset, value)\nsetFloat32(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setFloat32()](#using_setfloat32)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setFloat32(0, 3);\ndataview.getFloat32(1); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setfloat32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setfloat32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setFloat32() - JavaScript | MDN",
  "description": "The setFloat32() method of DataView instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat16",
  "markdown": "# DataView.prototype.setFloat16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setFloat16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 16-bit floating point number in the 2 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetFloat16(byteOffset, value)\nsetFloat16(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setFloat16()](#using_setfloat16)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setFloat16(0, 3);\ndataview.getFloat16(1); // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Float16Array  <br>\\# sec-dataview.prototype.setfloat16](https://tc39.es/proposal-float16array/#sec-dataview.prototype.setfloat16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setFloat16() - JavaScript | MDN",
  "description": "The setFloat16() method of DataView instances takes a number and stores it as a 16-bit floating point number in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64",
  "markdown": "# DataView.prototype.setBigUint64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setBigUint64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetBigUint64(byteOffset, value)\nsetBigUint64(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set as a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setBigUint64()](#using_setbiguint64)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setBigUint64(0, 3n);\ndataview.getBigUint64(1); // 768n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setbiguint64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setbiguint64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setBigUint64() - JavaScript | MDN",
  "description": "The setBigUint64() method of DataView instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64",
  "markdown": "# DataView.prototype.setBigInt64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setBigInt64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetBigInt64(byteOffset, value)\nsetBigInt64(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set as a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setBigInt64()](#using_setbigint64)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setBigInt64(0, 3n);\ndataview.getBigInt64(1); // 768n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setbigint64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setbigint64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setBigInt64() - JavaScript | MDN",
  "description": "The setBigInt64() method of DataView instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16",
  "markdown": "# DataView.prototype.setUint16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUint16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUint16(byteOffset, value)\nsetUint16(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setUint16()](#using_setuint16)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint16(0, 3);\ndataview.getUint16(1); // 768\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setuint16](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setuint16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setUint16() - JavaScript | MDN",
  "description": "The setUint16() method of DataView instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32",
  "markdown": "# DataView.prototype.setInt32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setInt32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetInt32(byteOffset, value)\nsetInt32(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setInt32()](#using_setint32)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt32(0, 3);\ndataview.getInt32(1); // 768\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setint32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setint32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setInt32() - JavaScript | MDN",
  "description": "The setInt32() method of DataView instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64",
  "markdown": "# DataView.prototype.setFloat64() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setFloat64()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetFloat64(byteOffset, value)\nsetFloat64(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setFloat64()](#using_setfloat64)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setFloat64(0, 3);\ndataview.getFloat64(1); // 3.785766995733679e-270\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setfloat64](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setfloat64) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setFloat64() - JavaScript | MDN",
  "description": "The setFloat64() method of DataView instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16",
  "markdown": "# DataView.prototype.setInt16() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setInt16()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetInt16(byteOffset, value)\nsetInt16(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setInt16()](#using_setint16)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt16(0, 3);\ndataview.getInt16(1); // 768\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setint16](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setint16) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setInt16() - JavaScript | MDN",
  "description": "The setInt16() method of DataView instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8",
  "markdown": "# DataView.prototype.setInt8() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setInt8()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this `DataView`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetInt8(byteOffset, value)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setInt8()](#using_setint8)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt8(0, 3);\ndataview.getInt8(0); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setint8](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setint8) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setInt8() - JavaScript | MDN",
  "description": "The setInt8() method of DataView instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this DataView.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8",
  "markdown": "# DataView.prototype.setUint8() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUint8()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this `DataView`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUint8(byteOffset, value)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setUint8()](#using_setuint8)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint8(0, 3);\ndataview.getUint8(0); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setuint8](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setuint8) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setUint8() - JavaScript | MDN",
  "description": "The setUint8() method of DataView instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this DataView.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8",
  "markdown": "# DataView.prototype.getInt8() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getInt8()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit signed integer.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to read the data from.\n\n### [Return value](#return_value)\n\nAn integer from -128 to 127, inclusive.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using getInt8()](#using_getint8)\n\n```\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt8(1)); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.getint8](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.getint8) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.getInt8() - JavaScript | MDN",
  "description": "The getInt8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit signed integer.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32",
  "markdown": "# DataView.prototype.setUint32() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUint32()`** method of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUint32(byteOffset, value)\nsetUint32(byteOffset, value, littleEndian)\n```\n\n### [Parameters](#parameters)\n\n[`byteOffset`](#byteoffset)\n\nThe offset, in bytes, from the start of the view to store the data in.\n\n[`value`](#value)\n\nThe value to set. For how the value is encoded in bytes, see [Value encoding and normalization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n[`littleEndian`](#littleendian) Optional\n\nIndicates whether the data is stored in [little- or big-endian](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## [Examples](#examples)\n\n### [Using setUint32()](#using_setuint32)\n\n```\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint32(0, 3);\ndataview.getUint32(1); // 768\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-dataview.prototype.setuint32](https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview.prototype.setuint32) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.setUint32() - JavaScript | MDN",
  "description": "The setUint32() method of DataView instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this DataView. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer",
  "markdown": "# DataView.prototype.buffer - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`buffer`** accessor property of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances returns the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) referenced by this view at construction time.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `buffer` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the `DataView` is constructed and cannot be changed.\n\n## [Examples](#examples)\n\n### [Using the buffer property](#using_the_buffer_property)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.buffer; // ArrayBuffer { byteLength: 8 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-dataview.prototype.buffer](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-dataview.prototype.buffer) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.buffer - JavaScript | MDN",
  "description": "The buffer accessor property of DataView instances returns the ArrayBuffer or SharedArrayBuffer referenced by this view at construction time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength",
  "markdown": "# DataView.prototype.byteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`byteLength`** accessor property of [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instances returns the length (in bytes) of this view.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when an `DataView` is constructed and cannot be changed. If the `DataView` is not specifying an offset or a `byteLength`, the `byteLength` of the referenced `ArrayBuffer` or `SharedArrayBuffer` will be returned.\n\n## [Examples](#examples)\n\n### [Using the byteLength property](#using_the_bytelength_property)\n\n```\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.byteLength; // 8 (matches the byteLength of the buffer)\n\nconst dataview2 = new DataView(buffer, 1, 5);\ndataview2.byteLength; // 5 (as specified when constructing the DataView)\n\nconst dataview3 = new DataView(buffer, 2);\ndataview3.byteLength; // 6 (due to the offset of the constructed DataView)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-dataview.prototype.bytelength](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-dataview.prototype.bytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "DataView.prototype.byteLength - JavaScript | MDN",
  "description": "The byteLength accessor property of DataView instances returns the length (in bytes) of this view.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow",
  "markdown": "# SharedArrayBuffer.prototype.grow() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`grow()`** method of [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances grows the `SharedArrayBuffer` to the specified size, in bytes.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`newLength`](#newlength)\n\nThe new length, in bytes, to resize the `SharedArrayBuffer` to.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `SharedArrayBuffer` is not growable.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `newLength` is larger than the [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength) of the `SharedArrayBuffer` or smaller than the [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength).\n\n## [Description](#description)\n\nThe `grow()` method grows a `SharedArrayBuffer` to the size specified by the `newLength` parameter, provided that the `SharedArrayBuffer` is [growable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable) and the new size is less than or equal to the [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength) of the `SharedArrayBuffer`. New bytes are initialized to 0.\n\n## [Examples](#examples)\n\n### [Using grow()](#using_grow)\n\nIn this example, we create a 8-byte buffer that is growable to a max length of 16 bytes, then check its [`growable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable) property, growing it if `growable` returns `true`:\n\n```\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.growable) {\n  console.log(\"SAB is growable!\");\n  buffer.grow(12);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-sharedarraybuffer.prototype.grow](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer.prototype.grow) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer.prototype.grow() - JavaScript | MDN",
  "description": "The grow() method of SharedArrayBuffer instances grows the SharedArrayBuffer to the specified size, in bytes.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode",
  "markdown": "# String.fromCharCode() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`String.fromCharCode()`** static method returns a string created from the specified sequence of UTF-16 code units.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nString.fromCharCode()\nString.fromCharCode(num1)\nString.fromCharCode(num1, num2)\nString.fromCharCode(num1, num2, /* …, */ numN)\n```\n\n### [Parameters](#parameters)\n\n[`num1`](#num1), …, `numN`\n\nA number between `0` and `65535` (`0xFFFF`) representing a UTF-16 code unit. Numbers greater than `0xFFFF` are truncated to the last 16 bits. No validity checks are performed.\n\n### [Return value](#return_value)\n\nA string of length `N` consisting of the `N` specified UTF-16 code units.\n\n## [Description](#description)\n\nBecause `fromCharCode()` is a static method of `String`, you always use it as `String.fromCharCode()`, rather than as a method of a `String` value you created.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charCodeAt()` always returns a value that is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to produce a full character with value greater than `65535`, it is necessary to provide two code units (as if manipulating a string with two characters). For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\nBecause `fromCharCode()` only works with 16-bit values (same as the `\\u` escape sequence), a surrogate pair is required in order to return a supplementary character. For example, both `String.fromCharCode(0xd83c, 0xdf03)` and `\"\\ud83c\\udf03\"` return code point `U+1F303` \"Night with Stars\". While there is a mathematical relationship between the supplementary code point value (e.g. `0x1f303`) and both surrogate values that represent it (e.g., `0xd83c` and `0xdf03`), it does require an extra step to either calculate or look up the surrogate pair values every time a supplementary code point is to be used. For this reason, it's more convenient to use [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint), which allows for returning supplementary characters based on their actual code point value. For example, `String.fromCodePoint(0x1f303)` returns code point `U+1F303` \"Night with Stars\".\n\n## [Examples](#examples)\n\n### [Using fromCharCode()](#using_fromcharcode)\n\nBMP characters, in UTF-16, use a single code unit:\n\n```\nString.fromCharCode(65, 66, 67); // returns \"ABC\"\nString.fromCharCode(0x2014); // returns \"—\"\nString.fromCharCode(0x12014); // also returns \"—\"; the digit 1 is truncated and ignored\nString.fromCharCode(8212); // also returns \"—\"; 8212 is the decimal form of 0x2014\n```\n\nSupplementary characters, in UTF-16, require two code units (i.e. a surrogate pair):\n\n```\nString.fromCharCode(0xd83c, 0xdf03); // Code Point U+1F303 \"Night with\nString.fromCharCode(55356, 57091); // Stars\" === \"\\uD83C\\uDF03\"\n\nString.fromCharCode(0xd834, 0xdf06, 0x61, 0xd834, 0xdf07); // \"\\uD834\\uDF06a\\uD834\\uDF07\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.fromcharcode](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.fromcharcode) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.fromCharCode() - JavaScript | MDN",
  "description": "The String.fromCharCode() static method returns a string created from the specified sequence of UTF-16 code units.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate",
  "markdown": "# Date.prototype.setUTCDate() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCDate()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the day of the month for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`dateValue`](#datevalue)\n\nAn integer from 1 to 31 representing the day of the month.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `dateValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf the `dateValue` is outside of the range of date values for the month, `setDate()` will update the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly.\n\nFor example, if 0 is provided for `dateValue`, the date will be set to the last day of the previous month. If you use 40 for `dateValue`, and the month stored in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object is June, the day will be changed to 10 and the month will be incremented to July.\n\nIf a negative number is provided for `dateValue`, the date will be set counting backwards from the last day of the previous month. -1 would result in the date being set to 1 day before the last day of the previous month.\n\n## [Examples](#examples)\n\n### [Using setUTCDate()](#using_setutcdate)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCDate(20);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcdate](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcdate) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCDate() - JavaScript | MDN",
  "description": "The setUTCDate() method of Date instances changes the day of the month for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime",
  "markdown": "# Date.prototype.setTime() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setTime()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) for this date, which is the number of milliseconds since the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), defined as the midnight at the beginning of January 1, 1970, UTC.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`timeValue`](#timevalue)\n\nAn integer representing the new timestamp — the number of milliseconds since the midnight at the beginning of January 1, 1970, UTC.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `timeValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Examples](#examples)\n\n### [Using setTime()](#using_settime)\n\n```\nconst theBigDay = new Date(\"1999-07-01\");\nconst sameAsBigDay = new Date();\nsameAsBigDay.setTime(theBigDay.getTime());\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.settime](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.settime) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setTime() - JavaScript | MDN",
  "description": "The setTime() method of Date instances changes the timestamp for this date, which is the number of milliseconds since the epoch, defined as the midnight at the beginning of January 1, 1970, UTC.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date",
  "markdown": "# Date() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Date()`** constructor creates [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects. When called as a function, it returns a string representing the current time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Date()\nnew Date(value)\nnew Date(dateString)\nnew Date(dateObject)\n\nnew Date(year, monthIndex)\nnew Date(year, monthIndex, day)\nnew Date(year, monthIndex, day, hours)\nnew Date(year, monthIndex, day, hours, minutes)\nnew Date(year, monthIndex, day, hours, minutes, seconds)\nnew Date(year, monthIndex, day, hours, minutes, seconds, milliseconds)\n\nDate()\n```\n\n**Note:** `Date()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\nThere are five basic forms for the `Date()` constructor:\n\n#### No parameters\n\nWhen no parameters are provided, the newly-created `Date` object represents the current date and time as of the time of instantiation. The returned date's [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) is the same as the number returned by [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now).\n\n#### Time value or timestamp number\n\n[`value`](#value)\n\nAn integer value representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) (the number of milliseconds since midnight at the beginning of January 1, 1970, UTC — a.k.a. the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date)).\n\n#### Date string\n\n[`dateString`](#datestring)\n\nA string value representing a date, parsed and interpreted using the same algorithm implemented by [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). See [date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) for caveats on using different formats.\n\n#### Date object\n\n[`dateObject`](#dateobject)\n\nAn existing `Date` object. This effectively makes a copy of the existing `Date` object with the same date and time. This is equivalent to `new Date(dateObject.valueOf())`, except the `valueOf()` method is not called.\n\nWhen one parameter is passed to the `Date()` constructor, `Date` instances are specially treated. All other values are [converted to primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion). If the result is a string, it will be parsed as a date string. Otherwise, the resulting primitive is further coerced to a number and treated as a timestamp.\n\n#### Individual date and time component values\n\nGiven at least a year and month, this form of `Date()` returns a `Date` object whose component values (year, month, day, hour, minute, second, and millisecond) all come from the following parameters. Any missing fields are given the lowest possible value (`1` for `day` and `0` for every other component). The parameter values are all evaluated against the local time zone, rather than UTC. [`Date.UTC()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC) accepts similar parameters but interprets the components as UTC and returns a timestamp.\n\nIf any parameter overflows its defined bounds, it \"carries over\". For example, if a `monthIndex` greater than `11` is passed in, those months will cause the year to increment; if a `minutes` greater than `59` is passed in, `hours` will increment accordingly, etc. Therefore, `new Date(1990, 12, 1)` will return January 1st, 1991; `new Date(2020, 5, 19, 25, 65)` will return 2:05 A.M. June 20th, 2020.\n\nSimilarly, if any parameter underflows, it \"borrows\" from the higher positions. For example, `new Date(2020, 5, 0)` will return May 31st, 2020.\n\n[`year`](#year)\n\nInteger value representing the year. Values from `0` to `99` map to the years `1900` to `1999`. All other values are the actual year. See the [example](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years).\n\n[`monthIndex`](#monthindex)\n\nInteger value representing the month, beginning with `0` for January to `11` for December.\n\n[`day`](#day) Optional\n\nInteger value representing the day of the month. Defaults to `1`.\n\n[`hours`](#hours) Optional\n\nInteger value between `0` and `23` representing the hour of the day. Defaults to `0`.\n\n[`minutes`](#minutes) Optional\n\nInteger value representing the minute segment of a time. Defaults to `0`.\n\n[`seconds`](#seconds) Optional\n\nInteger value representing the second segment of a time. Defaults to `0`.\n\n[`milliseconds`](#milliseconds) Optional\n\nInteger value representing the millisecond segment of a time. Defaults to `0`.\n\n### [Return value](#return_value)\n\nCalling `new Date()` (the `Date()` constructor) returns a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. If called with an invalid date string, or if the date to be constructed will have a timestamp less than `-8,640,000,000,000,000` or greater than `8,640,000,000,000,000` milliseconds, it returns an [invalid date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) (a `Date` object whose [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString) method returns `\"Invalid Date\"` and [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) method returns `NaN`).\n\nCalling the `Date()` function (without the `new` keyword) returns a string representation of the current date and time, exactly as `new Date().toString()` does. Any arguments given in a `Date()` function call (without the `new` keyword) are ignored; regardless of whether it's called with an invalid date string — or even called with any arbitrary object or other primitive as an argument — it always returns a string representation of the current date and time.\n\n## [Description](#description)\n\n### [Reduced time precision](#reduced_time_precision)\n\nTo offer protection against timing attacks and [fingerprinting](https://developer.mozilla.org/en-US/docs/Glossary/Fingerprinting), the precision of `new Date()` might get rounded depending on browser settings. In Firefox, the `privacy.reduceTimerPrecision` preference is enabled by default and defaults to 2ms. You can also enable `privacy.resistFingerprinting`, in which case the precision will be 100ms or the value of `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`, whichever is larger.\n\nFor example, with reduced time precision, the result of `new Date().getTime()` will always be a multiple of 2, or a multiple of 100 (or `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`) with `privacy.resistFingerprinting` enabled.\n\n```\n// reduced time precision (2ms) in Firefox 60\nnew Date().getTime();\n// Might be:\n// 1519211809934\n// 1519211810362\n// 1519211811670\n// …\n\n// reduced time precision with `privacy.resistFingerprinting` enabled\nnew Date().getTime();\n// Might be:\n// 1519129853500\n// 1519129858900\n// 1519129864400\n// …\n```\n\n## [Examples](#examples)\n\n### [Several ways to create a Date object](#several_ways_to_create_a_date_object)\n\nThe following examples show several ways to create JavaScript dates:\n\n```\nconst today = new Date();\nconst birthday = new Date(\"December 17, 1995 03:24:00\"); // DISCOURAGED: may not work in all runtimes\nconst birthday = new Date(\"1995-12-17T03:24:00\"); // This is standardized and will work reliably\nconst birthday = new Date(1995, 11, 17); // the month is 0-indexed\nconst birthday = new Date(1995, 11, 17, 3, 24, 0);\nconst birthday = new Date(628021800000); // passing epoch timestamp\n```\n\n### [Passing a non-Date, non-string, non-number value](#passing_a_non-date_non-string_non-number_value)\n\nIf the `Date()` constructor is called with one parameter which is not a `Date` instance, it will be coerced to a primitive and then checked whether it's a string. For example, `new Date(undefined)` is different from `new Date()`:\n\n```\nconsole.log(new Date(undefined)); // Invalid Date\n```\n\nThis is because `undefined` is already a primitive but not a string, so it will be coerced to a number, which is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) and therefore not a valid timestamp. On the other hand, `null` will be coerced to `0`.\n\n```\nconsole.log(new Date(null)); // 1970-01-01T00:00:00.000Z\n```\n\n[Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) would be coerced to a string via [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString), which joins the elements with commas. However, the resulting string for any array with more than one element is not a valid ISO 8601 date string, so its parsing behavior would be implementation-defined. **Do not pass arrays to the `Date()` constructor.**\n\n```\nconsole.log(new Date([\"2020-06-19\", \"17:13\"]));\n// 2020-06-19T17:13:00.000Z in Chrome, since it recognizes \"2020-06-19,17:13\"\n// \"Invalid Date\" in Firefox\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date-constructor](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date() constructor - JavaScript | MDN",
  "description": "The Date() constructor creates Date objects. When called as a function, it returns a string representing the current time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse",
  "markdown": "# Date.parse() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Date.parse()`** static method parses a string representation of a date, and returns the date's [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nOnly the [date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) is explicitly specified to be supported. Other formats are implementation-defined and may not work across all browsers. A library can help if many different formats are to be accommodated.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`dateString`](#datestring)\n\nA string in [the date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format). See the linked reference for caveats on using different formats.\n\n### [Return value](#return_value)\n\nA number representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) of the given date. If `dateString` fails to be parsed as a valid date, [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is returned.\n\n## [Description](#description)\n\nThis function is useful for setting date values based on string values, for example in conjunction with the [`setTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime) method.\n\nBecause `parse()` is a static method of `Date`, you always use it as `Date.parse()`, rather than as a method of a `Date` object you created.\n\n## [Examples](#examples)\n\n### [Using Date.parse()](#using_date.parse)\n\nThe following calls all return `1546300800000`. The first will imply UTC time because it's date-only, and the others explicitly specify the UTC timezone.\n\n```\nDate.parse(\"2019-01-01\");\nDate.parse(\"2019-01-01T00:00:00.000Z\");\nDate.parse(\"2019-01-01T00:00:00.000+00:00\");\n```\n\nThe following call, which does not specify a time zone will be set to 2019-01-01 at 00:00:00 in the local timezone of the system, because it has both date and time.\n\n```\nDate.parse(\"2019-01-01T00:00:00\");\n```\n\n### [Non-standard date strings](#non-standard_date_strings)\n\n**Note:** This section contains implementation-specific behavior that can be inconsistent across implementations.\n\nImplementations usually default to the local time zone when the date string is non-standard. For consistency, we will assume that the code uses the UTC timezone.\n\n```\nDate.parse(\"Jan 1, 1970\"); // 0 in all implementations\n\nDate.parse(\"Thu, 01 Jan 1970 00:00:00\"); // 0 in all implementations\n\nDate.parse(\"1970,1,1\"); // 0 in Chrome and Firefox, NaN in Safari\n\nDate.parse(\"02 01 1970\");\n// 2678400000 in Chrome and Firefox (Sun Feb 01 1970 00:00:00 GMT+0000);\n// NaN in Safari\n\n// With explicit timezone\nDate.parse(\"Thu, 01 Jan 1970 00:00:00 GMT+0300\");\n// -10800000 in all implementations in all timezones\n\n// Single number\nDate.parse(\"0\");\n// NaN in Firefox ≤122\n// 946684800000 in Chrome and Firefox ≥123  (Sat Jan 01 2000 00:00:00 GMT+0000);\n// -62167219200000 in Safari (Sat Jan 01 0000 00:00:00 GMT+0000)\n\n// Two-digit number that may be a month\nDate.parse(\"28\");\n// NaN Chrome and Firefox\n// -61283606400000 in Safari (Fri Dec 31 0027 23:58:45 GMT-0001)\n\n// Two-digit year\nDate.parse(\"70/01/01\"); // 0 in all implementations\n\n// Out-of-bounds date components\nDate.parse(\"2014-25-23\"); // NaN in all implementations\nDate.parse(\"Mar 32, 2014\"); // NaN in all implementations\nDate.parse(\"2014/25/23\"); // NaN in all implementations\n\nDate.parse(\"2014-02-30\");\n// NaN in Safari\n// 1393718400000 in Chrome and Firefox (Sun Mar 02 2014 00:00:00 GMT+0000)\nDate.parse(\"02/30/2014\"); // 1393718400000 in all implementations\n\n// Chrome, Safari, and Firefox 122 and later parse only the first three letters for the month.\n// FF121 and earlier parse first three letters and any substring up to the correct month name.\nDate.parse(\"04 Dec 1995\"); // 818031600000 in all implementations\nDate.parse(\"04 Decem 1995\"); // 818031600000 in all implementations\nDate.parse(\"04 December 1995\"); // 818031600000 in all implementations\nDate.parse(\"04 DecFoo 1995\"); // NaN in Firefox 121 and earlier. 818031600000 in other implementations\nDate.parse(\"04 De 1995\"); // NaN in all implementations\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.parse](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.parse) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.parse() - JavaScript | MDN",
  "description": "The Date.parse() static method parses a string representation of a date, and returns the date's timestamp.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear",
  "markdown": "# Date.prototype.setUTCFullYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCFullYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the year for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCFullYear(yearValue)\nsetUTCFullYear(yearValue, monthValue)\nsetUTCFullYear(yearValue, monthValue, dateValue)\n```\n\n### [Parameters](#parameters)\n\n[`yearValue`](#yearvalue)\n\nAn integer representing the year. For example, 1995.\n\n[`monthValue`](#monthvalue) Optional\n\nAn integer representing the month: 0 for January, 1 for February, and so on.\n\n[`dateValue`](#datevalue) Optional\n\nAn integer between 1 and 31 representing the day of the month. If you specify `dateValue`, you must also specify `monthValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `monthValue` and `dateValue` parameters, the values returned from the [`getUTCMonth()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth) and [`getUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate) methods are used.\n\nIf a parameter you specify is outside of the expected range, `setUTCFullYear()` attempts to update the other parameters and the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1 (`yearValue + 1`), and 3 is used for the month.\n\n## [Examples](#examples)\n\n### [Using setUTCFullYear()](#using_setutcfullyear)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCFullYear(1997);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcfullyear](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcfullyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCFullYear() - JavaScript | MDN",
  "description": "The setUTCFullYear() method of Date instances changes the year for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC",
  "markdown": "# Date.UTC() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Date.UTC()`** static method accepts parameters representing the date and time components similar to the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nDate.UTC(year)\nDate.UTC(year, monthIndex)\nDate.UTC(year, monthIndex, day)\nDate.UTC(year, monthIndex, day, hour)\nDate.UTC(year, monthIndex, day, hour, minute)\nDate.UTC(year, monthIndex, day, hour, minute, second)\nDate.UTC(year, monthIndex, day, hour, minute, second, millisecond)\n```\n\n### [Parameters](#parameters)\n\n[`year`](#year)\n\nInteger value representing the year. Values from `0` to `99` map to the years `1900` to `1999`. All other values are the actual year. See the [example](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years).\n\n[`monthIndex`](#monthindex) Optional\n\nInteger value representing the month, beginning with `0` for January to `11` for December. Defaults to `0`.\n\n[`day`](#day) Optional\n\nInteger value representing the day of the month. Defaults to `1`.\n\n[`hours`](#hours) Optional\n\nInteger value between `0` and `23` representing the hour of the day. Defaults to `0`.\n\n[`minutes`](#minutes) Optional\n\nInteger value representing the minute segment of a time. Defaults to `0`.\n\n[`seconds`](#seconds) Optional\n\nInteger value representing the second segment of a time. Defaults to `0`.\n\n[`milliseconds`](#milliseconds) Optional\n\nInteger value representing the millisecond segment of a time. Defaults to `0`.\n\n### [Return value](#return_value)\n\nA number representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) of the given date. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nYears between `0` and `99` are converted to a year in the 20th century `(1900 + year)`. For example, `95` is converted to the year `1995`.\n\nThe `UTC()` method differs from the [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor in three ways:\n\n1.  `Date.UTC()` uses universal time instead of the local time.\n2.  `Date.UTC()` returns a time value as a number instead of creating a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n3.  When passed a single number, `Date.UTC()` interprets it as a year instead of a timestamp.\n\nIf a parameter is outside of the expected range, the `UTC()` method updates the other parameters to accommodate the value. For example, if `15` is used for `monthIndex`, the year will be incremented by 1 `(year + 1)` and `3` will be used for the month.\n\nBecause `UTC()` is a static method of `Date`, you always use it as `Date.UTC()`, rather than as a method of a `Date` object you created.\n\n## [Examples](#examples)\n\n### [Using Date.UTC()](#using_date.utc)\n\nThe following statement creates a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object with the arguments treated as UTC instead of local:\n\n```\nconst utcDate = new Date(Date.UTC(2018, 11, 1, 0, 0, 0));\n```\n\n### [Behavior of Date.UTC() with one argument](#behavior_of_date.utc_with_one_argument)\n\n`Date.UTC()` when passed one argument used to have inconsistent behavior, because implementations only kept the behavior consistent with the [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor, which does not interpret a single argument as the year number. Implementations are now required to treat omitted `monthIndex` as `0`, instead of coercing it to `NaN`.\n\n```\nDate.UTC(2017); // 1483228800000\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.utc](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.utc) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.UTC() - JavaScript | MDN",
  "description": "The Date.UTC() static method accepts parameters representing the date and time components similar to the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/RangeError",
  "markdown": "# RangeError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`RangeError()`** constructor creates [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew RangeError()\nnew RangeError(message)\nnew RangeError(message, options)\nnew RangeError(message, fileName)\nnew RangeError(message, fileName, lineNumber)\n\nRangeError()\nRangeError(message)\nRangeError(message, options)\nRangeError(message, fileName)\nRangeError(message, fileName, lineNumber)\n```\n\n**Note:** `RangeError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `RangeError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n### [Using RangeError (for numeric values)](#using_rangeerror_for_numeric_values)\n\n```\nfunction check(n) {\n  if (!(n >= -500 && n <= 500)) {\n    throw new RangeError(\"The argument must be between -500 and 500.\");\n  }\n}\n\ntry {\n  check(2000);\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n### [Using RangeError (for non-numeric values)](#using_rangeerror_for_non-numeric_values)\n\n```\nfunction check(value) {\n  if (![\"apple\", \"banana\", \"carrot\"].includes(value)) {\n    throw new RangeError(\n      'The argument must be an \"apple\", \"banana\", or \"carrot\".',\n    );\n  }\n}\n\ntry {\n  check(\"cabbage\");\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RangeError() constructor - JavaScript | MDN",
  "description": "The RangeError() constructor creates RangeError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive",
  "markdown": "# Date.prototype\\[@@toPrimitive\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@toPrimitive]()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ndate[Symbol.toPrimitive](hint)\n```\n\n### [Parameters](#parameters)\n\n[`hint`](#hint)\n\nA string representing the type of the primitive value to return. The following values are valid:\n\n*   `\"string\"` or `\"default\"`: The method should return a string.\n*   `\"number\"`: The method should return a number.\n\n### [Return value](#return_value)\n\nIf `hint` is `\"string\"` or `\"default\"`, this method returns a string by [coercing the `this` value to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) (first trying `toString()` then trying `valueOf()`).\n\nIf `hint` is `\"number\"`, this method returns a number by [coercing the `this` value to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) (first trying `valueOf()` then trying `toString()`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `hint` argument is not one of the three valid values.\n\n## [Description](#description)\n\nThe `[@@toPrimitive]()` method is part of the [type coercion protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). JavaScript always calls the `[@@toPrimitive]()` method in priority to convert an object to a primitive value. You rarely need to invoke the `[@@toPrimitive]()` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThe `[@@toPrimitive]()` method of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object returns a primitive value by either invoking [`this.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) and returning a number, or invoking [`this.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString) and returning a string. It exists to override the default [primitive coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) process to return a string instead of a number, because primitive coercion, by default, calls [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) before [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString). With the custom `[@@toPrimitive]()`, `new Date(0) + 1` returns `\"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1\"` (a string) instead of `1` (a number).\n\n## [Examples](#examples)\n\n### [Using \\[@@toPrimitive\\]()](#using_toprimitive)\n\n```\nconst d = new Date(0); // 1970-01-01T00:00:00.000Z\n\nd[Symbol.toPrimitive](\"string\"); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nd[Symbol.toPrimitive](\"number\"); // 0\nd[Symbol.toPrimitive](\"default\"); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype-@@toprimitive](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype-@@toprimitive) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype[@@toPrimitive]() - JavaScript | MDN",
  "description": "The [@@toPrimitive]() method of Date instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds",
  "markdown": "# Date.prototype.setUTCMilliseconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCMilliseconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the milliseconds for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCMilliseconds(millisecondsValue)\n```\n\n### [Parameters](#parameters)\n\n[`millisecondsValue`](#millisecondsvalue)\n\nAn integer between 0 and 999 representing the milliseconds.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `millisecondsValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf a parameter you specify is outside of the expected range, `setUTCMilliseconds()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 1100 for `millisecondsValue`, the seconds stored in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object will be incremented by 1, and 100 will be used for milliseconds.\n\n## [Examples](#examples)\n\n### [Using setUTCMilliseconds()](#using_setutcmilliseconds)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCMilliseconds(500);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcmilliseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcmilliseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCMilliseconds() - JavaScript | MDN",
  "description": "The setUTCMilliseconds() method of Date instances changes the milliseconds for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate",
  "markdown": "# Date.prototype.getDate() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getDate()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the day of the month for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 1 and 31, representing the day of the month for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getDate()](#using_getdate)\n\nThe `day` variable has value `25`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst day = xmas95.getDate();\n\nconsole.log(day); // 25\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getdate](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getdate) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getDate() - JavaScript | MDN",
  "description": "The getDate() method of Date instances returns the day of the month for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours",
  "markdown": "# Date.prototype.getHours() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getHours()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the hours for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 23, representing the hours for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getHours()](#using_gethours)\n\nThe `hours` variable has value `23`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst hours = xmas95.getHours();\n\nconsole.log(hours); // 23\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.gethours](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.gethours) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getHours() - JavaScript | MDN",
  "description": "The getHours() method of Date instances returns the hours for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes",
  "markdown": "# Date.prototype.setUTCMinutes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCMinutes()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the minutes for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCMinutes(minutesValue)\nsetUTCMinutes(minutesValue, secondsValue)\nsetUTCMinutes(minutesValue, secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`minutesValue`](#minutesvalue)\n\nAn integer between 0 and 59 representing the minutes.\n\n[`secondsValue`](#secondsvalue) Optional\n\nAn integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `secondsValue` and `msValue` parameters, the values returned from [`getUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds) and [`getUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds) methods are used.\n\nIf a parameter you specify is outside of the expected range, `setUTCMinutes()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (`minutesValue + 1`), and 40 will be used for seconds.\n\n## [Examples](#examples)\n\n### [Using setUTCMinutes()](#using_setutcminutes)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCMinutes(43);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcminutes](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcminutes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCMinutes() - JavaScript | MDN",
  "description": "The setUTCMinutes() method of Date instances changes the minutes for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours",
  "markdown": "# Date.prototype.setUTCHours() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCHours()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCHours(hoursValue)\nsetUTCHours(hoursValue, minutesValue)\nsetUTCHours(hoursValue, minutesValue, secondsValue)\nsetUTCHours(hoursValue, minutesValue, secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`hoursValue`](#hoursvalue)\n\nAn integer between 0 and 23 representing the hours.\n\n[`minutesValue`](#minutesvalue) Optional\n\nAn integer between 0 and 59 representing the minutes.\n\n[`secondsValue`](#secondsvalue) Optional\n\nAn integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the values returned from the [`getUTCMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes), [`getUTCSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds), and [`getUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds) methods are used.\n\nIf a parameter you specify is outside of the expected range, `setUTCHours()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (`minutesValue + 1`), and 40 will be used for seconds.\n\n## [Examples](#examples)\n\n### [Using setUTCHours()](#using_setutchours)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCHours(8);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutchours](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutchours) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCHours() - JavaScript | MDN",
  "description": "The setUTCHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth",
  "markdown": "# Date.prototype.setUTCMonth() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCMonth()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the month and/or day of the month for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCMonth(monthValue)\nsetUTCMonth(monthValue, dateValue)\n```\n\n### [Parameters](#parameters)\n\n[`monthValue`](#monthvalue)\n\nAn integer representing the month: 0 for January, 1 for February, and so on.\n\n[`dateValue`](#datevalue) Optional\n\nAn integer from 1 to 31 representing the day of the month.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `dateValue` parameter, the value returned from the [`getUTCDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate) method is used.\n\nIf a parameter you specify is outside of the expected range, `setUTCMonth()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 15 for `monthValue`, the year will be incremented by 1, and 3 will be used for month.\n\n## [Examples](#examples)\n\n### [Using setUTCMonth()](#using_setutcmonth)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCMonth(11);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcmonth](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcmonth) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCMonth() - JavaScript | MDN",
  "description": "The setUTCMonth() method of Date instances changes the month and/or day of the month for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes",
  "markdown": "# Date.prototype.getMinutes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getMinutes()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the minutes for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 59, representing the minutes for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getMinutes()](#using_getminutes)\n\nThe `minutes` variable has value `15`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst minutes = xmas95.getMinutes();\n\nconsole.log(minutes); // 15\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getminutes](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getminutes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getMinutes() - JavaScript | MDN",
  "description": "The getMinutes() method of Date instances returns the minutes for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds",
  "markdown": "# Date.prototype.setUTCSeconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setUTCSeconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the seconds and/or milliseconds for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetUTCSeconds(secondsValue)\nsetUTCSeconds(secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`secondsValue`](#secondsvalue)\n\nAn integer between 0 and 59 representing the seconds.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `msValue` parameter, the value returned from the [`getUTCMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds) method is used.\n\nIf a parameter you specify is outside of the expected range, `setUTCSeconds()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object will be incremented by 1, and 40 will be used for seconds.\n\n## [Examples](#examples)\n\n### [Using setUTCSeconds()](#using_setutcseconds)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setUTCSeconds(20);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setutcseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setutcseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setUTCSeconds() - JavaScript | MDN",
  "description": "The setUTCSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds",
  "markdown": "# Date.prototype.getSeconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getSeconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the seconds for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 59, representing the seconds for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getSeconds()](#using_getseconds)\n\nThe `seconds` variable has value `30`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst seconds = xmas95.getSeconds();\n\nconsole.log(seconds); // 30\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getSeconds() - JavaScript | MDN",
  "description": "The getSeconds() method of Date instances returns the seconds for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear",
  "markdown": "# Date.prototype.setYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`setYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances sets the year for a specified date according to local time.\n\nHowever, the way the legacy `setYear()` method sets year values is different from how the preferred [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) method sets year values — and in some cases, also different from how `new Date()` and [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) set year values. Specifically, given two-digit numbers, such as `22` and `61`:\n\n*   `setYear()` interprets any two-digit number as an offset to `1900`; so `date.setYear(22)` results in the year value being set to `1922`, and `date.setYear(61)` results in the year value being set to `1961`. (In contrast, while `new Date(61, 1)` also results in the year value being set to `1961`, `new Date(\"2/1/22\")` results in the year value being set to `2022`; and similarly for [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)).\n*   [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) does no special interpretation but instead uses the literal two-digit value as-is to set the year; so `date.setFullYear(61)` results in the year value being set to `0061`, and `date.setFullYear(22)` results in the year value being set to `0022`.\n\nBecause of those differences in behavior, you should no longer use the legacy `setYear()` method, but should instead use the preferred [`setFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear) method.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `yearValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf `yearValue` is a number between 0 and 99 (inclusive), then the year for `dateObj` is set to `1900 + yearValue`. Otherwise, the year for `dateObj` is set to `yearValue`.\n\n## [Examples](#examples)\n\n### [Using setYear()](#using_setyear)\n\nThe first two lines set the year to 1996. The third sets the year to 2000.\n\n```\nconst theBigDay = new Date();\n\ntheBigDay.setYear(96);\ntheBigDay.setYear(1996);\ntheBigDay.setYear(2000);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setyear](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-date.prototype.setyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setYear() - JavaScript | MDN",
  "description": "The setYear() method of Date instances sets the year for a specified date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset",
  "markdown": "# Date.prototype.getTimezoneOffset() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTimezoneOffset()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the difference, in minutes, between the date as evaluated in the UTC time zone and as evaluated in the local time zone. The actual local time algorithm is implementation-defined, and the return value is allowed to be zero in runtimes without appropriate data. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\n`date.getTimezoneOffset()` returns the difference, in minutes, between `date` as evaluated in the UTC time zone and as evaluated in the local time zone — that is, the time zone of the host system in which the browser is being used (if the code is run from the Web in a browser), or otherwise the host system of whatever JavaScript runtime (for example, a Node.js environment) the code is executed in.\n\n### [Negative values and positive values](#negative_values_and_positive_values)\n\nThe number of minutes returned by `getTimezoneOffset()` is positive if the local time zone is behind UTC, and negative if the local time zone is ahead of UTC. For example, for UTC+10, `-600` will be returned.\n\n| Current time zone | Return value |\n| --- | --- |\n| UTC-8 | 480 |\n| UTC | 0   |\n| UTC+3 | \\-180 |\n\n### [Varied results in Daylight Saving Time (DST) regions](#varied_results_in_daylight_saving_time_dst_regions)\n\nIn a region that annually shifts in and out of Daylight Saving Time (DST), as `date` varies, the number of minutes returned by calling `getTimezoneOffset()` can be non-uniform.\n\n**Note:** `getTimezoneOffset()`'s behavior will never differ based on the time when the code is run — its behavior is always consistent when running in the same region. Only the value of `date` affects the result.\n\nIn most implementations, the [IANA time zone database](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database) (tzdata) is used to precisely determine the offset of the local timezone at the moment of the `date`. However, if such information is unavailable, an implementation may return zero.\n\n## [Examples](#examples)\n\n### [Using getTimezoneOffset()](#using_gettimezoneoffset)\n\n```\n// Create a Date instance for the current time\nconst currentLocalDate = new Date();\n// Create a Date instance for 03:24 GMT-0200 on May 1st in 2016\nconst laborDay2016at0324GMTminus2 = new Date(\"2016-05-01T03:24:00-02:00\");\ncurrentLocalDate.getTimezoneOffset() ===\n  laborDay2016at0324GMTminus2.getTimezoneOffset();\n// true, always, in any timezone that doesn't annually shift in and out of DST\n// false, sometimes, in any timezone that annually shifts in and out of DST\n```\n\n### [getTimezoneOffset() and DST](#gettimezoneoffset_and_dst)\n\nIn regions that use DST, the return value may change based on the time of the year `date` is in. Below is the output in a runtime in New York, where the timezone is UTC-05:00.\n\n```\nconst nyOffsetSummer = new Date(\"2022-02-01\").getTimezoneOffset(); // 300\nconst nyOffsetWinter = new Date(\"2022-08-01\").getTimezoneOffset(); // 240\n```\n\n### [getTimezoneOffset() and historical data](#gettimezoneoffset_and_historical_data)\n\nDue to historical reasons, the timezone a region is in can be constantly changing, even disregarding DST. For example, below is the output in a runtime in Shanghai, where the timezone is UTC+08:00.\n\n```\nconst shModernOffset = new Date(\"2022-01-27\").getTimezoneOffset(); // -480\nconst shHistoricalOffset = new Date(\"1943-01-27\").getTimezoneOffset(); // -540\n```\n\nThis is because during the [Sino-Japanese War](https://en.wikipedia.org/wiki/Second_Sino-Japanese_War) when Shanghai was under Japanese control, the timezone was changed to UTC+09:00 to align with Japan's (in effect, it was a \"year-round DST\"), and this was recorded in the IANA database.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.gettimezoneoffset](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.gettimezoneoffset) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getTimezoneOffset() - JavaScript | MDN",
  "description": "The getTimezoneOffset() method of Date instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString",
  "markdown": "# Date.prototype.toDateString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toDateString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing the date portion of this date interpreted in the local timezone.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the date portion of the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\n[`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances refer to a specific point in time. `toDateString()` interprets the date in the local timezone and formats the _date_ part in English. It always uses the following format, separated by spaces:\n\n1.  First three letters of the week day name\n2.  First three letters of the month name\n3.  Two-digit day of the month, padded on the left a zero if necessary\n4.  Four-digit year (at least), padded on the left with zeros if necessary. May have a negative sign\n\nFor example: \"Thu Jan 01 1970\".\n\n*   If you only want to get the _time_ part, use [`toTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString).\n*   If you want to get both the date and time, use [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString).\n*   If you want to make the date interpreted as UTC instead of local timezone, use [`toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString).\n*   If you want to format the date in a more user-friendly format (e.g. localization), use [`toLocaleDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString).\n\n## [Examples](#examples)\n\n### [Using toDateString()](#using_todatestring)\n\n```\nconst d = new Date(0);\n\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(d.toDateString()); // \"Thu Jan 01 1970\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.todatestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.todatestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toDateString() - JavaScript | MDN",
  "description": "The toDateString() method of Date instances returns a string representing the date portion of this date interpreted in the local timezone.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  "markdown": "# Date.prototype.toISOString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toISOString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing this date in the [date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format), a _simplified_ format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), which is always 24 or 27 characters long (`YYYY-MM-DDTHH:mm:ss.sssZ` or `±YYYYYY-MM-DDTHH:mm:ss.sssZ`, respectively). The timezone is always UTC, as denoted by the suffix `Z`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the given date in the [date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) according to universal time. It's the same format as the one required to be recognized by [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) or if it corresponds to a year that cannot be represented in the date string format.\n\n## [Examples](#examples)\n\n### [Using toISOString()](#using_toisostring)\n\n```\nconst d = new Date(0);\n\nconsole.log(d.toISOString()); // \"1970-01-01T00:00:00.000Z\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.toisostring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.toisostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toISOString() - JavaScript | MDN",
  "description": "The toISOString() method of Date instances returns a string representing this date in the date time string format, a simplified format based on ISO 8601, which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always UTC, as denoted by the suffix Z.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay",
  "markdown": "# Date.prototype.getUTCDay() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCDay()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the day of the week for this date according to universal time, where 0 represents Sunday.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer corresponding to the day of the week for the given date according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCDay()](#using_getutcday)\n\nThe following example assigns the weekday portion of the current date to the variable `weekday`.\n\n```\nconst today = new Date();\nconst weekday = today.getUTCDay();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcday](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcday) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCDay() - JavaScript | MDN",
  "description": "The getUTCDay() method of Date instances returns the day of the week for this date according to universal time, where 0 represents Sunday.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate",
  "markdown": "# Date.prototype.getUTCDate() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCDate()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the day of the month for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 1 and 31, representing day of month for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCDate()](#using_getutcdate)\n\nThe following example assigns the day of month of the current date to the variable `dayOfMonth`.\n\n```\nconst today = new Date();\nconst dayOfMonth = today.getUTCDate();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcdate](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcdate) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCDate() - JavaScript | MDN",
  "description": "The getUTCDate() method of Date instances returns the day of the month for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds",
  "markdown": "# Date.prototype.getMilliseconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getMilliseconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the milliseconds for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 999, representing the milliseconds for the given date according to local time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getMilliseconds()](#using_getmilliseconds)\n\nThe `milliseconds` variable has value `0`, based on the value of the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object `xmas95`, which doesn't specify the milliseconds component, so it defaults to 0.\n\n```\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst milliseconds = xmas95.getMilliseconds();\n\nconsole.log(milliseconds); // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getmilliseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getmilliseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getMilliseconds() - JavaScript | MDN",
  "description": "The getMilliseconds() method of Date instances returns the milliseconds for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON",
  "markdown": "# Date.prototype.toJSON() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toJSON()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing this date in the same ISO format as [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the given date in the [date time string format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) according to universal time, or `null` when the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). For valid dates, the return value is the same as that of [`toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString).\n\n## [Description](#description)\n\nThe `toJSON()` method is automatically called by [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) when a `Date` object is stringified. This method is generally intended to, by default, usefully serialize [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects during [JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON) serialization, which can then be deserialized using the [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor as the reviver of [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n\nThe method first attempts to convert its `this` value [to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling its [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), and [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) methods, in that order. If the result is a [non-finite](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) number, `null` is returned. (This generally corresponds to an invalid date, whose [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf) returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).) Otherwise, if the converted primitive is not a number or is a finite number, the return value of [`this.toISOString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString) is returned.\n\nNote that the method does not check whether the `this` value is a valid [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. However, calling `Date.prototype.toJSON()` on non-`Date` objects fails unless the object's number primitive representation is `NaN`, or the object also has a `toISOString()` method.\n\n## [Examples](#examples)\n\n### [Using toJSON()](#using_tojson)\n\n```\nconst jsonDate = new Date(0).toJSON(); // '1970-01-01T00:00:00.000Z'\nconst backToDate = new Date(jsonDate);\n\nconsole.log(jsonDate); // 1970-01-01T00:00:00.000Z\n```\n\n### [Serialization round-tripping](#serialization_round-tripping)\n\nWhen parsing JSON containing date strings, you can use the [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor to revive them into the original date objects.\n\n```\nconst fileData = {\n  author: \"Maria\",\n  title: \"Date.prototype.toJSON()\",\n  createdAt: new Date(2019, 3, 15),\n  updatedAt: new Date(2020, 6, 26),\n};\nconst response = JSON.stringify(fileData);\n\n// Imagine transmission through network\n\nconst data = JSON.parse(response, (key, value) => {\n  if (key === \"createdAt\" || key === \"updatedAt\") {\n    return new Date(value);\n  }\n  return value;\n});\n\nconsole.log(data);\n```\n\n**Note:** The reviver of `JSON.parse()` must be specific to the payload shape you expect, because the serialization is _lossy_: it's not possible to distinguish between a string that represents a Date and a normal string.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.tojson](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.tojson) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toJSON() - JavaScript | MDN",
  "description": "The toJSON() method of Date instances returns a string representing this date in the same ISO format as toISOString().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear",
  "markdown": "# Date.prototype.getUTCFullYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCFullYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the year for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer representing the year for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nUnlike [`getYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear), the value returned by `getUTCFullYear()` is an absolute number. For dates between the years 1000 and 9999, `getFullYear()` returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.\n\n## [Examples](#examples)\n\n### [Using getUTCFullYear()](#using_getutcfullyear)\n\nThe following example assigns the four-digit value of the current year to the variable `year`.\n\n```\nconst today = new Date();\nconst year = today.getUTCFullYear();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcfullyear](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcfullyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCFullYear() - JavaScript | MDN",
  "description": "The getUTCFullYear() method of Date instances returns the year for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString",
  "markdown": "# Date.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string with a language-sensitive representation of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. If `weekday`, `year`, `month`, `day`, `dayPeriod`, `hour`, `minute`, `second`, and `fractionalSecondDigits` are all undefined, then `year`, `month`, `day`, `hour`, `minute`, `second` will be set to `\"numeric\"`.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`.\n\n**Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleString()](#using_tolocalestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleString() without arguments depends on the\n// implementation, the default locale, and the default time zone\nconsole.log(date.toLocaleString());\n// \"12/11/2012, 7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses month-day-year order and 12-hour time with AM/PM\nconsole.log(date.toLocaleString(\"en-US\"));\n// \"12/19/2012, 7:00:00 PM\"\n\n// British English uses day-month-year order and 24-hour time without AM/PM\nconsole.log(date.toLocaleString(\"en-GB\"));\n// \"20/12/2012 03:00:00\"\n\n// Korean uses year-month-day order and 12-hour time with AM/PM\nconsole.log(date.toLocaleString(\"ko-KR\"));\n// \"2012. 12. 20. 오후 12:00:00\"\n\n// Arabic in most Arabic-speaking countries uses Eastern Arabic numerals\nconsole.log(date.toLocaleString(\"ar-EG\"));\n// \"٢٠‏/١٢‏/٢٠١٢ ٥:٠٠:٠٠ ص\"\n\n// For Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(date.toLocaleString(\"ja-JP-u-ca-japanese\"));\n// \"24/12/20 12:00:00\"\n\n// When requesting a language that may not be supported, such as\n// Balinese, include a fallback language (in this case, Indonesian)\nconsole.log(date.toLocaleString([\"ban\", \"id\"]));\n// \"20/12/2012 11.00.00\"\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Request a weekday along with a long date\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(date.toLocaleString(\"de-DE\", options));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// An application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(date.toLocaleString(\"en-US\", options));\n// \"Thursday, December 20, 2012, GMT\"\n\n// Sometimes even the US needs 24-hour time\nconsole.log(date.toLocaleString(\"en-US\", { hour12: false }));\n// \"12/19/2012, 19:00:00\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.tolocalestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.tolocalestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-date.prototype.tolocalestring](https://tc39.es/ecma402/#sup-date.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toLocaleString() - JavaScript | MDN",
  "description": "The toLocaleString() method of Date instances returns a string with a language-sensitive representation of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours",
  "markdown": "# Date.prototype.getUTCHours() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCHours()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the hours for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 23, representing the hours for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCHours()](#using_getutchours)\n\nThe following example assigns the hours portion of the current time to the variable `hours`.\n\n```\nconst today = new Date();\nconst hours = today.getUTCHours();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutchours](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutchours) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCHours() - JavaScript | MDN",
  "description": "The getUTCHours() method of Date instances returns the hours for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString",
  "markdown": "# Date.prototype.toLocaleTimeString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleTimeString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleTimeString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleTimeString()\ntoLocaleTimeString(locales)\ntoLocaleTimeString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. If `dayPeriod`, `hour`, `minute`, `second`, and `fractionalSecondDigits` are all undefined, then `hour`, `minute`, `second` will be set to `\"numeric\"`.\n\nIn implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the time portion of the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`, where `options` has been normalized as described above.\n\n**Note:** Most of the time, the formatting returned by `toLocaleTimeString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleTimeString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleTimeString()](#using_tolocaletimestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleTimeString() without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(date.toLocaleTimeString());\n// \"7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleTimeString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleTimeStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses 12-hour time with AM/PM\nconsole.log(date.toLocaleTimeString(\"en-US\"));\n// \"7:00:00 PM\"\n\n// British English uses 24-hour time without AM/PM\nconsole.log(date.toLocaleTimeString(\"en-GB\"));\n// \"03:00:00\"\n\n// Korean uses 12-hour time with AM/PM\nconsole.log(date.toLocaleTimeString(\"ko-KR\"));\n// \"오후 12:00:00\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(date.toLocaleTimeString(\"ar-EG\"));\n// \"٧:٠٠:٠٠ م\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(date.toLocaleTimeString([\"ban\", \"id\"]));\n// \"11.00.00\"\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleTimeString()` can be customized using the `options` parameter:\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// An application may want to use UTC and make that visible\nconst options = { timeZone: \"UTC\", timeZoneName: \"short\" };\nconsole.log(date.toLocaleTimeString(\"en-US\", options));\n// \"3:00:00 AM GMT\"\n\n// Sometimes even the US needs 24-hour time\nconsole.log(date.toLocaleTimeString(\"en-US\", { hour12: false }));\n// \"19:00:00\"\n\n// Show only hours and minutes, use options with the default locale - use an empty array\nconsole.log(\n  date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n);\n// \"20:01\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.tolocaletimestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.tolocaletimestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-date.prototype.tolocaletimestring](https://tc39.es/ecma402/#sup-date.prototype.tolocaletimestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toLocaleTimeString() - JavaScript | MDN",
  "description": "The toLocaleTimeString() method of Date instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes",
  "markdown": "# Date.prototype.getUTCMinutes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCMinutes()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the minutes for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 59, representing the minutes for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCMinutes()](#using_getutcminutes)\n\nThe following example assigns the minutes portion of the current time to the variable `minutes`.\n\n```\nconst today = new Date();\nconst minutes = today.getUTCMinutes();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcminutes](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcminutes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCMinutes() - JavaScript | MDN",
  "description": "The getUTCMinutes() method of Date instances returns the minutes for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString",
  "markdown": "# Date.prototype.toTimeString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toTimeString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing the time portion of this date interpreted in the local timezone.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the time portion of the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\n[`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances refer to a specific point in time. `toTimeString()` interprets the date in the local timezone and formats the _time_ part in English. It always uses the format of `hh:mm:ss GMT±xxxx (TZ)`, where:\n\n| Format String | Description |\n| --- | --- |\n| `hh` | Hour, as two digits with leading zero if required |\n| `mm` | Minute, as two digits with leading zero if required |\n| `ss` | Seconds, as two digits with leading zero if required |\n| `±xxxx` | The local timezone's offset — two digits for hours and two digits for minutes (e.g. `-0500`, `+0800`) |\n| `TZ` | The timezone's name (e.g. `PDT`, `PST`) |\n\nFor example: \"04:42:04 GMT+0000 (Coordinated Universal Time)\".\n\n*   If you only want to get the _date_ part, use [`toDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString).\n*   If you want to get both the date and time, use [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString).\n*   If you want to make the date interpreted as UTC instead of local timezone, use [`toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString).\n*   If you want to format the date in a more user-friendly format (e.g. localization), use [`toLocaleTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString).\n\n## [Examples](#examples)\n\n### [Using toTimeString()](#using_totimestring)\n\n```\nconst d = new Date(0);\n\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(d.toTimeString()); // \"00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.totimestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.totimestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toTimeString() - JavaScript | MDN",
  "description": "The toTimeString() method of Date instances returns a string representing the time portion of this date interpreted in the local timezone.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString",
  "markdown": "# Date.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing this date interpreted in the local timezone.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nThe `toString()` method is part of the [type coercion protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Because `Date` has a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) method, that method always takes priority over `toString()` when a `Date` object is implicitly [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). However, `Date.prototype[@@toPrimitive]()` still calls `this.toString()` internally.\n\nThe [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object overrides the [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). `Date.prototype.toString()` returns a string representation of the Date as interpreted in the local timezone, containing both the date and the time — it joins the string representation specified in [`toDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString) and [`toTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString) together, adding a space in between. For example: \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\".\n\n`Date.prototype.toString()` must be called on [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances. If the `this` value does not inherit from `Date.prototype`, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n\n*   If you only want to get the _date_ part, use [`toDateString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString).\n*   If you only want to get the _time_ part, use [`toTimeString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString).\n*   If you want to make the date interpreted as UTC instead of local timezone, use [`toUTCString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString).\n*   If you want to format the date in a more user-friendly format (e.g. localization), use [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString).\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nconst d = new Date(0);\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.tostring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of Date instances returns a string representing this date interpreted in the local timezone.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString",
  "markdown": "# Date.prototype.toUTCString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toUTCString()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns a string representing this date in the [RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1) format, with negative years allowed. The timezone is always UTC. `toGMTString()` is an alias of this method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the given date using the UTC time zone (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nThe value returned by `toUTCString()` is a string in the form `Www, dd Mmm yyyy hh:mm:ss GMT`, where:\n\n| Format String | Description |\n| --- | --- |\n| `Www` | Day of week, as three letters (e.g. `Sun`, `Mon`) |\n| `dd` | Day of month, as two digits with leading zero if required |\n| `Mmm` | Month, as three letters (e.g. `Jan`, `Feb`) |\n| `yyyy` | Year, as four or more digits with leading zeroes if required |\n| `hh` | Hour, as two digits with leading zero if required |\n| `mm` | Minute, as two digits with leading zero if required |\n| `ss` | Seconds, as two digits with leading zero if required |\n\n### [Aliasing](#aliasing)\n\nJavaScript's `Date` API was inspired by Java's `java.util.Date` library (while the latter had become de facto legacy since Java 1.1 in 1997). In particular, the Java `Date` class had a method called `toGMTString` — which was poorly named, because the [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) is not equivalent to the [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time), while JavaScript dates always operate by UTC time. For web compatibility reasons, `toGMTString` remains as an alias to `toUTCString`, and they refer to the exact same function object. This means:\n\n```\nDate.prototype.toGMTString.name === \"toUTCString\";\n```\n\n## [Examples](#examples)\n\n### [Using toUTCString()](#using_toutcstring)\n\n```\nconst d = new Date(0);\nconsole.log(d.toUTCString()); // 'Thu, 01 Jan 1970 00:00:00 GMT'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.toutcstring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.toutcstring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.toUTCString() - JavaScript | MDN",
  "description": "The toUTCString() method of Date instances returns a string representing this date in the RFC 7231 format, with negative years allowed. The timezone is always UTC. toGMTString() is an alias of this method.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth",
  "markdown": "# Date.prototype.getUTCMonth() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCMonth()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 11, representing the month for the given date according to universal time: 0 for January, 1 for February, and so on. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCMonth()](#using_getutcmonth)\n\nThe following example assigns the month portion of the current date to the variable `month`.\n\n```\nconst today = new Date();\nconst month = today.getUTCMonth();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcmonth](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcmonth) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCMonth() - JavaScript | MDN",
  "description": "The getUTCMonth() method of Date instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear",
  "markdown": "# Date.prototype.getYear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`getYear()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the year for this date according to local time. Because `getYear()` does not return full years (\"year 2000 problem\"), it is deprecated and has been replaced by the [`getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) method.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer representing the year for the given date according to local time, minus 1900. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n*   For years greater than or equal to 2000, the value is 100 or greater. For example, if the year is 2026, `getYear()` returns 126.\n*   For years between and including 1900 and 1999, the value returned by `getYear()` is between 0 and 99. For example, if the year is 1976, `getYear()` returns 76.\n*   For years less than 1900, the value returned by `getYear()` is less than 0. For example, if the year is 1800, `getYear()` returns -100.\n\nThis method essentially returns the value of [`getFullYear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear) minus 1900. You should use `getFullYear()` instead, so that the year is specified in full.\n\n## [Examples](#examples)\n\n### [Years between 1900 and 1999](#years_between_1900_and_1999)\n\nThe second statement assigns the value 95 to the variable `year`.\n\n```\nconst xmas = new Date(\"1995-12-25\");\nconst year = xmas.getYear(); // returns 95\n```\n\n### [Years above 1999](#years_above_1999)\n\nThe second statement assigns the value 100 to the variable `year`.\n\n```\nconst xmas = new Date(\"2000-12-25\");\nconst year = xmas.getYear(); // returns 100\n```\n\n### [Years below 1900](#years_below_1900)\n\nThe second statement assigns the value -100 to the variable `year`.\n\n```\nconst xmas = new Date(\"1800-12-25\");\nconst year = xmas.getYear(); // returns -100\n```\n\n### [Setting and getting a year between 1900 and 1999](#setting_and_getting_a_year_between_1900_and_1999)\n\nThe third statement assigns the value 95 to the variable `year`, representing the year 1995.\n\n```\nconst xmas = new Date(\"2015-12-25\");\nxmas.setYear(95);\nconst year = xmas.getYear(); // returns 95\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getyear](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-date.prototype.getyear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getYear() - JavaScript | MDN",
  "description": "The getYear() method of Date instances returns the year for this date according to local time. Because getYear() does not return full years (\"year 2000 problem\"), it is deprecated and has been replaced by the getFullYear() method.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds",
  "markdown": "# Date.prototype.getUTCSeconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCSeconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the seconds in the specified date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 59, representing the seconds for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Examples](#examples)\n\n### [Using getUTCSeconds()](#using_getutcseconds)\n\nThe following example assigns the seconds portion of the current time to the variable `seconds`.\n\n```\nconst today = new Date();\nconst seconds = today.getUTCSeconds();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCSeconds() - JavaScript | MDN",
  "description": "The getUTCSeconds() method of Date instances returns the seconds in the specified date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate",
  "markdown": "# Date.prototype.setDate() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setDate()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the day of the month for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`dateValue`](#datevalue)\n\nAn integer representing the day of the month.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `dateValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you specify a number outside the expected range, the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object is updated accordingly. For example, if the `Date` object holds June 1st, a `dateValue` of 40 changes the date to July 10th, while a `dateValue` of 0 changes the date to the last day of the previous month, May 31st.\n\n## [Examples](#examples)\n\n### [Using setDate()](#using_setdate)\n\n```\nconst theBigDay = new Date(1962, 6, 7, 12); // noon of 1962-07-07 (7th of July 1962, month is 0-indexed)\nconst theBigDay2 = new Date(theBigDay).setDate(24); // 1962-07-24 (24th of July 1962)\nconst theBigDay3 = new Date(theBigDay).setDate(32); // 1962-08-01 (1st of August 1962)\nconst theBigDay4 = new Date(theBigDay).setDate(22); // 1962-07-22 (22nd of July 1962)\nconst theBigDay5 = new Date(theBigDay).setDate(0); // 1962-06-30 (30th of June 1962)\nconst theBigDay6 = new Date(theBigDay).setDate(98); // 1962-10-06 (6th of October 1962)\nconst theBigDay7 = new Date(theBigDay).setDate(-50); // 1962-05-11 (11th of May 1962)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setdate](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setdate) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setDate() - JavaScript | MDN",
  "description": "The setDate() method of Date instances changes the day of the month for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes",
  "markdown": "# Date.prototype.setMinutes() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setMinutes()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the minutes for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetMinutes(minutesValue)\nsetMinutes(minutesValue, secondsValue)\nsetMinutes(minutesValue, secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`minutesValue`](#minutesvalue)\n\nAn integer between 0 and 59 representing the minutes.\n\n[`secondsValue`](#secondsvalue) Optional\n\nAn integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `secondsValue` and `msValue` parameters, the same values as what are returned by [`getSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds) and [`getMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds) are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object are updated accordingly. For example, if you specify 100 for `secondsValue`, the minutes is incremented by 1 (`minutesValue + 1`), and 40 is used for seconds.\n\n## [Examples](#examples)\n\n### [Using setMinutes()](#using_setminutes)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setMinutes(45);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setminutes](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setminutes) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setMinutes() - JavaScript | MDN",
  "description": "The setMinutes() method of Date instances changes the minutes for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds",
  "markdown": "# Date.prototype.getUTCMilliseconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getUTCMilliseconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the milliseconds for this date according to universal time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn integer, between 0 and 999, representing the milliseconds for the given date according to universal time. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nNot to be confused with the timestamp. To get the total milliseconds since the epoch, use the [`getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) method.\n\n## [Examples](#examples)\n\n### [Using getUTCMilliseconds()](#using_getutcmilliseconds)\n\nThe following example assigns the milliseconds portion of the current time to the variable `milliseconds`.\n\n```\nconst today = new Date();\nconst milliseconds = today.getUTCMilliseconds();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.getutcmilliseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.getutcmilliseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.getUTCMilliseconds() - JavaScript | MDN",
  "description": "The getUTCMilliseconds() method of Date instances returns the milliseconds for this date according to universal time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds",
  "markdown": "# Date.prototype.setMilliseconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setMilliseconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the milliseconds for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetMilliseconds(millisecondsValue)\n```\n\n### [Parameters](#parameters)\n\n[`millisecondsValue`](#millisecondsvalue)\n\nAn integer between 0 and 999 representing the milliseconds.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `millisecondsValue` is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you specify a number outside the expected range, the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.\n\n## [Examples](#examples)\n\n### [Using setMilliseconds()](#using_setmilliseconds)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setMilliseconds(100);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setmilliseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setmilliseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setMilliseconds() - JavaScript | MDN",
  "description": "The setMilliseconds() method of Date instances changes the milliseconds for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth",
  "markdown": "# Date.prototype.setMonth() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setMonth()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the month and/or day of the month for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetMonth(monthValue)\nsetMonth(monthValue, dateValue)\n```\n\n### [Parameters](#parameters)\n\n[`monthValue`](#monthvalue)\n\nAn integer representing the month: 0 for January, 1 for February, and so on.\n\n[`dateValue`](#datevalue) Optional\n\nAn integer from 1 to 31 representing the day of the month.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `dateValue` parameter, the same value as what is returned by [`getDate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate) is used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object are updated accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1, and 3 is used for month.\n\nThe current day of month will have an impact on the behavior of this method. Conceptually it will add the number of days given by the current day of the month to the 1st day of the new month specified as the parameter, to return the new date. For example, if the current value is 31st January 2016, calling setMonth with a value of 1 will return 2nd March 2016. This is because in 2016 February had 29 days.\n\n## [Examples](#examples)\n\n### [Using setMonth()](#using_setmonth)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setMonth(6);\n\n//Watch out for end of month transitions\nconst endOfMonth = new Date(2016, 7, 31);\nendOfMonth.setMonth(1);\nconsole.log(endOfMonth); //Wed Mar 02 2016 00:00:00\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setmonth](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setmonth) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setMonth() - JavaScript | MDN",
  "description": "The setMonth() method of Date instances changes the month and/or day of the month for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours",
  "markdown": "# Date.prototype.setHours() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setHours()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetHours(hoursValue)\nsetHours(hoursValue, minutesValue)\nsetHours(hoursValue, minutesValue, secondsValue)\nsetHours(hoursValue, minutesValue, secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`hoursValue`](#hoursvalue)\n\nAn integer between 0 and 23 representing the hours.\n\n[`minutesValue`](#minutesvalue) Optional\n\nAn integer between 0 and 59 representing the minutes.\n\n[`secondsValue`](#secondsvalue) Optional\n\nAn integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the same values as what are returned by [`getMinutes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes), [`getSeconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds), and [`getMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds) are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object are updated accordingly. For example, if you specify 100 for `secondsValue`, the minutes are incremented by 1 (`minutesValue + 1`), and 40 is used for seconds.\n\n## [Examples](#examples)\n\n### [Using setHours()](#using_sethours)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setHours(7);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.sethours](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.sethours) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setHours() - JavaScript | MDN",
  "description": "The setHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds",
  "markdown": "# Date.prototype.setSeconds() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`setSeconds()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances changes the seconds and/or milliseconds for this date according to local time.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetSeconds(secondsValue)\nsetSeconds(secondsValue, msValue)\n```\n\n### [Parameters](#parameters)\n\n[`secondsValue`](#secondsvalue)\n\nAn integer between 0 and 59 representing the seconds.\n\n[`msValue`](#msvalue) Optional\n\nAn integer between 0 and 999 representing the milliseconds.\n\n### [Return value](#return_value)\n\nChanges the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object in place, and returns its new [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## [Description](#description)\n\nIf you do not specify the `msValue` parameter, the value returned from the [`getMilliseconds()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds) method is used.\n\nIf a parameter you specify is outside of the expected range, `setSeconds()` attempts to update the date information in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object will be incremented by 1, and 40 will be used for seconds.\n\n## [Examples](#examples)\n\n### [Using setSeconds()](#using_setseconds)\n\n```\nconst theBigDay = new Date();\ntheBigDay.setSeconds(30);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.setseconds](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.setseconds) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.setSeconds() - JavaScript | MDN",
  "description": "The setSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to local time.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return",
  "markdown": "# Generator.prototype.return() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`return()`** method of [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) instances acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n## [Syntax](#syntax)\n\n```\ngeneratorInstance.return()\ngeneratorInstance.return(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nThe value to return.\n\n### [Return value](#return_value)\n\nAn [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator function's control flow has reached the end.\n*   `false` if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the `return` is captured in a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) and there are more `yield` expressions in the `finally` block.\n\n[`value`](#value_2)\n\nThe value that is given as an argument, or, if the `yield` expression is wrapped in a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block), the value yielded/returned from the `finally` block.\n\n## [Description](#description)\n\nThe `return()` method, when called, can be seen as if a `return value;` statement is inserted in the generator's body at the current suspended position, where `value` is the value passed to the `return()` method. Therefore, in a typical flow, calling `return(value)` will return `{ done: true, value: value }`. However, if the `yield` expression is wrapped in a `try...finally` block, the control flow doesn't exit the function body, but proceeds to the `finally` block instead. In this case, the value returned may be different, and `done` may even be `false`, if there are more `yield` expressions within the `finally` block.\n\n## [Examples](#examples)\n\n### [Using return()](#using_return)\n\nThe following example shows a simple generator and the `return` method.\n\n```\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen();\n\ng.next(); // { value: 1, done: false }\ng.return(\"foo\"); // { value: \"foo\", done: true }\ng.next(); // { value: undefined, done: true }\n```\n\nIf `return(value)` is called on a generator that is already in \"completed\" state, the generator will remain in \"completed\" state.\n\nIf no argument is provided, the `value` property of the returned object will be `undefined`. If an argument is provided, it will become the value of the `value` property of the returned object, unless the `yield` expression is wrapped in a `try...finally`.\n\n```\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen();\ng.next(); // { value: 1, done: false }\ng.next(); // { value: 2, done: false }\ng.next(); // { value: 3, done: false }\ng.next(); // { value: undefined, done: true }\ng.return(); // { value: undefined, done: true }\ng.return(1); // { value: 1, done: true }\n```\n\n### [Using return() with try...finally](#using_return_with_try...finally)\n\nThe fact that the `return` method has been called can only be made known to the generator itself if the `yield` expression is wrapped in a `try...finally` block.\n\nWhen the `return` method is called on a generator that is suspended within a `try` block, execution in the generator proceeds to the `finally` block — since the `finally` block of `try...finally` statements always executes.\n\n```\nfunction* gen() {\n  yield 1;\n  try {\n    yield 2;\n    yield 3;\n  } finally {\n    yield \"cleanup\";\n  }\n}\n\nconst g1 = gen();\ng1.next(); // { value: 1, done: false }\n\n// Execution is suspended before the try...finally.\ng1.return(\"early return\"); // { value: 'early return', done: true }\n\nconst g2 = gen();\ng2.next(); // { value: 1, done: false }\ng2.next(); // { value: 2, done: false }\n\n// Execution is suspended within the try...finally.\ng2.return(\"early return\"); // { value: 'cleanup', done: false }\n\n// The completion value is preserved\ng2.next(); // { value: 'early return', done: true }\n\n// Generator is in the completed state\ng2.return(\"not so early return\"); // { value: 'not so early return', done: true }\n```\n\nThe return value of the finally block can also become the `value` of the result returned from the `return` call.\n\n```\nfunction* gen() {\n  try {\n    yield 1;\n  } finally {\n    return \"cleanup\";\n  }\n}\n\nconst g1 = gen();\ng1.next(); // { value: 1, done: false }\ng1.return(\"early return\"); // { value: 'cleanup', done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator.prototype.return](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generator.prototype.return) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Generator.prototype.return() - JavaScript | MDN",
  "description": "The return() method of Generator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw",
  "markdown": "# Generator.prototype.throw() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`throw()`** method of [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) instances acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## [Syntax](#syntax)\n\n```\ngeneratorInstance.throw(exception)\n```\n\n### [Parameters](#parameters)\n\n[`exception`](#exception)\n\nThe exception to throw. For debugging purposes, it is useful to make it an `instanceof` [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n### [Return value](#return_value)\n\nIf the thrown exception is caught by a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) and the generator resumes to yield more values, it will return an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator function's control flow has reached the end.\n*   `false` if the generator function is able to produce more values.\n\n[`value`](#value)\n\nThe value yielded from the next `yield` expression.\n\n### [Exceptions](#exceptions)\n\nIf the thrown exception is not caught by a `try...catch`, the `exception` passed to `throw()` will be thrown out from the generator function.\n\n## [Description](#description)\n\nThe `throw()` method, when called, can be seen as if a `throw exception;` statement is inserted in the generator's body at the current suspended position, where `exception` is the exception passed to the `throw()` method. Therefore, in a typical flow, calling `throw(exception)` will cause the generator to throw. However, if the `yield` expression is wrapped in a `try...catch` block, the error may be caught and control flow can either resume after error handling, or exit gracefully.\n\n## [Examples](#examples)\n\n### [Using throw()](#using_throw)\n\nThe following example shows a simple generator and an error that is thrown using the `throw` method. An error can be caught by a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block as usual.\n\n```\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log(\"Error caught!\");\n    }\n  }\n}\n\nconst g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error(\"Something went wrong\"));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator.prototype.throw](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generator.prototype.throw) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Generator.prototype.throw() - JavaScript | MDN",
  "description": "The throw() method of Generator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn",
  "markdown": "# Object.hasOwn() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.hasOwn()`** static method returns `true` if the specified object has the indicated property as its _own_ property. If the property is inherited, or does not exist, the method returns `false`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe JavaScript object instance to test.\n\n[`prop`](#prop)\n\nThe [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) name or [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) of the property to test.\n\n### [Return value](#return_value)\n\n`true` if the specified object has directly defined the specified property. Otherwise `false`\n\n## [Description](#description)\n\nThe **`Object.hasOwn()`** method returns `true` if the specified property is a direct property of the object — even if the property value is `null` or `undefined`. The method returns `false` if the property is inherited, or has not been declared at all. Unlike the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, this method does not check for the specified property in the object's prototype chain.\n\nIt is recommended over [`Object.prototype.hasOwnProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) because it works for [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) and with objects that have overridden the inherited `hasOwnProperty()` method. While it is possible to workaround these problems by calling `Object.prototype.hasOwnProperty()` on an external object, `Object.hasOwn()` is more intuitive.\n\n## [Examples](#examples)\n\n### [Using hasOwn to test for a property's existence](#using_hasown_to_test_for_a_propertys_existence)\n\nThe following code shows how to determine whether the `example` object contains a property named `prop`.\n\n```\nconst example = {};\nObject.hasOwn(example, \"prop\"); // false - 'prop' has not been defined\n\nexample.prop = \"exists\";\nObject.hasOwn(example, \"prop\"); // true - 'prop' has been defined\n\nexample.prop = null;\nObject.hasOwn(example, \"prop\"); // true - own property exists with value of null\n\nexample.prop = undefined;\nObject.hasOwn(example, \"prop\"); // true - own property exists with value of undefined\n```\n\n### [Direct vs. inherited properties](#direct_vs._inherited_properties)\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n```\nconst example = {};\nexample.prop = \"exists\";\n\n// `hasOwn` will only return true for direct properties:\nObject.hasOwn(example, \"prop\"); // true\nObject.hasOwn(example, \"toString\"); // false\nObject.hasOwn(example, \"hasOwnProperty\"); // false\n\n// The `in` operator will return true for direct or inherited properties:\n\"prop\" in example; // true\n\"toString\" in example; // true\n\"hasOwnProperty\" in example; // true\n```\n\n### [Iterating over the properties of an object](#iterating_over_the_properties_of_an_object)\n\nTo iterate over the enumerable properties of an object, you _should_ use:\n\n```\nconst example = { foo: true, bar: true };\nfor (const name of Object.keys(example)) {\n  // …\n}\n```\n\nBut if you need to use `for...in`, you can use `Object.hasOwn()` to skip the inherited properties:\n\n```\nconst example = { foo: true, bar: true };\nfor (const name in example) {\n  if (Object.hasOwn(example, name)) {\n    // …\n  }\n}\n```\n\n### [Checking if an Array index exists](#checking_if_an_array_index_exists)\n\nThe elements of an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) are defined as direct properties, so you can use `hasOwn()` method to check whether a particular index exists:\n\n```\nconst fruits = [\"Apple\", \"Banana\", \"Watermelon\", \"Orange\"];\nObject.hasOwn(fruits, 3); // true ('Orange')\nObject.hasOwn(fruits, 4); // false - not defined\n```\n\n### [Problematic cases for hasOwnProperty](#problematic_cases_for_hasownproperty)\n\nThis section demonstrates that `hasOwn()` is immune to the problems that affect `hasOwnProperty`. Firstly, it can be used with objects that have reimplemented `hasOwnProperty()`:\n\n```\nconst foo = {\n  hasOwnProperty() {\n    return false;\n  },\n  bar: \"The dragons be out of office\",\n};\n\nif (Object.hasOwn(foo, \"bar\")) {\n  console.log(foo.bar); // true - re-implementation of hasOwnProperty() does not affect Object\n}\n```\n\nIt can also be used with [`null`\\-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). These do not inherit from `Object.prototype`, and so `hasOwnProperty()` is inaccessible.\n\n```\nconst foo = Object.create(null);\nfoo.prop = \"exists\";\nif (Object.hasOwn(foo, \"prop\")) {\n  console.log(foo.prop); // true - works irrespective of how the object is created.\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.hasown](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.hasown) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.hasOwn() - JavaScript | MDN",
  "description": "The Object.hasOwn() static method returns true if the specified object has the indicated property as its own property.\n  If the property is inherited, or does not exist, the method returns false.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty",
  "markdown": "# Reflect.deleteProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.deleteProperty()`** static method is like the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator, but as a function. It deletes a property from an object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.deleteProperty(target, propertyKey)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object on which to delete the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to be deleted.\n\n### [Return value](#return_value)\n\nA boolean indicating whether or not the property was successfully deleted.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.deleteProperty()` provides the reflective semantic of the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator. That is, `Reflect.deleteProperty(target, propertyKey)` is semantically equivalent to:\n\n```\ndelete target.propertyKey;\n```\n\nAt the very low level, deleting a property returns a boolean (as is the case with [the proxy handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty)). `Reflect.deleteProperty()` directly returns the status, while `delete` would throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) if the status is `false`. In non-strict mode, `delete` and `Reflect.deleteProperty()` have the same behavior.\n\n`Reflect.deleteProperty()` invokes the `[[Delete]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.deleteProperty()](#using_reflect.deleteproperty)\n\n```\nconst obj = { x: 1, y: 2 };\nReflect.deleteProperty(obj, \"x\"); // true\nconsole.log(obj); // { y: 2 }\n\nconst arr = [1, 2, 3, 4, 5];\nReflect.deleteProperty(arr, \"3\"); // true\nconsole.log(arr); // [1, 2, 3, undefined, 5]\n\n// Returns true if no such property exists\nReflect.deleteProperty({}, \"foo\"); // true\n\n// Returns false if a property is unconfigurable\nReflect.deleteProperty(Object.freeze({ foo: 1 }), \"foo\"); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.deleteproperty](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.deleteproperty) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.deleteProperty() - JavaScript | MDN",
  "description": "The Reflect.deleteProperty() static method is like the delete operator, but as a function. It deletes a property from an object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete",
  "markdown": "# Map.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`delete()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances removes the specified element from this map by key.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to remove from the `Map` object.\n\n### [Return value](#return_value)\n\n`true` if an element in the `Map` object existed and has been removed, or `false` if the element does not exist.\n\n## [Examples](#examples)\n\n### [Using delete()](#using_delete)\n\n```\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.delete(\"bar\")); // Returns true. Successfully removed.\nconsole.log(myMap.has(\"bar\")); // Returns false. The \"bar\" element is no longer present.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.delete() - JavaScript | MDN",
  "description": "The delete() method of Map instances removes the specified element from this map by\n  key.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register",
  "markdown": "# FinalizationRegistry.prototype.register() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`register()`** method of [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) instances registers an value with this `FinalizationRegistry` so that if the value is garbage-collected, the registry's callback may get called.\n\n## [Syntax](#syntax)\n\n```\nregister(target, heldValue)\nregister(target, heldValue, unregisterToken)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target value to register.\n\n[`heldValue`](#heldvalue)\n\nThe value to pass to the finalizer for this `target`. This cannot be the `target` itself but can be anything else, including functions and primitives.\n\n[`unregisterToken`](#unregistertoken) Optional\n\nA token that may be used with the `unregister` method later to unregister the target value. If provided (and not `undefined`), this must be an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). If not provided, the target cannot be unregistered.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   `target` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) (object as opposed to primitives; functions are objects as well)\n*   `target` is the same as `heldvalue` (`target === heldValue`)\n*   `unregisterToken` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry)\n\n## [Description](#description)\n\n## [Examples](#examples)\n\n### [Using register](#using_register)\n\nThe following registers the value referenced by `target`, passing in the held value `\"some value\"` and passing the target itself as the unregistration token:\n\n```\nregistry.register(target, \"some value\", target);\n```\n\nThe following registers the value referenced by `target`, passing in another object as the held value, and not passing in any unregistration token (which means `target` can't be unregistered):\n\n```\nregistry.register(target, { useful: \"info about target\" });\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-finalization-registry.prototype.register](https://tc39.es/ecma262/multipage/managing-memory.html#sec-finalization-registry.prototype.register) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "FinalizationRegistry.prototype.register() - JavaScript | MDN",
  "description": "The register() method of FinalizationRegistry instances registers an value with this FinalizationRegistry so that if the value is garbage-collected, the registry's callback may get called.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry",
  "markdown": "# FinalizationRegistry() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`FinalizationRegistry()`** constructor creates [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) objects.\n\n## [Syntax](#syntax)\n\n```\nnew FinalizationRegistry(callbackFn)\n```\n\n**Note:** `FinalizationRegistry()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`callback`](#callback)\n\nA function to be invoked each time a registered target value is garbage collected. Its return value is ignored. The function is called with the following arguments:\n\n[`heldValue`](#heldvalue)\n\nThe value that was passed to the second parameter of the [`register()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register) method when the `target` object was registered.\n\n## [Examples](#examples)\n\n### [Creating a new registry](#creating_a_new_registry)\n\nYou create the registry passing in the callback:\n\n```\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-finalization-registry-constructor](https://tc39.es/ecma262/multipage/managing-memory.html#sec-finalization-registry-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "FinalizationRegistry() constructor - JavaScript | MDN",
  "description": "The FinalizationRegistry() constructor creates FinalizationRegistry objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister",
  "markdown": "# FinalizationRegistry.prototype.unregister() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`unregister()`** method of [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) instances unregisters a target value from this `FinalizationRegistry`.\n\n## [Syntax](#syntax)\n\n```\nunregister(unregisterToken)\n```\n\n### [Parameters](#parameters)\n\n[`unregisterToken`](#unregistertoken)\n\nThe token used with the [`register()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register) method when registering the target value. Multiple cells registered with the same `unregisterToken` will be unregistered together.\n\n### [Return value](#return_value)\n\nA boolean value that is `true` if at least one cell was unregistered and `false` if no cell was unregistered.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `unregisterToken` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Description](#description)\n\nWhen a target value has been reclaimed, it is no longer registered in the registry. There is no need to call `unregister` in your cleanup callback. Only call `unregister` if you haven't received a cleanup callback and no longer need to receive one.\n\n## [Examples](#examples)\n\n### [Using unregister](#using_unregister)\n\nThis example shows registering a target object using that same object as the unregister token, then later unregistering it via `unregister`:\n\n```\nclass Thingy {\n  static #cleanup = (label) => {\n    //               ^^^^^−−−−− held value\n    console.error(\n      `The \"release\" method was never called for the object with the label \"${label}\"`,\n    );\n  };\n  #registry = new FinalizationRegistry(Thingy.#cleanup);\n\n  /**\n   * Constructs a `Thingy` instance.\n   * Be sure to call `release` when you're done with it.\n   *\n   * @param label A label for the `Thingy`.\n   */\n  constructor(label) {\n    //                            vvvvv−−−−− held value\n    this.#registry.register(this, label, this);\n    //          target −−−−−^^^^         ^^^^−−−−− unregister token\n  }\n\n  /**\n   * Releases resources held by this `Thingy` instance.\n   */\n  release() {\n    this.#registry.unregister(this);\n    //                        ^^^^−−−−− unregister token\n  }\n}\n```\n\nThis example shows registering a target object using a different object as its unregister token:\n\n```\nclass Thingy {\n  static #cleanup = (file) => {\n    //               ^^^^−−−−− held value\n    console.error(\n      `The \"release\" method was never called for the \"Thingy\" for the file \"${file.name}\"`,\n    );\n  };\n  #registry = new FinalizationRegistry(Thingy.#cleanup);\n  #file;\n\n  /**\n   * Constructs a `Thingy` instance for the given file.\n   * Be sure to call `release` when you're done with it.\n   *\n   * @param filename The name of the file.\n   */\n  constructor(filename) {\n    this.#file = File.open(filename);\n    //                            vvvvv−−−−− held value\n    this.#registry.register(this, label, this.#file);\n    //          target −−−−−^^^^         ^^^^^^^^^^−−−−− unregister token\n  }\n\n  /**\n   * Releases resources held by this `Thingy` instance.\n   */\n  release() {\n    if (this.#file) {\n      this.#registry.unregister(this.#file);\n      //                        ^^^^^^^^^^−−−−− unregister token\n      File.close(this.#file);\n      this.#file = null;\n    }\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-finalization-registry.prototype.unregister](https://tc39.es/ecma262/multipage/managing-memory.html#sec-finalization-registry.prototype.unregister) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "FinalizationRegistry.prototype.unregister() - JavaScript | MDN",
  "description": "The unregister() method of FinalizationRegistry instances unregisters a target value from this FinalizationRegistry.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf",
  "markdown": "# Date.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instances returns the number of milliseconds for this date since the [epoch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the [timestamp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of this date. Returns `NaN` if the date is [invalid](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## [Description](#description)\n\nThe `valueOf()` method is part of the [type coercion protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Because `Date` has a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) method, that method always takes priority over `valueOf()` when a `Date` object is implicitly [coerced to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). However, `Date.prototype[@@toPrimitive]()` still calls `this.valueOf()` internally.\n\nThe [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object overrides the [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). `Date.prototype.valueOf()` returns the timestamp of the date, which is functionally equivalent to the [`Date.prototype.getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) method.\n\n## [Examples](#examples)\n\n### [Using valueOf()](#using_valueof)\n\n```\nconst d = new Date(0); // 1970-01-01T00:00:00.000Z\nconsole.log(d.valueOf()); // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-date.prototype.valueof](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Date.prototype.valueOf() - JavaScript | MDN",
  "description": "The valueOf() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf",
  "markdown": "# Object.setPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.setPrototypeOf()`** static method sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object to another object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n**Warning:** Changing the `[[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the `Object.setPrototypeOf(...)` statement, but may extend to **_any_** code that has access to any object whose `[[Prototype]]` has been altered. You can read more in [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes).\n\nBecause this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the `[[Prototype]]` of an object. Instead, create a new object with the desired `[[Prototype]]` using [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.setPrototypeOf(obj, prototype)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which is to have its prototype set.\n\n[`prototype`](#prototype)\n\nThe object's new prototype (an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n### [Return value](#return_value)\n\nThe specified object.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   The `obj` parameter is `undefined` or `null`.\n*   The `obj` parameter is [non-extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), or it's an [immutable prototype exotic object](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects), such as `Object.prototype` or [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window). However, the error is not thrown if the new prototype is the same value as the original prototype of `obj`.\n*   The `prototype` parameter is not an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## [Description](#description)\n\n`Object.setPrototypeOf()` is generally considered the proper way to set the prototype of an object. You should always use it in favor of the deprecated [`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) accessor.\n\nIf the `obj` parameter is not an object (e.g. number, string, etc.), this method does nothing — without coercing it to an object or attempting to set its prototype — and directly returns `obj` as a primitive value. If `prototype` is the same value as the prototype of `obj`, then `obj` is directly returned, without causing a `TypeError` even when `obj` has immutable prototype.\n\nFor security concerns, there are certain built-in objects that are designed to have an _immutable prototype_. This prevents prototype pollution attacks, especially [proxy-related ones](https://github.com/tc39/ecma262/issues/272). The core language only specifies `Object.prototype` as an immutable prototype exotic object, whose prototype is always `null`. In browsers, [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) and [`location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location) are two other very common examples.\n\n```\nObject.isExtensible(Object.prototype); // true; you can add more properties\nObject.setPrototypeOf(Object.prototype, {}); // TypeError: Immutable prototype object '#<Object>' cannot have their prototype set\nObject.setPrototypeOf(Object.prototype, null); // No error; the prototype of `Object.prototype` is already `null`\n```\n\n## [Examples](#examples)\n\n### [Pseudoclassical inheritance using Object.setPrototypeOf()](#pseudoclassical_inheritance_using_object.setprototypeof)\n\nInheritance in JS using classes.\n\n```\nclass Human {}\nclass SuperHero extends Human {}\n\nconst superMan = new SuperHero();\n```\n\nHowever, if we want to implement subclasses without using `class`, we can do the following:\n\n```\nfunction Human(name, level) {\n  this.name = name;\n  this.level = level;\n}\n\nfunction SuperHero(name, level) {\n  Human.call(this, name, level);\n}\n\nObject.setPrototypeOf(SuperHero.prototype, Human.prototype);\n\n// Set the `[[Prototype]]` of `SuperHero.prototype`\n// to `Human.prototype`\n// To set the prototypal inheritance chain\n\nHuman.prototype.speak = function () {\n  return `${this.name} says hello.`;\n};\n\nSuperHero.prototype.fly = function () {\n  return `${this.name} is flying.`;\n};\n\nconst superMan = new SuperHero(\"Clark Kent\", 1);\n\nconsole.log(superMan.fly());\nconsole.log(superMan.speak());\n```\n\nThe similarity between classical inheritance (with classes) and pseudoclassical inheritance (with constructors' `prototype` property) as done above is mentioned in [Inheritance chains](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#building_longer_inheritance_chains).\n\nSince function constructors' [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property is writable, you can reassign it to a new object created with [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#classical_inheritance_with_object.create) to achieve the same inheritance chain as well. There are caveats to watch out when using `create()`, such as remembering to re-add the [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property.\n\nIn the example below, which also uses classes, `SuperHero` is made to inherit from `Human` without using `extends` by using `setPrototypeOf()` instead.\n\n**Warning:** It is not advisable to use `setPrototypeOf()` instead of `extends` due to performance and readability reasons.\n\n```\nclass Human {}\nclass SuperHero {}\n\n// Set the instance properties\nObject.setPrototypeOf(SuperHero.prototype, Human.prototype);\n\n// Hook up the static properties\nObject.setPrototypeOf(SuperHero, Human);\n\nconst superMan = new SuperHero();\n```\n\nSubclassing without `extends` is mentioned in [ES-6 subclassing](https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.setprototypeof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.setprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.setPrototypeOf() - JavaScript | MDN",
  "description": "The Object.setPrototypeOf() static method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf",
  "markdown": "# Reflect.setPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.setPrototypeOf()`** static method is like [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) but returns a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean). It sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.setPrototypeOf(target, prototype)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object of which to set the prototype.\n\n[`prototype`](#prototype)\n\nThe object's new prototype (an object or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the prototype was successfully set.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object or if `prototype` is neither an object nor [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## [Description](#description)\n\n`Reflect.setPrototypeOf()` provides the reflective semantic of setting the prototype of an object. At the very low level, setting the prototype returns a boolean (as is the case with [the proxy handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf)). [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) provides nearly the same semantic, but it throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the status is `false` (the operation was unsuccessful), while `Reflect.setPrototypeOf()` directly returns the status.\n\n`Reflect.setPrototypeOf()` invokes the `[[SetPrototypeOf]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.setPrototypeOf()](#using_reflect.setprototypeof)\n\n```\nReflect.setPrototypeOf({}, Object.prototype); // true\n\n// It can change an object's [[Prototype]] to null.\nReflect.setPrototypeOf({}, null); // true\n\n// Returns false if target is not extensible.\nReflect.setPrototypeOf(Object.freeze({}), null); // false\n\n// Returns false if it cause a prototype chain cycle.\nconst target = {};\nconst proto = Object.create(target);\nReflect.setPrototypeOf(target, proto); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.setprototypeof](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.setprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.setPrototypeOf() - JavaScript | MDN",
  "description": "The Reflect.setPrototypeOf() static method is like Object.setPrototypeOf() but returns a Boolean. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf",
  "markdown": "# Reflect.getPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.getPrototypeOf()`** static method is like [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf). It returns the prototype of the specified object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.getPrototypeOf(target)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object of which to get the prototype.\n\n### [Return value](#return_value)\n\nThe prototype of the given object, which may be an object or `null`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.getPrototypeOf()` provides the reflective semantic of retrieving the prototype of an object. The only difference with [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) is how non-object targets are handled. `Reflect.getPrototypeOf()` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the target is not an object, while `Object.getPrototypeOf()` coerces it to an object.\n\n`Reflect.getPrototypeOf()` invokes the `[[GetPrototypeOf]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.getPrototypeOf()](#using_reflect.getprototypeof)\n\n```\nReflect.getPrototypeOf({}); // Object.prototype\nReflect.getPrototypeOf(Object.prototype); // null\nReflect.getPrototypeOf(Object.create(null)); // null\n```\n\n### [Difference with Object.getPrototypeOf()](#difference_with_object.getprototypeof)\n\n```\n// Same result for Objects\nObject.getPrototypeOf({}); // Object.prototype\nReflect.getPrototypeOf({}); // Object.prototype\n\n// Both throw in ES5 for non-Objects\nObject.getPrototypeOf(\"foo\"); // Throws TypeError\nReflect.getPrototypeOf(\"foo\"); // Throws TypeError\n\n// In ES2015 only Reflect throws, Object coerces non-Objects\nObject.getPrototypeOf(\"foo\"); // String.prototype\nReflect.getPrototypeOf(\"foo\"); // Throws TypeError\n\n// To mimic the Object ES2015 behavior you need to coerce\nReflect.getPrototypeOf(Object(\"foo\")); // String.prototype\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.getprototypeof](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.getprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.getPrototypeOf() - JavaScript | MDN",
  "description": "The Reflect.getPrototypeOf() static method is like Object.getPrototypeOf(). It returns the prototype of the specified object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",
  "markdown": "# Object.isExtensible() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.isExtensible()`** static method determines if an object is extensible (whether it can have new properties added to it).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be checked.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the given object is extensible.\n\n## [Description](#description)\n\nObjects are extensible by default: they can have new properties added to them, and their `[[Prototype]]` can be re-assigned. An object can be marked as non-extensible using one of [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal), [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), or [`Reflect.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions).\n\n## [Examples](#examples)\n\n### [Using Object.isExtensible](#using_object.isextensible)\n\n```\n// New objects are extensible.\nconst empty = {};\nObject.isExtensible(empty); // true\n\n// They can be made un-extensible\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // false\n\n// Sealed objects are by definition non-extensible.\nconst sealed = Object.seal({});\nObject.isExtensible(sealed); // false\n\n// Frozen objects are also by definition non-extensible.\nconst frozen = Object.freeze({});\nObject.isExtensible(frozen); // false\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, it will return `false` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```\nObject.isExtensible(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isExtensible(1);\n// false                         (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.isextensible](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isextensible) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.isExtensible() - JavaScript | MDN",
  "description": "The Object.isExtensible() static method determines if an object\n  is extensible (whether it can have new properties added to it).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
  "markdown": "# Object.getPrototypeOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.getPrototypeOf()`** static method returns the prototype (i.e. the value of the internal `[[Prototype]]` property) of the specified object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.getPrototypeOf(obj)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object whose prototype is to be returned.\n\n### [Return value](#return_value)\n\nThe prototype of the given object, which may be [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## [Examples](#examples)\n\n### [Using getPrototypeOf](#using_getprototypeof)\n\n```\nconst proto = {};\nconst obj = Object.create(proto);\nObject.getPrototypeOf(obj) === proto; // true\n```\n\n### [Non-object coercion](#non-object_coercion)\n\nIn ES5, it will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception if the `obj` parameter isn't an object. In ES2015, the parameter will be coerced to an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object).\n\n```\nObject.getPrototypeOf(\"foo\");\n// TypeError: \"foo\" is not an object (ES5 code)\nObject.getPrototypeOf(\"foo\");\n// String.prototype                  (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.getprototypeof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.getprototypeof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.getPrototypeOf() - JavaScript | MDN",
  "description": "The Object.getPrototypeOf() static method returns the prototype\n  (i.e. the value of the internal [[Prototype]] property) of the specified\n  object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible",
  "markdown": "# Reflect.isExtensible() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.isExtensible()`** static method is like [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible). It determines if an object is extensible (whether it can have new properties added to it).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.isExtensible(target)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object which to check if it is extensible.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the target is extensible.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.isExtensible()` provides the reflective semantic of checking if an object is extensible. The only difference with [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) is how non-object targets are handled. `Reflect.isExtensible()` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the target is not an object, while `Object.isExtensible()` always returns `false` for non-object targets.\n\n`Reflect.isExtensible()` invokes the `[[IsExtensible]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.isExtensible()](#using_reflect.isextensible)\n\nSee also [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible).\n\n```\n// New objects are extensible.\nconst empty = {};\nReflect.isExtensible(empty); // true\n\n// ...but that can be changed.\nReflect.preventExtensions(empty);\nReflect.isExtensible(empty); // false\n\n// Sealed objects are by definition non-extensible.\nconst sealed = Object.seal({});\nReflect.isExtensible(sealed); // false\n\n// Frozen objects are also by definition non-extensible.\nconst frozen = Object.freeze({});\nReflect.isExtensible(frozen); // false\n```\n\n### [Difference with Object.isExtensible()](#difference_with_object.isextensible)\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). With [`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), a non-object `target` will return false without any errors.\n\n```\nReflect.isExtensible(1);\n// TypeError: 1 is not an object\n\nObject.isExtensible(1);\n// false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.isextensible](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.isextensible) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.isExtensible() - JavaScript | MDN",
  "description": "The Reflect.isExtensible() static method is like Object.isExtensible(). It determines if an object is extensible (whether it can have new properties added to it).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions",
  "markdown": "# Object.preventExtensions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.preventExtensions()`** static method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It also prevents the object's prototype from being re-assigned.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.preventExtensions(obj)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be made non-extensible.\n\n### [Return value](#return_value)\n\nThe object being made non-extensible.\n\n## [Description](#description)\n\nAn object is extensible if new properties can be added to it. `Object.preventExtensions()` marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. Note that the properties of a non-extensible object, in general, may still be _deleted_. Attempting to add new properties to a non-extensible object will fail, either silently or, in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), throwing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\nUnlike [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) and [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), `Object.preventExtensions()` invokes an intrinsic JavaScript behavior and cannot be replaced with a composition of several other operations. It also has its `Reflect` counterpart (which only exists for intrinsic operations), [`Reflect.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions).\n\n`Object.preventExtensions()` only prevents addition of own properties. Properties can still be added to the object prototype.\n\nThis method makes the `[[Prototype]]` of the target immutable; any `[[Prototype]]` re-assignment will throw a `TypeError`. This behavior is specific to the internal `[[Prototype]]` property; other properties of the target object will remain mutable.\n\nThere is no way to make an object extensible again once it has been made non-extensible.\n\n## [Examples](#examples)\n\n### [Using Object.preventExtensions](#using_object.preventextensions)\n\n```\n// Object.preventExtensions returns the object\n// being made non-extensible.\nconst obj = {};\nconst obj2 = Object.preventExtensions(obj);\nobj === obj2; // true\n\n// Objects are extensible by default.\nconst empty = {};\nObject.isExtensible(empty); // true\n\n// They can be made un-extensible\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // false\n\n// Object.defineProperty throws when adding\n// a new property to a non-extensible object.\nconst nonExtensible = { removable: true };\nObject.preventExtensions(nonExtensible);\nObject.defineProperty(nonExtensible, \"new\", {\n  value: 8675309,\n}); // throws a TypeError\n\n// In strict mode, attempting to add new properties\n// to a non-extensible object throws a TypeError.\nfunction fail() {\n  \"use strict\";\n  // throws a TypeError\n  nonExtensible.newProperty = \"FAIL\";\n}\nfail();\n```\n\nA non-extensible object's prototype is immutable:\n\n```\nconst fixed = Object.preventExtensions({});\n// throws a 'TypeError'.\nfixed.__proto__ = { oh: \"hai\" };\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, a non-object argument will be returned as-is without any errors, since primitives are already, by definition, immutable.\n\n```\nObject.preventExtensions(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.preventExtensions(1);\n// 1                             (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.preventextensions](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.preventextensions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.preventExtensions() - JavaScript | MDN",
  "description": "The Object.preventExtensions() static method prevents new\n  properties from ever being added to an object (i.e. prevents future extensions to the\n  object). It also prevents the object's prototype from being re-assigned.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor",
  "markdown": "# Reflect.getOwnPropertyDescriptor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.getOwnPropertyDescriptor()`** static method is like [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor). It returns a property descriptor of the given property if it exists on the object, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) otherwise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.getOwnPropertyDescriptor(target, propertyKey)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object in which to look for the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to get an own property descriptor for.\n\n### [Return value](#return_value)\n\nA property descriptor object if the property exists as an own property of `target`; otherwise, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.getOwnPropertyDescriptor()` provides the reflective semantic of retrieving the property descriptor of an object. The only difference with [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) is how non-object targets are handled. `Reflect.getOwnPropertyDescriptor()` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the target is not an object, while `Object.getOwnPropertyDescriptor()` coerces it to an object.\n\n`Reflect.getOwnPropertyDescriptor()` invokes the `[[GetOwnProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.getOwnPropertyDescriptor()](#using_reflect.getownpropertydescriptor)\n\n```\nReflect.getOwnPropertyDescriptor({ x: \"hello\" }, \"x\");\n// {value: \"hello\", writable: true, enumerable: true, configurable: true}\n\nReflect.getOwnPropertyDescriptor({ x: \"hello\" }, \"y\");\n// undefined\n\nReflect.getOwnPropertyDescriptor([], \"length\");\n// {value: 0, writable: true, enumerable: false, configurable: false}\n```\n\n### [Difference with Object.getOwnPropertyDescriptor()](#difference_with_object.getownpropertydescriptor)\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). With [`Object.getOwnPropertyDescriptor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor), a non-object first argument will be coerced to an object at first.\n\n```\nReflect.getOwnPropertyDescriptor(\"foo\", 0);\n// TypeError: \"foo\" is not non-null object\n\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// { value: \"f\", writable: false, enumerable: true, configurable: false }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.getownpropertydescriptor](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.getownpropertydescriptor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.getOwnPropertyDescriptor() - JavaScript | MDN",
  "description": "The Reflect.getOwnPropertyDescriptor() static method is like Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions",
  "markdown": "# Reflect.preventExtensions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.preventExtensions()`** static method is like [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions). It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.preventExtensions(target)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object on which to prevent extensions.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the target was successfully set to prevent extensions.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.preventExtensions()` provides the reflective semantic of preventing extensions of an object. The differences with [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) are:\n\n*   `Reflect.preventExtensions()` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the target is not an object, while `Object.preventExtensions()` always returns non-object targets as-is.\n*   `Reflect.preventExtensions()` returns a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the target was successfully set to prevent extensions, while `Object.preventExtensions()` returns the target object.\n\n`Reflect.preventExtensions()` invokes the `[[PreventExtensions]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.preventExtensions()](#using_reflect.preventextensions)\n\nSee also [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions).\n\n```\n// Objects are extensible by default.\nconst empty = {};\nReflect.isExtensible(empty); // true\n\n// ...but that can be changed.\nReflect.preventExtensions(empty);\nReflect.isExtensible(empty); // false\n```\n\n### [Difference with Object.preventExtensions()](#difference_with_object.preventextensions)\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). With [`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), a non-object `target` will be returned as-is without any errors.\n\n```\nReflect.preventExtensions(1);\n// TypeError: 1 is not an object\n\nObject.preventExtensions(1);\n// 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.preventextensions](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.preventextensions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.preventExtensions() - JavaScript | MDN",
  "description": "The Reflect.preventExtensions() static method is like Object.preventExtensions(). It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has",
  "markdown": "# Reflect.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.has()`** static method is like the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, but as a function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.has(target, propertyKey)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object in which to look for the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to check.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the `target` has the property.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.has()` provides the reflective semantic of checking if a property is in an object. That is, `Reflect.has(target, propertyKey)` is semantically equivalent to:\n\n`Reflect.has()` invokes the `[[HasProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.has()](#using_reflect.has)\n\n```\nReflect.has({ x: 0 }, \"x\"); // true\nReflect.has({ x: 0 }, \"y\"); // false\n\n// returns true for properties in the prototype chain\nReflect.has({ x: 0 }, \"toString\");\n\n// Proxy with .has() handler method\nobj = new Proxy(\n  {},\n  {\n    has(t, k) {\n      return k.startsWith(\"door\");\n    },\n  },\n);\nReflect.has(obj, \"doorbell\"); // true\nReflect.has(obj, \"dormitory\"); // false\n```\n\n`Reflect.has` returns `true` for any inherited properties, like the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator:\n\n```\nconst a = { foo: 123 };\nconst b = { __proto__: a };\nconst c = { __proto__: b };\n// The prototype chain is: c -> b -> a\nReflect.has(c, \"foo\"); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.has](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.has() - JavaScript | MDN",
  "description": "The Reflect.has() static method is like the in operator, but\n  as a function.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next",
  "markdown": "# Generator.prototype.next() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`next()`** method of [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) instances returns an object with two properties `done` and `value`. You can also provide a parameter to the `next` method to send a value to the generator.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nThe value to send to the generator.\n\nThe value will be assigned as a result of a `yield` expression. For example, in `variable = yield expression`, the value passed to the `.next()` function will be assigned to `variable`.\n\n### [Return value](#return_value)\n\nAn [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) with two properties:\n\n[`done`](#done)\n\nA boolean value:\n\n*   `true` if the generator is past the end of its control flow. In this case `value` specifies the _return value_ of the generator (which may be undefined).\n*   `false` if the generator is able to produce more values.\n\n[`value`](#value_2)\n\nAny JavaScript value yielded or returned by the generator.\n\n## [Examples](#examples)\n\n### [Using next()](#using_next)\n\nThe following example shows a simple generator and the object that the `next` method returns:\n\n```\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen(); // Generator { }\ng.next(); // { value: 1, done: false }\ng.next(); // { value: 2, done: false }\ng.next(); // { value: 3, done: false }\ng.next(); // { value: undefined, done: true }\n```\n\n### [Using next() with a list](#using_next_with_a_list)\n\nIn this example, `getPage` takes a list and \"paginates\" it into chunks of size `pageSize`. Each call to `next` will yield one such chunk.\n\n```\nfunction* getPage(list, pageSize = 1) {\n  for (let index = 0; index < list.length; index += pageSize) {\n    yield list.slice(index, index + pageSize);\n  }\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8];\nconst page = getPage(list, 3); // Generator { }\n\npage.next(); // { value: [1, 2, 3], done: false }\npage.next(); // { value: [4, 5, 6], done: false }\npage.next(); // { value: [7, 8], done: false }\npage.next(); // { value: undefined, done: true }\n```\n\n### [Sending values to the generator](#sending_values_to_the_generator)\n\nIn this example, `next` is called with a value.\n\n**Note:** The first call does not log anything, because the generator was not yielding anything initially.\n\n```\nfunction* gen() {\n  while (true) {\n    const value = yield;\n    console.log(value);\n  }\n}\n\nconst g = gen();\ng.next(1); // Returns { value: undefined, done: false }\n// No log at this step: the first value sent through `next` is lost\ng.next(2); // Returns { value: undefined, done: false }\n// Logs 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator.prototype.next](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generator.prototype.next) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Generator.prototype.next() - JavaScript | MDN",
  "description": "The next() method of Generator instances returns an\n  object with two properties done and value. You can also\n  provide a parameter to the next method to send a value to the\n  generator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get",
  "markdown": "# Reflect.get() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.get()`** static method is like the [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) syntax, but as a function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.get(target, propertyKey)\nReflect.get(target, propertyKey, receiver)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object on which to get the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to get.\n\n[`receiver`](#receiver) Optional\n\nThe value of `this` provided for the call to `target` if a getter is encountered.\n\n### [Return value](#return_value)\n\nThe value of the property.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.get()` provides the reflective semantic of a [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). That is, `Reflect.get(target, propertyKey, receiver)` is semantically equivalent to:\n\nNote that in a normal property access, `target` and `receiver` would observably be the same object.\n\n`Reflect.get()` invokes the `[[Get]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.get()](#using_reflect.get)\n\n```\n// Object\nconst obj1 = { x: 1, y: 2 };\nReflect.get(obj1, \"x\"); // 1\n\n// Array\nReflect.get([\"zero\", \"one\"], 1); // \"one\"\n\n// Proxy with a get handler\nconst obj2 = new Proxy(\n  { p: 1 },\n  {\n    get(t, k, r) {\n      return k + \"bar\";\n    },\n  },\n);\nReflect.get(obj2, \"foo\"); // \"foobar\"\n\n// Proxy with get handler and receiver\nconst obj3 = new Proxy(\n  { p: 1, foo: 2 },\n  {\n    get(t, prop, receiver) {\n      return receiver[prop] + \"bar\";\n    },\n  },\n);\nReflect.get(obj3, \"foo\", { foo: 3 }); // \"3bar\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.get](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.get) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.get() - JavaScript | MDN",
  "description": "The Reflect.get() static method is like the property accessor syntax, but as a function.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty",
  "markdown": "# Reflect.defineProperty() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.defineProperty()`** static method is like [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) but returns a [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.defineProperty(target, propertyKey, attributes)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object on which to define the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to be defined or modified.\n\n[`attributes`](#attributes)\n\nThe attributes for the property being defined or modified.\n\n### [Return value](#return_value)\n\nA boolean indicating whether or not the property was successfully defined.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` or `attributes` is not an object.\n\n## [Description](#description)\n\n`Reflect.defineProperty()` provides the reflective semantic of defining an own property on an object. At the very low level, defining a property returns a boolean (as is the case with [the proxy handler](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty)). [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) provides nearly the same semantic, but it throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if the status is `false` (the operation was unsuccessful), while `Reflect.defineProperty()` directly returns the status.\n\nMany built-in operations would also define own properties on objects. The most significant difference between defining properties and [setting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set) them is that [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) aren't invoked. For example, [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) directly define properties on the instance without invoking setters.\n\n```\nclass B extends class A {\n  set a(v) {\n    console.log(\"Setter called\");\n  }\n} {\n  a = 1; // Nothing logged\n}\n```\n\n`Reflect.defineProperty()` invokes the `[[DefineOwnProperty]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.defineProperty()](#using_reflect.defineproperty)\n\n```\nconst obj = {};\nReflect.defineProperty(obj, \"x\", { value: 7 }); // true\nconsole.log(obj.x); // 7\n```\n\n### [Checking if property definition has been successful](#checking_if_property_definition_has_been_successful)\n\nWith [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which returns an object if successful, or throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) otherwise, you would use a [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block to catch any error that occurred while defining a property.\n\nBecause `Reflect.defineProperty()` returns a Boolean success status, you can just use an [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) block here:\n\n```\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.defineproperty](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.defineproperty) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.defineProperty() - JavaScript | MDN",
  "description": "The Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",
  "markdown": "# Object.getOwnPropertySymbols() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.getOwnPropertySymbols()`** static method returns an array of all symbol properties found directly upon a given object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.getOwnPropertySymbols(obj)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object whose symbol properties are to be returned.\n\n### [Return value](#return_value)\n\nAn array of all symbol properties found directly upon the given object.\n\n## [Description](#description)\n\nSimilar to [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames), you can get all symbol properties of a given object as an array of symbols. Note that [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) itself does not contain the symbol properties of an object and only the string properties.\n\nAs all objects have no own symbol properties initially, `Object.getOwnPropertySymbols()` returns an empty array unless you have set symbol properties on your object.\n\n## [Examples](#examples)\n\n### [Using Object.getOwnPropertySymbols()](#using_object.getownpropertysymbols)\n\n```\nconst obj = {};\nconst a = Symbol(\"a\");\nconst b = Symbol.for(\"b\");\n\nobj[a] = \"localSymbol\";\nobj[b] = \"globalSymbol\";\n\nconst objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols.length); // 2\nconsole.log(objectSymbols); // [Symbol(a), Symbol(b)]\nconsole.log(objectSymbols[0]); // Symbol(a)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.getownpropertysymbols](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.getownpropertysymbols) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.getOwnPropertySymbols() - JavaScript | MDN",
  "description": "The Object.getOwnPropertySymbols() static method returns an array of all symbol properties found directly upon a given object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set",
  "markdown": "# Reflect.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.set()`** static method is like the [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) and [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) syntax, but as a function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.set(target, propertyKey, value)\nReflect.set(target, propertyKey, value, receiver)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object on which to set the property.\n\n[`propertyKey`](#propertykey)\n\nThe name of the property to set.\n\n[`value`](#value)\n\nThe value to set.\n\n[`receiver`](#receiver) Optional\n\nThe value of `this` provided for the call to the setter for `propertyKey` on `target`. If provided and `target` does not have a setter for `propertyKey`, the property will be set on `receiver` instead.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not setting the property was successful.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.set()` provides the reflective semantic of a [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). That is, `Reflect.set(target, propertyKey, value, receiver)` is semantically equivalent to:\n\n```\ntarget[propertyKey] = value;\n```\n\nNote that in a normal property access, `target` and `receiver` would observably be the same object.\n\n`Reflect.set()` invokes the `[[Set]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.set()](#using_reflect.set)\n\n```\n// Object\nconst obj = {};\nReflect.set(obj, \"prop\", \"value\"); // true\nobj.prop; // \"value\"\n\n// Array\nconst arr = [\"duck\", \"duck\", \"duck\"];\nReflect.set(arr, 2, \"goose\"); // true\narr[2]; // \"goose\"\n\n// It can truncate an array.\nReflect.set(arr, \"length\", 1); // true\narr; // [\"duck\"]\n\n// With just one argument, propertyKey and value are \"undefined\".\nReflect.set(obj); // true\nReflect.getOwnPropertyDescriptor(obj, \"undefined\");\n// { value: undefined, writable: true, enumerable: true, configurable: true }\n```\n\n### [Different target and receiver](#different_target_and_receiver)\n\nWhen the `target` and `receiver` are different, `Reflect.set` will use the property descriptor of `target` (to find the setter or determine if the property is writable), but set the property on `receiver`.\n\n```\nconst target = {};\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is {}; receiver is { a: 2 }\n\nconst target = { a: 1 };\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is { a: 1 }; receiver is { a: 2 }\n\nconst target = {\n  set a(v) {\n    this.b = v;\n  },\n};\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is { a: [Setter] }; receiver is { b: 2 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.set](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.set() - JavaScript | MDN",
  "description": "The Reflect.set() static method is like the property accessor and assignment syntax, but as a function.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",
  "markdown": "# Reflect.ownKeys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.ownKeys()`** static method returns an array of the `target` object's own property keys.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object from which to get the own keys.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of the `target` object's own property keys, including strings and symbols. For most objects, the array will be in the order of:\n\n1.  Non-negative integer indexes in increasing numeric order (but as strings)\n2.  Other string keys in the order of property creation\n3.  Symbol keys in the order of property creation.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object.\n\n## [Description](#description)\n\n`Reflect.ownKeys()` provides the reflective semantic of retrieving all property keys of an object. It is the only way to get all own properties – enumerable and not enumerable, strings and symbols — in one call, without extra filtering logic. For example, [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) takes the return value of `Reflect.ownKeys()` and filters to only string values, while [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) filters to only symbol values. Because normal objects implement `[[OwnPropertyKeys]]` to return all string keys before symbol keys, `Reflect.ownKeys(target)` is usually equivalent to `Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))`. However, if the object has a custom `[[OwnPropertyKeys]]` method (such as through a proxy's [`ownKeys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys) handler), the order of the keys may be different.\n\n`Reflect.ownKeys()` invokes the `[[OwnPropertyKeys]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.ownKeys()](#using_reflect.ownkeys)\n\n```\nReflect.ownKeys({ z: 3, y: 2, x: 1 }); // [ \"z\", \"y\", \"x\" ]\nReflect.ownKeys([]); // [\"length\"]\n\nconst sym = Symbol.for(\"comet\");\nconst sym2 = Symbol.for(\"meteor\");\nconst obj = {\n  [sym]: 0,\n  str: 0,\n  773: 0,\n  0: 0,\n  [sym2]: 0,\n  \"-1\": 0,\n  8: 0,\n  \"second str\": 0,\n};\nReflect.ownKeys(obj);\n// [ \"0\", \"8\", \"773\", \"str\", \"-1\", \"second str\", Symbol(comet), Symbol(meteor) ]\n// Indexes in numeric order,\n// strings in insertion order,\n// symbols in insertion order\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.ownkeys](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.ownkeys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.ownKeys() - JavaScript | MDN",
  "description": "The Reflect.ownKeys() static method returns an array of the target object's own property keys.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct",
  "markdown": "# Reflect.construct() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Reflect.construct()`** static method is like the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator, but as a function. It is equivalent to calling `new target(...args)`. It additionally allows to specify a different [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nReflect.construct(target, argumentsList)\nReflect.construct(target, argumentsList, newTarget)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target function to call.\n\n[`argumentsList`](#argumentslist)\n\nAn [array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) specifying the arguments with which `target` should be called.\n\n[`newTarget`](#newtarget) Optional\n\nThe value of [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) operator, which usually specifies the prototype of the returned object. If `newTarget` is not present, its value defaults to `target`.\n\n### [Return value](#return_value)\n\nA new instance of `target` (or `newTarget`, if present), initialized by `target` as a constructor with the given `argumentsList`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` or `newTarget` is not a constructor, or if `argumentsList` is not an object.\n\n## [Description](#description)\n\n`Reflect.construct()` provides the reflective semantic of a constructor call. That is, `Reflect.construct(target, argumentsList, newTarget)` is semantically equivalent to:\n\n```\nnew target(...argumentsList);\n```\n\nNote that when using the `new` operator, `target` and `newTarget` are always the same constructor — but `Reflect.construct()` allows you to pass a different [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value. Conceptually, `newTarget` is the function on which `new` was called, and `newTarget.prototype` will become the constructed object's prototype, while `target` is the constructor that is actually executed to initialize the object. For example, `new.target` may also be different from the currently executed constructor in class inheritance.\n\n```\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {}\n\nnew B(); // \"B\"\n```\n\n`Reflect.construct()` allows you to invoke a constructor with a variable number of arguments. (This is also possible with the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) in a normal constructor call.)\n\n```\nconst obj = new Foo(...args);\nconst obj = Reflect.construct(Foo, args);\n```\n\n`Reflect.construct()` invokes the `[[Construct]]` [object internal method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## [Examples](#examples)\n\n### [Using Reflect.construct()](#using_reflect.construct)\n\n```\nconst d = Reflect.construct(Date, [1776, 6, 4]);\nd instanceof Date; // true\nd.getFullYear(); // 1776\n```\n\n### [Reflect.construct() vs. Object.create()](#reflect.construct_vs._object.create)\n\nPrior to the introduction of `Reflect`, objects could be constructed using an arbitrary combination of constructors and prototypes using [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).\n\n```\nfunction OneClass() {\n  this.name = \"one\";\n}\n\nfunction OtherClass() {\n  this.name = \"other\";\n}\n\nconst args = [];\nconst obj1 = Reflect.construct(OneClass, args, OtherClass);\nconst obj2 = Object.create(OtherClass.prototype);\nOneClass.apply(obj2, args);\n\nconsole.log(obj1.name); // 'one'\nconsole.log(obj2.name); // 'one'\n\nconsole.log(obj1 instanceof OneClass); // false\nconsole.log(obj2 instanceof OneClass); // false\n\nconsole.log(obj1 instanceof OtherClass); // true\nconsole.log(obj2 instanceof OtherClass); // true\n```\n\nHowever, while the end result is the same, there is one important difference in the process. When using `Object.create()` and [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), the `new.target` operator will point to `undefined` within the function used as the constructor, since the `new` keyword is not being used to create the object. (In fact, it uses the [`apply`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply) semantic, not `construct`, although normal functions happen to operate nearly the same.)\n\nWhen invoking `Reflect.construct()`, on the other hand, the `new.target` operator will point to the `newTarget` parameter if supplied, or `target` if not.\n\n```\nfunction OneClass() {\n  console.log(\"OneClass\");\n  console.log(new.target);\n}\nfunction OtherClass() {\n  console.log(\"OtherClass\");\n  console.log(new.target);\n}\n\nconst obj1 = Reflect.construct(OneClass, args);\n// Logs:\n// OneClass\n// function OneClass { ... }\n\nconst obj2 = Reflect.construct(OneClass, args, OtherClass);\n// Logs:\n// OneClass\n// function OtherClass { ... }\n\nconst obj3 = Object.create(OtherClass.prototype);\nOneClass.apply(obj3, args);\n// Output:\n//     OneClass\n//     undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-reflect.construct](https://tc39.es/ecma262/multipage/reflection.html#sec-reflect.construct) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Reflect.construct() - JavaScript | MDN",
  "description": "The Reflect.construct() static method is like the new operator, but as a function. It is equivalent to calling new target(...args). It additionally allows to specify a different new.target value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
  "markdown": "# Object.getOwnPropertyDescriptor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.getOwnPropertyDescriptor()`** static method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.getOwnPropertyDescriptor(obj, prop)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object in which to look for the property.\n\n[`prop`](#prop)\n\nThe name or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) of the property whose description is to be retrieved.\n\n### [Return value](#return_value)\n\nA property descriptor of the given property if it exists on the object, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) otherwise.\n\n## [Description](#description)\n\nThis method permits examination of the precise description of a property. A _property_ in JavaScript consists of either a string-valued name or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) and a property descriptor. Further information about property descriptor types and their attributes can be found in [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\nA _property descriptor_ is a record with some of the following attributes:\n\n[`value`](#value)\n\nThe value associated with the property (data descriptors only).\n\n[`writable`](#writable)\n\n`true` if and only if the value associated with the property may be changed (data descriptors only).\n\n[`get`](#get)\n\nA function which serves as a getter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no getter (accessor descriptors only).\n\n[`set`](#set)\n\nA function which serves as a setter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no setter (accessor descriptors only).\n\n[`configurable`](#configurable)\n\n`true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n\n[`enumerable`](#enumerable)\n\n`true` if and only if this property shows up during enumeration of the properties on the corresponding object.\n\n## [Examples](#examples)\n\n### [Using Object.getOwnPropertyDescriptor()](#using_object.getownpropertydescriptor)\n\n```\nlet o, d;\n\no = {\n  get foo() {\n    return 17;\n  },\n};\nd = Object.getOwnPropertyDescriptor(o, \"foo\");\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   get: [Function: get foo],\n//   set: undefined\n// }\n\no = { bar: 42 };\nd = Object.getOwnPropertyDescriptor(o, \"bar\");\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   value: 42,\n//   writable: true\n// }\n\no = { [Symbol.for(\"baz\")]: 73 };\nd = Object.getOwnPropertyDescriptor(o, Symbol.for(\"baz\"));\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   value: 73,\n//   writable: true\n// }\n\no = {};\nObject.defineProperty(o, \"qux\", {\n  value: 8675309,\n  writable: false,\n  enumerable: false,\n});\nd = Object.getOwnPropertyDescriptor(o, \"qux\");\nconsole.log(d);\n// {\n//   value: 8675309,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }\n```\n\n### [Non-object coercion](#non-object_coercion)\n\nIn ES5, if the first argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, a non-object first argument will be coerced to an object at first.\n\n```\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// TypeError: \"foo\" is not an object  // ES5 code\n\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// Object returned by ES2015 code: {\n//   configurable: false,\n//   enumerable: true,\n//   value: \"f\",\n//   writable: false\n// }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.getownpropertydescriptor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.getownpropertydescriptor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.getOwnPropertyDescriptor() - JavaScript | MDN",
  "description": "The Object.getOwnPropertyDescriptor() static method returns an\n  object describing the configuration of a specific property on a given object (that is,\n  one directly present on an object and not in the object's prototype chain). The object\n  returned is mutable but mutating it has no effect on the original property's\n  configuration.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array/Float16Array",
  "markdown": "# Float16Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Float16Array()`** constructor creates [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Float16Array()\nnew Float16Array(length)\nnew Float16Array(typedArray)\nnew Float16Array(object)\n\nnew Float16Array(buffer)\nnew Float16Array(buffer, byteOffset)\nnew Float16Array(buffer, byteOffset, length)\n```\n\n**Note:** `Float16Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Float16Array](#different_ways_to_create_a_float16array)\n\n```\n// From a length\nconst float16 = new Float16Array(2);\nfloat16[0] = 42;\nconsole.log(float16[0]); // 42\nconsole.log(float16.length); // 2\nconsole.log(float16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Float16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float16Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float16FromIterable = new Float16Array(iterable);\nconsole.log(float16FromIterable);\n// Float16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Float16Array() constructor - JavaScript | MDN",
  "description": "The Float16Array() constructor creates Float16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError",
  "markdown": "# ReferenceError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`ReferenceError()`** constructor creates [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew ReferenceError()\nnew ReferenceError(message)\nnew ReferenceError(message, options)\nnew ReferenceError(message, fileName)\nnew ReferenceError(message, fileName, lineNumber)\n\nReferenceError()\nReferenceError(message)\nReferenceError(message, options)\nReferenceError(message, fileName)\nReferenceError(message, fileName, lineNumber)\n```\n\n**Note:** `ReferenceError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `ReferenceError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception.\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n### [Catching a ReferenceError](#catching_a_referenceerror)\n\n```\ntry {\n  let a = undefinedVariable;\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"undefinedVariable is not defined\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a ReferenceError](#creating_a_referenceerror)\n\n```\ntry {\n  throw new ReferenceError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "ReferenceError() constructor - JavaScript | MDN",
  "description": "The ReferenceError() constructor creates ReferenceError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array",
  "markdown": "# Float32Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Float32Array()`** constructor creates [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Float32Array()\nnew Float32Array(length)\nnew Float32Array(typedArray)\nnew Float32Array(object)\n\nnew Float32Array(buffer)\nnew Float32Array(buffer, byteOffset)\nnew Float32Array(buffer, byteOffset, length)\n```\n\n**Note:** `Float32Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Float32Array](#different_ways_to_create_a_float32array)\n\n```\n// From a length\nconst float32 = new Float32Array(2);\nfloat32[0] = 42;\nconsole.log(float32[0]); // 42\nconsole.log(float32.length); // 2\nconsole.log(float32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Float32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float32FromIterable = new Float32Array(iterable);\nconsole.log(float32FromIterable);\n// Float32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Float32Array() constructor - JavaScript | MDN",
  "description": "The Float32Array() constructor creates Float32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species",
  "markdown": "# RegExp\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`RegExp[@@species]`** static accessor property returns the constructor used to construct copied regular expressions in certain `RegExp` methods.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `RegExp` instances.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `RegExp` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```\n// Hypothetical underlying implementation for illustration\nclass RegExp {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```\nclass SubRegExp extends SubRegExp {}\nSubRegExp[Symbol.species] === SubRegExp; // true\n```\n\nSome `RegExp` methods create a copy of the current regex instance before running [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), so that side effects such as changes to [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) are not retained. The `@@species` property is used to determine the constructor of the new instance. The methods that copy the current regex instance are:\n\n*   [`[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n*   [`[@@split]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `RegExp` constructor for `RegExp` objects:\n\n```\nRegExp[Symbol.species]; // function RegExp()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `RegExp` subclass, such as `MyRegExp`, the `MyRegExp` species is the `MyRegExp` constructor. However, you might want to overwrite this, in order to return parent `RegExp` objects in your derived class methods:\n\n```\nclass MyRegExp extends RegExp {\n  // Overwrite MyRegExp species to the parent RegExp constructor\n  static get [Symbol.species]() {\n    return RegExp;\n  }\n}\n```\n\nOr you can use this to observe the copying process:\n\n```\nclass MyRegExp extends RegExp {\n  constructor(...args) {\n    console.log(\"Creating a new MyRegExp instance with args:\", args);\n    super(...args);\n  }\n  static get [Symbol.species]() {\n    console.log(\"Copying MyRegExp\");\n    return this;\n  }\n  exec(value) {\n    console.log(\"Executing with lastIndex:\", this.lastIndex);\n    return super.exec(value);\n  }\n}\n\nArray.from(\"aabbccdd\".matchAll(new MyRegExp(\"[ac]\", \"g\")));\n// Creating a new MyRegExp instance with args: [ '[ac]', 'g' ]\n// Copying MyRegExp\n// Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, 'g' ]\n// Executing with lastIndex: 0\n// Executing with lastIndex: 1\n// Executing with lastIndex: 2\n// Executing with lastIndex: 5\n// Executing with lastIndex: 6\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp-@@species](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp[@@species] - JavaScript | MDN",
  "description": "The RegExp[@@species] static accessor property returns the constructor used to construct copied regular expressions in certain RegExp methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input",
  "markdown": "# RegExp.input ($\\_) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.input`** static accessor property returns the string against which a regular expression is matched. `RegExp.$_` is an alias for this property.\n\n## [Description](#description)\n\nBecause `input` is a static property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use it as `RegExp.input` or `RegExp.$_`, rather than as a property of a `RegExp` object you created.\n\nThe value of `input` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `input` is an empty string. You can set the value of `input`, but this does not affect other behaviors of the regex, and the value will be overwritten again when the next successful match is made.\n\n## [Examples](#examples)\n\n### [Using input and $\\_](#using_input_and)\n\n```\nconst re = /hi/g;\nre.test(\"hi there!\");\nRegExp.input; // \"hi there!\"\nre.test(\"foo\"); // new test, non-matching\nRegExp.$_; // \"hi there!\"\nre.test(\"hi world!\"); // new test, matching\nRegExp.$_; // \"hi world!\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.input ($_) - JavaScript | MDN",
  "description": "The RegExp.input static accessor property returns the string against which a regular expression is matched. RegExp.$_ is an alias for this property.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch",
  "markdown": "# RegExp.lastMatch ($&) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.lastMatch`** static accessor property returns the last matched substring. `RegExp[\"$&\"]` is an alias for this property.\n\n## [Description](#description)\n\nBecause `lastMatch` is a static property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use it as `RegExp.lastMatch` or `RegExp[\"$&\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `lastMatch` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `lastMatch` is an empty string. The set accessor of `lastMatch` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$&`), because `&` is not a valid identifier part, so this causes a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). Use the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n`$&` can also be used in the replacement string of [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), but that's unrelated to the `RegExp[\"$&\"]` legacy property.\n\n## [Examples](#examples)\n\n### [Using lastMatch and $&](#using_lastmatch_and)\n\n```\nconst re = /hi/g;\nre.test(\"hi there!\");\nRegExp.lastMatch; // \"hi\"\nRegExp[\"$&\"]; // \"hi\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.lastMatch ($&) - JavaScript | MDN",
  "description": "The RegExp.lastMatch static accessor property returns the last matched substring. RegExp[\"$&\"] is an alias for this property.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp",
  "markdown": "# RegExp() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`RegExp()`** constructor creates [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) objects.\n\nFor an introduction to regular expressions, read the [Regular Expressions chapter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) in the [JavaScript Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew RegExp(pattern)\nnew RegExp(pattern, flags)\nRegExp(pattern)\nRegExp(pattern, flags)\n```\n\n**Note:** `RegExp()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but sometimes with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nThe text of the regular expression. This can also be another `RegExp` object.\n\n[`flags`](#flags) Optional\n\nIf specified, `flags` is a string that contains the flags to add. Alternatively, if a `RegExp` object is supplied for the `pattern`, the `flags` string will replace any of that object's flags (and `lastIndex` will be reset to `0`).\n\n`flags` may contain any combination of the following characters:\n\n[`d` (indices)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices)\n\nGenerate indices for substring matches.\n\n[`g` (global)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global)\n\nFind all matches rather than stopping after the first match.\n\n[`i` (ignore case)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase)\n\nWhen matching, casing differences are ignored.\n\n[`m` (multiline)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline)\n\nTreat beginning and end assertions (`^` and `$`) as working over multiple lines. In other words, match the beginning or end of _each_ line (delimited by `\\n` or `\\r`), not only the very beginning or end of the whole input string.\n\n[`s` (dotAll)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll)\n\nAllows `.` to match newlines.\n\n[`u` (unicode)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode)\n\nTreat `pattern` as a sequence of Unicode code points.\n\n[`v` (unicodeSets)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets)\n\nAn upgrade to the `u` flag that enables set notation in character classes as well as properties of strings.\n\n[`y` (sticky)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky)\n\nMatches only from the index indicated by the `lastIndex` property of this regular expression in the target string. Does not attempt to match from any later indexes.\n\n### [Return value](#return_value)\n\n`RegExp(pattern)` returns `pattern` directly if all of the following are true:\n\n*   `RegExp()` is called without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new);\n*   [`pattern` is a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes);\n*   `pattern.constructor === RegExp` (usually meaning it's not a subclass);\n*   `flags` is `undefined`.\n\nIn all other cases, calling `RegExp()` with or without `new` both create a new `RegExp` object. If `pattern` is a regex, the new object's [source](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) is `pattern.source`; otherwise, its source is `pattern` [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). If the `flags` parameter is not `undefined`, the new object's [`flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) is the parameter's value; otherwise, its `flags` is `pattern.flags` (if `pattern` is a regex).\n\n### [Exceptions](#exceptions)\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nThrown in one of the following cases:\n\n*   `pattern` cannot be parsed as a valid regular expression.\n*   `flags` contains repeated characters or any character outside of those allowed.\n\n## [Examples](#examples)\n\n### [Literal notation and constructor](#literal_notation_and_constructor)\n\nThere are two ways to create a `RegExp` object: a _literal notation_ and a _constructor_.\n\n*   The _literal notation_ takes a pattern between two slashes, followed by optional flags, after the second slash.\n*   The _constructor function_ takes either a string or a `RegExp` object as its first parameter and a string of optional flags as its second parameter.\n\nThe following three expressions create the same regular expression:\n\n```\n/ab+c/i;\nnew RegExp(/ab+c/, \"i\"); // literal notation\nnew RegExp(\"ab+c\", \"i\"); // constructor\n```\n\nBefore regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. There are two ways to compile and get a `RegExp` object.\n\nThe literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the `RegExp` object, `new RegExp('ab+c')`, results in runtime compilation of the regular expression.\n\nUse a string as the first argument to the `RegExp()` constructor when you want to [build the regular expression from dynamic input](#building_a_regular_expression_from_dynamic_inputs).\n\n### [Building a regular expression from dynamic inputs](#building_a_regular_expression_from_dynamic_inputs)\n\n```\nconst breakfasts = [\"bacon\", \"eggs\", \"oatmeal\", \"toast\", \"cereal\"];\nconst order = \"Let me get some bacon and eggs, please\";\n\norder.match(new RegExp(`\\\\b(${breakfasts.join(\"|\")})\\\\b`, \"g\"));\n// Returns ['bacon', 'eggs']\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp-constructor](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp() constructor - JavaScript | MDN",
  "description": "The RegExp() constructor creates RegExp objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext",
  "markdown": "# RegExp.leftContext ($\\`) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.leftContext`** static accessor property returns the substring preceding the most recent match. ``RegExp[\"$`\"]`` is an alias for this property.\n\n## [Description](#description)\n\nBecause `leftContext` is a static property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use it as `RegExp.leftContext` or ``RegExp[\"$`\"]``, rather than as a property of a `RegExp` object you created.\n\nThe value of `leftContext` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `leftContext` is an empty string. The set accessor of `leftContext` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`` RegExp.$` `` ), because `` ` `` is not a valid identifier part, so this causes a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). Use the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n`` $` `` can also be used in the replacement string of [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), but that's unrelated to the ``RegExp[\"$`\"]`` legacy property.\n\n## [Examples](#examples)\n\n### [Using leftContext and $\\`](#using_leftcontext_and)\n\n```\nconst re = /world/g;\nre.test(\"hello world!\");\nRegExp.leftContext; // \"hello \"\nRegExp[\"$`\"]; // \"hello \"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.leftContext ($`) - JavaScript | MDN",
  "description": "The RegExp.leftContext static accessor property returns the substring preceding the most recent match. RegExp[\"$`\"] is an alias for this property.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n",
  "markdown": "# RegExp.$1, …, RegExp.$9 - JavaScript\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.$1, …, RegExp.$9`** static accessor properties return parenthesized substring matches.\n\n## [Description](#description)\n\nBecause `$1`–`$9` are static properties of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use them as `RegExp.$1`, `RegExp.$2`, etc., rather than as properties of a `RegExp` object you created.\n\nThe values of `$1, …, $9` update whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, or if the last match does not have the corresponding capturing group, the respective property is an empty string. The set accessor of each property is `undefined`, so you cannot change the properties directly.\n\nThe number of possible parenthesized substrings is unlimited, but the `RegExp` object can only hold the first nine. You can access all parenthesized substrings through the returned array's indexes.\n\n`$1, …, $9` can also be used in the replacement string of [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), but that's unrelated to the `RegExp.$n` legacy properties.\n\n## [Examples](#examples)\n\n### [Using $n with RegExp.prototype.test()](#using_n_with_regexp.prototype.test)\n\nThe following script uses the [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) method to grab a number in a generic string.\n\n```\nconst str = \"Test 24\";\nconst number = /(\\d+)/.test(str) ? RegExp.$1 : \"0\";\nnumber; // \"24\"\n```\n\nPlease note that any operation involving the usage of other regular expressions between a `re.test(str)` call and the `RegExp.$n` property, might have side effects, so that accessing these special properties should be done instantly, otherwise the result might be unexpected.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.$1, …, RegExp.$9 - JavaScript | MDN",
  "description": "The RegExp.$1, …, RegExp.$9 static accessor properties return parenthesized substring matches.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen",
  "markdown": "# RegExp.lastParen ($+) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.lastParen`** static accessor property returns the last parenthesized substring match, if any. `RegExp[\"$+\"]` is an alias for this property.\n\n## [Description](#description)\n\nBecause `lastParen` is a static property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use it as `RegExp.lastParen` or `RegExp[\"$+\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `lastParen` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, or if the most recent regex execution contains no capturing groups, `lastParen` is an empty string. The set accessor of `lastParen` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$+`), because `+` is not a valid identifier part, so this causes a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). Use the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n## [Examples](#examples)\n\n### [Using lastParen and $+](#using_lastparen_and)\n\n```\nconst re = /(hi)/g;\nre.test(\"hi there!\");\nRegExp.lastParen; // \"hi\"\nRegExp[\"$+\"]; // \"hi\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.lastParen ($+) - JavaScript | MDN",
  "description": "The RegExp.lastParen static accessor property returns the last parenthesized substring match, if any. RegExp[\"$+\"] is an alias for this property.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext",
  "markdown": "# RegExp.rightContext ($') - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.rightContext`** static accessor property returns the substring following the most recent match. `RegExp[\"$'\"]` is an alias for this property.\n\n## [Description](#description)\n\nBecause `rightContext` is a static property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp), you always use it as `RegExp.rightContext` or `RegExp[\"$'\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `rightContext` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `rightContext` is an empty string. The set accessor of `rightContext` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$'`), because `'` is not a valid identifier part, so this causes a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError). Use the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n`$'` can also be used in the replacement string of [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), but that's unrelated to the `RegExp[\"$'\"]` legacy property.\n\n## [Examples](#examples)\n\n### [Using rightContext and $'](#using_rightcontext_and)\n\n```\nconst re = /hello/g;\nre.test(\"hello world!\");\nRegExp.rightContext; // \" world!\"\nRegExp[\"$'\"]; // \" world!\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Legacy RegExp features  <br>\\# additional-properties-of-the-regexp-constructor](https://github.com/tc39/proposal-regexp-legacy-features/#additional-properties-of-the-regexp-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.rightContext ($') - JavaScript | MDN",
  "description": "The RegExp.rightContext static accessor property returns the substring following the most recent match. RegExp[\"$'\"] is an alias for this property.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match",
  "markdown": "# RegExp.prototype\\[@@match\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@match]()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances specifies how [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nregexp[Symbol.match](str)\n```\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) that is a target of the match.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) whose contents depend on the presence or absence of the global (`g`) flag, or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) if no matches are found.\n\n*   If the `g` flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.\n*   If the `g` flag is not used, only the first complete match and its related capturing groups are returned. In this case, `match()` will return the same result as [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) (an array with some extra properties).\n\n## [Description](#description)\n\nThis method is called internally in [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n\nFor example, the following two examples return same result.\n\n```\n\"abc\".match(/a/);\n\n/a/[Symbol.match](\"abc\");\n```\n\nIf the regex is global (with the `g` flag), the regex's [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method will be repeatedly called until `exec()` returns `null`. Otherwise, `exec()` would only be called once and its result becomes the return value of `@@match`.\n\nBecause `@@match` would keep calling `exec()` until it returns `null`, and `exec()` would automatically reset the regex's [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when the last match fails, `@@match` would typically not have side effects when it exits. However, when the regex is [sticky](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) but not global, `lastIndex` would not be reset. In this case, each call to `match()` may return a different result.\n\n```\nconst re = /[abc]/y;\nfor (let i = 0; i < 5; i++) {\n  console.log(\"abc\".match(re), re.lastIndex);\n}\n// [ 'a' ] 1\n// [ 'b' ] 2\n// [ 'c' ] 3\n// null 0\n// [ 'a' ] 1\n```\n\nWhen the regex is sticky and global, it would still perform sticky matches — i.e. it would fail to match any occurrences beyond the `lastIndex`.\n\n```\nconsole.log(\"ab-c\".match(/[abc]/gy)); // [ 'a', 'b' ]\n```\n\nIf the current match is an empty string, the `lastIndex` would still be advanced — if the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n\n```\nconsole.log(\"😄\".match(/(?:)/g)); // [ '', '', '' ]\nconsole.log(\"😄\".match(/(?:)/gu)); // [ '', '' ]\n```\n\nThis method exists for customizing match behavior within `RegExp` subclasses.\n\nIn addition, the `@@match` property is used to check [whether an object is a regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## [Examples](#examples)\n\n### [Direct call](#direct_call)\n\nThis method can be used in _almost_ the same way as [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), except the different `this` and the different arguments order.\n\n```\nconst re = /[0-9]+/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.match](str);\nconsole.log(result); // [\"2016\", \"01\", \"02\"]\n```\n\n### [Using @@match in subclasses](#using_match_in_subclasses)\n\nSubclasses of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) can override the `[@@match]()` method to modify the default behavior.\n\n```\nclass MyRegExp extends RegExp {\n  [Symbol.match](str) {\n    const result = RegExp.prototype[Symbol.match].call(this, str);\n    if (!result) return null;\n    return {\n      group(n) {\n        return result[n];\n      },\n    };\n  }\n}\n\nconst re = new MyRegExp(\"([0-9]+)-([0-9]+)-([0-9]+)\");\nconst str = \"2016-01-02\";\nconst result = str.match(re); // String.prototype.match calls re[@@match].\nconsole.log(result.group(1)); // 2016\nconsole.log(result.group(2)); // 01\nconsole.log(result.group(3)); // 02\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype-@@match](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype-@@match) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype[@@match]() - JavaScript | MDN",
  "description": "The [@@match]() method of RegExp instances specifies how String.prototype.match() should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search",
  "markdown": "# RegExp.prototype\\[@@search\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@search]()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances specifies how [`String.prototype.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) should behave.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nregexp[Symbol.search](str)\n```\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) that is a target of the search.\n\n### [Return value](#return_value)\n\nThe index of the first match between the regular expression and the given string, or `-1` if no match was found.\n\n## [Description](#description)\n\nThis method is called internally in [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search). For example, the following two examples return the same result.\n\n```\n\"abc\".search(/a/);\n\n/a/[Symbol.search](\"abc\");\n```\n\nThis method does not copy the regular expression, unlike [`@@split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split) or [`@@matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll). However, unlike [`@@match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) or [`@@replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace), it will set [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when execution starts and restore it to the previous value when it exits, therefore generally avoiding side effects. This means that the `g` flag has no effect with this method, and it always returns the first match in the string even when `lastIndex` is non-zero. This also means sticky regexps will always search strictly at the beginning of the string.\n\n```\nconst re = /[abc]/g;\nre.lastIndex = 2;\nconsole.log(\"abc\".search(re)); // 0\n\nconst re2 = /[bc]/y;\nre2.lastIndex = 1;\nconsole.log(\"abc\".search(re2)); // -1\nconsole.log(\"abc\".match(re2)); // [ 'b' ]\n```\n\n`@@search` always calls the regex's [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method exactly once, and returns the `index` property of the result, or `-1` if the result is `null`.\n\nThis method exists for customizing the search behavior in `RegExp` subclasses.\n\n## [Examples](#examples)\n\n### [Direct call](#direct_call)\n\nThis method can be used in almost the same way as [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search), except for the different value of `this` and the different arguments order.\n\n```\nconst re = /-/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.search](str);\nconsole.log(result); // 4\n```\n\n### [Using @@search in subclasses](#using_search_in_subclasses)\n\nSubclasses of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) can override `[@@search]()` method to modify the behavior.\n\n```\nclass MyRegExp extends RegExp {\n  constructor(str) {\n    super(str);\n    this.pattern = str;\n  }\n  [Symbol.search](str) {\n    return str.indexOf(this.pattern);\n  }\n}\n\nconst re = new MyRegExp(\"a+b\");\nconst str = \"ab a+b\";\nconst result = str.search(re); // String.prototype.search calls re[@@search].\nconsole.log(result); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype-@@search](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype-@@search) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype[@@search]() - JavaScript | MDN",
  "description": "The [@@search]() method of RegExp instances specifies how String.prototype.search should behave.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split",
  "markdown": "# RegExp.prototype\\[@@split\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@split]()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances specifies how [`String.prototype.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) should behave when the regular expression is passed in as the separator.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nregexp[Symbol.split](str)\nregexp[Symbol.split](str, limit)\n```\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nThe target of the split operation.\n\n[`limit`](#limit) Optional\n\nInteger specifying a limit on the number of splits to be found. The `[@@split]()` method still splits on every match of `this` RegExp pattern (or, in the Syntax above, `regexp`), until the number of split items match the `limit` or the string falls short of `this` pattern.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) containing substrings as its elements. Capturing groups are included.\n\n## [Description](#description)\n\nThis method is called internally in [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) when a `RegExp` is passed as the separator. For example, the following two examples return the same result.\n\n```\n\"a-b-c\".split(/-/);\n\n/-/[Symbol.split](\"a-b-c\");\n```\n\nThis method exists for customizing the behavior of `split()` in `RegExp` subclasses.\n\nThe `RegExp.prototype[@@split]()` base method exhibits the following behaviors:\n\n*   It starts by using [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species) to construct a new regexp, thus avoiding mutating the original regexp in any way.\n*   The regexp's `g` (\"global\") flag is ignored, and the `y` (\"sticky\") flag is always applied even when it was not originally present.\n*   If the target string is empty, and the regexp can match empty strings (for example, `/a?/`), an empty array is returned. Otherwise, if the regexp can't match an empty string, `[\"\"]` is returned.\n*   The matching proceeds by continuously calling `this.exec()`. Since the regexp is always sticky, this will move along the string, each time yielding a matching string, index, and any capturing groups.\n*   For each match, the substring between the last matched string's end and the current matched string's beginning is first appended to the result array. Then, the capturing groups' values are appended one-by-one.\n*   If the current match is an empty string, or if the regexp doesn't match at the current position (since it's sticky), the `lastIndex` would still be advanced — if the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n*   If the regexp doesn't match the target string, the target string is returned as-is, wrapped in an array.\n*   The returned array's length will never exceed the `limit` parameter, if provided, while trying to be as close as possible. Therefore, the last match and its capturing groups may not all be present in the returned array if the array is already filled.\n\n## [Examples](#examples)\n\n### [Direct call](#direct_call)\n\nThis method can be used in almost the same way as [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split), except the different `this` and the different order of arguments.\n\n```\nconst re = /-/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.split](str);\nconsole.log(result); // [\"2016\", \"01\", \"02\"]\n```\n\n### [Using @@split in subclasses](#using_split_in_subclasses)\n\nSubclasses of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) can override the `[@@split]()` method to modify the default behavior.\n\n```\nclass MyRegExp extends RegExp {\n  [Symbol.split](str, limit) {\n    const result = RegExp.prototype[Symbol.split].call(this, str, limit);\n    return result.map((x) => `(${x})`);\n  }\n}\n\nconst re = new MyRegExp(\"-\");\nconst str = \"2016-01-02\";\nconst result = str.split(re); // String.prototype.split calls re[@@split].\nconsole.log(result); // [\"(2016)\", \"(01)\", \"(02)\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype-@@split](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype-@@split) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype[@@split]() - JavaScript | MDN",
  "description": "The [@@split]() method of RegExp instances specifies how String.prototype.split should behave when the regular expression is passed in as the separator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll",
  "markdown": "# RegExp.prototype\\[@@matchAll\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@matchAll]()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances specifies how [`String.prototype.matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) should behave.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nregexp[Symbol.matchAll](str)\n```\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) that is a target of the match.\n\n### [Return value](#return_value)\n\nAn [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) (which is not restartable) of matches. Each match is an array with the same shape as the return value of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec).\n\n## [Description](#description)\n\nThis method is called internally in [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll). For example, the following two examples return the same result.\n\n```\n\"abc\".matchAll(/a/g);\n\n/a/g[Symbol.matchAll](\"abc\");\n```\n\nLike [`@@split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split), `@@matchAll` starts by using [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species) to construct a new regex, thus avoiding mutating the original regexp in any way. [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) starts as the original regex's value.\n\n```\nconst regexp = /[a-c]/g;\nregexp.lastIndex = 1;\nconst str = \"abc\";\nArray.from(str.matchAll(regexp), (m) => `${regexp.lastIndex} ${m[0]}`);\n// [ \"1 b\", \"1 c\" ]\n```\n\nThe validation that the input is a global regex happens in [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll). `@@matchAll` does not validate the input. If the regex is not global, the returned iterator yields the [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) result once and then returns `undefined`. If the regexp is global, each time the returned iterator's `next()` method is called, the regex's [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) is called and the result is yielded.\n\nWhen the regex is sticky and global, it will still perform sticky matches — i.e. it will not match any occurrences beyond the `lastIndex`.\n\n```\nconsole.log(Array.from(\"ab-c\".matchAll(/[abc]/gy)));\n// [ [ \"a\" ], [ \"b\" ] ]\n```\n\nIf the current match is an empty string, the [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) will still be advanced. If the regex has the [`u`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) flag, it advances by one Unicode code point; otherwise, it advances by one UTF-16 code point.\n\n```\nconsole.log(Array.from(\"😄\".matchAll(/(?:)/g)));\n// [ [ \"\" ], [ \"\" ], [ \"\" ] ]\n\nconsole.log(Array.from(\"😄\".matchAll(/(?:)/gu)));\n// [ [ \"\" ], [ \"\" ] ]\n```\n\nThis method exists for customizing the behavior of `matchAll()` in [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) subclasses.\n\n## [Examples](#examples)\n\n### [Direct call](#direct_call)\n\nThis method can be used in almost the same way as [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll), except for the different value of `this` and the different order of arguments.\n\n```\nconst re = /[0-9]+/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.matchAll](str);\n\nconsole.log(Array.from(result, (x) => x[0]));\n// [ \"2016\", \"01\", \"02\" ]\n```\n\n### [Using @@matchAll in subclasses](#using_matchall_in_subclasses)\n\nSubclasses of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) can override the `[@@matchAll]()` method to modify the default behavior.\n\nFor example, to return an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instead of an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators):\n\n```\nclass MyRegExp extends RegExp {\n  [Symbol.matchAll](str) {\n    const result = RegExp.prototype[Symbol.matchAll].call(this, str);\n    return result ? Array.from(result) : null;\n  }\n}\n\nconst re = new MyRegExp(\"([0-9]+)-([0-9]+)-([0-9]+)\", \"g\");\nconst str = \"2016-01-02|2019-03-07\";\nconst result = str.matchAll(re);\n\nconsole.log(result[0]);\n// [ \"2016-01-02\", \"2016\", \"01\", \"02\" ]\n\nconsole.log(result[1]);\n// [ \"2019-03-07\", \"2019\", \"03\", \"07\" ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp-prototype-matchall](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp-prototype-matchall) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype[@@matchAll]() - JavaScript | MDN",
  "description": "The [@@matchAll]() method of RegExp instances specifies how String.prototype.matchAll should behave.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile",
  "markdown": "# RegExp.prototype.compile() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** The `compile()` method is only specified for compatibility reasons. Using `compile()` causes the otherwise immutable regex source and flags to become mutable, which may break user expectations. You can use the [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor to construct a new regular expression object instead.\n\nThe **`compile()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances is used to recompile a regular expression with new source and flags after the `RegExp` object has already been created.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nThe text of the regular expression.\n\n[`flags`](#flags)\n\nAny combination of [flag values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#flags).\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using compile()](#using_compile)\n\nThe following example shows how to recompile a regular expression with a new pattern and a new flag.\n\n```\nconst regexObj = new RegExp(\"foo\", \"gi\");\nregexObj.compile(\"new foo\", \"g\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype.compile](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-regexp.prototype.compile) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype.compile() - JavaScript | MDN",
  "description": "The compile() method of RegExp instances is used to recompile a regular expression with new source and flags after the RegExp object has already been created.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace",
  "markdown": "# RegExp.prototype\\[@@replace\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@replace]()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances specifies how [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) should behave when the regular expression is passed in as the pattern.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nregexp[Symbol.replace](str, replacement)\n```\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) that is a target of the replacement.\n\n[`replacement`](#replacement)\n\nCan be a string or a function.\n\n*   If it's a string, it will replace the substring matched by the current regexp. A number of special replacement patterns are supported; see the [Specifying a string as the replacement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement) section of `String.prototype.replace`.\n*   If it's a function, it will be invoked for every match and the return value is used as the replacement text. The arguments supplied to this function are described in the [Specifying a function as the replacement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_the_replacement) section of `String.prototype.replace`.\n\n### [Return value](#return_value)\n\nA new string, with one, some, or all matches of the pattern replaced by the specified replacement.\n\n## [Description](#description)\n\nThis method is called internally in [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) if the `pattern` argument is a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object. For example, the following two examples return the same result.\n\n```\n\"abc\".replace(/a/, \"A\");\n\n/a/[Symbol.replace](\"abc\", \"A\");\n```\n\nIf the regex is global (with the `g` flag), the regex's [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method will be repeatedly called until `exec()` returns `null`. Otherwise, `exec()` would only be called once. For each `exec()` result, the substitution will be prepared based on the description in [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#description).\n\nBecause `@@replace` would keep calling `exec()` until it returns `null`, and `exec()` would automatically reset the regex's [`lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when the last match fails, `@@replace` would typically not have side effects when it exits. However, when the regex is [sticky](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) but not global, `lastIndex` would not be reset. In this case, each call to `replace()` may return a different result.\n\n```\nconst re = /a/y;\n\nfor (let i = 0; i < 5; i++) {\n  console.log(\"aaa\".replace(re, \"b\"), re.lastIndex);\n}\n\n// baa 1\n// aba 2\n// aab 3\n// aaa 0\n// baa 1\n```\n\nWhen the regex is sticky and global, it would still perform sticky matches — i.e. it would fail to match any occurrences beyond the `lastIndex`.\n\n```\nconsole.log(\"aa-a\".replace(/a/gy, \"b\")); // \"bb-a\"\n```\n\nIf the current match is an empty string, the `lastIndex` would still be advanced — if the regex is [Unicode-aware](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n\n```\nconsole.log(\"😄\".replace(/(?:)/g, \" \")); // \" \\ud83d \\ude04 \"\nconsole.log(\"😄\".replace(/(?:)/gu, \" \")); // \" 😄 \"\n```\n\nThis method exists for customizing replace behavior in `RegExp` subclasses.\n\n## [Examples](#examples)\n\n### [Direct call](#direct_call)\n\nThis method can be used in almost the same way as [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), except the different `this` and the different arguments order.\n\n```\nconst re = /-/g;\nconst str = \"2016-01-01\";\nconst newstr = re[Symbol.replace](str, \".\");\nconsole.log(newstr); // 2016.01.01\n```\n\n### [Using @@replace in subclasses](#using_replace_in_subclasses)\n\nSubclasses of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) can override the `[@@replace]()` method to modify the default behavior.\n\n```\nclass MyRegExp extends RegExp {\n  constructor(pattern, flags, count) {\n    super(pattern, flags);\n    this.count = count;\n  }\n  [Symbol.replace](str, replacement) {\n    // Perform @@replace |count| times.\n    let result = str;\n    for (let i = 0; i < this.count; i++) {\n      result = RegExp.prototype[Symbol.replace].call(this, result, replacement);\n    }\n    return result;\n  }\n}\n\nconst re = new MyRegExp(\"\\\\d\", \"\", 3);\nconst str = \"01234567\";\nconst newstr = str.replace(re, \"#\"); // String.prototype.replace calls re[@@replace].\nconsole.log(newstr); // ###34567\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype-@@replace](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype-@@replace) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype[@@replace]() - JavaScript | MDN",
  "description": "The [@@replace]() method of RegExp instances specifies how String.prototype.replace() and String.prototype.replaceAll() should behave when the regular expression is passed in as the pattern.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString",
  "markdown": "# RegExp.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns a string representing this regular expression.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the given object.\n\n## [Description](#description)\n\nThe [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object overrides the `toString()` method of the [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) object; it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) objects, the `toString()` method returns a string representation of the regular expression.\n\nIn practice, it reads the regex's [`source`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) and [`flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) properties and returns a string in the form `/source/flags`. The `toString()` return value is guaranteed to be a parsable regex literal, although it may not be the exact same text as what was originally specified for the regex (for example, the flags may be reordered).\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\nThe following example displays the string value of a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) object:\n\n```\nconst myExp = new RegExp(\"a+b+c\");\nconsole.log(myExp.toString()); // '/a+b+c/'\n\nconst foo = new RegExp(\"bar\", \"g\");\nconsole.log(foo.toString()); // '/bar/g'\n```\n\n### [Empty regular expressions and escaping](#empty_regular_expressions_and_escaping)\n\nSince `toString()` accesses the [`source`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) property, an empty regular expression returns the string `\"/(?:)/\"`, and line terminators such as `\\n` are escaped. This makes the returned value always a valid regex literal.\n\n```\nnew RegExp().toString(); // \"/(?:)/\"\n\nnew RegExp(\"\\n\").toString() === \"/\\\\n/\"; // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-regexp.prototype.tostring](https://tc39.es/ecma262/multipage/text-processing.html#sec-regexp.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of RegExp instances returns a string representing this regular expression.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags",
  "markdown": "# RegExp.prototype.flags - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`flags`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns the [flags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) of this regular expression.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`RegExp.prototype.flags` has a string as its value. Flags in the `flags` property are sorted alphabetically (from left to right, e.g. `\"dgimsuvy\"`). It actually invokes the other flag accessors ([`hasIndices`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices), [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global), etc.) one-by-one and concatenates the results.\n\nAll built-in functions read the `flags` property instead of reading individual flag accessors.\n\nThe set accessor of `flags` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Using flags](#using_flags)\n\n```\n/foo/ig.flags; // \"gi\"\n/bar/myu.flags; // \"muy\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.flags](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.flags) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype.flags - JavaScript | MDN",
  "description": "The flags accessor property of RegExp instances returns the flags of this regular expression.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",
  "markdown": "# RegExp: lastIndex - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`lastIndex`** data property of a [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instance specifies the index at which to start the next match.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA non-negative integer.\n\n| Property attributes of `RegExp: lastIndex` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThis property is set only if the regular expression instance used the `g` flag to indicate a global search, or the `y` flag to indicate a sticky search. The following rules apply when [`exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) is called on a given input:\n\n*   If `lastIndex` is greater than the length of the input, `exec()` will not find a match, and `lastIndex` will be set to 0.\n*   If `lastIndex` is equal to or less than the length of the input, `exec()` will attempt to match the input starting from `lastIndex`.\n    *   If `exec()` finds a match, then `lastIndex` will be set to the position of the end of the matched string in the input.\n    *   If `exec()` does not find a match, then `lastIndex` will be set to 0.\n\nOther regex-related methods, such as [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test), [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), etc., call `exec()` under the hood, so they have different effects on `lastIndex`. See their respective pages for details.\n\n## [Examples](#examples)\n\n### [Using lastIndex](#using_lastindex)\n\nConsider the following sequence of statements:\n\nMatches the empty string.\n\n```\nconsole.log(re.exec(\"hi\"));\nconsole.log(re.lastIndex);\n```\n\nReturns `[\"hi\", \"hi\"]` with `lastIndex` equal to 2.\n\n```\nconsole.log(re.exec(\"hi\"));\nconsole.log(re.lastIndex);\n```\n\nReturns `[\"\", undefined]`, an empty array whose zeroth element is the match string. In this case, the empty string because `lastIndex` was 2 (and still is 2) and `hi` has length 2.\n\n### [Using lastIndex with sticky regexes](#using_lastindex_with_sticky_regexes)\n\nThe `lastIndex` property is writable. You can set it to make the regex start its next search at a given index.\n\nThe `y` flag almost always requires setting `lastIndex`. It always matches strictly at `lastIndex` and does not attempt any later positions. This is usually useful for writing parsers, when you want to match tokens only at the current position.\n\n```\nconst stringPattern = /\"[^\"]*\"/y;\nconst input = `const message = \"Hello world\";`;\n\nstringPattern.lastIndex = 6;\nconsole.log(stringPattern.exec(input)); // null\n\nstringPattern.lastIndex = 16;\nconsole.log(stringPattern.exec(input)); // ['\"Hello world\"']\n```\n\n### [Rewinding lastIndex](#rewinding_lastindex)\n\nThe `g` flag also benefits from setting `lastIndex`. One common use case is when the string is modified in the middle of a global search. In this case, we may miss a particular match if the string is shortened. We can avoid this by rewinding `lastIndex`.\n\n```\nconst mdLinkPattern = /\\[[^[\\]]+\\]\\((?<link>[^()\\s]+)\\)/dg;\n\nfunction resolveMDLink(line) {\n  let match;\n  let modifiedLine = line;\n  while ((match = mdLinkPattern.exec(modifiedLine))) {\n    const originalLink = match.groups.link;\n    const resolvedLink = originalLink.replaceAll(/^files|\\/index\\.md$/g, \"\");\n    modifiedLine =\n      modifiedLine.slice(0, match.indices.groups.link[0]) +\n      resolvedLink +\n      modifiedLine.slice(match.indices.groups.link[1]);\n    // Rewind the pattern to the end of the resolved link\n    mdLinkPattern.lastIndex += resolvedLink.length - originalLink.length;\n  }\n  return modifiedLine;\n}\n\nconsole.log(\n  resolveMDLink(\n    \"[`lastIndex`](files/en-us/web/javascript/reference/global_objects/regexp/lastindex/index.md)\",\n  ),\n); // [`lastIndex`](/en-us/web/javascript/reference/global_objects/regexp/lastindex)\nconsole.log(\n  resolveMDLink(\n    \"[`ServiceWorker`](files/en-us/web/api/serviceworker/index.md) and [`SharedWorker`](files/en-us/web/api/sharedworker/index.md)\",\n  ),\n); // [`ServiceWorker`](/en-us/web/api/serviceworker) and [`SharedWorker`](/en-us/web/api/sharedworker)\n```\n\nTry deleting the `mdLinkPattern.lastIndex += resolvedLink.length - originalLink.length` line and running the second example. You will find that the second link is not replaced correctly, because the `lastIndex` is already past the link's index after the string is shortened.\n\n**Warning:** This example is for demonstration only. To deal with Markdown, you should probably use a parsing library instead of regex.\n\n### [Optimizing searching](#optimizing_searching)\n\nYou can optimize searching by setting `lastIndex` to a point where previous possible occurrences can be ignored. For example, instead of this:\n\n```\nconst stringPattern = /\"[^\"]*\"/g;\nconst input = `const message = \"Hello \" + \"world\";`;\n\n// Pretend we've already dealt with the previous parts of the string\nlet offset = 26;\nconst remainingInput = input.slice(offset);\nconst nextString = stringPattern.exec(remainingInput);\nconsole.log(nextString[0]); // \"world\"\noffset += nextString.index + nextString.length;\n```\n\nConsider this:\n\n```\nstringPattern.lastIndex = offset;\nconst nextString = stringPattern.exec(remainingInput);\nconsole.log(nextString[0]); // \"world\"\noffset = stringPattern.lastIndex;\n```\n\nThis is potentially more performant because we avoid string slicing.\n\n### [Avoiding side effects](#avoiding_side_effects)\n\nThe side effects caused by `exec()` can be confusing, especially if the input is different for each `exec()`.\n\n```\nconst re = /foo/g;\nconsole.log(re.test(\"foo bar\")); // true\nconsole.log(re.test(\"foo baz\")); // false, because lastIndex is non-zero\n```\n\nThis is even more confusing when you are hand-modifying `lastIndex`. To contain the side effects, remember to reset `lastIndex` after each input is completely processed.\n\n```\nconst re = /foo/g;\nconsole.log(re.test(\"foo bar\")); // true\nre.lastIndex = 0;\nconsole.log(re.test(\"foo baz\")); // true\n```\n\nWith some abstraction, you can require `lastIndex` to be set to a particular value before each `exec()` call.\n\n```\nfunction createMatcher(pattern) {\n  // Create a copy, so that the original regex is never updated\n  const regex = new RegExp(pattern, \"g\");\n  return (input, offset) => {\n    regex.lastIndex = offset;\n    return regex.exec(input);\n  };\n}\n\nconst matchFoo = createMatcher(/foo/);\nconsole.log(matchFoo(\"foo bar\", 0)[0]); // \"foo\"\nconsole.log(matchFoo(\"foo baz\", 0)[0]); // \"foo\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-properties-of-regexp-instances](https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-regexp-instances) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp: lastIndex - JavaScript | MDN",
  "description": "The lastIndex data property of a RegExp instance specifies the index at which to start the next match.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source",
  "markdown": "# RegExp.prototype.source - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`source`** accessor property of [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nConceptually, the `source` property is the text between the two forward slashes in the regular expression literal. The language requires the returned string to be properly escaped, so that when the `source` is concatenated with a forward slash on both ends, it would form a parsable regex literal. For example, for `new RegExp(\"/\")`, the `source` is `\\\\/`, because if it generates `/`, the resulting literal becomes `///`, which is a line comment. Similarly, all [line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) will be escaped because line terminator _characters_ would break up the regex literal. There's no requirement for other characters, as long as the result is parsable. For empty regular expressions, the string `(?:)` is returned.\n\n## [Examples](#examples)\n\n### [Using source](#using_source)\n\n```\nconst regex = /fooBar/gi;\n\nconsole.log(regex.source); // \"fooBar\", doesn't contain /.../ and \"gi\".\n```\n\n### [Empty regular expressions and escaping](#empty_regular_expressions_and_escaping)\n\n```\nnew RegExp().source; // \"(?:)\"\n\nnew RegExp(\"\\n\").source === \"\\\\n\"; // true, starting with ES5\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-regexp.prototype.source](https://tc39.es/ecma262/multipage/text-processing.html#sec-get-regexp.prototype.source) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "RegExp.prototype.source - JavaScript | MDN",
  "description": "The source accessor property of RegExp instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll",
  "markdown": "# Symbol.matchAll - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.matchAll`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@matchAll`. The [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.\n\nFor more information, see [`RegExp.prototype[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll) and [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@matchAll`.\n\n| Property attributes of `Symbol.matchAll` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [Using Symbol.matchAll](#using_symbol.matchall)\n\n```\nconst str = \"2016-01-02|2019-03-07\";\n\nconst numbers = {\n  *[Symbol.matchAll](str) {\n    for (const n of str.matchAll(/[0-9]+/g)) yield n[0];\n  },\n};\n\nconsole.log(Array.from(str.matchAll(numbers)));\n// [\"2016\", \"01\", \"02\", \"2019\", \"03\", \"07\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.matchall](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.matchall) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.matchAll - JavaScript | MDN",
  "description": "The Symbol.matchAll static data property represents the well-known symbol @@matchAll. The String.prototype.matchAll() method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace",
  "markdown": "# Symbol.replace - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.replace`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@replace`. The [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) methods look up this symbol on their first argument for the method that replaces substrings matched by the current object.\n\nFor more information, see [`RegExp.prototype[@@replace]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace), [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), and [`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@replace`.\n\n| Property attributes of `Symbol.replace` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [Using Symbol.replace](#using_symbol.replace)\n\n```\nclass CustomReplacer {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.replace](string) {\n    return string.replace(this.value, \"#!@?\");\n  }\n}\n\nconsole.log(\"football\".replace(new CustomReplacer(\"foo\"))); // \"#!@?tball\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.replace](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.replace) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.replace - JavaScript | MDN",
  "description": "The Symbol.replace static data property represents the well-known symbol @@replace. The String.prototype.replace() and String.prototype.replaceAll() methods look up this symbol on their first argument for the method that replaces substrings matched by the current object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number",
  "markdown": "# Number() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Number()`** constructor creates [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) objects. When called as a function, it returns primitive values of type Number.\n\n## [Syntax](#syntax)\n\n```\nnew Number(value)\nNumber(value)\n```\n\n**Note:** `Number()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe numeric value of the object being created.\n\n### [Return value](#return_value)\n\nWhen `Number()` is called as a function (without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new)), it returns `value` [coerced to a number primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Specially, [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values are converted to numbers instead of throwing. If `value` is absent, it becomes `0`.\n\nWhen `Number()` is called as a constructor (with `new`), it uses the coercion process above and returns a wrapping [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object, which is **not** a primitive.\n\n**Warning:** You should rarely find yourself using `Number` as a constructor.\n\n## [Examples](#examples)\n\n### [Creating Number objects](#creating_number_objects)\n\n```\nconst a = new Number(\"123\"); // a === 123 is false\nconst b = Number(\"123\"); // b === 123 is true\na instanceof Number; // is true\nb instanceof Number; // is false\ntypeof a; // \"object\"\ntypeof b; // \"number\"\n```\n\n### [Using Number() to convert a BigInt to a number](#using_number_to_convert_a_bigint_to_a_number)\n\n`Number()` is the only case where a BigInt can be converted to a number without throwing, because it's very explicit.\n\n```\n+1n; // TypeError: Cannot convert a BigInt value to a number\n0 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nNote that this may result in loss of precision, if the BigInt is too large to be [safely represented](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\n\n```\nBigInt(Number(2n ** 54n + 1n)) === 2n ** 54n + 1n; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number-constructor](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Number() constructor - JavaScript | MDN",
  "description": "The Number() constructor creates Number objects. When called as a function, it returns primitive values of type Number.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length",
  "markdown": "# String: length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`length`** data property of a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) value contains the length of the string in UTF-16 code units.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nA non-negative integer.\n\n| Property attributes of `String: length` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThis property returns the number of code units in the string. JavaScript uses [UTF-16](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) encoding, where each Unicode character may be encoded as one or two code units, so it's possible for the value returned by `length` to not match the actual number of Unicode characters in the string. For common scripts like Latin, Cyrillic, wellknown CJK characters, etc., this should not be an issue, but if you are working with certain scripts, such as emojis, [mathematical symbols](https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols), or obscure Chinese characters, you may need to account for the difference between code units and characters.\n\nThe language specification requires strings to have a maximum length of 253 - 1 elements, which is the upper limit for [precise integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). However, a string with this length needs 16384TiB of storage, which cannot fit in any reasonable device's memory, so implementations tend to lower the threshold, which allows the string's length to be conveniently stored in a 32-bit integer.\n\n*   In V8 (used by Chrome and Node), the maximum length is 229 - 24 (~1GiB). On 32-bit systems, the maximum length is 228 - 16 (~512MiB).\n*   In Firefox, the maximum length is 230 - 2 (~2GiB). Before Firefox 65, the maximum length was 228 - 1 (~512MiB).\n*   In Safari, the maximum length is 231 - 1 (~4GiB).\n\nIf you are working with large strings in other encodings (such as UTF-8 files or blobs), note that when you load the data into a JS string, the encoding always becomes UTF-16. The size of the string may be different from the size of the source file.\n\n```\nconst str1 = \"a\".repeat(2 ** 29 - 24); // Success\nconst str2 = \"a\".repeat(2 ** 29 - 23); // RangeError: Invalid string length\n\nconst buffer = new Uint8Array(2 ** 29 - 24).fill(\"a\".codePointAt(0)); // This buffer is 512MiB in size\nconst str = new TextDecoder().decode(buffer); // This string is 1GiB in size\n```\n\nFor an empty string, `length` is 0.\n\nThe static property `String.length` is unrelated to the length of strings. It's the [arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) of the `String` function (loosely, the number of formal parameters it has), which is 1.\n\nSince `length` counts code units instead of characters, if you want to get the number of characters, you can first split the string with its [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator), which iterates by characters:\n\n```\nfunction getCharacterLength(str) {\n  // The string iterator that is used here iterates over characters,\n  // not mere code units\n  return [...str].length;\n}\n\nconsole.log(getCharacterLength(\"A\\uD87E\\uDC04Z\")); // 3\n```\n\nIf you want to count characters by _grapheme clusters_, use [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter). You can first pass the string you want to split to the [`segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment) method, and then iterate over the returned `Segments` object to get the length:\n\n```\nfunction getGraphemeCount(str) {\n  const segmenter = new Intl.Segmenter(\"en-US\", { granularity: \"grapheme\" });\n  // The Segments object iterator that is used here iterates over characters in grapheme clusters,\n  // which may consist of multiple Unicode characters\n  return [...segmenter.segment(str)].length;\n}\n\nconsole.log(getGraphemeCount(\"👨‍👩‍👧‍👧\")); // 1\n```\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\nconst x = \"Mozilla\";\nconst empty = \"\";\n\nconsole.log(`${x} is ${x.length} code units long`);\n// Mozilla is 7 code units long\n\nconsole.log(`The empty string has a length of ${empty.length}`);\n// The empty string has a length of 0\n```\n\n### [Strings with length not equal to the number of characters](#strings_with_length_not_equal_to_the_number_of_characters)\n\n```\nconst emoji = \"😄\";\nconsole.log(emoji.length); // 2\nconsole.log([...emoji].length); // 1\nconst adlam = \"𞤲𞥋𞤣𞤫\";\nconsole.log(adlam.length); // 8\nconsole.log([...adlam].length); // 4\nconst formula = \"∀𝑥∈ℝ,𝑥²≥0\";\nconsole.log(formula.length); // 11\nconsole.log([...formula].length); // 9\n```\n\n### [Assigning to length](#assigning_to_length)\n\nBecause string is a primitive, attempting to assign a value to a string's `length` property has no observable effect, and will throw in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```\nconst myString = \"bluebells\";\n\nmyString.length = 4;\nconsole.log(myString); // \"bluebells\"\nconsole.log(myString.length); // 9\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-properties-of-string-instances-length](https://tc39.es/ecma262/multipage/text-processing.html#sec-properties-of-string-instances-length) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String: length - JavaScript | MDN",
  "description": "The length data property of a String value contains the length of the string in UTF-16 code units.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",
  "markdown": "# Set.prototype.clear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`clear()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances removes all elements from this set.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using the clear() method](#using_the_clear_method)\n\n```\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(\"foo\");\n\nconsole.log(mySet.size); // 2\nconsole.log(mySet.has(\"foo\")); // true\n\nmySet.clear();\n\nconsole.log(mySet.size); // 0\nconsole.log(mySet.has(\"foo\")); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.clear](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.clear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.clear() - JavaScript | MDN",
  "description": "The clear() method of Set instances removes all elements from this set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species",
  "markdown": "# Set\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Set[@@species]`** static accessor property is an unused accessor property specifying how to copy `Set` objects.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `Set` instances.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `Set` objects. Subclass constructors may override it to change the constructor assignment.\n\n**Note:** This property is currently unused by all `Set` methods.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `Set` constructor for `Set`.\n\n```\nSet[Symbol.species]; // function Set()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `Set` subclass, such as `MySet`, the `MySet` species is the `MySet` constructor. However, you might want to overwrite this, in order to return parent `Set` objects in your derived class methods:\n\n```\nclass MySet extends Set {\n  // Overwrite MySet species to the parent Set constructor\n  static get [Symbol.species]() {\n    return Set;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-set-@@species](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-get-set-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set[@@species] - JavaScript | MDN",
  "description": "The Set[@@species] static accessor property is an unused accessor property specifying how to copy Set objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",
  "markdown": "# Set.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`delete()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances removes a specified value from this set, if it is in the set.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsetInstance.delete(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to remove from `Set`.\n\n### [Return value](#return_value)\n\nReturns `true` if `value` was already in `Set`; otherwise `false`.\n\n## [Examples](#examples)\n\n### [Using the delete() method](#using_the_delete_method)\n\n```\nconst mySet = new Set();\nmySet.add(\"foo\");\n\nconsole.log(mySet.delete(\"bar\")); // false; no \"bar\" element found to be deleted.\nconsole.log(mySet.delete(\"foo\")); // true; successfully removed.\n\nconsole.log(mySet.has(\"foo\")); // false; the \"foo\" element is no longer present.\n```\n\n### [Deleting an object from a set](#deleting_an_object_from_a_set)\n\nBecause objects are compared by reference, you have to delete them by checking individual properties if you don't have a reference to the original object.\n\n```\nconst setObj = new Set(); // Create a new set.\n\nsetObj.add({ x: 10, y: 20 }); // Add object in the set.\n\nsetObj.add({ x: 20, y: 30 }); // Add object in the set.\n\n// Delete any point with `x > 10`.\nsetObj.forEach((point) => {\n  if (point.x > 10) {\n    setObj.delete(point);\n  }\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.delete() - JavaScript | MDN",
  "description": "The delete() method of Set instances removes a specified value from this set, if it is in the set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add",
  "markdown": "# Set.prototype.add() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`add()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value of the element to add to the `Set` object.\n\n### [Return value](#return_value)\n\nThe `Set` object with added value.\n\n## [Examples](#examples)\n\n### [Using the add() method](#using_the_add_method)\n\n```\nconst mySet = new Set();\n\nmySet.add(1);\nmySet.add(5).add(\"some text\"); // chainable\n\nconsole.log(mySet);\n// Set [1, 5, \"some text\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.add](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.add) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.add() - JavaScript | MDN",
  "description": "The add() method of Set instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set",
  "markdown": "# Set() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Set()`** constructor creates [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Set()\nnew Set(iterable)\n```\n\n**Note:** `Set()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable) Optional\n\nIf an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) is passed, all of its elements will be added to the new `Set`.\n\nIf you don't specify this parameter, or its value is `null`, the new `Set` is empty.\n\n### [Return value](#return_value)\n\nA new `Set` object.\n\n## [Examples](#examples)\n\n### [Using the `Set` object](#using_the_set_object)\n\n```\nconst mySet = new Set();\n\nmySet.add(1); // Set [ 1 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add(\"some text\"); // Set [ 1, 5, 'some text' ]\nconst o = { a: 1, b: 2 };\nmySet.add(o);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set() constructor - JavaScript | MDN",
  "description": "The Set() constructor creates Set objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator",
  "markdown": "# Set.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`[@@iterator]()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Set` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [set iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the values of the set in insertion order.\n\nThe initial value of this property is the same function object as the initial value of the [`Set.prototype.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) property.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Set.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the values of the set.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Set` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst mySet = new Set();\nmySet.add(\"0\");\nmySet.add(1);\nmySet.add({});\n\nfor (const v of mySet) {\n  console.log(v);\n}\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst mySet = new Set();\nmySet.add(\"0\");\nmySet.add(1);\nmySet.add({});\n\nconst setIter = mySet[Symbol.iterator]();\n\nconsole.log(setIter.next().value); // \"0\"\nconsole.log(setIter.next().value); // 1\nconsole.log(setIter.next().value); // {}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype-@@iterator](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of Set instances implements the iterable protocol and allows Set objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a set iterator object that yields the values of the set in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/difference",
  "markdown": "# Set.prototype.difference() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`difference()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a new set containing elements in this set but not in the given set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\nA new [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object containing elements in this set but not in the `other` set.\n\n## [Description](#description)\n\nIn mathematical notation, _difference_ is defined as:\n\nA ∖ B \\= { x ∊ A ∣ x ∉ B } A\\\\setminus B = {x\\\\in A\\\\mid x\\\\notin B}\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The difference of A and B is the part of A that is not overlapping B.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/difference/diagram.svg)\n\n`difference()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n*   If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this` that are not seen in `other`.\n*   Otherwise, it iterates over the elements in `this`, and constructs a new set with all elements `e` in `this` that cause `other.has(e)` to return a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value.\n\nThe order of elements in the returned set is the same as in `this`.\n\n## [Examples](#examples)\n\n### [Using difference()](#using_difference)\n\nThe following example computes the difference between the set of odd numbers (<10) and the set of perfect squares (<10). The result is the set of odd numbers that are not perfect squares.\n\n```\nconst odds = new Set([1, 3, 5, 7, 9]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(odds.difference(squares)); // Set(3) { 3, 5, 7 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.difference](https://tc39.es/proposal-set-methods/#sec-set.prototype.difference) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.difference() - JavaScript | MDN",
  "description": "The difference() method of Set instances takes a set and returns a new set containing elements in this set but not in the given set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",
  "markdown": "# Set.prototype.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`entries()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances returns a new _[set iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains **an array of `[value, value]`** for each element in this set, in insertion order. For `Set` objects there is no `key` like in `Map` objects. However, to keep the API similar to the `Map` object, each _entry_ has the same value for its _key_ and _value_ here, so that an array `[value, value]` is returned.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using entries()](#using_entries)\n\n```\nconst mySet = new Set();\nmySet.add(\"foobar\");\nmySet.add(1);\nmySet.add(\"baz\");\n\nconst setIter = mySet.entries();\n\nconsole.log(setIter.next().value); // [\"foobar\", \"foobar\"]\nconsole.log(setIter.next().value); // [1, 1]\nconsole.log(setIter.next().value); // [\"baz\", \"baz\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.entries](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.entries() - JavaScript | MDN",
  "description": "The entries() method of Set instances returns a new set iterator object that contains an array of [value, value] for each element in this set, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has",
  "markdown": "# Set.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`has()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances returns a boolean indicating whether an element with the specified value exists in this set or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to test for presence in the `Set` object.\n\n### [Return value](#return_value)\n\nReturns `true` if an element with the specified value exists in the `Set` object; otherwise `false`.\n\n## [Examples](#examples)\n\n### [Using the has() method](#using_the_has_method)\n\n```\nconst mySet = new Set();\nmySet.add(\"foo\");\n\nconsole.log(mySet.has(\"foo\")); // true\nconsole.log(mySet.has(\"bar\")); // false\n\nconst set1 = new Set();\nconst obj1 = { key1: 1 };\nset1.add(obj1);\n\nconsole.log(set1.has(obj1)); // true\nconsole.log(set1.has({ key1: 1 })); // false, because they are different object references\nconsole.log(set1.add({ key1: 1 })); // now set1 contains 2 entries\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.has() - JavaScript | MDN",
  "description": "The has() method of Set instances returns a boolean indicating whether an\n  element with the specified value exists in this set or not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",
  "markdown": "# Set.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`forEach()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances executes a provided function once for each value in this set, in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callback`](#callback)\n\nA function to execute for each entry in the set. The function is called with the following arguments:\n\n[`value`](#value)\n\nValue of each iteration.\n\n[`key`](#key)\n\nKey of each iteration. This is always the same as `value`.\n\n[`set`](#set)\n\nThe set being iterated.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nThe `forEach()` method executes the provided `callback` once for each value which actually exists in the `Set` object. It is not invoked for values which have been deleted. However, it is executed for values which are present but have the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n*   the **element value**\n*   the **element key**\n*   the **`Set` object being traversed**\n\nThere are no keys in `Set` objects, however, so the first two arguments are both **values** contained in the [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set). This is to make it consistent with other `forEach()` methods for [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach) and [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\nIf a `thisArg` parameter is provided to `forEach()`, it will be passed to `callback` when invoked, for use as its `this` value. Otherwise, the value `undefined` will be passed for use as its `this` value. The `this` value ultimately observable by `callback` is determined according to [the usual rules for determining the `this` seen by a function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nEach value is visited once, except in the case when it was deleted and re-added before `forEach()` has finished. `callback` is not invoked for values deleted before being visited. New values added before `forEach()` has finished will be visited.\n\n`forEach()` executes the `callback` function once for each element in the `Set` object; it does not return a value.\n\n## [Examples](#examples)\n\n### [Logging the contents of a Set object](#logging_the_contents_of_a_set_object)\n\nThe following code logs a line for each element in a `Set` object:\n\n```\nfunction logSetElements(value1, value2, set) {\n  console.log(`s[${value1}] = ${value2}`);\n}\n\nnew Set([\"foo\", \"bar\", undefined]).forEach(logSetElements);\n\n// Logs:\n// \"s[foo] = foo\"\n// \"s[bar] = bar\"\n// \"s[undefined] = undefined\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.foreach](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.forEach() - JavaScript | MDN",
  "description": "The forEach() method of Set instances executes a provided function once\n  for each value in this set, in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/intersection",
  "markdown": "# Set.prototype.intersection() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`intersection()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a new set containing elements in both this set and the given set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\nA new [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object containing elements in both this set and the `other` set.\n\n## [Description](#description)\n\nIn mathematical notation, _intersection_ is defined as:\n\nA ∩ B \\= { x ∊ A ∣ x ∊ B } A\\\\cap B = {x\\\\in A\\\\mid x\\\\in B}\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The intersection of A and B is the part where they overlap.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/intersection/diagram.svg)\n\n`intersection()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n*   If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements produced that are also present in `this`.\n*   Otherwise, it iterates over the elements in `this`, and constructs a new set with all elements `e` in `this` that cause `other.has(e)` to return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value.\n\nBecause of this implementation, the efficiency of `intersection()` mostly depends on the size of the smaller set between `this` and `other` (assuming sets can be accessed in sublinear time). The order of elements in the returned set is the same as that of the smaller of `this` and `other`.\n\n## [Examples](#examples)\n\n### [Using intersection()](#using_intersection)\n\nThe following example computes the intersection between the set of odd numbers (<10) and the set of perfect squares (<10). The result is the set of odd numbers that are perfect squares.\n\n```\nconst odds = new Set([1, 3, 5, 7, 9]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(odds.intersection(squares)); // Set(2) { 1, 9 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.intersection](https://tc39.es/proposal-set-methods/#sec-set.prototype.intersection) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.intersection() - JavaScript | MDN",
  "description": "The intersection() method of Set instances takes a set and returns a new set containing elements in both this set and the given set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf",
  "markdown": "# Set.prototype.isSubsetOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`isSubsetOf()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a boolean indicating if all elements of this set are in the given set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\n`true` if all elements in this set are also in the `other` set, and `false` otherwise.\n\n## [Description](#description)\n\nIn mathematical notation, _subset_ is defined as:\n\nA ⊆ B ⇔ ∀ x ∊ A , x ∊ B A\\\\subseteq B \\\\Leftrightarrow \\\\forall x\\\\in A,,x\\\\in B\n\nAnd using Venn diagram:\n\n![A Venn diragram with two circles. A is a subset of B because A is completely contained in B.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf/diagram.svg)\n\n**Note:** The _subset_ relationship is not _proper subset_, which means `isSubsetOf()` returns `true` if `this` and `other` contain the same elements.\n\n`isSubsetOf()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n*   If there are more elements in `this` than `other.size`, then it directly returns `false`.\n*   Otherwise, it iterates over the elements in `this`, and returns `false` if any element `e` in `this` causes `other.has(e)` to return a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value. Otherwise, it returns `true`.\n\n## [Examples](#examples)\n\n### [Using isSubsetOf()](#using_issubsetof)\n\nThe set of multiples of 4 (<20) is a subset of even numbers (<20):\n\n```\nconst fours = new Set([4, 8, 12, 16]);\nconst evens = new Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);\nconsole.log(fours.isSubsetOf(evens)); // true\n```\n\nThe set of prime numbers (<20) is not a subset of all odd numbers (<20), because 2 is prime but not odd:\n\n```\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst odds = new Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);\nconsole.log(primes.isSubsetOf(odds)); // false\n```\n\nEquivalent sets are subsets of each other:\n\n```\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([1, 2, 3]);\nconsole.log(set1.isSubsetOf(set2)); // true\nconsole.log(set2.isSubsetOf(set1)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.isSubsetOf](https://tc39.es/proposal-set-methods/#sec-set.prototype.isSubsetOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.isSubsetOf() - JavaScript | MDN",
  "description": "The isSubsetOf() method of Set instances takes a set and returns a boolean indicating if all elements of this set are in the given set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf",
  "markdown": "# Set.prototype.isSupersetOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`isSupersetOf()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a boolean indicating if all elements of the given set are in this set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\n`true` if all elements in the `other` set are also in this set, and `false` otherwise.\n\n## [Description](#description)\n\nIn mathematical notation, _superset_ is defined as:\n\nA ⊇ B ⇔ ∀ x ∊ B , x ∊ A A\\\\supseteq B \\\\Leftrightarrow \\\\forall x\\\\in B,,x\\\\in A\n\nAnd using Venn diagram:\n\n![A Venn diagram with two circles. A is a superset of B because B is completely contained in A.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf/diagram.svg)\n\n**Note:** The _superset_ relationship is not _proper superset_, which means `isSupersetOf()` returns `true` if `this` and `other` contain the same elements.\n\n`isSupersetOf()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n*   If there are fewer elements in `this` than `other.size`, then it directly returns `false`.\n*   Otherwise, it iterates over `other` by calling its `keys()` method, and if any element in `other` is not present in `this`, it returns `false` (and closes the `keys()` iterator by calling its `return()` method). Otherwise, it returns `true`.\n\n## [Examples](#examples)\n\n### [Using isSupersetOf()](#using_issupersetof)\n\nThe set of even numbers (<20) is a superset of multiples of 4 (<20):\n\n```\nconst evens = new Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);\nconst fours = new Set([4, 8, 12, 16]);\nconsole.log(evens.isSupersetOf(fours)); // true\n```\n\nThe set of all odd numbers (<20) is not a superset of prime numbers (<20), because 2 is prime but not odd:\n\n```\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst odds = new Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);\nconsole.log(odds.isSupersetOf(primes)); // false\n```\n\nEquivalent sets are supersets of each other:\n\n```\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([1, 2, 3]);\nconsole.log(set1.isSupersetOf(set2)); // true\nconsole.log(set2.isSupersetOf(set1)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.isSupersetOf](https://tc39.es/proposal-set-methods/#sec-set.prototype.isSupersetOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.isSupersetOf() - JavaScript | MDN",
  "description": "The isSupersetOf() method of Set instances takes a set and returns a boolean indicating if all elements of the given set are in this set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom",
  "markdown": "# Set.prototype.isDisjointFrom() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`isDisjointFrom()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\n`true` if this set has no elements in common with the `other` set, and `false` otherwise.\n\n## [Description](#description)\n\nTwo sets are _disjoint_ if they have no elements in common. In mathematical notation:\n\nA  is disjoint from  B ⇔ A ∩ B \\= ∅ A\\\\text{ is disjoint from }B \\\\Leftrightarrow A\\\\cap B = \\\\empty\n\nAnd using Venn diagram:\n\n![A Venn diagram with two circles. A and B are disjoint because the circles have no region of overlap.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom/diagram.svg)\n\n`isDisjointFrom()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n*   If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and if any element in `other` is present in `this`, it returns `false` (and closes the `keys()` iterator by calling its `return()` method). Otherwise, it returns `true`.\n*   Otherwise, it iterates over the elements in `this`, and returns `false` if any element `e` in `this` causes `other.has(e)` to return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value. Otherwise, it returns `true`.\n\nBecause of this implementation, the efficiency of `isDisjointFrom()` mostly depends on the size of the smaller set between `this` and `other` (assuming sets can be accessed in sublinear time).\n\n## [Examples](#examples)\n\n### [Using isDisjointFrom()](#using_isdisjointfrom)\n\nThe set of perfect squares (<20) is disjoint from the set of prime numbers (<20), because a perfect square is by definition decomposable into the product of two integers, while 1 is also not considered a prime number:\n\n```\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst squares = new Set([1, 4, 9, 16]);\nconsole.log(primes.isDisjointFrom(squares)); // true\n```\n\nThe set of perfect squares (<20) is not disjoint from the set of composite numbers (<20), because all non-1 perfect squares are by definition composite numbers:\n\n```\nconst composites = new Set([4, 6, 8, 9, 10, 12, 14, 15, 16, 18]);\nconst squares = new Set([1, 4, 9, 16]);\nconsole.log(composites.isDisjointFrom(squares)); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.isDisjointFrom](https://tc39.es/proposal-set-methods/#sec-set.prototype.isDisjointFrom) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.isDisjointFrom() - JavaScript | MDN",
  "description": "The isDisjointFrom() method of Set instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys",
  "markdown": "# Set.prototype.keys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`keys()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances is an alias for the [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) method.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using keys()](#using_keys)\n\nThe `keys()` method is exactly equivalent to the [`values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) method.\n\n```\nconst mySet = new Set();\nmySet.add(\"foo\");\nmySet.add(\"bar\");\nmySet.add(\"baz\");\n\nconst setIter = mySet.keys();\n\nconsole.log(setIter.next().value); // \"foo\"\nconsole.log(setIter.next().value); // \"bar\"\nconsole.log(setIter.next().value); // \"baz\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.keys](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.keys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.keys() - JavaScript | MDN",
  "description": "The keys() method of Set instances is an alias for the values() method.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference",
  "markdown": "# Set.prototype.symmetricDifference() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`symmetricDifference()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.\n\n## [Syntax](#syntax)\n\n```\nsymmetricDifference(other)\n```\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\nA new [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object containing elements which are in either this set or the `other` set, but not in both.\n\n## [Description](#description)\n\nIn mathematical notation, _symmetric difference_ is defined as:\n\nA ⊖ B \\= ( A ∖ B ) ∪ ( B ∖ A ) A\\\\ominus B = (A\\\\setminus B)\\\\cup(B\\\\setminus A)\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either circle but not both.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference/diagram.svg)\n\n`symmetricDifference()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this` that are not seen in `other`, and all elements in `other` that are not seen in `this`.\n\nThe order of elements in the returned set is first those in `this` followed by those in `other`.\n\n## [Examples](#examples)\n\n### [Using symmetricDifference()](#using_symmetricdifference)\n\nThe following example computes the symmetric difference between the set of even numbers (<10) and the set of perfect squares (<10). The result is the set of numbers that are either even or a perfect square, but not both.\n\n```\nconst evens = new Set([2, 4, 6, 8]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(evens.symmetricDifference(squares)); // Set(5) { 2, 6, 8, 1, 9 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.symmetricDifference](https://tc39.es/proposal-set-methods/#sec-set.prototype.symmetricDifference) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.symmetricDifference() - JavaScript | MDN",
  "description": "The symmetricDifference() method of Set instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union",
  "markdown": "# Set.prototype.union() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline 2024\n\nNewly available\n\nThe **`union()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`other`](#other)\n\nA [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object, or [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### [Return value](#return_value)\n\nA new [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object containing elements which are in either or both of this set and the `other` set.\n\n## [Description](#description)\n\nIn mathematical notation, _union_ is defined as:\n\nA ∪ B \\= { x ∣ x ∊ A  or  x ∊ B } A\\\\cup B = {x\\\\midx\\\\in A\\\\text{ or }x\\\\in B}\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either or both circles.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union/diagram.svg)\n\n`union()` accepts [set-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to be an actual [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this`, followed by all elements in `other` that are not present in `this`.\n\nThe order of elements in the returned set is first those in `this` followed by those in `other`.\n\n## [Examples](#examples)\n\n### [Using union()](#using_union)\n\nThe following example computes the union between the set of even numbers (<10) and the set of perfect squares (<10). The result is the set of numbers that are either even or a perfect square, or both.\n\n```\nconst evens = new Set([2, 4, 6, 8]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(evens.union(squares)); // Set(6) { 2, 4, 6, 8, 1, 9 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Set methods  <br>\\# sec-set.prototype.union](https://tc39.es/proposal-set-methods/#sec-set.prototype.union) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.union() - JavaScript | MDN",
  "description": "The union() method of Set instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values",
  "markdown": "# Set.prototype.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`values()`** method of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances returns a new _[set iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the values for each element in this set in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using values()](#using_values)\n\n```\nconst mySet = new Set();\nmySet.add(\"foo\");\nmySet.add(\"bar\");\nmySet.add(\"baz\");\n\nconst setIter = mySet.values();\n\nconsole.log(setIter.next().value); // \"foo\"\nconsole.log(setIter.next().value); // \"bar\"\nconsole.log(setIter.next().value); // \"baz\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-set.prototype.values](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set.prototype.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.values() - JavaScript | MDN",
  "description": "The values() method of Set instances returns a new set iterator object that contains the values for each element in this set in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size",
  "markdown": "# Map.prototype.size - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`size`** accessor property of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns the number of elements in this map.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe value of `size` is an integer representing how many entries the `Map` object has. A set accessor function for `size` is `undefined`; you can not change this property.\n\n## [Examples](#examples)\n\n### [Using size](#using_size)\n\n```\nconst myMap = new Map();\nmyMap.set(\"a\", \"alpha\");\nmyMap.set(\"b\", \"beta\");\nmyMap.set(\"g\", \"gamma\");\n\nconsole.log(myMap.size); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-map.prototype.size](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-get-map.prototype.size) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.size - JavaScript | MDN",
  "description": "The size accessor property of Map instances returns the number of elements in this map.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has",
  "markdown": "# Map.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`has()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a boolean indicating whether an element with the specified key exists in this map or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to test for presence in the `Map` object.\n\n### [Return value](#return_value)\n\n`true` if an element with the specified key exists in the `Map` object; otherwise `false`.\n\n## [Examples](#examples)\n\n### [Using has()](#using_has)\n\n```\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.has(\"bar\")); // true\nconsole.log(myMap.has(\"baz\")); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.has() - JavaScript | MDN",
  "description": "The has() method of Map instances returns a boolean indicating whether an element with the\n  specified key exists in this map or not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match",
  "markdown": "# Symbol.match - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.match`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@match`. The [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be [treated as a regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\nFor more information, see [`RegExp.prototype[@@match]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) and [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@match`.\n\n| Property attributes of `Symbol.match` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThis function is also used to identify [if objects have the behavior of regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). For example, the methods [`String.prototype.startsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith), [`String.prototype.endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) and [`String.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes), check if their first argument is a regular expression and will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if they are. Now, if the `match` symbol is set to `false` (or a [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value except `undefined`), it indicates that the object is not intended to be used as a regular expression object.\n\n## [Examples](#examples)\n\n### [Marking a RegExp as not a regex](#marking_a_regexp_as_not_a_regex)\n\nThe following code will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError):\n\n```\n\"/bar/\".startsWith(/bar/);\n\n// Throws TypeError, as /bar/ is a regular expression\n// and Symbol.match is not modified.\n```\n\nHowever, if you set `Symbol.match` to `false`, the object will be considered as [not a regular expression object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). The methods `startsWith` and `endsWith` won't throw a `TypeError` as a consequence.\n\n```\nconst re = /foo/;\nre[Symbol.match] = false;\n\"/foo/\".startsWith(re); // true\n\"/baz/\".endsWith(re); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.match](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.match) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.match - JavaScript | MDN",
  "description": "The Symbol.match static data property represents the well-known symbol @@match. The String.prototype.match() method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be treated as a regex.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size",
  "markdown": "# Set.prototype.size - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`size`** accessor property of [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instances returns the number of (unique) elements in this set.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe value of `size` is an integer representing how many entries the `Set` object has. A set accessor function for `size` is `undefined`; you cannot change this property.\n\n## [Examples](#examples)\n\n### [Using size](#using_size)\n\n```\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(5);\nmySet.add(\"some text\");\n\nconsole.log(mySet.size); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-set.prototype.size](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-get-set.prototype.size) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Set.prototype.size - JavaScript | MDN",
  "description": "The size accessor property of Set instances returns the number of (unique) elements in this set.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys",
  "markdown": "# Map.prototype.keys() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`keys()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a new _[map iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each element in this map in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using keys()](#using_keys)\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.keys();\n\nconsole.log(mapIter.next().value); // \"0\"\nconsole.log(mapIter.next().value); // 1\nconsole.log(mapIter.next().value); // {}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.keys](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.keys) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.keys() - JavaScript | MDN",
  "description": "The keys() method of Map instances returns a new map iterator object that contains the keys for each element in this map in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed",
  "markdown": "# String.prototype.isWellFormed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`isWellFormed()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a boolean indicating whether this string contains any [lone surrogates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nReturns `true` if this string does not contain any lone surrogates, `false` otherwise.\n\n## [Description](#description)\n\nStrings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of _surrogate pairs_, which is introduced in detail in the [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) section.\n\n`isWellFormed()` allows you to test whether a string is well-formed (i.e. does not contain any lone surrogates). Compared to a custom implementation, `isWellFormed()` is more efficient, as engines can directly access the internal representation of strings. If you need to convert a string to a well-formed string, use the [`toWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed) method. `isWellFormed()` allows you to handle ill-formed strings differently from well-formed strings, such as throwing an error or marking it as invalid.\n\n## [Examples](#examples)\n\n### [Using isWellFormed()](#using_iswellformed)\n\n```\nconst strings = [\n  // Lone leading surrogate\n  \"ab\\uD800\",\n  \"ab\\uD800c\",\n  // Lone trailing surrogate\n  \"\\uDFFFab\",\n  \"c\\uDFFFab\",\n  // Well-formed\n  \"abc\",\n  \"ab\\uD83D\\uDE04c\",\n];\n\nfor (const str of strings) {\n  console.log(str.isWellFormed());\n}\n// Logs:\n// false\n// false\n// false\n// false\n// true\n// true\n```\n\n### [Avoiding errors in encodeURI()](#avoiding_errors_in_encodeuri)\n\n[`encodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) throws an error if the string passed is not well-formed. This can be avoided by using `isWellFormed()` to test the string before passing it to `encodeURI()`.\n\n```\nconst illFormed = \"https://example.com/search?q=\\uD800\";\n\ntry {\n  encodeURI(illFormed);\n} catch (e) {\n  console.log(e); // URIError: URI malformed\n}\n\nif (illFormed.isWellFormed()) {\n  console.log(encodeURI(illFormed));\n} else {\n  console.warn(\"Ill-formed strings encountered.\"); // Ill-formed strings encountered.\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.iswellformed](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.iswellformed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.isWellFormed() - JavaScript | MDN",
  "description": "The isWellFormed() method of String values returns a boolean indicating whether this string contains any lone surrogates.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed",
  "markdown": "# String.prototype.toWellFormed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toWellFormed()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a string where all [lone surrogates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) of this string are replaced with the Unicode replacement character U+FFFD.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If `str` [is well formed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed), a new string is still returned (essentially a copy of `str`).\n\n## [Description](#description)\n\nStrings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of _surrogate pairs_, which is introduced in detail in the [UTF-16 characters, Unicode code points, and grapheme clusters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) section.\n\n`toWellFormed()` iterates through the code units of this string, and replaces any lone surrogates with the [Unicode replacement character](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character) U+FFFD `�`. This ensures that the returned string is well-formed and can be used in functions that expect well-formed strings, such as [`encodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI). Compared to a custom implementation, `toWellFormed()` is more efficient, as engines can directly access the internal representation of strings.\n\nWhen ill-formed strings are used in certain contexts, such as [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder), they are automatically converted to well-formed strings using the same replacement character. When lone surrogates are rendered, they are also rendered as the replacement character (a diamond with a question mark inside).\n\n## [Examples](#examples)\n\n### [Using toWellFormed()](#using_towellformed)\n\n```\nconst strings = [\n  // Lone leading surrogate\n  \"ab\\uD800\",\n  \"ab\\uD800c\",\n  // Lone trailing surrogate\n  \"\\uDFFFab\",\n  \"c\\uDFFFab\",\n  // Well-formed\n  \"abc\",\n  \"ab\\uD83D\\uDE04c\",\n];\n\nfor (const str of strings) {\n  console.log(str.toWellFormed());\n}\n// Logs:\n// \"ab�\"\n// \"ab�c\"\n// \"�ab\"\n// \"c�ab\"\n// \"abc\"\n// \"ab😄c\"\n```\n\n### [Avoiding errors in encodeURI()](#avoiding_errors_in_encodeuri)\n\n[`encodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) throws an error if the string passed is not well-formed. This can be avoided by using `toWellFormed()` to convert the string to a well-formed string first.\n\n```\nconst illFormed = \"https://example.com/search?q=\\uD800\";\n\ntry {\n  encodeURI(illFormed);\n} catch (e) {\n  console.log(e); // URIError: URI malformed\n}\n\nconsole.log(encodeURI(illFormed.toWellFormed())); // \"https://example.com/search?q=%EF%BF%BD\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.towellformed](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.towellformed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.toWellFormed() - JavaScript | MDN",
  "description": "The toWellFormed() method of String values returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/@@species",
  "markdown": "# SharedArrayBuffer\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`SharedArrayBuffer[@@species]`** static accessor property returns the constructor used to construct return values from `SharedArrayBuffer` methods.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## [Syntax](#syntax)\n\n```\nSharedArrayBuffer[Symbol.species]\n```\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array buffer methods that create new array buffer.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `SharedArrayBuffer` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```\n// Hypothetical underlying implementation for illustration\nclass SharedArrayBuffer {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```\nclass SubArrayBuffer extends SharedArrayBuffer {}\nSubArrayBuffer[Symbol.species] === SharedArrayBuffer; // true\n```\n\nWhen calling array buffer methods that do not mutate the existing array but return a new array buffer instance (for example, [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice)), the array's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array buffer method.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `SharedArrayBuffer` constructor for `SharedArrayBuffer`.\n\n```\nSharedArrayBuffer[Symbol.species]; // function SharedArrayBuffer()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `SharedArrayBuffer` subclass, such as `MySharedArrayBuffer`, the `MySharedArrayBuffer` species is the `MySharedArrayBuffer` constructor. However, you might want to overwrite this, in order to return parent `SharedArrayBuffer` objects in your derived class methods:\n\n```\nclass MySharedArrayBuffer extends SharedArrayBuffer {\n  // Overwrite MySharedArrayBuffer species to the parent SharedArrayBuffer constructor\n  static get [Symbol.species]() {\n    return SharedArrayBuffer;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-sharedarraybuffer-@@species](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer[@@species] - JavaScript | MDN",
  "description": "The SharedArrayBuffer[@@species] static accessor property returns the constructor used to construct return values from SharedArrayBuffer methods.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength",
  "markdown": "# SharedArrayBuffer.prototype.byteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`byteLength`** accessor property of [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances returns the length (in bytes) of this `SharedArrayBuffer`.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed.\n\n## [Examples](#examples)\n\n### [Using byteLength](#using_bytelength)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nsab.byteLength; // 1024\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-sharedarraybuffer.prototype.bytelength](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-sharedarraybuffer.prototype.bytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer.prototype.byteLength - JavaScript | MDN",
  "description": "The byteLength accessor property of SharedArrayBuffer instances returns the length (in bytes) of this SharedArrayBuffer.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength",
  "markdown": "# SharedArrayBuffer.prototype.maxByteLength - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`maxByteLength`** accessor property of [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances returns the maximum length (in bytes) that this `SharedArrayBuffer` can be grown to.\n\n## [Description](#description)\n\nThe `maxByteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the shared array is constructed, set via the `maxByteLength` option of the [`SharedArrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer) constructor, and cannot be changed.\n\nIf this `SharedArrayBuffer` was constructed without specifying a `maxByteLength` value, this property returns a value equal to the value of the `SharedArrayBuffer`'s [`byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength).\n\n## [Examples](#examples)\n\n### [Using maxByteLength](#using_maxbytelength)\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then return its `maxByteLength`:\n\n```\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.maxByteLength; // 16\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-sharedarraybuffer.prototype.maxbytelength](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-sharedarraybuffer.prototype.maxbytelength) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer.prototype.maxByteLength - JavaScript | MDN",
  "description": "The maxByteLength accessor property of SharedArrayBuffer instances returns the maximum length (in bytes) that this SharedArrayBuffer can be grown to.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer",
  "markdown": "# SharedArrayBuffer() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Note:** The `SharedArrayBuffer` constructor may not always be globally available unless certain [security requirements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements) are met.\n\nThe **`SharedArrayBuffer()`** constructor creates [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew SharedArrayBuffer(length)\nnew SharedArrayBuffer(length, options)\n```\n\n**Note:** `SharedArrayBuffer()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`length`](#length)\n\nThe size, in bytes, of the array buffer to create.\n\n[`options`](#options) Optional\n\nAn object, which can contain the following properties:\n\n[`maxByteLength`](#maxbytelength) Optional\n\nThe maximum size, in bytes, that the shared array buffer can be resized to.\n\n### [Return value](#return_value)\n\nA new `SharedArrayBuffer` object of the specified size, with its [`maxByteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength) property set to the specified `maxByteLength` if one was specified. Its contents are initialized to 0.\n\n## [Examples](#examples)\n\n### [Always use the new operator to create a SharedArrayBuffer](#always_use_the_new_operator_to_create_a_sharedarraybuffer)\n\n`SharedArrayBuffer` constructors are required to be constructed with a [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. Calling a `SharedArrayBuffer` constructor as a function without `new` will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n```\nconst sab = SharedArrayBuffer(1024);\n// TypeError: calling a builtin SharedArrayBuffer constructor\n// without new is forbidden\n```\n\n```\nconst sab = new SharedArrayBuffer(1024);\n```\n\n### [Growing a growable SharedArrayBuffer](#growing_a_growable_sharedarraybuffer)\n\nIn this example, we create an 8-byte buffer that is growable to a max length of 16 bytes, then [`grow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow) it to 12 bytes:\n\n```\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.grow(12);\n```\n\n**Note:** It is recommended that `maxByteLength` is set to the smallest value possible for your use case. It should never exceed `1073741824` (1GB), to reduce the risk of out-of-memory errors.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-sharedarraybuffer-constructor](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer() constructor - JavaScript | MDN",
  "description": "The SharedArrayBuffer() constructor creates SharedArrayBuffer objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice",
  "markdown": "# SharedArrayBuffer.prototype.slice() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`slice()`** method of [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances returns a new `SharedArrayBuffer` whose contents are a copy of this `SharedArrayBuffer`'s bytes from `start`, inclusive, up to `end`, exclusive. If either `start` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nslice()\nslice(start)\nslice(start, end)\n```\n\n### [Parameters](#parameters)\n\n[`start`](#start) Optional\n\nZero-based index at which to start extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n*   Negative index counts back from the end of the buffer — if `-buffer.length <= start < 0`, `start + buffer.length` is used.\n*   If `start < -buffer.length` or `start` is omitted, `0` is used.\n*   If `start >= buffer.length`, an empty buffer is returned.\n\n[`end`](#end) Optional\n\nZero-based index at which to end extraction, [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n\n*   Negative index counts back from the end of the buffer — if `-buffer.length <= end < 0`, `end + buffer.length` is used.\n*   If `end < -buffer.length`, `0` is used.\n*   If `end >= buffer.length` or `end` is omitted, `buffer.length` is used, causing all elements until the end to be extracted.\n*   If `end` implies a position before or at the position that `start` implies, an empty buffer is returned.\n\n### [Return value](#return_value)\n\nA new [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) containing the extracted elements.\n\n## [Examples](#examples)\n\n### [Using slice()](#using_slice)\n\n```\nconst sab = new SharedArrayBuffer(1024);\nsab.slice(); // SharedArrayBuffer { byteLength: 1024 }\nsab.slice(2); // SharedArrayBuffer { byteLength: 1022 }\nsab.slice(-2); // SharedArrayBuffer { byteLength: 2 }\nsab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-sharedarraybuffer.prototype.slice](https://tc39.es/ecma262/multipage/structured-data.html#sec-sharedarraybuffer.prototype.slice) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer.prototype.slice() - JavaScript | MDN",
  "description": "The slice() method of SharedArrayBuffer instances returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from start, inclusive, up to end, exclusive. If either start or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array",
  "markdown": "# Float64Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Float64Array()`** constructor creates [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Float64Array()\nnew Float64Array(length)\nnew Float64Array(typedArray)\nnew Float64Array(object)\n\nnew Float64Array(buffer)\nnew Float64Array(buffer, byteOffset)\nnew Float64Array(buffer, byteOffset, length)\n```\n\n**Note:** `Float64Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Float64Array](#different_ways_to_create_a_float64array)\n\n```\n// From a length\nconst float64 = new Float64Array(2);\nfloat64[0] = 42;\nconsole.log(float64[0]); // 42\nconsole.log(float64.length); // 2\nconsole.log(float64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new Float64Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float64Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new Float64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float64FromIterable = new Float64Array(iterable);\nconsole.log(float64FromIterable);\n// Float64Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Float64Array() constructor - JavaScript | MDN",
  "description": "The Float64Array() constructor creates Float64Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable",
  "markdown": "# SharedArrayBuffer.prototype.growable - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Limited availability\n\nThe **`growable`** accessor property of [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances returns whether this `SharedArrayBuffer` can be grow or not.\n\n## [Description](#description)\n\nThe `growable` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed. If a `maxByteLength` option was set in the constructor, `growable` will return `true`; if not, it will return `false`.\n\n## [Examples](#examples)\n\n### [Using growable](#using_growable)\n\nIn this example, we create a 8-byte buffer that is growable to a max length of 16 bytes, then check its `growable` property, growing it if `growable` returns `true`:\n\n```\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.growable) {\n  console.log(\"SAB is growable!\");\n  buffer.grow(12);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-sharedarraybuffer.prototype.growable](https://tc39.es/ecma262/multipage/structured-data.html#sec-get-sharedarraybuffer.prototype.growable) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SharedArrayBuffer.prototype.growable - JavaScript | MDN",
  "description": "The growable accessor property of SharedArrayBuffer instances returns whether this SharedArrayBuffer can be grow or not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get",
  "markdown": "# Map.prototype.get() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`get()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a specified element from this map. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the `Map` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to return from the `Map` object.\n\n### [Return value](#return_value)\n\nThe element associated with the specified key, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if the key can't be found in the `Map` object.\n\n## [Examples](#examples)\n\n### [Using get()](#using_get)\n\n```\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.get(\"bar\")); // Returns \"foo\"\nconsole.log(myMap.get(\"baz\")); // Returns undefined\n```\n\n### [Using get() to retrieve a reference to an object](#using_get_to_retrieve_a_reference_to_an_object)\n\n```\nconst arr = [];\nconst myMap = new Map();\nmyMap.set(\"bar\", arr);\n\nmyMap.get(\"bar\").push(\"foo\");\n\nconsole.log(arr); // [\"foo\"]\nconsole.log(myMap.get(\"bar\")); // [\"foo\"]\n```\n\nNote that the map holding a reference to the original object effectively means the object cannot be garbage-collected, which may lead to unexpected memory issues. If you want the object stored in the map to have the same lifespan as the original one, consider using a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.get](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.get) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.get() - JavaScript | MDN",
  "description": "The get() method of Map instances returns a specified element from this map. If the\n  value that is associated to the provided key is an object, then you will get a\n  reference to that object and any change made to that object will effectively\n  modify it inside the Map object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive",
  "markdown": "# Symbol.prototype\\[@@toPrimitive\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@toPrimitive]()`** method of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values returns this symbol value.\n\n## [Syntax](#syntax)\n\n```\nsymbolValue[Symbol.toPrimitive](hint)\n```\n\n### [Parameters](#parameters)\n\n[`hint`](#hint)\n\nA string value indicating the primitive value to return. The value is ignored.\n\n### [Return value](#return_value)\n\nThe primitive value of the specified [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) object.\n\n## [Description](#description)\n\nThe `[@@toPrimitive]()` method of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) returns the primitive value of a Symbol object as a Symbol data type. The `hint` argument is not used.\n\nJavaScript calls the `[@@toPrimitive]()` method to convert an object to a primitive value. You rarely need to invoke the `[@@toPrimitive]()` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\n## [Examples](#examples)\n\n### [Using @@toPrimitive](#using_toprimitive)\n\n```\nconst sym = Symbol(\"example\");\nsym === sym[Symbol.toPrimitive](); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.prototype-@@toprimitive](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.prototype-@@toprimitive) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.prototype[@@toPrimitive]() - JavaScript | MDN",
  "description": "The [@@toPrimitive]() method of Symbol values returns this symbol value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/Iterator",
  "markdown": "# Iterator() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Iterator()`** constructor is intended to be used as the [superclass](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) of other classes that create iterators. It throws an error when constructed by itself.\n\n## [Syntax](#syntax)\n\n**Note:** `Iterator()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In addition, `Iterator()` cannot actually be constructed itself — it's usually implicitly constructed through [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) calls inside the constructor of a subclass.\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nWhen [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is the `Iterator` function itself, i.e. when the `Iterator` constructor itself is constructed.\n\n## [Description](#description)\n\n`Iterator` represents an _abstract class_ — a class that provides common utilities for its subclasses, but is not intended to be instantiated itself. It is the superclass of all other iterator classes, and is used to create subclasses that implement specific iteration algorithms — namely, all subclasses of `Iterator` must implement a `next()` method as required by the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol). Because `Iterator` doesn't actually provide the `next()` method, it doesn't make sense to construct an `Iterator` directly.\n\nYou can also use [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from) to create an `Iterator` instance from an existing iterable or iterator object.\n\n## [Examples](#examples)\n\n### [Subclassing Iterator](#subclassing_iterator)\n\nThe following example defines a custom data structure, `Range`, which allows iteration. The simplest way to make an object iterable is to provide an [`[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method in the form of a generator function:\n\n```\nclass Range {\n  #start;\n  #end;\n  #step;\n\n  constructor(start, end, step = 1) {\n    this.#start = start;\n    this.#end = end;\n    this.#step = step;\n  }\n\n  *[Symbol.iterator]() {\n    for (let value = this.#start; value <= this.#end; value += this.#step) {\n      yield value;\n    }\n  }\n}\n\nconst range = new Range(1, 5);\nfor (const num of range) {\n  console.log(num);\n}\n```\n\nThis works, but it isn't as nice as how built-in iterators work. There are two problems:\n\n*   The returned iterator inherits from [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator), which means modifications to `Generator.prototype` are going to affect the returned iterator, which is a leak of abstraction.\n*   The returned iterator does not inherit from a custom prototype, which makes it harder if we intend to add extra methods to the iterator.\n\nWe can mimic the implementation of built-in iterators, such as [map iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator), by subclassing `Iterator`. This enables us to define extra properties, such as [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag), while making the iterator helper methods available on the returned iterator.\n\n```\nclass Range {\n  #start;\n  #end;\n  #step;\n\n  constructor(start, end, step = 1) {\n    this.#start = start;\n    this.#end = end;\n    this.#step = step;\n  }\n\n  static #RangeIterator = class extends Iterator {\n    #cur;\n    #s;\n    #e;\n    constructor(range) {\n      super();\n      this.#cur = range.#start;\n      this.#s = range.#step;\n      this.#e = range.#end;\n    }\n    static {\n      Object.defineProperty(this.prototype, Symbol.toStringTag, {\n        value: \"Range Iterator\",\n        configurable: true,\n        enumerable: false,\n        writable: false,\n      });\n\n      // Avoid #RangeIterator from being accessible outside\n      delete this.prototype.constructor;\n    }\n    next() {\n      if (this.#cur > this.#e) {\n        return { value: undefined, done: true };\n      }\n      const res = { value: this.#cur, done: false };\n      this.#cur += this.#s;\n      return res;\n    }\n  };\n\n  [Symbol.iterator]() {\n    return new Range.#RangeIterator(this);\n  }\n}\n\nconst range = new Range(1, 5);\nfor (const num of range) {\n  console.log(num);\n}\n```\n\nThe subclassing pattern is useful if you want to create many custom iterators. If you have an existing iterable or iterator object which doesn't inherit from `Iterator`, and you just want to call iterator helper methods on it, you can use [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from) to create a one-time `Iterator` instance.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iterator-constructor](https://tc39.es/proposal-iterator-helpers/#sec-iterator-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator() constructor - JavaScript | MDN",
  "description": "The Iterator() constructor is intended to be used as the superclass of other classes that create iterators. It throws an error when constructed by itself.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from",
  "markdown": "# Iterator.from() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Iterator.from()`** static method creates a new [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) object from an iterator or iterable object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`object`](#object)\n\nAn object that implements the [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) protocol or the [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) protocol.\n\n### [Return value](#return_value)\n\nIf `object` is an iterable, its `@@iterator` method is called to obtain the iterator. Otherwise, `object` is assumed to be an iterator. If the iterator is already [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) (which means it has `Iterator.prototype` in its prototype chain), it is returned directly. Otherwise, a new [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) object is created that wraps the original iterator.\n\n## [Description](#description)\n\nThis method exists to convert custom iterators, probably exported by libraries, to [proper iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#proper_iterators). All iterator objects returned by `Iterator.from()` inherit from a common prototype object, which has the following methods:\n\n[`next()`](#next)\n\nCalls the underlying iterator's `next()` method and returns the result.\n\n[`return()`](#return)\n\nCalls the underlying iterator's `return()` method and returns the result, or returns `{ value: undefined, done: true }` if the underlying iterator doesn't have a `return()` method.\n\n## [Examples](#examples)\n\n### [Converting an iterable to a proper iterator](#converting_an_iterable_to_a_proper_iterator)\n\nBecause `obj` is already an iterable that returns a proper iterator when its `@@iterator` method is called, `Iterator.from(obj)` returns the same iterator.\n\n```\nconst iterator = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconst obj = {\n  [Symbol.iterator]() {\n    return iterator;\n  },\n};\n\nconst iterator2 = Iterator.from(obj);\nconsole.log(iterator2 === iterator); // true\n```\n\nBecause `obj2` is an iterable that returns a non-proper iterator when its `@@iterator` method is called, `Iterator.from(obj2)` returns a new iterator that wraps the original iterator.\n\n```\nconst iterator = {\n  current: 0,\n  next() {\n    return { value: this.current++, done: false };\n  },\n};\n\nconst obj2 = {\n  [Symbol.iterator]() {\n    return iterator;\n  },\n};\n\nconst iterator2 = Iterator.from(obj2);\nconsole.log(iterator2 === iterator); // false\nconsole.log(iterator2.next()); // { value: 0, done: false }\nconsole.log(iterator.next()); // { value: 1, done: false }\n```\n\n### [Converting an iterator to a proper iterator](#converting_an_iterator_to_a_proper_iterator)\n\nBecause `obj` is already a proper iterator, `Iterator.from(obj)` returns itself.\n\n```\nconst obj = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconst iterator = Iterator.from(obj);\nconsole.log(iterator === obj); // true\n```\n\nBecause `obj2` is a non-proper iterator, `Iterator.from(obj2)` returns a new iterator that wraps the original iterator.\n\n```\nconst obj2 = {\n  current: 0,\n  next() {\n    return { value: this.current++, done: false };\n  },\n};\n\nconst iterator = Iterator.from(obj2);\nconsole.log(iterator === obj2); // false\nconsole.log(iterator.next()); // { value: 0, done: false }\nconsole.log(obj2.next()); // { value: 1, done: false }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iterator.from](https://tc39.es/proposal-iterator-helpers/#sec-iterator.from) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.from() - JavaScript | MDN",
  "description": "The Iterator.from() static method creates a new Iterator object from an iterator or iterable object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator",
  "markdown": "# Iterator.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the iterator object itself.\n\n## [Syntax](#syntax)\n\n```\niterator[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the iterator object itself.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes built-in iterators [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst arrIterator = [1, 2, 3].values();\nfor (const value of arrIterator) {\n  console.log(value);\n}\n// Logs: 1, 2, 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%iteratorprototype%-@@iterator](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-%iteratorprototype%-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of Iterator instances implements the iterable protocol and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns the value of this, which is the iterator object itself.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/every",
  "markdown": "# Iterator.prototype.every() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`every()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances is similar to [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every): it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\n`true` if `callbackFn` returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value for every element. Otherwise, `false`.\n\n## [Description](#description)\n\n`every()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns `false` immediately if the callback function returns a falsy value. Otherwise, it iterates until the end of the iterator and returns `true`. If `every()` returns `false`, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `every()` returns `false` as soon as the first falsy value is found. If the `callbackFn` always returns a truthy value, the method never returns.\n\n## [Examples](#examples)\n\n### [Using every()](#using_every)\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().every(isEven)); // false\n\nconst isPositive = (x) => x > 0;\nconsole.log(fibonacci().take(10).every(isPositive)); // true\nconsole.log(fibonacci().every(isPositive)); // Never completes\n```\n\nCalling `every()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```\nconst seq = fibonacci();\nconsole.log(seq.every(isEven)); // false\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.every](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.every) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.every() - JavaScript | MDN",
  "description": "The every() method of Iterator instances is similar to Array.prototype.every(): it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter",
  "markdown": "# Iterator.prototype.filter() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`filter()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances returns a new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields only those elements of the iterator for which the provided callback function returns `true`.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to make the element yielded by the iterator helper, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\nA new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). Each time the iterator helper's `next()` method is called, it returns the next element in the iterator for which the callback function returns `true`. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n## [Description](#description)\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `filter()` allows you to iterate over only those elements that satisfy a given condition.\n\n## [Examples](#examples)\n\n### [Using filter()](#using_filter)\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then reads the first few terms that are even:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().filter((x) => x % 2 === 0);\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // 8\nconsole.log(seq.next().value); // 34\n```\n\n### [Using filter() with a for...of loop](#using_filter_with_a_for...of_loop)\n\n`filter()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop:\n\n```\nfor (const n of fibonacci().filter((x) => x % 2 === 0)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 2\n// 8\n// 34\n```\n\nThis is equivalent to:\n\n```\nfor (const n of fibonacci()) {\n  if (n % 2 !== 0) {\n    continue;\n  }\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.filter](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.filter) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.filter() - JavaScript | MDN",
  "description": "The filter() method of Iterator instances returns a new iterator helper that yields only those elements of the iterator for which the provided callback function returns true.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/forEach",
  "markdown": "# Iterator.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`forEach()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances is similar to [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach): it executes a provided function once for each element produced by the iterator.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. Its return value is discarded. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\n`forEach()` iterates the iterator and invokes the `callbackFn` function once for each element. Unlike most other iterator helper methods, it does not work well with infinite iterators, because it is not lazy.\n\n## [Examples](#examples)\n\n### [Using forEach()](#using_foreach)\n\n```\nnew Set([1, 2, 3]).values().forEach((v) => console.log(v));\n\n// Logs:\n// 1\n// 2\n// 3\n```\n\nThis is equivalent to:\n\n```\nfor (const v of new Set([1, 2, 3]).values()) {\n  console.log(v);\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.foreach](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.forEach() - JavaScript | MDN",
  "description": "The forEach() method of Iterator instances is similar to Array.prototype.forEach(): it executes a provided function once for each element produced by the iterator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop",
  "markdown": "# Iterator.prototype.drop() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`drop()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances returns a new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that skips the given number of elements at the start of this iterator.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`limit`](#limit)\n\nThe number of elements to drop from the start of the iteration.\n\n### [Return value](#return_value)\n\nA new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The first time the returned iterator helper's `next()` method is called, the current iterator is immediately advanced by `limit` elements, and then the next element (the `limit+1`\\-th element) is yielded. The iterator helper then yields the remaining elements one-by-one. If the current iterator has fewer than `limit` elements, the new iterator helper will be immediately completed the first time `next()` is called.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `limit` becomes [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) or negative when [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n## [Examples](#examples)\n\n### [Using drop()](#using_drop)\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, starting from the 3rd term by dropping the first two terms:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().drop(2);\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // 3\n```\n\nThis is equivalent to:\n\n```\nconst seq = fibonacci();\nseq.next();\nseq.next();\n```\n\n### [Using drop() with a for...of loop](#using_drop_with_a_for...of_loop)\n\n`drop()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop:\n\n```\nfor (const n of fibonacci().drop(2)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n// 21\n// 34\n```\n\n### [Combining drop() with take()](#combining_drop_with_take)\n\nYou can combine `drop()` with [`Iterator.prototype.take()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take) to get a slice of an iterator:\n\n```\nfor (const n of fibonacci().drop(2).take(5)) {\n  // Drops the first two elements, then takes the next five\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n\nfor (const n of fibonacci().take(5).drop(2)) {\n  // Takes the first five elements, then drops the first two\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n```\n\n### [Lower and upper bounds of drop count](#lower_and_upper_bounds_of_drop_count)\n\nWhen the `limit` is negative or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown:\n\n```\nfibonacci().drop(-1); // RangeError: -1 must be positive\nfibonacci().drop(undefined); // RangeError: undefined must be positive\n```\n\nWhen the `limit` is larger than the total number of elements the iterator can produce (such as [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)), the returned iterator helper will instantly drop all elements and then be completed the first time `next()` is called. If the current iterator is infinite, the returned iterator helper will never complete.\n\n```\nfibonacci().drop(Infinity).next(); // Never ends\nnew Set([1, 2, 3]).values().drop(Infinity).next(); // { value: undefined, done: true }\nnew Set([1, 2, 3]).values().drop(4).next(); // { value: undefined, done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.drop](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.drop) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.drop() - JavaScript | MDN",
  "description": "The drop() method of Iterator instances returns a new iterator helper that skips the given number of elements at the start of this iterator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap",
  "markdown": "# Iterator.prototype.flatMap() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`flatMap()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances returns a new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. It should return an iterator or iterable that yields elements to be yielded by `flatMap()`. Note that unlike [`Array.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), you cannot return single non-iterator/iterable values. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed in the array.\n\n[`index`](#index)\n\nThe index of the current element being processed in the array.\n\n### [Return value](#return_value)\n\nA new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The first time the iterator helper's `next()` method is called, it calls `callbackFn` on the first element produced by the underlying iterator, and the return value, which should be an iterator or iterable, is yielded one-by-one by the iterator helper (like [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)). The next element is fetched from the underlying iterator when the previous one returned by `callbackFn` is completed. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `callbackFn` returns a non-iterator/iterable value or a string primitive.\n\n## [Description](#description)\n\n`flatMap` accepts two kinds of return values from `callbackFn`: an iterator or iterable. They are handled in the same way as [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from): if the return value is iterable, the `@@iterator` method is called and the return value is used; otherwise, the return value is treated as an iterator and its `next()` method is called.\n\n```\n[1, 2, 3]\n  .values()\n  .flatMap((x) => {\n    let itDone = false;\n    const it = {\n      next() {\n        if (itDone) {\n          return { value: undefined, done: true };\n        }\n        itDone = true;\n        return { value: x, done: false };\n      },\n    };\n    switch (x) {\n      case 1:\n        // An iterable that's not an iterator\n        return { [Symbol.iterator]: () => it };\n      case 2:\n        // An iterator that's not an iterable\n        return it;\n      case 3:\n        // An iterable iterator is treated as an iterable\n        return {\n          ...it,\n          [Symbol.iterator]() {\n            console.log(\"@@iterator called\");\n            return it;\n          },\n        };\n    }\n  })\n  .toArray();\n// Logs \"@@iterator called\"\n// Returns [1, 2, 3]\n```\n\n## [Examples](#examples)\n\n### [Merging maps](#merging_maps)\n\nThe following example merges two [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects into one:\n\n```\nconst map1 = new Map([\n  [\"a\", 1],\n  [\"b\", 2],\n  [\"c\", 3],\n]);\nconst map2 = new Map([\n  [\"d\", 4],\n  [\"e\", 5],\n  [\"f\", 6],\n]);\n\nconst merged = new Map([map1, map2].values().flatMap((x) => x));\nconsole.log(merged.get(\"a\")); // 1\nconsole.log(merged.get(\"e\")); // 5\n```\n\nThis avoids creating any temporary copies of the map's content. Note that the array `[map1, map2]` must first be converted to an iterator (using [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)), because [`Array.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) only flattens arrays, not iterables.\n\n```\nnew Map([map1, map2].flatMap((x) => x)); // Map(1) {undefined => undefined}\n```\n\n### [Returning strings](#returning_strings)\n\nStrings are iterable, but `flatMap()` specifically rejects string primitives returned from `callbackFn`, this is because the behavior of iterating by code points is often not what you want.\n\n```\n[1, 2, 3]\n  .values()\n  .flatMap((x) => String(x))\n  .toArray(); // TypeError: Iterator.prototype.flatMap called on non-object\n```\n\nYou may want to wrap it in an array instead so the entire string is yielded as one:\n\n```\n[1, 2, 3]\n  .values()\n  .flatMap((x) => [String(x)])\n  .toArray(); // ['1', '2', '3']\n```\n\nOr, if the behavior of iterating by code points is intended, you can use [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from) to convert it to a proper iterator:\n\n```\n[1, 2, 3]\n  .values()\n  .flatMap((x) => Iterator.from(String(x * 10)))\n  .toArray();\n// ['1', '0', '2', '0', '3', '0']\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.flatmap](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.flatmap) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.flatMap() - JavaScript | MDN",
  "description": "The flatMap() method of Iterator instances returns a new iterator helper that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/find",
  "markdown": "# Iterator.prototype.find() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`find()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances is similar to [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find): it returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\nThe first element produced by the iterator that satisfies the provided testing function. Otherwise, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n## [Description](#description)\n\n`find()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns the element immediately if the callback function returns a truthy value. Otherwise, it iterates until the end of the iterator and returns `undefined`. If `find()` returns an element, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `find()` returns the first satisfying element as soon as it is found. If the `callbackFn` always returns a falsy value, the method never returns.\n\n## [Examples](#examples)\n\n### [Using find()](#using_find)\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().find(isEven)); // 2\n\nconst isNegative = (x) => x < 0;\nconsole.log(fibonacci().take(10).find(isNegative)); // undefined\nconsole.log(fibonacci().find(isNegative)); // Never completes\n```\n\nCalling `find()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```\nconst seq = fibonacci();\nconsole.log(seq.find(isEven)); // 2\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.find](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.find) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.find() - JavaScript | MDN",
  "description": "The find() method of Iterator instances is similar to Array.prototype.find(): it returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map",
  "markdown": "# Iterator.prototype.map() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`map()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances returns a new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields elements of the iterator, each transformed by a mapping function.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. Its return value is yielded by the iterator helper. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\nA new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). Each time the iterator helper's `next()` method is called, it gets the next element from the underlying iterator, applies `callbackFn`, and yields the return value. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n## [Description](#description)\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `map()` allows you to create a new iterator that, when iterated, produces transformed elements.\n\n## [Examples](#examples)\n\n### [Using map()](#using_map)\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, transforms it into a new sequence with each term squared, and then reads the first few terms:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().map((x) => x ** 2);\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 4\n```\n\n### [Using map() with a for...of loop](#using_map_with_a_for...of_loop)\n\n`map()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop:\n\n```\nfor (const n of fibonacci().map((x) => x ** 2)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 1\n// 1\n// 4\n// 9\n// 25\n// 64\n```\n\nThis is equivalent to:\n\n```\nfor (const n of fibonacci()) {\n  const n2 = n ** 2;\n  console.log(n2);\n  if (n2 > 30) {\n    break;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.map](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.map) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.map() - JavaScript | MDN",
  "description": "The map() method of Iterator instances returns a new iterator helper that yields elements of the iterator, each transformed by a mapping function.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/reduce",
  "markdown": "# Iterator.prototype.reduce() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`reduce()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances is similar to [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce): it executes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.\n\n## [Syntax](#syntax)\n\n```\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n\n[`accumulator`](#accumulator)\n\nThe value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the first element of the iterator.\n\n[`currentValue`](#currentvalue)\n\nThe value of the current element. On the first call, its value is the first element of the iterator if `initialValue` is specified; otherwise its value is the second element.\n\n[`currentIndex`](#currentindex)\n\nThe index position of `currentValue`. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n\n[`initialValue`](#initialvalue) Optional\n\nA value to which `accumulator` is initialized the first time the callback is called. If `initialValue` is specified, `callbackFn` starts executing with the first element as `currentValue`. If `initialValue` is _not_ specified, `accumulator` is initialized to the first element, and `callbackFn` starts executing with the second element as `currentValue`. In this case, if the iterator is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### [Return value](#return_value)\n\nThe value that results from running the \"reducer\" callback function to completion over the entire iterator.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the iterator contains no elements and `initialValue` is not provided.\n\n## [Description](#description)\n\nSee [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) for details about how `reduce()` works. Unlike most other iterator helper methods, it does not work well with infinite iterators, because it is not lazy.\n\n## [Examples](#examples)\n\n### [Using reduce()](#using_reduce)\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then sums the first ten terms:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconsole.log(\n  fibonacci()\n    .take(10)\n    .reduce((a, b) => a + b),\n); // 143\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.reduce](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.reduce) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.reduce() - JavaScript | MDN",
  "description": "The reduce() method of Iterator instances is similar to Array.prototype.reduce: it executes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/some",
  "markdown": "# Iterator.prototype.some() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`some()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances is similar to [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some): it tests whether at least one element produced by the iterator passes the test implemented by the provided function. It returns a boolean value.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each element produced by the iterator. It should return a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n\n[`element`](#element)\n\nThe current element being processed.\n\n[`index`](#index)\n\nThe index of the current element being processed.\n\n### [Return value](#return_value)\n\n`true` if the callback function returns a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value for at least one element. Otherwise, `false`.\n\n## [Description](#description)\n\n`some()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns `true` immediately if the callback function returns a truthy value. Otherwise, it iterates until the end of the iterator and returns `false`. If `some()` returns `true`, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `some()` returns `true` as soon as the first truthy value is found. If the `callbackFn` always returns a falsy value, the method never returns.\n\n## [Examples](#examples)\n\n### [Using some()](#using_some)\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().some(isEven)); // true\n\nconst isNegative = (x) => x < 0;\nconst isPositive = (x) => x > 0;\nconsole.log(fibonacci().take(10).some(isPositive)); // false\nconsole.log(fibonacci().some(isNegative)); // Never completes\n```\n\nCalling `some()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```\nconst seq = fibonacci();\nconsole.log(seq.some(isEven)); // true\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.some](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.some) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.some() - JavaScript | MDN",
  "description": "The some() method of Iterator instances is similar to Array.prototype.some(): it tests whether at least one element produced by the iterator passes the test implemented by the provided function. It returns a boolean value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take",
  "markdown": "# Iterator.prototype.take() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`take()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances returns a new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields the given number of elements in this iterator and then terminates.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`limit`](#limit)\n\nThe number of elements to take from the start of the iteration.\n\n### [Return value](#return_value)\n\nA new [iterator helper](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The returned iterator helper yields the elements in the original iterator one-by-one, and then completes (the `next()` method produces `{ value: undefined, done: true }`) once `limit` elements have been yielded, or when the original iterator is exhausted, whichever comes first.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `limit` becomes [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) or negative when [converted to an integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n## [Examples](#examples)\n\n### [Using take()](#using_take)\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then logs the first three terms:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().take(3);\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // undefined\n```\n\n### [Using take() with a for...of loop](#using_take_with_a_for...of_loop)\n\n`take()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop:\n\n```\nfor (const n of fibonacci().take(5)) {\n  console.log(n);\n}\n\n// Logs:\n// 1\n// 1\n// 2\n// 3\n// 5\n```\n\nBecause `fibonacci()` is an infinite iterator, you can't use a `for` loop to iterate it directly.\n\n### [Combining drop() with take()](#combining_drop_with_take)\n\nYou can combine `take()` with [`Iterator.prototype.drop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop) to get a slice of an iterator:\n\n```\nfor (const n of fibonacci().drop(2).take(5)) {\n  // Drops the first two elements, then takes the next five\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n\nfor (const n of fibonacci().take(5).drop(2)) {\n  // Takes the first five elements, then drops the first two\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n```\n\n### [Lower and upper bounds of take count](#lower_and_upper_bounds_of_take_count)\n\nWhen the `limit` is negative or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown:\n\n```\nfibonacci().take(-1); // RangeError: -1 must be positive\nfibonacci().take(undefined); // RangeError: undefined must be positive\n```\n\nWhen the `limit` is larger than the total number of elements the iterator can produce (such as [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)), the returned iterator helper has essentially the same behavior as the original iterator:\n\n```\nfor (const n of new Set([1, 2, 3]).values().take(Infinity)) {\n  console.log(n);\n}\n\n// Logs:\n// 1\n// 2\n// 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.take](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.take) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.take() - JavaScript | MDN",
  "description": "The take() method of Iterator instances returns a new iterator helper that yields the given number of elements in this iterator and then terminates.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/toArray",
  "markdown": "# Iterator.prototype.toArray() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`toArray()`** method of [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) instances creates a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance populated with the elements yielded from the iterator.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance containing the elements from the iterator in the order they were produced.\n\n## [Examples](#examples)\n\n### [Using toArray()](#using_toarray)\n\n`iterator.toArray()` is equivalent to `Array.from(iterator)` and `[...iterator]`, except that it's easier to chain when multiple iterator helper methods are involved. The following example creates an iterator that yields terms in the Fibonacci sequence, takes the first 10 terms, filters out the odd numbers, and converts the result to an array:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst array = fibonacci()\n  .take(10)\n  .filter((x) => x % 2 === 0)\n  .toArray();\n\nconsole.log(array); // [2, 8, 34]\n```\n\nNote that it's a good idea to call `toArray()` as a last step of your processing. For example, `fibonacci().take(10).toArray().filter(...)` is less efficient, because iterator helpers are lazy and avoids creating a temporary array.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Iterator Helpers  <br>\\# sec-iteratorprototype.toarray](https://tc39.es/proposal-iterator-helpers/#sec-iteratorprototype.toarray) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Iterator.prototype.toArray() - JavaScript | MDN",
  "description": "The toArray() method of Iterator instances creates a new Array instance populated with the elements yielded from the iterator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf",
  "markdown": "# String.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the primitive value of a given [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object.\n\n## [Description](#description)\n\nThe `valueOf()` method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) returns the primitive value of a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object as a string data type. This value is equivalent to [`String.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString).\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n## [Examples](#examples)\n\n### [Using `valueOf()`](#using_valueof)\n\n```\nconst x = new String(\"Hello world\");\nconsole.log(x.valueOf()); // 'Hello world'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.valueof](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.valueOf() - JavaScript | MDN",
  "description": "The valueOf() method of String values returns this string value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description",
  "markdown": "# Symbol.prototype.description - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`description`** accessor property of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values returns a string containing the description of this symbol, or `undefined` if the symbol has no description.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n[`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) objects can be created with an optional description which can be used for debugging but not to access the symbol itself. The `Symbol.prototype.description` property can be used to read that description. It is different to `Symbol.prototype.toString()` as it does not contain the enclosing `\"Symbol()\"` string. See the examples.\n\n## [Examples](#examples)\n\n### [Using description](#using_description)\n\n```\nSymbol(\"desc\").toString(); // \"Symbol(desc)\"\nSymbol(\"desc\").description; // \"desc\"\nSymbol(\"\").description; // \"\"\nSymbol().description; // undefined\n\n// well-known symbols\nSymbol.iterator.toString(); // \"Symbol(Symbol.iterator)\"\nSymbol.iterator.description; // \"Symbol.iterator\"\n\n// global symbols\nSymbol.for(\"foo\").toString(); // \"Symbol(foo)\"\nSymbol.for(\"foo\").description; // \"foo\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.prototype.description](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.prototype.description) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.prototype.description - JavaScript | MDN",
  "description": "The description accessor property of Symbol values returns a string containing the description of this symbol, or undefined if the symbol has no description.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString",
  "markdown": "# Number.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string representing this number value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoString()\ntoString(radix)\n```\n\n### [Parameters](#parameters)\n\n[`radix`](#radix) Optional\n\nAn integer in the range `2` through `36` specifying the base to use for representing the number value. Defaults to 10.\n\n### [Return value](#return_value)\n\nA string representing the specified number value. Scientific notation is used if radix is 10 and the number's magnitude (ignoring sign) is greater than or equal to 1021 or less than 10\\-6.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `radix` is less than 2 or greater than 36.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if this method is invoked on an object that is not a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\n\n## [Description](#description)\n\nThe [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For `Number` values, the `toString` method returns a string representation of the value in the specified radix.\n\nFor radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) `a` through `f` are used.\n\nIf the specified number value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the number value preceded by a `-` sign, **not** the two's complement of the number value.\n\nBoth `0` and `-0` have `\"0\"` as their string representation. [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) returns `\"Infinity\"` and [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) returns `\"NaN\"`.\n\nIf the number is not a whole number, the decimal point `.` is used to separate the decimal places. [Scientific notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#exponential) is used if the radix is 10 and the number's magnitude (ignoring sign) is greater than or equal to 1021 or less than 10\\-6. In this case, the returned string always explicitly specifies the sign of the exponent.\n\n```\nconsole.log((10 ** 21.5).toString()); // \"3.1622776601683794e+21\"\nconsole.log((10 ** 21.5).toString(8)); // \"526665530627250154000000\"\n```\n\nThe underlying representation for floating point numbers is base-2 scientific notation (see [number encoding](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding)). However, the `toString()` method doesn't directly use this most precise representation of the number value. Rather, the algorithm uses the least number of significant figures necessary to distinguish the output from adjacent number values. For example, if the number is large, there will be many equivalent string representations of the same floating point number, and `toString()` will choose the one with the most 0s to the right (for any given radix).\n\n```\nconsole.log((1000000000000000128).toString()); // \"1000000000000000100\"\nconsole.log(1000000000000000100 === 1000000000000000128); // true\n```\n\nOn the other hand, [`Number.prototype.toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) and [`Number.prototype.toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) allow you to specify the precision and can be more precise than `toString()`.\n\nThe `toString()` method requires its `this` value to be a `Number` primitive or wrapper object. It throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for other `this` values without attempting to coerce them to number values.\n\nBecause `Number` doesn't have a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `Number` _object_ is used in a context expecting a string, such as in a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). However, Number _primitive_ values do not consult the `toString()` method to be [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```\nNumber.prototype.toString = () => \"Overridden\";\nconsole.log(`${1}`); // \"1\"\nconsole.log(`${new Number(1)}`); // \"Overridden\"\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nconst count = 10;\nconsole.log(count.toString()); // \"10\"\n\nconsole.log((17).toString()); // \"17\"\nconsole.log((17.2).toString()); // \"17.2\"\n\nconst x = 6;\nconsole.log(x.toString(2)); // \"110\"\nconsole.log((254).toString(16)); // \"fe\"\nconsole.log((-10).toString(2)); // \"-1010\"\nconsole.log((-0xff).toString(2)); // \"-11111111\"\n```\n\n### [Converting radix of number strings](#converting_radix_of_number_strings)\n\nIf you have a string representing a number in a non-decimal radix, you can use [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) and `toString()` to convert it to a different radix.\n\n```\nconst hex = \"CAFEBABE\";\nconst bin = parseInt(hex, 16).toString(2); // \"11001010111111101011101010111110\"\n```\n\nBeware of loss of precision: if the original number string is too large (larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER), for example), you should use a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) instead. However, the `BigInt` constructor only has support for strings representing number literals (i.e. strings starting with `0b`, `0o`, `0x`). In case your original radix is not one of binary, octal, decimal, or hexadecimal, you may need to hand-write your radix converter, or use a library.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.tostring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Number.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of Number values returns a string representing this number value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String",
  "markdown": "# String() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`String()`** constructor creates [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) objects. When called as a function, it returns primitive values of type String.\n\n## [Syntax](#syntax)\n\n```\nnew String(thing)\nString(thing)\n```\n\n**Note:** `String()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`thing`](#thing)\n\nAnything to be converted to a string.\n\n### [Return value](#return_value)\n\nWhen `String()` is called as a function (without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new)), it returns `value` [coerced to a string primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Specially, [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values are converted to `\"Symbol(description)\"`, where `description` is the [description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description) of the Symbol, instead of throwing.\n\nWhen `String()` is called as a constructor (with `new`), it coerces `value` to a string primitive (without special symbol handling) and returns a wrapping [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object, which is **not** a primitive.\n\n**Warning:** You should rarely find yourself using `String` as a constructor.\n\n## [Examples](#examples)\n\n### [String constructor and String function](#string_constructor_and_string_function)\n\nString function and String constructor produce different results:\n\n```\nconst a = new String(\"Hello world\"); // a === \"Hello world\" is false\nconst b = String(\"Hello world\"); // b === \"Hello world\" is true\na instanceof String; // is true\nb instanceof String; // is false\ntypeof a; // \"object\"\ntypeof b; // \"string\"\n```\n\nHere, the function produces a string (the [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) type) as promised. However, the constructor produces an instance of the type String (an object wrapper) and that's why you rarely want to use the String constructor at all.\n\n### [Using String() to stringify a symbol](#using_string_to_stringify_a_symbol)\n\n`String()` is the only case where a symbol can be converted to a string without throwing, because it's very explicit.\n\n```\nconst sym = Symbol(\"example\");\n`${sym}`; // TypeError: Cannot convert a Symbol value to a string\n\"\" + sym; // TypeError: Cannot convert a Symbol value to a string\n\"\".concat(sym); // TypeError: Cannot convert a Symbol value to a string\n```\n\n```\nconst sym = Symbol(\"example\");\nString(sym); // \"Symbol(example)\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string-constructor](https://tc39.es/ecma262/multipage/text-processing.html#sec-string-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String() constructor - JavaScript | MDN",
  "description": "The String() constructor creates String objects. When called as a function, it returns primitive values of type String.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator",
  "markdown": "# Intl.Collator() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Collator()`** constructor creates [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.Collator()\nnew Intl.Collator(locales)\nnew Intl.Collator(locales, options)\n\nIntl.Collator()\nIntl.Collator(locales)\nIntl.Collator(locales, options)\n```\n\n**Note:** `Intl.Collator()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.Collator` instance.\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension keys are allowed:\n\n[`co`](#co)\n\nSee [`collation`](#collation).\n\n[`kn`](#kn)\n\nSee [`numeric`](#numeric).\n\n[`kf`](#kf)\n\nSee [`caseFirst`](#casefirst).\n\nThese keys can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`usage`](#usage)\n\nWhether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n\n[`\"sort\"`](#sort) (default)\n\nFor sorting a list of strings.\n\n[`\"search\"`](#search)\n\nFor filtering a list of strings by testing each list item for a full-string match against a key. With `\"search\"`, the caller should only pay attention to whether `compare()` returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use `\"search\"` for sorting/ordering.\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`collation`](#collation)\n\nVariant collations for certain locales, such as `\"emoji\"`, `\"pinyin\"`, `\"stroke\"`, and so on. For a list of supported collation types, see [`Intl.Locale.prototype.getCollations()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types); the default is `\"default\"`. This option can also be set through the `co` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`numeric`](#numeric)\n\nWhether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are `true` and `false`; the default is `false`. This option can also be set through the `kn` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`caseFirst`](#casefirst)\n\nWhether upper case or lower case should sort first. Possible values are `\"upper\"`, `\"lower\"`, and `\"false\"` (use the locale's default); the default is `\"false\"`. This option can also be set through the `kf` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`sensitivity`](#sensitivity)\n\nWhich differences in the strings should lead to non-zero result values. Possible values are:\n\n[`\"base\"`](#base)\n\nOnly strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n\n[`\"accent\"`](#accent)\n\nOnly strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A.\n\n[`\"case\"`](#case)\n\nOnly strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n\n[`\"variant\"`](#variant)\n\nStrings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A.\n\nThe default is `\"variant\"` for usage `\"sort\"`; it's locale dependent for usage `\"search\"` per spec, but the core functionality of `\"search\"` is accent-insensitive and case-insensitive filtering, so `\"base\"` makes the most sense (and perhaps `\"case\"`).\n\n[`ignorePunctuation`](#ignorepunctuation)\n\nWhether punctuation should be ignored. Possible values are `true` and `false`. The default is `true` for Thai (`th`) and `false` for all other languages.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Using Collator](#using_collator)\n\nThe following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:\n\n```\nconsole.log(new Intl.Collator().compare(\"a\", \"c\")); // -1, or some other negative value\nconsole.log(new Intl.Collator().compare(\"c\", \"a\")); // 1, or some other positive value\nconsole.log(new Intl.Collator().compare(\"a\", \"a\")); // 0\n```\n\nNote that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive.\n\nWhen usage is `\"search\"`, the caller should only pay attention to whether the return value of `compare()` is zero or non-zero. It is inappropriate to use a `Collator` with usage `\"search\"` for sorting.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-the-intl-collator-constructor](https://tc39.es/ecma402/#sec-the-intl-collator-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Collator() constructor - JavaScript | MDN",
  "description": "The Intl.Collator() constructor creates Intl.Collator objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",
  "markdown": "# String.raw() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`String.raw()`** static method is a tag function of [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). This is similar to the `r` prefix in Python, or the `@` prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. `${foo}`) are processed, but escape sequences (e.g. `\\n`) are not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nString.raw(strings)\nString.raw(strings, sub1)\nString.raw(strings, sub1, sub2)\nString.raw(strings, sub1, sub2, /* …, */ subN)\n\nString.raw`templateString`\n```\n\n### [Parameters](#parameters)\n\n[`strings`](#strings)\n\nWell-formed template literal array object, like `{ raw: ['foo', 'bar', 'baz'] }`. Should be an object with a `raw` property whose value is an array-like object of strings.\n\n[`sub1`](#sub1), …, `subN`\n\nContains substitution values.\n\n[`templateString`](#templatestring)\n\nA [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), optionally with substitutions (`${...}`).\n\n### [Return value](#return_value)\n\nThe raw string form of a given template literal.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the first argument doesn't have a `raw` property, or the `raw` property is `undefined` or `null`.\n\n## [Description](#description)\n\nIn most cases, `String.raw()` is used with template literals. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, (just like with other [tag functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates)).\n\n`String.raw()` is the only built-in template literal tag. It has close semantics to an untagged literal since it concatenates all arguments and returns a string. You can even re-implement it with normal JavaScript code.\n\n**Warning:** You should not use `String.raw` directly as an \"identity\" tag. See [Building an identity tag](#building_an_identity_tag) for how to implement this.\n\nIf `String.raw()` is called with an object whose `raw` property doesn't have a `length` property or a non-positive `length`, it returns an empty string `\"\"`. If `substitutions.length < strings.raw.length - 1` (i.e. there are not enough substitutions to fill the placeholders — which can't happen in a well-formed tagged template literal), the rest of the placeholders are filled with empty strings.\n\n## [Examples](#examples)\n\n### [Using String.raw()](#using_string.raw)\n\n```\nString.raw`Hi\\n${2 + 3}!`;\n// 'Hi\\\\n5!', the character after 'Hi'\n// is not a newline character,\n// '\\' and 'n' are two characters.\n\nString.raw`Hi\\u000A!`;\n// 'Hi\\\\u000A!', same here, this time we will get the\n// \\, u, 0, 0, 0, A, 6 characters.\n// All kinds of escape characters will be ineffective\n// and backslashes will be present in the output string.\n// You can confirm this by checking the .length property\n// of the string.\n\nconst name = \"Bob\";\nString.raw`Hi\\n${name}!`;\n// 'Hi\\\\nBob!', substitutions are processed.\n\nString.raw`Hi \\${name}!`;\n// 'Hi \\\\${name}!', the dollar sign is escaped; there's no interpolation.\n```\n\n### [Using String.raw with RegExp](#using_string.raw_with_regexp)\n\nCombining a `String.raw` template literal with the [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor allows you to create regular expressions with dynamic parts (which is not possible with regex literals) without double-escaping (`\\\\`) regular expression escape sequences (which is not possible with normal string literals). This is also valuable in strings that contain a lot of slashes, such as file paths or URLs.\n\n```\n// A String.raw template allows a fairly readable regular expression matching a URL:\nconst reRawTemplate = new RegExp(\n  String.raw`https://developer\\.mozilla\\.org/en-US/docs/Web/JavaScript/Reference/`,\n);\n\n// The same thing with a regexp literal looks like this, with \\/ for\n// each forward slash:\nconst reRegexpLiteral =\n  /https:\\/\\/developer\\.mozilla\\.org\\/en-US\\/docs\\/Web\\/JavaScript\\/Reference\\//;\n\n// And the same thing written with the RegExp constructor and a\n// traditional string literal, with \\\\. for each period:\nconst reStringLiteral = new RegExp(\n  \"https://developer\\\\.mozilla\\\\.org/en-US/docs/Web/JavaScript/Reference/\",\n);\n\n// String.raw also allows dynamic parts to be included\nfunction makeURLRegExp(path) {\n  return new RegExp(String.raw`https://developer\\.mozilla\\.org/${path}`);\n}\n\nconst reDynamic = makeURLRegExp(\"en-US/docs/Web/JavaScript/Reference/\");\nconst reWildcard = makeURLRegExp(\".*\");\n```\n\n### [Building an identity tag](#building_an_identity_tag)\n\nMany tools give special treatment to literals tagged by a particular name.\n\n```\n// Some formatters will format this literal's content as HTML\nconst doc = html`<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <title>Hello</title>\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n`;\n```\n\nOne might naïvely implement the `html` tag as:\n\nThis, in fact, works for the case above. However, because `String.raw` would concatenate the _raw_ string literals instead of the \"cooked\" ones, escape sequences would not be processed.\n\n```\nconst doc = html`<canvas>\\n</canvas>`;\n// \"<canvas>\\\\n</canvas>\"\n```\n\nThis may not be what you want for a \"true identity\" tag, where the tag is purely for markup and doesn't change the literal's value. In this case, you can create a custom tag and pass the \"cooked\" (i.e. escape sequences are processed) literal array to `String.raw`, pretending they are raw strings.\n\n```\nconst html = (strings, ...values) => String.raw({ raw: strings }, ...values);\n// Some formatters will format this literal's content as HTML\nconst doc = html`<canvas>\\n</canvas>`;\n// \"<canvas>\\n</canvas>\"; the \"\\n\" becomes a line break\n```\n\nNotice the first argument is an object with a `raw` property, whose value is an array-like object (with a `length` property and integer indexes) representing the separated strings in the template literal. The rest of the arguments are the substitutions. Since the `raw` value can be any array-like object, it can even be a string! For example, `'test'` is treated as `['t', 'e', 's', 't']`. The following is equivalent to `` `t${0}e${1}s${2}t` ``:\n\n```\nString.raw({ raw: \"test\" }, 0, 1, 2); // 't0e1s2t'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.raw](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.raw) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.raw() - JavaScript | MDN",
  "description": "The String.raw() static method is a tag function of template literals. This is similar to the r prefix in Python, or the @ prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. ${foo}) are processed, but escape sequences (e.g. \\n) are not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator",
  "markdown": "# String.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows strings to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [string iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the Unicode code points of the string value as individual strings.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nstring[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the Unicode code points of the string value as individual strings.\n\n## [Description](#description)\n\nStrings are iterated by Unicode code points. This means grapheme clusters will be split, but surrogate pairs will be preserved.\n\n```\n// \"Backhand Index Pointing Right: Dark Skin Tone\"\n[...\"👉🏿\"]; // ['👉', '🏿']\n// splits into the basic \"Backhand Index Pointing Right\" emoji and\n// the \"Dark skin tone\" emoji\n\n// \"Family: Man, Boy\"\n[...\"👨‍👦\"]; // [ '👨', '‍', '👦' ]\n// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ\n```\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes strings [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst str = \"A\\uD835\\uDC68B\\uD835\\uDC69C\\uD835\\uDC6A\";\n\nfor (const v of str) {\n  console.log(v);\n}\n// \"A\"\n// \"\\uD835\\uDC68\"\n// \"B\"\n// \"\\uD835\\uDC69\"\n// \"C\"\n// \"\\uD835\\uDC6A\"\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst str = \"A\\uD835\\uDC68\";\n\nconst strIter = str[Symbol.iterator]();\n\nconsole.log(strIter.next().value); // \"A\"\nconsole.log(strIter.next().value); // \"\\uD835\\uDC68\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype-@@iterator](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of String values implements the iterable protocol and allows strings to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a string iterator object that yields the Unicode code points of the string value as individual strings.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at",
  "markdown": "# String.prototype.at() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`at()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values takes an integer value and returns a new [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`index`](#index)\n\nThe index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e. if a negative number is used, the character returned will be found by counting back from the end of the string.\n\n### [Return value](#return_value)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) consisting of the single UTF-16 code unit located at the specified position. Returns [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if the given index can not be found.\n\n## [Examples](#examples)\n\n### [Return the last character of a string](#return_the_last_character_of_a_string)\n\nThe following example provides a function which returns the last character found in a specified string.\n\n```\n// A function which returns the last character of a given string\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\nlet invoiceRef = \"myinvoice01\";\n\nconsole.log(returnLast(invoiceRef)); // '1'\n\ninvoiceRef = \"myinvoice02\";\n\nconsole.log(returnLast(invoiceRef)); // '2'\n```\n\n### [Comparing methods](#comparing_methods)\n\nHere we compare different ways to select the penultimate (last but one) character of a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String). Whilst all below methods are valid, it highlights the succinctness and readability of the `at()` method.\n\n```\nconst myString = \"Every green bus drives fast.\";\n\n// Using length property and charAt() method\nconst lengthWay = myString.charAt(myString.length - 2);\nconsole.log(lengthWay); // 't'\n\n// Using slice() method\nconst sliceWay = myString.slice(-2, -1);\nconsole.log(sliceWay); // 't'\n\n// Using at() method\nconst atWay = myString.at(-2);\nconsole.log(atWay); // 't'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.at](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.at) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.at() - JavaScript | MDN",
  "description": "The at() method of String values takes an integer value and returns a new String consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor",
  "markdown": "# String.prototype.anchor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`anchor()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element with a name (`<a name=\"...\">str</a>`).\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) instead.\n\nThe HTML specification no longer allows the [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element to have a `name` attribute, so this method doesn't even create valid markup.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nA string representing a `name` value to put into the generated `<a name=\"...\">` start tag.\n\n### [Return value](#return_value)\n\nA string beginning with an `<a name=\"name\">` start tag (double quotes in `name` are replaced with `&quot;`), then the text `str`, and then an `</a>` end tag.\n\n## [Examples](#examples)\n\n### [Using anchor()](#using_anchor)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.anchor(\"hello\");\n```\n\nThis will create the following HTML:\n\n```\n<a name=\"hello\">Hello, world</a>\n```\n\n**Warning:** This markup is invalid, because `name` is no longer a valid attribute of the [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element.\n\nInstead of using `anchor()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"a\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.anchor](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.anchor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.anchor() - JavaScript | MDN",
  "description": "The anchor() method of String values creates a string that embeds this string in an <a> element with a name (<a name=\"...\">str</a>).",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold",
  "markdown": "# String.prototype.bold() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`bold()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<b>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b) element (`<b>str</b>`), which causes this string to be displayed as bold.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<b>` start tag, then the text `str`, and then a `</b>` end tag.\n\n## [Examples](#examples)\n\n### [Using bold()](#using_bold)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.bold();\n```\n\nThis will create the following HTML:\n\nInstead of using `bold()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"b\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.bold](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.bold) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.bold() - JavaScript | MDN",
  "description": "The bold() method of String values creates a string that embeds this string in a <b> element (<b>str</b>), which causes this string to be displayed as bold.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink",
  "markdown": "# String.prototype.blink() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`blink()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a `<blink>` element (`<blink>str</blink>`), which used to cause a string to blink in old browsers.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `blink()`, the `<blink>` element itself is removed from modern browsers, and blinking text is frowned upon by several accessibility standards. Avoid using the element in any way.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<blink>` start tag, then the text `str`, and then a `</blink>` end tag.\n\n## [Examples](#examples)\n\n### [Using blink()](#using_blink)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.blink();\n```\n\nThis will create the following HTML:\n\n```\n<blink>Hello, world</blink>\n```\n\n**Warning:** This markup is invalid, because `blink` is no longer a valid element.\n\nYou should avoid blinking elements altogether.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.blink](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.blink) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.blink() - JavaScript | MDN",
  "description": "The blink() method of String values creates a string that embeds this string in a <blink> element (<blink>str</blink>), which used to cause a string to blink in old browsers.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype",
  "markdown": "# GeneratorFunction.prototype.prototype - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`prototype`** property of `GeneratorFunction.prototype` is shared by all generator functions. Its value is [`Generator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator). Each generator function created with the `function*` syntax or the `GeneratorFunction()` constructor also has its own `prototype` property, whose prototype is `GeneratorFunction.prototype.prototype`. When the generator function is called, its `prototype` property becomes the prototype of the returned generator object.\n\n## [Value](#value)\n\nThe same object as [`Generator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator). `GeneratorFunction.prototype.prototype` is the technically more accurate name, but `Generator.prototype` appeals to the intuition that it's the prototype of generator objects.\n\n| Property attributes of `GeneratorFunction.prototype.prototype` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | no  |\n\nThe `prototype` property of each `GeneratorFunction` instance is an empty object with no properties, whose prototype is `GeneratorFunction.prototype.prototype`. It has the following property attributes:\n\n| Property attributes of `GeneratorFunction.prototype.prototype` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nA generator function instance has two `prototype` properties. The first one is its own `prototype` property. The second one is the `prototype` property on its prototype, which is `GeneratorFunction.prototype`. (Remember that every generator function is an instance of `GeneratorFunction`, so it has `GeneratorFunction.prototype` as its prototype.)\n\n```\nfunction* genFunc() {}\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(genFunc);\nconsole.log(Object.hasOwn(genFunc, \"prototype\")); // true\nconsole.log(Object.hasOwn(GeneratorFunctionPrototype, \"prototype\")); // true\n```\n\nWhen a generator function is called, the generator function's `prototype` property becomes the prototype of the returned generator object.\n\n```\nconst gen = genFunc();\nconst proto = Object.getPrototypeOf;\nconsole.log(proto(gen) === genFunc.prototype); // true\nconsole.log(proto(proto(gen)) === GeneratorFunctionPrototype.prototype); // true\n```\n\nThe following diagram illustrates the prototype chain of a generator function and its instances. Each hollow arrow indicates an inheritance relationship (i.e. a prototype link), and each solid arrow indicates a property relationship. Note that there's no way to access `genFunc` from `gen` — they only have an `instanceof` relationship.\n\n![The inheritance diagram of generators and generator functions](https://mdn.github.io/shared-assets/images/diagrams/javascript/generatorfunction/prototype-chain.svg)\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generatorfunction.prototype.prototype](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction.prototype.prototype) |\n| [ECMAScript Language Specification  <br>\\# sec-generatorfunction-instances-prototype](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction-instances-prototype) |\n\n## [See also](#see_also)",
  "title": "GeneratorFunction.prototype.prototype - JavaScript | MDN",
  "description": "The prototype property of GeneratorFunction.prototype is shared by all generator functions. Its value is Generator.prototype. Each generator function created with the function* syntax or the GeneratorFunction() constructor also has its own prototype property, whose prototype is GeneratorFunction.prototype.prototype. When the generator function is called, its prototype property becomes the prototype of the returned generator object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big",
  "markdown": "# String.prototype.big() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`big()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<big>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big) element (`<big>str</big>`), which causes this string to be displayed in a big font.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `big()`, the `<big>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) properties instead.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<big>` start tag, then the text `str`, and then a `</big>` end tag.\n\n## [Examples](#examples)\n\n### [Using big()](#using_big)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.big();\n```\n\nThis will create the following HTML:\n\n**Warning:** This markup is invalid, because `big` is no longer a valid element.\n\nInstead of using `big()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) through the [`element.style`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style \"element.style\") attribute:\n\n```\ndocument.getElementById(\"yourElemId\").style.fontSize = \"2em\";\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.big](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.big) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.big() - JavaScript | MDN",
  "description": "The big() method of String values creates a string that embeds this string in a <big> element (<big>str</big>), which causes this string to be displayed in a big font.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed",
  "markdown": "# String.prototype.fixed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`fixed()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<tt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt) element (`<tt>str</tt>`), which causes this string to be displayed in a fixed-width font.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fixed()`, the `<tt>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) properties instead.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<tt>` start tag, then the text `str`, and then a `</tt>` end tag.\n\n## [Examples](#examples)\n\n### [Using fixed()](#using_fixed)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fixed();\n```\n\nThis will create the following HTML:\n\n**Warning:** This markup is invalid, because `tt` is no longer a valid element.\n\nInstead of using `fixed()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) through the [`element.style`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style \"element.style\") attribute:\n\n```\ndocument.getElementById(\"yourElemId\").style.fontFamily = \"monospace\";\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.fixed](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.fixed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.fixed() - JavaScript | MDN",
  "description": "The fixed() method of String values creates a string that embeds this string in a <tt> element (<tt>str</tt>), which causes this string to be displayed in a fixed-width font.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize",
  "markdown": "# String.prototype.fontsize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`fontsize()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<font>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font) element (`<font size=\"...\">str</font>`), which causes this string to be displayed in the specified font size.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fontsize()`, the `<font>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) properties instead.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`size`](#size)\n\nAn integer between 1 and 7, or a string representing a signed integer between 1 and 7.\n\n### [Return value](#return_value)\n\nA string beginning with a `<font size=\"size\">` start tag (double quotes in `size` are replaced with `&quot;`), then the text `str`, and then a `</font>` end tag.\n\n## [Description](#description)\n\nThe `fontsize()` method itself simply joins the string parts together without any validation or normalization. However, to create valid [`<font>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font) elements, When you specify size as an integer, you set the font size of `str` to one of the 7 defined sizes. You can specify `size` as a string such as `\"-2\"` or `\"+3\"` to adjust the font size of `str` relative to 3, the default value.\n\n## [Examples](#examples)\n\n### [Using fontsize()](#using_fontsize)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fontsize(7);\n```\n\nThis will create the following HTML:\n\n```\n<font size=\"7\">Hello, world</font>\n```\n\n**Warning:** This markup is invalid, because `font` is no longer a valid element.\n\nInstead of using `fontsize()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) through the [`element.style`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style \"element.style\") attribute:\n\n```\ndocument.getElementById(\"yourElemId\").style.fontSize = \"7pt\";\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.fontsize](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.fontsize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.fontsize() - JavaScript | MDN",
  "description": "The fontsize() method of String values creates a string that embeds this string in a <font> element (<font size=\"...\">str</font>), which causes this string to be displayed in the specified font size.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor",
  "markdown": "# String.prototype.fontcolor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`fontcolor()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<font>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font) element (`<font color=\"...\">str</font>`), which causes this string to be displayed in the specified font color.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fontcolor()`, the `<font>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) properties instead.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`color`](#color)\n\nA string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the [CSS color reference](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value).\n\n### [Return value](#return_value)\n\nA string beginning with a `<font color=\"color\">` start tag (double quotes in `color` are replaced with `&quot;`), then the text `str`, and then a `</font>` end tag.\n\n## [Description](#description)\n\nThe `fontcolor()` method itself simply joins the string parts together without any validation or normalization. However, to create valid [`<font>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font) elements, if you express color as a hexadecimal RGB triplet, you must use the format `rrggbb`. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is `\"FA8072\"`.\n\n## [Examples](#examples)\n\n### [Using fontcolor()](#using_fontcolor)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fontcolor(\"red\");\n```\n\nThis will create the following HTML:\n\n```\n<font color=\"red\">Hello, world</font>\n```\n\n**Warning:** This markup is invalid, because `font` is no longer a valid element.\n\nInstead of using `fontcolor()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color) through the [`element.style`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style \"element.style\") attribute:\n\n```\ndocument.getElementById(\"yourElemId\").style.color = \"red\";\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.fontcolor](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.fontcolor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.fontcolor() - JavaScript | MDN",
  "description": "The fontcolor() method of String values creates a string that embeds this string in a <font> element (<font color=\"...\">str</font>), which causes this string to be displayed in the specified font color.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics",
  "markdown": "# String.prototype.italics() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`italics()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in an [`<i>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i) element (`<i>str</i>`), which causes this string to be displayed as italic.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with an `<i>` start tag, then the text `str`, and then an `</i>` end tag.\n\n## [Examples](#examples)\n\n### [Using italics()](#using_italics)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.italics();\n```\n\nThis will create the following HTML:\n\nInstead of using `italics()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"i\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.italics](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.italics) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.italics() - JavaScript | MDN",
  "description": "The italics() method of String values creates a string that embeds this string in an <i> element (<i>str</i>), which causes this string to be displayed as italic.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link",
  "markdown": "# String.prototype.link() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`link()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) element (`<a href=\"...\">str</a>`), to be used as a hypertext link to another URL.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`url`](#url)\n\nAny string that specifies the `href` attribute of the `<a>` element; it should be a valid URL (relative or absolute), with any `&` characters escaped as `&amp;`.\n\n### [Return value](#return_value)\n\nA string beginning with an `<a href=\"url\">` start tag (double quotes in `url` are replaced with `&quot;`), then the text `str`, and then an `</a>` end tag.\n\n## [Examples](#examples)\n\n### [Using link()](#using_link)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"MDN Web Docs\";\n\ndocument.body.innerHTML = contentString.link(\"https://developer.mozilla.org/\");\n```\n\nThis will create the following HTML:\n\n```\n<a href=\"https://developer.mozilla.org/\">MDN Web Docs</a>\n```\n\nInstead of using `link()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"MDN Web Docs\";\nconst elem = document.createElement(\"a\");\nelem.href = \"https://developer.mozilla.org/\";\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.link](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.link) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.link() - JavaScript | MDN",
  "description": "The link() method of String values creates a string that embeds this string in an <a> element (<a href=\"...\">str</a>), to be used as a hypertext link to another URL.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart",
  "markdown": "# String.prototype.padStart() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`padStart()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values pads this string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of this string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npadStart(targetLength)\npadStart(targetLength, padString)\n```\n\n### [Parameters](#parameters)\n\n[`targetLength`](#targetlength)\n\nThe length of the resulting string once the current `str` has been padded. If the value is less than or equal to `str.length`, then `str` is returned as-is.\n\n[`padString`](#padstring) Optional\n\nThe string to pad the current `str` with. If `padString` is too long to stay within the `targetLength`, it will be truncated from the end. The default value is the unicode \"space\" character (U+0020).\n\n### [Return value](#return_value)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) of the specified `targetLength` with `padString` applied from the start.\n\n## [Examples](#examples)\n\n### [Basic examples](#basic_examples)\n\n```\n\"abc\".padStart(10); // \"       abc\"\n\"abc\".padStart(10, \"foo\"); // \"foofoofabc\"\n\"abc\".padStart(6, \"123465\"); // \"123abc\"\n\"abc\".padStart(8, \"0\"); // \"00000abc\"\n\"abc\".padStart(1); // \"abc\"\n```\n\n### [Fixed width string number conversion](#fixed_width_string_number_conversion)\n\n```\n// JavaScript version of: (unsigned)\n// printf \"%0*d\" width num\nfunction leftFillNum(num, targetLength) {\n  return num.toString().padStart(targetLength, \"0\");\n}\n\nconst num = 123;\nconsole.log(leftFillNum(num, 5)); // \"00123\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.padstart](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.padstart) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.padStart() - JavaScript | MDN",
  "description": "The padStart() method of String values pads this string with another string (multiple times, if needed) until the resulting\n  string reaches the given length. The padding is applied from the start of this string.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike",
  "markdown": "# String.prototype.strike() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`strike()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<strike>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike) element (`<strike>str</strike>`), which causes this string to be displayed as struck-out text.\n\n**Note:** All [HTML wrapper methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `strike()`, the `<strike>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use the [`<del>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del) for deleted content or the [`<s>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s) for content that is no longer accurate or no longer relevant instead.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<strike>` start tag, then the text `str`, and then a `</strike>` end tag.\n\n## [Examples](#examples)\n\n### [Using strike()](#using_strike)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.strike();\n```\n\nThis will create the following HTML:\n\n```\n<strike>Hello, world</strike>\n```\n\n**Warning:** This markup is invalid, because `strike` is no longer a valid element.\n\nInstead of using `strike()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"s\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.strike](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.strike) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.strike() - JavaScript | MDN",
  "description": "The strike() method of String values creates a string that embeds this string in a <strike> element (<strike>str</strike>), which causes this string to be displayed as struck-out text.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare",
  "markdown": "# String.prototype.localeCompare() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`localeCompare()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with [`Intl.Collator` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) support, this method simply calls `Intl.Collator`.\n\nWhen comparing large numbers of strings, such as in sorting large arrays, it is better to create an [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object and use the function provided by its [`compare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare) method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nlocaleCompare(compareString)\nlocaleCompare(compareString, locales)\nlocaleCompare(compareString, locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.Collator` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), these parameters correspond exactly to the [`Intl.Collator()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator) constructor's parameters. Implementations without `Intl.Collator` support are asked to ignore both parameters, making the comparison result returned entirely implementation-dependent — it's only required to be _consistent_.\n\n[`compareString`](#comparestring)\n\nThe string against which the `referenceStr` is compared. All values are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `localeCompare()` to compare against the string `\"undefined\"`, which is rarely what you want.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#locales) parameter of the `Intl.Collator()` constructor.\n\nIn implementations without `Intl.Collator` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options) parameter of the `Intl.Collator()` constructor.\n\nIn implementations without `Intl.Collator` support, this parameter is ignored.\n\nSee the [`Intl.Collator()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator) for details on the `locales` and `options` parameters and how to use them.\n\n### [Return value](#return_value)\n\nA **negative** number if `referenceStr` occurs before `compareString`; **positive** if the `referenceStr` occurs after `compareString`; `0` if they are equivalent.\n\nIn implementations with `Intl.Collator`, this is equivalent to `new Intl.Collator(locales, options).compare(referenceStr, compareString)`.\n\n## [Description](#description)\n\nReturns an integer indicating whether the `referenceStr` comes before, after or is equivalent to the `compareString`.\n\n*   Negative when the `referenceStr` occurs before `compareString`\n*   Positive when the `referenceStr` occurs after `compareString`\n*   Returns `0` if they are equivalent\n\n**Warning:** Do not rely on exact return values of `-1` or `1`!\n\nNegative and positive integer results vary between browsers (as well as between browser versions) because the ECMAScript specification only mandates negative and positive values. Some browsers may return `-2` or `2`, or even some other negative or positive value.\n\n## [Examples](#examples)\n\n### [Using localeCompare()](#using_localecompare)\n\n```\n// The letter \"a\" is before \"c\" yielding a negative value\n\"a\".localeCompare(\"c\"); // -2 or -1 (or some other negative value)\n\n// Alphabetically the word \"check\" comes after \"against\" yielding a positive value\n\"check\".localeCompare(\"against\"); // 2 or 1 (or some other positive value)\n\n// \"a\" and \"a\" are equivalent yielding a neutral value of zero\n\"a\".localeCompare(\"a\"); // 0\n```\n\n### [Sort an array](#sort_an_array)\n\n`localeCompare()` enables case-insensitive sorting for an array.\n\n```\nconst items = [\"réservé\", \"Premier\", \"Cliché\", \"communiqué\", \"café\", \"Adieu\"];\nitems.sort((a, b) => a.localeCompare(b, \"fr\", { ignorePunctuation: true }));\n// ['Adieu', 'café', 'Cliché', 'communiqué', 'Premier', 'réservé']\n```\n\n### [Check browser support for extended arguments](#check_browser_support_for_extended_arguments)\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\n\nTo check whether an implementation supports them, use the `\"i\"` argument (a requirement that illegal language tags are rejected) and look for a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) exception:\n\n```\nfunction localeCompareSupportsLocales() {\n  try {\n    \"foo\".localeCompare(\"bar\", \"i\");\n  } catch (e) {\n    return e.name === \"RangeError\";\n  }\n  return false;\n}\n```\n\n### [Using locales](#using_locales)\n\nThe results provided by `localeCompare()` vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconsole.log(\"ä\".localeCompare(\"z\", \"de\")); // a negative value: in German, ä sorts before z\nconsole.log(\"ä\".localeCompare(\"z\", \"sv\")); // a positive value: in Swedish, ä sorts after z\n```\n\n### [Using options](#using_options)\n\nThe results provided by `localeCompare()` can be customized using the `options` argument:\n\n```\n// in German, ä has a as the base letter\nconsole.log(\"ä\".localeCompare(\"a\", \"de\", { sensitivity: \"base\" })); // 0\n\n// in Swedish, ä and a are separate base letters\nconsole.log(\"ä\".localeCompare(\"a\", \"sv\", { sensitivity: \"base\" })); // a positive value\n```\n\n### [Numeric sorting](#numeric_sorting)\n\n```\n// by default, \"2\" > \"10\"\nconsole.log(\"2\".localeCompare(\"10\")); // 1\n\n// numeric using options:\nconsole.log(\"2\".localeCompare(\"10\", undefined, { numeric: true })); // -1\n\n// numeric using locales tag:\nconsole.log(\"2\".localeCompare(\"10\", \"en-u-kn-true\")); // -1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.localecompare](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.localecompare) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-String.prototype.localeCompare](https://tc39.es/ecma402/#sup-String.prototype.localeCompare) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.localeCompare() - JavaScript | MDN",
  "description": "The localeCompare() method of String values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method simply calls Intl.Collator.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub",
  "markdown": "# String.prototype.sub() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`sub()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<sub>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub) element (`<sub>str</sub>`), which causes this string to be displayed as subscript.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<sub>` start tag, then the text `str`, and then a `</sub>` end tag.\n\n## [Examples](#examples)\n\n### [Using sub()](#using_sub)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.sub();\n```\n\nThis will create the following HTML:\n\nInstead of using `sub()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"sub\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.sub](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.sub) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.sub() - JavaScript | MDN",
  "description": "The sub() method of String values creates a string that embeds this string in a <sub> element (<sub>str</sub>), which causes this string to be displayed as subscript.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd",
  "markdown": "# String.prototype.padEnd() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`padEnd()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values pads this string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of this string.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\npadEnd(targetLength)\npadEnd(targetLength, padString)\n```\n\n### [Parameters](#parameters)\n\n[`targetLength`](#targetlength)\n\nThe length of the resulting string once the current `str` has been padded. If the value is less than or equal to `str.length`, the current string will be returned as-is.\n\n[`padString`](#padstring) Optional\n\nThe string to pad the current `str` with. If `padString` is too long to stay within `targetLength`, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is \" \" (`U+0020`).\n\n### [Return value](#return_value)\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) of the specified `targetLength` with the `padString` applied at the end of the current `str`.\n\n## [Examples](#examples)\n\n### [Using padEnd](#using_padend)\n\n```\n\"abc\".padEnd(10); // \"abc       \"\n\"abc\".padEnd(10, \"foo\"); // \"abcfoofoof\"\n\"abc\".padEnd(6, \"123456\"); // \"abc123\"\n\"abc\".padEnd(1); // \"abc\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.padend](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.padend) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.padEnd() - JavaScript | MDN",
  "description": "The padEnd() method of String values pads this string with a given\n  string (repeated, if needed) so that the resulting string reaches a given length. The\n  padding is applied from the end of this string.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small",
  "markdown": "# String.prototype.small() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`small()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<small>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small) element (`<small>str</small>`), which causes this string to be displayed in a small font.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<small>` start tag, then the text `str`, and then a `</small>` end tag.\n\n## [Examples](#examples)\n\n### [Using small()](#using_small)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.small();\n```\n\nThis will create the following HTML:\n\n```\n<small>Hello, world</small>\n```\n\nInstead of using `small()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"small\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.small](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.small) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.small() - JavaScript | MDN",
  "description": "The small() method of String values creates a string that embeds this string in a <small> element (<small>str</small>), which causes this string to be displayed in a small font.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup",
  "markdown": "# String.prototype.sup() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\nThe **`sup()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values creates a string that embeds this string in a [`<sup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup) element (`<sup>str</sup>`), which causes this string to be displayed as superscript.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string beginning with a `<sup>` start tag, then the text `str`, and then a `</sup>` end tag.\n\n## [Examples](#examples)\n\n### [Using sup()](#using_sup)\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.sup();\n```\n\nThis will create the following HTML:\n\nInstead of using `sup()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement). For example:\n\n```\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"sup\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.sup](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-string.prototype.sup) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.sup() - JavaScript | MDN",
  "description": "The sup() method of String values creates a string that embeds this string in a <sup> element (<sup>str</sup>), which causes this string to be displayed as superscript.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
  "markdown": "# String.prototype.toLocaleLowerCase() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleLowerCase()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string converted to lower case, according to any locale-specific case mappings.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleLowerCase()\ntoLocaleLowerCase(locales)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nUnlike other methods that use the `locales` argument, `toLocaleLowerCase()` does not allow locale matching. Therefore, after checking the validity of the `locales` argument, `toLocaleLowerCase()` always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation.\n\n### [Return value](#return_value)\n\nA new string representing the calling string converted to lower case, according to any locale-specific case mappings.\n\n## [Description](#description)\n\nThe `toLocaleLowerCase()` method returns the value of the string converted to lower case according to any locale-specific case mappings. `toLocaleLowerCase()` does not affect the value of the string itself. In most cases, this will produce the same result as [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.\n\n## [Examples](#examples)\n\n### [Using toLocaleLowerCase()](#using_tolocalelowercase)\n\n```\n\"ALPHABET\".toLocaleLowerCase(); // 'alphabet'\n\n\"\\u0130\".toLocaleLowerCase(\"tr\") === \"i\"; // true\n\"\\u0130\".toLocaleLowerCase(\"en-US\") === \"i\"; // false\n\nconst locales = [\"tr\", \"TR\", \"tr-TR\", \"tr-u-co-search\", \"tr-x-turkish\"];\n\"\\u0130\".toLocaleLowerCase(locales) === \"i\"; // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.tolocalelowercase](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.tolocalelowercase) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-string.prototype.tolocalelowercase](https://tc39.es/ecma402/#sup-string.prototype.tolocalelowercase) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.toLocaleLowerCase() - JavaScript | MDN",
  "description": "The toLocaleLowerCase() method of String values returns this string converted to lower case, according to any locale-specific case mappings.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
  "markdown": "# String.prototype.toLocaleUpperCase() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleUpperCase()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string converted to upper case, according to any locale-specific case mappings.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleUpperCase()\ntoLocaleUpperCase(locales)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nUnlike other methods that use the `locales` argument, `toLocaleUpperCase()` does not allow locale matching. Therefore, after checking the validity of the `locales` argument, `toLocaleUpperCase()` always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation.\n\n### [Return value](#return_value)\n\nA new string representing the calling string converted to upper case, according to any locale-specific case mappings.\n\n## [Description](#description)\n\nThe `toLocaleUpperCase()` method returns the value of the string converted to upper case according to any locale-specific case mappings. `toLocaleUpperCase()` does not affect the value of the string itself. In most cases, this will produce the same result as [`toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.\n\nAlso notice that conversion is not necessarily a 1:1 character mapping, as some characters might result in two (or even more) characters when transformed to upper-case. Therefore the length of the result string can differ from the input length. This also implies that the conversion is not stable, so i.E. the following can return `false`: `x.toLocaleLowerCase() === x.toLocaleUpperCase().toLocaleLowerCase()`\n\n## [Examples](#examples)\n\n### [Using toLocaleUpperCase()](#using_tolocaleuppercase)\n\n```\n\"alphabet\".toLocaleUpperCase(); // 'ALPHABET'\n\n\"Gesäß\".toLocaleUpperCase(); // 'GESÄSS'\n\n\"i\\u0307\".toLocaleUpperCase(\"lt-LT\"); // 'I'\n\nconst locales = [\"lt\", \"LT\", \"lt-LT\", \"lt-u-co-phonebk\", \"lt-x-lietuva\"];\n\"i\\u0307\".toLocaleUpperCase(locales); // 'I'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.tolocaleuppercase](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.tolocaleuppercase) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-string.prototype.tolocaleuppercase](https://tc39.es/ecma402/#sup-string.prototype.tolocaleuppercase) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.toLocaleUpperCase() - JavaScript | MDN",
  "description": "The toLocaleUpperCase() method of String values returns this string converted to upper case, according to any locale-specific case mappings.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart",
  "markdown": "# String.prototype.trimStart() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`trimStart()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values removes whitespace from the beginning of this string and returns a new string, without modifying the original string. `trimLeft()` is an alias of this method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string representing `str` stripped of whitespace from its beginning (left side). Whitespace is defined as [white space](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf the beginning of `str` has no whitespace, a new string is still returned (essentially a copy of `str`).\n\n### [Aliasing](#aliasing)\n\nAfter [`trim()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) was standardized, engines also implemented the non-standard method `trimLeft`. However, for consistency with [`padStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart), when the method got standardized, its name was chosen as `trimStart`. For web compatibility reasons, `trimLeft` remains as an alias to `trimStart`, and they refer to the exact same function object. In some engines this means:\n\n```\nString.prototype.trimLeft.name === \"trimStart\";\n```\n\n## [Examples](#examples)\n\n### [Using trimStart()](#using_trimstart)\n\nThe following example trims whitespace from the start of `str`, but not from its end.\n\n```\nlet str = \"   foo  \";\n\nconsole.log(str.length); // 8\n\nstr = str.trimStart();\nconsole.log(str.length); // 5\nconsole.log(str); // 'foo  '\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.trimstart](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.trimstart) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.trimStart() - JavaScript | MDN",
  "description": "The trimStart() method of String values removes whitespace from the beginning of this string and returns a new string, without modifying the original string. trimLeft() is an alias of this method.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol",
  "markdown": "# Symbol() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol()`** function returns primitive values of type Symbol.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nSymbol()\nSymbol(description)\n```\n\n**Note:** `Symbol()` can only be called without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to construct it with `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`description`](#description) Optional\n\nA string. A description of the symbol which can be used for debugging but not to access the symbol itself.\n\n## [Examples](#examples)\n\n### [Creating symbols](#creating_symbols)\n\nTo create a new primitive symbol, you write `Symbol()` with an optional string as its description:\n\n```\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n```\n\nThe above code creates three new symbols. Note that `Symbol(\"foo\")` does not coerce the string `\"foo\"` into a symbol. It creates a new symbol each time:\n\n```\nSymbol(\"foo\") === Symbol(\"foo\"); // false\n```\n\n### [new Symbol()](#new_symbol)\n\nThe following syntax with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError):\n\n```\nconst sym = new Symbol(); // TypeError\n```\n\nThis prevents authors from creating an explicit `Symbol` wrapper object instead of a new symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, `new Boolean`, `new String` and `new Number`).\n\nIf you really want to create a `Symbol` wrapper object, you can use the `Object()` function:\n\n```\nconst sym = Symbol(\"foo\");\nconst symObj = Object(sym);\ntypeof sym; // \"symbol\"\ntypeof symObj; // \"object\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol() constructor - JavaScript | MDN",
  "description": "The Symbol() function returns primitive values of type Symbol.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for",
  "markdown": "# Symbol.for() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.for()`** static method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nString, required. The key for the symbol (and also used for the description of the symbol).\n\n### [Return value](#return_value)\n\nAn existing symbol with the given key if found; otherwise, a new symbol is created and returned.\n\n## [Description](#description)\n\nIn contrast to `Symbol()`, the `Symbol.for()` function creates a symbol available in a [global symbol registry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) list. `Symbol.for()` does also not necessarily create a new symbol on every call, but checks first if a symbol with the given `key` is already present in the registry. In that case, that symbol is returned. If no symbol with the given key is found, `Symbol.for()` will create a new global symbol.\n\n## [Examples](#examples)\n\n### [Using Symbol.for()](#using_symbol.for)\n\n```\nSymbol.for(\"foo\"); // create a new global symbol\nSymbol.for(\"foo\"); // retrieve the already created symbol\n\n// Same global symbol, but not locally\nSymbol.for(\"bar\") === Symbol.for(\"bar\"); // true\nSymbol(\"bar\") === Symbol(\"bar\"); // false\n\n// The key is also used as the description\nconst sym = Symbol.for(\"mario\");\nsym.toString(); // \"Symbol(mario)\"\n```\n\nTo avoid name clashes with your global symbol keys and other (library code) global symbols, it might be a good idea to prefix your symbols:\n\n```\nSymbol.for(\"mdn.foo\");\nSymbol.for(\"mdn.bar\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.for](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.for) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.for() - JavaScript | MDN",
  "description": "The Symbol.for() static method searches for existing symbols\n  in a runtime-wide symbol registry with the given key and returns it if found. Otherwise\n  a new symbol gets created in the global symbol registry with this key.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd",
  "markdown": "# String.prototype.trimEnd() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`trimEnd()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values removes whitespace from the end of this string and returns a new string, without modifying the original string. `trimRight()` is an alias of this method.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new string representing `str` stripped of whitespace from its end (right side). Whitespace is defined as [white space](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf the end of `str` has no whitespace, a new string is still returned (essentially a copy of `str`).\n\n### [Aliasing](#aliasing)\n\nAfter [`trim()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) was standardized, engines also implemented the non-standard method `trimRight`. However, for consistency with [`padEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd), when the method got standardized, its name was chosen as `trimEnd`. For web compatibility reasons, `trimRight` remains as an alias to `trimEnd`, and they refer to the exact same function object. In some engines this means:\n\n```\nString.prototype.trimRight.name === \"trimEnd\";\n```\n\n## [Examples](#examples)\n\n### [Using trimEnd()](#using_trimend)\n\nThe following example trims whitespace from the end of `str`, but not from its start.\n\n```\nlet str = \"   foo  \";\n\nconsole.log(str.length); // 8\n\nstr = str.trimEnd();\nconsole.log(str.length); // 6\nconsole.log(str); // '   foo'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.trimend](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.trimend) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.trimEnd() - JavaScript | MDN",
  "description": "The trimEnd() method of String values removes whitespace from the end of this string and returns a new string, without modifying the original string. trimRight() is an alias of this method.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString",
  "markdown": "# String.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values returns this string value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the specified string value.\n\n## [Description](#description)\n\nThe [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For `String` values, the `toString` method returns the string itself (if it's a primitive) or the string that the `String` object wraps. It has the exact same implementation as [`String.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf).\n\nThe `toString()` method requires its `this` value to be a `String` primitive or wrapper object. It throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for other `this` values without attempting to coerce them to string values.\n\nBecause `String` doesn't have a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `String` _object_ is used in a context expecting a string, such as in a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals). However, String _primitive_ values do not consult the `toString()` method to be [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — since they are already strings, no conversion is performed.\n\n```\nString.prototype.toString = () => \"Overridden\";\nconsole.log(`${\"foo\"}`); // \"foo\"\nconsole.log(`${new String(\"foo\")}`); // \"Overridden\"\n```\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\nThe following example displays the string value of a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object:\n\n```\nconst x = new String(\"Hello world\");\n\nconsole.log(x.toString()); // \"Hello world\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string.prototype.tostring](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "String.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of String values returns this string value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction",
  "markdown": "# GeneratorFunction() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`GeneratorFunction()`** constructor creates [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction) objects.\n\nNote that `GeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```\nconst GeneratorFunction = function* () {}.constructor;\n```\n\nThe `GeneratorFunction()` constructor is not intended to be used directly, and all caveats mentioned in the [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) description apply to `GeneratorFunction()`.\n\n## [Syntax](#syntax)\n\n```\nnew GeneratorFunction(functionBody)\nnew GeneratorFunction(arg1, functionBody)\nnew GeneratorFunction(arg1, arg2, functionBody)\nnew GeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nGeneratorFunction(functionBody)\nGeneratorFunction(arg1, functionBody)\nGeneratorFunction(arg1, arg2, functionBody)\nGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n**Note:** `GeneratorFunction()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `GeneratorFunction` instance.\n\n### [Parameters](#parameters)\n\n## [Examples](#examples)\n\n### [Creating and using a GeneratorFunction() constructor](#creating_and_using_a_generatorfunction_constructor)\n\n```\nconst GeneratorFunction = function* () {}.constructor;\nconst g = new GeneratorFunction(\"a\", \"yield a * 2\");\nconst iterator = g(10);\nconsole.log(iterator.next().value); // 20\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generatorfunction-constructor](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "GeneratorFunction() constructor - JavaScript | MDN",
  "description": "The GeneratorFunction() constructor creates GeneratorFunction objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor",
  "markdown": "# Symbol.keyFor() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.keyFor()`** static method retrieves a shared symbol key from the global symbol registry for the given symbol.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`sym`](#sym)\n\nSymbol, required. The symbol to find a key for.\n\n### [Return value](#return_value)\n\nA string representing the key for the given symbol if one is found on the [global registry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry); otherwise, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n## [Examples](#examples)\n\n### [Using keyFor()](#using_keyfor)\n\n```\nconst globalSym = Symbol.for(\"foo\"); // create a new global symbol\nSymbol.keyFor(globalSym); // \"foo\"\n\nconst localSym = Symbol();\nSymbol.keyFor(localSym); // undefined\n\n// well-known symbols are not symbols registered\n// in the global symbol registry\nSymbol.keyFor(Symbol.iterator); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.keyfor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.keyfor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.keyFor() - JavaScript | MDN",
  "description": "The Symbol.keyFor() static method retrieves a shared symbol\n  key from the global symbol registry for the given symbol.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance",
  "markdown": "# Symbol.hasInstance - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.hasInstance`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@hasInstance`. The [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@hasInstance`.\n\n| Property attributes of `Symbol.hasInstance` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `instanceof` operator uses the following algorithm to calculate the return value of `object instanceof constructor`:\n\n1.  If `constructor` has a `@@hasInstance` method, then call it with `object` as the first argument and return the result, [coerced to a boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion). Throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if `constructor` is not an object, or if `constructor[@@hasInstance]` is not one of `null`, `undefined`, or a function.\n2.  Otherwise, if `constructor` doesn't have a `@@hasInstance` method (`constructor[@@hasInstance]` is `null` or `undefined`), then determine the result using the same algorithm as [`Function.prototype[@@hasInstance]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance). Throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if `constructor` is not a function.\n\nBecause all functions inherit from `Function.prototype` by default, most of the time, the [`Function.prototype[@@hasInstance]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance) method specifies the behavior of `instanceof` when the right-hand side is a function.\n\n## [Examples](#examples)\n\n### [Custom instanceof behavior](#custom_instanceof_behavior)\n\nYou could implement your custom `instanceof` behavior like this, for example:\n\n```\nclass MyArray {\n  static [Symbol.hasInstance](instance) {\n    return Array.isArray(instance);\n  }\n}\nconsole.log([] instanceof MyArray); // true\n```\n\n```\nfunction MyArray() {}\nObject.defineProperty(MyArray, Symbol.hasInstance, {\n  value(instance) {\n    return Array.isArray(instance);\n  },\n});\nconsole.log([] instanceof MyArray); // true\n```\n\n### [Checking the instance of an object](#checking_the_instance_of_an_object)\n\nJust in the same manner at which you can check if an object is an instance of a class using the `instanceof` keyword, we can also use `Symbol.hasInstance` for such checks.\n\n```\nclass Animal {\n  constructor() {}\n}\n\nconst cat = new Animal();\n\nconsole.log(Animal[Symbol.hasInstance](cat)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.hasinstance](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.hasinstance) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.hasInstance - JavaScript | MDN",
  "description": "The Symbol.hasInstance static data property represents the well-known symbol @@hasInstance. The instanceof operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species",
  "markdown": "# Symbol.species - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.species`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@species`. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.\n\n**Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@species`.\n\n| Property attributes of `Symbol.species` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `@@species` accessor property allows subclasses to override the default constructor for objects. This specifies a protocol about how instances should be copied. For example, when you use copying methods of arrays, such as [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). the `map()` method uses `instance.constructor[Symbol.species]` to get the constructor for constructing the new array. For more information, see [subclassing built-ins](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#subclassing_built-ins).\n\nAll built-in implementations of `@@species` return the `this` value, which is the current instance's constructor. This allows copying methods to create instances of derived classes rather than the base class — for example, `map()` will return an array of the same type as the original array.\n\n## [Examples](#examples)\n\n### [Using species](#using_species)\n\nYou might want to return [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects in your derived array class `MyArray`. For example, when using methods such as [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) that return the default constructor, you want these methods to return a parent `Array` object, instead of the `MyArray` object. The `species` symbol lets you do this:\n\n```\nclass MyArray extends Array {\n  // Overwrite species to the parent Array constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\nconst a = new MyArray(1, 2, 3);\nconst mapped = a.map((x) => x * x);\n\nconsole.log(mapped instanceof MyArray); // false\nconsole.log(mapped instanceof Array); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.species](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.species - JavaScript | MDN",
  "description": "The Symbol.species static data property represents the well-known symbol @@species. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search",
  "markdown": "# Symbol.search - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.search`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@search`. The [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.\n\nFor more information, see [`RegExp.prototype[@@search]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search) and [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@search`.\n\n| Property attributes of `Symbol.search` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [Custom string search](#custom_string_search)\n\n```\nclass caseInsensitiveSearch {\n  constructor(value) {\n    this.value = value.toLowerCase();\n  }\n  [Symbol.search](string) {\n    return string.toLowerCase().indexOf(this.value);\n  }\n}\n\nconsole.log(\"foobar\".search(new caseInsensitiveSearch(\"BaR\"))); // 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.search](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.search) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.search - JavaScript | MDN",
  "description": "The Symbol.search static data property represents the well-known symbol @@search. The String.prototype.search() method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString",
  "markdown": "# Symbol.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values returns a string representing this symbol value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA string representing the specified symbol value.\n\n## [Description](#description)\n\nThe [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) object overrides the `toString` method of [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object); it does not inherit [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). For `Symbol` values, the `toString` method returns a descriptive string in the form `\"Symbol(description)\"`, where `description` is the symbol's [description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description).\n\nThe `toString()` method requires its `this` value to be a `Symbol` primitive or wrapper object. It throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) for other `this` values without attempting to coerce them to symbol values.\n\nBecause `Symbol` has a [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) method, that method always takes priority over `toString()` when a `Symbol` object is [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). However, because `Symbol.prototype[@@toPrimitive]()` returns a symbol primitive, and symbol primitives throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) when implicitly converted to a string, the `toString()` method is never implicitly called by the language. To stringify a symbol, you must explicitly call its `toString()` method or use the [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String#using_string_to_stringify_a_symbol) function.\n\n## [Examples](#examples)\n\n### [Using toString()](#using_tostring)\n\n```\nSymbol(\"desc\").toString(); // \"Symbol(desc)\"\n\n// well-known symbols\nSymbol.iterator.toString(); // \"Symbol(Symbol.iterator)\"\n\n// global symbols\nSymbol.for(\"foo\").toString(); // \"Symbol(foo)\"\n```\n\n### [Implicitly calling toString()](#implicitly_calling_tostring)\n\nThe only way to make JavaScript implicitly call `toString()` instead of [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) on a symbol wrapper object is by [deleting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) the `@@toPrimitive` method first.\n\n**Warning:** You should not do this in practice. Never mutate built-in objects unless you know exactly what you're doing.\n\n```\ndelete Symbol.prototype[Symbol.toPrimitive];\nconsole.log(`${Object(Symbol(\"foo\"))}`); // \"Symbol(foo)\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.prototype.tostring](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.prototype.tostring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of Symbol values returns a string representing this symbol value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable",
  "markdown": "# Symbol.isConcatSpreadable - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.isConcatSpreadable`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@isConcatSpreadable`. The [`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@isConcatSpreadable`.\n\n| Property attributes of `Symbol.isConcatSpreadable` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `@@isConcatSpreadable` symbol (`Symbol.isConcatSpreadable`) can be defined as an own or inherited property and its value is a boolean. It can control behavior for arrays and array-like objects:\n\n*   For array objects, the default behavior is to spread (flatten) elements. `Symbol.isConcatSpreadable` can avoid flattening in these cases.\n*   For array-like objects, the default behavior is no spreading or flattening. `Symbol.isConcatSpreadable` can force flattening in these cases.\n\n## [Examples](#examples)\n\n### [Arrays](#arrays)\n\nBy default, [`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) spreads (flattens) arrays into its result:\n\n```\nconst alpha = [\"a\", \"b\", \"c\"];\nconst numeric = [1, 2, 3];\n\nconst alphaNumeric = alpha.concat(numeric);\n\nconsole.log(alphaNumeric); // Result: ['a', 'b', 'c', 1, 2, 3]\n```\n\nWhen setting `Symbol.isConcatSpreadable` to `false`, you can disable the default behavior:\n\n```\nconst alpha = [\"a\", \"b\", \"c\"];\nconst numeric = [1, 2, 3];\n\nnumeric[Symbol.isConcatSpreadable] = false;\nconst alphaNumeric = alpha.concat(numeric);\n\nconsole.log(alphaNumeric); // Result: ['a', 'b', 'c', [1, 2, 3] ]\n```\n\n### [Array-like objects](#array-like_objects)\n\nFor array-like objects, the default is to not spread. `Symbol.isConcatSpreadable` needs to be set to `true` in order to get a flattened array:\n\n```\nconst x = [1, 2, 3];\n\nconst fakeArray = {\n  [Symbol.isConcatSpreadable]: true,\n  length: 2,\n  0: \"hello\",\n  1: \"world\",\n};\n\nx.concat(fakeArray); // [1, 2, 3, \"hello\", \"world\"]\n```\n\n**Note:** The `length` property is used to control the number of object properties to be added. In the above example, `length:2` indicates two properties has to be added.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.isconcatspreadable](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.isconcatspreadable) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.isConcatSpreadable - JavaScript | MDN",
  "description": "The Symbol.isConcatSpreadable static data property represents the well-known symbol @@isConcatSpreadable. The Array.prototype.concat() method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables",
  "markdown": "# Symbol.unscopables - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.unscopables`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@unscopables`. The [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the `with` environment.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@unscopables`.\n\n| Property attributes of `Symbol.unscopables` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nThe `@@unscopables` symbol (accessed via `Symbol.unscopables`) can be defined on any object to exclude property names from being exposed as lexical variables in [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) environment bindings. Note that when using [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), `with` statements are not available, and this symbol is likely not needed.\n\nSetting a property of the `@@unscopables` object to `true` (or any [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) value) will make the corresponding property of the `with` scope object _unscopable_ and therefore won't be introduced to the `with` body scope. Setting a property to `false` (or any [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value) will make it _scopable_ and thus appear as lexical scope variables.\n\nWhen deciding whether `x` is unscopable, the entire prototype chain of the `@@unscopables` property is looked up for a property called `x`. This means if you declared `@@unscopables` as a plain object, `Object.prototype` properties like [`toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) would become unscopable as well, which may cause backward incompatibility for legacy code assuming those properties are normally scoped (see [an example below](#avoid_using_a_non-null-prototype_object_as_unscopables)). You are advised to make your custom `@@unscopables` property have `null` as its prototype, like [`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables) does.\n\nThis protocol is also utilized by DOM APIs, such as [`Element.prototype.append()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/append).\n\n## [Examples](#examples)\n\n### [Scoping in with statements](#scoping_in_with_statements)\n\nThe following code works fine in ES5 and below. However, in ECMAScript 2015, the [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) method was introduced. That means that inside a `with` environment, \"values\" would now be the `Array.prototype.values()` method and not the variable outside the `with` statement.\n\n```\nvar values = [];\n\nwith (values) {\n  // If @@unscopables did not exist, values would become Array.prototype.values starting with ECMAScript 2015.\n  // And an error would have occurred.\n  values.push(\"something\");\n}\n```\n\nThe code containing `with (values)` caused some websites to malfunction in Firefox when `Array.prototype.values()` was added ([Firefox Bug 883914](https://bugzil.la/883914)). Furthermore, this implies that any future array method addition may be breaking if it implicitly changes the `with` scope. Therefore, the `@@unscopables` symbol was introduced and implemented on `Array` as [`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables) to prevent some of the Array methods being scoped into the `with` statement.\n\n### [Unscopables in objects](#unscopables_in_objects)\n\nYou can also set `@@unscopables` for your own objects.\n\n```\nconst obj = {\n  foo: 1,\n  bar: 2,\n  baz: 3,\n};\n\nobj[Symbol.unscopables] = {\n  // Make the object have `null` prototype to prevent\n  // `Object.prototype` methods from being unscopable\n  __proto__: null,\n  // `foo` will be scopable\n  foo: false,\n  // `bar` will be unscopable\n  bar: true,\n  // `baz` is omitted; because `undefined` is falsy, it is also scopable (default)\n};\n\nwith (obj) {\n  console.log(foo); // 1\n  console.log(bar); // ReferenceError: bar is not defined\n  console.log(baz); // 3\n}\n```\n\n### [Avoid using a non-null-prototype object as @@unscopables](#avoid_using_a_non-null-prototype_object_as_unscopables)\n\nDeclaring `@@unscopables` as a plain object without eliminating its prototype may cause subtle bugs. Consider the following code working before `@@unscopables`:\n\n```\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n};\n\nwith (character) {\n  console.log(name + ' says: \"' + toString() + '\"'); // Yoda says: \"Use with statements, you must not\"\n}\n```\n\nTo preserve backward compatibility, you decided to add an `@@unscopables` property when adding more properties to `character`. You may naïvely do it like:\n\n```\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n  student: \"Luke\",\n  [Symbol.unscopables]: {\n    // Make `student` unscopable\n    student: true,\n  },\n};\n```\n\nHowever, the code above now breaks:\n\n```\nwith (character) {\n  console.log(name + ' says: \"' + toString() + '\"'); // Yoda says: \"[object Undefined]\"\n}\n```\n\nThis is because when looking up `character[Symbol.unscopables].toString`, it returns [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString), which is a truthy value, thus making the `toString()` call in the `with()` statement reference `globalThis.toString()` instead — and because it's called without a [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), `this` is `undefined`, making it return `[object Undefined]`.\n\nEven when the method is not overridden by `character`, making it unscopable will change the value of `this`.\n\n```\nconst proto = {};\nconst obj = { __proto__: proto };\n\nwith (proto) {\n  console.log(isPrototypeOf(obj)); // true; `isPrototypeOf` is scoped and `this` is `proto`\n}\n\nproto[Symbol.unscopables] = {};\n\nwith (proto) {\n  console.log(isPrototypeOf(obj)); // TypeError: Cannot convert undefined or null to object\n  // `isPrototypeOf` is unscoped and `this` is undefined\n}\n```\n\nTo fix this, always make sure `@@unscopables` only contains properties you wish to be unscopable, without `Object.prototype` properties.\n\n```\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n  student: \"Luke\",\n  [Symbol.unscopables]: {\n    // Make the object have `null` prototype to prevent\n    // `Object.prototype` methods from being unscopable\n    __proto__: null,\n    // Make `student` unscopable\n    student: true,\n  },\n};\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.unscopables](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.unscopables) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.unscopables - JavaScript | MDN",
  "description": "The Symbol.unscopables static data property represents the well-known symbol @@unscopables. The with statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the with environment.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf",
  "markdown": "# Symbol.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values returns this symbol value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe primitive value of the specified [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) object.\n\n## [Description](#description)\n\nThe `valueOf()` method of [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) returns the primitive value of a Symbol object as a Symbol data type.\n\nJavaScript calls the `valueOf()` method to convert an object to a primitive value. You rarely need to invoke the `valueOf()` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\n## [Examples](#examples)\n\n### [Using valueOf()](#using_valueof)\n\n```\nconst sym = Symbol(\"example\");\nsym === sym.valueOf(); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.prototype.valueof](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.prototype.valueOf() - JavaScript | MDN",
  "description": "The valueOf() method of Symbol values returns this symbol value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split",
  "markdown": "# Symbol.split - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Symbol.split`** static data property represents the [well-known symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@split`. The [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.\n\nFor more information, see[`RegExp.prototype[@@split]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split) and [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe well-known symbol `@@split`.\n\n| Property attributes of `Symbol.split` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Examples](#examples)\n\n### [Custom reverse split](#custom_reverse_split)\n\n```\nclass ReverseSplit {\n  [Symbol.split](string) {\n    const array = string.split(\" \");\n    return array.reverse();\n  }\n}\n\nconsole.log(\"Another one bites the dust\".split(new ReverseSplit()));\n// [ \"dust\", \"the\", \"bites\", \"one\", \"Another\" ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol.split](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol.split) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Symbol.split - JavaScript | MDN",
  "description": "The Symbol.split static data property represents the well-known symbol @@split. The String.prototype.split() method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
  "markdown": "# Object.assign() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.assign()`** static method copies all [enumerable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) [own properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) from one or more _source objects_ to a _target object_. It returns the modified target object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.assign(target)\nObject.assign(target, source1)\nObject.assign(target, source1, source2)\nObject.assign(target, source1, source2, /* …, */ sourceN)\n```\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target object — what to apply the sources' properties to, which is returned after it is modified.\n\n[`source1`](#source1), …, `sourceN`\n\nThe source object(s) — objects containing the properties you want to apply.\n\n### [Return value](#return_value)\n\nThe target object.\n\n## [Description](#description)\n\nProperties in the target object are overwritten by properties in the sources if they have the same [key](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). Later sources' properties overwrite earlier ones.\n\nThe `Object.assign()` method only copies _enumerable_ and _own_ properties from a source object to a target object. It uses `[[Get]]` on the source and `[[Set]]` on the target, so it will invoke [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set). Therefore it _assigns_ properties, versus copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.\n\nFor copying property definitions (including their enumerability) into prototypes, use [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) and [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) instead.\n\nBoth [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) and [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties are copied.\n\nIn case of an error, for example if a property is non-writable, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is raised, and the `target` object is changed if any properties are added before the error is raised.\n\n**Note:** `Object.assign()` does not throw on [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) sources.\n\n## [Examples](#examples)\n\n### [Cloning an object](#cloning_an_object)\n\n```\nconst obj = { a: 1 };\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n```\n\n### [Warning for Deep Clone](#warning_for_deep_clone)\n\nFor [deep cloning](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy), we need to use alternatives like [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone), because `Object.assign()` copies property values.\n\nIf the source value is a reference to an object, it only copies the reference value.\n\n```\nconst obj1 = { a: 0, b: { c: 0 } };\nconst obj2 = Object.assign({}, obj1);\nconsole.log(obj2); // { a: 0, b: { c: 0 } }\n\nobj1.a = 1;\nconsole.log(obj1); // { a: 1, b: { c: 0 } }\nconsole.log(obj2); // { a: 0, b: { c: 0 } }\n\nobj2.a = 2;\nconsole.log(obj1); // { a: 1, b: { c: 0 } }\nconsole.log(obj2); // { a: 2, b: { c: 0 } }\n\nobj2.b.c = 3;\nconsole.log(obj1); // { a: 1, b: { c: 3 } }\nconsole.log(obj2); // { a: 2, b: { c: 3 } }\n\n// Deep Clone\nconst obj3 = { a: 0, b: { c: 0 } };\nconst obj4 = structuredClone(obj3);\nobj3.a = 4;\nobj3.b.c = 4;\nconsole.log(obj4); // { a: 0, b: { c: 0 } }\n```\n\n### [Merging objects](#merging_objects)\n\n```\nconst o1 = { a: 1 };\nconst o2 = { b: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1); // { a: 1, b: 2, c: 3 }, target object itself is changed.\n```\n\n### [Merging objects with same properties](#merging_objects_with_same_properties)\n\n```\nconst o1 = { a: 1, b: 1, c: 1 };\nconst o2 = { b: 2, c: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign({}, o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\n```\n\nThe properties are overwritten by other objects that have the same properties later in the parameters order.\n\n### [Copying symbol-typed properties](#copying_symbol-typed_properties)\n\n```\nconst o1 = { a: 1 };\nconst o2 = { [Symbol(\"foo\")]: 2 };\n\nconst obj = Object.assign({}, o1, o2);\nconsole.log(obj); // { a : 1, [Symbol(\"foo\")]: 2 } (cf. bug 1207182 on Firefox)\nObject.getOwnPropertySymbols(obj); // [Symbol(foo)]\n```\n\n### [Properties on the prototype chain and non-enumerable properties cannot be copied](#properties_on_the_prototype_chain_and_non-enumerable_properties_cannot_be_copied)\n\n```\nconst obj = Object.create(\n  // foo is on obj's prototype chain.\n  { foo: 1 },\n  {\n    bar: {\n      value: 2, // bar is a non-enumerable property.\n    },\n    baz: {\n      value: 3,\n      enumerable: true, // baz is an own enumerable property.\n    },\n  },\n);\n\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 }\n```\n\n### [Primitives will be wrapped to objects](#primitives_will_be_wrapped_to_objects)\n\n```\nconst v1 = \"abc\";\nconst v2 = true;\nconst v3 = 10;\nconst v4 = Symbol(\"foo\");\n\nconst obj = Object.assign({}, v1, null, v2, undefined, v3, v4);\n// Primitives will be wrapped, null and undefined will be ignored.\n// Note, only string wrappers can have own enumerable properties.\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n```\n\n### [Exceptions will interrupt the ongoing copying task](#exceptions_will_interrupt_the_ongoing_copying_task)\n\n```\nconst target = Object.defineProperty({}, \"foo\", {\n  value: 1,\n  writable: false,\n}); // target.foo is a read-only property\n\nObject.assign(target, { bar: 2 }, { foo2: 3, foo: 3, foo3: 3 }, { baz: 4 });\n// TypeError: \"foo\" is read-only\n// The Exception is thrown when assigning target.foo\n\nconsole.log(target.bar); // 2, the first source was copied successfully.\nconsole.log(target.foo2); // 3, the first property of the second source was copied successfully.\nconsole.log(target.foo); // 1, exception is thrown here.\nconsole.log(target.foo3); // undefined, assign method has finished, foo3 will not be copied.\nconsole.log(target.baz); // undefined, the third source will not be copied either.\n```\n\n### [Copying accessors](#copying_accessors)\n\n```\nconst obj = {\n  foo: 1,\n  get bar() {\n    return 2;\n  },\n};\n\nlet copy = Object.assign({}, obj);\nconsole.log(copy);\n// { foo: 1, bar: 2 }\n// The value of copy.bar is obj.bar's getter's return value.\n\n// This is an assign function that copies full descriptors\nfunction completeAssign(target, ...sources) {\n  sources.forEach((source) => {\n    const descriptors = Object.keys(source).reduce((descriptors, key) => {\n      descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n      return descriptors;\n    }, {});\n\n    // By default, Object.assign copies enumerable Symbols, too\n    Object.getOwnPropertySymbols(source).forEach((sym) => {\n      const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n      if (descriptor.enumerable) {\n        descriptors[sym] = descriptor;\n      }\n    });\n    Object.defineProperties(target, descriptors);\n  });\n  return target;\n}\n\ncopy = completeAssign({}, obj);\nconsole.log(copy);\n// { foo:1, get bar() { return 2 } }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.assign](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.assign() - JavaScript | MDN",
  "description": "The Object.assign() static method\n  copies all enumerable\n  own properties from one or more\n  source objects to a target object. It returns the modified target\n  object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values",
  "markdown": "# Object.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.values()`** static method returns an array of a given object's own enumerable string-keyed property values.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nAn array containing the given object's own enumerable string-keyed property values.\n\n## [Description](#description)\n\n`Object.values()` returns an array whose elements are values of enumerable string-keyed properties found directly upon `object`. This is the same as iterating with a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.values()` is the same as that provided by a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\nIf you need the property keys, use [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) instead. If you need both the property keys and values, use [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) instead.\n\n## [Examples](#examples)\n\n### [Using Object.values()](#using_object.values)\n\n```\nconst obj = { foo: \"bar\", baz: 42 };\nconsole.log(Object.values(obj)); // ['bar', 42]\n\n// Array-like object\nconst arrayLikeObj1 = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.values(arrayLikeObj1)); // ['a', 'b', 'c']\n\n// Array-like object with random key ordering\n// When using numeric keys, the values are returned in the keys' numerical order\nconst arrayLikeObj2 = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.values(arrayLikeObj2)); // ['b', 'c', 'a']\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = \"bar\";\nconsole.log(Object.values(myObj)); // ['bar']\n```\n\n### [Using Object.values() on primitives](#using_object.values_on_primitives)\n\nNon-object arguments are [coerced to objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```\n// Strings have indices as enumerable own properties\nconsole.log(Object.values(\"foo\")); // ['f', 'o', 'o']\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.values(100)); // []\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.values](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.values() - JavaScript | MDN",
  "description": "The Object.values() static method returns an array of a given object's own enumerable string-keyed property values.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors",
  "markdown": "# Object.getOwnPropertyDescriptors() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.getOwnPropertyDescriptors()`** static method returns all own property descriptors of a given object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.getOwnPropertyDescriptors(obj)\n```\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object for which to get all own property descriptors.\n\n### [Return value](#return_value)\n\nAn object containing all own property descriptors of an object. Might be an empty object, if there are no properties.\n\n## [Description](#description)\n\nThis method permits examination of the precise description of all own properties of an object. A _property_ in JavaScript consists of either a string-valued name or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) and a property descriptor. Further information about property descriptor types and their attributes can be found in [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\nA _property descriptor_ is a record with some of the following attributes:\n\n[`value`](#value)\n\nThe value associated with the property (data descriptors only).\n\n[`writable`](#writable)\n\n`true` if and only if the value associated with the property may be changed (data descriptors only).\n\n[`get`](#get)\n\nA function which serves as a getter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no getter (accessor descriptors only).\n\n[`set`](#set)\n\nA function which serves as a setter for the property, or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if there is no setter (accessor descriptors only).\n\n[`configurable`](#configurable)\n\n`true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n\n[`enumerable`](#enumerable)\n\n`true` if and only if this property shows up during enumeration of the properties on the corresponding object.\n\n## [Examples](#examples)\n\n### [Creating a shallow copy](#creating_a_shallow_copy)\n\nWhereas the [`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) method will only copy enumerable and own properties from a source object to a target object, you are able to use this method and [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) for a [shallow copy](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) between two unknown objects:\n\n```\nObject.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj),\n);\n```\n\n### [Creating a subclass](#creating_a_subclass)\n\nA typical way of creating a subclass is to define the subclass, set its prototype to an instance of the superclass, and then define properties on that instance. This can get awkward especially for getters and setters. Instead, you can use this code to set the prototype:\n\n```\nfunction superclass() {}\nsuperclass.prototype = {\n  // Define the superclass constructor, methods, and properties here\n};\nfunction subclass() {}\nsubclass.prototype = Object.create(superclass.prototype, {\n  // Define the subclass constructor, methods, and properties here\n});\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.getownpropertydescriptors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.getownpropertydescriptors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.getOwnPropertyDescriptors() - JavaScript | MDN",
  "description": "The Object.getOwnPropertyDescriptors() static method returns all\n  own property descriptors of a given object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError",
  "markdown": "# SyntaxError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`SyntaxError()`** constructor creates [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew SyntaxError()\nnew SyntaxError(message)\nnew SyntaxError(message, options)\nnew SyntaxError(message, fileName)\nnew SyntaxError(message, fileName, lineNumber)\n\nSyntaxError()\nSyntaxError(message)\nSyntaxError(message, options)\nSyntaxError(message, fileName)\nSyntaxError(message, fileName, lineNumber)\n```\n\n**Note:** `SyntaxError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `SyntaxError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n### [Catching a SyntaxError](#catching_a_syntaxerror)\n\n```\ntry {\n  eval(\"hoo bar\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message);\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a SyntaxError](#creating_a_syntaxerror)\n\n```\ntry {\n  throw new SyntaxError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "SyntaxError() constructor - JavaScript | MDN",
  "description": "The SyntaxError() constructor creates SyntaxError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/EvalError",
  "markdown": "# EvalError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`EvalError()`** constructor creates [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew EvalError()\nnew EvalError(message)\nnew EvalError(message, options)\nnew EvalError(message, fileName)\nnew EvalError(message, fileName, lineNumber)\n\nEvalError()\nEvalError(message)\nEvalError(message, options)\nEvalError(message, fileName)\nEvalError(message, fileName, lineNumber)\n```\n\n**Note:** `EvalError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `EvalError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n`EvalError` is not used in the current ECMAScript specification and will thus not be thrown by the runtime. However, the object itself remains for backwards compatibility with earlier versions of the specification.\n\n### [Creating an EvalError](#creating_an_evalerror)\n\n```\ntry {\n  throw new EvalError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof EvalError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"EvalError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "EvalError() constructor - JavaScript | MDN",
  "description": "The EvalError() constructor creates EvalError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array",
  "markdown": "# Int16Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int16Array()`** constructor creates [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Int16Array()\nnew Int16Array(length)\nnew Int16Array(typedArray)\nnew Int16Array(object)\n\nnew Int16Array(buffer)\nnew Int16Array(buffer, byteOffset)\nnew Int16Array(buffer, byteOffset, length)\n```\n\n**Note:** `Int16Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create an Int16Array](#different_ways_to_create_an_int16array)\n\n```\n// From a length\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\nconsole.log(int16.length); // 2\nconsole.log(int16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Int16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Int16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int16FromIterable = new Int16Array(iterable);\nconsole.log(int16FromIterable);\n// Int16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Int16Array() constructor - JavaScript | MDN",
  "description": "The Int16Array() constructor creates Int16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/TypeError",
  "markdown": "# TypeError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`TypeError()`** constructor creates [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew TypeError()\nnew TypeError(message)\nnew TypeError(message, options)\nnew TypeError(message, fileName)\nnew TypeError(message, fileName, lineNumber)\n\nTypeError()\nTypeError(message)\nTypeError(message, options)\nTypeError(message, fileName)\nTypeError(message, fileName, lineNumber)\n```\n\n**Note:** `TypeError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `TypeError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n### [Catching a TypeError](#catching_a_typeerror)\n\n```\ntry {\n  null.f();\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"null has no properties\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a TypeError](#creating_a_typeerror)\n\n```\ntry {\n  throw new TypeError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "TypeError() constructor - JavaScript | MDN",
  "description": "The TypeError() constructor creates TypeError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/InternalError",
  "markdown": "# InternalError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`InternalError()`** constructor creates [`InternalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew InternalError()\nnew InternalError(message)\nnew InternalError(message, options)\nnew InternalError(message, fileName)\nnew InternalError(message, fileName, lineNumber)\n\nInternalError()\nInternalError(message)\nInternalError(message, options)\nInternalError(message, fileName)\nInternalError(message, fileName, lineNumber)\n```\n\n**Note:** `InternalError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `InternalError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception\n\n## [Examples](#examples)\n\n### [Creating a new InternalError](#creating_a_new_internalerror)\n\n```\nnew InternalError(\"Engine failure\");\n```\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "InternalError() constructor - JavaScript | MDN",
  "description": "The InternalError() constructor creates InternalError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/f16round",
  "markdown": "# Math.f16round() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.f16round()`** static method returns the nearest [16-bit half precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) float representation of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nMath.f16round(doubleFloat)\n```\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nThe nearest [16-bit half precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) float representation of `doubleFloat`.\n\n## [Description](#description)\n\n`Math.f16round` is the 16-bit counterpart of [`Math.fround()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround). It is intended to smooth some rough edges when interacting with float16 numbers, such as when reading from a [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array). Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a \"round to even\" on the 10th bit of the mantissa, and sets all following mantissa bits to `0`. If the number is outside the range of a 16-bit float, [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) or `-Infinity` is returned.\n\nBecause `f16round()` is a static method of `Math`, you always use it as `Math.f16round()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.f16round()](#using_math.f16round)\n\nThe number 1.5 can be precisely represented in the binary numeral system, and is identical in 16-bit and 64-bit:\n\n```\nMath.f16round(1.5); // 1.5\nMath.f16round(1.5) === 1.5; // true\n```\n\nHowever, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 16-bit and 64-bit:\n\n```\nMath.f16round(1.337); // 1.3369140625\nMath.f16round(1.337) === 1.337; // false\n```\n\n100000 is too big for a 16-bit float, so `Infinity` is returned:\n\n```\nMath.f16round(100000); // Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Float16Array  <br>\\# sec-math.f16round](https://tc39.es/proposal-float16array/#sec-math.f16round) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.f16round() - JavaScript | MDN",
  "description": "The Math.f16round() static method returns the nearest 16-bit half precision float representation of a number.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array",
  "markdown": "# Int32Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int32Array()`** constructor creates [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Int32Array()\nnew Int32Array(length)\nnew Int32Array(typedArray)\nnew Int32Array(object)\n\nnew Int32Array(buffer)\nnew Int32Array(buffer, byteOffset)\nnew Int32Array(buffer, byteOffset, length)\n```\n\n**Note:** `Int32Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create an Int32Array](#different_ways_to_create_an_int32array)\n\n```\n// From a length\nconst int32 = new Int32Array(2);\nint32[0] = 42;\nconsole.log(int32[0]); // 42\nconsole.log(int32.length); // 2\nconsole.log(int32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Int32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Int32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int32FromIterable = new Int32Array(iterable);\nconsole.log(int32FromIterable);\n// Int32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Int32Array() constructor - JavaScript | MDN",
  "description": "The Int32Array() constructor creates Int32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array",
  "markdown": "# Uint32Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint32Array()`** constructor creates [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint32Array()\nnew Uint32Array(length)\nnew Uint32Array(typedArray)\nnew Uint32Array(object)\n\nnew Uint32Array(buffer)\nnew Uint32Array(buffer, byteOffset)\nnew Uint32Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint32Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint32Array](#different_ways_to_create_a_uint32array)\n\n```\n// From a length\nconst uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Uint32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Uint32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint32FromIterable = new Uint32Array(iterable);\nconsole.log(uint32FromIterable);\n// Uint32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Uint32Array() constructor - JavaScript | MDN",
  "description": "The Uint32Array() constructor creates Uint32Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray",
  "markdown": "# Uint8ClampedArray() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8ClampedArray()`** constructor creates [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint8ClampedArray()\nnew Uint8ClampedArray(length)\nnew Uint8ClampedArray(typedArray)\nnew Uint8ClampedArray(object)\n\nnew Uint8ClampedArray(buffer)\nnew Uint8ClampedArray(buffer, byteOffset)\nnew Uint8ClampedArray(buffer, byteOffset, length)\n```\n\n**Note:** `Uint8ClampedArray()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8ClampedArray](#different_ways_to_create_a_uint8clampedarray)\n\n```\n// From a length\nconst uint8c = new Uint8ClampedArray(2);\nuint8c[0] = 42;\nuint8c[1] = 1337;\nconsole.log(uint8c[0]); // 42\nconsole.log(uint8c[1]); // 255 (clamped)\nconsole.log(uint8c.length); // 2\nconsole.log(uint8c.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8ClampedArray([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8ClampedArray(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8cFromIterable = new Uint8ClampedArray(iterable);\nconsole.log(uint8cFromIterable);\n// Uint8ClampedArray [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Uint8ClampedArray() constructor - JavaScript | MDN",
  "description": "The Uint8ClampedArray() constructor creates Uint8ClampedArray objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array",
  "markdown": "# Uint8Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8Array()`** constructor creates [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint8Array()\nnew Uint8Array(length)\nnew Uint8Array(typedArray)\nnew Uint8Array(object)\n\nnew Uint8Array(buffer)\nnew Uint8Array(buffer, byteOffset)\nnew Uint8Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint8Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8Array](#different_ways_to_create_a_uint8array)\n\n```\n// From a length\nconst uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8FromIterable = new Uint8Array(iterable);\nconsole.log(uint8FromIterable);\n// Uint8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Uint8Array() constructor - JavaScript | MDN",
  "description": "The Uint8Array() constructor creates Uint8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array",
  "markdown": "# Uint16Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint16Array()`** constructor creates [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Uint16Array()\nnew Uint16Array(length)\nnew Uint16Array(typedArray)\nnew Uint16Array(object)\n\nnew Uint16Array(buffer)\nnew Uint16Array(buffer, byteOffset)\nnew Uint16Array(buffer, byteOffset, length)\n```\n\n**Note:** `Uint16Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint16Array](#different_ways_to_create_a_uint16array)\n\n```\n// From a length\nconst uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Uint16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Uint16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint16FromIterable = new Uint16Array(iterable);\nconsole.log(uint16FromIterable);\n// Uint16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Uint16Array() constructor - JavaScript | MDN",
  "description": "The Uint16Array() constructor creates Uint16Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales",
  "markdown": "# Intl.getCanonicalLocales() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.getCanonicalLocales()`** static method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.getCanonicalLocales(locales)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA list of [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) values for which to get the canonical locale names.\n\n### [Return value](#return_value)\n\nAn array containing the canonical locale names.\n\n## [Examples](#examples)\n\n### [Using getCanonicalLocales](#using_getcanonicallocales)\n\n```\nIntl.getCanonicalLocales(\"EN-US\"); // [\"en-US\"]\nIntl.getCanonicalLocales([\"EN-US\", \"Fr\"]); // [\"en-US\", \"fr\"]\n\nIntl.getCanonicalLocales(\"EN_US\");\n// RangeError:'EN_US' is not a structurally valid language tag\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.getcanonicallocales](https://tc39.es/ecma402/#sec-intl.getcanonicallocales) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.getCanonicalLocales() - JavaScript | MDN",
  "description": "The Intl.getCanonicalLocales() static method returns an array\n  containing the canonical locale names. Duplicates will be omitted and elements will be\n  validated as structurally valid language tags.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf",
  "markdown": "# Intl.supportedValuesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.supportedValuesOf()`** static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\nDuplicates are omitted and the array is sorted in ascending lexicographical order (or more precisely, using [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) with an `undefined` compare function).\n\nThe method can be used to feature-test whether values are supported in a particular implementation and download a polyfill only if necessary. It can also be used to build UIs that allow users to select their preferred localized values, for example when the UI is created from WebGL or server-side.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.supportedValuesOf(key)\n```\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nA key string indicating the category of values to be returned. This is one of: `\"calendar\"`, `\"collation\"`, `\"currency\"`, `\"numberingSystem\"`, `\"timeZone\"`, `\"unit\"`.\n\n### [Return value](#return_value)\n\nA sorted array of unique string values indicating the values supported by the implementation for the given key.\n\n**Note:** While the IANA database changes from time to time, the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes. Some browsers may use the legacy name, while others override it with the new name. See [`Intl.Locale.prototype.getTimeZones`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones) for more information.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if an unsupported key was passed as a parameter.\n\n## [Examples](#examples)\n\n### [Feature testing](#feature_testing)\n\nYou can check that the method is supported by comparing to `undefined`:\n\n```\nif (typeof Intl.supportedValuesOf !== \"undefined\") {\n  // method is supported\n}\n```\n\n### [Get all values for key](#get_all_values_for_key)\n\nTo get the supported values for calendar you call the method with the key `\"calendar\"`. You can then iterate through the returned array as shown below:\n\n```\nIntl.supportedValuesOf(\"calendar\").forEach((calendar) => {\n  // \"buddhist\", \"chinese\", \"coptic\", \"dangi\", etc.\n});\n```\n\n**Note:** The array returned for calendar values will always include the value \"gregory\" (gregorian).\n\nThe other values are all obtained in the same way:\n\n```\nIntl.supportedValuesOf(\"collation\").forEach((collation) => {\n  // \"compat\", \"dict\", \"emoji\", etc.\n});\n\nIntl.supportedValuesOf(\"currency\").forEach((currency) => {\n  // \"ADP\", \"AED\", \"AFA\", \"AFN\", \"ALK\", \"ALL\", \"AMD\", etc.\n});\n\nIntl.supportedValuesOf(\"numberingSystem\").forEach((numberingSystem) => {\n  // \"adlm\", \"ahom\", \"arab\", \"arabext\", \"bali\", etc.\n});\n\nIntl.supportedValuesOf(\"timeZone\").forEach((timeZone) => {\n  // \"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Addis_Ababa\", \"Africa/Algiers\", etc.\n});\n\nIntl.supportedValuesOf(\"unit\").forEach((unit) => {\n  // \"acre\", \"bit\", \"byte\", \"celsius\", \"centimeter\", etc.\n});\n```\n\n### [Invalid key throws RangeError](#invalid_key_throws_rangeerror)\n\n```\ntry {\n  Intl.supportedValuesOf(\"someInvalidKey\");\n} catch (err) {\n  //Error: RangeError: invalid key: \"someInvalidKey\"\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.supportedvaluesof](https://tc39.es/ecma402/#sec-intl.supportedvaluesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.supportedValuesOf() - JavaScript | MDN",
  "description": "The Intl.supportedValuesOf() static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array",
  "markdown": "# Int8Array() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int8Array()`** constructor creates [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) objects. The contents are initialized to `0` unless initialization data is explicitly provided.\n\n## [Syntax](#syntax)\n\n```\nnew Int8Array()\nnew Int8Array(length)\nnew Int8Array(typedArray)\nnew Int8Array(object)\n\nnew Int8Array(buffer)\nnew Int8Array(buffer, byteOffset)\nnew Int8Array(buffer, byteOffset, length)\n```\n\n**Note:** `Int8Array()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n### [Exceptions](#exceptions)\n\n## [Examples](#examples)\n\n### [Different ways to create an Int8Array](#different_ways_to_create_an_int8array)\n\n```\n// From a length\nconst int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Int8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Int8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int8FromIterable = new Int8Array(iterable);\nconsole.log(int8FromIterable);\n// Int8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-constructors](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Int8Array() constructor - JavaScript | MDN",
  "description": "The Int8Array() constructor creates Int8Array objects. The contents are initialized to 0 unless initialization data is explicitly provided.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError",
  "markdown": "# URIError() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`URIError()`** constructor creates [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) objects.\n\n## [Syntax](#syntax)\n\n```\nnew URIError()\nnew URIError(message)\nnew URIError(message, options)\nnew URIError(message, fileName)\nnew URIError(message, fileName, lineNumber)\n\nURIError()\nURIError(message)\nURIError(message, options)\nURIError(message, fileName)\nURIError(message, fileName, lineNumber)\n```\n\n**Note:** `URIError()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `URIError` instance.\n\n### [Parameters](#parameters)\n\n[`message`](#message) Optional\n\nHuman-readable description of the error.\n\n[`options`](#options) Optional\n\nAn object that has the following properties:\n\n[`cause`](#cause) Optional\n\nA property indicating the specific cause of the error. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n[`fileName`](#filename) Optional Non-standard\n\nThe name of the file containing the code that caused the exception.\n\n[`lineNumber`](#linenumber) Optional Non-standard\n\nThe line number of the code that caused the exception.\n\n## [Examples](#examples)\n\n### [Catching an URIError](#catching_an_urierror)\n\n```\ntry {\n  decodeURIComponent(\"%\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"malformed URI sequence\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating an URIError](#creating_an_urierror)\n\n```\ntry {\n  throw new URIError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-nativeerror-constructors](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-nativeerror-constructors) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "URIError() constructor - JavaScript | MDN",
  "description": "The URIError() constructor creates URIError objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString",
  "markdown": "# Number.prototype.toLocaleString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toLocaleString()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns a string with a language-sensitive representation of this number. In implementations with [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) support, this method simply calls `Intl.NumberFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object and use its [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) method, because a `NumberFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### [Parameters](#parameters)\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.NumberFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), these parameters correspond exactly to the [`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor's parameters. Implementations without `Intl.NumberFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored and the host's locale is usually used.\n\n[`options`](#options) Optional\n\nAn object adjusting the output format. Corresponds to the [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) parameter of the `Intl.NumberFormat()` constructor.\n\nIn implementations without `Intl.NumberFormat` support, this parameter is ignored.\n\nSee the [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details on these parameters and how to use them.\n\n### [Return value](#return_value)\n\nA string representing the given number according to language-specific conventions.\n\nIn implementations with `Intl.NumberFormat`, this is equivalent to `new Intl.NumberFormat(locales, options).format(number)`.\n\n**Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `toLocaleString()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using toLocaleString()](#using_tolocalestring)\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```\nconst number = 3500;\n\nconsole.log(number.toLocaleString()); // \"3,500\" if in U.S. English locale\n```\n\n### [Checking for support for locales and options parameters](#checking_for_support_for_locales_and_options_parameters)\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API, you can check the existence of the latter for support:\n\n```\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.NumberFormat === \"function\"\n  );\n}\n```\n\n### [Using locales](#using_locales)\n\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```\nconst number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(number.toLocaleString(\"de-DE\"));\n// 123.456,789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(number.toLocaleString(\"ar-EG\"));\n// ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(number.toLocaleString(\"en-IN\"));\n// 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(number.toLocaleString(\"zh-Hans-CN-u-nu-hanidec\"));\n// 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(number.toLocaleString([\"ban\", \"id\"]));\n// 123.456,789\n```\n\n### [Using options](#using_options)\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```\nconst number = 123456.789;\n\n// request a currency format\nconsole.log(\n  number.toLocaleString(\"de-DE\", { style: \"currency\", currency: \"EUR\" }),\n);\n// 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  number.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }),\n);\n// ￥123,457\n\n// limit to three significant digits\nconsole.log(number.toLocaleString(\"en-IN\", { maximumSignificantDigits: 3 }));\n// 1,23,000\n\n// Use the host default language with options for number formatting\nconst num = 30000.65;\nconsole.log(\n  num.toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }),\n);\n// \"30,000.65\" where English is the default language, or\n// \"30.000,65\" where German is the default language, or\n// \"30 000,65\" where French is the default language\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.tolocalestring](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.tolocalestring) |\n| [ECMAScript Internationalization API Specification  <br>\\# sup-number.prototype.tolocalestring](https://tc39.es/ecma402/#sup-number.prototype.tolocalestring) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Number.prototype.toLocaleString() - JavaScript | MDN",
  "description": "The toLocaleString() method of Number values returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values",
  "markdown": "# Map.prototype.values() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`values()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a new _[map iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the values for each element in this map in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using values()](#using_values)\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.values();\n\nconsole.log(mapIter.next().value); // \"foo\"\nconsole.log(mapIter.next().value); // \"bar\"\nconsole.log(mapIter.next().value); // \"baz\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.values](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.values) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.values() - JavaScript | MDN",
  "description": "The values() method of Map instances returns a new map iterator object that contains the values for each element in this map in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator",
  "markdown": "# arguments\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) objects implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `arguments` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns an [array iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the `arguments` object.\n\nThe initial value of this property is the same function object as the initial value of the [`Array.prototype.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) property (and also the same as [`Array.prototype[@@iterator]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)).\n\n## [Syntax](#syntax)\n\n```\narguments[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the `arguments` object.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `arguments` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nfunction f() {\n  for (const letter of arguments) {\n    console.log(letter);\n  }\n}\nf(\"w\", \"y\", \"k\", \"o\", \"p\");\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nfunction f() {\n  const argsIter = arguments[Symbol.iterator]();\n  console.log(argsIter.next().value); // w\n  console.log(argsIter.next().value); // y\n  console.log(argsIter.next().value); // k\n  console.log(argsIter.next().value); // o\n  console.log(argsIter.next().value); // p\n}\nf(\"w\", \"y\", \"k\", \"o\", \"p\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-createunmappedargumentsobject](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createunmappedargumentsobject) |\n| [ECMAScript Language Specification  <br>\\# sec-createmappedargumentsobject](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createmappedargumentsobject) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "arguments[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of arguments objects implements the iterable protocol and allows arguments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the arguments object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries",
  "markdown": "# Map.prototype.entries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`entries()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances returns a new _[map iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the `[key, value]` pairs for each element in this map in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using entries()](#using_entries)\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.entries();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.entries](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.entries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.entries() - JavaScript | MDN",
  "description": "The entries() method of Map instances returns a new map iterator object that contains the [key, value] pairs for each element in this map in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator",
  "markdown": "# Map.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`[@@iterator]()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Map` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [map iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map in insertion order.\n\nThe initial value of this property is the same function object as the initial value of the [`Map.prototype.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries) property.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe same return value as [`Map.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries): a new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Map` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nfor (const entry of myMap) {\n  console.log(entry);\n}\n// [\"0\", \"foo\"]\n// [1, \"bar\"]\n// [{}, \"baz\"]\n\nfor (const [key, value] of myMap) {\n  console.log(`${key}: ${value}`);\n}\n// 0: foo\n// 1: bar\n// [Object]: baz\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap[Symbol.iterator]();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype-@@iterator](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of Map instances implements the iterable protocol and allows Map objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a map iterator object that yields the key-value pairs of the map in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator",
  "markdown": "# Segments.prototype\\[@@iterator\\]() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`[@@iterator]()`** method of [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances implements the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Segments` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loops. It returns a [segments iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nsegments[Symbol.iterator]()\n```\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment. Each yielded object has the same properties as the object returned by the [`containing()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing) method.\n\n## [Examples](#examples)\n\n### [Iteration using for...of loop](#iteration_using_for...of_loop)\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Segments` objects [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```\nconst segmenter = new Intl.Segmenter(\"zh-CN\", { granularity: \"word\" });\nconst input = \"你好，世界！我爱编程。\";\n\nfor (const value of segmenter.segment(input)) {\n  console.log(value);\n}\n\n/*\n{segment: '你好', index: 0, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '，', index: 2, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '世界', index: 3, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '！', index: 5, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '我', index: 6, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '爱', index: 7, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '编', index: 8, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '程', index: 9, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '。', index: 10, input: '你好，世界！我爱编程。', isWordLike: false}\n*/\n```\n\n### [Manually hand-rolling the iterator](#manually_hand-rolling_the_iterator)\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\nconst iterator = segments[Symbol.iterator]();\n\nlet result = iterator.next();\n\nwhile (!result.done) {\n  console.log(result.value);\n  result = iterator.next();\n}\n\n/*\n{segment: 'Moi', index: 0, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 3, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 4, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: ' ', index: 5, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: \"N'est\", index: 6, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: '-', index: 11, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'ce', index: 12, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 14, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'pas', index: 15, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 18, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 19, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n*/\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-%segmentsprototype%-@@iterator](https://tc39.es/ecma402/#sec-%segmentsprototype%-@@iterator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Segments.prototype[@@iterator]() - JavaScript | MDN",
  "description": "The [@@iterator]() method of Segments instances implements the iterable protocol and allows Segments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a segments iterator object that yields data about each segment.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments",
  "markdown": "# Segments - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`Segments`** object is an iterable collection of the segments of a text string. It is returned by a call to the [`segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment) method of an [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n## [Try it](#try_it)\n\n## [Instance methods](#instance_methods)\n\n[`Segments.prototype.containing()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing)\n\nReturns an object describing the segment in the original string that includes the code unit at a specified index.\n\n[`Segments.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator)\n\nReturns an iterator to iterate over the segments.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-segments-objects](https://tc39.es/ecma402/#sec-segments-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Segments - JavaScript | MDN",
  "description": "A Segments object is an iterable collection of the segments of a text string. It is returned by a call to the segment() method of an Intl.Segmenter object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete",
  "markdown": "# WeakMap.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`delete()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances removes the specified element from this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nweakMapInstance.delete(key)\n```\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to remove from the `WeakMap` object.\n\n### [Return value](#return_value)\n\n`true` if an element in the `WeakMap` object has been removed successfully. `false` if the key is not found in the `WeakMap`. Always returns `false` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the delete() method](#using_the_delete_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.delete(window); // Returns true. Successfully removed.\n\nwm.has(window); // Returns false. The window object is no longer in the WeakMap.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakMap.prototype.delete() - JavaScript | MDN",
  "description": "The delete() method of WeakMap instances removes the specified element from this WeakMap.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get",
  "markdown": "# WeakMap.prototype.get() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`get()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances returns a specified element from this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to return from the `WeakMap` object.\n\n### [Return value](#return_value)\n\nThe element associated with the specified key in the `WeakMap` object. If the key can't be found, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned. Always returns `undefined` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the get() method](#using_the_get_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.get(window); // Returns \"foo\".\nwm.get(\"baz\"); // Returns undefined.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.get](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.get) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakMap.prototype.get() - JavaScript | MDN",
  "description": "The get() method of WeakMap instances returns a specified element from this WeakMap.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment",
  "markdown": "# Intl.Segmenter.prototype.segment() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`segment()`** method of [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instances segments a string according to the locale and granularity of this `Intl.Segmenter` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`input`](#input)\n\nThe text to be segmented as a string.\n\n### [Return value](#return_value)\n\nA new iterable [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object containing the segments of the input string, using the segmenter's locale and granularity.\n\n## [Examples](#examples)\n\n```\n// Create a locale-specific word segmenter\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n\n// Use it to get an iterator over the segments of a string\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\n\n// Use that for segmentation\nfor (const { segment, index, isWordLike } of segments) {\n  console.log(\n    \"segment at code units [%d, %d]: «%s»%s\",\n    index,\n    index + segment.length,\n    segment,\n    isWordLike ? \" (word-like)\" : \"\",\n  );\n}\n// segment at code units [0, 3]: «Moi» (word-like)\n// segment at code units [3, 4]: « »\n// segment at code units [4, 5]: «?»\n// segment at code units [5, 6]: « »\n// segment at code units [6, 11]: «N'est» (word-like)\n// segment at code units [11, 12]: «-»\n// segment at code units [12, 14]: «ce» (word-like)\n// segment at code units [14, 15]: « »\n// segment at code units [15, 18]: «pas» (word-like)\n// segment at code units [18, 19]: « »\n// segment at code units [19, 20]: «?»\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.prototype.segment](https://tc39.es/ecma402/#sec-intl.segmenter.prototype.segment) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
  "title": "Intl.Segmenter.prototype.segment() - JavaScript | MDN",
  "description": "The segment() method of Intl.Segmenter instances segments a string according to the locale and granularity of this Intl.Segmenter object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap",
  "markdown": "# WeakMap() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakMap()`** constructor creates [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) objects.\n\n## [Syntax](#syntax)\n\n```\nnew WeakMap()\nnew WeakMap(iterable)\n```\n\n**Note:** `WeakMap()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or other iterable object that implements an [@@iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator) method that returns an iterator object that produces a two-element array-like object whose first element is a value that will be used as a `WeakMap` key and whose second element is the value to associate with that key. Each key-value pair will be added to the new `WeakMap`. null is treated as undefined.\n\n## [Examples](#examples)\n\n### [Using WeakMap](#using_weakmap)\n\n```\nconst wm1 = new WeakMap();\nconst wm2 = new WeakMap();\nconst wm3 = new WeakMap();\nconst o1 = {};\nconst o2 = function () {};\nconst o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no key for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakMap() constructor - JavaScript | MDN",
  "description": "The WeakMap() constructor creates WeakMap objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has",
  "markdown": "# WeakMap.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`has()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances returns a boolean indicating whether an element with the specified key exists in this `WeakMap` or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to test for presence in the `WeakMap` object.\n\n### [Return value](#return_value)\n\nReturns `true` if an element with the specified key exists in the `WeakMap` object; otherwise `false`. Always returns `false` if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the has method](#using_the_has_method)\n\n```\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.has(window); // returns true\nwm.has(\"baz\"); // returns false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakMap.prototype.has() - JavaScript | MDN",
  "description": "The has() method of WeakMap instances returns a boolean indicating whether an\n  element with the specified key exists in this WeakMap or not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set",
  "markdown": "# WeakMap.prototype.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`set()`** method of [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instances adds a new element with a specified key and value to this `WeakMap`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nMust be either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The key of the entry to add to the `WeakMap` object.\n\n[`value`](#value)\n\nAny value representing the value of the entry to add to the `WeakMap` object.\n\n### [Return value](#return_value)\n\nThe `WeakMap` object.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `key` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the set() method](#using_the_set_method)\n\n```\nconst wm = new WeakMap();\nconst obj = {};\n\n// Add new elements to the WeakMap\nwm.set(obj, \"foo\").set(window, \"bar\"); // chainable\n\n// Update an element in the WeakMap\nwm.set(obj, \"baz\");\n\n// Using a non-registered symbol as key\nconst sym = Symbol(\"foo\");\nwm.set(sym, \"baz\");\nwm.set(Symbol.iterator, \"qux\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap.prototype.set](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap.prototype.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakMap.prototype.set() - JavaScript | MDN",
  "description": "The set() method of WeakMap instances adds a new element with a specified key\n  and value to this WeakMap.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON",
  "markdown": "# JSON.rawJSON() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`JSON.rawJSON()`** static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nThe JSON text. Must be valid JSON **representing a primitive value**.\n\n### [Return value](#return_value)\n\nAn object that can be used to create JSON text with the exact same content as the `string` provided, without quotes around the string itself. This object [has `null` prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) and [is frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) (so it never gets accidentally serialized as a regular object by any kind of primitive conversion), and the following property:\n\n[`rawJSON`](#rawjson)\n\nThe original JSON `string` provided.\n\nFurthermore, it has a [private property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) that marks itself as a raw JSON object. This allows it to be identified by [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) and [`JSON.isRawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON).\n\n### [Exceptions](#exceptions)\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nThrown if the `string` is not valid JSON, or if it represents an object or array.\n\n## [Description](#description)\n\nA raw JSON object can be seen as an immutable, atomic data structure like any kind of [primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values). It is not a regular object and it contains no data other than the raw JSON text. It is used to \"pre-serialize\" data to formats that `JSON.stringify` itself cannot produce for various reasons. The most typical use case is the floating point number loss of precision problem. For example:\n\n```\nJSON.stringify({ value: 12345678901234567890 });\n// {\"value\":12345678901234567000}\n```\n\nThe value is not exactly equivalent to the original number any more! This is because JavaScript uses floating point representation for all numbers, so it cannot represent all integers exactly. The number literal `12345678901234567890` itself is already rounded to the nearest representable number when it is parsed by JavaScript.\n\nWithout `JSON.rawJSON`, there is no way to tell `JSON.stringify` to produce the number literal `12345678901234567000`, because there is simply no corresponding JavaScript number value. With raw JSON, you can directly tell `JSON.stringify()` what a particular value should be stringified as:\n\n```\nconst rawJSON = JSON.rawJSON(\"12345678901234567890\");\nJSON.stringify({ value: rawJSON });\n// {\"value\":12345678901234567890}\n```\n\nFor a more complete example of this, see [Lossless number serialization](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#using_json_numbers).\n\nNote that although we passed a string to `JSON.rawJSON()`, it still becomes a number in the final JSON. This is because the string represents the verbatim JSON text. If you want to serialize a string, you should use `JSON.rawJSON()` with a quotes-enclosed string value:\n\n```\nconst rawJSON = JSON.rawJSON('\"Hello world\"');\nJSON.stringify({ value: rawJSON });\n// {\"value\":\"Hello world\"}\n```\n\n`JSON.rawJSON` allows you to insert arbitrary JSON text, but does not allow you to create invalid JSON. Anything that was not permitted by the JSON syntax is not permitted by `JSON.rawJSON()` either:\n\n```\nconst rawJSON = JSON.rawJSON('\"Hello\\nworld\"'); // Syntax error, because line breaks are not allowed in JSON strings\n```\n\nFurthermore, you cannot use `JSON.rawJSON()` to create JSON objects or arrays.\n\n## [Examples](#examples)\n\n### [Using JSON.rawJSON() to create JSON expressions of different types](#using_json.rawjson_to_create_json_expressions_of_different_types)\n\n```\nconst numJSON = JSON.rawJSON(\"123\");\nconst strJSON = JSON.rawJSON('\"Hello world\"');\nconst boolJSON = JSON.rawJSON(\"true\");\nconst nullJSON = JSON.rawJSON(\"null\");\n\nconsole.log(\n  JSON.stringify({\n    age: numJSON,\n    message: strJSON,\n    isActive: boolJSON,\n    nothing: nullJSON,\n  }),\n);\n\n// {\"age\":123,\"message\":\"Hello world\",\"isActive\":true,\"nothing\":null}\n```\n\nHowever, you cannot use `JSON.rawJSON()` to create JSON objects or arrays:\n\n```\nconst arrJSON = JSON.rawJSON(\"[1, 2, 3]\");\nconst objJSON = JSON.rawJSON('{\"a\": 1, \"b\": 2}');\n// SyntaxError\n```\n\n### [Using JSON.rawJSON() to create escaped string literals](#using_json.rawjson_to_create_escaped_string_literals)\n\nApart from numbers, there is only one other type that does not have a one-to-one correspondence between JavaScript values and JSON text: strings. When strings are serialized to JSON, all code points, other than those that are not legal inside JSON string literals (such as line breaks), are printed literally:\n\n```\nconsole.log(JSON.stringify({ value: \"\\ud83d\\ude04\" })); // {\"value\":\"😄\"}\n```\n\nThis may not be desirable, because the receiver of this string may handle Unicode differently. To improve interoperability, you can explicitly specify the string to be serialized with escape sequences:\n\n```\nconst rawJSON = JSON.rawJSON('\"\\\\ud83d\\\\ude04\"');\nconst objStr = JSON.stringify({ value: rawJSON });\nconsole.log(JSON.parse(objStr).value); // 😄\n```\n\nNote that the double backslashes in the `rawJSON` actually represents a single slash character, so the JSON text looks like:\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [JSON.parse source text access  <br>\\# sec-json.rawjson](https://tc39.es/proposal-json-parse-with-source/#sec-json.rawjson) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "JSON.rawJSON() - JavaScript | MDN",
  "description": "The JSON.rawJSON() static method creates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON",
  "markdown": "# JSON.isRawJSON() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`JSON.isRawJSON()`** static method tests whether a value is an object returned by [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\n`true` if `value` is created by [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON); otherwise, `false`.\n\n## [Description](#description)\n\n\"Raw JSON\" objects, when serialized to JSON, are treated as if they are already a piece of JSON. Furthermore, because of the way [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON) works, the raw JSON is guaranteed to be syntactically valid JSON. For more information on the shape and behavior of raw JSON objects, see [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON). This method exists to allow other serialization libraries to implement similar behavior to `JSON.stringify()` for raw JSON objects.\n\n## [Examples](#examples)\n\n### [Using JSON.isRawJSON()](#using_json.israwjson)\n\nThe following example demonstrates how to use `JSON.isRawJSON()` to test whether an object was returned by `JSON.rawJSON()`. It implements a custom serializer that serializes data to a YAML-like format.\n\n```\nfunction mySerializer(value, indent = \"\") {\n  if (typeof value !== \"object\" || value === null) {\n    return JSON.stringify(value);\n  }\n  if (JSON.isRawJSON(value)) {\n    return value.rawJSON;\n  }\n  const subIndent = `${indent}  `;\n  if (Array.isArray(value)) {\n    return `- ${value.map((v) => mySerializer(v, subIndent)).join(`\\n${indent}- `)}`;\n  }\n  return Object.entries(value)\n    .map(([key, value]) => {\n      const subValue = mySerializer(value, subIndent);\n      if (subValue.includes(\"\\n\")) {\n        return `${key}:\\n${subIndent}${subValue}`;\n      }\n      return `${key}: ${subValue}`;\n    })\n    .join(`\\n${indent}`);\n}\n\nconsole.log(\n  mySerializer({\n    name: \"Josh\",\n    userId: JSON.rawJSON(\"12345678901234567890\"),\n    friends: [\n      { name: \"Alice\", userId: JSON.rawJSON(\"9876543210987654321\") },\n      { name: \"Bob\", userId: JSON.rawJSON(\"56789012345678901234\") },\n    ],\n  }),\n);\n\n// name: \"Josh\"\n// userId: 12345678901234567890\n// friends:\n//   - name: \"Alice\"\n//     userId: 9876543210987654321\n//   - name: \"Bob\"\n//     userId: 56789012345678901234\n```\n\nIf in the above example, the `userId` values were not created by `JSON.rawJSON()`, but passed as numbers directly, then we will get loss of precision upfront because of JS floating point precision limitations.\n\n```\nconsole.log(\n  mySerializer({\n    name: \"Josh\",\n    userId: 12345678901234567890,\n    friends: [\n      { name: \"Alice\", userId: 9876543210987654321 },\n      { name: \"Bob\", userId: 56789012345678901234 },\n    ],\n  }),\n);\n\n// name: \"Josh\"\n// userId: 12345678901234567000\n// friends:\n//   - name: \"Alice\"\n//     userId: 9876543210987655000\n//   - name: \"Bob\"\n//     userId: 56789012345678900000\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [JSON.parse source text access  <br>\\# sec-json.israwjson](https://tc39.es/proposal-json-parse-with-source/#sec-json.israwjson) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "JSON.isRawJSON() - JavaScript | MDN",
  "description": "The JSON.isRawJSON() static method tests whether a value is an object returned by JSON.rawJSON().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10",
  "markdown": "# Math.LN10 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LN10`** static data property represents the natural logarithm of 10, approximately 2.302.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙽𝟷𝟶 \\= ln ( 10 ) ≈ 2.302 \\\\mathtt{Math.LN10} = \\\\ln(10) \\\\approx 2.302\n\n| Property attributes of `Math.LN10` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LN10` is a static property of `Math`, you always use it as `Math.LN10`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LN10](#using_math.ln10)\n\nThe following function returns the natural log of 10:\n\n```\nfunction getNatLog10() {\n  return Math.LN10;\n}\n\ngetNatLog10(); // 2.302585092994046\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.ln10](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.ln10) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.LN10 - JavaScript | MDN",
  "description": "The Math.LN10 static data property represents the natural logarithm of 10, approximately 2.302.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E",
  "markdown": "# Math.E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.E`** static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙴 \\= e ≈ 2.718 \\\\mathtt{Math.E} = e \\\\approx 2.718\n\n| Property attributes of `Math.E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `E` is a static property of `Math`, you always use it as `Math.E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.E](#using_math.e)\n\nThe following function returns e:\n\n```\nfunction getNapier() {\n  return Math.E;\n}\n\ngetNapier(); // 2.718281828459045\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.E - JavaScript | MDN",
  "description": "The Math.E static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef",
  "markdown": "# WeakRef() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakRef()`** constructor creates [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) objects.\n\n## [Syntax](#syntax)\n\n**Note:** `WeakRef()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`target`](#target)\n\nThe target value the WeakRef should refer to (also called the _referent_). Must be an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n### [Return value](#return_value)\n\nA new `WeakRef` object referring to the given target value.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `target` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Creating a new WeakRef object](#creating_a_new_weakref_object)\n\nSee the main [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples) page for a complete example.\n\n```\nclass Counter {\n  constructor(element) {\n    // Remember a weak reference to a DOM element\n    this.ref = new WeakRef(element);\n    this.start();\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weak-ref-constructor](https://tc39.es/ecma262/multipage/managing-memory.html#sec-weak-ref-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakRef() constructor - JavaScript | MDN",
  "description": "The WeakRef() constructor creates WeakRef objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2",
  "markdown": "# Math.LN2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LN2`** static data property represents the natural logarithm of 2, approximately 0.693:\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙽𝟸 \\= ln ( 2 ) ≈ 0.693 \\\\mathtt{Math.LN2} = \\\\ln(2) \\\\approx 0.693\n\n| Property attributes of `Math.LN2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LN2` is a static property of `Math`, you always use it as `Math.LN2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LN2](#using_math.ln2)\n\nThe following function returns the natural log of 2:\n\n```\nfunction getNatLog2() {\n  return Math.LN2;\n}\n\ngetNatLog2(); // 0.6931471805599453\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.ln2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.ln2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.LN2 - JavaScript | MDN",
  "description": "The Math.LN2 static data property represents the natural logarithm of 2, approximately 0.693:",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E",
  "markdown": "# Math.LOG10E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LOG10E`** static data property represents the base 10 logarithm of [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 0.434.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟷𝟶𝙴 \\= log 10 ( e ) ≈ 0.434 \\\\mathtt{Math.LOG10E} = \\\\log\\_{10}(\\\\mathrm{e}) \\\\approx 0.434\n\n| Property attributes of `Math.LOG10E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LOG10E` is a static property of `Math`, you always use it as `Math.LOG10E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LOG10E](#using_math.log10e)\n\nThe following function returns the base 10 logarithm of e:\n\n```\nfunction getLog10e() {\n  return Math.LOG10E;\n}\n\ngetLog10e(); // 0.4342944819032518\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log10e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log10e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.LOG10E - JavaScript | MDN",
  "description": "The Math.LOG10E static data property represents the base 10 logarithm of e, approximately 0.434.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E",
  "markdown": "# Math.LOG2E - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.LOG2E`** static data property represents the base 2 logarithm of [e](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 1.442.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟸𝙴 \\= log 2 ( e ) ≈ 1.442 \\\\mathtt{Math.LOG2E} = \\\\log\\_2(\\\\mathrm{e}) \\\\approx 1.442\n\n| Property attributes of `Math.LOG2E` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `LOG2E` is a static property of `Math`, you always use it as `Math.LOG2E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.LOG2E](#using_math.log2e)\n\nThe following function returns the base 2 logarithm of e:\n\n```\nfunction getLog2e() {\n  return Math.LOG2E;\n}\n\ngetLog2e(); // 1.4426950408889634\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.log2e](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.log2e) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.LOG2E - JavaScript | MDN",
  "description": "The Math.LOG2E static data property represents the base 2 logarithm of e, approximately 1.442.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI",
  "markdown": "# Math.PI - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.PI`** static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝙿𝙸 \\= π ≈ 3.14159 \\\\mathtt{Math.PI} = \\\\pi \\\\approx 3.14159\n\n| Property attributes of `Math.PI` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\nBecause `PI` is a static property of `Math`, you always use it as `Math.PI`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.PI](#using_math.pi)\n\nThe following function uses `Math.PI` to calculate the circumference of a circle with a passed radius.\n\n```\nfunction calculateCircumference(radius) {\n  return Math.PI * (radius + radius);\n}\n\ncalculateCircumference(1); // 6.283185307179586\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.pi](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.pi) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.PI - JavaScript | MDN",
  "description": "The Math.PI static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
  "markdown": "# Math.SQRT1\\_2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.SQRT1_2`** static data property represents the square root of 1/2, which is approximately 0.707.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟷\\_𝟸 \\= 1 2 ≈ 0.707 \\\\mathtt{Math.SQRT1\\_2} = \\\\sqrt{\\\\frac{1}{2}} \\\\approx 0.707\n\n| Property attributes of `Math.SQRT1_2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Math.SQRT1_2` is a constant and a more performant equivalent to [`Math.sqrt(0.5)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT1_2` is a static property of `Math`, you always use it as `Math.SQRT1_2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.SQRT1\\_2](#using_math.sqrt1_2)\n\nThe following function returns 1 over the square root of 2:\n\n```\nfunction getRoot1_2() {\n  return Math.SQRT1_2;\n}\n\ngetRoot1_2(); // 0.7071067811865476\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sqrt1\\_2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt1_2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.SQRT1_2 - JavaScript | MDN",
  "description": "The Math.SQRT1_2 static data property represents the square root of 1/2, which is approximately 0.707.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2",
  "markdown": "# Math.SQRT2 - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math.SQRT2`** static data property represents the square root of 2, approximately 1.414.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\n𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟸 \\= 2 ≈ 1.414 \\\\mathtt{Math.SQRT2} = \\\\sqrt{2} \\\\approx 1.414\n\n| Property attributes of `Math.SQRT2` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Math.SQRT2` is a constant and a more performant equivalent to [`Math.sqrt(2)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT2` is a static property of `Math`, you always use it as `Math.SQRT2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## [Examples](#examples)\n\n### [Using Math.SQRT2](#using_math.sqrt2)\n\nThe following function returns the square root of 2:\n\n```\nfunction getRoot2() {\n  return Math.SQRT2;\n}\n\ngetRoot2(); // 1.4142135623730951\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math.sqrt2](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.sqrt2) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Math.SQRT2 - JavaScript | MDN",
  "description": "The Math.SQRT2 static data property represents the square root of 2, approximately 1.414.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add",
  "markdown": "# WeakSet.prototype.add() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`add()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances appends a new object to the end of this `WeakSet`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nMust be either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The value to add to the `WeakSet` collection.\n\n### [Return value](#return_value)\n\nThe `WeakSet` object.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using add](#using_add)\n\n```\nconst ws = new WeakSet();\n\nws.add(window); // add the window object to the WeakSet\n\nws.has(window); // true\n\n// WeakSet only takes objects as arguments\nws.add(1);\n// results in \"TypeError: Invalid value used in weak set\" in Chrome\n// and \"TypeError: 1 is not a non-null object\" in Firefox\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.add](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.add) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakSet.prototype.add() - JavaScript | MDN",
  "description": "The add() method of WeakSet instances appends a new object to the end of this WeakSet.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete",
  "markdown": "# WeakSet.prototype.delete() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`delete()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances removes the specified element from this `WeakSet`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nweakSetInstance.delete(value)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to remove from the `WeakSet` object.\n\n### [Return value](#return_value)\n\n`true` if an element in the `WeakSet` object has been removed successfully. `false` if the `value` is not found in the `WeakSet`. Always returns `false` if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the delete() method](#using_the_delete_method)\n\n```\nconst ws = new WeakSet();\nconst obj = {};\n\nws.add(window);\n\nws.delete(obj); // Returns false. No obj found to be deleted.\nws.delete(window); // Returns true. Successfully removed.\n\nws.has(window); // Returns false. The window is no longer present in the WeakSet.\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.delete](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.delete) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakSet.prototype.delete() - JavaScript | MDN",
  "description": "The delete() method of WeakSet instances removes the specified element from this WeakSet.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet",
  "markdown": "# WeakSet() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`WeakSet()`** constructor creates [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) objects.\n\n## [Syntax](#syntax)\n\n```\nnew WeakSet()\nnew WeakSet(iterable)\n```\n\n**Note:** `WeakSet()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable) Optional\n\nIf an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) is passed, all of its elements will be added to the new `WeakSet`. `null` is treated as `undefined`.\n\n## [Examples](#examples)\n\n### [Using the WeakSet object](#using_the_weakset_object)\n\n```\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not **the same object**_. And so they are both added to the set.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakSet() constructor - JavaScript | MDN",
  "description": "The WeakSet() constructor creates WeakSet objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map",
  "markdown": "# Map() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Map()`** constructor creates [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Map()\nnew Map(iterable)\n```\n\n**Note:** `Map()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable) Optional\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or other [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) object whose elements are key-value pairs. (For example, arrays with two elements, such as `[[ 1, 'one' ],[ 2, 'two' ]]`.) Each key-value pair is added to the new `Map`.\n\n## [Examples](#examples)\n\n### [Creating a new Map](#creating_a_new_map)\n\n```\nconst myMap = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map-constructor](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map() constructor - JavaScript | MDN",
  "description": "The Map() constructor creates Map objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has",
  "markdown": "# WeakSet.prototype.has() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`has()`** method of [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instances returns a boolean indicating whether an object exists in this `WeakSet` or not.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to test for presence in the `WeakSet`.\n\n### [Return value](#return_value)\n\nReturns `true` if an element with the specified value exists in the `WeakSet` object; otherwise `false`. Always returns `false` if `value` is not an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## [Examples](#examples)\n\n### [Using the `has()` method](#using_the_has_method)\n\n```\nconst ws = new WeakSet();\nconst obj = {};\nws.add(window);\n\nws.has(window); // returns true\nws.has(obj); // returns false\n\n// Storing a non-registered symbol\nconst sym = Symbol(\"foo\");\nws.add(sym);\nws.add(Symbol.iterator);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset.prototype.has](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset.prototype.has) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakSet.prototype.has() - JavaScript | MDN",
  "description": "The has() method of WeakSet instances returns a boolean indicating whether an\n  object exists in this WeakSet or not.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species",
  "markdown": "# Map\\[@@species\\] - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Map[@@species]`** static accessor property is an unused accessor property specifying how to copy `Map` objects.\n\n## [Syntax](#syntax)\n\n### [Return value](#return_value)\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `Map` instances.\n\n## [Description](#description)\n\nThe `@@species` accessor property returns the default constructor for `Map` objects. Subclass constructors may override it to change the constructor assignment.\n\n**Note:** This property is currently unused by all `Map` methods.\n\n## [Examples](#examples)\n\n### [Species in ordinary objects](#species_in_ordinary_objects)\n\nThe `@@species` property returns the default constructor function, which is the `Map` constructor for `Map`.\n\n```\nMap[Symbol.species]; // function Map()\n```\n\n### [Species in derived objects](#species_in_derived_objects)\n\nIn an instance of a custom `Map` subclass, such as `MyMap`, the `MyMap` species is the `MyMap` constructor. However, you might want to overwrite this, in order to return parent `Map` objects in your derived class methods:\n\n```\nclass MyMap extends Map {\n  // Overwrite MyMap species to the parent Map constructor\n  static get [Symbol.species]() {\n    return Map;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-get-map-@@species](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-get-map-@@species) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map[@@species] - JavaScript | MDN",
  "description": "The Map[@@species] static accessor property is an unused accessor property specifying how to copy Map objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref",
  "markdown": "# WeakRef.prototype.deref() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`deref()`** method of [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) instances returns this `WeakRef`'s target value, or `undefined` if the target value has been garbage-collected.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe target value of the WeakRef, which is either an object or a [non-registered symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). Returns `undefined` if the value has been garbage-collected.\n\n## [Description](#description)\n\nSee the [Notes on WeakRefs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs) section of the [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) page for some important notes.\n\n## [Examples](#examples)\n\n### [Using deref()](#using_deref)\n\nSee the [Examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples) section of the [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) page for the complete example.\n\n```\nconst tick = () => {\n  // Get the element from the weak reference, if it still exists\n  const element = this.ref.deref();\n  if (element) {\n    element.textContent = ++this.count;\n  } else {\n    // The element doesn't exist anymore\n    console.log(\"The element is gone.\");\n    this.stop();\n    this.ref = null;\n  }\n};\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weak-ref.prototype.deref](https://tc39.es/ecma262/multipage/managing-memory.html#sec-weak-ref.prototype.deref) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "WeakRef.prototype.deref() - JavaScript | MDN",
  "description": "The deref() method of WeakRef instances returns this WeakRef's target value, or undefined if the target value has been garbage-collected.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear",
  "markdown": "# Map.prototype.clear() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`clear()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances removes all elements from this map.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\n## [Examples](#examples)\n\n### [Using clear()](#using_clear)\n\n```\nconst myMap = new Map();\nmyMap.set(\"bar\", \"baz\");\nmyMap.set(1, \"foo\");\n\nconsole.log(myMap.size); // 2\nconsole.log(myMap.has(\"bar\")); // true\n\nmyMap.clear();\n\nconsole.log(myMap.size); // 0\nconsole.log(myMap.has(\"bar\")); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.clear](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.clear) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.clear() - JavaScript | MDN",
  "description": "The clear() method of Map instances removes all elements from this map.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
  "markdown": "# Map.prototype.forEach() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`forEach()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances executes a provided function once per each key/value pair in this map, in insertion order.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### [Parameters](#parameters)\n\n[`callbackFn`](#callbackfn)\n\nA function to execute for each entry in the map. The function is called with the following arguments:\n\n[`value`](#value)\n\nValue of each iteration.\n\n[`key`](#key)\n\nKey of each iteration.\n\n[`map`](#map)\n\nThe map being iterated.\n\n[`thisArg`](#thisarg) Optional\n\nA value to use as `this` when executing `callbackFn`.\n\n### [Return value](#return_value)\n\n## [Description](#description)\n\nThe `forEach` method executes the provided `callback` once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However, it is executed for values which are present but have the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n*   the entry's `value`\n*   the entry's `key`\n*   the **`Map` object** being traversed\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to `callback` when invoked, for use as its `this` value. Otherwise, the value `undefined` will be passed for use as its `this` value. The `this` value ultimately observable by `callback` is determined according to [the usual rules for determining the `this` seen by a function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nEach value is visited once, except in the case when it was deleted and re-added before `forEach` has finished. `callback` is not invoked for values deleted before being visited. New values added before `forEach` has finished will be visited.\n\n## [Examples](#examples)\n\n### [Printing the contents of a Map object](#printing_the_contents_of_a_map_object)\n\nThe following code logs a line for each element in an `Map` object:\n\n```\nfunction logMapElements(value, key, map) {\n  console.log(`map.get('${key}') = ${value}`);\n}\nnew Map([\n  [\"foo\", 3],\n  [\"bar\", {}],\n  [\"baz\", undefined],\n]).forEach(logMapElements);\n// Logs:\n// \"map.get('foo') = 3\"\n// \"map.get('bar') = [object Object]\"\n// \"map.get('baz') = undefined\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.foreach](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.foreach) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.forEach() - JavaScript | MDN",
  "description": "The forEach() method of Map instances executes a provided function once per each key/value\n  pair in this map, in insertion order.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set",
  "markdown": "# Map.prototype.set() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`set()`** method of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instances adds or updates an entry in this map with a specified key and a value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`key`](#key)\n\nThe key of the element to add to the `Map` object. The key may be any [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects)).\n\n[`value`](#value)\n\nThe value of the element to add to the `Map` object. The value may be any [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects)).\n\n### [Return value](#return_value)\n\nThe `Map` object.\n\n## [Examples](#examples)\n\n### [Using set()](#using_set)\n\n```\nconst myMap = new Map();\n\n// Add new elements to the map\nmyMap.set(\"bar\", \"foo\");\nmyMap.set(1, \"foobar\");\n\n// Update an element in the map\nmyMap.set(\"bar\", \"baz\");\n```\n\n### [Using the set() with chaining](#using_the_set_with_chaining)\n\nSince the `set()` method returns back the same `Map` object, you can chain the method call like below:\n\n```\n// Add new elements to the map with chaining.\nmyMap.set(\"bar\", \"foo\").set(1, \"foobar\").set(2, \"baz\");\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map.prototype.set](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map.prototype.set) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Map.prototype.set() - JavaScript | MDN",
  "description": "The set() method of Map instances adds or updates an entry in this map with a specified key and a value.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object",
  "markdown": "# Object() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object()`** constructor turns the input into an object. Its behavior depends on the input's type.\n\n## [Syntax](#syntax)\n\n```\nnew Object()\nnew Object(value)\n\nObject()\nObject(value)\n```\n\n**Note:** `Object()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), but sometimes with different effects. See [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`value`](#value) Optional\n\nAny value.\n\n### [Return value](#return_value)\n\nWhen the `Object()` constructor itself is called or constructed, its return value is an object:\n\n*   If the value is [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), it creates and returns an empty object.\n*   If the value is an object already, it returns the value.\n*   Otherwise, it returns an object of a type that corresponds to the given value. For example, passing a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) primitive returns a `BigInt` wrapper object.\n\nWhen `Object()` is constructed but [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is not the `Object` constructor itself, the behavior is slightly different — it initializes a new object with `new.target.prototype` as its prototype. Any argument value is ignored. This may happen, for example, when `Object()` is implicitly called via [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) in the constructor of a class that [extends `Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending_object). In this case, even if you pass a number to `super()`, the `this` value inside the constructor does not become a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) instance.\n\n## [Examples](#examples)\n\n### [Creating a new Object](#creating_a_new_object)\n\n```\nconst o = new Object();\no.foo = 42;\n\nconsole.log(o);\n// { foo: 42 }\n```\n\n### [Using Object given undefined and null types](#using_object_given_undefined_and_null_types)\n\nThe following examples store an empty `Object` object in `o`:\n\n```\nconst o = new Object(undefined);\n```\n\n```\nconst o = new Object(null);\n```\n\n### [Obtaining wrapper objects for BigInt and Symbol](#obtaining_wrapper_objects_for_bigint_and_symbol)\n\nThe [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) and [`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) constructors throw an error when called with `new`, to prevent the common mistake of creating a wrapper object instead of the primitive value. The only way to create a wrapper object for these types is to call `Object()` with them:\n\n```\nconst numberObj = new Number(1);\nconsole.log(typeof numberObj); // \"object\"\n\nconst bigintObj = Object(1n);\nconsole.log(typeof bigintObj); // \"object\"\n\nconst symbolObj = Object(Symbol(\"foo\"));\nconsole.log(typeof symbolObj); // \"object\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object-constructor](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object() constructor - JavaScript | MDN",
  "description": "The Object() constructor turns the input into an object. Its behavior depends on the input's type.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",
  "markdown": "# Object.freeze() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.freeze()`** static method _freezes_ an object. Freezing an object [prevents extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. `freeze()` returns the same object that was passed in.\n\nFreezing an object is the highest integrity level that JavaScript provides.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object to freeze.\n\n### [Return value](#return_value)\n\nThe object that was passed to the function.\n\n## [Description](#description)\n\nFreezing an object is equivalent to [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) `configurable` to `false` — and for data properties, `writable` to `false` as well. Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) exception (most commonly, but not exclusively, when in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)).\n\nFor data properties of a frozen object, their values cannot be changed since the `writable` and `configurable` attributes are set to `false`. Accessor properties (getters and setters) work the same — the property value returned by the getter may still change, and the setter can still be called without throwing errors when setting the property. Note that values that are objects can still be modified, unless they are also frozen. As an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added to or removed from the array.\n\n[Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Freezing an object with private properties does not prevent the values of these private properties from being changed. (Freezing objects is usually meant as a security measure against external code, but external code cannot access private properties anyway.) Private properties cannot be added or removed from the object, whether the object is frozen or not.\n\n`freeze()` returns the same object that was passed into the function. It _does not_ create a frozen copy.\n\nA [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) with elements will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), as they are views over memory and will definitely cause other possible issues:\n\n```\nObject.freeze(new Uint8Array(0)); // No elements\n// Uint8Array []\n\nObject.freeze(new Uint8Array(1)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n\nObject.freeze(new DataView(new ArrayBuffer(32))); // No elements\n// DataView {}\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 63, 0)); // No elements\n// Float64Array []\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 32, 2)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n```\n\nNote that as the standard three properties (`buf.byteLength`, `buf.byteOffset` and `buf.buffer`) are read-only (as are those of an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)), there is no reason for attempting to freeze these properties.\n\nUnlike [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal), existing properties in objects frozen with `Object.freeze()` are made immutable and data properties cannot be re-assigned.\n\n## [Examples](#examples)\n\n### [Freezing objects](#freezing_objects)\n\n```\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// Before freezing: new properties may be added,\n// and existing properties may be changed or removed\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\n// Freeze.\nconst o = Object.freeze(obj);\n\n// The return value is just the same object we passed in.\no === obj; // true\n\n// The object has become frozen.\nObject.isFrozen(obj); // === true\n\n// Now any changes will fail\nobj.foo = \"quux\"; // silently does nothing\n// silently doesn't add the property\nobj.quaxxor = \"the friendly duck\";\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\";\n  obj.foo = \"sparky\"; // throws a TypeError\n  delete obj.foo; // throws a TypeError\n  delete obj.quaxxor; // returns true since attribute 'quaxxor' was never added\n  obj.sparky = \"arf\"; // throws a TypeError\n}\n\nfail();\n\n// Attempted changes through Object.defineProperty;\n// both statements below throw a TypeError.\nObject.defineProperty(obj, \"ohai\", { value: 17 });\nObject.defineProperty(obj, \"foo\", { value: \"eit\" });\n\n// It's also impossible to change the prototype\n// both statements below will throw a TypeError.\nObject.setPrototypeOf(obj, { x: 20 });\nobj.__proto__ = { x: 20 };\n```\n\n### [Freezing arrays](#freezing_arrays)\n\n```\nconst a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0] = 1; // fails silently\n\n// In strict mode such attempt will throw a TypeError\nfunction fail() {\n  \"use strict\";\n  a[0] = 1;\n}\n\nfail();\n\n// Attempted to push\na.push(2); // throws a TypeError\n```\n\nThe object being frozen is _immutable_. However, it is not necessarily _constant_. The following example shows that a frozen object is not constant (freeze is shallow).\n\n```\nconst obj1 = {\n  internal: {},\n};\n\nObject.freeze(obj1);\nobj1.internal.a = \"aValue\";\n\nobj1.internal.a; // 'aValue'\n```\n\nTo be a constant object, the entire reference graph (direct and indirect references to other objects) must reference only immutable frozen objects. The object being frozen is said to be immutable because the entire object _state_ (values and references to other objects) within the whole object is fixed. Note that strings, numbers, and booleans are always immutable and that Functions and Arrays are objects.\n\n### [Deep freezing](#deep_freezing)\n\nThe result of calling `Object.freeze(object)` only applies to the immediate properties of `object` itself and will prevent future property addition, removal or value re-assignment operations _only_ on `object`. If the value of those properties are objects themselves, those objects are not frozen and may be the target of property addition, removal or value re-assignment operations.\n\n```\nconst employee = {\n  name: \"Mayank\",\n  designation: \"Developer\",\n  address: {\n    street: \"Rohini\",\n    city: \"Delhi\",\n  },\n};\n\nObject.freeze(employee);\n\nemployee.name = \"Dummy\"; // fails silently in non-strict mode\nemployee.address.city = \"Noida\"; // attributes of child object can be modified\n\nconsole.log(employee.address.city); // \"Noida\"\n```\n\nTo make an object immutable, recursively freeze each non-primitive property (deep freeze). Use the pattern on a case-by-case basis based on your design when you know the object contains no [cycles](https://en.wikipedia.org/wiki/Cycle_(graph_theory)) in the reference graph, otherwise an endless loop will be triggered. For example, functions created with the [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) syntax have a [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property with a `constructor` property that points to the function itself, so they have cycles by default. Other functions, such as [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), can still be frozen.\n\nAn enhancement to `deepFreeze()` would be to store the objects it has already visited, so you can suppress calling `deepFreeze()` recursively when an object is in the process of being made immutable. For one example, see [using `WeakSet` to detect circular references](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet#use_case_detecting_circular_references). You still run a risk of freezing an object that shouldn't be frozen, such as [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window).\n\n```\nfunction deepFreeze(object) {\n  // Retrieve the property names defined on object\n  const propNames = Reflect.ownKeys(object);\n\n  // Freeze properties before freezing self\n  for (const name of propNames) {\n    const value = object[name];\n\n    if ((value && typeof value === \"object\") || typeof value === \"function\") {\n      deepFreeze(value);\n    }\n  }\n\n  return Object.freeze(object);\n}\n\nconst obj2 = {\n  internal: {\n    a: null,\n  },\n};\n\ndeepFreeze(obj2);\n\nobj2.internal.a = \"anotherValue\"; // fails silently in non-strict mode\nobj2.internal.a; // null\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.freeze](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.freeze) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.freeze() - JavaScript | MDN",
  "description": "The Object.freeze() static method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed",
  "markdown": "# Object.isSealed() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.isSealed()`** static method determines if an object is [sealed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be checked.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the given object is sealed.\n\n## [Description](#description)\n\nReturns `true` if the object is sealed, otherwise `false`. An object is sealed if it is not [extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).\n\n## [Examples](#examples)\n\n### [Using Object.isSealed](#using_object.issealed)\n\n```\n// Objects aren't sealed by default.\nconst empty = {};\nObject.isSealed(empty); // false\n\n// If you make an empty object non-extensible,\n// it is vacuously sealed.\nObject.preventExtensions(empty);\nObject.isSealed(empty); // true\n\n// The same is not true of a non-empty object,\n// unless its properties are all non-configurable.\nconst hasProp = { fee: \"fie foe fum\" };\nObject.preventExtensions(hasProp);\nObject.isSealed(hasProp); // false\n\n// But make them all non-configurable\n// and the object becomes sealed.\nObject.defineProperty(hasProp, \"fee\", {\n  configurable: false,\n});\nObject.isSealed(hasProp); // true\n\n// The easiest way to seal an object, of course,\n// is Object.seal.\nconst sealed = {};\nObject.seal(sealed);\nObject.isSealed(sealed); // true\n\n// A sealed object is, by definition, non-extensible.\nObject.isExtensible(sealed); // false\n\n// A sealed object might be frozen,\n// but it doesn't have to be.\nObject.isFrozen(sealed); // true\n// (all properties also non-writable)\n\nconst s2 = Object.seal({ p: 3 });\nObject.isFrozen(s2); // false\n// ('p' is still writable)\n\nconst s3 = Object.seal({\n  get p() {\n    return 0;\n  },\n});\nObject.isFrozen(s3); // true\n// (only configurability matters for accessor properties)\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```\nObject.isSealed(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isSealed(1);\n// true                          (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.issealed](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.issealed) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.isSealed() - JavaScript | MDN",
  "description": "The Object.isSealed() static method determines if an object is sealed.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen",
  "markdown": "# Object.isFrozen() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.isFrozen()`** static method determines if an object is [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be checked.\n\n### [Return value](#return_value)\n\nA [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) indicating whether or not the given object is frozen.\n\n## [Description](#description)\n\nAn object is frozen if and only if it is not [extensible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), all its properties are non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.\n\n## [Examples](#examples)\n\n### [Using Object.isFrozen](#using_object.isfrozen)\n\n```\n// A new object is extensible, so it is not frozen.\nObject.isFrozen({}); // false\n\n// An empty object which is not extensible\n// is vacuously frozen.\nconst vacuouslyFrozen = Object.preventExtensions({});\nObject.isFrozen(vacuouslyFrozen); // true\n\n// A new object with one property is also extensible,\n// ergo not frozen.\nconst oneProp = { p: 42 };\nObject.isFrozen(oneProp); // false\n\n// Preventing extensions to the object still doesn't\n// make it frozen, because the property is still\n// configurable (and writable).\nObject.preventExtensions(oneProp);\nObject.isFrozen(oneProp); // false\n\n// Deleting that property makes the object vacuously frozen.\ndelete oneProp.p;\nObject.isFrozen(oneProp); // true\n\n// A non-extensible object with a non-writable\n// but still configurable property is not frozen.\nconst nonWritable = { e: \"plep\" };\nObject.preventExtensions(nonWritable);\nObject.defineProperty(nonWritable, \"e\", {\n  writable: false,\n}); // make non-writable\nObject.isFrozen(nonWritable); // false\n\n// Changing that property to non-configurable\n// then makes the object frozen.\nObject.defineProperty(nonWritable, \"e\", {\n  configurable: false,\n}); // make non-configurable\nObject.isFrozen(nonWritable); // true\n\n// A non-extensible object with a non-configurable\n// but still writable property also isn't frozen.\nconst nonConfigurable = { release: \"the kraken!\" };\nObject.preventExtensions(nonConfigurable);\nObject.defineProperty(nonConfigurable, \"release\", {\n  configurable: false,\n});\nObject.isFrozen(nonConfigurable); // false\n\n// Changing that property to non-writable\n// then makes the object frozen.\nObject.defineProperty(nonConfigurable, \"release\", {\n  writable: false,\n});\nObject.isFrozen(nonConfigurable); // true\n\n// A non-extensible object with a configurable\n// accessor property isn't frozen.\nconst accessor = {\n  get food() {\n    return \"yum\";\n  },\n};\nObject.preventExtensions(accessor);\nObject.isFrozen(accessor); // false\n\n// When we make that property non-configurable it becomes frozen.\nObject.defineProperty(accessor, \"food\", {\n  configurable: false,\n});\nObject.isFrozen(accessor); // true\n\n// But the easiest way for an object to be frozen\n// is if Object.freeze has been called on it.\nconst frozen = { 1: 81 };\nObject.isFrozen(frozen); // false\nObject.freeze(frozen);\nObject.isFrozen(frozen); // true\n\n// By definition, a frozen object is non-extensible.\nObject.isExtensible(frozen); // false\n\n// Also by definition, a frozen object is sealed.\nObject.isSealed(frozen); // true\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```\nObject.isFrozen(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isFrozen(1);\n// true                          (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.isfrozen](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isfrozen) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.isFrozen() - JavaScript | MDN",
  "description": "The Object.isFrozen() static method determines if an object is\n  frozen.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",
  "markdown": "# Object.fromEntries() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.fromEntries()`** static method transforms a list of key-value pairs into an object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nObject.fromEntries(iterable)\n```\n\n### [Parameters](#parameters)\n\n[`iterable`](#iterable)\n\nAn [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), containing a list of objects. Each object should have two properties:\n\n[`0`](#0)\n\nA string or [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property key.\n\n[`1`](#1)\n\nThe property value.\n\nTypically, this object is implemented as a two-element array, with the first element being the property key and the second element being the property value.\n\n### [Return value](#return_value)\n\nA new object whose properties are given by the entries of the iterable.\n\n## [Description](#description)\n\nThe `Object.fromEntries()` method takes a list of key-value pairs and returns a new object whose properties are given by those entries. The `iterable` argument is expected to be an object that implements an `@@iterator` method. The method returns an iterator object that produces two-element array-like objects. The first element is a value that will be used as a property key, and the second element is the value to associate with that property key.\n\n`Object.fromEntries()` performs the reverse of [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), except that `Object.entries()` only returns string-keyed properties, while `Object.fromEntries()` can also create symbol-keyed properties.\n\n**Note:** Unlike [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from), `Object.fromEntries()` does not use the value of `this`, so calling it on another constructor does not create objects of that type.\n\n## [Examples](#examples)\n\n### [Converting a Map to an Object](#converting_a_map_to_an_object)\n\nWith `Object.fromEntries`, you can convert from [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) to [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object):\n\n```\nconst map = new Map([\n  [\"foo\", \"bar\"],\n  [\"baz\", 42],\n]);\nconst obj = Object.fromEntries(map);\nconsole.log(obj); // { foo: \"bar\", baz: 42 }\n```\n\n### [Converting an Array to an Object](#converting_an_array_to_an_object)\n\nWith `Object.fromEntries`, you can convert from [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) to [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object):\n\n```\nconst arr = [\n  [\"0\", \"a\"],\n  [\"1\", \"b\"],\n  [\"2\", \"c\"],\n];\nconst obj = Object.fromEntries(arr);\nconsole.log(obj); // { 0: \"a\", 1: \"b\", 2: \"c\" }\n```\n\n### [Object transformations](#object_transformations)\n\nWith `Object.fromEntries`, its reverse method [`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries), and [array manipulation methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods), you are able to transform objects like this:\n\n```\nconst object1 = { a: 1, b: 2, c: 3 };\n\nconst object2 = Object.fromEntries(\n  Object.entries(object1).map(([key, val]) => [key, val * 2]),\n);\n\nconsole.log(object2);\n// { a: 2, b: 4, c: 6 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.fromentries](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.fromentries) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.fromEntries() - JavaScript | MDN",
  "description": "The Object.fromEntries() static method transforms a list of key-value pairs into an object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal",
  "markdown": "# Object.seal() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object.seal()`** static method _seals_ an object. Sealing an object [prevents extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. `seal()` returns the same object that was passed in.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`obj`](#obj)\n\nThe object which should be sealed.\n\n### [Return value](#return_value)\n\nThe object being sealed.\n\n## [Description](#description)\n\nSealing an object is equivalent to [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) to `configurable: false`. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) (most commonly, although not exclusively, when in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) code).\n\n[Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Private properties cannot be added or removed from the object, whether the object is sealed or not.\n\nThe prototype chain remains untouched. However, due to the effect of [preventing extensions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), the `[[Prototype]]` cannot be reassigned.\n\nUnlike [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), objects sealed with `Object.seal()` may have their existing properties changed, as long as they are writable.\n\n## [Examples](#examples)\n\n### [Using Object.seal](#using_object.seal)\n\n```\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// New properties may be added, existing properties\n// may be changed or removed.\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\nconst o = Object.seal(obj);\n\no === obj; // true\nObject.isSealed(obj); // true\n\n// Changing property values on a sealed object\n// still works.\nobj.foo = \"quux\";\n\n// But you can't convert data properties to accessors,\n// or vice versa.\nObject.defineProperty(obj, \"foo\", {\n  get() {\n    return \"g\";\n  },\n}); // throws a TypeError\n\n// Now any changes, other than to property values,\n// will fail.\nobj.quaxxor = \"the friendly duck\";\n// silently doesn't add the property\ndelete obj.foo;\n// silently doesn't delete the property\n\n// ...and in strict mode such attempts\n// will throw TypeErrors.\nfunction fail() {\n  \"use strict\";\n  delete obj.foo; // throws a TypeError\n  obj.sparky = \"arf\"; // throws a TypeError\n}\nfail();\n\n// Attempted additions through\n// Object.defineProperty will also throw.\nObject.defineProperty(obj, \"ohai\", {\n  value: 17,\n}); // throws a TypeError\nObject.defineProperty(obj, \"foo\", {\n  value: \"eit\",\n}); // changes existing property value\n```\n\n### [Non-object argument](#non-object_argument)\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). In ES2015, a non-object argument will be returned as-is without any errors, since primitives are already, by definition, immutable.\n\n```\nObject.seal(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.seal(1);\n// 1                             (ES2015 code)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object.seal](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.seal) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Object.seal() - JavaScript | MDN",
  "description": "The Object.seal() static method seals an object. Sealing an object prevents extensions and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. seal() returns the same object that was passed in.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve",
  "markdown": "# import.meta.resolve() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**`import.meta.resolve()`** is a built-in function defined on the [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.\n\n## [Syntax](#syntax)\n\n```\nimport.meta.resolve(moduleName)\n```\n\n### [Parameters](#parameters)\n\n[`moduleName`](#modulename)\n\nA string that specifies a potentially importable module. This may be a relative path (such as `\"./lib/helper.js\"`), a bare name (such as `\"my-module\"`), or an absolute URL (such as `\"https://example.com/lib/helper.js\"`).\n\n### [Return value](#return_value)\n\nReturns a string corresponding to the path that would be imported if the argument were passed to [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import).\n\n## [Description](#description)\n\n`import.meta.resolve()` allows a script to access the _module specifier resolution_ algorithm for a name, like this:\n\n```\n// Script at https://example.com/main.js\n\nconst helperPath = import.meta.resolve(\"./lib/helper.js\");\nconsole.log(helperPath); // \"https://example.com/lib/helper.js\"\n```\n\nNote that `import.meta.resolve()` only performs resolution and does not attempt to load or import the resulting path. (The [explainer for the specification](https://gist.github.com/domenic/f2a0a9cb62d499bcc4d12aebd1c255ab#sync-vs-async) describes the reasoning for this behavior.) Therefore, its return value is the same _regardless of whether the returned path corresponds to a file that exists, and regardless of whether that file contains valid code for a module_.\n\nIt is different from [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import), because although both accept a module specifier as the first argument, `import.meta.resolve()` returns the path that _would be imported_ without making any attempt to access that path. Therefore, the following two are effectively the same code:\n\n```\n// Approach 1\nconsole.log(await import(\"./lib/helper.js\"));\n\n// Approach 2\nconst helperPath = import.meta.resolve(\"./lib/helper.js\");\nconsole.log(await import(helperPath));\n```\n\nHowever, even if `\"./lib/helper.js\"` cannot be successfully imported, the second snippet will not encounter an error until it attempts to perform the import on line 2.\n\n### [Bare module names](#bare_module_names)\n\nYou can pass a bare module name (also known as a bare module specifier) to `import.meta.resolve()`, as long as module resolution is defined for the name. For example, you can define this using an [import map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#importing_modules_using_import_maps) inside a browser:\n\n```\n<!-- index.html -->\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"my-module\": \"./modules/my-module/index.js\"\n    }\n  }\n</script>\n\n<script type=\"module\">\n  const moduleEntryPath = import.meta.resolve(\"my-module\");\n  console.log(moduleEntryPath);\n</script>\n```\n\nAgain, since this snippet does not try to import `moduleEntryPath` — neither does the import map — it prints the resolved URL regardless of whether `./modules/my-module/index.js` actually exists.\n\n### [Comparison with new URL()](#comparison_with_new_url)\n\nThe [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor accepts a second _base URL_ argument. When the first argument is a relative path and the base URL is [`import.meta.url`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta#value), the effect is similar to `import.meta.resolve()`.\n\n```\nconst helperPath = new URL(\"./lib/helper.js\", import.meta.url).href;\nconsole.log(helperPath);\n```\n\nThis is also a useful replacement syntax when targeting older browsers. However, there are some differences:\n\n*   `import.meta.resolve()` returns a string, while `new URL()` returns a `URL` object. It is possible to use [`href`](https://developer.mozilla.org/en-US/docs/Web/API/URL/href) or [`toString()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/toString) on the constructed `URL`, but this may still not produce the exact same result in some JavaScript environments or when using tools like bundlers to statically analyze the code.\n*   `import.meta.resolve()` is aware of additional resolution configurations, such as resolving bare module names using import maps, as described above. `new URL()` is not aware of import maps and treats bare module names as relative paths (i.e. `new URL(\"my-module\", import.meta.url)` means `new URL(\"./my-module\", import.meta.url)`).\n\nSome tools recognize `new URL(\"./lib/helper.js\", import.meta.url).href` as a dependency on `\"./lib/helper.js\"` (similar to an import), and take this into account for features like bundling, rewriting imports for moved files, \"go to source\" functionality, etc. However, since `import.meta.resolve()` is less ambiguous and specifically designed to indicate a module path resolution dependency, you should use `import.meta.resolve(moduleName)` instead of `new URL(moduleName, import.meta.url)` for these use cases wherever possible.\n\n### [Not an ECMAScript feature](#not_an_ecmascript_feature)\n\n`import.meta.resolve()` is not specified or documented as part of the [ECMAScript specification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview#javascript_the_core_language_ecmascript) for JavaScript modules. Instead, the specification defines [the `import.meta` object](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ImportMeta) but [leaves all its properties as \"host-defined\"](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-hostgetimportmetaproperties). The WHATWG HTML standard picks up where the ECMAScript standard leaves off, and [defines `import.meta.resolve`](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) using its [module specifier resolution](https://html.spec.whatwg.org/multipage/webappapis.html#resolve-a-module-specifier).\n\nThis means that `import.meta.resolve()` is not required to be implemented by all conformant JavaScript implementations. However, `import.meta.resolve()` may also be available in non-browser environments:\n\n*   Deno implements [compatibility with browser behavior](https://deno.land/manual/runtime/import_meta_api).\n*   Node.js also implements [the `import.meta.resolve()` function](https://nodejs.org/docs/latest/api/esm.html#importmetaresolvespecifier), but adds an additional `parent` parameter if you use the `--experimental-import-meta-resolve` flag.\n\n## [Examples](#examples)\n\n### [Resolve a path for the Worker() constructor](#resolve_a_path_for_the_worker_constructor)\n\n`import.meta.resolve()` is particularly valuable for APIs that take a path to a script file as an argument, such as the [`Worker()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker) constructor:\n\n```\n// main.js\nconst workerPath = import.meta.resolve(\"./worker.js\");\nconst worker = new Worker(workerPath, { type: \"module\" });\nworker.addEventListener(\"message\", console.log);\n```\n\n```\n// worker.js\nself.postMessage(\"hello!\");\n```\n\nThis is also useful to calculate paths for other workers, such as [service workers](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) and [shared workers](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker). However, if you are using a relative path to calculate the URL of a service worker, keep in mind that the directory of the resolved path determines its [registration scope](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope) by default (although a different scope can be specified [during registration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register)).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [HTML Standard  <br>\\# hostgetimportmetaproperties](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "import.meta.resolve() - JavaScript | MDN",
  "description": "import.meta.resolve() is a built-in function defined on the import.meta object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf",
  "markdown": "# Number.prototype.valueOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`valueOf()`** method of [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values returns the value of this number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA number representing the primitive value of the specified [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object.\n\n## [Description](#description)\n\nThis method is usually called internally by JavaScript and not explicitly in web code.\n\n## [Examples](#examples)\n\n### [Using valueOf](#using_valueof)\n\n```\nconst numObj = new Number(10);\nconsole.log(typeof numObj); // object\n\nconst num = numObj.valueOf();\nconsole.log(num); // 10\nconsole.log(typeof num); // number\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number.prototype.valueof](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number.prototype.valueof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Number.prototype.valueOf() - JavaScript | MDN",
  "description": "The valueOf() method of Number values returns the value of this number.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length",
  "markdown": "# arguments.length - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`arguments.length`** data property contains the number of arguments passed to the function.\n\n## [Value](#value)\n\nA non-negative integer.\n\n| Property attributes of `arguments.length` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n## [Description](#description)\n\nThe `arguments.length` property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see [`Function.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)). For example, for the function below:\n\n```\nfunction func1(a, b, c) {\n  console.log(arguments.length);\n}\n```\n\n`func1.length` returns `3`, because `func1` declares three formal parameters. However, `func1(1, 2, 3, 4, 5)` logs `5`, because `func1` was called with five arguments. Similarly, `func1(1)` logs `1`, because `func1` was called with one argument.\n\n## [Examples](#examples)\n\n### [Using arguments.length](#using_arguments.length)\n\nIn this example, we define a function that can add two or more numbers together.\n\n```\nfunction adder(base /*, num1, …, numN */) {\n  base = Number(base);\n  for (let i = 1; i < arguments.length; i++) {\n    base += Number(arguments[i]);\n  }\n  return base;\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arguments-exotic-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arguments-exotic-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "arguments.length - JavaScript | MDN",
  "description": "The arguments.length data property contains the number of arguments passed to the function.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare",
  "markdown": "# Intl.Collator.prototype.compare() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`compare()`** method of [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instances compares two strings according to the sort order of this collator object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncompare(string1, string2)\n```\n\n### [Parameters](#parameters)\n\n[`string1`](#string1), `string2`\n\nThe strings to compare against each other.\n\n### [Return value](#return_value)\n\nA number indicating how `string1` and `string2` compare to each other according to the sort order of this [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object:\n\n*   A negative value if `string1` comes before `string2`;\n*   A positive value if `string1` comes after `string2`;\n*   0 if they are considered equal.\n\n## [Examples](#examples)\n\n### [Using compare for array sort](#using_compare_for_array_sort)\n\nUse the `compare` function for sorting arrays. Note that the function is bound to the collator from which it was obtained, so it can be passed directly to [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\n```\nconst a = [\"Offenbach\", \"Österreich\", \"Odenwald\"];\nconst collator = new Intl.Collator(\"de-u-co-phonebk\");\na.sort(collator.compare);\nconsole.log(a.join(\", \")); // \"Odenwald, Österreich, Offenbach\"\n```\n\n### [Using compare for array search](#using_compare_for_array_search)\n\nUse the `compare` function for finding matching strings in arrays:\n\n```\nconst a = [\"Congrès\", \"congres\", \"Assemblée\", \"poisson\"];\nconst collator = new Intl.Collator(\"fr\", {\n  usage: \"search\",\n  sensitivity: \"base\",\n});\nconst s = \"congres\";\nconst matches = a.filter((v) => collator.compare(v, s) === 0);\nconsole.log(matches.join(\", \")); // \"Congrès, congres\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.prototype.compare](https://tc39.es/ecma402/#sec-intl.collator.prototype.compare) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Collator.prototype.compare() - JavaScript | MDN",
  "description": "The compare() method of Intl.Collator instances compares two\n  strings according to the sort order of this collator object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/supportedLocalesOf",
  "markdown": "# Intl.DateTimeFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DateTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.DateTimeFormat.supportedLocalesOf(locales)\nIntl.DateTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in date and time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to date and time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DateTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.datetimeformat.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.DateTimeFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat",
  "markdown": "# Intl.DateTimeFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DateTimeFormat()`** constructor creates [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DateTimeFormat()\nnew Intl.DateTimeFormat(locales)\nnew Intl.DateTimeFormat(locales, options)\n\nIntl.DateTimeFormat()\nIntl.DateTimeFormat(locales)\nIntl.DateTimeFormat(locales, options)\n```\n\n**Note:** `Intl.DateTimeFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.DateTimeFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.DateTimeFormat` instance; see [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\n[`ca`](#ca)\n\nSee [`calendar`](#calendar).\n\n[`hc`](#hc)\n\nSee [`hourCycle`](#hourcycle).\n\nThese keys can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [date-time component options](#date-time_component_options), and [style shortcuts](#style_shortcuts).\n\n#### Locale options\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`calendar`](#calendar)\n\nThe calendar to use, such as `\"chinese\"`, `\"gregory\"`, `\"persian\"`, and so on. For a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types). This option can also be set through the `ca` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`hour12`](#hour12)\n\nWhether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent. When `true`, this option sets `hourCycle` to either `\"h11\"` or `\"h12\"`, depending on the locale. When `false`, it sets `hourCycle` to `\"h23\"`. `hour12` overrides both the `hc` locale extension tag and the `hourCycle` option, should either or both of those be present.\n\n[`hourCycle`](#hourcycle)\n\nThe hour cycle to use. Possible values are `\"h11\"`, `\"h12\"`, `\"h23\"`, and `\"h24\"`. This option can also be set through the `hc` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`timeZone`](#timezone)\n\nThe time zone to use. Time zone names correspond to the Zone and Link names of the [IANA Time Zone Database](https://www.iana.org/time-zones), such as `\"UTC\"`, `\"Asia/Shanghai\"`, `\"Asia/Kolkata\"`, and `\"America/New_York\"`. Additionally, time zones can be given as UTC offsets in the format \"±hh:mm\", \"±hhmm\", or \"±hh\", for example as `\"+01:00\"`, `\"-2359\"`, or `\"+23\"`. The default is the runtime's default time zone.\n\n#### Date-time component options\n\n[`weekday`](#weekday)\n\nThe representation of the weekday. Possible values are:\n\n[`\"long\"`](#long)\n\nE.g., `Thursday`\n\n[`\"short\"`](#short)\n\nE.g., `Thu`\n\n[`\"narrow\"`](#narrow)\n\nE.g., `T`. Two weekdays may have the same narrow style for some locales (e.g. `Tuesday`'s narrow style is also `T`).\n\n[`era`](#era)\n\nThe representation of the era. Possible values are:\n\n[`\"long\"`](#long_2)\n\nE.g., `Anno Domini`\n\n[`\"short\"`](#short_2)\n\nE.g., `AD`\n\n[`\"narrow\"`](#narrow_2)\n\nE.g., `A`\n\n[`year`](#year)\n\nThe representation of the year. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`month`](#month)\n\nThe representation of the month. Possible values are:\n\n[`\"numeric\"`](#numeric)\n\nE.g., `3`\n\n[`\"2-digit\"`](#2-digit)\n\nE.g., `03`\n\n[`\"long\"`](#long_3)\n\nE.g., `March`\n\n[`\"short\"`](#short_3)\n\nE.g., `Mar`\n\n[`\"narrow\"`](#narrow_3)\n\nE.g., `M`). Two months may have the same narrow style for some locales (e.g. `May`'s narrow style is also `M`).\n\n[`day`](#day)\n\nThe representation of the day. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`dayPeriod`](#dayperiod)\n\nThe formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values are `\"narrow\"`, `\"short\"`, and `\"long\"`.\n\n**Note:** This option only has an effect if a 12-hour clock (`hourCycle: \"h12\"` or `hourCycle: \"h11\"`) is used. Many locales use the same string irrespective of the width specified.\n\n[`hour`](#hour)\n\nThe representation of the hour. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`minute`](#minute)\n\nThe representation of the minute. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`second`](#second)\n\nThe representation of the second. Possible values are `\"numeric\"` and `\"2-digit\"`.\n\n[`fractionalSecondDigits`](#fractionalseconddigits)\n\nThe number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are from `1` to `3`.\n\n[`timeZoneName`](#timezonename)\n\nThe localized representation of the time zone name. Possible values are:\n\n[`\"long\"`](#long_4)\n\nLong localized form (e.g., `Pacific Standard Time`, `Nordamerikanische Westküsten-Normalzeit`)\n\n[`\"short\"`](#short_4)\n\nShort localized form (e.g.: `PST`, `GMT-8`)\n\n[`\"shortOffset\"`](#shortoffset)\n\nShort localized GMT format (e.g., `GMT-8`)\n\n[`\"longOffset\"`](#longoffset)\n\nLong localized GMT format (e.g., `GMT-08:00`)\n\n[`\"shortGeneric\"`](#shortgeneric)\n\nShort generic non-location format (e.g.: `PT`, `Los Angeles Zeit`).\n\n[`\"longGeneric\"`](#longgeneric)\n\nLong generic non-location format (e.g.: `Pacific Time`, `Nordamerikanische Westküstenzeit`)\n\n**Note:** Timezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\".\n\nThe default value for each date-time component option is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), but if all component properties are [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), then `year`, `month`, and `day` default to `\"numeric\"`. If any of the date-time component options is specified, then `dateStyle` and `timeStyle` must be `undefined`.\n\n[`formatMatcher`](#formatmatcher)\n\nThe format matching algorithm to use. Possible values are `\"basic\"` and `\"best fit\"`; the default is `\"best fit\"`. Implementations are required to support displaying at least the following subsets of date-time components:\n\n*   `weekday`, `year`, `month`, `day`, `hour`, `minute`, `second`\n*   `weekday`, `year`, `month`, `day`\n*   `year`, `month`, `day`\n*   `year`, `month`\n*   `month`, `day`\n*   `hour`, `minute`, `second`\n*   `hour`, `minute`\n\nImplementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. The algorithm for `\"best fit\"` is implementation-defined, and `\"basic\"` is [defined by the spec](https://tc39.es/ecma402/#sec-basicformatmatcher). This option is only used when both `dateStyle` and `timeStyle` are `undefined` (so that each date-time component's format is individually customizable).\n\n#### Style shortcuts\n\n[`dateStyle`](#datestyle)\n\nThe [date formatting style](https://cldr.unicode.org/translation/date-time/date-time-patterns#h.aa5zjyepm6vh) to use. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`. It expands to styles for `weekday`, `day`, `month`, `year`, and `era`, with the exact combination of values depending on the locale.\n\n[`timeStyle`](#timestyle)\n\nThe [time formatting style](https://cldr.unicode.org/translation/date-time/date-time-patterns#h.588vo3awdscu) to use. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`. It expands to styles for `hour`, `minute`, `second`, and `timeZoneName`, with the exact combination of values depending on the locale.\n\n**Note:** `dateStyle` and `timeStyle` can be used with each other, but not with other date-time component options (e.g. `weekday`, `hour`, `month`, etc.).\n\n### [Return value](#return_value)\n\nA new `Intl.DateTimeFormat` object.\n\n**Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.DateTimeFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.DateTimeFormat` instance is returned in both cases. However, if the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.DateTimeFormat` (doesn't necessarily mean it's created via `new Intl.DateTimeFormat`; just that it has `Intl.DateTimeFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.DateTimeFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```\nconst formatter = Intl.DateTimeFormat.call(\n  { __proto__: Intl.DateTimeFormat.prototype },\n  \"en-US\",\n  { dateStyle: \"full\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: DateTimeFormat [Intl.DateTimeFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.DateTimeFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) and [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange)) would fail: \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainDateTimeFormat`, does not happen when `Intl.DateTimeFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.DateTimeFormat`. If you call it directly as `Intl.DateTimeFormat()`, the `this` value is [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.DateTimeFormat` instance is created normally.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Using DateTimeFormat](#using_datetimeformat)\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default locale and default options.\n\n```\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n```\n\n### [Using timeStyle and dateStyle](#using_timestyle_and_datestyle)\n\n`dateStyle` and `timeStyle` provide a shortcut for setting multiple date-time component options at once. For example, for `en-US`, `dateStyle: \"short\"` is equivalent to setting `year: \"2-digit\", month: \"numeric\", day: \"numeric\"`, and `timeStyle: \"short\"` is equivalent to setting `hour: \"numeric\", minute: \"numeric\"`.\n\n```\nconst shortTime = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"short\",\n});\nconsole.log(shortTime.format(Date.now())); // \"1:31 PM\"\n\nconst shortDate = new Intl.DateTimeFormat(\"en-US\", {\n  dateStyle: \"short\",\n});\nconsole.log(shortDate.format(Date.now())); // \"7/7/20\"\n\nconst mediumTime = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\",\n});\nconsole.log(mediumTime.format(Date.now())); // \"7/7/20, 1:31:55 PM\"\n```\n\nHowever, the exact (locale dependent) component styles they resolve to are not included in the [resolved options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions). This ensures the result of `resolvedOptions()` can be passed directly to the `Intl.DateTimeFormat()` constructor (because an `options` object with both `dateStyle` or `timeStyle` and individual date or time component styles is not valid).\n\n```\nconsole.log(shortDate.resolvedOptions().year); // undefined\n```\n\n### [Using dayPeriod](#using_dayperiod)\n\nUse the `dayPeriod` option to output a string for the times of day (\"in the morning\", \"at night\", \"noon\", etc.). Note, that this only works when formatting for a 12 hour clock (`hourCycle: 'h12'` or `hourCycle: 'h11'`) and that for many locales the strings are the same irrespective of the value passed for the `dayPeriod`.\n\n```\nconst date = Date.UTC(2012, 11, 17, 4, 0, 42);\n\nconsole.log(\n  new Intl.DateTimeFormat(\"en-GB\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"short\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// 4 at night\"  (same formatting in en-GB for all dayPeriod values)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"narrow\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 mat.\"  (same output in French for both narrow/short dayPeriod)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"long\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 du matin\"\n```\n\n### [Using timeZoneName](#using_timezonename)\n\nUse the `timeZoneName` option to output a string for the timezone (\"GMT\", \"Pacific Time\", etc.).\n\n```\nconst date = Date.UTC(2021, 11, 17, 3, 0, 42);\nconst timezoneNames = [\n  \"short\",\n  \"long\",\n  \"shortOffset\",\n  \"longOffset\",\n  \"shortGeneric\",\n  \"longGeneric\",\n];\n\nfor (const zoneName of timezoneNames) {\n  // Do something with currentValue\n  const formatter = new Intl.DateTimeFormat(\"en-US\", {\n    timeZone: \"America/Los_Angeles\",\n    timeZoneName: zoneName,\n  });\n  console.log(`${zoneName}: ${formatter.format(date)}`);\n}\n\n// Logs:\n// short: 12/16/2021, PST\n// long: 12/16/2021, Pacific Standard Time\n// shortOffset: 12/16/2021, GMT-8\n// longOffset: 12/16/2021, GMT-08:00\n// shortGeneric: 12/16/2021, PT\n// longGeneric: 12/16/2021, Pacific Time\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-datetimeformat-constructor](https://tc39.es/ecma402/#sec-intl-datetimeformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat() constructor - JavaScript | MDN",
  "description": "The Intl.DateTimeFormat() constructor creates Intl.DateTimeFormat objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/resolvedOptions",
  "markdown": "# Intl.Collator.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instances returns a new object with properties reflecting the locale and collation options computed during initialization of this collator object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and collation options computed during the initialization of the given [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`usage`](#usage), `sensitivity`, `ignorePunctuation`\n\nThe values provided for these properties in the `options` argument or filled in as defaults.\n\n[`collation`](#collation)\n\nThe value requested using the Unicode extension key `\"co\"`, if it is supported for `locale`, or `\"default\"`.\n\n[`numeric`](#numeric), `caseFirst`\n\nThe values requested for these properties in the `options` argument or using the Unicode extension keys `\"kn\"` and `\"kf\"` or filled in as defaults. If the implementation does not support these properties, they are omitted.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst de = new Intl.Collator(\"de\", { sensitivity: \"base\" });\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de\"\nusedOptions.usage; // \"sort\"\nusedOptions.sensitivity; // \"base\"\nusedOptions.ignorePunctuation; // false\nusedOptions.collation; // \"default\"\nusedOptions.numeric; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.collator.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Collator.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.Collator instances returns a new object with properties reflecting the locale and collation options\n  computed during initialization of this collator object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRangeToParts",
  "markdown": "# Intl.DateTimeFormat.prototype.formatRangeToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRangeToParts()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances returns an array of locale-specific tokens representing each part of the formatted date range produced by this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatRangeToParts(startDate, endDate)\n```\n\n## [Examples](#examples)\n\n### [Basic formatRangeToParts usage](#basic_formatrangetoparts_usage)\n\nThis method receives two [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)s and returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the _locale-specific_ tokens representing each part of the formatted date range.\n\n**Note:** The return values shown in your locale may differ from those listed below.\n\n```\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\n\nconst fmt = new Intl.DateTimeFormat(\"en\", {\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\n\nconsole.log(fmt.formatRange(date1, date2)); // '10:00 – 11:00 AM'\n\nfmt.formatRangeToParts(date1, date2);\n// [\n//   { type: 'hour',      value: '10',  source: \"startRange\" },\n//   { type: 'literal',   value: ':',   source: \"startRange\" },\n//   { type: 'minute',    value: '00',  source: \"startRange\" },\n//   { type: 'literal',   value: ' – ', source: \"shared\"     },\n//   { type: 'hour',      value: '11',  source: \"endRange\"   },\n//   { type: 'literal',   value: ':',   source: \"endRange\"   },\n//   { type: 'minute',    value: '00',  source: \"endRange\"   },\n//   { type: 'literal',   value: ' ',   source: \"shared\"     },\n//   { type: 'dayPeriod', value: 'AM',  source: \"shared\"     }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DateTimeFormat.prototype.formatRangeToParts](https://tc39.es/ecma402/#sec-Intl.DateTimeFormat.prototype.formatRangeToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.prototype.formatRangeToParts() - JavaScript | MDN",
  "description": "The formatRangeToParts() method of Intl.DateTimeFormat instances returns an array of locale-specific tokens representing each part of the formatted date\n  range produced by this Intl.DateTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange",
  "markdown": "# Intl.DateTimeFormat.prototype.formatRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRange()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances formats a date range in the most concise way based on the locales and options provided when instantiating this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatRange(startDate, endDate)\n```\n\n### [Parameters](#parameters)\n\n[`startDate`](#startdate)\n\nA [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object representing the start of the date range.\n\n[`endDate`](#enddate)\n\nA [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object representing the end of the date range.\n\n### [Return value](#return_value)\n\nA string representing the given date range formatted according to the locale and formatting options of this [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n## [Examples](#examples)\n\n### [Basic formatRange usage](#basic_formatrange_usage)\n\nThis method receives two [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)s and formats the date range in the most concise way based on the `locale` and `options` provided when instantiating [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n\n```\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\nconst date3 = new Date(Date.UTC(1906, 0, 20, 10, 0, 0)); // Sat, 20 Jan 1906 10:00:00 GMT\n\nconst fmt1 = new Intl.DateTimeFormat(\"en\", {\n  year: \"2-digit\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\nconsole.log(fmt1.format(date1)); // '1/10/06, 10:00 AM'\nconsole.log(fmt1.formatRange(date1, date2)); // '1/10/06, 10:00 – 11:00 AM'\nconsole.log(fmt1.formatRange(date1, date3)); // '1/10/06, 10:00 AM – 1/20/07, 10:00 AM'\n\nconst fmt2 = new Intl.DateTimeFormat(\"en\", {\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n});\nconsole.log(fmt2.format(date1)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date2)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date3)); // 'Jan 10 – 20, 1906'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.formatRange](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.formatRange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.prototype.formatRange() - JavaScript | MDN",
  "description": "The formatRange() method of Intl.DateTimeFormat instances formats a\n  date range in the most concise way based on the locales and\n  options provided when instantiating this\n  Intl.DateTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format",
  "markdown": "# Intl.DateTimeFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances formats a date according to the locale and formatting options of this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n### [Return value](#return_value)\n\nA string representing the given `date` formatted according to the locale and formatting options of this [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nUse the `format` getter function for formatting a single date, here for Serbia:\n\n```\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconst dateTimeFormat = new Intl.DateTimeFormat(\"sr-RS\", options);\nconsole.log(dateTimeFormat.format(new Date()));\n// \"недеља, 7. април 2013.\"\n```\n\n### [Using format with map](#using_format_with_map)\n\nUse the `format` getter function for formatting all dates in an array. Note that the function is bound to the [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) from which it was obtained, so it can be passed directly to [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n```\nconst a = [new Date(2012, 8), new Date(2012, 11), new Date(2012, 3)];\nconst options = { year: \"numeric\", month: \"long\" };\nconst dateTimeFormat = new Intl.DateTimeFormat(\"pt-BR\", options);\nconst formatted = a.map(dateTimeFormat.format);\nconsole.log(formatted.join(\"; \"));\n// \"setembro de 2012; dezembro de 2012; abril de 2012\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.format](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.prototype.format() - JavaScript | MDN",
  "description": "The format() method of Intl.DateTimeFormat instances formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/supportedLocalesOf",
  "markdown": "# Intl.Collator.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Collator.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.Collator.supportedLocalesOf(locales)\nIntl.Collator.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in collation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is not used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Collator.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.collator.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.collator.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Collator.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.Collator.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions",
  "markdown": "# Intl.DateTimeFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the options computed during the initialization of the given [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object. The object has the following properties, in the order they are listed:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. Only the `ca`, `hc`, and `nu` Unicode extension keys may be included in the output.\n\n[`calendar`](#calendar)\n\nOne of the [supported calendar types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types), reflecting the value provided for this property in the `options` argument or the `ca` Unicode extension key. The default is locale dependent.\n\n[`numberingSystem`](#numberingsystem)\n\nOne of the [supported numbering system types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types), reflecting the value provided for this property in the `options` argument or the `nu` Unicode extension key. The default is locale dependent.\n\n[`timeZone`](#timezone)\n\nOne of the [IANA time zone names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones), reflecting the value provided for this property in the `options` argument. The default is the runtime's default time zone; should never be `undefined`.\n\n**Note:** While the IANA database changes from time to time, the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes. All browsers canonicalize time zone names, but in different directions. For example, `new Intl.DateTimeFormat(\"en-US\", { timeZone: \"Europe/Kiev\" }).resolvedOptions().timeZone` and `new Intl.DateTimeFormat(\"en-US\", { timeZone: \"Europe/Kyiv\" }).resolvedOptions().timeZone` will return the same string in the same browser, but maybe different strings in different browsers. See [`Intl.Locale.prototype.getTimeZones`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones) for more information.\n\n[`hourCycle`](#hourcycle)\n\nThe value provided for this property in the `options` argument, or provided in the Unicode extension key `\"hc\"`, with default filled in as needed. Only present if the `options` argument included `hour` or `timeStyle`.\n\n[`hour12`](#hour12)\n\nThe value provided for this property in the `options` argument, or computed from the `hourCycle` property. Only present if the `options` argument included `hour` or `timeStyle`.\n\n[`weekday`](#weekday), `era`, `year`, `month`, `day`, `dayPeriod`, `hour`, `minute`, `second`, `fractionalSecondDigits`, `timeZoneName`\n\nThe values resulting from format matching between the corresponding properties in the `options` argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output. If the `dateStyle` or `timeStyle` shortcuts were used in `options`, these individual component properties will never be present.\n\n[`dateStyle`](#datestyle), `timeStyle`\n\nThe values provided for these properties in the `options` argument, if any.\n\n## [Description](#description)\n\nAlthough `dateStyle` and `timeStyle` are shortcuts for individual date and time component styles, the exact (locale dependent) component styles they resolve to are not included in the resolved options. This ensures the result of `resolvedOptions()` can be passed directly to the `Intl.DateTimeFormat()` constructor (because an `options` object with both `dateStyle` or `timeStyle` and individual date or time component styles is not valid).\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst germanFakeRegion = new Intl.DateTimeFormat(\"de-XX\", { timeZone: \"UTC\" });\nconst usedOptions = germanFakeRegion.resolvedOptions();\n\nusedOptions.locale; // \"de\" (because \"de-XX\" does not exist)\nusedOptions.calendar; // \"gregory\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.timeZone; // \"UTC\"\nusedOptions.month; // \"numeric\"\n```\n\n### [Getting the user's time zone and locale preferences](#getting_the_users_time_zone_and_locale_preferences)\n\nThe `Intl.DateTimeFormat` constructor without any options uses the current system settings. You can use `resolvedOptions()` to get the user's current time zone and locale's preferred calendar and numbering system:\n\n```\nconst systemOptions = new Intl.DateTimeFormat().resolvedOptions();\nsystemOptions.timeZone; // e.g., \"Europe/Brussels\" or \"Asia/Riyadh\"\nsystemOptions.calendar; // e.g., \"gregory\" or \"islamic-umalqura\"\nsystemOptions.numberingSystem; // e.g., \"latn\" or \"arab\"\nsystemOptions.locale; // e.g., \"nl-BE\" or \"ar-SA\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.datetimeformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.datetimeformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.DateTimeFormat instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this Intl.DateTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts",
  "markdown": "# Intl.DateTimeFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) instances allows locale-aware formatting of strings produced by this `Intl.DateTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`date`](#date) Optional\n\nThe date to format.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted date in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of date strings. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"day\", value: \"17\" },\n  { type: \"weekday\", value: \"Monday\" },\n];\n```\n\nPossible types are the following:\n\n[`day`](#day)\n\nThe string used for the day, for example `\"17\"`.\n\n[`dayPeriod`](#dayperiod)\n\nThe string used for the day period, for example, `\"AM\"`, `\"PM\"`, `\"in the morning\"`, or `\"noon\"`\n\n[`era`](#era)\n\nThe string used for the era, for example `\"BC\"` or `\"AD\"`.\n\n[`fractionalSecond`](#fractionalsecond)\n\nThe string used for the fractional seconds, for example `\"0\"` or `\"00\"` or `\"000\"`.\n\n[`hour`](#hour)\n\nThe string used for the hour, for example `\"3\"` or `\"03\"`.\n\n[`literal`](#literal)\n\nThe string used for separating date and time values, for example `\"/\"`, `\",\"`, `\"o'clock\"`, `\"de\"`, etc.\n\n[`minute`](#minute)\n\nThe string used for the minute, for example `\"00\"`.\n\n[`month`](#month)\n\nThe string used for the month, for example `\"12\"`.\n\nThe string used for the related 4-digit Gregorian year, in the event that the calendar's representation would be a yearName instead of a year, for example `\"2019\"`.\n\n[`second`](#second)\n\nThe string used for the second, for example `\"07\"` or `\"42\"`.\n\n[`timeZoneName`](#timezonename)\n\nThe string used for the name of the time zone, for example `\"UTC\"`. Default is the timezone of the current environment.\n\n[`weekday`](#weekday)\n\nThe string used for the weekday, for example `\"M\"`, `\"Monday\"`, or `\"Montag\"`.\n\n[`year`](#year)\n\nThe string used for the year, for example `\"2012\"` or `\"96\"`.\n\n[`yearName`](#yearname)\n\nThe string used for the yearName in relevant contexts, for example `\"geng-zi\"`\n\n## [Examples](#examples)\n\n`DateTimeFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\n\nconst formatter = new Intl.DateTimeFormat(\"en-us\", {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  fractionalSecondDigits: 3,\n  hour12: true,\n  timeZone: \"UTC\",\n});\n\nformatter.format(date);\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this string. The `formatToParts` method enables locale-aware formatting of strings produced by `DateTimeFormat` formatters by providing you the string in parts:\n\n```\nformatter.formatToParts(date);\n\n// return value:\n[\n  { type: \"weekday\", value: \"Monday\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"month\", value: \"12\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"day\", value: \"17\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"year\", value: \"2012\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"hour\", value: \"3\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"minute\", value: \"00\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"second\", value: \"42\" },\n  { type: \"fractionalSecond\", value: \"000\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"dayPeriod\", value: \"AM\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated again in a customized way. For example by using [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), a [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), and [`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).\n\n```\nconst dateString = formatter\n  .formatToParts(date)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"dayPeriod\":\n        return `<em>${value}</em>`;\n      default:\n        return value;\n    }\n  })\n  .join(\"\");\n```\n\nThis will emphasize the day period when using the `formatToParts()` method.\n\n```\nconsole.log(formatter.format(date));\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n\nconsole.log(dateString);\n// \"Monday, 12/17/2012, 3:00:42.000 <em>AM</em>\"\n```\n\n### [Named Years and Mixed calendars](#named_years_and_mixed_calendars)\n\nIn some cases, calendars use named years. Chinese and Tibetan calendars, for example, use a 60-year [sexagenary cycle](https://en.wikipedia.org/wiki/Sexagenary_cycle) of named years. These years are disambiguated by relationship to corresponding years on the Gregorian calendar. When this is the case, the result of `formatToParts()` will contain an entry for `relatedYear` when a year would normally be present, containing the 4-digit Gregorian year, instead of an entry for `year`. Setting an entry in the bag for `year` (with any value) will yield both the and the `yearName` Gregorian `relatedYear`:\n\n```\nconst opts = { year: \"numeric\", month: \"numeric\", day: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", opts);\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIf the `year` option is not set in the bag (to any value), the result will include only the `relatedYear`:\n\n```\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\");\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIn cases where the `year` would be output, `.format()` may commonly present these side-by-side:\n\n```\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", { year: \"numeric\" });\ndf.format(Date.UTC(2012, 11, 17, 3, 0, 42)); // 2012壬辰年\n```\n\nThis also makes it possible to mix locale and calendar in both `format`:\n\n```\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", { year: \"numeric\" });\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\ndf.format(date); // 2012(ren-chen)\n```\n\nAnd `formatToParts`:\n\n```\nconst opts = { month: \"numeric\", day: \"numeric\", year: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", opts);\nconst date = Date.UTC(2012, 11, 17, 3);\ndf.formatToParts(date);\n// [\n//   { type: 'month', value: '11' },\n//   { type: 'literal', value: '/' },\n//   { type: 'day', value: '4' },\n//   { type: 'literal', value: '/' },\n//   { type: 'relatedYear', value: '2012' }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DateTimeFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.DateTimeFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DateTimeFormat.prototype.formatToParts() - JavaScript | MDN",
  "description": "The formatToParts() method of Intl.DateTimeFormat instances allows locale-aware formatting of strings produced by this Intl.DateTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat",
  "markdown": "# Intl.DurationFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Intl.DurationFormat()`** constructor creates [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DurationFormat()\nnew Intl.DurationFormat(locales)\nnew Intl.DurationFormat(locales, options)\n```\n\n**Note:** `Intl.DurationFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`style`](#style)\n\nThe style of the formatted duration. Possible values are:\n\n[`\"long\"`](#long)\n\nE.g., 1 hour and 50 minutes\n\n[`\"short\"`](#short) (default)\n\nE.g., 1 hr, 50 min\n\n[`\"narrow\"`](#narrow)\n\nE.g., 1h 50m\n\n[`\"digital\"`](#digital)\n\nE.g., 1:50:00\n\n[`years`](#years)\n\nThe style of the formatted years. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`yearsDisplay`](#yearsdisplay)\n\nWhether to always display years, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `years` is unspecified, and `\"always\"` otherwise.\n\n[`months`](#months)\n\nThe style of the formatted months. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`monthsDisplay`](#monthsdisplay)\n\nWhether to always display months, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `months` is unspecified, and `\"always\"` otherwise.\n\n[`weeks`](#weeks)\n\nThe style of the formatted weeks. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`weeksDisplay`](#weeksdisplay)\n\nWhether to always display weeks, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `weeks` is unspecified, and `\"always\"` otherwise.\n\n[`days`](#days)\n\nThe style of the formatted days. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n\n[`daysDisplay`](#daysdisplay)\n\nWhether to always display days, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `days` is unspecified, and `\"always\"` otherwise.\n\n[`hours`](#hours)\n\nThe style of the formatted hours. Possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`hoursDisplay`](#hoursdisplay)\n\nWhether to always display hours, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `hours` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`minutes`](#minutes)\n\nThe style of the formatted minutes.\n\n*   If `hours` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`minutesDisplay`](#minutesdisplay)\n\nWhether to always display minutes, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `minutes` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`seconds`](#seconds)\n\nThe style of the formatted seconds.\n\n*   If `minutes` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`secondsDisplay`](#secondsdisplay)\n\nWhether to always display seconds, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `seconds` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n\n[`milliseconds`](#milliseconds)\n\nThe style of the formatted milliseconds.\n\n*   If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`millisecondsDisplay`](#millisecondsdisplay)\n\nWhether to always display milliseconds, or only if nonzero.\n\n*   If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `milliseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `milliseconds` is unspecified, and `\"always\"` otherwise.\n\n[`microseconds`](#microseconds)\n\nThe style of the formatted microseconds.\n\n*   If `milliseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`microsecondsDisplay`](#microsecondsdisplay)\n\nWhether to always display microseconds, or only if nonzero.\n\n*   If `milliseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `microseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `microseconds` is unspecified, and `\"always\"` otherwise.\n\n[`nanoseconds`](#nanoseconds)\n\nThe style of the formatted nanoseconds.\n\n*   If `microseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n*   Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n\n[`nanosecondsDisplay`](#nanosecondsdisplay)\n\nWhether to always display nanoseconds, or only if nonzero.\n\n*   If `microseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `nanoseconds` is unspecified.\n*   Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `nanoseconds` is unspecified, and `\"always\"` otherwise.\n\n[`fractionalDigits`](#fractionaldigits)\n\nNumber of how many fractional second digits to display in the output. Possible values are from `0` to `9`; the default is `undefined` (include as many fractional digits as necessary).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Description](#description)\n\nFor each time segment, an [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object is constructed under the hood. It uses the following options (see [`Intl.NumberFormat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details):\n\n*   `numberingSystem`: the value of `options.numberingSystem`\n\nWhen `milliseconds`, `microseconds`, or `nanoseconds` uses the `\"numeric\"` style, the following options are also used:\n\n*   `minimumFractionDigits`: `0` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n*   `maximumFractionDigits`: `9` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n*   `roundingMode`: `\"trunc\"`\n\nWhen the time segment uses the `\"2-digit\"` style, the following options are also used:\n\n*   `minimumIntegerDigits`: `2`\n\nWhen the time segment uses the `\"long\"`, `\"short\"`, or `\"narrow\"` style, the following options are also used:\n\n*   `style`: `\"unit\"` when `\"long\"`, `\"short\"`, or `\"narrow\"` is specified, `undefined` otherwise\n*   `unit`: the currently formatted unit (`\"years\"`, `\"days\"`, `\"nanoseconds\"`, etc.)\n*   `unitDisplay`: the value of the time segment style (`\"long\"`, `\"short\"`, or `\"narrow\"`)\n\n## [Examples](#examples)\n\n### [Using the Intl.DurationFormat() constructor](#using_the_intl.durationformat_constructor)\n\n```\nconst duration = {\n  hours: 2,\n  minutes: 20,\n  seconds: 35,\n};\n\nconsole.log(new Intl.DurationFormat(\"pt\", { style: \"long\" }).format(duration));\n// \"2 horas, 20 minutos e 35 segundos\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-intl-durationformat-constructor](https://tc39.es/proposal-intl-duration-format/#sec-intl-durationformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DurationFormat() constructor - JavaScript | MDN",
  "description": "The Intl.DurationFormat() constructor creates Intl.DurationFormat objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/supportedLocalesOf",
  "markdown": "# Intl.DurationFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`Intl.DurationFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.DurationFormat.supportedLocalesOf(locales)\nIntl.DurationFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in duration formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to duration formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DurationFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.supportedLocalesOf](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DurationFormat.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.DurationFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of",
  "markdown": "# Intl.DisplayNames.prototype.of() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`of()`** method of [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) instances receives a code and returns a string based on the locale and options provided when instantiating this `Intl.DisplayNames` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`code`](#code)\n\nThe `code` to provide depends on the `type`:\n\n*   If the type is \"region\", `code` should be either an [two-letter ISO 3166 region code](https://www.iso.org/iso-3166-country-codes.html), or a [three-digit UN M49 geographic region](https://unstats.un.org/unsd/methodology/m49/). It is required to follow the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar.\n*   If the type is \"script\", `code` should be an [four-letter ISO 15924 script code](https://unicode.org/iso15924/iso15924-codes.html). It is required to follow the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar.\n*   If the type is \"language\", `code` should be a _languageCode_ \\[\"-\" _scriptCode_\\] \\[\"-\" _regionCode_ \\] \\*(\"-\" _variant_ ) subsequence of the [`unicode_language_id`](https://unicode.org/reports/tr35/#Unicode_language_identifier) grammar. _languageCode_ is either a two-letter ISO 639-1 language code or a three-letter ISO 639-2 language code.\n*   If the type is \"currency\", `code` should be a [three-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). It is required to have exactly three alphabetic characters.\n*   If the type is \"dateTimeField\", `code` should be one of: `\"era\"`, `\"year\"`, `\"quarter\"`, `\"month\"`, `\"weekOfYear\"`, `\"weekday\"`, `\"day\"`, `\"dayPeriod\"`, `\"hour\"`, `\"minute\"`, `\"second\"`, `\"timeZoneName\"`.\n*   If the type is \"calendar\", `code` should be a [calendar key](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar). It is required to follow the `type` grammar of a [Unicode locale identifier](https://unicode.org/reports/tr35/#32-unicode-locale-identifier).\n\n### [Return value](#return_value)\n\nA language-specific formatted string, or `undefined` if there's no data for the input and `fallback` is `\"none\"`.\n\n**Note:** `fallback` is only used if `code` is structurally valid. See [using fallback](#using_fallback).\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `code` is not structurally valid for the given `type`.\n\n## [Examples](#examples)\n\n### [Using the of method](#using_the_of_method)\n\n```\nconst regionNames = new Intl.DisplayNames(\"en\", { type: \"region\" });\nregionNames.of(\"419\"); // \"Latin America\"\n\nconst languageNames = new Intl.DisplayNames(\"en\", { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"French\"\n\nconst currencyNames = new Intl.DisplayNames(\"en\", { type: \"currency\" });\ncurrencyNames.of(\"EUR\"); // \"Euro\"\n```\n\n### [Using fallback](#using_fallback)\n\nWhen the `Intl.DisplayNames` is constructed with `fallback: \"code\"`, the `of()` method will return the `code` if the input looks structurally valid but there's no data for the input. If `fallback` is `\"none\"`, `undefined` is returned.\n\n```\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZL\"),\n); // \"ZL\"\n\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"none\" }).of(\"ZL\"),\n); // undefined\n```\n\nHowever, this only applies if the `code` is structurally valid. For example, if `type` is `\"region\"` but `code` does not follow the `unicode_region_subtag` grammar (2 alphabetic characters or 3 numeric characters), a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is directly thrown instead of using the fallback.\n\n```\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZLC\"),\n); // throws RangeError: invalid value \"ZLC\" for option region\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.prototype.of](https://tc39.es/ecma402/#sec-Intl.DisplayNames.prototype.of) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DisplayNames.prototype.of() - JavaScript | MDN",
  "description": "The of() method of Intl.DisplayNames instances receives a code and returns a string based on the locale and options provided when instantiating this Intl.DisplayNames object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/resolvedOptions",
  "markdown": "# Intl.DurationFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`resolvedOptions()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe [BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646) for the locale used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"digital\"` identifying the duration formatting style used.\n\n[`years`](#years)\n\nOne of the strings `\"long\"`, `\"short\"`, or `\"narrow\"` identifying the formatting style used for the `years` field.\n\n[`yearsDisplay`](#yearsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `years` field.\n\n[`months`](#months)\n\nOne of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `months` field.\n\n[`monthsDisplay`](#monthsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `months` field.\n\n[`weeks`](#weeks)\n\nOne of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `weeks` field.\n\n[`weeksDisplay`](#weeksdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `weeks` field.\n\n[`days`](#days)\n\nOne of the strings `\"long\"`, `\"short\"`, and `\"narrow\"` identifying the formatting style used for the `days` field.\n\n[`daysDisplay`](#daysdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `days` field.\n\n[`hours`](#hours)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `hours` field.\n\n[`hoursDisplay`](#hoursdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `hours` field.\n\n[`minutes`](#minutes)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `minutes` field.\n\n[`minutesDisplay`](#minutesdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `minutes` field.\n\n[`seconds`](#seconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `seconds` field.\n\n[`secondsDisplay`](#secondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `seconds` field.\n\n[`milliseconds`](#milliseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `milliseconds` field.\n\n[`millisecondsDisplay`](#millisecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `millisecondsDisplay` field.\n\n[`microseconds`](#microseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `microseconds` field.\n\n[`microsecondsDisplay`](#microsecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `microsecondsDisplay` field.\n\n[`nanoseconds`](#nanoseconds)\n\nOne of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `nanoseconds` field.\n\n[`nanosecondsDisplay`](#nanosecondsdisplay)\n\nOne of the strings `\"auto\"` or `\"always\"` identifying when to display the `nanosecondsDisplay` field.\n\n[`fractionalDigits`](#fractionaldigits)\n\nA number, identifying the number of fractional digits used with numeric styles.\n\n[`numberingSystem`](#numberingsystem)\n\nThe value provided for this property in the options argument, if present, or the value requested using the Unicode extension key `nu` or filled in as a default.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions method](#using_the_resolvedoptions_method)\n\n```\nconst duration = new Intl.DurationFormat(\"en\");\nconst usedOptions = duration.resolvedOptions();\n\nusedOptions.locale; // \"en\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.years; // \"long\"\nusedOptions.yearsDisplay; // \"auto\"\nusedOptions.style; // \"long\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.resolvedOptions](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.resolvedOptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DurationFormat.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.DurationFormat instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this Intl.DurationFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/formatToParts",
  "markdown": "# Intl.DurationFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`formatToParts()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances allows locale-aware formatting of strings produced by [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) formatters.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`duration`](#duration) Optional\n\nThe duration object to be formatted. It should include some or all of the following properties: `\"months\"`, `\"weeks\"`, `\"days\"`, `\"hours\"`, `\"minutes\"`, `\"seconds\"`, `\"milliseconds\"`, `\"microseconds\"`, `\"nanoseconds\"`.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted duration in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of duration objects. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hr\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"min\", unit: \"minute\" },\n];\n```\n\n## [Examples](#examples)\n\nThe `formatToParts` method enables locale-aware formatting of strings produced by `DurationFormat` formatters by providing you the string in parts:\n\n```\nconst duration = {\n  hours: 7,\n  minutes: 8,\n  seconds: 9,\n  milliseconds: 123,\n  microseconds: 456,\n  nanoseconds: 789,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).formatToParts(duration);\n\n// Returned value:\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hours\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"minutes\", unit: \"minute\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"9\", unit: \"second\" },\n  { type: \"literal\", value: \" \", unit: \"second\" },\n  { type: \"unit\", value: \"seconds\", unit: \"second\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"123\", unit: \"millisecond\" },\n  { type: \"literal\", value: \" \", unit: \"millisecond\" },\n  { type: \"unit\", value: \"milliseconds\", unit: \"millisecond\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"456\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" \", unit: \"microsecond\" },\n  { type: \"unit\", value: \"microseconds\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" and \" },\n  { type: \"integer\", value: \"789\", unit: \"nanosecond\" },\n  { type: \"literal\", value: \" \", unit: \"nanosecond\" },\n  { type: \"unit\", value: \"nanoseconds\", unit: \"nanosecond\" },\n];\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.formatToParts](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DurationFormat.prototype.formatToParts() - JavaScript | MDN",
  "description": "The formatToParts() method of Intl.DurationFormat instances allows locale-aware formatting of strings produced by Intl.DurationFormat formatters.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf",
  "markdown": "# Intl.DisplayNames.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DisplayNames.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.DisplayNames.supportedLocalesOf(locales)\nIntl.DisplayNames.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in display names, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to display names nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DisplayNames.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.DisplayNames.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DisplayNames.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.DisplayNames.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format",
  "markdown": "# Intl.DurationFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Experimental:** **This is an [experimental technology](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental)**  \nCheck the [Browser compatibility table](#browser_compatibility) carefully before using this in production.\n\nThe **`format()`** method of [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) instances formats a duration according to the locale and formatting options of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`duration`](#duration)\n\nThe duration object to be formatted. It should include some or all of the following properties: `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, `milliseconds`, `microseconds`, `nanoseconds`.\n\n### [Return value](#return_value)\n\nA string representing the given `duration` formatted according to the locale and formatting options of this [`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Using format()](#using_format)\n\nThe following example shows how to create a Duration formatter using the English language.\n\n```\nconst duration = {\n  years: 1,\n  months: 2,\n  weeks: 3,\n  days: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7,\n  microseconds: 8,\n  nanoseconds: 9,\n};\n\n// Without options, style defaults to \"short\"\nnew Intl.DurationFormat(\"en\").format(duration);\n// \"1 yr, 2 mths, 3 wks, 3 days, 4 hr, 5 min, 6 sec, 7 ms, 8 μs, 9 ns\"\n\n// With style set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).format(duration);\n// \"1 year, 2 months, 3 weeks, 3 days, 4 hours, 5 minutes, 6 seconds, 7 milliseconds, 8 microseconds, 9 nanoseconds\"\n\n// With style set to \"narrow\"\nnew Intl.DurationFormat(\"en\", { style: \"narrow\" }).format(duration);\n// \"1y 2mo 3w 3d 4h 5m 6s 7ms 8μs 9ns\"\n```\n\n### [Using format() with different locales and styles](#using_format_with_different_locales_and_styles)\n\n```\nconst duration = {\n  hours: 1,\n  minutes: 46,\n  seconds: 40,\n};\n\n// With style set to \"long\" and locale \"fr-FR\"\nnew Intl.DurationFormat(\"fr-FR\", { style: \"long\" }).format(duration);\n// \"1 heure, 46 minutes et 40 secondes\"\n\n// With style set to \"short\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"short\" }).format(duration);\n// \"1 hr, 46 min and 40 sec\"\n\n// With style set to \"short\" and locale set to \"pt\"\nnew Intl.DurationFormat(\"pt\", { style: \"narrow\" }).format(duration);\n// \"1h 46min 40s\"\n\n// With style set to \"digital\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"1:46:40\"\n\n// With style set to \"digital\", locale set to \"en\", and hours set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\", hours: \"long\" }).format(\n  duration,\n);\n// \"1 hour, 46:40\"\n```\n\n### [Using format() with the fractionalDigits option](#using_format_with_the_fractionaldigits_option)\n\n```\nconst duration = {\n  hours: 11,\n  minutes: 30,\n  seconds: 12,\n  milliseconds: 345,\n  microseconds: 600,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"11:30:12.3456\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 5 }).format(\n  duration,\n);\n// \"11:30:12.34560\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 3 }).format(\n  duration,\n);\n// \"11:30:12.346\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl.DurationFormat  <br>\\# sec-Intl.DurationFormat.prototype.format](https://tc39.es/proposal-intl-duration-format/#sec-Intl.DurationFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DurationFormat.prototype.format() - JavaScript | MDN",
  "description": "The format() method of Intl.DurationFormat instances formats a duration according to the locale and formatting options of this Intl.DurationFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames",
  "markdown": "# Intl.DisplayNames() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.DisplayNames()`** constructor creates [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.DisplayNames(locales, options)\n```\n\n**Note:** `Intl.DisplayNames()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options)\n\nAn object containing the following properties, in the order they are retrieved:\n\n[`localeMatcher`](#localematcher) Optional\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`style`](#style) Optional\n\nThe formatting style to use. Possible values are `\"narrow\"`, `\"short\"`, and `\"long\"`; the default is `\"long\"`.\n\n[`type`](#type)\n\nThe type of display names to return from [`of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of). Possible values are `\"language\"`, `\"region\"`, `\"script\"`, `\"currency\"`, `\"calendar\"`, and `\"dateTimeField\"`.\n\n[`fallback`](#fallback) Optional\n\nWhat to return from `of()` if the input is structurally valid but there's no matching display name. Possible values are:\n\n[`\"code\"`](#code) (default)\n\nReturn the input code itself.\n\n[`\"none\"`](#none)\n\nReturn `undefined`.\n\n[`languageDisplay`](#languagedisplay) Optional\n\nHow language names should be displayed. Only usable along with `type: \"language\"`. Possible values are:\n\n[`\"dialect\"`](#dialect) (default)\n\nDisplay special regional dialects using their own name. E.g. `\"nl-BE\"` will be displayed as `\"Flemish\"`.\n\n[`\"standard\"`](#standard)\n\nDisplay all languages using standard format. E.g. `\"nl-BE\"` will be displayed as `\"Dutch (Belgium)\"`.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `options.type` is not provided.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```\nconsole.log(new Intl.DisplayNames([], { type: \"language\" }).of(\"US\"));\n// 'us'\n```\n\n### [Using type `dateTimeField`](#using_type_datetimefield)\n\nExample using `dateTimeField` as a type option, will return the localized date time names strings.\n\n```\nconst dn = new Intl.DisplayNames(\"pt\", { type: \"dateTimeField\" });\nconsole.log(dn.of(\"era\")); // 'era'\nconsole.log(dn.of(\"year\")); // 'ano'\nconsole.log(dn.of(\"month\")); // 'mês'\nconsole.log(dn.of(\"quarter\")); // 'trimestre'\nconsole.log(dn.of(\"weekOfYear\")); // 'semana'\nconsole.log(dn.of(\"weekday\")); // 'dia da semana'\nconsole.log(dn.of(\"dayPeriod\")); // 'AM/PM'\nconsole.log(dn.of(\"day\")); // 'dia'\nconsole.log(dn.of(\"hour\")); // 'hora'\nconsole.log(dn.of(\"minute\")); // 'minuto'\nconsole.log(dn.of(\"second\")); // 'segundo'\n```\n\n### [Using type `calendar`](#using_type_calendar)\n\nExample using `calendar` as a type option, will return the localized calendar names strings.\n\n```\nconst dn = new Intl.DisplayNames(\"en\", { type: \"calendar\" });\nconsole.log(dn.of(\"roc\")); // 'Minguo Calendar'\nconsole.log(dn.of(\"gregory\")); // 'Gregorian Calendar'\nconsole.log(dn.of(\"chinese\")); // 'Chinese Calendar'\n```\n\n### [Using type `language` with `languageDisplay`](#using_type_language_with_languagedisplay)\n\nExample using `language` as a type with `languageDisplay` options.\n\n```\n// Using `dialect` option\nconst dnDialect = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"dialect\",\n});\nconsole.log(dnDialect.of(\"en-GB\")); // 'British English'\n\n// Using `standard` option\nconst dnStd = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"standard\",\n});\nconsole.log(dnStd.of(\"en-GB\")); // 'English (United Kingdom)'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-displaynames-constructor](https://tc39.es/ecma402/#sec-intl-displaynames-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DisplayNames() constructor - JavaScript | MDN",
  "description": "The Intl.DisplayNames() constructor creates Intl.DisplayNames objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions",
  "markdown": "# Intl.DisplayNames.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) instances returns a new object with properties reflecting the locale and style formatting options computed during the construction of this `Intl.DisplayNames` object.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object with properties reflecting the locale and formatting options computed during the construction of the given [`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) object.\n\n## [Description](#description)\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"long\"`). Its value is either `\"long\"`, `\"short\"`, or `\"narrow\"`.\n\n[`type`](#type)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"language\"`). Its value is either `\"language\"`, `\"region\"`, `\"script\"`, or `\"currency\"`.\n\n[`fallback`](#fallback)\n\nThe value provided for this property in the options argument of the constructor or the default value (`\"code\"`). Its value is either `\"code\"` or `\"none\"`.\n\n## [Examples](#examples)\n\n### [Using resolvedOptions](#using_resolvedoptions)\n\n```\nconst displayNames = new Intl.DisplayNames([\"de-DE\"], { type: \"region\" });\n\nconst usedOptions = displayNames.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"long\"\nconsole.log(usedOptions.type); // \"region\"\nconsole.log(usedOptions.fallback); // \"code\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.DisplayNames.prototype.resolvedOptions](https://tc39.es/ecma402/#sec-Intl.DisplayNames.prototype.resolvedOptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.DisplayNames.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.DisplayNames instances\n  returns a new object with properties reflecting the locale and style formatting\n  options computed during the construction of this Intl.DisplayNames\n  object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat",
  "markdown": "# Intl.RelativeTimeFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.RelativeTimeFormat()`** constructor creates [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.RelativeTimeFormat()\nnew Intl.RelativeTimeFormat(locales)\nnew Intl.RelativeTimeFormat(locales, options)\n```\n\n**Note:** `Intl.RelativeTimeFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n[`style`](#style)\n\nThe style of the formatted relative time. Possible values are:\n\n[`\"long\"`](#long) (default)\n\nE.g., \"in 1 month\"\n\n[`\"short\"`](#short)\n\nE.g., \"in 1 mo.\"\n\n[`\"narrow\"`](#narrow)\n\nE.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales.\n\n[`numeric`](#numeric)\n\nWhether to use numeric values in the output. Possible values are `\"always\"` and `\"auto\"`; the default is `\"always\"`. When set to `\"auto\"`, the output may use more idiomatic phrasing such as `\"yesterday\"` instead of `\"1 day ago\"`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic format usage](#basic_format_usage)\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### [Using the auto option](#using_the_auto_option)\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday` or `tomorrow` instead of `1 day ago` or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-relativetimeformat-constructor](https://tc39.es/ecma402/#sec-intl-relativetimeformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.RelativeTimeFormat() constructor - JavaScript | MDN",
  "description": "The Intl.RelativeTimeFormat() constructor creates Intl.RelativeTimeFormat objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale",
  "markdown": "# Intl.Locale() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Locale()`** constructor creates [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.Locale(tag)\nnew Intl.Locale(tag, options)\n```\n\n**Note:** `Intl.Locale()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`tag`](#tag)\n\nThe Unicode locale identifier string. For the syntax of locale identifier strings, see the [Intl main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument). Note that the `Intl.Locale` constructor, unlike most other `Intl` constructors, does not accept an array of locales or `undefined`.\n\n[`options`](#options)\n\nAn object that contains configuration for the Locale. Option values here take priority over extension keys in the locale identifier. Possible properties are:\n\n[`language`](#language)\n\nThe language. Any syntactically valid string following the [`unicode_language_subtag`](https://unicode.org/reports/tr35/#unicode_language_subtag) grammar (2–3 or 5–8 letters) is accepted, but the implementation only recognizes certain kinds.\n\n[`script`](#script)\n\nThe script. Any syntactically valid string following the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar (4 letters) is accepted, but the implementation only recognizes certain kinds.\n\n[`region`](#region)\n\nThe region. Any syntactically valid string following the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar (either 2 letters or 3 digits) is accepted, but the implementation only recognizes certain kinds.\n\n[`calendar`](#calendar)\n\nThe calendar. Any syntactically valid string following the [`type`](https://unicode.org/reports/tr35/#Unicode_locale_identifier) grammar (one or more segments of 3–8 alphanumerals, joined by hyphens) is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCalendars`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n\n[`collation`](#collation)\n\nThe collation. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCollations`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getNumberingSystems`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types).\n\n[`caseFirst`](#casefirst)\n\nThe case-first sort option. Possible values are `\"upper\"`, `\"lower\"`, or `\"false\"`.\n\n[`hourCycle`](#hourcycle)\n\nThe hour cycle. Possible values are `\"h23\"`, `\"h12\"`, `\"h11\"`, or the practically unused `\"h24\"`, which are explained in [`Intl.Locale.prototype.getHourCycles`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types)\n\n[`numeric`](#numeric)\n\nThe numeric sort option. A boolean.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nAt its very simplest, the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor takes a locale identifier string as its argument:\n\n```\nconst us = new Intl.Locale(\"en-US\");\n```\n\n### [Using the Locale constructor with an options object](#using_the_locale_constructor_with_an_options_object)\n\nThe constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle) property of the configuration object to your desired hour cycle type, and then pass it into the constructor:\n\n```\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-locale-constructor](https://tc39.es/ecma402/#sec-intl-locale-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale() constructor - JavaScript | MDN",
  "description": "The Intl.Locale() constructor creates Intl.Locale objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/resolvedOptions",
  "markdown": "# Intl.PluralRules.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this `Intl.PluralRules` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and plural formatting options computed during the initialization of the given [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object.\n\nThe object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`pluralCategories`](#pluralcategories)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of plural categories used by the given locale, selected from the list `\"zero\"`, `\"one\"`, `\"two\"`, `\"few\"`, `\"many\"` and `\"other\"`.\n\n[`type`](#type)\n\nThe type used (`cardinal` or `ordinal`).\n\n[`roundingIncrement`](#roundingincrement) Experimental\n\nThe rounding-increment precision (the increment used when rounding numbers). This is the value specified in the `options.roundingIncrement` argument in the constructor.\n\n[`roundingMode`](#roundingmode) Experimental\n\nThe rounding mode. This is the value provided for the `options.roundingMode` argument in the constructor, or the default value: `halfExpand`.\n\n[`roundingPriority`](#roundingpriority) Experimental\n\nThe priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified. This is the value provided for the `options.roundingPriority` argument in the constructor, or the default value: `auto`.\n\n[`trailingZeroDisplay`](#trailingzerodisplay) Experimental\n\nThe strategy for displaying trailing zeros on whole numbers. This is the value specified in the `options.trailingZeroDisplay` argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n[`minimumIntegerDigits`](#minimumintegerdigits), `minimumFractionDigits`, `maximumFractionDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits), `maximumSignificantDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if at least one of them was provided in the `options` argument.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions() method](#using_the_resolvedoptions_method)\n\nThe code below shows the construction of a `PluralRules` object, followed by logging of each of the resolved options.\n\n```\n// Create a PluralRules instance\nconst de = new Intl.PluralRules(\"de-DE\", {\n  maximumSignificantDigits: 2,\n  trailingZeroDisplay: \"auto\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.pluralCategories); // Array [\"one\", \"other\"]\nconsole.log(usedOptions.type); // \"cardinal\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.maximumFractionDigits); //undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.minimumSignificantDigits); // 1\nconsole.log(usedOptions.maximumSignificantDigits); //2\nconsole.log(usedOptions.roundingIncrement); // 1\nconsole.log(usedOptions.roundingMode); // \"halfExpand\"\nconsole.log(usedOptions.roundingPriority); // \"auto\"\nconsole.log(usedOptions.trailingZeroDisplay); // \"auto\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.PluralRules.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.PluralRules instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this Intl.PluralRules object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions",
  "markdown": "# Intl.RelativeTimeFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this `Intl.RelativeTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and number formatting options computed during the initialization of the given [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe length of the internationalized message. Possible values are:\n\n*   `\"long\"` (default, e.g., `in 1 month`)\n*   `\"short\"` (e.g., `in 1 mo.`),\n*   or `\"narrow\"` (e.g., `in 1 mo.`). The narrow style could be similar to the short style for some locales.\n\n[`numeric`](#numeric)\n\nThe format of output message. Possible values are:\n\n*   `\"always\"` (default, e.g., `1 day ago`),\n*   or `\"auto\"` (e.g., `yesterday`). The `\"auto\"` value allows to not always have to use numeric values in the output.\n\n[`numberingSystem`](#numberingsystem)\n\nThe value requested using the Unicode extension key `\"nu\"` or filled in as a default.\n\n## [Examples](#examples)\n\n### [Using the resolvedOptions() method](#using_the_resolvedoptions_method)\n\n```\nconst de = new Intl.RelativeTimeFormat(\"de-DE\");\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de-DE\"\nusedOptions.style; // \"long\"\nusedOptions.numeric; // \"always\"\nusedOptions.numberingSystem; // \"latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.relativetimeformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.relativetimeformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.RelativeTimeFormat.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.RelativeTimeFormat instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this Intl.RelativeTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select",
  "markdown": "# Intl.PluralRules.prototype.select() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`select()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances returns a string indicating which plural rule to use for locale-aware formatting of a number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`number`](#number)\n\nThe number to get a plural rule for.\n\n### [Return value](#return_value)\n\nA string representing the pluralization category of the `number`. This can be one of `zero`, `one`, `two`, `few`, `many`, or `other`.\n\n## [Description](#description)\n\nThis function selects a pluralization category according to the locale and formatting options of an [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object. These options are set in the [`Intl.PluralRules()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules) constructor.\n\n## [Examples](#examples)\n\n### [Using select()](#using_select)\n\nFirst, create an `Intl.PluralRules` object, passing the appropriate `locales` and `options` parameters. Here we create a plural rules object for Arabic in the Egyptian dialect. Because the `type` is not specified the rules object will provide formatting for cardinal numbers (the default).\n\n```\nconst pr = new Intl.PluralRules(\"ar-EG\");\n```\n\nThen call `select()` on the rules object, specifying the number for which the plural form is required. Note that Arabic has 5 forms for cardinal numbers, as shown.\n\n```\npr.select(0); // 'zero'\npr.select(1); // 'one'\npr.select(2); // 'two'\npr.select(6); // 'few'\npr.select(18); // 'many'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.select](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.select) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.PluralRules.prototype.select() - JavaScript | MDN",
  "description": "The select() method of Intl.PluralRules instances returns a string indicating which plural rule to use for locale-aware formatting of a number.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules",
  "markdown": "# Intl.PluralRules() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.PluralRules()`** constructor creates [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) objects.\n\n## [Syntax](#syntax)\n\n```\nnew Intl.PluralRules()\nnew Intl.PluralRules(locales)\nnew Intl.PluralRules(locales, options)\n```\n\n**Note:** `Intl.PluralRules()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`type`](#type)\n\nThe type to use. Possible values are:\n\n[`\"cardinal\"`](#cardinal) (default)\n\nFor cardinal numbers (referring to the quantity of things).\n\n[`\"ordinal\"`](#ordinal)\n\nFor ordinal number (referring to the ordering or ranking of things, e.g. \"1st\", \"2nd\", \"3rd\" in English).\n\n`Intl.PluralRules` also supports the `Intl.NumberFormat()` [digit options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options) (see `Intl.NumberFormat()` for details):\n\n*   `minimumIntegerDigits`\n*   `minimumFractionDigits`\n*   `maximumFractionDigits`\n*   `minimumSignificantDigits`\n*   `maximumSignificantDigits`\n*   `roundingPriority`\n*   `roundingIncrement`\n*   `roundingMode`\n\nThese options are interpreted as if the `notation` option from `Intl.NumberFormat` is `\"standard\"` and `style` is `\"decimal\"`.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned. This is useful to distinguish between singular and plural forms, e.g. \"dog\" and \"dogs\".\n\n```\nconst pr = new Intl.PluralRules();\n\npr.select(0); // 'other' if in US English locale\n\npr.select(1); // 'one' if in US English locale\n\npr.select(2); // 'other' if in US English locale\n```\n\n### [Using options](#using_options)\n\nThe results can be customized using the `options` argument, which has one property called `type` which you can set to `ordinal`. This is useful to figure out the ordinal indicator, e.g. \"1st\", \"2nd\", \"3rd\", \"4th\", \"42nd\", and so forth.\n\n```\nconst pr = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst suffixes = new Map([\n  [\"one\", \"st\"],\n  [\"two\", \"nd\"],\n  [\"few\", \"rd\"],\n  [\"other\", \"th\"],\n]);\nconst formatOrdinals = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0); // '0th'\nformatOrdinals(1); // '1st'\nformatOrdinals(2); // '2nd'\nformatOrdinals(3); // '3rd'\nformatOrdinals(4); // '4th'\nformatOrdinals(11); // '11th'\nformatOrdinals(21); // '21st'\nformatOrdinals(42); // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-pluralrules-constructor](https://tc39.es/ecma402/#sec-intl-pluralrules-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.PluralRules() constructor - JavaScript | MDN",
  "description": "The Intl.PluralRules() constructor creates Intl.PluralRules objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf",
  "markdown": "# Intl.PluralRules.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.PluralRules.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.PluralRules.supportedLocalesOf(locales)\nIntl.PluralRules.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in plural rules without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in plural rules, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to plural rules nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.PluralRules.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.pluralrules.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.PluralRules.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.PluralRules.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange",
  "markdown": "# Intl.PluralRules.prototype.selectRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`selectRange()`** method of [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.\n\n## [Syntax](#syntax)\n\n```\nselectRange(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA number representing the start of the range.\n\n[`endRange`](#endrange)\n\nA number representing the end of the range.\n\n### [Return value](#return_value)\n\nA string representing the pluralization category of the specified range. This can be one of `zero`, `one`, `two`, `few`, `many` or `other`, that are relevant for the locale whose localization is specified in [LDML Language Plural Rules](https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html).\n\n## [Description](#description)\n\nThis function selects a pluralization category according to the locale and formatting options of an [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) object.\n\nConceptually the behavior is the same as getting plural rules for a single cardinal or ordinal number. Languages have one or more forms for describing ranges, and this method returns the appropriate form given the supplied locale and formatting options. In English there is only one plural form, such as \"1–10 apples\", and the method will return `other`. Other languages can have many forms.\n\n## [Examples](#examples)\n\n### [Using selectRange()](#using_selectrange)\n\n```\nnew Intl.PluralRules(\"sl\").selectRange(102, 201); // 'few'\n\nnew Intl.PluralRules(\"pt\").selectRange(102, 102); // 'other'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.pluralrules.prototype.selectrange](https://tc39.es/ecma402/#sec-intl.pluralrules.prototype.selectrange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.PluralRules.prototype.selectRange() - JavaScript | MDN",
  "description": "The selectRange() method of Intl.PluralRules instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format",
  "markdown": "# Intl.RelativeTimeFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances formats a `value` and `unit` according to the locale and formatting options of this `Intl.RelativeTimeFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nNumeric value to use in the internationalized relative time message.\n\n[`unit`](#unit)\n\nUnit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### [Return value](#return_value)\n\nA string representing the given `value` and `unit` formatted according to the locale and formatting options of this [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Examples](#examples)\n\n### [Basic format usage](#basic_format_usage)\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### [Using the auto option](#using_the_auto_option)\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday`, `today`, or `tomorrow` instead of `1 day ago`, `in 0 days`, or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\nrtf.format(0, \"day\"); // \"today\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.prototype.format](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.RelativeTimeFormat.prototype.format() - JavaScript | MDN",
  "description": "The format() method of Intl.RelativeTimeFormat instances formats a value and unit according to the locale and formatting options of this Intl.RelativeTimeFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts",
  "markdown": "# Intl.RelativeTimeFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatToParts(value, unit)\n```\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nNumeric value to use in the internationalized relative time message.\n\n[`unit`](#unit)\n\nUnit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted relative time in parts.\n\n## [Description](#description)\n\nThe `Intl.RelativeTimeFormat.prototype.formatToParts` method is a version of the format method which it returns an array of objects which represent \"parts\" of the object, separating the formatted number into its constituent parts and separating it from other surrounding text. These objects have two properties: type a `NumberFormat` formatToParts type, and value, which is the String which is the component of the output. If a \"part\" came from `NumberFormat`, it will have a unit property which indicates the unit being formatted; literals which are part of the larger frame will not have this property.\n\n## [Examples](#examples)\n\n### [Using formatToParts](#using_formattoparts)\n\n```\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit\nrtf.formatToParts(-1, \"day\");\n// [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// [\n//   { type: \"literal\", value: \"in \" },\n//   { type: \"integer\", value: \"100\", unit: \"day\" },\n//   { type: \"literal\", value: \" days\" }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.RelativeTimeFormat.prototype.formatToParts() - JavaScript | MDN",
  "description": "The formatToParts() method of Intl.RelativeTimeFormat instances returns an Array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf",
  "markdown": "# Intl.RelativeTimeFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.RelativeTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.RelativeTimeFormat.supportedLocalesOf(locales)\nIntl.RelativeTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in relative time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to relative time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.RelativeTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.RelativeTimeFormat.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.RelativeTimeFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.RelativeTimeFormat.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.RelativeTimeFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations",
  "markdown": "# Intl.Locale.prototype.getCollations() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getCollations()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more [collation types](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_collation) for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `collations`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.collations === locale.collations` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all collation types commonly used for the `Locale`, sorted in alphabetical order, with the `standard` and `search` values always excluded. If the `Locale` already has a [`collation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation), then the returned array contains that single value.\n\nBelow is a list of the supported collation types, adapted from the [Unicode collation specification](https://github.com/unicode-org/cldr/blob/2dd06669d833823e26872f249aa304bc9d9d2a90/common/bcp47/collation.xml).\n\n### [Supported collation types](#supported_collation_types)\n\n[`big5han`](#big5han)\n\nPinyin ordering for Latin, big5 charset ordering for CJK characters (for Chinese)\n\n**Warning:** The `big5han` collation type is deprecated, not available in Firefox, Chrome or Edge.\n\n[`compat`](#compat)\n\nA previous version of the ordering, for compatibility (for Arabic)\n\n[`dict`](#dict)\n\nDictionary style ordering (for Sinhala)\n\n[`direct`](#direct)\n\nBinary code point order\n\n**Warning:** The `direct` collation type has been deprecated. Do not use.\n\n[`ducet`](#ducet)\n\nThe default Unicode collation element table order\n\n**Warning:** The `ducet` collation type is not available to the Web. Use the `und` locale without a collation type specifier instead. `und` is the collation that is the closest to `ducet`.\n\n[`emoji`](#emoji)\n\nRecommended ordering for emoji characters (for the `und` locale)\n\n[`eor`](#eor)\n\nEuropean ordering rules (for the `und` locale)\n\n[`gb2312`](#gb2312)\n\nPinyin ordering for Latin, gb2312han charset ordering for CJK characters (for Chinese)\n\n**Warning:** The `gb2312` collation type is deprecated, not available in Firefox, Chrome or Edge.\n\n[`phonebk`](#phonebk)\n\nPhonebook style ordering (for German)\n\n[`phonetic`](#phonetic)\n\nPhonetic ordering (sorting based on pronunciation; for Lingala)\n\n[`pinyin`](#pinyin)\n\nPinyin ordering for Latin and for CJK characters (for Chinese)\n\n[`reformed`](#reformed)\n\nReformed ordering (formerly for Swedish)\n\n[`search`](#search)\n\nSpecial collation type for string search\n\n**Warning:** Do not use as a collation type, since in [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), this collation is activated via the `\"search\"` value for the `usage` option. There is currently no API for substring search, so this is currently only good for filtering a list of strings by trying a full-string match of the key against each list item.\n\n[`searchjl`](#searchjl)\n\nSpecial collation type for Korean initial consonant search\n\n**Warning:** This collation is not for sorting, even though it is made available through [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instantiated with usage `\"sort\"` as opposed to usage `\"search\"`.\n\n[`standard`](#standard)\n\nDefault ordering for each language, except Chinese (and, previously, Swedish)\n\n**Warning:** Do not use explicitly. In general, it's unnecessary to specify this explicitly and specifying this for Swedish is problematic due to the different meaning for Swedish in the past.\n\n[`stroke`](#stroke)\n\nPinyin ordering for Latin, stroke order for CJK characters (for Chinese)\n\n[`trad`](#trad)\n\nTraditional style ordering (such as in Spanish)\n\n[`unihan`](#unihan)\n\nRadical-stroke ordering for Han characters (for Chinese, Japanese, and Korean). Pinyin ordering for Latin in the case of Chinese.\n\n**Note:** The `unihan` collation type is not available in Chrome or Edge.\n\n[`zhuyin`](#zhuyin)\n\nPinyin ordering for Latin, zhuyin order for Bopomofo and CJK characters (for Chinese)\n\n## [Examples](#examples)\n\n### [Obtaining supported collation types](#obtaining_supported_collation_types)\n\nIf the `Locale` object doesn't have a `collation` already, `getCollations()` lists all commonly-used collation types for the given `Locale`. For examples of explicitly setting a `collation`, see [`collation` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation#examples).\n\n```\nconst locale = new Intl.Locale(\"zh\");\nconsole.log(locale.getCollations()); // [\"pinyin\", \"stroke\", \"zhuyin\", \"emoji\", \"eor\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getCollations](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getCollations) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getCollations() - JavaScript | MDN",
  "description": "The getCollations() method of Intl.Locale instances returns a list of one or more collation types for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars",
  "markdown": "# Intl.Locale.prototype.getCalendars() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getCalendars()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique calendar identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `calendars`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.calendars === locale.calendars` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all calendars commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), then the returned array contains that single value.\n\nBelow is a list of the supported calendar era types.\n\n### [Supported calendar types](#supported_calendar_types)\n\n[`buddhist`](#buddhist)\n\nThai Buddhist calendar\n\n[`chinese`](#chinese)\n\nTraditional Chinese calendar\n\n[`coptic`](#coptic)\n\nCoptic calendar\n\n[`dangi`](#dangi)\n\nTraditional Korean calendar\n\n[`ethioaa`](#ethioaa)\n\nEthiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\n\n[`ethiopic`](#ethiopic)\n\nEthiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\n\n[`gregory`](#gregory)\n\nGregorian calendar\n\n[`hebrew`](#hebrew)\n\nTraditional Hebrew calendar\n\n[`indian`](#indian)\n\nIndian calendar\n\n[`islamic`](#islamic)\n\nIslamic calendar\n\n[`islamic-umalqura`](#islamic-umalqura)\n\nIslamic calendar, Umm al-Qura\n\n[`islamic-tbla`](#islamic-tbla)\n\nIslamic calendar, tabular (intercalary years \\[2,5,7,10,13,16,18,21,24,26,29\\] - astronomical epoch)\n\n[`islamic-civil`](#islamic-civil)\n\nIslamic calendar, tabular (intercalary years \\[2,5,7,10,13,16,18,21,24,26,29\\] - civil epoch)\n\n[`islamic-rgsa`](#islamic-rgsa)\n\nIslamic calendar, Saudi Arabia sighting\n\n[`iso8601`](#iso8601)\n\nISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)\n\n[`japanese`](#japanese)\n\nJapanese Imperial calendar\n\n[`persian`](#persian)\n\nPersian calendar\n\n[`roc`](#roc)\n\nCivil (algorithmic) Arabic calendar\n\n[`islamicc`](#islamicc)\n\nCivil (algorithmic) Arabic calendar\n\n**Warning:** The `islamicc` calendar key has been deprecated. Please use `islamic-civil`.\n\n## [Examples](#examples)\n\n### [Obtaining supported calendars](#obtaining_supported_calendars)\n\nIf the `Locale` object doesn't have a `calendar` already, `getCalendars()` lists all commonly-used calendars for the given `Locale`. For examples of explicitly setting a `calendar`, see [`calendar` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getCalendars()); // [\"gregory\", \"coptic\", \"islamic\", \"islamic-civil\", \"islamic-tbla\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getCalendars()); // [\"gregory\", \"japanese\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getCalendars](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getCalendars) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getCalendars() - JavaScript | MDN",
  "description": "The getCalendars() method of Intl.Locale instances returns a list of one or more unique calendar identifiers for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles",
  "markdown": "# Intl.Locale.prototype.getHourCycles() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getHourCycles()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique hour cycle identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `hourCycles`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.hourCycles === locale.hourCycles` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all hour cycle types commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has an [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), then the returned array contains that single value.\n\nBelow is a list of supported hour cycle types.\n\n### [Supported hour cycle types](#supported_hour_cycle_types)\n\n[`h12`](#h12)\n\nHour system using 1–12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am. As used, for example, in the United States.\n\n[`h23`](#h23)\n\nHour system using 0–23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00.\n\n[`h11`](#h11)\n\nHour system using 0–11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am. Mostly used in Japan.\n\n[`h24`](#h24)\n\nHour system using 1–24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00. Not used anywhere.\n\n## [Examples](#examples)\n\n### [Obtaining supported hour cycles](#obtaining_supported_hour_cycles)\n\nIf the `Locale` object doesn't have a `hourCycle` already, `getHourCycles()` lists all commonly-used hour cycle identifiers for the given `Locale`. For examples of explicitly setting a `hourCycle`, see [`hourCycle` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getHourCycles()); // [\"h12\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getHourCycles()); // [\"h23\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getHourCycles](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getHourCycles) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getHourCycles() - JavaScript | MDN",
  "description": "The getHourCycles() method of Intl.Locale instances returns a list of one or more unique hour cycle identifiers for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones",
  "markdown": "# Intl.Locale.prototype.getTimeZones() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTimeZones()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of supported time zones for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `timeZones`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.timeZones === locale.timeZones` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing supported time zones for the associated `Locale`, where each value is an [IANA time zone canonical name](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database), sorted in alphabetical order. If the locale identifier does not contain a region subtag, the returned value is `undefined`.\n\nNote that while the IANA database changes from time to time, [the Unicode CLDR database (which browsers use) keeps old time zone names for stability purposes](https://unicode.org/reports/tr35/#Time_Zone_Identifiers). For example, here are a few notable name changes:\n\n| Current IANA name | CDLR database |\n| --- | --- |\n| `America/Argentina/Buenos_Aires` | `America/Buenos_Aires` |\n| `Asia/Kolkata` | `Asia/Calcutta` |\n| `Asia/Ho_Chi_Minh` | `Asia/Saigon` |\n| `Europe/Kyiv` | `Europe/Kiev` |\n\nSome browsers (Firefox) override these legacy names, while others don't (Safari and Chrome). For more information, check the [CLDR database](https://github.com/unicode-org/cldr-json/blob/main/cldr-json/cldr-bcp47/bcp47/timezone.json). (IANA names are marked with `\"_iana\"`, if different.) There is [an effort in TC39 to properly handle these canonical identifiers](https://github.com/tc39/proposal-canonical-tz), which also contains links to related CLDR issues.\n\n## [Examples](#examples)\n\n### [Obtaining supported time zones](#obtaining_supported_time_zones)\n\nList supported time zones for a given `Locale`.\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getTimeZones()); // [\"Africa/Cairo\"]\n```\n\n```\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getTimeZones()); // [\"Asia/Tokyo\"]\n```\n\n```\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTimeZones()); // undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getTimeZones](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getTimeZones) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getTimeZones() - JavaScript | MDN",
  "description": "The getTimeZones() method of Intl.Locale instances returns a list of supported time zones for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo",
  "markdown": "# Intl.Locale.prototype.getWeekInfo() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getWeekInfo()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a `weekInfo` object with the properties `firstDay`, `weekend` and `minimalDays` for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `weekInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.weekInfo === locale.weekInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object representing week information associated with the Locale data specified in [UTS 35's Week Elements](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements). It has the following properties:\n\n[`firstDay`](#firstday)\n\nAn integer between 1 (Monday) and 7 (Sunday) indicating the first day of the week for the locale. Commonly 1, 5, 6, or 7.\n\n[`weekend`](#weekend)\n\nAn array of integers between 1 and 7 indicating the weekend days for the locale. This is usually continuous because UTS 35 stores `weekendStart` and `weekendEnd` instead.\n\n[`minimalDays`](#minimaldays)\n\nAn integer between 1 and 7 (commonly 1 and 4) indicating the minimal days required in the first week of a month or year, for week-of-year or week-of-month calculations (e.g. The 20th week of the year). For example, in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) calendar, the first week of a year must have at least 4 days in this year, so if January 1 is a Friday, Saturday, or Sunday, it will be numbered as part of the last week of the previous year.\n\n## [Examples](#examples)\n\n### [Obtaining the Week Information](#obtaining_the_week_information)\n\nReturn the week information for a given `Locale`.\n\n```\nconst he = new Intl.Locale(\"he\"); // Hebrew (Israel)\nconsole.log(he.getWeekInfo()); // { firstDay: 7, weekend: [5, 6], minimalDays: 1 }\n\nconst af = new Intl.Locale(\"af\"); // Afrikaans (South Africa)\nconsole.log(af.getWeekInfo()); // { firstDay: 7, weekend: [6, 7], minimalDays: 1 }\n\nconst enGB = new Intl.Locale(\"en-GB\"); // English (United Kingdom)\nconsole.log(enGB.getWeekInfo()); // { firstDay: 1, weekend: [6, 7], minimalDays: 4 }\n\nconst arAF = new Intl.Locale(\"ar-AF\"); // Arabic (Afghanistan)\nconsole.log(arAF.getWeekInfo()); // { firstDay: 6, weekend: [4, 5], minimalDays: 1 }\n\nconst dvMV = new Intl.Locale(\"dv-MV\"); // Divehi (Maldives)\nconsole.log(dvMV.getWeekInfo()); // { firstDay: 5, weekend: [6, 7], minimalDays: 1 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getWeekInfo](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getWeekInfo) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getWeekInfo() - JavaScript | MDN",
  "description": "The getWeekInfo() method of Intl.Locale instances returns a weekInfo object with the properties firstDay, weekend and minimalDays for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems",
  "markdown": "# Intl.Locale.prototype.getNumberingSystems() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getNumberingSystems()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a list of one or more unique [numbering system](https://en.wikipedia.org/wiki/Numeral_system) identifiers for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `numberingSystems`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.numberingSystems === locale.numberingSystems` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn array of strings representing all numbering systems commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem), then the returned array contains that single value.\n\nA table of the standard Unicode numeral systems can be seen below.\n\n### [Supported numbering system types](#supported_numbering_system_types)\n\n| Value | Description |\n| --- | --- |\n| adlm | Adlam digits |\n| ahom | Ahom digits |\n| arab | Arabic-Indic digits |\n| arabext | Extended Arabic-Indic digits |\n| armn | Armenian upper case numerals — algorithmic |\n| armnlow | Armenian lower case numerals — algorithmic |\n| bali | Balinese digits |\n| beng | Bengali digits |\n| bhks | Bhaiksuki digits |\n| brah | Brahmi digits |\n| cakm | Chakma digits |\n| cham | Cham digits |\n| cyrl | Cyrillic numerals — algorithmic |\n| deva | Devanagari digits |\n| ethi | Ethiopic numerals — algorithmic |\n| finance | Financial numerals — may be algorithmic |\n| fullwide | Full width digits |\n| geor | Georgian numerals — algorithmic |\n| gong | Gunjala Gondi digits |\n| gonm | Masaram Gondi digits |\n| grek | Greek upper case numerals — algorithmic |\n| greklow | Greek lower case numerals — algorithmic |\n| gujr | Gujarati digits |\n| guru | Gurmukhi digits |\n| hanidays | Han-character day-of-month numbering for lunar/other traditional calendars |\n| hanidec | Positional decimal system using Chinese number ideographs as digits |\n| hans | Simplified Chinese numerals — algorithmic |\n| hansfin | Simplified Chinese financial numerals — algorithmic |\n| hant | Traditional Chinese numerals — algorithmic |\n| hantfin | Traditional Chinese financial numerals — algorithmic |\n| hebr | Hebrew numerals — algorithmic |\n| hmng | Pahawh Hmong digits |\n| hmnp | Nyiakeng Puachue Hmong digits |\n| java | Javanese digits |\n| jpan | Japanese numerals — algorithmic |\n| jpanfin | Japanese financial numerals — algorithmic |\n| jpanyear | Japanese first-year Gannen numbering for Japanese calendar |\n| kali | Kayah Li digits |\n| khmr | Khmer digits |\n| knda | Kannada digits |\n| lana | Tai Tham Hora (secular) digits |\n| lanatham | Tai Tham (ecclesiastical) digits |\n| laoo | Lao digits |\n| latn | Latin digits |\n| lepc | Lepcha digits |\n| limb | Limbu digits |\n| mathbold | Mathematical bold digits |\n| mathdbl | Mathematical double-struck digits |\n| mathmono | Mathematical monospace digits |\n| mathsanb | Mathematical sans-serif bold digits |\n| mathsans | Mathematical sans-serif digits |\n| mlym | Malayalam digits |\n| modi | Modi digits |\n| mong | Mongolian digits |\n| mroo | Mro digits |\n| mtei | Meetei Mayek digits |\n| mymr | Myanmar digits |\n| mymrshan | Myanmar Shan digits |\n| mymrtlng | Myanmar Tai Laing digits |\n| native | Native digits |\n| newa | Newa digits |\n| nkoo | N'Ko digits |\n| olck | Ol Chiki digits |\n| orya | Oriya digits |\n| osma | Osmanya digits |\n| rohg | Hanifi Rohingya digits |\n| roman | Roman upper case numerals — algorithmic |\n| romanlow | Roman lowercase numerals — algorithmic |\n| saur | Saurashtra digits |\n| shrd | Sharada digits |\n| sind | Khudawadi digits |\n| sinh | Sinhala Lith digits |\n| sora | Sora\\_Sompeng digits |\n| sund | Sundanese digits |\n| takr | Takri digits |\n| talu | New Tai Lue digits |\n| taml | Tamil numerals — algorithmic |\n| tamldec | Modern Tamil decimal digits |\n| telu | Telugu digits |\n| thai | Thai digits |\n| tirh | Tirhuta digits |\n| tibt | Tibetan digits |\n| traditio | Traditional numerals — may be algorithmic |\n| vaii | Vai digits |\n| wara | Warang Citi digits |\n| wcho | Wancho digits |\n\n## [Examples](#examples)\n\n### [Obtaining supported numbering systems](#obtaining_supported_numbering_systems)\n\nIf the `Locale` object doesn't have a `numberingSystem` already, `getNumberingSystems()` lists all commonly-used numbering systems for the given `Locale`. For examples of explicitly setting a `numberingSystem`, see [`numberingSystem` examples](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem#examples).\n\n```\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getNumberingSystems()); // [\"arab\"]\n```\n\n```\nconst ja = new Intl.Locale(\"ja\");\nconsole.log(ja.getNumberingSystems()); // [\"latn\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getNumberingSystems](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getNumberingSystems) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getNumberingSystems() - JavaScript | MDN",
  "description": "The getNumberingSystems() method of Intl.Locale instances returns a list of one or more unique numbering system identifiers for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo",
  "markdown": "# Intl.Locale.prototype.getTextInfo() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`getTextInfo()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the ordering of characters indicated by either `ltr` (left-to-right) or by `rtl` (right-to-left) for this locale.\n\n**Note:** In some versions of some browsers, this method was implemented as an accessor property called `textInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.textInfo === locale.textInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object representing text typesetting information associated with the Locale data specified in [UTS 35's Layouts Elements](https://www.unicode.org/reports/tr35/tr35-general.html#Layout_Elements). It has the following properties:\n\n[`direction`](#direction)\n\nA string indicating the direction of text for the locale. Can be either `\"ltr\"` (left-to-right) or `\"rtl\"` (right-to-left).\n\n## [Examples](#examples)\n\n### [Obtaining text info](#obtaining_text_info)\n\nReturn the supported text directions for a given `Locale`.\n\n```\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTextInfo()); // { direction: \"rtl\" }\nconsole.log(ar.getTextInfo().direction); // \"rtl\"\n```\n\n```\nconst es = new Intl.Locale(\"es\");\nconsole.log(es.getTextInfo()); // { direction: \"ltr\" }\nconsole.log(es.getTextInfo().direction); // \"ltr\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [Intl Locale Info Proposal  <br>\\# sec-Intl.Locale.prototype.getTextInfo](https://tc39.es/proposal-intl-locale-info/#sec-Intl.Locale.prototype.getTextInfo) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.getTextInfo() - JavaScript | MDN",
  "description": "The getTextInfo() method of Intl.Locale instances returns the ordering of characters indicated by either ltr (left-to-right) or by rtl (right-to-left) for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/toString",
  "markdown": "# Intl.Locale.prototype.toString() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`toString()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns this Locale's full [locale identifier string](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nThe _locale_'s Unicode locale identifier string.\n\n## [Description](#description)\n\nThe `Locale` object is a JavaScript representation of a concept Unicode locale identifier. Information about a particular locale (language, script, calendar type, etc.) can be encoded in a locale identifier string. To make it easier to work with these locale identifiers, the `Locale` object was introduced to JavaScript. Calling the `toString` method on a Locale object will return the identifier string for that particular Locale. The `toString` method allows `Locale` instances to be provided as an argument to existing `Intl` constructors, serialized in JSON, or any other context where an exact string representation is useful.\n\n## [Examples](#examples)\n\n### [Using toString](#using_tostring)\n\n```\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.toString](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.toString) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.toString() - JavaScript | MDN",
  "description": "The toString() method of Intl.Locale instances returns this Locale's full locale identifier string.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize",
  "markdown": "# Intl.Locale.prototype.maximize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`maximize()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances gets the most likely values for the language, script, and region of this locale based on existing values.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance whose `baseName` property returns the result of the [Add Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm executed against _[`locale.baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)_.\n\n## [Description](#description)\n\nSometimes, it is convenient to be able to identify the most likely locale language identifier subtags based on an incomplete language ID. The Add Likely Subtags algorithm gives us this functionality. For instance, given the language ID \"en\", the algorithm would return \"en-Latn-US\", since English can only be written in the Latin script, and is most likely to be used in the United States, as it is the largest English-speaking country in the world. This functionality is provided to JavaScript programmers via the `maximize()` method. `maximize()` only affects the main subtags that comprise the [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions): language, script, and region subtags. Other subtags after the \"-u\" in the locale identifier are called extension subtags and are not affected by the `maximize()` method. Examples of these subtags include [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), and [`numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric).\n\n## [Examples](#examples)\n\n### [Using maximize](#using_maximize)\n\n```\nconst myLocale = new Intl.Locale(\"fr\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr\"\nconsole.log(myLocale.toString()); // Prints \"fr-u-ca-gregory-hc-h12\"\nconst myLocMaximized = myLocale.maximize();\n\n// Prints \"fr-Latn-FR\". The \"Latn\" and \"FR\" tags are added,\n// since French is only written in the Latin script and is most likely to be spoken in France.\nconsole.log(myLocMaximized.baseName);\n\n// Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMaximized.toString());\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.maximize](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.maximize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [`baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)\n*   [Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) in the Unicode locale data markup language spec",
  "title": "Intl.Locale.prototype.maximize() - JavaScript | MDN",
  "description": "The maximize() method of Intl.Locale instances gets the\n  most likely values for the language, script, and region of this locale based on\n  existing values.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/minimize",
  "markdown": "# Intl.Locale.prototype.minimize() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`minimize()`** method of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances attempts to remove information about this locale that would be added by calling [`maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance whose `baseName` property returns the result of the [Remove Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm executed against _[`locale.baseName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName)_.\n\n## [Description](#description)\n\nThis method carries out the reverse of [`maximize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize), removing any language, script, or region subtags from the locale language identifier (essentially the contents of `baseName`). This is useful when there are superfluous subtags in the language identifier; for instance, \"en-Latn\" can be simplified to \"en\", since \"Latn\" is the only script used to write English. `minimize()` only affects the main subtags that comprise the [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions): language, script, and region subtags. Other subtags after the \"-u\" in the locale identifier are called extension subtags and are not affected by the `minimize()` method. Examples of these subtags include [`hourCycle`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), [`calendar`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), and [`numeric`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric).\n\n## [Examples](#examples)\n\n### [Using minimize](#using_minimize)\n\n```\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n\nconst myLocMinimized = myLocale.minimize();\n\n// Prints \"fr\", since French is only written in the Latin script\n// and is most likely to be spoken in France.\nconsole.log(myLocMinimized.baseName);\n\n// Prints \"fr-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMinimized.toString());\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.minimize](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.minimize) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.minimize() - JavaScript | MDN",
  "description": "The minimize() method of Intl.Locale instances attempts to\n  remove information about this locale that would be added by calling\n  maximize().",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst",
  "markdown": "# Intl.Locale.prototype.caseFirst - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`caseFirst`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns whether case is taken into account for this locale's collation rules.\n\n## [Description](#description)\n\nA locale's collation rules are used to determine how strings are ordered in that locale. Certain locales use a character's case (UPPERCASE or lowercase) in the collation process. This additional rule can be expressed in a [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object's `caseFirst` property.\n\nThere are 3 values that the `caseFirst` property can have, outlined in the table below.\n\n### [`caseFirst` values](#casefirst_values)\n\n| Value | Description |\n| --- | --- |\n| `upper` | Upper case to be sorted before lower case. |\n| `lower` | Lower case to be sorted before upper case. |\n| `false` | No special case ordering. |\n\n## [Examples](#examples)\n\n### [Setting the caseFirst value via the locale string](#setting_the_casefirst_value_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `caseFirst` represents correspond to the key `kf`. `kf` is treated as a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `caseFirst` value can be added to the initial locale identifier string that is passed into the `Locale` constructor. To add the `caseFirst` value, first add the `-u` extension key to the string. Next, add the `-kf` extension key to indicate that you are adding a value for `caseFirst`. Finally, add the `caseFirst` value to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kf-upper\");\nconsole.log(locale.caseFirst); // Prints \"upper\"\n```\n\n### [Setting the caseFirst value via the configuration object argument](#setting_the_casefirst_value_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can be used to pass extension types. Set the `caseFirst` property of the configuration object to your desired `caseFirst` value, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { caseFirst: \"lower\" });\nconsole.log(locale.caseFirst); // Prints \"lower\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.caseFirst](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.caseFirst) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.caseFirst - JavaScript | MDN",
  "description": "The caseFirst accessor property of Intl.Locale instances returns whether case is taken into account for this locale's collation rules.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName",
  "markdown": "# Intl.Locale.prototype.baseName - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`baseName`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns a substring of this locale's string representation, containing core information about this locale, including the language, and the script and region if available.\n\n## [Description](#description)\n\n`baseName` returns the `language [\"-\" script] [\"-\" region] *(\"-\" variant)` subsequence of the [unicode\\_language\\_id grammar](https://www.unicode.org/reports/tr35/#Identifiers). It only includes information explicitly specified in the constructor, either through the locale identifier string or the options object.\n\nThe set accessor of `baseName` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\n### [Basic Example](#basic_example)\n\n```\nconst myLoc = new Intl.Locale(\"fr-Latn-CA\"); // Sets locale to Canadian French\nconsole.log(myLoc.toString()); // Prints out \"fr-Latn-CA-u-ca-gregory\"\nconsole.log(myLoc.baseName); // Prints out \"fr-Latn-CA\"\n```\n\n### [Example with options in the input string](#example_with_options_in_the_input_string)\n\n```\n// Sets language to Japanese, region to Japan,\n\n// calendar to Gregorian, hour cycle to 24 hours\nconst japan = new Intl.Locale(\"ja-JP-u-ca-gregory-hc-24\");\nconsole.log(japan.toString()); // Prints out \"ja-JP-u-ca-gregory-hc-h24\"\nconsole.log(japan.baseName); // Prints out \"ja-JP\"\n```\n\n### [Example with options that override input string](#example_with_options_that_override_input_string)\n\n```\n// Input string indicates language as Dutch and region as Belgium,\n\n// but options object overrides the region and sets it to the Netherlands\nconst dutch = new Intl.Locale(\"nl-Latn-BE\", { region: \"NL\" });\n\nconsole.log(dutch.baseName); // Prints out \"nl-Latn-NL\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.baseName](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.baseName) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.baseName - JavaScript | MDN",
  "description": "The baseName accessor property of Intl.Locale instances returns a substring of this locale's string representation, containing core information about this locale, including the language, and the script and region if available.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle",
  "markdown": "# Intl.Locale.prototype.hourCycle - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`hourCycle`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the hour cycle type for this locale.\n\n## [Description](#description)\n\nThere are 2 main types of time keeping conventions (clocks) used around the world: the 12 hour clock and the 24 hour clock. The `hourCycle` property's value is set at construction time, either through the `hc` key of the locale identifier or through the `hourCycle` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported hour cycle types, see [`Intl.Locale.prototype.getHourCycles()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types).\n\nThe set accessor of `hourCycle` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the hour cycle type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding an hour cycle via the locale string](#adding_an_hour_cycle_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), hour cycle types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the hour cycle type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the hour cycle type, first add the `-u` extension key to the string. Next, add the `-hc` extension to indicate that you are adding an hour cycle. Finally, add the hour cycle type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-FR-u-hc-h23\");\nconsole.log(locale.hourCycle); // \"h23\"\n```\n\n### [Adding an hour cycle via the configuration object argument](#adding_an_hour_cycle_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including hour cycle types. Set the `hourCycle` property of the configuration object to your desired hour cycle type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.hourCycle](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.hourCycle) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.hourCycle - JavaScript | MDN",
  "description": "The hourCycle accessor property of Intl.Locale instances returns the hour cycle type for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation",
  "markdown": "# Intl.Locale.prototype.collation - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`collation`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the [collation type](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation) for this locale, which is used to order strings according to the locale's rules.\n\n## [Description](#description)\n\nCollation is the process of ordering strings of characters. It is used whenever strings must be sorted and placed into a certain order, from search query results to ordering records in a database. While the idea of placing strings in order might seem trivial, the idea of order can vary from region to region and language to language. The `collation` property's value is set at construction time, either through the `co` key of the locale identifier or through the `collation` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported collation types, see [`Intl.Locale.prototype.getCollations()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n\nThe set accessor of `collation` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the collation type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a collation type via the locale string](#adding_a_collation_type_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), collation types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the collation type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the collation type, first add the `-u` extension to the string. Next, add the `-co` extension to indicate that you are adding a collation type. Finally, add the collation type to the string.\n\n```\nconst locale = new Intl.Locale(\"zh-Hant-u-co-zhuyin\");\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n### [Adding a collation type via the configuration object argument](#adding_a_collation_type_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including collation types. Set the `collation` property of the configuration object to your desired collation type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"zh-Hant\", { collation: \"zhuyin\" });\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.collation](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.collation) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.collation - JavaScript | MDN",
  "description": "The collation accessor property of Intl.Locale instances returns the collation type for this locale, which is used to order strings according to the locale's rules.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar",
  "markdown": "# Intl.Locale.prototype.calendar - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`calendar`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the calendar type for this locale.\n\n## [Description](#description)\n\nWhile most of the world uses the Gregorian calendar, there are several regional calendar eras used around the world. The `calendar` property's value is set at construction time, either through the `ca` key of the locale identifier or through the `calendar` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n\nThe set accessor of `calendar` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the calendar type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a calendar type via the locale string](#adding_a_calendar_type_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), calendar era types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the calendar era type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the calendar type, first add the `-u` extension to the string. Next, add the `-ca` extension to indicate that you are adding a calendar type. Finally, add the calendar era type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-FR-u-ca-buddhist\");\nconsole.log(locale.calendar); // Prints \"buddhist\"\n```\n\n### [Adding a calendar type via the configuration object argument](#adding_a_calendar_type_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including calendars. Set the `calendar` property of the configuration object to your desired calendar era, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-FR\", { calendar: \"buddhist\" });\nconsole.log(locale.calendar); // \"buddhist\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.calendar](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.calendar) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.calendar - JavaScript | MDN",
  "description": "The calendar accessor property of Intl.Locale instances returns the calendar type for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem",
  "markdown": "# Intl.Locale.prototype.numberingSystem - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`numberingSystem`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the [numeral system](https://en.wikipedia.org/wiki/Numeral_system) for this locale.\n\n## [Description](#description)\n\nA numeral system is a system for expressing numbers. The `numberingSystem` property's value is set at construction time, either through the `nu` key of the locale identifier or through the `numberingSystem` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types).\n\n## [Examples](#examples)\n\nLike other locale subtags, the numbering system type can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a numbering system via the locale string](#adding_a_numbering_system_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), numbering system types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the numbering system type can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To add the numbering system type, first add the `-u` extension key to the string. Next, add the `-nu` extension to indicate that you are adding a numbering system. Finally, add the numbering system type to the string.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-nu-mong\");\nconsole.log(locale.numberingSystem); // \"mong\"\n```\n\n### [Adding a numbering system via the configuration object argument](#adding_a_numbering_system_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can contain any of several extension types, including numbering system types. Set the `numberingSystem` property of the configuration object to your desired numbering system type, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { numberingSystem: \"latn\" });\nconsole.log(locale.numberingSystem); // \"latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.numberingSystem](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.numberingSystem) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.numberingSystem - JavaScript | MDN",
  "description": "The numberingSystem accessor property of Intl.Locale instances returns the numeral system for this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/language",
  "markdown": "# Intl.Locale.prototype.language - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`language`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the language associated with this locale.\n\n## [Description](#description)\n\nLanguage is one of the core attributes of a locale. The Unicode specification treats the language identifier of a locale as the language and the region together (to make a distinction between dialects and variations, e.g. British English vs. American English). The `language` property of a [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) returns strictly the locale's language subtag. The `language` property's value is set at construction time, either through the `language` subtag (first part) of the locale identifier or through the `language` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present.\n\nThe set accessor of `language` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the language can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Setting the language via the locale string](#setting_the_language_via_the_locale_string)\n\nIn order to be a valid Unicode locale identifier, a string must start with the language subtag. The main argument to the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor must be a valid Unicode locale identifier, so whenever the constructor is used, it must be passed an identifier with a language subtag.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.language); // Prints \"en\"\n```\n\n### [Overriding language via the configuration object argument](#overriding_language_via_the_configuration_object_argument)\n\nWhile the language subtag must be specified, the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can override the language subtag.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { language: \"es\" });\nconsole.log(locale.language); // Prints \"es\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.language](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.language) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [Unicode language subtag](https://www.unicode.org/reports/tr35/#unicode_language_subtag_validity) in the Unicode locale data markup language spec",
  "title": "Intl.Locale.prototype.language - JavaScript | MDN",
  "description": "The language accessor property of Intl.Locale instances returns the language associated with this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric",
  "markdown": "# Intl.Locale.prototype.numeric - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`numeric`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns whether this locale has special collation handling for numeric characters.\n\n## [Description](#description)\n\nLike [`caseFirst`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst), `numeric` represents a modification to the collation rules utilized by the locale. `numeric` is a boolean value, which means that it can be either `true` or `false`. If `numeric` is set to `false`, there will be no special handling of numeric values in strings. If `numeric` is set to `true`, then the locale will take numeric characters into account when collating strings. This special numeric handling means that sequences of decimal digits will be compared as numbers. For example, the string \"A-21\" will be considered less than \"A-123\".\n\n## [Examples](#examples)\n\n### [Setting the numeric value via the locale string](#setting_the_numeric_value_via_the_locale_string)\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `numeric` represents correspond to the key `kn`. `kn` is considered a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `numeric` value can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. To set the `numeric` value, first add the `-u` extension key to the string. Next, add the `-kn` extension key to indicate that you are adding a value for `numeric`. Finally, add the `numeric` value to the string. If you want to set `numeric` to `true`, adding the `kn` key will suffice. To set the value to `false`, you must specify in by adding `\"false\"` after the `kn` key.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kn-false\");\nconsole.log(locale.numeric); // Prints \"false\"\n```\n\n### [Setting the numeric value via the configuration object argument](#setting_the_numeric_value_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument, which can be used to pass extension types. Set the `numeric` property of the configuration object to your desired `numeric` value and pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\", { numeric: true });\nconsole.log(locale.numeric); // Prints \"true\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.numeric](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.numeric) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.numeric - JavaScript | MDN",
  "description": "The numeric accessor property of Intl.Locale instances returns whether this locale has special collation handling for numeric characters.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/region",
  "markdown": "# Intl.Locale.prototype.region - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`region`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the region of the world (usually a country) associated with this locale.\n\n## [Description](#description)\n\nRegion is one of the core attributes of a locale. It allows selection for differences between the same language in, say, different countries. For example, English is spoken in the United Kingdom and the United States of America, but there are differences in spelling and other language conventions between those two countries. Knowing the locale's region helps JavaScript programmers make sure that the content from their sites and applications is correctly displayed when viewed from different areas of the world. The `region` property's value is set at construction time, either through the `region` subtag (third part if `script` is present, second part otherwise) of the locale identifier or through the `region` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nThe set accessor of `region` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the region can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a region via the locale string](#adding_a_region_via_the_locale_string)\n\nThe region, if present, is the third part (if `script` is present, second part otherwise) of a valid Unicode language identifier string, and can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. Note that the region is not a required part of a locale identifier.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.region); // Prints \"US\"\n```\n\n### [Adding a region via the configuration object argument](#adding_a_region_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument. Set the `region` property of the configuration object to your desired region, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-Latn\", { region: \"FR\" });\nconsole.log(locale.region); // Prints \"FR\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.region](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.region) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Locale.prototype.region - JavaScript | MDN",
  "description": "The region accessor property of Intl.Locale instances returns the region of the world (usually a country) associated with this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/supportedLocalesOf",
  "markdown": "# Intl.NumberFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.NumberFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.NumberFormat.supportedLocalesOf(locales)\nIntl.NumberFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in number formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to number formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.NumberFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.numberformat.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.NumberFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange",
  "markdown": "# Intl.NumberFormat.prototype.formatRange() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRange()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances formats a range of numbers according to the locale and formatting options of this `Intl.NumberFormat` object.\n\n## [Syntax](#syntax)\n\n```\nformatRange(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n[`endRange`](#endrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n### [Return value](#return_value)\n\nA string representing the given range of numbers formatted according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `startRange` is less than `endRange`, or either value is `NaN`.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if either `startRange` or `endRange` is undefined.\n\n## [Description](#description)\n\nThe `formatRange` getter function formats a range of numbers into a string according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object from which it is called.\n\n## [Examples](#examples)\n\n### [Using formatRange](#using_formatrange)\n\nUse the `formatRange` getter function for formatting a range of currency values:\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"$3 – $5\"\n\n// Note: the \"approximately equals\" symbol is added if\n// startRange and endRange round to the same values.\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~$3\"\n```\n\n```\nconst nf = new Intl.NumberFormat(\"es-ES\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"3-5 €\"\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~3 €\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formatrange](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formatrange) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.prototype.formatRange() - JavaScript | MDN",
  "description": "The formatRange() method of Intl.NumberFormat instances formats a range of numbers according to the locale and formatting options of this Intl.NumberFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format",
  "markdown": "# Intl.NumberFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances formats a number according to the [locale and formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) of this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`number`](#number)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), or string, to format. Strings are parsed in the same way as in [number conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), except that `format()` will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.\n\n**Note:** Older versions of the specification parsed strings as a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number). Check the compatibility table for your browser.\n\n### [Return value](#return_value)\n\nA string representing the given `number` formatted according to the locale and formatting options of this [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Description](#description)\n\n[`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) values in JavaScript suffer from loss of precision if they are too big or too small, making the text representation inaccurate. If you are performing calculations with integers larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) you should use a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) instead, which will format correctly:\n\n```\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891); // 1,234,567,891,234,568,000\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891n); // 1,234,567,891,234,567,891\n```\n\nYou can also pass through very large strings to be formatted as an arbitrary-precision decimal string (if you're performing calculations on the data you will still need to work with `BigInt`):\n\n```\nnew Intl.NumberFormat(\"en-US\").format(\"1234567891234567891\"); // 1,234,567,891,234,567,891\n```\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nUse the `format` getter function for formatting a single currency value. The code below shows how to format the roubles currency for a Russian locale:\n\n```\nconst options = { style: \"currency\", currency: \"RUB\" };\nconst numberFormat = new Intl.NumberFormat(\"ru-RU\", options);\nconsole.log(numberFormat.format(654321.987));\n// \"654 321,99 ₽\"\n```\n\n### [Using format with map](#using_format_with_map)\n\nUse the `format` getter function for formatting all numbers in an array. Note that the function is bound to the [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) from which it was obtained, so it can be passed directly to [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). This is considered a historical artefact, as part of a convention which is no longer followed for new features, but is preserved to maintain compatibility with existing programs.\n\n```\nconst a = [123456.789, 987654.321, 456789.123];\nconst numberFormat = new Intl.NumberFormat(\"es-ES\");\nconst formatted = a.map((n) => numberFormat.format(n));\nconsole.log(formatted.join(\"; \"));\n// \"123.456,789; 987.654,321; 456.789,123\"\n```\n\n### [Using format with a string](#using_format_with_a_string)\n\nUsing a string we can specify numbers that are larger than [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) without losing precision.\n\n```\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\n\n// Here the value is converted to a Number\nconsole.log(numberFormat.format(987654321987654321));\n// 987,654,321,987,654,300\n\n// Here we use a string and don't lose precision\nconsole.log(numberFormat.format(\"987654321987654321\"));\n// 987,654,321,987,654,321\n```\n\nWe can also use the general \"E\" exponent syntax for decimal strings: `#.#E#`. The code below creates a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), coerces it to a string with the suffix `E-6`, and then formats it.\n\n```\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\nconst bigNum = 1000000000000000110000n;\nconsole.log(numberFormat.format(bigNum));\n// \"1,000,000,000,000,000,110,000\"\n\n// Format as a string using the `E` syntax:\nconsole.log(numberFormat.format(`${bigNum}E-6`));\n// \"1,000,000,000,000,000.11\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.format](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.prototype.format() - JavaScript | MDN",
  "description": "The format() method of Intl.NumberFormat instances formats a number according to the locale and formatting options of this Intl.NumberFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts",
  "markdown": "# Intl.NumberFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances allows locale-aware formatting of strings produced by this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nformatToParts()\nformatToParts(number)\n```\n\n### [Parameters](#parameters)\n\n[`number`](#number) Optional\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) to format.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted number in parts.\n\n## [Description](#description)\n\nThe `formatToParts()` method is useful for custom formatting of number strings. It returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n];\n```\n\nPossible types are the following:\n\n[`compact`](#compact)\n\nThe exponent in `\"long\"` or `\"short\"` form, depending on how `compactDisplay` (which defaults to `short`) is specified when `notation` is set to `compact`.\n\n[`currency`](#currency)\n\nThe currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n\n[`decimal`](#decimal)\n\nThe decimal separator string (\".\").\n\n[`exponentInteger`](#exponentinteger)\n\nThe exponent integer value, when `notation` is set to `scientific` or `engineering`.\n\n[`exponentMinusSign`](#exponentminussign)\n\nThe exponent minus sign string (\"-\").\n\n[`exponentSeparator`](#exponentseparator)\n\nThe exponent separator, when `notation` is set to `scientific` or `engineering`.\n\n[`fraction`](#fraction)\n\nThe fraction number.\n\n[`group`](#group)\n\nThe group separator string (\",\").\n\n[`infinity`](#infinity)\n\nThe [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) string (\"∞\").\n\n[`integer`](#integer)\n\nThe integer number.\n\n[`literal`](#literal)\n\nAny literal strings or whitespace in the formatted number.\n\n[`minusSign`](#minussign)\n\nThe minus sign string (\"-\").\n\n[`nan`](#nan)\n\nThe [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) string (\"NaN\").\n\n[`plusSign`](#plussign)\n\nThe plus sign string (\"+\").\n\n[`percentSign`](#percentsign)\n\nThe percent sign string (\"%\").\n\n[`unit`](#unit)\n\nThe unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n\n[`unknown`](#unknown)\n\nThe string for `unknown` type results.\n\n## [Examples](#examples)\n\n### [Comparing format and formatToParts](#comparing_format_and_formattoparts)\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst number = 3500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nformatter.format(number);\n// \"3.500,00 €\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this string. The `formatToParts` method enables locale-aware formatting of strings produced by `NumberFormat` formatters by providing you the string in parts:\n\n```\nformatter.formatToParts(number);\n\n// return value:\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n  { type: \"decimal\", value: \",\" },\n  { type: \"fraction\", value: \"00\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"currency\", value: \"€\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated again in a customized way. For example by using [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), a [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), and [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\n```\nconst numberString = formatter\n  .formatToParts(number)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"currency\":\n        return `<strong>${value}</strong>`;\n      default:\n        return value;\n    }\n  })\n  .reduce((string, part) => string + part);\n```\n\nThis will make the currency bold, when using the `formatToParts()` method.\n\n```\nconsole.log(numberString);\n// \"3.500,00 <strong>€</strong>\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formattoparts](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formattoparts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.prototype.formatToParts() - JavaScript | MDN",
  "description": "The formatToParts() method of Intl.NumberFormat instances allows locale-aware formatting of strings produced by this Intl.NumberFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRangeToParts",
  "markdown": "# Intl.NumberFormat.prototype.formatRangeToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatRangeToParts()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.\n\n## [Syntax](#syntax)\n\n```\nformatRangeToParts(startRange, endRange)\n```\n\n### [Parameters](#parameters)\n\n[`startRange`](#startrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n[`endRange`](#endrange)\n\nA [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) or [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects containing the formatted range of numbers in parts.\n\nThe structure of the returned looks like this:\n\n```\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"literal\", value: \"-\", source: \"shared\" },\n  { type: \"integer\", value: \"5\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\nPossible values for the `type` property include:\n\n[`currency`](#currency)\n\nThe currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n\n[`decimal`](#decimal)\n\nThe decimal separator string (\".\").\n\n[`fraction`](#fraction)\n\nThe fraction number.\n\n[`group`](#group)\n\nThe group separator string (\",\").\n\n[`infinity`](#infinity)\n\nThe [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) string (\"∞\").\n\n[`integer`](#integer)\n\nThe integer number.\n\n[`literal`](#literal)\n\nAny literal strings or whitespace in the formatted number.\n\n[`minusSign`](#minussign)\n\nThe minus sign string (\"-\").\n\n[`nan`](#nan)\n\nThe [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) string (\"NaN\").\n\n[`plusSign`](#plussign)\n\nThe plus sign string (\"+\").\n\n[`percentSign`](#percentsign)\n\nThe percent sign string (\"%\").\n\n[`unit`](#unit)\n\nThe unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n\nPossible values for the `source` property include:\n\n[`startRange`](#startrange_2)\n\nThe object is the start part of the range.\n\n[`endRange`](#endrange_2)\n\nThe object is the end part of the range.\n\n[`shared`](#shared)\n\nThe object is a \"shared\" part of the range, such as a separator or currency.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `startRange` is less than `endRange`, or either value is `NaN`.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if either `startRange` or `endRange` is undefined.\n\n## [Examples](#examples)\n\n### [Comparing formatRange and formatRangeToParts](#comparing_formatrange_and_formatrangetoparts)\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```\nconst startRange = 3500;\nconst endRange = 9500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nconsole.log(formatter.formatRange(startRange, endRange));\n// \"3.500,00–9.500,00 €\"\n```\n\nHowever, for many user interfaces there is a need to customize the formatting of this string. The `formatRangeToParts` method enables locale-aware formatting of strings produced by `NumberFormat` formatters by providing you the string in parts:\n\n```\nconsole.log(formatter.formatRangeToParts(startRange, endRange));\n\n// return value:\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"group\", value: \".\", source: \"startRange\" },\n  { type: \"integer\", value: \"500\", source: \"startRange\" },\n  { type: \"decimal\", value: \",\", source: \"startRange\" },\n  { type: \"fraction\", value: \"00\", source: \"startRange\" },\n  { type: \"literal\", value: \"–\", source: \"shared\" },\n  { type: \"integer\", value: \"9\", source: \"endRange\" },\n  { type: \"group\", value: \".\", source: \"endRange\" },\n  { type: \"integer\", value: \"500\", source: \"endRange\" },\n  { type: \"decimal\", value: \",\", source: \"endRange\" },\n  { type: \"fraction\", value: \"00\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.formatrangetoparts](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.formatrangetoparts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.prototype.formatRangeToParts() - JavaScript | MDN",
  "description": "The formatRangeToParts() method of Intl.NumberFormat instances returns an Array of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter",
  "markdown": "# Intl.Segmenter() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Segmenter()`** constructor creates [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.Segmenter()\nnew Intl.Segmenter(locales)\nnew Intl.Segmenter(locales, options)\n```\n\n**Note:** `Intl.Segmenter()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`granularity`](#granularity)\n\nHow granularly should the input be split. Possible values are:\n\n[`\"grapheme\"`](#grapheme) (default)\n\nSplit the input into segments at grapheme cluster (user-perceived character) boundaries, as determined by the locale.\n\n[`\"word\"`](#word)\n\nSplit the input into segments at word boundaries, as determined by the locale.\n\n[`\"sentence\"`](#sentence)\n\nSplit the input into segments at sentence boundaries, as determined by the locale.\n\n### [Return value](#return_value)\n\nA new [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instance.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nThe following example shows how to count words in a string using the Japanese language (where splitting the string using `String` methods would have given an incorrect result).\n\n```\nconst text = \"吾輩は猫である。名前はたぬき。\";\nconst japaneseSegmenter = new Intl.Segmenter(\"ja-JP\", { granularity: \"word\" });\nconsole.log(\n  [...japaneseSegmenter.segment(text)].filter((segment) => segment.isWordLike)\n    .length,\n);\n// 8, as the text is segmented as '吾輩'|'は'|'猫'|'で'|'ある'|'。'|'名前'|'は'|'たぬき'|'。'\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-segmenter-constructor](https://tc39.es/ecma402/#sec-intl-segmenter-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
  "title": "Intl.Segmenter() constructor - JavaScript | MDN",
  "description": "The Intl.Segmenter() constructor creates Intl.Segmenter objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf",
  "markdown": "# Intl.Segmenter.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.Segmenter.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nIntl.Segmenter.supportedLocalesOf(locales)\nIntl.Segmenter.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in segmentation without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in segmentation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to segmentation nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Segmenter.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.supportedlocalesof](https://tc39.es/ecma402/#sec-intl.segmenter.supportedlocalesof) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.Segmenter.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.Segmenter.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/resolvedOptions",
  "markdown": "# Intl.Segmenter.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this `Intl.Segmenter` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the locale and collation options computed during the initialization of the given [`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n## [Description](#description)\n\nThe resulting object has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`granularity`](#granularity)\n\nThe value provided for this property in the `options` argument or filled in as the default.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\n```\nconst spanishSegmenter = new Intl.Segmenter(\"es\", { granularity: \"sentence\" });\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"sentence\"\n```\n\n### [Default granularity](#default_granularity)\n\n```\nconst spanishSegmenter = new Intl.Segmenter(\"es\");\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n### [Fallback locale](#fallback_locale)\n\n```\nconst banSegmenter = new Intl.Segmenter(\"ban\");\nconst options = banSegmenter.resolvedOptions();\nconsole.log(options.locale);\n// \"fr\" on a runtime where the Balinese locale\n// is not supported and French is the default locale\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.segmenter.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.segmenter.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser",
  "title": "Intl.Segmenter.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.Segmenter instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this Intl.Segmenter object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat",
  "markdown": "# Intl.NumberFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.NumberFormat()`** constructor creates [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.NumberFormat()\nnew Intl.NumberFormat(locales)\nnew Intl.NumberFormat(locales, options)\n\nIntl.NumberFormat()\nIntl.NumberFormat(locales)\nIntl.NumberFormat(locales, options)\n```\n\n**Note:** `Intl.NumberFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.NumberFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.NumberFormat` instance; see [Return value](#return_value).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\nThe following Unicode extension key is allowed:\n\n[`nu`](#nu)\n\nSee [`numberingSystem`](#numberingsystem).\n\nThis key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n[`options`](#options) Optional\n\nAn object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [style options](#style_options), [digit options](#digit_options), and [other options](#other_options).\n\n#### Locale options\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n#### Style options\n\nDepending on the `style` used, some of them may be ignored, and others may be required:\n\n[`style`](#style)\n\nThe formatting style to use.\n\n[`\"decimal\"`](#decimal) (default)\n\nFor plain number formatting.\n\n[`\"currency\"`](#currency)\n\nFor currency formatting.\n\n[`\"percent\"`](#percent)\n\nFor percent formatting.\n\n[`\"unit\"`](#unit)\n\nFor unit formatting.\n\n[`currency`](#currency_2)\n\nThe currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as `\"USD\"` for the US dollar, `\"EUR\"` for the euro, or `\"CNY\"` for the Chinese RMB — see the [Current currency & funds code list](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes). There is no default value; if the `style` is `\"currency\"`, the `currency` property must be provided.\n\n[`currencyDisplay`](#currencydisplay)\n\nHow to display the currency in currency formatting.\n\n[`\"code\"`](#code)\n\nUse the ISO currency code.\n\n[`\"symbol\"`](#symbol) (default)\n\nUse a localized currency symbol such as €.\n\n[`\"narrowSymbol\"`](#narrowsymbol)\n\nUse a narrow format symbol (\"$100\" rather than \"US$100\").\n\n[`\"name\"`](#name)\n\nUse a localized currency name such as `\"dollar\"`.\n\n[`currencySign`](#currencysign)\n\nIn many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. Possible values are `\"standard\"` and `\"accounting\"`; the default is `\"standard\"`.\n\n[`unit`](#unit_2)\n\nThe unit to use in `unit` formatting, Possible values are core unit identifiers, defined in [UTS #35, Part 2, Section 6](https://unicode.org/reports/tr35/tr35-general.html#Unit_Elements). A [subset](https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers) of units from the [full list](https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml) was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the `style` is `\"unit\"`, the `unit` property must be provided.\n\n[`unitDisplay`](#unitdisplay)\n\nThe unit formatting style to use in `unit` formatting. Possible values are:\n\n[`\"short\"`](#short) (default)\n\nE.g., `16 l`.\n\n[`\"narrow\"`](#narrow)\n\nE.g., `16l`.\n\n[`\"long\"`](#long)\n\nE.g., `16 litres`.\n\n#### Digit options\n\nThe following properties are also supported by [`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules).\n\n[`minimumIntegerDigits`](#minimumintegerdigits)\n\nThe minimum number of integer digits to use. A value with a smaller number of integer digits than this number will be left-padded with zeros (to the specified length) when formatted. Possible values are from `1` to `21`; the default is `1`.\n\n[`minimumFractionDigits`](#minimumfractiondigits)\n\nThe minimum number of fraction digits to use. Possible values are from `0` to `100`; the default for plain number and percent formatting is `0`; the default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information).\n\n[`maximumFractionDigits`](#maximumfractiondigits)\n\nThe maximum number of fraction digits to use. Possible values are from `0` to `100`; the default for plain number formatting is the larger of `minimumFractionDigits` and `3`; the default for currency formatting is the larger of `minimumFractionDigits` and the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information); the default for percent formatting is the larger of `minimumFractionDigits` and 0.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits)\n\nThe minimum number of significant digits to use. Possible values are from `1` to `21`; the default is `1`.\n\n[`maximumSignificantDigits`](#maximumsignificantdigits)\n\nThe maximum number of significant digits to use. Possible values are from `1` to `21`; the default is `21`.\n\nThe above properties fall into two groups: `minimumIntegerDigits`, `minimumFractionDigits`, and `maximumFractionDigits` in one group, `minimumSignificantDigits` and `maximumSignificantDigits` in the other. If properties from both groups are specified, conflicts in the resulting display format are resolved based on the value of the [`roundingPriority`](#roundingpriority) property.\n\n[`roundingPriority`](#roundingpriority)\n\nSpecify how rounding conflicts will be resolved if both \"FractionDigits\" ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and \"SignificantDigits\" ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are specified. Possible values are:\n\n[`\"auto\"`](#auto) (default)\n\nThe result from the significant digits property is used.\n\n[`\"morePrecision\"`](#moreprecision)\n\nThe result from the property that results in more precision is used.\n\n[`\"lessPrecision\"`](#lessprecision)\n\nThe result from the property that results in less precision is used.\n\nNote that for values other than `auto` the result with more precision is calculated from the [`maximumSignificantDigits`](#minimumsignificantdigits) and [`maximumFractionDigits`](#maximumfractiondigits) (minimum fractional and significant digit settings are ignored).\n\n[`roundingIncrement`](#roundingincrement)\n\nIndicates the increment at which rounding should take place relative to the calculated rounding magnitude. Possible values are `1`, `2`, `5`, `10`, `20`, `25`, `50`, `100`, `200`, `250`, `500`, `1000`, `2000`, `2500`, and `5000`. It cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n[`roundingMode`](#roundingmode)\n\nHow decimals should be rounded. Possible values are:\n\n[`\"ceil\"`](#ceil)\n\nRound toward +∞. Positive values round up. Negative values round \"more positive\".\n\n[`\"floor\"`](#floor)\n\nRound toward -∞. Positive values round down. Negative values round \"more negative\".\n\n[`\"expand\"`](#expand)\n\nround away from 0. The _magnitude_ of the value is always increased by rounding. Positive values round up. Negative values round \"more negative\".\n\n[`\"trunc\"`](#trunc)\n\nRound toward 0. This _magnitude_ of the value is always reduced by rounding. Positive values round down. Negative values round \"less negative\".\n\n[`\"halfCeil\"`](#halfceil)\n\nties toward +∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"ceil\"`.\n\n[`\"halfFloor\"`](#halffloor)\n\nTies toward -∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"floor\"`.\n\n[`\"halfExpand\"`](#halfexpand) (default)\n\nTies away from 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"expand\"`.\n\n[`\"halfTrunc\"`](#halftrunc)\n\nTies toward 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"trunc\"`.\n\n[`\"halfEven\"`](#halfeven)\n\nTies towards the nearest even integer. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment values round towards the nearest even digit.\n\nThese options reflect the [ICU user guide](https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html), where \"expand\" and \"trunc\" map to ICU \"UP\" and \"DOWN\", respectively. The [rounding modes](#rounding_modes) example below demonstrates how each mode works.\n\n[`trailingZeroDisplay`](#trailingzerodisplay)\n\nThe strategy for displaying trailing zeros on whole numbers. Possible values are:\n\n[`\"auto\"`](#auto_2) (default)\n\nKeep trailing zeros according to `minimumFractionDigits` and `minimumSignificantDigits`.\n\n[`\"stripIfInteger\"`](#stripifinteger)\n\nRemove the fraction digits _if_ they are all zero. This is the same as `\"auto\"` if any of the fraction digits is non-zero.\n\n#### Other options\n\n[`notation`](#notation)\n\nThe formatting that should be displayed for the number. Possible values are:\n\n[`\"standard\"`](#standard) (default)\n\nPlain number formatting.\n\n[`\"scientific\"`](#scientific)\n\nReturn the order-of-magnitude for formatted number.\n\n[`\"engineering\"`](#engineering)\n\nReturn the exponent of ten when divisible by three.\n\n[`\"compact\"`](#compact)\n\nString representing exponent; defaults to using the \"short\" form.\n\n[`compactDisplay`](#compactdisplay)\n\nOnly used when `notation` is `\"compact\"`. Possible values are `\"short\"` and `\"long\"`; the default is `\"short\"`.\n\n[`useGrouping`](#usegrouping)\n\nWhether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\n\n[`\"always\"`](#always)\n\nDisplay grouping separators even if the locale prefers otherwise.\n\n[`\"auto\"`](#auto_3)\n\nDisplay grouping separators based on the locale preference, which may also be dependent on the currency.\n\n[`\"min2\"`](#min2)\n\nDisplay grouping separators when there are at least 2 digits in a group.\n\n[`true`](#true)\n\nSame as `\"always\"`.\n\n[`false`](#false)\n\nDisplay no grouping separators.\n\nThe default is `\"min2\"` if `notation` is `\"compact\"`, and `\"auto\"` otherwise. The string values `\"true\"` and `\"false\"` are accepted, but are always converted to the default value.\n\n[`signDisplay`](#signdisplay)\n\nWhen to display the sign for the number. Possible values are:\n\n[`\"auto\"`](#auto_4) (default)\n\nSign display for negative numbers only, including negative zero.\n\n[`\"always\"`](#always_2)\n\nAlways display sign.\n\n[`\"exceptZero\"`](#exceptzero)\n\nSign display for positive and negative numbers, but not zero.\n\n[`\"negative\"`](#negative)\n\nSign display for negative numbers only, excluding negative zero.\n\n[`\"never\"`](#never)\n\nNever display sign.\n\n### [Return value](#return_value)\n\nA new `Intl.NumberFormat` object.\n\n**Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.NumberFormat()` can be called with or without [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.NumberFormat` instance is returned in both cases. However, if the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.NumberFormat` (doesn't necessarily mean it's created via `new Intl.NumberFormat`; just that it has `Intl.NumberFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.NumberFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```\nconst formatter = Intl.NumberFormat.call(\n  { __proto__: Intl.NumberFormat.prototype },\n  \"en-US\",\n  { notation: \"scientific\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: NumberFormat [Intl.NumberFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.NumberFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) and [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange)) would fail with \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainNumberFormat`, does not happen when `Intl.NumberFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.NumberFormat`. If you call it directly as `Intl.NumberFormat()`, the `this` value is [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.NumberFormat` instance is created normally.\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown in one of the following cases:\n\n*   A property that takes enumerated values (such as `style`, `units`, `currency`, and so on) is set to an invalid value.\n*   Both `maximumFractionDigits` and `minimumFractionDigits` are set, and they are set to different values. Note that depending on various formatting options, these properties can have default values. It is therefore possible to get this error even if you only set one of the properties.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if the `options.style` property is set to \"unit\" or \"currency\", and no value has been set for the corresponding property `options.unit` or `options.currency`.\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```\nconst amount = 3500;\n\nconsole.log(new Intl.NumberFormat().format(amount));\n// '3,500' if in US English locale\n```\n\n### [Decimal and percent formatting](#decimal_and_percent_formatting)\n\n```\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n}).format(amount); // '3,500'\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n}).format(amount); // '350,000%'\n```\n\n### [Unit formatting](#unit_formatting)\n\nIf the `style` is `'unit'`, a `unit` property must be provided. Optionally, `unitDisplay` controls the unit formatting.\n\n```\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n}).format(amount); // '3,500 L'\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n  unitDisplay: \"long\",\n}).format(amount); // '3,500 liters'\n```\n\n### [Currency formatting](#currency_formatting)\n\nIf the `style` is `'currency'`, a `currency` property must be provided. Optionally, `currencyDisplay` and `currencySign` control the unit formatting.\n\n```\nconst amount = -3500;\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n}).format(amount); // '-$3,500.00'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencyDisplay: \"name\",\n}).format(amount); // '-3,500.00 US dollars'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n}).format(amount); // '($3,500.00)'\n```\n\n### [Scientific, engineering or compact notations](#scientific_engineering_or_compact_notations)\n\nScientific and compact notation are represented by the `notation` option and can be formatted like this:\n\n```\nnew Intl.NumberFormat(\"en-US\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9.877E8\n\nnew Intl.NumberFormat(\"pt-PT\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9,877E8\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987.654E6\n\nnew Intl.NumberFormat(\"de\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987,654E6\n\nnew Intl.NumberFormat(\"zh-CN\", {\n  notation: \"compact\",\n}).format(987654321);\n// 9.9亿\n\nnew Intl.NumberFormat(\"fr\", {\n  notation: \"compact\",\n  compactDisplay: \"long\",\n}).format(987654321);\n// 988 millions\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"compact\",\n  compactDisplay: \"short\",\n}).format(987654321);\n// 988M\n```\n\n### [Displaying signs](#displaying_signs)\n\nDisplay a sign for positive and negative numbers, but not zero:\n\n```\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  signDisplay: \"exceptZero\",\n}).format(0.55);\n// '+55%'\n```\n\nNote that when the currency sign is \"accounting\", parentheses might be used instead of a minus sign:\n\n```\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n  signDisplay: \"always\",\n}).format(-3500);\n// '($3,500.00)'\n```\n\n### [FractionDigits, SignificantDigits and IntegerDigits](#fractiondigits_significantdigits_and_integerdigits)\n\nYou can specify the minimum or maximum number of fractional, integer or significant digits to display when formatting a number.\n\n**Note:** If both significant and fractional digit limits are specified, then the actual formatting depends on the [`roundingPriority`](#roundingpriority).\n\n#### Using FractionDigits and IntegerDigits\n\nThe integer and fraction digit properties indicate the number of digits to display before and after the decimal point, respectively. If the value to display has fewer integer digits than specified, it will be left-padded with zeros to the expected number. If it has fewer fractional digits, it will be right-padded with zeros. Both cases are shown below:\n\n```\n// Formatting adds zeros to display minimum integers and fractions\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumIntegerDigits: 3,\n    minimumFractionDigits: 4,\n  }).format(4.33),\n);\n// \"004.3300\"\n```\n\nIf a value has more fractional digits than the specified maximum number, it will be rounded. The _way_ that it is rounded depends on the [`roundingMode`](#roundingmode) property (more details are provided in the [rounding modes](#rounding_modes) section). Below the value is rounded from five fractional digits (`4.33145`) to two (`4.33`):\n\n```\n// Display value shortened to maximum number of digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.33\"\n```\n\nThe minimum fractional digits have no effect if the value already has more than 2 fractional digits:\n\n```\n// Minimum fractions have no effect if value is higher precision.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.331\"\n```\n\n**Warning:** Watch out for default values as they may affect formatting even if not specified in your code. The default maximum digit value is `3` for plain values, `2` for currency, and may have different values for other predefined types.\n\nThe formatted value above is rounded to 3 digits, even though we didn't specify the maximum digits! This is because a default value of `maximumFractionDigits` is set when we specify `minimumFractionDigits`, and visa versa. The default values of `maximumFractionDigits` and `minimumFractionDigits` are `3` and `0`, respectively.\n\nYou can use [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 0,\n//   maximumFractionDigits: 2,\n//   …\n// }\n\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 2,\n//   maximumFractionDigits: 3,\n//   …\n// }\n```\n\n#### Using SignificantDigits\n\nThe number of _significant digits_ is the total number of digits including both integer and fractional parts. The `maximumSignificantDigits` is used to indicate the total number of digits from the original value to display.\n\nThe examples below show how this works. Note in particular the last case: only the first digit is retained and the others are discarded/set to zero.\n\n```\n// Display 5 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 5,\n  }).format(54.33145),\n);\n// \"54.331\"\n\n// Max 2 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(54.33145),\n);\n// \"54\"\n\n// Max 1 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 1,\n  }).format(54.33145),\n);\n// \"50\"\n```\n\nThe `minimumSignificantDigits` ensures that at least the specified number of digits are displayed, adding zeros to the end of the value if needed.\n\n```\n// Minimum 10 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumSignificantDigits: 10,\n  }).format(54.33145),\n);\n// \"54.33145000\"\n```\n\n**Warning:** Watch out for default values as they may affect formatting. If only one `SignificantDigits` property is used, then its counterpart will automatically be applied with the default value. The default maximum and minimum significant digit values are 20 and 1, respectively.\n\n#### Specifying significant and fractional digits at the same time\n\nThe fraction digits ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and significant digits ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are both ways of controlling how many fractional and leading digits should be formatted. If both are used at the same time, it is possible for them to conflict.\n\nThese conflicts are resolved using the [`roundingPriority`](#roundingpriority) property. By default, this has a value of `\"auto\"`, which means that if either [`minimumSignificantDigits`](#minimumsignificantdigits) or [`maximumSignificantDigits`](#minimumsignificantdigits) is specified, the fractional and integer digit properties will be ignored.\n\nFor example, the code below formats the value of `4.33145` with `maximumFractionDigits: 3`, and then `maximumSignificantDigits: 2`, and then both. The value with both is the one set with `maximumSignificantDigits`.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n  }).format(4.33145),\n);\n// \"4.331\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\n```\n\nUsing [`resolvedOptions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter, we can see that the returned object does not include `maximumFractionDigits` when `maximumSignificantDigits` or `minimumSignificantDigits` are specified.\n\n```\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 1,\n//   maximumSignificantDigits: 2,\n//   …\n// }\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    minimumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 2,\n//   maximumSignificantDigits: 21,\n//   …\n// }\n```\n\nIn addition to `\"auto\"`, you can resolve conflicts by specifying [`roundingPriority`](#roundingpriority) as `\"morePrecision\"` or `\"lessPrecision\"`. The formatter calculates the precision using the values of `maximumSignificantDigits` and `maximumFractionDigits`.\n\nThe code below shows the format being selected for the three different rounding priorities:\n\n```\nconst maxFracNF = new Intl.NumberFormat(\"en\", {\n  maximumFractionDigits: 3,\n});\nconsole.log(`maximumFractionDigits:3 - ${maxFracNF.format(1.23456)}`);\n// \"maximumFractionDigits:2 - 1.235\"\n\nconst maxSigNS = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n});\nconsole.log(`maximumSignificantDigits:3 - ${maxSigNS.format(1.23456)}`);\n// \"maximumSignificantDigits:3 - 1.23\"\n\nconst bothAuto = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`auto - ${bothAuto.format(1.23456)}`);\n// \"auto - 1.23\"\n\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1.23456)}`);\n// \"lessPrecision - 1.23\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`morePrecision - ${bothMore.format(1.23456)}`);\n// \"morePrecision - 1.235\"\n```\n\nNote that the algorithm can behave in an unintuitive way if a minimum value is specified without a maximum value. The example below formats the value `1` specifying `minimumFractionDigits: 2` (formatting to `1.00`) and `minimumSignificantDigits: 2` (formatting to `1.0`). Since `1.00` has more digits than `1.0`, this should be the result when prioritizing `morePrecision`, but in fact the opposite is true:\n\n```\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1)}`);\n// \"lessPrecision - 1.00\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`morePrecision - ${bothMore.format(1)}`);\n// \"morePrecision - 1.0\"\n```\n\nThe reason for this is that only the \"maximum precision\" values are used for the calculation, and the default value of `maximumSignificantDigits` is much higher than `maximumFractionDigits`.\n\n**Note:** The working group have proposed a modification of the algorithm where the formatter should evaluate the result of using the specified fractional and significant digits independently (taking account of both minimum and maximum values). It will then select the option that displays more fractional digits if `morePrecision` is set, and fewer if `lessPrecision` is set. This will result in more intuitive behavior for this case.\n\n### [Rounding modes](#rounding_modes)\n\nIf a value has more fractional digits than allowed by the constructor options, the formatted value will be _rounded_ to the specified number of fractional digits. The _way_ in which the value is rounded depends on the [`roundingMode`](#roundingmode) property.\n\nNumber formatters use `halfExpand` rounding by default, which rounds values \"away from zero\" at the half-increment (in other words, the _magnitude_ of the value is rounded up).\n\nFor a positive number, if the fractional digits to be removed are closer to the next increment (or on the half way point) then the remaining fractional digits will be rounded up, otherwise they are rounded down. This is shown below: 2.23 rounded to two significant digits is truncated to 2.2 because 2.23 is less than the half increment 2.25, while values of 2.25 and greater are rounded up to 2.3:\n\n```\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.23),\n);\n// \"2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.28),\n);\n// \"2.3\"\n// \"2.3\"\n```\n\nA negative number on or below the half-increment point is also rounded away from zero (becomes more negative):\n\n```\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.23),\n);\n// \"-2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.28),\n);\n// \"-2.3\"\n// \"-2.3\"\n```\n\nThe table below show the effect of different rounding modes for positive and negative values that are on and around the half-increment.\n\n| rounding mode | 2.23 | 2.25 | 2.28 | \\-2.23 | \\-2.25 | \\-2.28 |\n| --- | --- | --- | --- | --- | --- | --- |\n| `ceil` | 2.3 | 2.3 | 2.3 | \\-2.2 | \\-2.2 | \\-2.2 |\n| `floor` | 2.2 | 2.2 | 2.2 | \\-2.3 | \\-2.3 | \\-2.3 |\n| `expand` | 2.3 | 2.3 | 2.3 | \\-2.3 | \\-2.3 | \\-2.3 |\n| `trunc` | 2.2 | 2.2 | 2.2 | \\-2.2 | \\-2.2 | \\-2.2 |\n| `halfCeil` | 2.2 | 2.3 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n| `halfFloor` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.3 | \\-2.3 |\n| `halfExpand` | 2.2 | 2.3 | 2.3 | \\-2.2 | \\-2.3 | \\-2.3 |\n| `halfTrunc` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n| `halfEven` | 2.2 | 2.2 | 2.3 | \\-2.2 | \\-2.2 | \\-2.3 |\n\nWhen using `halfEven`, its behavior also depends on the parity (odd or even) of the last digit of the rounded number. For example, the behavior of `halfEven` in the table above is the same as `halfTrunc`, because the magnitudes of all numbers are between a smaller \"even\" number (2.2) and a larger \"odd\" number (2.3). If the numbers are between ±2.3 and ±2.4, `halfEven` will behave like `halfExpand` instead. This behavior avoids consistently under- or over-estimating half-increments in a large data sample.\n\n### [Using roundingIncrement](#using_roundingincrement)\n\nSometimes we want to round the remaining fractional digits to some other increment than the next integer. For example, currencies for which the smallest coin is 5 cents might want to round the value to increments of 5, reflecting amounts that can actually be paid in cash.\n\nThis kind of rounding can be achieved with the [`roundingIncrement`](#roundingincrement) property.\n\nFor example, if `maximumFractionDigits` is 2 and `roundingIncrement` is 5, then the number is rounded to the nearest 0.05:\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nThis particular pattern is referred to as \"nickel rounding\", where nickel is the colloquial name for a USA 5 cent coin. To round to the nearest 10 cents (\"dime rounding\"), you could change `roundingIncrement` to `10`.\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nYou can also use [`roundingMode`](#roundingmode) to change the rounding algorithm. The example below shows how `halfCeil` rounding can be used to round the value \"less positive\" below the half-rounding increment and \"more positive\" if above or on the half-increment. The incremented digit is \"0.05\" so the half-increment is at .025 (below, this is shown at 11.225).\n\n```\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\nconsole.log(nf.format(11.21)); // \"$11.20\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\nconsole.log(nf.format(11.224)); // \"$11.20\"\nconsole.log(nf.format(11.225)); // \"$11.25\"\nconsole.log(nf.format(11.23)); // \"$11.25\"\n```\n\nIf you need to change the number of digits, remember that `minimumFractionDigits` and `maximumFractionDigits` must both be set to the same value, or a `RangeError` is thrown.\n\n`roundingIncrement` cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-numberformat-constructor](https://tc39.es/ecma402/#sec-intl-numberformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat() constructor - JavaScript | MDN",
  "description": "The Intl.NumberFormat() constructor creates Intl.NumberFormat objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/script",
  "markdown": "# Intl.Locale.prototype.script - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`script`** accessor property of [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instances returns the script used for writing the particular language used in this locale.\n\n## [Description](#description)\n\nScript, sometimes called writing system, is one of the core attributes of a locale. It indicates the set of symbols, or glyphs, that are used to write a particular language. For instance, the script associated with English is Latin, whereas the script typically associated with Korean is Hangul. In many cases, denoting a script is not strictly necessary, since the language (which is necessary) is only written in a single script. There are exceptions to this rule, however, and it is important to indicate the script when multiple scripts are applicable. The `script` property's value is set at construction time, either through the `script` subtag (second part, if present) of the locale identifier or through the `script` option of the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nThe set accessor of `script` is `undefined`. You cannot change this property directly.\n\n## [Examples](#examples)\n\nLike other locale subtags, the script can be added to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object via the locale string, or a configuration object argument to the constructor.\n\n### [Adding a script via the locale string](#adding_a_script_via_the_locale_string)\n\nThe script, if present, is the second part of a valid Unicode language identifier string, and can be added to the initial locale identifier string that is passed into the [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor. Note that the script is not a required part of a locale identifier.\n\n```\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n### [Adding a script via the configuration object argument](#adding_a_script_via_the_configuration_object_argument)\n\nThe [`Intl.Locale()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale) constructor has an optional configuration object argument. Set the `script` property of the configuration object to your desired script, and then pass it into the constructor.\n\n```\nconst locale = new Intl.Locale(\"fr-FR\", { script: \"Latn\" });\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.Locale.prototype.script](https://tc39.es/ecma402/#sec-Intl.Locale.prototype.script) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)\n\n*   [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n*   [Unicode script subtag](https://www.unicode.org/reports/tr35/#unicode_script_subtag_validity) in the Unicode locale data markup language spec",
  "title": "Intl.Locale.prototype.script - JavaScript | MDN",
  "description": "The script accessor property of Intl.Locale instances returns the script used for writing the particular language used in this locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions",
  "markdown": "# Intl.NumberFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) instances returns a new object with properties reflecting the [locale and number formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during initialization of this `Intl.NumberFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nA new object with properties reflecting the [locale and number formatting options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during the construction of the given [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) object.\n\nThe resulting object has the following properties:\n\n[`compactDisplay`](#compactdisplay)\n\nWhether to use short or long form when using compact notation. This is the value provided in the [`options.compactDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#compactdisplay) argument of the constructor, or the default value: `\"short\"`. The value is only present if `notation` is set to \"compact\", and otherwise is `undefined`.\n\n[`currency`](#currency)\n\nThe currency to use in currency formatting. The value is defined if `style` is `\"currency\"`, and is otherwise `undefined`. This is the value provided in the [`options.currency`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currency) argument of the constructor.\n\n[`currencyDisplay`](#currencydisplay)\n\nThe display format for the currency, such as a symbol, or currency code. The value is defined if `style` is `\"currency\"`, and otherwise is `undefined`. This is the value provided in the [`options.currencyDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencydisplay) argument of the constructor, or the default value: `\"symbol\"`.\n\n[`currencySign`](#currencysign)\n\nThe method used to specify the sign of the currency value: `standard` or `accounting`. The value is present if `style` is `\"currency\"`, and otherwise is `undefined`. This is the value provided in the [`options.currencySign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencysign) argument of the constructor, or the default value: `\"standard\"`.\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale that was actually used. Matches one of the locales that were requested in the constructor [`locales`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales).\n\n[`notation`](#notation)\n\nThe formatting that should be applied to the number, such as `standard` or `engineering`. This is the value provided in the [`options.notation`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#notation) argument of the constructor, or the default value: `\"standard\"`.\n\n[`numberingSystem`](#numberingsystem)\n\nThe numbering system. This is the value provided in the [`options.numberingSystem`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#numberingsystem) argument of the constructor, if present, or the value set using the Unicode extension key [`nu`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#nu), or filled in as a default.\n\n[`roundingIncrement`](#roundingincrement)\n\nThe rounding-increment precision (the increment used when rounding numbers). This is the value specified in the [`options.roundingIncrement`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingincrement) argument in the constructor.\n\n[`roundingMode`](#roundingmode)\n\nThe rounding mode. This is the value provided for the [`options.roundingMode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode) argument in the constructor, or the default value: `halfExpand`.\n\n[`roundingPriority`](#roundingpriority)\n\nThe priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified. This is the value provided for the [`options.roundingPriority`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingpriority) argument in the constructor, or the default value: `auto`.\n\n[`signDisplay`](#signdisplay)\n\nWhether or not to display the positive/negative sign. This is the value specified in the [`options.signDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#signdisplay) argument in the constructor, or the default value: `\"auto\"`.\n\n[`unit`](#unit)\n\nThe unit to use in unit formatting. The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`. This is the value specified in the [`options.unit`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unit) argument in the constructor.\n\n[`unitDisplay`](#unitdisplay)\n\nThe display format to use for units in unit formatting, such as \"long\", \"short\" or \"narrow\". The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`. This is the value specified in the [`options.unitDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unitdisplay) argument in the constructor, or the default value: `short`.\n\n[`useGrouping`](#usegrouping)\n\nWhether or not to use grouping separators to indicate \"thousands\", \"millions\" and son on. This is the value specified in the [`options.useGrouping`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#usegrouping) argument in the constructor, or the default value: `\"auto\"`.\n\n[`trailingZeroDisplay`](#trailingzerodisplay)\n\nThe strategy for displaying trailing zeros on whole numbers. This is the value specified in the [`options.trailingZeroDisplay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#trailingzerodisplay) argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n[`minimumIntegerDigits`](#minimumintegerdigits), `minimumFractionDigits`, `maximumFractionDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n\n[`minimumSignificantDigits`](#minimumsignificantdigits), `maximumSignificantDigits`\n\nThe values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if at least one of them was provided in the `options` argument.\n\n## [Examples](#examples)\n\n### [Using the `resolvedOptions` method](#using_the_resolvedoptions_method)\n\n```\n// Create a NumberFormat\nconst de = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.numberingSystem); // \"latn\"\nconsole.log(usedOptions.compactDisplay); // undefined (\"notation\" not set to \"compact\")\nconsole.log(usedOptions.currency); // \"USD\"\nconsole.log(usedOptions.currencyDisplay); // \"symbol\"\nconsole.log(usedOptions.currencySign); // \"standard\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // 2\nconsole.log(usedOptions.maximumFractionDigits); // 2\nconsole.log(usedOptions.minimumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.maximumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.notation); // \"standard\"\nconsole.log(usedOptions.roundingIncrement); // 5\nconsole.log(usedOptions.roundingMode); // halfCeil\nconsole.log(usedOptions.roundingPriority); // auto\nconsole.log(usedOptions.signDisplay); // \"auto\"\nconsole.log(usedOptions.style); // \"currency\"\nconsole.log(usedOptions.trailingZeroDisplay); // auto\nconsole.log(usedOptions.useGrouping); // auto\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl.numberformat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-intl.numberformat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.NumberFormat.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.NumberFormat instances returns a new object with properties reflecting the locale and number formatting options computed during initialization of this Intl.NumberFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf",
  "markdown": "# Intl.ListFormat.supportedLocalesOf() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.ListFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## [Syntax](#syntax)\n\n```\nIntl.ListFormat.supportedLocalesOf(locales)\nIntl.ListFormat.supportedLocalesOf(locales, options)\n```\n\n### [Parameters](#parameters)\n\n[`locales`](#locales)\n\nA string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object that may have the following property:\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation) page.\n\n### [Return value](#return_value)\n\nAn array of strings representing a subset of the given locale tags that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## [Examples](#examples)\n\n### [Using supportedLocalesOf()](#using_supportedlocalesof)\n\nAssuming a runtime that supports Indonesian and German but not Balinese in list formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to list formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.ListFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.supportedLocalesOf](https://tc39.es/ecma402/#sec-Intl.ListFormat.supportedLocalesOf) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.ListFormat.supportedLocalesOf() - JavaScript | MDN",
  "description": "The Intl.ListFormat.supportedLocalesOf() static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat",
  "markdown": "# Intl.ListFormat() constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl.ListFormat()`** constructor creates [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) objects.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew Intl.ListFormat()\nnew Intl.ListFormat(locales)\nnew Intl.ListFormat(locales, options)\n```\n\n**Note:** `Intl.ListFormat()` can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`locales`](#locales) Optional\n\nA string with a BCP 47 language tag or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n[`options`](#options) Optional\n\nAn object containing the following properties, in the order they are retrieved (all of them are optional):\n\n[`localeMatcher`](#localematcher)\n\nThe locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n\n[`type`](#type)\n\nIndicates the type of grouping. Possible values are:\n\n[`\"conjunction\"`](#conjunction) (default)\n\nFor \"and\"-based grouping of the list items: \"A, B, and C\"\n\n[`\"disjunction\"`](#disjunction)\n\nFor \"or\"-based grouping of the list items: \"A, B, or C\"\n\n[`\"unit\"`](#unit)\n\nFor grouping the list items as a unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"\n\n[`style`](#style)\n\nThe grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n\n[`\"long\"`](#long) (default)\n\nE.g. \"A, B, and C\"\n\n[`\"short\"`](#short)\n\nE.g. \"A, B, C\"\n\n[`\"narrow\"`](#narrow)\n\nE.g. \"A B C\"\n\n### [Exceptions](#exceptions)\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown if `locales` or `options` contain invalid values.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nThe following example shows how to create a List formatter using the English language.\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-GB\", { style: \"long\" }).format(list));\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"long\" }).format(list));\n// Motorcycle, Bus, and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, & Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format(list));\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"long\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, and 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\", type: \"unit\" }).format([\n    \"30°\",\n    \"15′\",\n    \"50″\",\n  ]),\n);\n// 30° 15′ 50″\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-intl-listformat-constructor](https://tc39.es/ecma402/#sec-intl-listformat-constructor) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.ListFormat() constructor - JavaScript | MDN",
  "description": "The Intl.ListFormat() constructor creates Intl.ListFormat objects.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format",
  "markdown": "# Intl.ListFormat.prototype.format() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`format()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns a string with a language-specific representation of the list.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`list`](#list)\n\nAn iterable object, such as an Array.\n\n### [Return value](#return_value)\n\nA language-specific formatted string representing the elements of the list.\n\n**Note:** Most of the time, the formatting returned by `format()` is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of `format()` to hardcoded constants.\n\n## [Description](#description)\n\nThe **`format()`** method returns a string that has been formatted based on parameters provided in the `Intl.ListFormat` object. The `locales` and `options` parameters customize the behavior of `format()` and let applications specify the language conventions that should be used to format the list.\n\n## [Examples](#examples)\n\n### [Using format](#using_format)\n\nThe following example shows how to create a List formatter using the English language.\n\n```\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.format](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.format) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.ListFormat.prototype.format() - JavaScript | MDN",
  "description": "The format() method of Intl.ListFormat instances returns a string with a\n  language-specific representation of the list.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts",
  "markdown": "# Intl.ListFormat.prototype.formatToParts() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`formatToParts()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`list`](#list)\n\nAn iterable object, such as an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), to be formatted according to a locale.\n\n### [Return value](#return_value)\n\nAn [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of components which contains the formatted parts from the list.\n\n## [Description](#description)\n\nWhereas [`Intl.ListFormat.prototype.format()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format) returns a string being the formatted version of the list (according to the given locale and style options), `formatToParts()` returns an array of the different components of the formatted string.\n\nEach element of the resulting array has two properties: `type` and `value`. The `type` property may be either `\"element\"`, which refers to a value from the list, or `\"literal\"` which refers to a linguistic construct. The `value` property gives the content, as a string, of the token.\n\nThe locale and style options used for formatting are given when constructing the [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instance.\n\n## [Examples](#examples)\n\n### [Using formatToParts](#using_formattoparts)\n\n```\nconst fruits = [\"Apple\", \"Orange\", \"Pineapple\"];\nconst myListFormat = new Intl.ListFormat(\"en-GB\", {\n  style: \"long\",\n  type: \"conjunction\",\n});\n\nconsole.table(myListFormat.formatToParts(fruits));\n// [\n//  { \"type\": \"element\", \"value\": \"Apple\" },\n//  { \"type\": \"literal\", \"value\": \", \" },\n//  { \"type\": \"element\", \"value\": \"Orange\" },\n//  { \"type\": \"literal\", \"value\": \", and \" },\n//  { \"type\": \"element\", \"value\": \"Pineapple\" }\n// ]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.formatToParts](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.formatToParts) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.ListFormat.prototype.formatToParts() - JavaScript | MDN",
  "description": "The formatToParts() method of Intl.ListFormat instances\n  returns an Array of objects representing the different components that\n  can be used to format a list of values in a locale-aware fashion.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/resolvedOptions",
  "markdown": "# Intl.ListFormat.prototype.resolvedOptions() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`resolvedOptions()`** method of [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) instances returns a new object with properties reflecting the locale and style formatting options computed during the construction of this `Intl.ListFormat` object.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\nNone.\n\n### [Return value](#return_value)\n\nAn object with properties reflecting the locale and formatting options computed during the construction of the given [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object.\n\n## [Description](#description)\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n[`locale`](#locale)\n\nThe BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n\n[`style`](#style)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"long\"`). Its value is either `\"long\"`, `\"short\"`, or `\"narrow\"`.\n\n[`type`](#type)\n\nThe value provided for this property in the `options` argument of the constructor or the default value (`\"conjunction\"`). Its value is either `\"conjunction\"`, `\"disjunction\"`, or `\"unit\"`.\n\n## [Examples](#examples)\n\n### [Using resolvedOptions](#using_resolvedoptions)\n\n```\nconst deListFormatter = new Intl.ListFormat(\"de-DE\", { style: \"short\" });\n\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"short\"\nconsole.log(usedOptions.type); // \"conjunction\" (the default value)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-Intl.ListFormat.prototype.resolvedoptions](https://tc39.es/ecma402/#sec-Intl.ListFormat.prototype.resolvedoptions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Intl.ListFormat.prototype.resolvedOptions() - JavaScript | MDN",
  "description": "The resolvedOptions() method of Intl.ListFormat instances\n  returns a new object with properties reflecting the locale and style formatting\n  options computed during the construction of this Intl.ListFormat object.",
  "languageCode": "en-US"
},
{
  "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing",
  "markdown": "# Segments.prototype.containing() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`containing()`** method of [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances returns an object describing the segment in the string that includes the code unit at the specified index.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncontaining(codeUnitIndex)\n```\n\n### [Parameters](#parameters)\n\n[`codeUnitIndex`](#codeunitindex) Optional\n\nA number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to `0`.\n\n### [Return value](#return_value)\n\nAn object describing the segment of the original string with the following properties, or `undefined` if the supplied index value is out of bounds.\n\n[`segment`](#segment)\n\nA string containing the segment extracted from the original input string.\n\n[`index`](#index)\n\nThe code unit index in the original input string at which the segment begins.\n\n[`input`](#input)\n\nThe complete input string that was segmented.\n\n[`isWordLike`](#iswordlike)\n\nA boolean value only if `granularity` is `\"word\"`; otherwise, `undefined`. If `granularity` is `\"word\"`, then `isWordLike` is `true` when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, `false`.\n\n## [Examples](#examples)\n\n```\n// ┃0 1 2 3 4 5┃6┃7┃8┃9  ← code unit index\n// ┃A l l o n s┃-┃y┃!┃   ← code unit\nconst input = \"Allons-y!\";\n\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst segments = segmenter.segment(input);\n\nlet current = segments.containing();\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(4);\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(6);\n// { index: 6, segment: \"-\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 7, segment: \"y\", isWordLike: true }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 8, segment: \"!\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// undefined\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# sec-%segmentsprototype%.containing](https://tc39.es/ecma402/#sec-%segmentsprototype%.containing) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
  "title": "Segments.prototype.containing() - JavaScript | MDN",
  "description": "The containing() method of Segments instances returns an object describing the segment in the string that includes the code unit at the specified index.",
  "languageCode": "en-US"
}]