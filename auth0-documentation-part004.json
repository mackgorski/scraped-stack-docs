[
  {
    "url": "https://auth0.com/docs/customize/email/smtp-email-providers/configure-azure-comm-service-as-smtp-email-provider",
    "markdown": "# Configure Azure Communication Services as External SMTP Email Provider\n\n#### Before you start\n\n*   Configure your tenant to send emails from Auth0 to your SMTP provider.\n    \n\n1.  Open ports and allow inbound traffic from your Auth0 to Azure Communications Services.\n    \n2.  Navigate to [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n3.  Update the list of IPs. To learn more, read [Auth0 IP Addresses for Allow Lists](https://auth0.com/docs/secure/security-guidance/data-security/allowlist)\n    \n\n*   Create a [Microsoft Azure](https://azure.microsoft.com/) account with an active subscription.\n    \n\nAuth0 allows you to configure your own SMTP email provider so you can more completely manage, monitor, and troubleshoot your email communications. Auth0's built-in email infrastructure should be used for testing emails only.\n\n## Configure Azure Communication Services\n\n1.  Log in to your [Microsoft Azure](https://azure.microsoft.com/) account.\n    \n2.  Create a [Communication Services](https://learn.microsoft.com/en-us/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp#create-azure-communication-services-resource) resource if you do not have one.\n    \n3.  Enter \"Communication Services\" in the search bar.\n    \n4.  Select **Create**.\n    \n5.  Under the **Tools** settings, select **Keys**. Retrieve your Communication Services [Connection String](https://learn.microsoft.com/en-us/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp#create-azure-communication-services-resource).\n    \n6.  Under **Primary Key**, copy the **Connection string** value.\n    \n    1.  A valid connection string follows the format `endpoint={commuication services url};accesskey={access key}`.\n        \n7.  With the Connection string value, navigate to Auth0 [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n8.  Select the **Use my own email provider**.\n    \n9.  Select **Azure Communication Services**.\n    \n10.  Complete the configuration:\n    \n    1.  Enter a **From** email address\n        \n    2.  Add the Azure Communication Services **Connection string**.\n        \n        ![](https://images.ctfassets.net/cdy7uua7fh8z/16RcDk5NxOlKJBGutQ3n2l/52c7e2f7edc00d04d381af3f86d8e713/2023-04-18_17-00-39.png)\n    3.  Select **Save**.\n        \n\n## Send a test email\n\nSend a test email using the **Send Test Email** button. If you have configured everything correctly, you will receive a confirmation email.\n\nIf you do not receive an email after a few minutes, please check your [Auth0 logs](https://manage.auth0.com/#/logs) for error codes. The Communication Services [Metrics Monitor](https://learn.microsoft.com/en-us/azure/communication-services/concepts/metrics#chat-api-request-metric-operations) page will now display delivery insights for all emails that have been sent to your users.",
    "title": "Configure Azure Communication Services as External SMTP Email Provider",
    "description": "Describes how to configure Azure Communication Services as an email provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/email/smtp-email-providers/configure-sendgrid-as-external-smtp-email-provider",
    "markdown": "# Configure SendGrid as External SMTP Email Provider\n\nAuth0 allows you to configure your own SMTP email provider so you can more completely manage, monitor, and troubleshoot your email communications. Auth0's built-in email infrastructure should be used for testing emails only.\n\n## Prerequisites\n\n*   To ensure that emails can be sent from Auth0 to your SMTP, open ports and allow inbound connections from specific IP addresses. To update the list of IPs, navigate to [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider). See [Add IP Addresses to AllowList](https://auth0.com/docs/secure/security-guidance/data-security/allowlist) for details.\n    \n*   You must have a [SendGrid](https://sendgrid.com/) account. If you have a Microsoft Azure subscription, you can get a free account in the Azure Marketplace.\n    \n\n## Configure SendGrid\n\n1.  Log in to your [SendGrid](https://sendgrid.com/) account.\n    \n2.  Navigate to SendGrid **Settings > API Keys**, and click **Create API Key**.\n    \n3.  Type a name for your key and select **Restricted Access**.\n    \n4.  Under **Access Details**, click to expand **Mail Send**.\n    \n5.  Set the **Mail Send** permission to **Full Access**.\n    \n6.  Click **Save** and copy the key value.\n    \n7.  Navigate to Auth0 [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n8.  Activate the **Use my own email provider** toggle.\n    \n9.  Click the **SendGrid** logo.\n    \n10.  Type a **From** email address, paste the SendGrid **API Key** you copied, and click **Save**.\n    \n\n![Dashboard - Branding - Email Provider - SendGrid Settings](https://images.ctfassets.net/cdy7uua7fh8z/6anIzrpxKwsExQp4COpiT8/2ac488b1bdc726798579788ea2303841/dashboard-email-providers_settings_sendgrid.png)\n\n**Note:** If you are using [passwordless authentication with email](https://auth0.com/docs/authenticate/passwordless#email), ensure that the **From** email address value for your passwordless connection matches the **From** email address value you're using for SendGrid.\n\n## Test email\n\nYou can now send a test email using the **Send Test Email** button. If you have configured everything correctly, you will receive a confirmation email. If you do not receive an email after a few minutes, please check your [Auth0 logs](https://manage.auth0.com/#/logs) for any failures.\n\nThe SendGrid [Email Activity](https://sendgrid.com/logs/index) page will now display delivery insights for all emails that have been sent to your users.",
    "title": "Configure SendGrid as External SMTP Email Provider",
    "description": "Describes how to configure SendGrid as an external SMTP email provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/email/smtp-email-providers/configure-sparkpost-as-external-smtp-email-provider",
    "markdown": "# Configure SparkPost as External SMTP Email Provider\n\nAuth0 allows you to configure your own SMTP email provider so you can more completely manage, monitor, and troubleshoot your email communications. Auth0's built-in email infrastructure should be used for testing emails only.\n\n## Prerequisites\n\n*   To ensure that emails can be sent from Auth0 to your SMTP, open ports and allow inbound connections from specific IP addresses. To update the list of IPs, navigate to [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider). See [Add IP Addresses to AllowList](https://auth0.com/docs/secure/security-guidance/data-security/allowlist) for details.\n    \n*   You must have a [](https://www.mandrill.com/signup/)[](https://mailgun.com/)[SparkPost](https://www.sparkpost.com/) account.\n    \n\n## Configure SparkPost\n\n1.  Log in to your [SparkPost](https://www.sparkpost.com/) account.\n    \n2.  Navigate to SparkPost [Sending Domains](https://app.sparkpost.com/account/sending-domains), and add your custom domain. SparkPost allows sending emails from only verified domains.\n    \n3.  Navigate to SparkPost [Account API Keys](https://app.sparkpost.com/account/credentials), and click **New API key**. Save this key value and ensure it has `Transmissions: Read/Write` access. Copy this key value.\n    \n4.  Navigate to Auth0 [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n5.  Activate the **Use my own email provider** toggle.\n    \n6.  Click the **SparkPost** logo.\n    \n7.  Provide a **From** email address, enter the SparkPost **API Key** you previously copied, select your **Region**. If you are changing to the EU region in an account that was already configured for the US region, you must replace the **API Key** in Auth0 with a Sparkpost EU API Key.\n    \n    ![Emails Configure SparkPost SMTP Email Provider Values Screen](https://images.ctfassets.net/cdy7uua7fh8z/6ZLmp0ZUeSBVhphofziBC2/30e5ccc960fbcabbc2e3feba95f50425/dashboard-email-providers_select-provider.png)\n8.  Click **Save**.\n    \n\n## Test email\n\nYou can now send a test email using the **Send Test Email** button. If you have configured everything correctly, you will receive a confirmation email. If you do not receive an email after a few minutes, please check your [Auth0 logs](https://manage.auth0.com/#/logs) for any failures.\n\nIf you haven't registered a custom domain with SparkPost, you can send a maximum of five test emails from the `sparkpostbox.com` domain. For more details, see SparkPost's [Transmissions: The Sandox Domain](https://developers.sparkpost.com/api/transmissions.html#header-the-sandbox-domain).\n\nThe SparkPost [Message Events](https://app.sparkpost.com/reports/message-events) page will now display delivery insights for all emails that have been sent to your users.",
    "title": "Configure SparkPost as External SMTP Email Provider",
    "description": "Describes how to configure SparkPost as an external SMTP email provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/email/smtp-email-providers/configure-mailgun-as-external-smtp-email-provider",
    "markdown": "# Configure Mailgun as External SMTP Email Provider\n\nAuth0 allows you to configure your own SMTP email provider so you can more completely manage, monitor, and troubleshoot your email communications. Auth0's built-in email infrastructure should be used for testing emails only.\n\n## Prerequisites\n\n*   To ensure that emails can be sent from Auth0 to your SMTP, open ports and allow inbound connections from specific IP addresses. To update the list of IPs, navigate to [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider). See [Add IP Addresses to AllowList](https://auth0.com/docs/secure/security-guidance/data-security/allowlist) for details.\n    \n*   You must have a [](https://www.mandrill.com/signup/)[Mailgun](https://mailgun.com/) account.\n    \n\n## Configure Mailgun\n\n1.  Log in to your [Mailgun](https://mailgun.com/).\n    \n2.  Navigate to Mailgun **Sending > Domains**, and add your custom domain. Mailgun allows sending emails from only verified domains.\n    \n3.  Navigate to Mailgun **Settings > API Keys**. Your API key was created when you signed up for your account; copy it from **Private API Key**.\n    \n4.  Navigate to Auth0 [Dashboard > Branding > Email Provider](https://manage.auth0.com/#/branding/email_provider).\n    \n5.  Activate the **Use my own email provider** toggle.\n    \n6.  Click the **Mailgun** logo.\n    \n7.  Provide a **From** email address, enter the **Domain** you previously added to Mailgun, enter the Mailgun **API Key** you previously copied, select your **Region**.\n    \n    ![Emails Configure Mailgun External SMTP Email Provider Values Screen](https://images.ctfassets.net/cdy7uua7fh8z/7J5mFiePY4dnBDfRm3YN5O/1b8243430a7e1fd27bbf40907f4bb647/dashboard-email-providers_select-provider.png)\n8.  Click **Save**.\n    \n\n## Test email\n\nYou can now send a test email using the **Send Test Email** button. If you have configured everything correctly, you will receive a confirmation email. If you do not receive an email after a few minutes, please check your [Auth0 logs](https://manage.auth0.com/#/logs) for any failures.\n\nThe [Mailgun Dashboard](https://app.mailgun.com/app/dashboard) will now display delivery insights for all emails that have been sent to your users.",
    "title": "Configure Mailgun as External SMTP Email Provider",
    "description": "Describes how to configure Mailgun as an external SMTP email provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-client-certificates",
    "markdown": "# Configure AD/LDAP Connector Authentication with Client Certificates\n\nThe AD/LDAP Connector also allows users to authenticate with a certificate installed on their machine or device.\n\n## Enable client certificates\n\n1.  Go to [Auth0 Dashboard > Authentication > Enterprise > Active Directory/LDAP](https://manage.auth0.com/#/connections/enterprise/ad), and select the connection you want to configure.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP - SSL](https://images.ctfassets.net/cdy7uua7fh8z/4lDEw3pd8TcCCKPyMz9eT3/039445bd6f221a6fb98082cd5dc2582e/Dashboard_-_Connections_-_Enterprise_-_AD_LDAP.png)\n2.  Toggle the **Use client SSL certificate authentication** option in the settings.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP - SSL](https://images.ctfassets.net/cdy7uua7fh8z/34RZpgx0kQfCCBjibk44qK/f05360185579b46056b94069e9822643/Dashboard_-_Connections_-_Enterprise_-_AD_LDAP_-_SSL.png)\n3.  Provide IP address ranges in the **IP Ranges** field. Only users coming from the given IP ranges are prompted to authenticate using client certificates. Users from different IP ranges are prompted to login with the username and password login form.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP -  SSL Settings](https://images.ctfassets.net/cdy7uua7fh8z/1NHuMcSPpRFqRxRBXMjzdc/a262f08ce7d02d5f6bb5c3c2496ee841/Dashboard_-_Connections_-_Enterprise_-_AD_LDAP_-__SSL_Settings.png)\n\n## Configure certificates\n\nOnce the AD/LDAP connection has been configured in Auth0, you'll need to configure the certificates in the AD/LDAP Connector. Supporting client certificates will require the following:\n\n*   An SSL certificate for the Front Facing URL, because the interaction between the end user and the Connector will need to happen over HTTPS.\n    \n*   One or more CA certificates.\n    \n*   A Client Certificate signed by the CA for each user that needs to authenticate using Client Certificates.\n    \n\n1.  Before uploading certificates to the AD/LDAP connector, convert X.509 certificates to Base64. Use Base64 or Certutil on Windows Server. To learn more, see [Base64 Decode](https://www.base64decode.org/) at Base64decode or [Certutil.exe](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil#BKMK_encode) in Microsoft documentation.\n    \n2.  Upload the SSL and CA certificates to the AD/LDAP Connector:\n    \n    ![Configure AD/LDAP Connector Authentication with Client Certificates Setup Screen](https://images.ctfassets.net/cdy7uua7fh8z/2zRux90ZHATIBFWyHlodue/c426e5a475ff528a467db6409980de12/connector-client-cert-config.png)\n3.  To test, generate a self-signed CA and Client Certificates using **makecert.exe** on Windows, which is part of the Windows SDK:\n    \n    ```\n    SET ClientCertificateName=jon\n        SET RootCertificateName=FabrikamRootCA\n        \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\makecert.exe\" -sky exchange -r -n \"CN=%RootCertificateName%\" -pe -a sha1 -len 2048 -ss My \"%RootCertificateName%.cer\"\n        \"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\makecert.exe\" -n \"CN=%ClientCertificateName%\" -pe -sky exchange -m 96 -ss My -in \"%RootCertificateName%\" -is my -a sha1\n    ```\n    \n    It is important that the Client Certificate's subject be in the format of `CN=AD_USERNAME`, for example `CN=jon`.\n\nIn an application, when a user starts the sign-in flow using an AD/LDAP Connection:\n\n```\nauth.signin({\n       popup: true,\n       connection: 'FabrikamAD',\n       scope: 'openid name email'\n     }, onLoginSuccess, onLoginFailed);\n```\n\nIf the user's IP address falls within the configured IP range, they'll be prompted to authenticate with a Client Certificate:\n\n![Configure AD/LDAP Connector Authentication with Client Certificates Choose Client Certificate](https://images.ctfassets.net/cdy7uua7fh8z/1loz5lrd2NkHs2gKgbIJKF/11a373d520eaae08c20055cb68613972/connector-client-cert-choose.png)\n\nAfter choosing the certificate the AD/LDAP Connector will validate it and the user will be logged in:\n\n![Configure AD/LDAP Connector Authentication with Client Certificates Logged In User](https://images.ctfassets.net/cdy7uua7fh8z/2Lr78NWYfzD3Hw3JIDPQmb/3790acd68fa283ca79c1263f97fa29c4/connector-client-cert-loggedin.png)",
    "title": "Configure AD/LDAP Connector Authentication with Client Certificates",
    "description": "Describes how to setup authentication using client certificates.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability",
    "markdown": "# Deploy AD/LDAP Connectors for High Availability Environments\n\nYou can deploy multiple instances of the AD/LDAP Connector to provide a high-availability environment for your AD/LDAP connection.\n\n## Overview\n\nTo deploy multiple instances of the AD/LDAP Connector, you'll need to:\n\n1.  Install the AD/LDAP Connector on the primary server.\n    \n2.  Copy or export the configuration files of the initial installation.\n    \n3.  Install the AD/LDAP Connector on additional servers.\n    \n4.  Import the configuration files from the initial installation to the additional connectors.\n    \n\n## Configure primary server\n\n1.  Install and configure the AD/LDAP Connector on the first server.\n    \n2.  Open the troubleshooting screen ([http://localhost:8357/#troubleshoot](http://localhost:8357/#troubleshoot)) and run the troubleshooting test. Make sure all tests pass.\n    \n    | Test | Description | Troubleshoot |\n    | --- | --- | --- |\n    | Test 1 | Attempts to establish a TCP connection to the LDAP server and port specified. | Check basic network connectivity and firewall settings that might prevent such a connection. |\n    | Test 2 | Attempts to perform an LDAP bind on the LDAP server and port specified and with the username and password provided. | Check the LDAP connection string, search path, username and password. |\n    | Test 3 | Attempts to perform an LDAP search against the directory to check the privileges of the specified username. | Check the privileges of the username in the target directory. |\n    | Test 4 | Attempts to establish a connection to the Auth0 server. | Check network connectivity and firewall settings that might prevent such a connection. |\n    \n3.  Copy or export the configuration files.\n    \n\n## Configure additional server(s)\n\n1.  Install the AD/LDAP Connector on the additional server(s), but do not configure it.\n    \n2.  Import the configuration files from the primary server.\n    \n3.  Restart the Auth0 AD/LDAP and Auth0 AD/LDAP Admin Windows Services on the new server(s).\n    \n4.  Open the troubleshooting screen ([http://localhost:8357/#troubleshoot](http://localhost:8357/#troubleshoot)) and run the troubleshooting test. Make sure all tests pass.\n    \n\nTo learn more, read [Install and Configure the AD/LDAP Connector](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/install-configure-ad-ldap-connector) and [Import and Export AD/LDAP Connector Configurations](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/import-export-ad-ldap-connector-configs).\n\n## Verify connections\n\nIn the Auth0 Dashboard, go to the [Authentication > Enterprise > Active Directory / LDAP](https://manage.auth0.com/#/connections/enterprise/ad), and confirm that the connection is active.\n\nIf you are encountering issues getting your connection online, read [Troubleshoot AD/LDAP Connector](https://auth0.com/docs/troubleshoot/integration-extensibility-issues/troubleshoot-ad-ldap-connector).\n\n## Using Kerberos or client certificates\n\nIf you enable Kerberos or client certificates for authentication on your AD/LDAP connection, users contact the AD/LDAP Connector directly instead of going through the Auth0 server.\n\nIf you are using a high-availability configuration with multiple connectors, Auth0 recommends that you front them with a network load balancer:\n\n1.  Use the `SERVER_URL` parameter to publish the public location where the AD/LDAP Connector will be listening to incoming requests.\n    \n2.  Map the `SERVER_URL` in the network load balancer to all internal instances of the deployed AD/LDAP Connectors. A special distribution policy is not required (for example, uniform round-robin with no sticky sessions works).\n    \n\nTo learn more, read [Configure AD/LDAP Connector Authentication with Kerberos](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-with-kerberos) or [Configure AD/LDAP Connector Authentication with Client Certificates](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-client-certificates).\n\n## Learn more\n\n*   [Install and Configure AD/LDAP Connector](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/install-configure-ad-ldap-connector)\n*   [Import and Export AD/LDAP Connector Configurations](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/import-export-ad-ldap-connector-configs)\n*   [Configure AD/LDAP Connector Authentication with Client Certificates](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-client-certificates)\n*   [Configure AD/LDAP Connector Authentication with Kerberos](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-with-kerberos)\n*   [Point AD/LDAP Connector to Auth0 Connections](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-to-auth0)\n*   [Update AD/LDAP Connectors](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/update-ad-ldap-connectors)",
    "title": "Deploy AD/LDAP Connectors for High Availability Environments",
    "description": "Describes how to install multiple instances of the connector for higher availability.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-to-auth0",
    "markdown": "# Point AD/LDAP Connector to Auth0 Connections\n\nYou may need to point your AD/LDAP Connector instance to a new connection in Auth0, for example, If you have migrated to a new Auth0 tenant, or if you changed the name of the Auth0 connection. Because you can't rename connections in Auth0, you must create a new AD/ LDAP connection and point your existing Connector instances to it.\n\n1.  Create the new AD/LDAP connection in the Auth0 dashboard and copy the resulting **TICKET URL**. If you are using the custom domains, you will need to replace the `{yourDomain}` part of the **TICKET URL** with your custom domain, such as `identity.fabrikam.com`.\n    \n2.  On the AD/LDAP Connector host in the Connector Admin app, perform an export of the existing settings via the **Import / Export** tab. This is just a precaution in case something were to happen in the following steps that would accidentally overwrite your custom settings. If you are running the Connector on a host that does not have a web browser to access to the Connector Admin website, simply make a copy of your `config.json` file.\n    \n3.  On the AD/LDAP Connector host, edit the `config.json` file and change the value of the `PROVISIONING_TICKET` property to the **TICKET URL** you copied in Step 1.\n    \n4.  If you moved from one Auth0 tenant to another, remove the property in the `config.json` file that has the name `urn:auth0:{oldAuth0TenantName}`. If this is not removed, the Connector will still function but this old configuration data is not needed.\n    \n5.  Restart the AD/LDAP Connector service (the **Auth0 ADLDAP** service in Windows).\n    \n6.  Take a look at the Connector logs (**Troubleshooting** tab in the Connector Admin tool or tail the `logs.log` file) and make sure there is a recent entry that looks something like: `2016-03-10T22:47:32.970Z - debug: [2016-03-10 22:47:32] Loading settings from ticket: {yourTicketUrl}/info`\n    \n7.  Make sure the new AD/LDAP connection in the Auth0 dashboard is now showing as connected (the dot to the left of the new connection is green and not red).\n    \n8.  Perform a test authentication through your new connection and make sure you see activity in your Connector logs as well.\n    \n\n## Learn more\n\n*   [Troubleshoot AD/LDAP Connector](https://auth0.com/docs/troubleshoot/integration-extensibility-issues/troubleshoot-ad-ldap-connector)",
    "title": "Point AD/LDAP Connector to Auth0 Connections",
    "description": "Describes how to point AD/LDAP Connector instances to a new connections in Auth0. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-with-kerberos",
    "markdown": "# Configure AD/LDAP Connector Authentication with Kerberos\n\nYou can federate with Active Directory through the AD/LDAP Connector. The AD/LDAP Connector enables your users to authenticate when they are on a domain-joined machine within the corporate network.\n\n## Configure Active Directory\n\n1.  Go to [Auth0 Dashboard > Authentication > Enterprise > Active Directory/LDAP](https://manage.auth0.com/#/connections/enterprise/ad), and select the connection you want to configure.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP - Configure Kerberos](https://images.ctfassets.net/cdy7uua7fh8z/23xp9ItKBX6DVkfKzRr6m2/72bb0c1abb3b2e9038f94c78cb8b66fd/Dashboard_-_Connections_-_Enterprise_-_AD_LDAP.png)\n2.  Enable the **Use Windows Integrated Auth (Kerberos)** switch.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP - Kerberos Switch](https://images.ctfassets.net/cdy7uua7fh8z/7uXuztjn96TQ2BU2rGezQ3/f6e27abbd51b33866a0c1498d0ccaae8/Dashboard_-_Authentication_-_Enterprise_-_ADLDAP_-_Kerberos_Switch.png)\n\n### Auto-detected range for Kerberos\n\nWhen Kerberos authentication is enabled, the visible IP address of the server where the AD Connector is running is implicitly added to the network IP range. This means that if a user's requests originate from the same visible IP address as that of the AD Connector, then Kerberos authentication will be attempted.\n\n1.  Configure the **IP Ranges**. Use [CIDR-notation](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). These should be ranges that are visible by Auth0. When Auth0 is running in the cloud, it won't be able to see your user's internal IP address. In that case you'd configure the public facing/WAN IP address(es) of your company.\n    \n    ![Dashboard - Connections - Enterprise - AD/LDAP - Kerberos Settings](https://images.ctfassets.net/cdy7uua7fh8z/14nhVrsvmiencYIyI2sJfy/558a86c25dd8ce7e08efd84d40134b29/Dashboard_-_Authentication_-_Enterprise_-_ADLDAP_-_Kerberos_-_IP.png)\n2.  We recommend restarting the Windows Service that hosts the AD Connector every time this setting is changed. This way, changes will take effect immediately.\n    \n\n## Authentication flow\n\nDepending on the users' location, the authentication flow will be different when IP ranges are set. Using Fabrikam as an example, since it uses the SaaS version of Auth0, they configured their Public IP Address (`24.12.34.56/32`) in the connection. Users connecting from within the building will all originate from `24.12.34.56` (as configured on the connection). When they authenticate, the users can follow the AD/LDAP native flow and have a seamless SSO experience.\n\nFor this to work, the network must allow the users to connect to the AD/LDAP Connector on the port configured in the `config.json` file. In [](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability)highly available deployments of the Connector, the address users will be connecting to is the network load balancer in front of all connectors instances.\n\n![Configure AD/LDAP Connector Authentication with Kerberos Flow Diagram](https://images.ctfassets.net/cdy7uua7fh8z/1EUZhFx2w5FjDeIoMySERC/fc50869b131faf3257cfe429c96f68d1/2023-09-22_14-28-30.png)\n\nTo learn more, read [Deploy AD/LDAP Connectors for High Availability Environments.](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability)\n\nOn the other hand, when users are not in the corporate network (for example, at a customer site, working from home without VPN) they won't be able to access the AD/LDAP Connector directly. The users will need to enter their username/password, and Auth0 will validate these credentials with the AD/LDAP Connector (which will in turn use Active Directory to validate those credentials).\n\n![Configure AD/LDAP Connector Authentication with Kerberos Credentials Flow Diagram](https://images.ctfassets.net/cdy7uua7fh8z/7xo1cIdF6GmSowlVB8kjQn/4b55f555977742af3f3df94c5b3a0a9b/2023-09-22_14-29-00.png)\n\n## Auto-login with Lock\n\nWhen an application is using Lock 10 or 11 within the Login Page hosted by Auth0 (typically used for SAML/WS-Federation protocols and Single Sign-on (SSO) Integrations), there will be a button which allows users to authenticate using \"Windows Authentication\".\n\nIn some cases the requirement could be to automatically sign in the user if Kerberos is possible (based on the IP-address of the end user). The following changes can be added to the Auth0 Login Page to automatically sign in the user if Kerberos is possible:\n\n```\n<script src=\"https://cdn.auth0.com/js/lock/11.x.x/lock.min.js\"></script>\n<script src=\"https://cdn.auth0.com/js/auth0/9.x/auth0.min.js\"></script>\n<script src=\"https://cdn.auth0.com/js/polyfills/1.0/object-assign.min.js\"></script>\n\n<script>\n  var config = JSON.parse(decodeURIComponent(escape(window.atob('@@config@@'))));\n\n  var lock = new Auth0Lock(config.clientID, config.auth0Domain, {\n      //...additional configuration\n  });\n\n  function handleError(err) {\n    // add proper error handling\n    console.log(err);\n  };\n\n  var params = Object.assign({\n      scope: config.internalOptions.scope,\n      _csrf: config.internalOptions._csrf,\n      state: config.internalOptions.state,\n    },\n    {\n      /* additional configuration needed for use of custom domains \n      overrides: {\n        __tenant: config.auth0Tenant,\n        __token_issuer: '{yourCustomDomain}'\n      }, */\n      domain: config.auth0Domain,\n      clientID: config.clientID,\n      redirectUri: config.callbackURL,\n      responseType: 'code'\n    });\n\n  var webAuth = new auth0.WebAuth(params);\n\n  /*\n   * Verify if Kerberos is possible, if it is, try to authenticate the user.\n   *\n   * the response from getSSOData will only have a connection and strategy if \n   * the IP address is within the Kerberos range in the connection's settings\n   */\n  webAuth.client.getSSOData(true, function(err, data) {\n    if (err) handleError(err);\n\n    if (data.connection && data.strategy === 'ad') {\n      webAuth.authorize({connection: data.connection}, function(err) {\n        if (err) handleError(err);\n      });\n    } else {\n      lock.show();\n    }\n  });\n</script>\n```\n\n## Bypass Kerberos at runtime\n\nYou can prevent Kerberos from being used, even if the user is logging in from an IP address within the range configured in the connection's settings, by passing `rememberLastLogin: false` to `lock.show()`.\n\n```\nfunction useKerberos() {\n      // return true to use Kerberos, false to bypass\n    };\n    \n    lock.show({rememberLastLogin: useKerberos()});\n```\n\n## Enable Kerberos request logging\n\n1.  To enable verbose logging of Kerberos requests, add a system level environment variable `DEBUG=kerberos-server`.\n    \n2.  Restart the Connector.\n    \n3.  Log in again and check the logs for more information.\n    \n\n## Firefox support for Kerberos\n\nBy default, [Firefox](https://www.mozilla.org/firefox) [rejects all \"negotiate\" requests required to authenticate users with Kerberos](https://developer.mozilla.org/en-US/docs/Mozilla/Integrated_authentication). If you wish to use Firefox with Kerberos, you need to AllowList the server where the connector is installed.\n\n1.  Open a Firefox tab and type `about:config` in the address bar.\n    \n2.  Dismiss any warning message, and in the search box type `negotiate`.\n    \n3.  Locate the `network.negotiate-auth.trusted-uris` item and double click to change its value.\n    \n4.  Type the domain name of the server where the connector is installed. If you have multiple instances of the connector behind a load balancer, add the dns name of the balancer. The value accepts a comma-separated list of URL prefixes or domains in the form of `mydomain.com, https://myotherdomain.com`.\n    \n5.  Click **Ok**. You don't need to restart the server for the changes to take effect.\n    \n\n## HTTPS support for Kerberos\n\nKerberos authentication works over HTTP (not HTTPS). Microsoft Office 365 and other modern products might not work with HTTP.\n\nTo resolve this limitation:\n\n1.  Set up a reverse proxy and expose the AD/LDAP Connector on an HTTPS domain. You can use the `SERVER_URL` (Front Facing URL) parameter to publish the public location where the AD/LDAP Connector will be listening to incoming requests.\n    \n2.  Map the `SERVER_URL` in the reverse proxy to all internal instances of the deployed connectors.",
    "title": "Configure AD/LDAP Connector Authentication with Kerberos",
    "description": "Describes how to configure AD/LDAP Connector for federating with Kerberos authentication.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/install-configure-ad-ldap-connector",
    "markdown": "# Install and Configure AD/LDAP Connector\n\n*    [![](https://cdn.auth0.com/docs/img/node-windows.png) Auth0 Active Directory/LDAP Connector for Windows](https://cdn.auth0.com/adldap.msi) -  \n            \n\n### Run the installer\n\nRun the installer and follow the instructions.\n\n![AD/LDAP Connector Services](https://images.ctfassets.net/cdy7uua7fh8z/1cN4OfG8G3nsJDnVPneNLj/0bd9efb494c6d26016b3a15d0dddf063/adldap-connector-setup.png)\n\nThe **AD/LDAP Connector** is installed as a Windows Service.\n\n![AD/LDAP Connector Services](https://images.ctfassets.net/cdy7uua7fh8z/MPMfLmJsXoPAzpPQhGAv5/25fb39ac7cef7a125110b8fa9f2dff01/adldap-connector-services.png)\n\n### Link to Auth0\n\nOnce the installation is complete, you will see a screen in a browser pointing to localhost:\n\n![AD/LDAP Connector Admin Ticket](https://images.ctfassets.net/cdy7uua7fh8z/3biSuxJYQ4swMGJkOZtC3R/cab77cb763ad3b9ff47710bc406c527b/adldap-connector-admin-ticket.png)\n\nEnter the **TICKET URL** provided when you provisioned the connection. The **TICKET URL** uniquely identifies this connector in Auth0. The Connector will use this to communicate with Auth0 Server and automatically complete the configuration.\n\n### Link to LDAP\n\nEnter the LDAP settings:\n\n![adldap-connector-admin-settings](https://images.ctfassets.net/cdy7uua7fh8z/2mHaknek0qyBxGmsanb30L/600b0259ed6db3fe9c526aa9f57a76bd/adldap-connector-admin-settings.png)\n\n| Setting | Description |\n| --- | --- |\n| **LDAP Connection String** | For example, `ldap://ldap.internal.contoso.com`. This is the protocol + the domain name or ip address of your LDAP server. Your LDAP server is the local domain controller where Active Directory is installed. The protocol can be either `ldap` or `ldaps`. If you need to use `ldaps` make sure that the certificate is valid in the current server. |\n| **Base DN** | For example, `dc=contoso,dc=com`. This is the base container for all the queries performed by the connector. |\n| **Username** | For example, `cn=svcauth0,dc=services,dc=contoso,dc=com` The full distinguish name of a user to perform queries. |\n| **Password** | The password of the user. |\n\nOnce you submit the above information, the connector will perform a series of tests to validate the information you entered. The results are displayed under **Configuration Log** in the console screen.\n\n![adldap-connector-admin-settings-ok](https://images.ctfassets.net/cdy7uua7fh8z/7kezId8mhvyYDbuovvi9FM/c2f3b2188fdfebc460458daf7247c124/adldap-connector-admin-settings-ok.png)\n\nMake sure that all tests are green.\n\n| Test | Description | Troubleshoot |\n| --- | --- | --- |\n| Test 1 | Attempts to establish a TCP connection to the LDAP server and port specified. | Check basic network connectivity and firewall settings that might prevent such a connection. |\n| Test 2 | Attempts to perform an LDAP bind on the LDAP server and port specified and with the username and password provided. | Check the LDAP connection string, search path, username and password. |\n| Test 3 | Attempts to perform an LDAP search against the directory to check the privileges of the specified username. | Check the privileges of the username in the target directory. |\n| Test 4 | Attempts to establish a connection to the Auth0 server. | Check network connectivity and firewall settings that might prevent such a connection. |\n\n## Install the connector for other platforms\n\n1.  Download the **Auth0 Active Directory/LDAP Connector** package to `/tmp`:\n    \n    **Curl example:**  \n    \n2.  Expand the package and install its dependencies:\n    \n    ```\n    mkdir /opt/auth0-adldap\n    tar -xzf /tmp/adldap.tar.gz -C /opt/auth0-adldap --strip-components=1\n    cd /opt/auth0-adldap\n    npm install\n    ```\n    \n3.  Start your server. `node server.js` When prompted for the ticket number, enter the full ticket URL from the **Settings** tab of the **Setup AD/LDAP connector** screen in the Auth0 Management Dashboard.\n    \n4.  You will be prompted to edit the `config.json` configuration file with your LDAP connection and authentication details:\n    \n    ```\n    \"LDAP_URL\": \"ldap://{yourLdapServerFqdn}\",\n        \"LDAP_BASE\": \"dc={yourDomain},dc=com\",\n        \"LDAP_BIND_USER\":\"{yourLdapUser}\",\n        \"LDAP_BIND_PASSWORD\":\"{yourLdapUserPassword}\" //cleartextpassword\n    ```\n    \n5.  Run `node server.js` once more to start the Connector. Note that the `LDAP_BIND_PASSWORD` line in `config.json` changes to `LDAP_BIND_CREDENTIALS` at this point.\n    \n6.  Once the Connector is running, you will need to daemonize the Connector (if you don't already have a tool selected, you can consider [upstart](http://upstart.ubuntu.com/) or [systemd](https://www.freedesktop.org/wiki/Software/systemd/)). For example, for using systemd with Ubuntu Xenial, the file `/lib/systemd/system/auth0-adldap.service` could contain the following:\n    \n    ```\n    [Unit]\n    Description=Auth0 AD LDAP Agent\n    After=network.target\n    \n    [Service]\n    Type=simple\n    Restart=always\n    User=ubuntu\n    WorkingDirectory=/opt/auth0-adldap\n    ExecStart=/usr/bin/node server.js\n    ```\n    \n7.  Run `node admin/server.js` to access the admin UI. The admin UI will be running and available on `http://localhost:8357`.\n    \n\nIf you get an `Invalid Ticket` message when configuring the Connector for the first time, the most likely cause is a network issue (for example, you have the Connector running behind a proxy).",
    "title": "Install and Configure AD/LDAP Connector",
    "description": "Describes how to install and configure the AD/LDAP Connector.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-requirements",
    "markdown": "# AD/LDAP Connector System Requirements\n\nTypically the AD/LDAP Connector needs to be installed by a sys admin or an operations engineer vs. a developer, since it often requires access to production resources. Following is a checklist of things they should consider ahead of the actual install:\n\n## Host servers\n\nThe Connector can be installed on an existing server, even a Domain Controller. However, more often it's installed on virtual machines provisioned just for the Connector. Regardless, the host server should have the following hardware and software specifications/configurations:\n\n### Hardware requirements\n\n*   **Architecture**: x86 or x86-64\n    \n*   **CPU cores**: min. 1, recommended 2\n    \n*   **Storage**: 500MB of free space on disk\n    \n*   **Operating System**: The connector can run on Windows or Linux. Windows is required if Kerberos authentication will be used.\n    \n*   **RAM**: min. 2GB\n    \n\n### Windows version\n\nWe recommend using a supported version of Windows Server, like Windows Server 2016 or Windows Server 2019. The connector can also run on Windows Server 2012 R2.\n\n### Time synchronization\n\nIt is very important to have the Connector host server clock automatically synchronized with an NTP server. Otherwise the connector will fail to start and report a clock skew error.\n\n## Outbound connectivity\n\nThe host server requires outbound network connectivity to the following services:\n\n### Auth0\n\nThe connector must be installed on a server with outbound connectivity to the Auth0 service at: `https://{yourDomain}` on port 443.\n\nThe connector can be installed and configured behind a proxy server but we don't recommend this. Enable a proxy through the environment or configuration variable `HTTP_PROXY`.\n\n### LDAP\n\nThe Connector must be installed on a server with access to the LDAP server on port 389 for ldap or 636 for ldaps. Before installing the Connector you should know the LDAP Connection String and the Base DN required to connect to your LDAP directory.\n\n## Inbound connectivity\n\nYou do not need inbound connectivity enabled to the Connector unless Kerberos or certificate authentication is enabled. In these cases, the server(s) on which the Connector is installed must be reachable from your users' browsers on port 443. If more than one instance of the connector is installed, you should use a load balancer to direct traffic to one connector or the another.\n\nTo learn more, read [Configure AD/LDAP Connector Authentication with Kerberos](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-with-kerberos) or [Configure AD/LDAP Connector Authentication with Client Certificates](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-client-certificates).\n\n## Service account\n\nThe Connector will be run using a service account that must be a domain user that at a minimum has read access to the directory. You will need the username/password of this account when performing the install.\n\n## One Connector per Auth0 tenant\n\nIf you establish multiple Auth0 tenants, for example to isolate development and production environments, you will need to set up an AD/LDAP connection on the Auth0 Dashboard and with an AD/LDAP Connector for each Auth0 tenant that needs this form of authentication. A Connector is tied to a specific connection within an Auth0 tenant.\n\nIt is possible to have multiple Connectors within one Auth0 tenant if you have multiple AD/LDAP directories against which users will authenticate. For example, to support different departments or customers each with their own directory. In addition, multiple Connectors can point to the same AD or LDAP directory but a Connector can only be used by one Auth0 Connection within one Auth0 tenant.\n\n## High availability\n\nThe Connector can be installed on multiple host servers for high-availability and redundancy (most organizations provision two) in case one server becomes unavailable. Each server will have the same requirements listed above. No load balancer is required as that is performed by the Auth0 server itself, unless you enable Kerberos or client certificate based authentication.\n\nTo learn more, read [Deploy AD/LDAP Connectors for High Availability Environments.](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability)\n\n## Learn more\n\n*   [Install and Configure AD/LDAP Connector](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/install-configure-ad-ldap-connector)\n*   [Deploy AD/LDAP Connectors for High Availability Environments](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability)\n*   [Configure AD/LDAP Connector Authentication with Client Certificates](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-client-certificates)\n*   [Configure AD/LDAP Connector Authentication with Kerberos](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/configure-ad-ldap-connector-with-kerberos)",
    "title": "AD/LDAP Connector System Requirements",
    "description": "Lists all the prerequisites to installing and configuring the connector.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-config-file-schema",
    "markdown": "# AD/LDAP Connector Configuration File Schema\n\n`AD_HUB` The Auth0 endpoint to which the connector will connect. This value is maintained by the connector. `CA_CERT` An authority certificate or array of authority certificates to check the remote host against. `CLIENT_CERT_AUTH` Specifies if **Client Certificate Authentication** is enabled or not. This value is configured in Auth0 and maintained by the connector. `CONNECTION` The name of the connection in Auth0 which is linked to this instance of the connector. This value is maintained by the connector. `CONNECTIONS_API_V2_KEY` A Management API token used to call the Get a connection endpoint. Set this when you need to troubleshoot the connector. This compares the local certificate to the one configured in Auth0 and detects a possible mismatch. `FIREWALL_RULE_CREATED` Set to `true` once the Firewall rule has been created for the Kerberos Server (only when Kerberos is enabled). `GROUPS` Include the user's groups when enriching the profile. `true` `GROUP_PROPERTY` The attribute of the group object used when adding the groups to a user. `cn` `GROUPS_CACHE_SECONDS` Total time in seconds to cache a user's groups. 600 seconds. `GROUPS_TIMEOUT_SECONDS` The timeout in seconds for searching all groups a user belongs to. 20 seconds `HTTP_PROXY` The proxy server URL if one is required to connect from the AD/LDAP Connector to Auth0. `KERBEROS_AUTH` Set if **Kerberos Authentication** is enabled or not. This value is configured in Auth0 and maintained by the connector. `LAST_SENT_THUMBPRINT` Thumbprint of the last certificate which was sent to Auth0. `LDAP_BASE` Defines the location in the directory where the LDAP search begins. For example: `DC=fabrikam,DC=local`. `LDAP_BASE_GROUPS` Defines the location in the directory where the LDAP groups search begins. `LDAP_BIND_PASSWORD` The password of the LDAP user. This setting is automatically removed after the connector initializes. `LDAP_BIND_CREDENTIALS` The encrypted password of the LDAP user. This setting is automatically added after the connector initializes. `LDAP_BIND_USER` The user for binding a connection to LDAP. `LDAP_HEARTBEAT_SEARCH_QUERY` The LDAP search query used for heartbeat checks. `(&(objectclass=user)(|(sAMAccountName=foo)(UserPrincipalName=foo)))` `LDAP_HEARTBEAT_SECONDS` Time in seconds to keep the LDAP connection open. `LDAP_SEARCH_ALL_QUERY` The LDAP query used to list all users in the LDAP store. `(objectCategory=person)` `LDAP_SEARCH_GROUPS` The LDAP query used to find groups in the LDAP store. For example: `(&(objectCategory=group)(member={0}))` `(member:1.2.840.113556.1.4.1941:={0})` `LDAP_SEARCH_QUERY` The LDAP query used to find users in the LDAP store. `(&(objectCategory=person)(anr={0}))` `LDAP_USER_BY_NAME` The LDAP query used to find the user during authentication. This setting lets you specify which attribute is considered the user's username. For example, like the common name: the sAMAccountName, UPN, et cetera. This setting also supports multiple values for an OR search, for example: `(|(sAMAccountName={0})(userPrincipalName={0}))` `(sAMAccountName={0})` `LDAP_URL` The LDAP connection string. For example: `ldap://fabrikam-dc.fabrikam.local`. `PORT` The port the server runs on when Kerberos or Client Certificate Authentication is enabled. `PROVISIONING_TICKET` The Auth0 provisioning ticket used to communicate with Auth0. `REALM` The Auth0 realm, for example: `urn:auth0:fabrikam`. This value is maintained by the connector. `SERVER_URL` The default connector URL will be `server-name:port`, but this setting allows you to overwrite this. For example: `connector.mycompany.com`. `SESSION_SECRET` The session secret used to encrypt the session cookie. `SITE_NAME` When Client Certificate Authentication is enabled, but not possible the AD Connector will show a fallback login page. This setting allows you to specify the title that will show on top of the page. Name of the AD connection. `SSL_CA_PATH` Absolute path to the base directory where the CA certificate file(s) are located. `SSL_KEY_PASSWORD` The password for the SSL certificate. `SSL_PFX` Base64 encoded certificate to use for SSL. `TENANT_SIGNING_KEY` Your Auth0 tenant used to verify JWTs. `WSFED_ISSUER` The issuer being set in the WS-Federation responses. If a connection is configured with email domains, the first email domain configured in Auth0 will be used as issuer. `urn:auth0`",
    "title": "AD/LDAP Connector Configuration File Schema",
    "description": "Describes the AD/LDAP Connector Configuration file contents. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/import-export-ad-ldap-connector-configs",
    "markdown": "# Import and Export AD/LDAP Connector Configurations\n\nYou can export the AD/LDAP Connector configuration or import a previously exported configuration. This is useful for deployments with more than one node of the AD/LDAP Connector deployed for high availability. You can set up and test the configuration on one node then export the working configuration and imported into all subsequent nodes.\n\n1.  From a browser, go to [http://localhost:8357](http://localhost:8357/) to launch the **Connector Admin Console** on the AD/LDAP Connector server.\n    \n2.  Click **Import / Export** tab.\n    \n3.  Export a .zip file that contains the `config.json` file, the `certs` folder and the `lib\\\\profileMapper.js` file from the `%Program Files(x86)%\\Auth0\\AD LDAP Connector\\` folder.\n    \n4.  To import, upload a backup .zip file on the **Import / Export** tab.\n    \n\n## Learn more\n\n*   [Install and Configure AD/LDAP Connector](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/install-configure-ad-ldap-connector)\n*   [Deploy AD/LDAP Connectors for High Availability Environments](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-high-availability)\n*   [Update AD/LDAP Connectors](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/update-ad-ldap-connectors)",
    "title": "Import and Export AD/LDAP Connector Configurations",
    "description": "Describes how to import or export an AD/LDAP Connector configuration from the Connector Admin Console.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/map-ad-ldap-profile-attributes-to-auth0",
    "markdown": "# Map AD/LDAP Profile Attributes to Auth0 User Profile\n\nYou can modify the mapping of profile attributes from AD/LDAP attributes to attributes in the Auth0 user profile.\n\n1.  From a browser, go to [http://localhost:8357](http://localhost:8357/) to launch the **Connector Admin Console** on the AD/LDAP Connector server.\n    \n2.  Click **Profile Mapper** to open a code editor screen which maps attributes from a source directory service (represented by the `raw_data` variable) to a variable that gets returned to populate the Auth0 user profile. The first part of the function instantiates a variable called `profile` and has a mapping for the core portion of the Auth0 User Profile. Additional attributes can be set below that using syntax in the form: `profile['department'] = raw_data['companydept'];` In this example, `department` is the name of the attribute in the Auth0 user profile and `companydept` is the name of the attribute in the source directory service (such as AD).\n    \n3.  Click **Save** when you are done modifying the LDAP configuration.\n    \n4.  After the Connector runs the tests, ensure that all the tests are green.\n    \n    | Test | Description | Troubleshoot |\n    | --- | --- | --- |\n    | Test 1 | Attempts to establish a TCP connection to the LDAP server and port specified. | Check basic network connectivity and firewall settings that might prevent such a connection. |\n    | Test 2 | Attempts to perform an LDAP bind on the LDAP server and port specified and with the username and password provided. | Check the LDAP connection string, search path, username and password. |\n    | Test 3 | Attempts to perform an LDAP search against the directory to check the privileges of the specified username. | Check the privileges of the username in the target directory. |\n    | Test 4 | Attempts to establish a connection to the Auth0 server. | Check network connectivity and firewall settings that might prevent such a connection. |",
    "title": "Map AD/LDAP Profile Attributes to Auth0 User Profile",
    "description": "Describes how to map AD/LDAP profile attributes to Auth0 user profile attributes using the Profile Mapper in the Connector Admin Console. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/update-ad-ldap-connectors",
    "markdown": "# Update AD/LDAP Connectors\n\nIf there are multiple instances of the AD/LDAP Connector in your deployment, Auth0 recommends that you perform the steps below for each instance one at a time, so that only one instance is down at any point.\n\n## Admin console (Windows)\n\n1.  Open the Admin Console by navigating to [http://localhost:8357/](http://localhost:8357/). If the Admin Console has outbound access to the internet it will verify if a new version is available and show this on top of the page:\n    \n    ![Update AD/LDAP Connectors Admin Console Screen](https://images.ctfassets.net/cdy7uua7fh8z/6Yp2uRnEU3RMeCqgHa6Ztl/b9c04ab83b9fd725910291b01ac9d05d/connector-update-available.png)\n2.  Go to the **Update** tab to update the installation on the current machine to the latest version. The update will take about 2 minutes and the updater logs will be displayed in the Admin Console.\n    \n\n## Updater script (Windows)\n\nThe updater script will update the AD/LDAP Connector from the command line by running the following steps:\n\n1.  Verify if an update is available.\n    \n2.  Backup the existing configuration, certificates and profileMapper.js.\n    \n3.  Uninstall the AD/LDAP Connector.\n    \n4.  Download the update.\n    \n5.  Install the AD/LDAP Connector.\n    \n6.  Restore the existing configuration, certificates and profileMapper.js.\n    \n7.  Start the Windows Service.\n    \n8.  To run the updater script execute the following statement in the command line: `@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://cdn.auth0.com/connector/windows/update-connector.ps1'))\"`\n    \n\nThe updater script uses specific PowerShell commands that are only available in Windows PowerShell 3.0 and higher. If you're running on Windows 2008 and Windows 2008 R2 you might need to update your [](https://www.microsoft.com/en-us/download/details.aspx?id=34595)PowerShell version first.\n\nTo learn more, see [Download Window Management Framework](https://www.microsoft.com/en-us/download/details.aspx?id=34595).\n\n## Manual update (Windows/Linux)\n\n1.  Verify the version you have installed. Hover over the Connector status indicator on the console. The tooltip will indicate the current status and the installed version.\n    \n2.  Download the latest version of the [installer](https://cdn.auth0.com/connector/windows/adldap-5.0.10.msi?_ga=2.58973869.1675886805.1589821069-1123834949.1586212750). Use the GitHub repository [version](https://github.com/auth0/ad-ldap-connector/releases/tag/v5.0.10) for other platforms.\n    \n3.  Backup your current configuration from the Admin Console or manually.\n    \n    1.  From the Admin Console, click the **Download** button to generate a .zip file which contains the `config.json` file, the `certs` folder and the `lib\\\\profileMapper.js` file.\n        \n    2.  To do it manually, backup the same files listed above from `%Program Files(x86)%\\Auth0\\AD LDAP Connector\\` folder. The path works for Windows. Files in other platforms may be located somewhere else but will contain the same assets.\n        \n4.  Run the installer and follow the instructions.\n    \n5.  Close the Configuration dialog without changing anything.\n    \n6.  Restore files from the Admin Console or manually.\n    \n    1.  From the Admin Console, upload the .zip file on the **Import / Export** tab.\n        \n    2.  To do it manually, copy the files you backed up previously.\n        \n7.  Restart the **Auth0 AD LDAP** service from the service console.",
    "title": "Update AD/LDAP Connectors",
    "description": "Learn how to update AD/LDAP Connectors.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-test-environment",
    "markdown": "# Set Up AD/LDAP Connector Test Environment\n\nYou can set up a test environment by creating a minimal AD Domain Controller installation on a cloud-deployed virtual machine (VM). You can run your VM on any cloud platform. This example shows how to set one up on Microsoft Azure.\n\n1.  Create a virtual machine on the [Azure Management](https://azure.microsoft.com/en-us/features/azure-portal/) console.\n    \n2.  Click on the **ENDPOINTS** tab of the new VM, and take note of the **PUBLIC PORT** for the **Remote Desktop** endpoint.\n    \n3.  Open up Microsoft Remote Desktop client (Windows or Mac) or the client of your choice (such as [rdesktop](http://www.rdesktop.org/) for Linux systems). Create a new connection to your VM.\n    \n4.  Open the connection, disregarding any certificate warnings presented by the Remote Desktop client. If you're prompted to find PC's, devices, and content on the local network, choose **No**.\n    \n5.  Click the PowerShell icon in the Windows Task Bar to open the **PowerShell Command Prompt**. Install ADDS.\n    \n6.  Promote the server to a domain controller that manages a FQDN of `mycompany.local`.\n    \n7.  When prompted for the **SafeModeAdministratorPassword**, enter the Administrator password you used when creating the VM. Click Enter to continue. The promotion script will run and the VM will automatically reboot.\n    \n8.  Add test groups and users. Log into VM using the Remote Desktop client and open the PowerShell Command Prompt. Run the following script:\n    \n    ```\n    > New-ADGroup -Name \"Accounting\" -GroupScope \"DomainLocal\"\n        > New-ADGroup -Name \"IT\" -GroupScope \"DomainLocal\"\n        \n        > New-ADUser -GivenName Bob -Surname Johnson -Name \"Bob Johnson\" -SamAccountName bob.johnson -Enabled $True -AccountPassword (ConvertTo-SecureString \"Pass@word1!\" -AsPlainText -force) -PasswordNeverExpires $True\n        > New-ADUser -GivenName Mary -Surname Smith -Name \"Mary Smith\" -SamAccountName mary.smith -Enabled $True -AccountPassword (ConvertTo-SecureString \"Pass@word1!\" -AsPlainText -force) -PasswordNeverExpires $True\n        \n        > Add-ADGroupMember -Identity Accounting -Members \"bob.johnson\", \"mary.smith\"\n        > Add-ADGroupMember -Identity IT -Members \"mary.smith\"\n    ```\n    \n\n## Install and configure AD/LDAP Connector\n\n1.  Navigate to [Auth0 Dashboard > Authentication > Enterprise](https://manage.auth0.com/#/connections/enterprise), and create a new **Active Directory/LDAP** connection with the name `auth0-test-ad`. Be sure to copy the **Ticket URL** that is generated at the end of those instructions.\n    \n2.  On the VM, disable **Internet Explorer Enhanced Security Configuration**.\n    \n3.  Open **Internet Explorer** with the **Ticket URL** you saved in step 1.\n    \n4.  Follow the instructions in the browser to download, install, and configure the **Connector**. When you are prompted for the LDAP service account, use the admin account you created for the VM: **Username**: `mycompany\\ad-admin,` **Pas**sword: (same as before).\n    \n5.  When you're done configuring and installing the Connector, reboot the server.\n    \n6.  Log back into the VM using Remote Desktop.\n    \n7.  Open the Connector configuration site by navigating to `http://localhost:8357/`.\n    \n8.  Check that the **Connector** is able to find a user:\n    \n    1.  Click on the **Search** tab.\n        \n    2.  Under \"Find User by Login\", type `mary.smith`.\n        \n    3.  Click **Search**. You should get JSON back that contains that user's AD profile data:\n        \n\n## Test authentication from Auth0\n\nTo ensure that everything is working using your Auth0 account, we're going to configure your **Default App** in Auth0 to use your new **Active Directory / LDAP** Connection, and use the `/authorize` endpoint to initiate an authentication flow.\n\n1.  Navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications).\n    \n2.  Click the **Settings** icon of your **Default App**.\n    \n3.  Add `http://jwt.io` to the list of the Application's **Allowed Callback URLs**.\n    \n4.  Click the **Connections** tab.\n    \n5.  Under **Enterprise**, enable the `auth0-test-ad` **Active Directory / LDAP** connection.\n    \n6.  Test the authentication flow by opening the following link in your browser:\n    \n    ```\n    https://{yourDomain}/authorize?response_type=token&scope=openid%20profile&client_id={yourClientId}&redirect_uri=http://jwt.io&connection=auth0-test-ad\n    ```\n    \n7.  Log in with one of the test users that was created in the directory:\n    \n    *   Username: `mary.smith` or `bob.johnson`\n        \n    *   Password: `Pass@word1!`\n        \n8.  If everything is working, you should be redirected to the JWT.io website to see the contents of the resulting JWT.",
    "title": "Set Up AD/LDAP Connector Test Environment",
    "description": "Describes how to create and test an Active Directory Domain Controller.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-scom",
    "markdown": "# Monitor AD/LDAP Connector with System Center Operations Manager\n\nThe Auth0 AD/LDAP connector can run as a service on Windows-based machines.\n\nYou can monitor the service status using System Center as you would do with any other service.\n\n1.  Open the **Add Monitoring Wizard** and select the **Monitoring Type: Windows Service**:\n    \n    ![Monitor AD/LDAP Connector Wizard Screen 1](https://images.ctfassets.net/cdy7uua7fh8z/6234mP3Hx1g3Iwf7y9mKH9/7a2ac217f7d22070c20a769939461f75/ss-2014-12-11T22-48-51.png)\n2.  Enter a name and description:\n    \n    ![Monitor AD/LDAP Connector Wizard Screen 2](https://images.ctfassets.net/cdy7uua7fh8z/2KZkQoBuubAgAEWBPnkJx0/abdcdf5e1e0fad20829b255401db523f/ss-2014-12-11T22-49-57.png)\n3.  Select the Server in which the AD/LDAP Connector is installed and then choose **Auth0 ADLDAP**:\n    \n    ![Monitor AD/LDAP Connector Wizard Screen 3](https://images.ctfassets.net/cdy7uua7fh8z/DOQHiJYYiJKZrWzHYUIiB/21eae1ad8435a0754c6e221d5e33bab5/ss-2014-12-11T22-50-37.png)\n4.  Select the limits of **CPU** and **Memory limits**. For example, 10% of CPU and 200MB of RAM are good limits to trigger alerts.\n    \n\nWe also recommend that you set up a synthetic transaction to monitor end-to-end authentication.\n\nTo learn more, see [Monitor Auth0 Using SCOM](https://auth0.com/docs/deploy-monitor/monitor/monitor-using-scom).\n\n## Learn more\n\n*   [Monitor Auth0 Using System Center Operations Manager](https://auth0.com/docs/deploy-monitor/monitor/monitor-using-scom)",
    "title": "Monitor AD/LDAP Connector with System Center Operations Manager",
    "description": "Describes how to monitor the AD/LDAP Connector with System Center Operations Manager (SCOM).",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/disable-credential-caching",
    "markdown": "# Disable AD/LDAP Connection Credential Caching\n\nWas this article helpful?",
    "title": "Disable AD/LDAP Connection Credential Caching",
    "description": "Learn how to disable credential caching at the connection level for an AD/LDAP enterprise connection using the Auth0 Management Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-accounts/user-profiles/root-attributes/update-root-attributes-for-users",
    "markdown": "# Update Root Attributes for Users\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/users/USER_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Update Root Attributes for Users",
    "description": "Learn how to update root attributes in existing user profiles using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/universal-login-pages/universal-login-page-templates",
    "markdown": "# Customize Universal Login Page Templates\n\nYou can customize Universal Login pages by providing a page template created with the [Liquid template language](https://shopify.github.io/liquid/basics/introduction/). With page templates, you can define the content displayed around Universal Login prompts, such as the login box or an MFA challenge. As the same page template is used for all login flow pages, this method of customization allows you to easily implement a consistent, branded experience for users.\n\nTo use customized page templates, you must configure a [Custom Domain](https://auth0.com/docs/customize/custom-domains) for your tenant. Further, you can only update Universal Login page templates with the [Management API](https://auth0.com/docs/api/management/v2).\n\n## Page template requirements\n\nWhen creating a Universal Login page template, you must include the following tags:\n\n| **Tag** | **Description** |\n| --- | --- |\n| `auth0:widget` | Contains HTML for the prompt displayed on every page of the login flow, such as the Login page or Reset Password page |\n| `auth0:head` | Contains the tags required for rendering the prompt |\n\nTo center the prompt on the page, add `class=\"_widget-auto-layout\"` to the `<body>` element. You can omit this attribute to manually position the prompt as needed.\n\n##### Example template:\n\nThe following example demonstrates the simplest Universal Login page template you can create with the required tags:\n\n```\n<!DOCTYPE html><html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body></html>\n```\n\n## Page template variables\n\nPage templates support a variety of context variables that impact how a page is rendered.\n\nFor example, you can use these variables to:\n\n*   Render different content depending on the application associated with the login flow. For example, you may manage two brands that require different page designs. \n    \n*   Render different content depending on the specific prompt. For example, you may want to add information about what your application offers on the Login page but prefer the MFA flow to only display the MFA challenge prompt. \n    \n*   Add a footer with user support information, such as links to your support page or contact information.\n    \n\n### Available variables\n\nPage templates support the following variables:\n\n#### Application\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `application.id` | Your application client ID | XXXXXXXXXXXXXXXXXXXXXXXXX |\n| `application.name` | The name of your application | My Application |\n| `application.logo_url` | URL of the application logo | https://example.com/mylogo.png |\n| `application.metadata` | Your application metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n\n#### Branding\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `branding.logo_url` | URL of your application logo | https://example.com/mylogo.png |\n| `branding.colors.primary` | Your primary branding color | #000000 |\n| `branding.colors.page_background` | Background color for Universal Login pages | #FFFFFF |\n\n#### Tenant\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `tenant.friendly_name` | Your tenant's display name | My Tenant |\n| `tenant.support_email` | Support email address for your tenant | support@example.com |\n| `tenant.support_url` | Support page URL for your tenant | https://example.com/support |\n\n#### Organizations\n\nThe following variables refer to the [Auth0 Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) feature.\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `organization.id` | ID of Organization | org\\_XXXXXXXXXXXXXXX |\n| `organization.display_name` | Display name of Organization | My Organization |\n| `organization.name` | Internal name of Organization | my-organization |\n| `organization.metadata` | Organization metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `organization.branding.logo_url` | URL of Organization logo | https://example.com/orglogo.png |\n| `organization.branding.colors.primary` | Primary branding color for Organization | #000000 |\n| `organization.branding.colors.page_background` | Background color for Organization's login pages | #FFFFFF |\n\n#### Current user information\n\nYou can only use the following variables for pages that render after authentication.\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `user.user_id` | ID of the user profile | auth0\\|XXXXXXXXXXXXXXXXXXXX |\n| `user.picture` | URL of the user's profile picture | https://example.com/userimage |\n| `user.email` | Email address of user | user@example.com |\n| `user.email_verified` | Boolean of email verification status (true/false) | true |\n| `user.app_metadata` | `app_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.user_metadata` | `user_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.family_name` | Family (last) name of user | Smith |\n| `user.given_name` | Given (first) name of user | Abigail |\n| `user.name` | Full name of user | Abigail Smith |\n| `user.nickname` | Nickname (alias) of user | Abby |\n| `user.username` | Internal name of user | asmith |\n\n#### Current screen information\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `locale` | Locale used to render the page; matches one of the [supported tenant languages](https://auth0.com/docs/customize/internationalization-and-localization/universal-login-internationalization) | en-US |\n| `prompt.name` | Name of the currently rendered [Universal Login prompt](#prompts) | mfa |\n| `prompt.screen.name` | Name of the currently rendered Universal Login screen | mfa-login-options |\n| `prompt.screen.texts` | All localized texts from the current screen | `{`  <br>`\"pageTitle\": \"Available methods\"`  <br>`}` |\n\n### Prompts\n\nThe term `prompt` refers to a specific step of the login flow. A specific prompt may consist of one or more screens. You can manage prompts through the [Auth0 Dashboard](https://manage.auth0.com/#/custom_text) or the Prompts endpoints of the [Management API](https://auth0.com/docs/api/management/v2).\n\nThe sections below provide details for each available prompt.\n\n### Custom query parameters\n\nYou can also use query parameters within the context by passing them to the `/authorize` endpoint when initiating the authentication request. These custom query parameters must have the `ext-` prefix.\n\nThe following example uses the `ext-ga` and `ext-test` query parameters to the login page template:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body>\n  <pre style='background: wheat'>\n    <b>Value of the ext-ga parameter:</b>{{ transaction.params.ext-ga }}\n    <b>Value of the ext-test parameter:</b>{{ transaction.params.ext-test }}\n  </pre>\n</html>\n```\n\n### Custom signup prompts\n\nIf you use custom signup prompts, you must enable custom page templates. The following is the minimum template that allows custom signup prompts to render:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body._widget-auto-layout {\n        --page-background-image: url('https://REPLACE/WITH/YOUR/BACKGROUND/IMAGE.png');\n        background-color: var(--page-background-color);\n        background-image: var(--page-background-image);\n        background-position: center;\n        background-size: cover;\n        background-repeat: no-repeat;\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n  </body>\n</html>\n```\n\nTo learn more, review [Customize Signup and Login Prompts](https://auth0.com/docs/customize/login-pages/universal-login/customize-signup-and-login-prompts).\n\n## Examples\n\n### Login box + image layout\n\nThe following template will show the login box to the left, and an image to the right only for the login/signup pages. The rest of the pages will look like the default ones.\n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: url(\"https://images.unsplash.com/photo-1592450865877-e3a318ec3522?ixlib=rb-1.2.1&auto=format&fit=crop&w=2255&q=80\");\n        background-size: cover;\n        background-position: center;\n        background-repeat: no-repeat;\n      }\n      .prompt-wrapper {\n        position: relative;\n        display: flex;\n        align-items: center;\n        width: 480px;\n        height: 100%;\n        justify-content: center;\n        background-color: rgb(60,60,60);\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {% if prompt.name == \"login\" or prompt.name == \"signup\" %} \n        <div class=\"prompt-wrapper\">\n        {%- auth0:widget -%}\n        </div>\n    {% else %}\n        {%- auth0:widget -%}\n    {% endif %}\n  </body>\n</html>\n```\n\n![Universal Login box with email username/password and image layout example](https://images.ctfassets.net/cdy7uua7fh8z/7F2LIZ4qVdGqMUNnj66wcP/611287c9bb937c4040728fb442c7978f/page-templates-layout.png)\n\nThe example below adds a gray footer with links to Privacy Policy and Terms of Services:\n\n```\n<!DOCTYPE html><html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: radial-gradient(white, rgb(200, 200, 200));\n      }\n      .footer {\n        background-color: rgb(120, 120, 120);\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        padding: 16px 0; \n        width: 100%;\n        color: white;\n        /* Use a high z-index for future-proofing */\n        z-index: 10;\n      }\n      .footer ul {\n        text-align: center;\n      }\n      .footer ul li {\n        display: inline-block;\n        margin: 0 4px;\n      }\n      .footer ul li:not(:first-of-type) {\n        margin-left: 0;\n      }\n      .footer ul li:not(:first-of-type)::before {\n        content: '';\n        display: inline-block;\n        vertical-align: middle;\n        width: 4px;\n        height: 4px;\n        margin-right: 4px;\n        background-color: white;\n        border-radius: 50%;\n      }\n      .footer a {\n        color: white;\n      }\n    </style>\n     <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n    <footer class=\"footer\">\n      <ul>\n        <li><a href=\"https://company.com/privacy\">Privacy Policy</a></li>\n        <li><a href=\"https://company.com/terms\">Terms of Service</a></li>\n      </ul>\n    </footer>\n  </body></html>\n```\n\n![Universal Login box with email address/password and footers layout example](https://images.ctfassets.net/cdy7uua7fh8z/17BeLStId6jsxSfEnVFPMa/4ee123ee4c241ae1a26632218b1ec874/page-templates-footer.png)\n\n## Page templates API\n\nTo set the page template, you need to use the Management API. You first need to get a Management API token with the `update:branding`, `read:branding`, `delete:branding` scopes. If you are using the `API Explorer Application` to generate tokens, make sure those scopes are enabled for the `Auth0 Management API`.\n\nTo set the template, you need to use the following endpoint:\n\n*   [cURL](#c1e6c79f170f491b92832a5f02d50ec5_shell)\n*   [C#](#c1e6c79f170f491b92832a5f02d50ec5_csharp)\n*   [Go](#c1e6c79f170f491b92832a5f02d50ec5_go)\n*   [Java](#c1e6c79f170f491b92832a5f02d50ec5_java)\n*   [Node.JS](#c1e6c79f170f491b92832a5f02d50ec5_node)\n*   [Obj-C](#c1e6c79f170f491b92832a5f02d50ec5_objc)\n*   [...](#)\n\n```\ncurl --request PUT \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: text/html' \\\n  --data '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"text/html\");\nrequest.AddParameter(\"text/html\", \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\tpayload := strings.NewReader(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"text/html\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.put(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"text/html\")\n  .body(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PUT',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN', 'content-type': 'text/html'},\n  data: '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"text/html\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: text/html\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"text/html\"\n    }\n\nconn.request(\"PUT\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'text/html'\nrequest.body = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"text/html\"\n]\n\nlet postData = NSData(data: \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo retrieve the template, you need to use the following endpoint:\n\n*   [cURL](#7431dd457f314f4890834b565cbc6172_shell)\n*   [C#](#7431dd457f314f4890834b565cbc6172_csharp)\n*   [Go](#7431dd457f314f4890834b565cbc6172_go)\n*   [Java](#7431dd457f314f4890834b565cbc6172_java)\n*   [Node.JS](#7431dd457f314f4890834b565cbc6172_node)\n*   [Obj-C](#7431dd457f314f4890834b565cbc6172_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo delete the template, you need to use the following endpoint:\n\n*   [cURL](#0dbed89f99b14cd7b6984e5880c7d653_shell)\n*   [C#](#0dbed89f99b14cd7b6984e5880c7d653_csharp)\n*   [Go](#0dbed89f99b14cd7b6984e5880c7d653_go)\n*   [Java](#0dbed89f99b14cd7b6984e5880c7d653_java)\n*   [Node.JS](#0dbed89f99b14cd7b6984e5880c7d653_node)\n*   [Obj-C](#0dbed89f99b14cd7b6984e5880c7d653_objc)\n*   [...](#)\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe maximum size for the Page Template is 100KB. If that is not big enough, consider moving images/css files outside of the Page Template code.\n\n## CSS customization\n\nThere are a few things that you can customize using CSS:\n\n*   You can hide the tenant logo by adding `class=\"_hide-prompt-logo\"` in the `<body>` element.\n    \n*   You can specify a custom logo by adding `class=\"_use-custom-prompt-logo\"` in the `<body>` element. This would let you, for example, change the login page logo depending on the application:\n    \n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n\n  <head>\n    <title>Welcome to {{ application.name }} </title>\n    {%- auth0:head -%}\n    <style>\n      {% if application.name == \"Auth0 Community\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/manhattan/versions/1.3312.0/assets/badge.png');\n      }\n      {% elsif application.name == \"Auth0 Dashboard\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/blog/auth0rta/theme/logos/auth0-logo-black.png');\n      }\n      {% endif %}\n  </style>\n\n  </head>\n\n  <body class=\"_widget-auto-layout _use-custom-prompt-logo\">\n    {%- auth0:widget -%}\n  </body>\n\n</html>\n```\n\nThe current implementation does not support further CSS customization. If you look at the HTML that is generated, you will see code like:\n\n```\n.c10d15918.c7b3b8672 {\n  background: #D00E17;\n}\n```\n\n## Using the Auth0 CLI\n\nYou can use the [Auth0 CLI](https://github.com/auth0/auth0-cli) to easily update Page Templates.\n\nIn the Auth0 CLI, run:\n\n`auth0 universal-login templates update`\n\nThe Auth0 CLI will open two windows:\n\n*   A browser window with a [Storybook](https://storybook.js.org/) that shows the login page with the page template applied:\n    \n\n![Page Templates Storybook](https://images.ctfassets.net/cdy7uua7fh8z/1Ms4jj0pdMowoSZi54i72S/a2adcffa34a491ed7a587094884ad0f1/storybook.png)\n\n*   The default editor, with the page template code:\n    \n\n![undefined](https://images.ctfassets.net/cdy7uua7fh8z/3fTqpTmRRgVeLu5p8cioWa/e5a5c8a12dc93f5de95f12581ce0e5ff/vs-code.png)\n\nYou can now change the page template code, and you will be able to preview the changes in your browser window.\n\nOnce you close the window, you’ll be asked if you want to save the template. If you answer **Yes**, the template will be uploaded to your tenant.\n\n## Troubleshooting\n\nIf the template is not being applied, verify that you're navigating to `{customDomain}/authorize`. If you're navigating to `{yourDomain}/authorize`, Auth0 will not render the page template.",
    "title": "Customize Universal Login Page Templates",
    "description": "Learn how to create login page templates for the Universal Login experience.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/deprovision-users-in-saml-integrations",
    "markdown": "# Deprovision Users in SAML Integrations\n\nIf you need to remove application access for users, you'll need to deprovision them at a minimum with the identity provider. Depending on the identity provider, the steps required to deprovision a user account vary. Check with your provider for further instructions.\n\nOnce a user's account is removed or disabled with the identity provider, the user will not be able to log in.\n\nYou may also want to remove the Auth0 user accounts for those who've been deprovisioned if Auth0 is the service provider or if your app integrates with Auth0. Regardless of whether Auth0 is the identity or service provider, you can remove users using the [Dashboard](https://manage.auth0.com/#/users) or using the Management API.\n\n## Learn more\n\n*   [Remove Permissions from Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-permissions-from-users)\n*   [Troubleshoot SAML Configurations](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-saml-configurations)\n*   [Troubleshoot SAML Errors](https://auth0.com/docs/troubleshoot/authentication-issues/saml-errors)",
    "title": "Deprovision Users in SAML Integrations",
    "description": "Learn how to deprovision users of your SAML integration.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/configure-auth0-as-service-and-identity-provider",
    "markdown": "# Test SAML SSO with Auth0 as Service Provider and Identity Provider\n\nYou can configure Auth0 as both the service provider (SP) and the identity provider (IdP) to test your SAML single sign-on (SSO) connection.\n\n![Protocols Auth0 as SAML SP and IdP Diagram](https://images.ctfassets.net/cdy7uua7fh8z/7Ds9dLC3HaxGBLsG3ry7B9/0c08d51b6d6bb57ef6eff3796ca4cd21/saml-case3.png)\n\nAuth0 only supports using Auth0 as the SP in SAML configurations with SAML 1.1 or SAML 2.0 while you can use Auth0 as the IdP in SAML configurations with SAML 2.0.\n\nYou can set up a simple example application for testing that uses Auth0 to authenticate users through SAML SSO using one tenant as the SAML SP and another tenant as the SAML IdP. You will configure two federations for one tenant.\n\n## Create IdP tenant\n\nIf you do not already have a secondary Auth0 tenant to serve as a SAML IdP, you will need to create one:\n\n1.  Go to the [Auth0 Dashboard](https://manage.auth0.com/#/), select your tenant name and select **Create Tenant**.\n    \n    ![Dashboard Tenant Drop-Down Menu Create Tenant](https://images.ctfassets.net/cdy7uua7fh8z/53KetqhNIGDs6N5cqJdQtz/a8ab19657d5070e1d3c121c3ad8d18d4/dashboard-tenant-drop-down-menu.png)\n2.  Enter a **Domain**, select a **Region**, and click **Create**.\n    \n    ![Dashboard Tenant Drop Down Menu Create Tenant](https://images.ctfassets.net/cdy7uua7fh8z/68loKS3C0dxUlSjKhZPYSG/856a0b27795360ebc8c042a0db941e5e/dashboard-tenant-menu-create-tenant.png)\n\n## Configure IdP tenant\n\nConfigure your secondary tenant as an IdP, and register an application to represent your SP tenant.\n\n1.  Switch to your IdP tenant. Open the tenant menu, select **Switch Tenant**, and then select your IdP tenant.\n    \n2.  Navigate to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select **Create Application**.\n    \n3.  Enter a name for the application, such as `my-auth0-idp`, select **Regular Web Application** for the application type, and then select **Create**.\n    \n4.  Go to the bottom of the **Settings** page, and select **Show Advanced Settings**.\n    \n5.  Switch to the **Certificates** view, then select **Download Certificate**, and choose **PEM**. The certificate will download. You will use this certificate when you configure the SP tenant.\n    \n6.  Switch to the **Endpoints** view, locate **SAML Protocol URL**, and copy its contents. You will use this URL when you configure the SP tenant.\n    \n\n## Create user to test SAML sequence\n\n1.  Go to [Dashboard > User Management > Users](https://manage.auth0.com/#/users) and select **Create User**.\n    \n2.  Enter an email address for your test user. The domain name should match the service provider tenant email domain that you will configure next. For example, if your user is `john.doe@exampleco.com`, you should enter `exampleco.com` for the email domain.\n    \n3.  Enter a password for the test user.\n    \n4.  Use the default value for **Connection**.\n    \n5.  Select **Create**.\n    \n\n## Configure service provider tenant\n\nConfigure the SP tenant to communicate with the IdP tenant for SSO using the SAML protocol.\n\n1.  Switch to your SP tenant. Open the tenant menu, select **Switch Tenant**, and then select your SP tenant.\n    \n2.  Go to [Dashboard > Authentication > Enterprise](https://manage.auth0.com/#/connections/enterprise) and select **SAML**.\n    \n3.  Select **Create Connection**.\n    \n4.  Enter the following information, and select **Create**:\n    \n    | Setting | Description |\n    | --- | --- |\n    | Connection Name | Enter any name, such as `SAML-Auth0-IDP`. |\n    | Sign In URL | Enter the SAML Protocol URL value that you copied in above. |\n    | Sign Out URL | Enter the same URL as for the Sign In URL above. |\n    | X509 Signing Certificate | Click on the red **UPLOAD CERTIFICATE...** button and select the `.pem` file you downloaded above. |\n    \n5.  Switch to the **Setup** view to see the metadata associated with the tenant. Copy and save the URL.\n    \n6.  Open a new browser tab and navigate to the URL you copied previously. (If you are logged in on the Auth0 Docs site, the settings will pre-populate with the correct values.)\n    \n    1.  Locate **Entity ID**, and then copy and save its contents. It will look like: `urn:auth0:{yourTenant}:{yourConnectionName}`. Replace `{yourConnectionName}` with the name of the connection you created for your IdP tenant.\n        \n    2.  Locate **Metadata**, and copy and save the provided URL. It will look like: `https://{yourDomain}/samlp/metadata?connection={yourConnectionName}`. Replace `{yourConnectionName}` with the name of the connection you created for your IdP tenant.\n        \n    3.  Go to the URL you previously copied to display the metadata for this connection in the SP tenant. Alternatively, your browser may prompt you to save the metadata file.\n        \n    4.  Locate the row that starts with **AssertionConsumerService**, and copy and save the value of the **Location** field. It will be a URL of the form: `https://{yourDomain}/login/callback?connection={yourConnectionName}`. This is the URL on your SP tenant that receives the SAML assertion from the IdP tenant. In the next section, you will provide this URL to the IdP tenant so it knows where to send the SAML assertion.\n        \n\n## Add service provider metadata to IdP\n\nAdd information about the SP tenant to the IdP tenant so it knows how to receive and respond to SAML authentication requests.\n\n1.  Switch to your IdP tenant. Open the tenant menu, select **Switch Tenant**, and then select your IdP tenant.\n    \n2.  Go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select the name of the IdP application you created previously.\n    \n3.  Switch to the **Addons** view.\n    \n4.  Select **SAML2 Web App** to view its options, and locate the **Application Callback URL**. Paste the **AssertionConsumerService URL** that you copied previously.\n    \n5.  In the **Settings** code block, locate the `audience` key, and uncomment it, then remove the comma from the end of the line and replace the original value (`urn:foo`) with the **Entity ID** value you copied previously (including the connection name you created in Step 4 when you configured your service provider tenant). The new line should look like: \"`audience\":\"urn:auth0:{yourTenant}:{yourConnectionName}\"`.\n    \n6.  Select **Enable**.\n    \n\n## Test IdP\n\n1.  In the same window, scroll up, and select **Debug**. A login screen will appear.\n    \n2.  Log in with the credentials of the test user you created above. If your configuration is correct, it will display \"It works!\", and the encoded and decoded SAML response that would be sent to the IdP.\n    \n3.  Check the decoded SAML response, locate `<saml:Audience>`, and make sure it matches the **Entity ID** you entered on the previous screen.\n    \n4.  Select **Close this window**.\n    \n\n## Create application to test SAML connection\n\nCreate a simple application to test the SAML connection you created.\n\n1.  Switch to your SP tenant. Open the tenant menu, select **Switch Tenant**, and then select your SP tenant.\n    \n2.  Go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select **Create Application**.\n    \n3.  Enter an application name, select **Regular Web Application** as the application type, and then select **Create**.\n    \n4.  Copy and save the **Domain** and **Client ID** values.\n    \n5.  Locate the **Allowed Callback URLs** field, and enter `http://jwt.io`. This is the list of allowed callback URLs to which users will be redirected after authentication. The URL(s) entered here must match the callback URL in the HTML code created in the next step. Normally you would enter a URL for your application, but to keep this example simple, the test user will be sent to the Auth0 JWT online tool, which provides some information about the JSON Web Token (JWT) returned at the end of the authentication sequence.\n    \n6.  Select **Save Changes**.\n    \n7.  Switch to the **Connections** view, locate the SAML connection you created under the **Enterprise** section, and enable it.\n    \n\n## Test connection between service and identity provider\n\nTest to ensure the SAML configuration between your SP tenant and IdP tenant works.\n\n1.  Go to [Dashboard > Authentication > Enterprise](https://manage.auth0.com/#/connections/enterprise) and select **SAML**.\n    \n2.  Locate the SAML connection you created, and select the **Try** arrow icon. Since you previously logged in while testing this connection, you should be sent directly to the \"It works!\" screen. If you see the login screen, log in using your test user's credentials.\n    \n\nIf the configuration is set up correctly, you will see \"It works!\", and the page will display the contents of the SAML authentication assertion sent by the IdP tenant to the Auth0 tenant.\n\nIf it is not configured correctly, double-check your steps. If you are still having trouble, consult the troubleshooting section at the end of this document.\n\n## Create a web page for test application\n\nCreate a simple web page that invokes the Lock widget triggering the SAML login sequence.\n\n1.  Create an HTML page, and insert the following HTML and JavaScript code. Replace `{yourClientId}` and `{yourDomain}` with the actual values of the application you registered above. (If you did not note those values, you can find them in the **Application Settings** on your SP tenant.)\n    \n    ```\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <body>\n      <button type=\"button\" onclick=\"login()\">Log in</button>\n      <script src=\"https://cdn.auth0.com/js/auth0/9.19.0/auth0.min.js\"></script>\n      <script>\n        var auth0 = new auth0.WebAuth({\n          domain: YOUR_AUTH0_DOMAIN,\n          clientID: YOUR_CLIENT_ID,\n          redirectUri: URL_TO_THIS_PAGE,\n          responseType: 'token id_token',\n          scope: 'openid email profile'\n        })\n    \n        auth0.parseHash(function(err, data) {\n          if (err) {\n            console.log(err)\n          }\n    \n          if (data) {\n            console.log('Login successful!')\n            console.log(data)\n          }\n        })\n    \n        window.login = function() {\n          auth0.authorize()\n        }\n      </script>\n    \n    </body>\n    </html>\n    ```\n    \n2.  You can also replace `audience` with the appropriate value for your application, but for the purposes of this test, a placeholder is sufficient. If you do specify the `audience` parameter, ensure that it matches an identifier of an existing API you have configured in Auth0.\n    \n3.  Save the HTML file where you can access it from a browser.\n    \n\n## Test sample application\n\nTest the sample HTML application that uses the Auth0 SAML connection you created in your SP tenant to perform SSO authentication against the IdP tenant.\n\n1.  Open the HTML file you created above with a browser. You should see a login button.\n    \n2.  Click **Login**. You should see the Lock widget with one option. If you have other connections turned on for your application, the screen may look different. If you are prompted for an email address, make sure the email address you enter has the same domain name as the domain you entered in the **Settings** view for the application in the first tenant.\n    \n3.  Click the blue button, which may say **saml** or **ACCESS**. Whether you are prompted for credentials or immediately redirected to the callback URL depends on whether you still have an active session.\n    \n\n## Troubleshoot test scenario\n\n*   Clear your browser history and cookies each time before you test. If you do not, the browser may not pick up the latest version of your HTML page, or it may have stale cookies that affect execution.\n    \n*   Capture an HTTP trace of the interaction. Many tools will capture the HTTP traffic from your browser for analysis.\n    \n    *   Search the internet for \"HTTP Trace\" to find and install a tool.\n        \n    *   Capture the login sequence from start to finish and analyze the trace. Track the sequence of GETs to see how far in the expected sequence you get. You should see a redirect from your original site to the SP tenant and then to the IdP tenant, a POST of credentials if you had to log in, then a redirect back to the callback URL or the SP tenant, and then a redirect to the **Callback URL** specified in your application.\n        \n*   Ensure that cookies and JavaScript are enabled for your browser.\n    \n*   Ensure that the **Callback URL** specified in the HTML file is also listed in the **Allowed Callback URLs** field for your application. To do so, go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select the name of your application, then locate **Allowed Callback URLs**.\n    \n*   Use the [http://samltool.io](http://samltool.io/) tool to decode a SAML assertion.\n    \n\n## Learn more\n\n*   [SAML Single Sign-On Integrations](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations)\n*   [Customize SAML Assertions](https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/customize-saml-assertions)\n*   [Deprovision Users in SAML Integrations](https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/deprovision-users-in-saml-integrations)\n*   [SAML Identity Provider Configuration Settings](https://auth0.com/docs/authenticate/protocols/saml/saml-identity-provider-configuration-settings)\n*   [Sign and Encrypt SAML Requests](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/sign-and-encrypt-saml-requests)\n*   [Troubleshoot SAML Configurations](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-saml-configurations)",
    "title": "Test SAML SSO with Auth0 as Service Provider and Identity Provider",
    "description": "Describes how to configure SAML SSO with Auth0 as both the service provider and identity provider for testing.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations",
    "markdown": "# Create Organizations\n\n```\ncurl --request POST \\\n  --url https://%7ByourAuth0Domain/api/v2/organizations \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"ORG_NAME\", \"display_name\": \"ORG_DISPLAY_NAME\", \"branding\": [ { \"logo_url\": \"{orgLogo}\", \"colors\": [ { \"primary\": \"{orgPrimaryColor}\", \"page_background\": \"{orgPageBackground}\" } ] } ], \"metadata\": [ { \"{key}\": \"{value}\", \"{key}\": \"{value}\", \"{key}\": \"{value}\" } ] }, \"enabled_connections\": [ { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" }, { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" } ] }'\n```\n\n```\nvar client = new RestClient(\"https://%7ByourAuth0Domain/api/v2/organizations\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://%7ByourAuth0Domain/api/v2/organizations\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://%7ByourAuth0Domain/api/v2/organizations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://%7ByourAuth0Domain/api/v2/organizations',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer {yourMgmtApiAccessToken}',\n    'cache-control': 'no-cache'\n  },\n  data: '{ \"name\": \"ORG_NAME\", \"display_name\": \"ORG_DISPLAY_NAME\", \"branding\": [ { \"logo_url\": \"{orgLogo}\", \"colors\": [ { \"primary\": \"{orgPrimaryColor}\", \"page_background\": \"{orgPageBackground}\" } ] } ], \"metadata\": [ { \"{key}\": \"{value}\", \"{key}\": \"{value}\", \"{key}\": \"{value}\" } ] }, \"enabled_connections\": [ { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" }, { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" } ] }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"name\": \"ORG_NAME\", \"display_name\": \"ORG_DISPLAY_NAME\", \"branding\": [ { \"logo_url\": \"{orgLogo}\", \"colors\": [ { \"primary\": \"{orgPrimaryColor}\", \"page_background\": \"{orgPageBackground}\" } ] } ], \"metadata\": [ { \"{key}\": \"{value}\", \"{key}\": \"{value}\", \"{key}\": \"{value}\" } ] }, \"enabled_connections\": [ { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" }, { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" } ] }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://%7ByourAuth0Domain/api/v2/organizations\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://%7ByourAuth0Domain/api/v2/organizations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer {yourMgmtApiAccessToken}\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"%7ByourAuth0Domain/api/v2/organizations\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://%7ByourAuth0Domain/api/v2/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"ORG_NAME\\\", \\\"display_name\\\": \\\"ORG_DISPLAY_NAME\\\", \\\"branding\\\": [ { \\\"logo_url\\\": \\\"{orgLogo}\\\", \\\"colors\\\": [ { \\\"primary\\\": \\\"{orgPrimaryColor}\\\", \\\"page_background\\\": \\\"{orgPageBackground}\\\" } ] } ], \\\"metadata\\\": [ { \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\", \\\"{key}\\\": \\\"{value}\\\" } ] }, \\\"enabled_connections\\\": [ { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" }, { \\\"connection_id\\\": \\\"{connectionId}\\\", \\\"assign_membership_on_login\\\": \\\"{assignMembershipOption}\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer {yourMgmtApiAccessToken}\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ \"name\": \"ORG_NAME\", \"display_name\": \"ORG_DISPLAY_NAME\", \"branding\": [ { \"logo_url\": \"{orgLogo}\", \"colors\": [ { \"primary\": \"{orgPrimaryColor}\", \"page_background\": \"{orgPageBackground}\" } ] } ], \"metadata\": [ { \"{key}\": \"{value}\", \"{key}\": \"{value}\", \"{key}\": \"{value}\" } ] }, \"enabled_connections\": [ { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" }, { \"connection_id\": \"{connectionId}\", \"assign_membership_on_login\": \"{assignMembershipOption}\" } ] }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://%7ByourAuth0Domain/api/v2/organizations\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Create Organizations",
    "description": "Learn how to create Organizations using the Auth0 Dashboard and Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/disable-connections",
    "markdown": "# Disable Organization Connections\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections/CONNECTION_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Disable Organization Connections",
    "description": "Learn how to disable organization connections using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/saml-attribute-mapping-examples",
    "markdown": "# Map SAML Attributes with Auth0 as IdP/SAML Add-on\n\nWhen Auth0 is the IdP, you can map user attributes through Auth0's SAML2 add-on. Errors could occur if attributes are misconfigured. For example, a user enters username and password successfully, but fails to sign in to the application even though logs in the Auth0 Dashboard show successful login events. Or, your application is missing user information such as name or email.\n\n## Use cases\n\nThe user profile below is the example for the following scenarios.\n\n```\n//SAMPLE IdP User Profile\n{\n   \"created_at\": \"2021-06-21T13:26:08.579Z\",\n   \"email\": \"testuser@example.com\",\n...\n   \"fav_genre\": \"fiction\",\n   \"user_metadata\": {\n       \"fav_streaming_service\": \"hulu\"\n   }\n...\n}\n```\n\n#### No mappings object\n\nWhen using the SAML2 add-on, an empty mappings object generates by default.\n\nIn this example, `fav_genre` and `user_metadata.fav_streaming_service` are undefined but can be customized and mapped to the SAML Response populated by Auth0.\n\nIn the example below, `\"fav_genre\": \"fiction\"` gets mapped to the  [http://schemas.auth0.com/fav\\_genre](http://schemas.auth0.com/fav_food) attribute in the SAML Response with the `fiction` value while`\"user_metadata\": {\"fav_streaming_service\": \"hulu\"}` does not appear in the SAML response at all.\n\nResulting SAML Response that the IdP sends:\n\n```\n<samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ID=\"_e30cb5f29249a82846eb\" InResponseTo=\"_e33996d83f953ce46225185b3a1c0ad8\" Version=\"2.0\" IssueInstant=\"2021-11-03T21:34:42.493Z\" Destination=\"https://example-dev-tenant.us.auth0.com/login/callback\">\n...\n       <saml:AttributeStatement xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n           <saml:Attribute Name=\"http://schemas.auth0.com/fav_genre\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n               <saml:AttributeValue xsi:type=\"xs:string\">\n                   fiction\n               </saml:AttributeValue>\n           </saml:Attribute>\n...\n       </saml:AttributeStatement>\n   </saml:Assertion>\n</samlp:Response>\n```\n\n#### Standard mappings example\n\nIn the earlier example, not customizing the mappings object resulted in a [http://schemas.auth0.com/fav\\_genre](http://schemas.auth0.com/fav_food) attribute in the SAML Response with the `\"fiction\"` value.\n\nNext, map the attributes in the Mappings Object of the SAML2 add-on settings to account for that.\n\nAfter doing so, notice how the `\"fiction\"` value is the same in the SAML Response, but the attribute name in the SAML Response has been changed from the default [http://schemas.auth0.com/fav\\_fiction](http://schemas.auth0.com/fav_food) to [http://schemas.auth0.com/books](http://schemas.auth0.com/dinner).\n\nConfiguring the SAML2 add-on mappings object:\n\n```\n\"mappings\": {\n   \"fav_genre\": \"http://schemas.auth0.com/books\"\n }\n```\n\nThis mapping results in the following response:\n\n```\n<samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ID=\"_e30cb5f29249a82846eb\" InResponseTo=\"_e33996d83f953ce46225185b3a1c0ad8\" Version=\"2.0\" IssueInstant=\"2021-11-03T21:34:42.493Z\" Destination=\"https://example-dev-tenant.us.auth0.com/login/callback\">\n...\n       <saml:AttributeStatement xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n           <saml:Attribute Name=\"http://schemas.auth0.com/books\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n               <saml:AttributeValue xsi:type=\"xs:string\">\n                   fiction\n               </saml:AttributeValue>\n           </saml:Attribute>\n...\n       </saml:AttributeStatement>\n   </saml:Assertion>\n</samlp:Response>\n```\n\n#### Mapping the same value to multiple attributes\n\nThere may be scenarios where mapping the SAML Response to multiple attributes with the same value is required.\n\nIn this case, there is the option to map the same value from the user profile to multiple attributes in the SAML Response.\n\nHow to configure the SAML2 add-on mappings object:\n\n```\n\"mappings\": {\n   \"fav_genre\": [\n     \"http://schemas.auth0.com/movies\",\n     \"http://schemas.auth0.com/books\",\n     \"http://schemas.auth0.com/television\"\n   ]\n }\n```\n\nThis mapping results in the following response:\n\n```\n<samlp:Response xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ID=\"_e30cb5f29249a82846eb\" InResponseTo=\"_e33996d83f953ce46225185b3a1c0ad8\" Version=\"2.0\" IssueInstant=\"2021-11-03T21:34:42.493Z\" Destination=\"https://example-dev-tenant.us.auth0.com/login/callback\">\n...\n       <saml:AttributeStatement xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n           <saml:Attribute Name=\"http://schemas.auth0.com/movies\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n               <saml:AttributeValue xsi:type=\"xs:string\">\n                   fiction\n               </saml:AttributeValue>\n           </saml:Attribute>\n           <saml:Attribute Name=\"http://schemas.auth0.com/books\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n               <saml:AttributeValue xsi:type=\"xs:string\">\n                   fiction\n               </saml:AttributeValue>\n           </saml:Attribute>\n           <saml:Attribute Name=\"http://schemas.auth0.com/television\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n               <saml:AttributeValue xsi:type=\"xs:string\">\n                   fiction\n               </saml:AttributeValue>\n           </saml:Attribute>\n...\n       </saml:AttributeStatement>\n   </saml:Assertion>\n</samlp:Response>\n```",
    "title": "Map SAML Attributes with Auth0 as IdP/SAML Add-on",
    "description": "Provides examples how to map SAML attributes when Auth0 is the identity provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/send-membership-invitations",
    "markdown": "# Send Organization Membership Invitations\n\nYou can send [organization](https://auth0.com/docs/manage-users/organizations/organizations-overview) membership invitations to users using either the Auth0 Dashboard or the Management API.\n\n## Auth0 Dashboard\n\nTo invite members via the Auth0 Dashboard:\n\n1.  Navigate to [Auth0 Dashboard > Organizations](https://manage.auth0.com/#/organizations), and select the organization for which you want to configure membership.\n    \n2.  Select the **Invitations** view, and select **Invite Members**.\n    \n3.  Select the Application to which you would like to invite the member, enter the email address of the user you would like to invite to the organization, and select **Send Invite(s)**.\n    \n\n## Management API\n\nTo invite members via the Management API: Make a `POST` call to the Create Organization Invitations endpoint. Be sure to replace `ORG_ID`, `MGMT_API_ACCESS_TOKEN`, `NAME_OF_USER`, `EMAIL_ADDRESS`, `CLIENT_ID`, `CONNECTION_ID`, `EXP_TIME`, `ROLE_ID`, and `SEND_INVITATION_EMAIL_OPTION` placeholder values with your organization ID, Management API Access Token, name of invited user, email address of invited user, client ID, connection ID, expiration time, and role IDs, respectively.\n\n```\n{\n  \"method\": \"POST\",\n  \"url\": \"https://YOUR_AUTH0_DOMAIN/api/v2/organizations/ORG_ID/invitations\",\n\"headers\": [\n  { \"name\": \"Content-Type\", \"value\": \"application/json\" },\n  { \"name\": \"Authorization\", \"value\": \"Bearer MGMT_API_ACCESS_TOKEN\" },\n  { \"name\": \"Cache-Control\", \"value\": \"no-cache\" }\n  ],\n  \"postData\": {\n  \"mimeType\": \"application/json\",\n  \"text\" : \"{ \\\"inviter\\\": { \\\"name\\\": \\\"NAME_OF_USER\\\"}, \\\"invitee\\\": { \\\"email\\\": \\\"EMAIL_ADDRESS\\\" }, \\\"client_id\\\": \\\"CLIENT_ID\\\", \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"ttl_sec\\\": \\\"EXP_TIME\\\", \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ], \\\"send_invitation_email\\\": \\\"SEND_EMAIL_INVITATION_OPTION\\\" }\"\n  }\n}\n```\n\n| Value | Description |\n| --- | --- |\n| `ORG_ID` | ID of the organization for which you want to assign membership. |\n| `MGMT_API_ACCESS_TOKEN` | [Access Token for the Management API](https://auth0.com/docs/tokens/management-api-access-tokens) with the scope `create:organization_invitations`. |\n| `NAME_OF_USER` | Name of the user to whom you want to send the invitation. Maximum of 300 characters. |\n| `EMAIL_ADDRESS` | Email address to which the invitation should be sent. |\n| `CLIENT_ID` | ID of the application to which the invited user should authenticate. |\n| `CONNECTION_ID` | ID of the connection through which the invited member should authenticate. |\n| `EXP_TIME` | Number of seconds before the invitation expires. If unspecified or set to 0, defaults to 604800 seconds (7 days). Maximum of 2592000 seconds (30 days). |\n| `ROLE_ID` | ID of the role(s) you want to assign to the invited user for the specified organization. Maximum of 50 roles per member. |\n| `SEND_INVITATION_EMAIL_OPTION` | Indicates whether Auth0 should send the email. Values are `true` or `false`. When set to `false`, Auth0 will generate an invitation URL that you can deliver to users through your own email service. |\n\n### Response status codes\n\nPossible response status codes are as follows:\n\n| Status code | Error code | Message | Cause |\n| --- | --- | --- | --- |\n| `200` |     | Invitation successfully created. |     |\n| `400` | `invalid_body` | The specified client\\_id does not exist. | The request payload is not valid. |\n| `400` | `invalid_body` | The specified connection does not exist. | The request payload is not valid. |\n| `400` | `invalid_body` | Passwordless connections are not supported. | The request payload is not valid. |\n| `400` | `invalid_body` | A default login route is required to generate the invitation url. To learn more, see [Configure default login routes](https://auth0.com/docs/universal-login/configure-default-login-routes). | The request payload is not valid. |\n| `400` | `invalid_body` | One or more of the specified roles do not exist: role1, role2'. | The request payload is not valid. |\n| `400` | `invalid_body` | Invalid request body. The message will vary depending on the cause. | The request payload is not valid. |\n| `400` | `invalid_query_string` | Invalid request query string. The message will vary depending on the cause. | The query string is not valid. |\n| `401` |     | Invalid token. |     |\n| `401` |     | Invalid signature received for JSON Web Token validation. |     |\n| `401` |     | Client is not global. |     |\n| `403` | `insufficient_scope` | Insufficient scope; expected any of: `create:organization_invitations`. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `404` |     | No organization found by that id. |     |\n| `429` |     | Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers. |     |",
    "title": "Send Organization Membership Invitations",
    "description": "Learn how to send membership invitations for Organizations using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/delete-organizations",
    "markdown": "# Delete Organizations\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/organizations/ORG_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/organizations/ORG_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Delete Organizations",
    "description": "Learn how to delete Organizations using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior",
    "markdown": "# Define Organization Behavior\n\nWhen representing your application in Auth0, you can specify what types of users the application should support. Some applications support individuals logging in with personal accounts, while others are intended for use by members of [organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview). Some should support both. This is known as organization behavior and can be set for each application that you connect to Auth0.\n\nFor example, your application could have:\n\n*   A generic marketing landing page that has a **Log in** button that takes your users to the Auth0 login flow without an Organization.\n    \n*   A separate URL for each of your B2B customers (e.g., Acme users go to `acme.yourcompany.com`) that redirects users to Auth0 with an Organization, so that your users see Acme’s SSO Login button.\n    \n\nYou can define Organization behavior to allow either of these scenarios. Additionally, you can configure Organization behavior such that if your application requires that an Organization be provided but your user accidentally is sent to Auth0 without an organization, they would see a prompt that would allow them to enter the name of their organization.\n\nYou can define organization behavior using either the Auth0 Dashboard or the Management API.\n\n## Auth0 Dashboard\n\nTo define organization behavior via the Auth0 Dashboard:\n\n1.  Navigate to [Auth0 Dashboard > Applications](https://manage.auth0.com/#/applications), and select the application for which you want to configure organizations.\n    \n2.  Select the **Organizations** view and configure the appropriate settings:\n    \n    | **Field** | **Description** | **API Mapping** |\n    | --- | --- | --- |\n    | **Type of Users** | Determines which category of users can log in to your application.<br><br>Options include:<br><br>*   **Individuals**: Users can sign up with a personal account and log directly in to your application. Individual users cannot log in using an Organization.<br>*   **Business Users**: Users must be a member of an Organization in order to log in. When selected, you must either provide an Organization when you redirect users to the `/authorize` endpoint or set your Login Flow to Prompt for Organization.<br>*   **Both**: Users can log in as an Organization member or sign up with a personal account. | **Type of Users** maps to `organization_usage`<br><br>Options:<br><br>*   **Individuals** maps to `deny`<br>*   **Business Users** maps to `require`<br>*   **Both** maps to `allow` |\n    | **Login Flow** | Determines the initial login prompt presented to users when they access your application. You can only configure this field if Type of Users is set to Businsess Users or Both.<br><br>Options include:<br><br>*   **Prompt for Credentials**: Users are first asked to provide their login credentials. After logging in, users can select their Organization.<br>*   **Prompt for Organization**: Users are first asked to select their Organization. Then, they can provide their credentials to log in. You can only use this option if you set Type of Users to Business Users.<br>*   **No Prompt**: Auth0 does not dictate which login prompt is given to users. Instead, your application is responsible for sending the required parameters to Auth0 to display the appropriate prompt. | **Login Flow** maps to `organization_require_behavior`<br><br>Options:<br><br>*   **Prompt for Credentials** maps to `post_login_prompt`<br>*   **Prompt for Organization** maps to `pre_login_prompt`<br>*   **No Prompt** maps to `no_prompt` |\n    \n3.  Select **Save changes**.\n    \n\n## Management API\n\nMake a `PATCH` call to the [Update a Client endpoint](https://auth0.com/docs/api/management/v2#!/Clients/patch_clients_by_id). Be sure to replace `client_id`, `mgmt_api_access_token`, `organization_usage`, and `organization_require_behavior` placeholder values with your client ID, Management API Access Token, organization use option, and organization behavior option, respectively.\n\n*   [cURL](#4af1448a89374d8aad58164b823b4892_shell)\n*   [C#](#4af1448a89374d8aad58164b823b4892_csharp)\n*   [Go](#4af1448a89374d8aad58164b823b4892_go)\n*   [Java](#4af1448a89374d8aad58164b823b4892_java)\n*   [Node.JS](#4af1448a89374d8aad58164b823b4892_node)\n*   [Obj-C](#4af1448a89374d8aad58164b823b4892_objc)\n*   [...](#)\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/clients/CLIENT_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"organization_usage\": \"ORG_USAGE\", \"organization_require_behavior\": \"ORG_REQUIRE_BEHAVIOR\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/clients/CLIENT_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/clients/CLIENT_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/clients/CLIENT_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/clients/CLIENT_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    organization_usage: 'ORG_USAGE',\n    organization_require_behavior: 'ORG_REQUIRE_BEHAVIOR'\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"organization_usage\": @\"ORG_USAGE\",\n                              @\"organization_require_behavior\": @\"ORG_REQUIRE_BEHAVIOR\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/clients/CLIENT_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/clients/CLIENT_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/clients/CLIENT_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/clients/CLIENT_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"organization_usage\\\": \\\"ORG_USAGE\\\", \\\"organization_require_behavior\\\": \\\"ORG_REQUIRE_BEHAVIOR\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"organization_usage\": \"ORG_USAGE\",\n  \"organization_require_behavior\": \"ORG_REQUIRE_BEHAVIOR\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/clients/CLIENT_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n| Value | Description |\n| --- | --- |\n| `CLIENT_ID` | ID of the application for which you want to add organization behavior. |\n| `MGMT_API_ACCESS_TOKEN` | [Access Tokens for the Management API](https://auth0.com/docs/tokens/management-api-access-tokens) with the scope `update:clients`. |\n| `ORGANIZATION_USAGE` | Dictates whether your application can support users logging into an organization. Options include:<br><br>*   `deny`: (Default) Users cannot log in using an organization.<br>*   `allow`: Users can log in with or without an Organization. When selected, you must provide an organization when you redirect users to the `/authorize` endpoint.<br>*   `require`: Users must log in using an organization. When selected, you must either provide an organization when you redirect users to the `/authorize` endpoint or set `organization_require_behavior` to `pre_login_prompt` to allow users to choose an organization before they log in. |\n| `ORGANIZATION_REQUIRE_BEHAVIOR` | Determines the Login Flow presented to users accessing your application. Only applicable when `organization_usage` is set to `require` or `allow`.<br><br>Options include:<br><br>*   `no_prompt`: (Default) Display no prompt. Requests without a valid organization parameter are rejected.<br>*   `pre_login_prompt`: Prompt users to select an Organization before they can log in. You can only use this option if `organization_usage` is set to `require`.<br>*   `post_login_prompt`: Prompt users to log in with their credentials. After they log in, prompt users to select their Organization. |\n\n### Response status codes\n\nPossible response status codes are as follows:\n\n| Status code | Error code | Message | Cause |\n| --- | --- | --- | --- |\n| `200` |     | Client successfully updated. |     |\n| `400` | `invalid_uri` | Invalid request URI. The message will vary depending on the cause. | The path is not valid. |\n| `400` | `invalid_body` | Invalid request body. The message will vary depending on the cause. | The request payload is not valid. |\n| `401` |     | Invalid token. |     |\n| `401` |     | Client is not global. |     |\n| `401` |     | Invalid signature received for JSON Web Token validation. |     |\n| `403` | `insufficient_scope` | Insufficient scope; expected any of: `update:clients`. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `403` | `insufficient_scope` | Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes. | Tried to read/write a field that is not allowed with provided bearer token scopes. |\n| `403` | `operation_not_supported` | The account is not allowed to perform this operation. | The account is not allowed to perform this operation. |\n| `404` | `inexistent_client` | Client not found. | Inexistent resource. Specified application does not exist. |\n| `429` |     | Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers. |     |",
    "title": "Define Organization Behavior",
    "description": "Learn to define organization behavior within applications for Auth0's Organizations feature.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/assign-members",
    "markdown": "# Assign Members to an Organization\n\n```\ncurl --request POST \\\n  --url https://your_auth0_domain/api/v2/organizations/ORG_ID/members \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"members\": [ \"USER_ID\", \"USER_ID\", \"USER_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\"\n\n\tpayload := strings.NewReader(\"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://your_auth0_domain/api/v2/organizations/ORG_ID/members',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {members: ['USER_ID', 'USER_ID', 'USER_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"members\": @[ @\"USER_ID\", @\"USER_ID\", @\"USER_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"your_auth0_domain\")\n\npayload = \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/api/v2/organizations/ORG_ID/members\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"members\": [\"USER_ID\", \"USER_ID\", \"USER_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://your_auth0_domain/api/v2/organizations/ORG_ID/members\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Assign Members to an Organization",
    "description": "Learn how to assign members directly to an Organization using either the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/remove-members",
    "markdown": "# Remove Members From Organizations\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/members' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --data '{ \"members\": [ \"USER_ID\", \"USER_ID\", \"USER_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"undefined\", \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\"\n\n\tpayload := strings.NewReader(\"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/members',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN', 'cache-control': 'no-cache'},\n  data: {members: ['USER_ID', 'USER_ID', 'USER_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"members\": @[ @\"USER_ID\", @\"USER_ID\", @\"USER_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/organizations/ORG_ID/members\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"members\\\": [ \\\"USER_ID\\\", \\\"USER_ID\\\", \\\"USER_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"members\": [\"USER_ID\", \"USER_ID\", \"USER_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/members\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Remove Members From Organizations",
    "description": "Learn how to remove members from Organizations directly using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/grant-just-in-time-membership",
    "markdown": "# Grant Just-In-Time Membership to an Organization Connection\n\nGranting just-in-time membership allows users that log in via an enabled connection to automatically be given membership to an [organization](https://auth0.com/docs/manage-users/organizations/organizations-overview).\n\nTo automatically grant membership when users log in to an organization, you must first [configure and enable a connection](https://auth0.com/docs/manage-users/organizations/configure-organizations/enable-connections) for the organization. While enabling your connection, select **Enable Auto-Membership** to allow all users logging in with the connection to be automatically added as members of this organization.",
    "title": "Grant Just-In-Time Membership to an Organization Connection",
    "description": "Learn how to grant Just-in-Time (JIT) membership to organizations.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/remove-member-roles",
    "markdown": "# Remove Roles from Organization Members\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --data '{ \"roles\": [ \"ROLE_ID\", \"ROLE_ID\", \"ROLE_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"undefined\", \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\"\n\n\tpayload := strings.NewReader(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN', 'cache-control': 'no-cache'},\n  data: {roles: ['ROLE_ID', 'ROLE_ID', 'ROLE_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"roles\": @[ @\"ROLE_ID\", @\"ROLE_ID\", @\"ROLE_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"roles\": [\"ROLE_ID\", \"ROLE_ID\", \"ROLE_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/members/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Remove Roles from Organization Members",
    "description": "Learn how to remove roles from Organization members using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/search-for-organizations",
    "markdown": "# Search for Organizations\n\nWhen working with [organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview), you may need to search for organizations by name or display name. You can do this using the Auth0 Dashboard.\n\n![Auth0 Dashboard - Organization Search Options - Name and Display Name](https://images.ctfassets.net/cdy7uua7fh8z/5CeeKLjPGxjTqy682lbnyj/7aa9ea469b3825f2ffac4b491262e6ad/dashboard-organizations-search-options.png)\n\nResults will be returned if the entered text is found within the field being searched. For example, if there is an Organization named \"Big Holdings Co\" and the search term provided is `hold` or `ings`, the Big Holdings organization will be returned.\n\n![Auth0 Dashboard - Search Organizations](https://images.ctfassets.net/cdy7uua7fh8z/73GgvbfKT5zgTVCHNQYMqh/9687c90727da8c631082a25b946ab183/dashboard-organizations-search.png)\n\nSearch for Organizations returns a maximum of 50 results. If the desired result isn’t located, use a more specific search term.\n\nNote that searching for Organizations is eventually consistent, meaning that recently created or modified Organizations entities might not show up immediately in search results, but the results will eventually be accurate.",
    "title": "Search for Organizations",
    "description": "Learn how to search for Organizations using the Auth0 Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/organizations/configure-organizations/retrieve-connections",
    "markdown": "# Retrieve Organization Connections\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/organizations/ORG_ID/enabled_connections\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Retrieve Organization Connections",
    "description": "Learn how to retrieve Organization connections using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/actions/get-actions",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/customize/email/configure-a-custom-email-provider/action-triggers-custom-email-provider-event-object",
    "markdown": "# Action Triggers: custom-email-provider Event Object\n\nThe `event` object for the `custom-email-provider` Actions trigger provides contextual information about email data.\n\n| Property | Description |\n| --- | --- |\n| `event.client` | Information about the Client with which this login transaction was initiated.<br><br>Includes the following properties:<br><br>*   `client_id` _String_. The client ID of the application the user is logging in to.<br>*   `metadata` _Dictionary_. An object for holding other application properties.<br>*   `name` _String_. The name of the application (as defined in the Dashboard). |\n| `event.connection`<br><br>_(Optional)_ | Details about the Connection that was used to authenticate the user.<br><br>Includes the following properties:<br><br>*   `id` _String_. The connection's unique identifier.<br>*   `metadata` _Optional dictionary_. Metadata associated with the connection.<br>*   `name` _String_. The name of the connection used to authenticate the user (such as `twitter` or `some-g-suite-domain`).<br>*   `strategy` _String_. The type of connection. For social connections, `event.connection.strategy === event.connection.name`. For enterprise connections, the strategy is `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `event.notification` | Includes the following properties:<br><br>*   `html` _String_. Rendered HTML template.<br>*   `locale` _String_. The locale we rendered the message in, for example `en_US`, as defined in the BCP-47 specification.<br>*   `message_type` _String_.<br>    <br>    The type of message that is being send, like `verify_email` or `welcome_email`.<br>    <br>    Possible values include:<br>    <br>    *   `verify_email`<br>    *   `verify_email_by_code`<br>    *   `reset_email`<br>    *   `welcome_email`<br>    *   `verification_code`<br>    *   `mfa_oob_code`<br>    *   `enrollment_email`<br>    *   `blocked_account`<br>    *   `stolen_credentials`<br>    *   `try_provider_configuration_email`<br>    *   `organization_invitation`<br>*   `text` _String_. Rendered text template.<br>*   `to` _String_. Email address of the recipient. |\n| `event.organization`<br><br>_(Optional)_ | Details about the Organization associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `display_name` _String_. The friendly name of the Organization.<br>*   `id` _String_. The Organization identifier.<br>*   `metadata` _Dictionary_. Metadata associated with the Organization.<br>*   `name` _String_. The name of the Organization. |\n| `event.request` | Includes the following properties:<br><br>*   `geoip` _Optional object_.<br>    <br>    Includes the following properties:<br>    <br>    *   `countryCode` _Optional string_.<br>*   `ip` _Optional string_. The originating IP address of the request.<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.tenant` | Includes the following properties:<br><br>*   `friendly_name` _Optional string_. The friendly name for the tenant, usually a more human-readable version of the ID.<br>*   `home_url` _Optional string_. The home URL for the tenant, if defined and as found in its settings.<br>*   `id` _String_. The name of the tenant.<br>*   `logo_url` _Optional string_. The logo URL for the tenant, if defined and as found in its settings.<br>*   `support_email` _Optional string_. The email to the tenant's support service, if defined and as found in its settings.<br>*   `support_url` _Optional string_. The url to the tenant's support service, if defined and as found in its settings. |\n| `event.user` | An object describing the user on whose behalf the current transaction was initiated.<br><br>Includes the following properties:<br><br>*   `app_metadata` _Dictionary_. Custom fields that store information about a user that influences the user's access, such as support plan, security roles, or access control groups.<br>*   `email` _Optional string_. (unique) User's email address.<br>*   `email_verified` _Boolean_. Indicates whether the user has verified their email address.<br>*   `family_name` _Optional string_. User's family name.<br>*   `given_name` _Optional string_. User's given name.<br>*   `name` _Optional string_. User's full name.<br>*   `nickname` _Optional string_. User's nickname.<br>*   `picture` _Optional string_. URL pointing to the [user's profile picture](https://auth0.com/docs/users/change-user-picture).<br>*   `user_id` _String_. (unique) User's unique identifier.<br>*   `user_metadata` _Dictionary_. Custom fields that store information about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences.<br>*   `username` _Optional string_. (unique) User's username. |\n\n## Learn more\n\n*   [Configure a Custom Email Provider](https://auth0.com/docs/customize/email/configure-a-custom-email-provider)\n*   [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action)\n*   [Understand How Auth0 Actions Work](https://auth0.com/docs/customize/actions/actions-overview)\n*   [Action Coding Guidelines](https://auth0.com/docs/customize/actions/action-coding-guidelines)\n*   [Actions Limitations](https://auth0.com/docs/customize/actions/limitations)",
    "title": "Action Triggers: custom-email-provider Event Object",
    "description": "Learn about the custom-email-provider Action trigger's event object, which provides contextual information about the message data.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-lock",
    "markdown": "# GDPR: Track Consent with Lock\n\nIn this tutorial, we will see how you can use Lock to ask for consent information, and then save this input in the user's metadata. To learn more, read [Understand How Metadata Works in User Profiles](https://auth0.com/docs/manage-users/user-accounts/metadata).\n\nIf you would instead like to track consent using a custom UI, see [GDPR: Track Consent with Custom UI](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-custom-ui).\n\nThe contents of this document are **not** intended to be legal advice, nor should they be considered a substitute for legal assistance. The final responsibility for understanding and complying with GDPR resides with you, though Auth0 will assist you in meeting GDPR requirements where possible.\n\n## Overview\n\nWe will configure a simple JavaScript Single-Page Application and a database connection (we will use Auth0's infrastructure, instead of setting up our own database).\n\nInstead of building an app from scratch, we will [use Auth0's JavaScript Quickstart sample](https://auth0.com/docs/quickstart/spa/vanillajs). We will also use Auth0's Universal Login pages so we can implement a Universal Login experience, instead of embedding the login in our app. To learn more about Universal Login, read [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login). To learn more about the differences between Universal Login and embedded login, read [Centralized Universal Login vs. Embedded Login](https://auth0.com/docs/authenticate/login/universal-vs-embedded-login).\n\nWe will capture consent information, under various scenarios, and save this at the user's metadata.\n\nAll scenarios will save the following properties at the user's metadata:\n\n*   a `consentGiven` property, with true/false values, shows if the user has provided consent (true) or not (false)\n    \n*   a `consentTimestamp` property, holding the Unix timestamp of when the user-provided consent\n    \n\nFor example:\n\n```\n{\n  \"consentGiven\": \"true\"\n  \"consentTimestamp\": \"1525101183\"\n}\n```\n\nWe will see three different implementations for this:\n\n*   one that displays links to other pages where the Terms & Conditions and/or privacy policy information can be reviewed\n    \n*   one that adds custom fields at the signup widget and works for database connections\n    \n*   one that redirects to another page where the user can provide consent, and works for social connections\n    \n\n## Configure the application\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and create a new application. Choose `Single Web Page Applications` as type.\n    \n2.  Go to **Settings** and set the **Allowed Callback URLs** to `http://localhost:3000`.\n    \n    This field holds the set of URLs to which Auth0 is allowed to redirect the users after they authenticate. Our sample app will run at `http://localhost:3000` hence we set this value.\n    \n3.  Copy the **Client Id** and **Domain** values. You will need them in a while.\n    \n4.  Go to [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database) and create a new connection. Click **Create DB Connection**, set a name for the new connection, and click **Save**. You can also enable a social connection at [Auth0 Dashboard > Authentication > Social](https://manage.auth0.com/#/connections/social) (we will enable Google login for the purposes of this tutorial).\n    \n5.  Go to the connection's **Applications** tab and make sure your newly created application is enabled.\n    \n6.  [Download the JavaScript SPA Sample](https://auth0.com/docs/quickstart/spa/vanillajs).\n    \n\n## Option 1: Display Terms & Conditions link\n\nIn this section, we will customize the login widget to add a flag that users must check in order to sign up. The flag's label will include links to pages that display the Terms & Conditions and privacy policy.\n\nThis works both for database connections and social logins.\n\n1.  Go to [Auth0 Dashboard > Branding > Universal Login](https://manage.auth0.com/#/login_page).\n    \n2.  Select the **Login** view, and enable the **Customize Login Page** toggle.\n    \n3.  Locate the **Default Templates** dropdown, and select `Lock`. The code block will be pre-populated for you.\n    \n4.  To add a field for the `consentGiven` metadata, use the `mustAcceptTerms` option. To include links to your Terms & Conditions and/or privacy policy pages, use the `languageDictionary` option. To learn more, read [Lock Configuration Options](https://auth0.com/docs/libraries/lock/lock-configuration). The example below displays text that says `I agree to the terms of service and privacy policy` (including links to both pages) next to the flag: \n    \n    ```\n    //code reducted for simplicity\n        var lock = new Auth0Lock(config.clientID, config.auth0Domain, {\n          auth: {\n            //code reducted for simplicity\n          },\n          languageDictionary: {\n            signUpTerms: \"I agree to the <a href='https://my-app-url.com/terms' target='_blank'>terms of service</a> and <a href='https://my-app-url.com/privacy' target='_blank'>privacy policy</a>.\"\n          },\n          mustAcceptTerms: true,\n          //code reducted for simplicity\n        });\n    ```\n    \n    To see what this will look like, select the **Preview** view, then when Lock loads, select **Sign Up**.\n5.  This flag forces users to accept the terms before they can sign up, but it does not set any metadata. To save the user's selection in the `consentGiven` metadata property, [create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action). Enter a descriptive **Name** for your Action (for example, `Set consent flag upon signup`), select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow, then select **Create**.\n    \n6.  The following screen is the Actions code editor. Copy the following JavaScript code into it, then select **Save Draft** to save your changes:\n    \n    ```\n    exports.onExecutePostLogin = async (event, api) => {\n      const { consentGiven } = event.user.user_metadata || {};\n    \n      // short-circuit if the user signed up already\n      if ( consentGiven ) {\n        return;\n      }\n    \n      // first time login/signup\n      api.user.setUserMetadata(\"consentGiven\", true);\n      api.user.setUserMetadata(\"consentTimestamp\", Date.now());\n      return;\n    }\n    ```\n    \n    This code sets the `consentGiven` metadata to `true` if it is not already set (which means it's the first login after a signup).\n7.  From the Actions Code Editor sidebar, select Test (play icon), then select **Run** to [test your code](https://auth0.com/docs/customize/actions/test-actions).\n    \n8.  When you’re ready for the Action to go live, select **Deploy**.\n    \n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\n## Option 2: Add custom fields for database connections\n\nIn this section, we will customize the login widget to add a flag that users will check if they agree to the processing of their information.\n\nThis works only for database connections (if you use social logins, see the next paragraph).\n\n1.  Navigate to [Auth0 Dashboard > Branding > Universal Login](https://manage.auth0.com/#/login_page).\n    \n2.  Select the **Login** view, and enable the **Customize Login Page** toggle.\n    \n3.  Locate the **Default Templates** dropdown, and select `Lock`. The code block will be pre-populated for you.\n    \n4.  To add a field for the `consentGiven` metadata, use the `additionalSignUpFields` option. To learn more, read [Lock Configuration Options](https://auth0.com/docs/libraries/lock/lock-configuration). The example below sets the type to `checkbox` (so we have a flag), the label to `I consent to data processing`, and the default value to `checked`.\n    \n    ```\n    //code reducted for simplicity\n        var lock = new Auth0Lock(config.clientID, config.auth0Domain, {\n          auth: {\n            //code reducted for simplicity\n          },\n          additionalSignUpFields: [{\n            type: \"checkbox\",\n            name: \"consentGiven\",\n            prefill: \"true\",\n            placeholder: \"I consent to data processing\"\n          }],\n          //code reducted for simplicity\n        });\n    ```\n    \n5.  To see what this will look like, select the **Preview** view, and when Lock loads, select **Sign Up**.\n    \n\nNote that in this option, we only set the flag and not the timestamp. Displaying the current time in the login widget is not optimal, that's why we didn't add an additional signup field. What you should do is set the timestamp in the background, with a rule that will check the value of `consentGiven` and set the additional `consentTimestamp` metadata to the current timestamp.\n\n## Option 3: Redirect to another page\n\nIf you are using social logins, adding custom fields is not an option, but you can redirect the user to another page where you ask for consent and any additional info, and then redirect back to finish the authentication transaction. This can be done with Redirect Actions. To learn more, read [Redirect with Actions](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions). We will use this same Action to save the consent information in the user's metadata, so we can track this information and not ask for consent upon the next login.\n\nFor simplicity, we will use a [sample consent form](https://github.com/auth0/rules/blob/master/redirect-rules/simple/webtask.js#L31). You will need to host this form, and the URL for the form must be publicly-accessible. You'll need to provide the URL where the form can be accessed to Auth0 in Step 2. If you need a specialized consent prompt (for example, a parental consent), you must build your own custom consent form. Be aware that laws vary according to country.\n\n1.  [Create a new Action](https://auth0.com/docs/customize/actions/write-your-first-action). Enter a descriptive **Name** for your Action (for example, `Redirect to consent form`), select the `Login / Post Login` trigger because you’ll be adding the Action to the Login flow, then select **Create**.\n    \n2.  Locate the Actions Code Editor, and select the **Secrets** (key) icon in its sidebar. Add the consent form URL as a Secret by creating a key/value pair:\n    \n    *   **Key**: `CONSENT_FORM_URL`\n        \n    *   **Value**: `your-consent-form-url.com` (Be sure to provide the publicly-accessible URL where your consent form can be found.)\n        \n3.  Copy the following JavaScript code into the Actions Code Editor, and select **Save Draft** to save your changes:\n    \n    ```\n    exports.onExecutePostLogin = async (event, api) => {\n        const { consentGiven } = event.user.user_metadata || {};\n    \n        // redirect to consent form if user has not yet consented\n        if (!consentGiven && api.redirect.canRedirect()) {\n          const options = {\n            query: {\n              auth0_domain: `${event.tenant.id}.auth0.com`,\n            },\n          };\n          api.redirect.sendUserTo(event.secrets.CONSENT_FORM_URL, options);\n        }\n    };\n    \n    // if user clicks 'I agree' on the consent form, save it to their profile so they don't get prompted again\n    exports.onContinuePostLogin = async (event, api) => {\n      if (event.request.body.confirm === \"yes\") {\n        api.user.setUserMetadata(\"consentGiven\", true);\n        api.user.setUserMetadata(\"consentTimestamp\", Date.now());\n        return;\n      } else {\n        return api.access.deny(\"User did not consent\");\n      }\n    };\n    ```\n    \n4.  From the Actions Code Editor sidebar, select Test (play icon), then select **Run** to [test your code](https://auth0.com/docs/customize/actions/test-actions).\n    \n5.  When you’re ready for the Action to go live, select **Deploy**.\n    \n\nFinally, add the Action you created to the [Login Flow](https://manage.auth0.com/#/actions/flows/login/). To learn how to attach Actions to Flows, read the \"Attach the Action to a flow\" section in [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\nWhen setting up redirection to your consent form for use in a Production environment, be sure to review [Trusted Callback URLs](https://github.com/auth0/rules/tree/master/redirect-rules/simple#trusted-callback-urls) and [Data Integrity](https://github.com/auth0/rules/tree/master/redirect-rules/simple#data-integrity) regarding security concerns.\n\nWe are done with the configuration part; let's test!\n\n## Test the configuration\n\n1.  Go to the folder where you downloaded the application and run it.\n    \n2.  Go to `http://localhost:3000`. Click **Login**. Once Lock is displayed, click **Sign Up**. The login page will be served by default at `YOUR_DOMAIN/login`. To learn how to use your own domain, read [Custom Domains](https://auth0.com/docs/customize/custom-domains).\n    \n3.  If you followed the first implementation option, you should see the flag to accept the terms of service and privacy policy. Note that the **Sign up** button remains disabled until you check the flag. Follow the links to check they are working. Set an email and password and accept the terms and click **Sign Up**. Alternatively, if you use a social connection, accept the terms, and choose **Sign Up with Google**.\n    \n4.  If you followed the second implementation option, you should see the new custom field we added. Set an email and password and leave the `I consent to data processing` flag checked. Click **Sign Up**.\n    \n    ![Application Sign Up Widget Lock Signup New Field](https://images.ctfassets.net/cdy7uua7fh8z/4eYL5N5DshzunjsnkiBha2/3b98225aec012fe2253cc4fb902bbd65/lock-signup-new-field.png)\n5.  If you followed the third implementation option, choose **Sign Up with Google**. You will be navigated to the consent form. Check the **I agree** flag and click **Submit**.\n    \n    ![Application Sign Up Widget Lock Consent Form Agree](https://images.ctfassets.net/cdy7uua7fh8z/dk2NIuhs47m3eU28cgEkI/0d73b6c33d438da1e82454da17ce8e6a/lock-consent-form-agree.png)\n    \n    If you do not check the **I agree** flag before clicking **Submit**, then you will see a popup error `Unauthorized. Check the console for details.`. At the console you will see this JSON:\n    \n    ```\n    {\n          error: \"unauthorized\", \n          errorDescription: \"User did not consent!\", \n          state: \"q0GjMwzZN_q5r8XPHvfakkMYcYM2q1N3\"\n        }\n    ```\n    \n    Note, that the user is created but they won't be able to log in. If they try to, they will be prompted again to provide consent.\n6.  Go to [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users) and search for the new user.\n    \n7.  Go to **User Details** and scroll down to the **Metadata** section. At the **user\\_metadata** text area you should see the following:\n    \n    ```\n    {\n          \"consentGiven\": \"true\"\n          \"consentTimestamp\": \"1525101183\"\n        }\n    ```\n    \n\nThat's it; you are done!",
    "title": "GDPR: Track Consent with Lock",
    "description": "Describes how you can customize Lock to capture consent information",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate/migrate-a-rule-to-an-action",
    "markdown": "# Migration tooling\n\nSimplify the migration process of Rules to Actions by using the Rule Migration tooling in the [Auth0 Dashboard](https://manage.auth0.com/). In addition to facilitating the switch from a Rule to an Action, the new tooling also offers built-in guidance and fixes for common Rule patterns.\n\n## Before migration\n\nBefore you start the migration, visit [Migrate from Rules to Actions](https://auth0.com/docs/customize/actions/migrate/migrate-from-rules-to-actions). This migration guide is an excellent resource that explains the differences between Rules and Actions and is a helpful tool in the migration journey.\n\n### Rule migration order\n\nRules execute before Actions, which implies that Rules should be migrated in reverse runtime order. Migrate the last Rule to execute in your existing flow and work your way to the first Rule in reverse, chronological order.\n\nFailing to migrate in this order can result in errors due to unanticipated side effects caused by dependencies in the ordering of Rules and Actions.\n\n### Safely rolling back\n\nThe migration tooling allows you to safely and easily roll back if something goes wrong. Re-enable your Rule and skip the corresponding Action logic.\n\n## Migrating a Rule\n\nTo begin migrating your Rule, select **Auth Pipeline > Rules**. Once selected, your Rules appear with an option to migrate each of them individually.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/79DmJp8C2vYZpdos51Z0nM/5a665d04c66dd9f0b8f0e25198cb9e4e/SS1_Dashboard_migration_screenshot.png)\n\n### Migrate to Action\n\nAfter selecting **Migrate to Action**, the tooling prompts you to create a new Action.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/1A8FnVyvqAwW8hbrkOQDoG/f83ba9d5157db14ac2a3a666b2280574/SS2_Migrate_to_Action_screenshot.png)\n\nAfter you select **Create,** the new Action is created and you are presented with the Actions Editor.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/2A10fE69aVngEcL2ZQCqWX/720dca2a8e6005c9378efad3bc140af0/Screenshot_2024-06-06_at_11.55.38_AM.png)\n\nIf the Rule is migrated to Actions and still active, the Rule exits before the logic runs.\n\nThis runs by calling `api.rules.wasExecuted()`. If the `wasExecuted` function consumes a string containing the Rule ID, it returns `true` if the Rule has already run (and otherwise, returns `false`).\n\nThis is a helpful tool to prevent your logic from running twice. As soon as you disable the referenced Rule, the function returns `false` and the business logic now executes in the Action.\n\nFor more information about the `api.rules.wasExecuted()` function, refer to [Actions Triggers: post-login - API Object](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/api-object).\n\n## Rewrite Rule code\n\nSelect the **Rules** button in the Actions Editor to load the Rules Migration tool. There, you can quickly reference the code of the migrated Rule. You should review the code of the selected Rule in the sidebar.\n\nCopy the contents of the Rule function and paste it under the `// YOUR CODE HERE` comment in the Action. It’s likely that this code is not adapted for the Actions programming model.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/2jWCZFnfERuN7NzBPrpCDn/80ba271699893a007dac7baaf2dd44cb/Screenshot_2024-06-06_at_11.57.03_AM.png)\n\nThe Actions Editor provides feedback where code must be refactored. The editor also provides suggestions on how to automatically fix most situations - to review the suggestion or fix, hover over the underlined code:\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/5jRGI4iDX9ZgwcPRADTbZ1/caa90923a76800526871b137806e2af3/Screenshot_2024-06-06_at_11.58.07_AM.png)\n\nYou may be able to apply Action-specific updates by selecting an option from the **Quick Fix** modal.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/qTS4RD6cjWFVfI0T9Uph3/45776c464f7247ddd8e91860f4646f2e/Screenshot_2024-06-06_at_11.58.48_AM.png)\n\nWhen you select the recommended fix, your code automatically updates to be compatible.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/1cAq5A1MNVLPAsinHjtROh/c71276afd1f6df9e01d71cc869778907/Screenshot_2024-06-06_at_11.59.37_AM.png)\n\nThere are some situations where fixes cannot be applied automatically but guidance is still provided:\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/4Lx3RxJh8v4tj1J2SpPVvU/0ff35b0f40bb24d195ab2f4b06817d86/Screenshot_2024-06-06_at_12.00.22_PM.png)\n\nFor example: in the case of the Rule’s `callback` function, it is recommended to use [`api.access.deny`](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow/api-object) for errors, or just `return` in successful cases.\n\n### Test the new Action\n\nActions can be tested directly in the editor, as this is an essential part of the migration journey. For more information, review [Test Actions](https://auth0.com/docs/customize/actions/test-actions).\n\n### Automatically enabling the Action\n\nWhen the Action code is updated and you are ready to make the switch:\n\n1.  Select **Deploy**.\n    \n2.  On the alert that confirms your deployment, select **Add to flow**.\n    \n3.  Add your newly created Action to the flow, then select **Apply.**\n    \n4.  Select **Continue**, **and disable any Rules selected** to simultaneously enable the new Action and disable the original Rule. If you are not ready, select **Cancel**, and you can disable the Rule later to activate the migrated Action logic.\n    \n\nFor more information on adding your Action to the flow, refer to [Write your first Action](https://auth0.com/docs/customize/actions/write-your-first-action).\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/47iWYB5o5CyhxvQyHdSTS4/833e6d4541fea132faf793c3e12563a8/SS10.png)\n\n## Migrate remaining rules\n\nThis process can be repeated to migrate each Rule in your login flow. Remember, Rules should be migrated in the reverse order they execute during the login flow.",
    "title": "Migration tooling",
    "description": "Description on how to use the Rule migration tooling in the Auth0 dashboard",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/migrate/actions-migration-limitations",
    "markdown": "# Actions Migration Limitations\n\nTo take advantage of the features provided by Auth0 Actions, you may need to migrate your current code from Rules, Hooks, or earlier versions of Actions. However, you should be aware of the current limitations when migrating between legacy extensibility offerings and Actions.\n\nFor more information, see [Migrate to Actions](https://auth0.com/docs/customize/actions/migrate).\n\n## Rule specific differences\n\n*   Re-use of functions between Actions is not currently supported, as each Action execution is autonomous. You must explicitly define the required functions for each Action.\n    \n*   Passing of variables between Actions is not supported. If you have Rules that depend on passing of state or variable data between one Rule to another, you can consolidate those Rules into a singular Action.\n    \n*   [`accessToken`](https://auth0.com/docs/libraries/lock/lock-api-reference#getuserinfo-) is currently limited to 100 scopes.\n    \n*   The event object in Actions does not currently provide an alternative for the following [context attributes](https://auth0.com/docs/customize/rules/context-object) from within a Rule:\n    \n    *   `context.sso.*`\n        \n    *   `context.connectionOptions`\n        \n    *   `context.sessionID`\n        \n*   Actions does not currently provide an API method for updating the following attributes possible within a Rule:\n    \n    *   `context.samlConfiguration.issuer`\n        \n    *   `context.samlConfiguration.logout`\n        \n    *   `context.samlConfiguration.binding`\n        \n    *   `context.samlConfiguration.RelayState`\n        \n    *   `context.samlConfiguration.authnContextDeclRef`\n        \n\n*   Actions only supports the following properties within [`event.user.identities`](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/event-object)`:`\n    \n    *   `connection`\n        \n    *   `provider`\n        \n    *   `user_id`\n        \n    *   `profileData`\n        \n    *   `isSocial`\n        \n\n*   Actions support a max secret length of 1024 bytes.\n    \n*   Standard claims of an `idToken` or `accessToken` cannot be deleted using an Action.\n    \n*   Actions can only return `access denied` error codes and does not support returning an `unauthorized` error code.\n    \n*   Actions only support modifying the primary user between linked accounts.\n    \n\n## Hooks specific differences\n\n*   You can not modify scopes in a machine-to-machine client credential flow as was possible with a Hook.",
    "title": "Actions Migration Limitations",
    "description": "Limitations for migration-specific activities when migrating from Rules & Hooks to Actions",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow/event-object",
    "markdown": "# Actions Triggers: post-user-registration - Event Object\n\nThe `event` object for the post-user-registration Actions trigger provides contextual information about the newly-created user.\n\n| Property | Description |\n| --- | --- |\n| `event.connection` | Details about the Connection that was used to register the user.<br><br>Includes the following properties:<br><br>*   `id` _String_. The connection's unique identifier.<br>*   `metadata` _Optional dictionary_. Metadata associated with the connection.<br>*   `name` _String_. The name of the connection used to authenticate the user (for example, `twitter` or `some-g-suite-domain`).<br>*   `strategy` _String_. The type of connection. For social connections, `event.connection.strategy === event.connection.name`. For enterprise connections, the strategy is `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `event.request`<br><br>_(Optional)_ | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `geoip` _Object_. Contains geographical information about the request.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>*   `hostname` _Optional string_. The hostname that is being used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.tenant` | Details about the Tenant associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The name of the tenant. |\n| `event.transaction`<br><br>_(Optional)_ | Details about the current transaction.<br><br>Includes the following properties:<br><br>*   `acr_values` _Array of strings_. Any `acr_values` provided in the original authentication request.<br>*   `locale` _String_. The locale to be used for this transaction as determined by comparing the browser's requested languages to the tenant's language settings.<br>*   `login_hint` _Optional string_. Hint to the authorization server about the login identifier the end-user might use to log in (if necessary).<br>*   `prompt` _Optional array of strings_. List of instructions indicating whether the user may be prompted for re-authentication and consent.<br>*   `protocol` _Optional string_. Contains information about the authentication protocol.<br>    <br>    Possible values include:<br>    <br>    *   `oidc-basic-profile` Most used, web-based login.<br>    *   `oidc-implicit-profile` Used on mobile devices and single-page apps.<br>    *   `samlp` SAML protocol used on SaaS apps.<br>    *   `wsfed` WS-Federation used on Microsoft products like Office365.<br>    *   `wstrust-usernamemixed` WS-trust User/password login used on CRM and Office365.<br>    *   `oauth2-device-code` Transaction using the Device Authorization Flow.<br>    *   `oauth2-resource-owner` User/password login typically used on database connections.<br>    *   `oauth2-resource-owner-jwt-bearer` Login using a bearer JWT signed with user's private key.<br>    *   `oauth2-password` Login using the password exchange.<br>    *   `oauth2-access-token` Refreshing a token using the refresh token exchange.<br>    *   `oauth2-refresh-token` Refreshing a token using the refresh token exchange.<br>    *   `oauth2-token-exchange`<br>    *   `oidc-hybrid-profile` Allows your application to have immediate access to an ID token while still providing for secure and safe retrieval of access and refresh tokens.<br>*   `redirect_uri` _Optional string_. The URL to which Auth0 will redirect the browser after the transaction is completed.<br>*   `requested_scopes` _Array of strings_. The scopes requested (if any) when starting this authentication flow.<br>*   `response_mode` _Optional string_.<br>    <br>    Informs the authorizationsServer of the mechanism to be used for returning parameters from the authorization endpoint.<br>    <br>    Possible values include:<br>    <br>    *   `query`<br>    *   `fragment`<br>    *   `form_post`<br>    *   `web_message`<br>*   `response_type` _Optional array of strings_.<br>    <br>    Possible values include:<br>    <br>    *   `code`<br>    *   `token`<br>    *   `id_token`<br>*   `state` _Optional string_. An opaque arbitrary alphanumeric string your app adds to the initial request that Auth0 includes when redirecting back to your application.<br>*   `ui_locales` _Array of strings_. The `ui_locales` provided in the original authentication request. |\n| `event.user` | An object describing the user on whose behalf the current transaction was initiated.<br><br>Includes the following properties:<br><br>*   `app_metadata` _Dictionary_. Custom fields that store info about a user that influences the user's access, such as support plan, security roles, or access control groups.<br>*   `created_at` _String_. Timestamp indicating when the user profile was first created.<br>*   `email` _Optional string_. (unique) User's email address.<br>*   `email_verified` _Boolean_. Indicates whether the user has verified their email address.<br>*   `family_name` _Optional string_. User's family name.<br>*   `given_name` _Optional string_. User's given name.<br>*   `last_password_reset` _Optional string_. Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections.<br>*   `name` _Optional string_. User's full name.<br>*   `nickname` _Optional string_. User's nickname.<br>*   `phone_number` _Optional string_. User's phone number.<br>*   `phone_verified` _Optional boolean_. Indicates whether the user has verified their phone number.<br>*   `picture` _Optional string_. URL pointing to the [user's profile picture](https://auth0.com/docs/users/change-user-picture).<br>*   `updated_at` _String_. Timestamp indicating when the user's profile was last updated/modified.<br>*   `user_id` _String_. (unique) User's unique identifier.<br>*   `user_metadata` _Dictionary_. Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences.<br>*   `username` _Optional string_. (unique) User's username. |",
    "title": "Actions Triggers: post-user-registration - Event Object",
    "description": "Learn about the post-user-registration Action trigger's event object, which provides contextual information about the newly-created user.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow/event-object",
    "markdown": "# Actions Triggers: credentials-exchange - Event Object\n\nThe `event` object for the credentials-exchange Actions trigger provides contextual information about the request for a client credentials exchange.\n\n| Property | Description |\n| --- | --- |\n| `event.accessToken` | Information about the access token to be issued.<br><br>Includes the following properties:<br><br>*   `customClaims` _Dictionary_.<br>*   `scope` _Array of strings_. |\n| `event.client` | Information about the Client used during this token exchange.<br><br>Includes the following properties:<br><br>*   `client_id` _String_. The client ID of the application the user is logging in to.<br>*   `metadata` _Dictionary_. An object for holding other application properties.<br>*   `name` _String_. The name of the application (as defined in the Dashboard). |\n| `event.request` | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `body` _Dictionary_. The body of the POST request. This data will only be available during refresh token, Client Credential Exchange flows and PreUserRegistration Action.<br>*   `geoip` _Object_.Contains geographical information about the request.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>*   `hostname` _Optional string_. The hostname that is being used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.resource_server` | Information about the Resource Server that is issuing the access token.<br><br>Includes the following properties:<br><br>*   `identifier` _String_. The identifier of the resource server (for example, `https://your-api.example.com`). |\n| `event.tenant` | Information about the Tenant used during this token exchange.<br><br>Includes the following properties:<br><br>*   `id` _String_. The identifier of the tenant. |\n| `event.transaction` | Information about the Credentials Exchange transaction.<br><br>Includes the following properties:<br><br>*   `requested_scopes` _Array of strings_. The scopes specified (if any) when requesting the access token. |",
    "title": "Actions Triggers: credentials-exchange - Event Object",
    "description": "Learn about the credentials-exchange Action trigger's event object, which provides contextual information about the request for a client credentials exchange.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow/event-object",
    "markdown": "# Actions Triggers: pre-user-registration - Event Object\n\nThe `event` object for the pre-user-registration Actions trigger provides contextual information about the request to register a new user.\n\n| Property | Description |\n| --- | --- |\n| `event.client`<br><br>_(Optional)_ | Information about the Client with which this transaction was initiated.<br><br>Includes the following properties:<br><br>*   `client_id` _String_. The client ID of the application the user is logging in to.<br>*   `metadata` _Dictionary_. An object for holding other application properties.<br>*   `name` _String_. The name of the application (as defined in the Dashboard). |\n| `event.connection` | Details about the Connection that was used to register the user.<br><br>Includes the following properties:<br><br>*   `id` _String_. The connection's unique identifier.<br>*   `metadata` _Optional dictionary_. Metadata associated with the connection.<br>*   `name` _String_. The name of the connection used to authenticate the user (for example, `twitter` or `some-g-suite-domain`).<br>*   `strategy` _String_. The type of connection. For social connections, `event.connection.strategy === event.connection.name`. For enterprise connections, the strategy is `waad` (Windows Azure AD), `ad` (Active Directory/LDAP), `auth0` (database connections), and so on. |\n| `event.request` | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `body` _Dictionary_. The body of the POST request. This data will only be available during refresh token, Client Credential Exchange flows, and PreUserRegistration Action.<br>*   `geoip` _Object_. Contains geographical information about the request.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>*   `hostname` _Optional string_. The hostname that is being used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.tenant` | Details about the Tenant associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The name of the tenant. |\n| `event.transaction`<br><br>_(Optional)_ | Details about the current transaction.<br><br>Includes the following properties:<br><br>*   `acr_values` _Array of strings_. Any `acr_values` provided in the original authentication request.<br>*   `locale` _String_. The locale to be used for this transaction as determined by comparing the browser's requested languages to the tenant's language settings.<br>*   `login_hint` _Optional string_. Hint to the authorization server about the login identifier the end-user might use to log in (if necessary).<br>*   `prompt` _Optional array of strings_. List of instructions indicating whether the user may be prompted for re-authentication and consent.<br>*   `protocol` _Optional string_. Contains information about the authentication protocol used for the transaction.<br>    <br>    Possible values include:<br>    <br>    *   `oidc-basic-profile` Most used, web-based login.<br>    *   `oidc-implicit-profile` Used on mobile devices and single-page apps.<br>    *   `samlp` SAML protocol used on SaaS apps.<br>    *   `wsfed` WS-Federation used on Microsoft products like Office365.<br>    *   `wstrust-usernamemixed` WS-trust User/password login used on CRM and Office365.<br>    *   `oauth2-device-code` Transaction using the Device Authorization Flow.<br>    *   `oauth2-resource-owner` User/password login typically used on database connections.<br>    *   `oauth2-resource-owner-jwt-bearer` Login using a bearer JWT signed with user's private key.<br>    *   `oauth2-password` Login using the password exchange.<br>    *   `oauth2-access-token` Refreshing a token using the refresh token exchange.<br>    *   `oauth2-refresh-token` Refreshing a token using the refresh token exchange.<br>    *   `oauth2-token-exchange`<br>    *   `oidc-hybrid-profile` Allows your application to have immediate access to an ID token while still providing for secure and safe retrieval of access and refresh tokens.<br>    <br>*   `redirect_uri` _Optional string_. The URL to which Auth0 will redirect the browser after the transaction is completed.<br>*   `requested_scopes` _Array of strings_. The scopes requested (if any) when starting this authentication flow.<br>*   `response_mode` _Optional string_. Informs the authorization server of the mechanism to be used for returning parameters from the authorization endpoint.<br>    <br>    Possible values include:<br>    <br>    *   `query`<br>    *   `fragment`<br>    *   `form_post`<br>    *   `web_message`<br>*   `response_type` _Optional array of strings_. Contains information about the response type sent by the authorization server.<br>    <br>    Possible values include:<br>    <br>    *   `code`<br>    *   `token`<br>    *   `id_token`<br>*   `state` _Optional string_. An opaque arbitrary alphanumeric string your app adds to the initial request that Auth0 includes when redirecting back to your application.<br>*   `ui_locales` _Array of strings_. The `ui_locales` provided in the original authentication request. |\n| `event.user` | An object describing the user who is attempting to register.<br><br>Includes the following properties:<br><br>*   `app_metadata` _Optional dictionary_. Custom fields that store info about a user that influences the user's access, such as support plan, security roles, or access control groups.<br>*   `email` _Optional string_. (unique) User's email address.<br>*   `family_name` _Optional string_. User's family name.<br>*   `given_name` _Optional string_. User's given name.<br>*   `name` _Optional string_. User's full name.<br>*   `nickname` _Optional string_. User's nickname.<br>*   `phone_number` _Optional string_. User's phone number.<br>*   `picture` _Optional string_. URL pointing to the [user's profile picture](https://auth0.com/docs/users/change-user-picture).<br>*   `user_metadata` _Optional dictionary_. Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences.<br>*   `username` _Optional string_. (unique) User's username. |",
    "title": "Actions Triggers: pre-user-registration - Event Object",
    "description": "Learn about the pre-user-registration Action trigger's event object, which provides contextual information about the request to register a new user.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow/event-object",
    "markdown": "# Actions Triggers: send-phone-message - Event Object\n\nThe `event` object for the send-phone-message Actions trigger provides contextual information about the message to be sent and the user to be challenged or enrolled.\n\n| Property | Description |\n| --- | --- |\n| `event.client`<br><br>_(Optional)_ | Information about the Client with which this transaction was initiated.<br><br>Includes the following properties:<br><br>*   `client_id` _String_. The Client ID of the application the user is logging in to.<br>*   `metadata` _Dictionary_. An object for holding other application properties.<br>*   `name` _String_. The name of the application (as defined in the Dashboard). |\n| `event.message_options` | Details about the message that is sent to the user.<br><br>Includes the following properties:<br><br>*   `action` _String_. The flow that triggered this action.<br>    <br>    Possible values include:<br>    <br>    *   `enrollment`<br>    *   `second-factor-authentication`<br>*   `code` _String_. One-time password that the user needs to use to enter in the form.<br>*   `message_type` _String_. How the message will be delivered.<br>    <br>    Possible values include:<br>    <br>    *   `sms`<br>    *   `voice`<br>*   `recipient` _String_. Phone number where the message will be sent.<br>*   `text` _String_. Content of the message to be sent. |\n| `event.request` | Details about the request that initiated the transaction.<br><br>Includes the following properties:<br><br>*   `geoip` _Object_. Contains geographical information about the request.<br>    <br>    Includes the following properties:<br>    <br>    *   `cityName` _Optional string_.<br>    *   `continentCode` _Optional string_.<br>    *   `countryCode` _Optional string_.<br>    *   `countryCode3` _Optional string_.<br>    *   `countryName` _Optional string_.<br>    *   `latitude` _Optional number_.<br>    *   `longitude` _Optional number_.<br>    *   `subdivisionCode` _Optional string_.<br>    *   `subdivisionName` _Optional string_.<br>    *   `timeZone` _Optional string_.<br>*   `hostname` _Optional string_. The hostname that is being used for the authentication flow.<br>*   `ip` _String_. The originating IP address of the request.<br>*   `language` _Optional string_. The language requested by the browser.<br>*   `method` _String_. The HTTP method used for the request<br>*   `user_agent` _Optional string_. The value of the `User-Agent` header received when initiating the transaction. |\n| `event.tenant` | Details about the Tenant associated with the current transaction.<br><br>Includes the following properties:<br><br>*   `id` _String_. The name of the tenant. |\n| `event.user` | An object describing the user on whose behalf the current transaction was initiated.<br><br>Includes the following properties:<br><br>*   `app_metadata` _Dictionary_. Custom fields that store info about a user that influences the user's access, such as support plan, security roles, or access control groups.<br>*   `created_at` _String_. Timestamp indicating when the user profile was first created.<br>*   `email` _Optional string_. (unique) User's email address.<br>*   `email_verified` _Boolean_. Indicates whether the user has verified their email address.<br>*   `family_name` _Optional string_. User's family name.<br>*   `given_name` _Optional string_. User's given name.<br>*   `identities` _Optional array of objects_.<br>    <br>    Contains info retrieved from the identity provider with which the user originally authenticates. Users may also link their profile to multiple identity providers; those identities will then also appear in this array. The contents of an individual identity provider object varies by provider.<br>    <br>    Elements include the following properties:<br>    <br>    *   `connection` _Optional string_. Name of the Auth0 connection used to authenticate the user.<br>    *   `isSocial` _Optional boolean_. Indicates whether the connection is a social one.<br>    *   `profileData` _Optional dictionary_. User information associated with the connection. When profiles are linked, it is populated with the associated user info for secondary accounts.<br>    *   `provider` _Optional string_. Name of the entity that is authenticating the user, such as Facebook, Google, SAML, or your own provider.<br>    *   `user_id` _Optional string_. User's unique identifier for this connection/provider.<br>*   `last_password_reset` _Optional string_. Timestamp indicating the last time the user's password was reset/changed. At user creation, this field does not exist. This property is only available for Database connections.<br>*   `name` _Optional string_. User's full name.<br>*   `nickname` _Optional string_. User's nickname.<br>*   `phone_number` _Optional string_. User's phone number.<br>*   `phone_verified` _Optional boolean_. Indicates whether the user has verified their phone number.<br>*   `picture` _Optional string_. URL pointing to the [user's profile picture](https://auth0.com/docs/users/change-user-picture).<br>*   `updated_at` _String_. Timestamp indicating when the user's profile was last updated/modified.<br>*   `user_id` _String_. (unique) User's unique identifier.<br>*   `user_metadata` _Dictionary_. Custom fields that store info about a user that does not impact what they can or cannot access, such as work address, home address, or user preferences.<br>*   `username` _Optional string_. (unique) User's username. |",
    "title": "Actions Triggers: send-phone-message - Event Object",
    "description": "Learn about the send-phone-message Action trigger's event object, which provides contextual information about the message to be sent and the user to be challenged or enrolled.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/users/get-users-by-id",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow/api-object",
    "markdown": "# Actions Triggers: pre-user-registration - API Object\n\nThe API object for the pre-user-registration Actions trigger includes:\n\n## `api.access`\n\nModify the access of the user that is logging in, such as rejecting the registration attempt.\n\n### `api.access.deny(reason, userMessage)`\n\nDeny the user from being able to register. The signup flow will immediately stop following the completion of this action and no further Actions will be executed.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `reason` | _String_. An internal reason describing why this registration attempt is being denied. This value will appear in tenant logs. |\n| `userMessage` | _String_. A human-readable explanation for rejecting the registration attempt. This may be presented directly in end-user interfaces. |\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`. For errors, the returned object will have a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects with a `value` property holding the cached value as well as an `expires_at` property indicating the maximum expiry of the record in milliseconds since the Unix epoch.\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way will have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes will be used. Lifetimes may not exceed the maximum duration listed at [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `ttl`. If both options are supplied, the earlier expiry of the two will be used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `expires_at`. If both options are supplied, the earlier expiry of the two will be used. |\n\n## `api.user`\n\nMake changes to the metadata of the user that is registering.\n\n### `api.user.setUserMetadata(name, value)`\n\nSet metadata for the user that is registering. Data stored within user\\_metadata is visible and editable by the user.\n\nNote: This trigger makes a call to the Management API, consuming the Management API rate limit. If this request reaches the rate limit and fails to retry within the timeout window, the API returns a `Deadline Exceeded` error.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `name` | _String_. The name of metadata property. |\n| `value` | _Any value_. The value of the metadata property. This may be set to \\`null\\` to remove the metadata property. |\n\n### `api.user.setAppMetadata(name, value)`\n\nSet application metadata for the user that is registering. Data stored within app\\_metadata is not visible or editable by the user.\n\nNote: This trigger makes a call to the Management API, consuming the Management API rate limit. If this request reaches the rate limit and fails to retry within the timeout window, the API returns a `Deadline Exceeded` error.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `name` | _String_. The name of metadata property. |\n| `value` | _Any value_. The value of the metadata property. This may be set to \\`null\\` to remove the metadata property. |",
    "title": "Actions Triggers: pre-user-registration - API Object",
    "description": "Learn about the pre-user-registration Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow/api-object",
    "markdown": "# Actions Triggers: credentials-exchange - API Object\n\nThe API object for the credentials-exchange Actions trigger includes:\n\n## `api.access`\n\nControl availability to the access token.\n\n### `api.access.deny(code, reason)`\n\nMark the current token exchange as denied.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `code` | _String_. The OAuth error code justifying the rejection of the login. Should be one of: `'invalid_scope'`, `'invalid_request'`, or `'server_error'` |\n| `reason` | _String_. A human-readable explanation for rejecting the access token grant. |\n\n## `api.accessToken`\n\nRequest changes to the access token being issued.\n\n### `api.accessToken.setCustomClaim(name, value)`\n\nSet a custom claim on the Access Token that will be issed as a part of this exchange.\n\nReturns a reference to the `api` object.\n\n| Parameter | Description |\n| --- | --- |\n| `name` | _String_. Name of the claim (note that this may need to be a fully-qualified url). |\n| `value` | _Any value_. The value of the claim. |\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`. For errors, the returned object will have a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects with a `value` property holding the cached value as well as an `expires_at` property indicating the maximum expiry of the record in milliseconds since the Unix epoch.\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way will have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes will be used. Lifetimes may not exceed the maximum duration listed at [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `ttl`. If both options are supplied, the earlier expiry of the two will be used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `expires_at`. If both options are supplied, the earlier expiry of the two will be used. |",
    "title": "Actions Triggers: credentials-exchange - API Object",
    "description": "Learn about the credentials-exchange Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/install-authorization-extension",
    "markdown": "# Install Authorization Extension\n\n## Prerequisite\n\nBefore you begin, make sure that you have an existing application that can be used with the Authorization Extension. You can use the following types of applications:\n\n*   Native apps\n    \n*   Regular web apps\n    \n*   Single-page apps\n    \n\nApplications without an assigned type or machine-to-machine apps cannot be used with this extension.\n\n## Install extension\n\n1.  Go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions).\n    \n2.  Select **Auth0 Authorization** and answer the prompt to install.\n    \n3.  Choose where you would like to store your data: Webtask Storage or Amazon S3 bucket.\n    \n    ![Dashboard - Extensions - Authorization Extension - Install](https://images.ctfassets.net/cdy7uua7fh8z/40vWVkfrRl7zdlEIl3oaK4/c35eb141f557a38ad2584b9f2e38885a/extensions-auth-install.png)\n\nOnce the extension is installed, you will see it listed under the **Installed Extensions**.\n\n![Dashboard - Extensions - Installed Extensions - Authorization Extension](https://images.ctfassets.net/cdy7uua7fh8z/5gJ26ZetkEXOur9Z7WFxzY/5bd99cdb615204a615cd7446fe7cd17b/extensions-auth-installed.png)\n\nWhen you click the link to open the extension for the first time, you will be asked to provide permission for the extension to access your Auth0 account. If you do, you will be taken to the Authorization Dashboard.\n\n![Dashboard - Extensions - Authorization Dashboard - Users](https://images.ctfassets.net/cdy7uua7fh8z/1ALaqm8mvtleQfm3XKvBtf/73fb69c35e2eed4dae74b1baa8e372a2/auth-dashboard-v2.png)\n\n### Webtask storage\n\nThe extension will use Webtask Storage by default, and you are limited to 500 KB of data. This is equivalent to:\n\n*   1000 groups and 3000 users, where each user is a member of 3 groups\n    \n*   20 groups and 7000 users, where each user is a member of 3 groups\n    \n\n### Amazon S3\n\nAlternatively, you can use Amazon S3 as a storage provider. Amazon S3 is a file-based storage platform, which means it writes in parallel. This may cause issues, but the extension's storage logic attempts to take this into account. However, if you automate the creation of groups, roles, or permissions, Auth0 recommends that you use sequential calls to the API.\n\nTo use Amazon S3, you need to:\n\n1.  Create an S3 bucket.\n    \n2.  Create an IAM user and get the Key ID for that user.\n    \n3.  Create a policy for the IAM user that allows the user to make changes to the bucket.\n    \n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:DeleteObject\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::{nameOfYourBucket}/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::{nameOfYourBucket}\"\n            ],\n            \"Condition\": {}\n        }\n    ]\n}\n```\n\n## Learn more\n\n*   [Configure Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/configure-authorization-extension)\n*   [Set Up Users in Authorization Extension Dashboard](https://auth0.com/docs/customize/extensions/authorization-extension/set-up-authorization-extension-users)\n*   [Enable API Access to Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension)\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)",
    "title": "Install Authorization Extension",
    "description": "Describes how to install the Auth0 Authorization Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension",
    "markdown": "# Enable API Access to Authorization Extension\n\nOnce configured and set up, your extension should contain users, as well as groups, roles, and permissions. You can automate provisioning and query the authorization context of your users in real-time if you enable API access to your extension.\n\n## Enable API access\n\n1.  Go to [Auth0 Dashboard > Extensions > Auth0 Authorization](https://manage.auth0.com/#/extensions).\n    \n2.  To get to **API** section, select your Auth0 tenant name on the top right of the **Authorization Dashboard**, then select **API**.\n    \n    ![Dashboard - Extensions - Authorization Extensions Dashboard - Select API](https://images.ctfassets.net/cdy7uua7fh8z/6cF78dwvbK7Sc0JbuxJF85/fbd895fb6f7338559628ea71b3003f52/click-configuration_select-api.png)\n3.  On the **Settings** page, enable the **API Access** switch.\n    \n    ![Dashboard - Extensions - Authorization Extensions Dashboard - Enable API Access](https://images.ctfassets.net/cdy7uua7fh8z/5toxhsSik9EWMnQoK5wTjH/fc40d80a32461e9216f5c69a89e031ec/enable-api-access.png)\n4.  Once API Access is enabled, you'll be able to see or control (within the extension) some of the parameters of the tokens issued by the API. You can control the **time to expiration** of the token, as well as view the token's **audience**, **issuer**, and **URL** to access the API.\n    \n    ![Dashboard - Extensions - Authorization Extensions Dashboard - API Access Enabled](https://images.ctfassets.net/cdy7uua7fh8z/3WfHXaEyi8FvD8pTDlYQpt/cbe92c5b5f4baf9c35a8c686ff4f511d/api-access-enabled.png)\n\n## Access extension API\n\nWhen you enabled API access to the extension, Auth0 automatically created an API for your use in the [Auth0 Dashboard](https://manage.auth0.com/#/apis). To access the API, you'll need to create a Machine to Machine Application, which is the entity that interacts with the API itself.\n\n### Create applications\n\n1.  Navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select **Create Application**. Name your new Application, and choose the **Machine to Machine Application** type. Select **Create** to proceed. You'll be redirected to the **Quick Start** page of the Application, where you can customize the living documentation based on the API with which you'll use the Application. Select the API that Auth0 created for your extension (it should be called **auth0-authorization-extension-api** or similar). Since this is the first time you're working with the API and Application together, you'll see a message that says, \"This application is not authorized for this API.\" To authorize the application for use with the API, select **Navigate to the API and Authorize**.\n    \n    ![Dashboard - Authorization Extensions - Client Quick Start](https://images.ctfassets.net/cdy7uua7fh8z/UbMM1C6a1GjMIhNlk8cCD/462b9dcd29e5d7f5bbd261490e6a46b0/Dashboard_-_Authorization_Extensions_-_Client_Quick_Start.png)\n2.  You'll see a list of Machine to Machine Applications you can use with your API. Enable the switch next to the Application you just created to authorize it.\n    \n    ![Dashboard - Authorization Extension - Clients for API](https://images.ctfassets.net/cdy7uua7fh8z/4WFJ3BhCf2kZjbRWhQ0sCp/38aeb0ca9360fd75bd7d54f897ac1735/Dashboard_-_Authorization_Extension_-_Clients_for_API.png)\n    \n    Once you've authorized the Application, you'll see the **Grant ID**. You can also select the **Scopes** to be granted to the Application. The scopes you grant depends on the endpoints you want to access. For example, you'd grant `read:users` to [get all users](https://auth0.com/docs/api/authorization-extension#get-all-users).\n    \n3.  If you make any changes to the scopes, select **Update** to save.\n    \n    ![Dashboard - Authorization Extension Dashboard - Client Scopes](https://images.ctfassets.net/cdy7uua7fh8z/2RvMFmLusnUOmBp1uXPh1/a78add868b094d37cec63365f745f196/extensions-auth-api-scopes.png)\n\n### Get access token\n\nTo access the API, you'll need to [ask for and obtain the appropriate token](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow/call-your-api-using-the-client-credentials-flow).\n\n### Call the API\n\nYou can call the API via:\n\n*   An HTML request\n    \n*   A cURL command\n    \n\nYou can also find detailed information about the endpoints, as well as samples on how to call each endpoint using the three methods above, in the [Authorization Extension API Explorer](https://auth0.com/docs/api/authorization-extension).\n\nYou can also refer to the **API Explorer**, which documents everything you can do via command line once you've enabled access to your extension via API.\n\nSelect the **Explorer** page for the API documentation.\n\n![Authorization Extension API Explorer](https://images.ctfassets.net/cdy7uua7fh8z/5mwKE5muQHYbXKqYZvWOwR/aa0ecec3e5cb803a105d857f24c8b6b7/api-explorer.png)\n\n## Learn more\n\n*   [Use Rules with the Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension)\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)",
    "title": "Enable API Access to Authorization Extension",
    "description": "Describes how to enable API access to the Authorization Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/configure-authorization-extension",
    "markdown": "# Configure Authorization Extension\n\nBefore the extension can enforce your authorization logic, you need to configure how it will behave during the login transaction. Your configuration settings will be captured in a [rule](https://auth0.com/docs/customize/rules) that executes during runtime.\n\n## Prerequisites\n\n[Install the Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/migrate-to-authorization-extension-v2)\n\n## Configure extension\n\n1.  Go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select **Auth0 Authorization**.\n    \n2.  Choose **Configuration** at the top right of the **Authorization Dashboard**.\n    \n    ![Dashboard - Authorization Extension Dashboard - Configuration](https://images.ctfassets.net/cdy7uua7fh8z/r8Ic6OYMcVfXDvIKePLrb/ed9c75536d20c12149e8b8e62a8edc44/click-configuration.png)\n3.  This brings you to the **Rule Configuration** section of the **Configuration** page. All of the changes you make in the sections under **Token Contents**, such as those related to groups, roles, and permissions, will be reflected in the rule you export at the completion of this step.\n    \n    ![Authorization Extension Configuration](https://images.ctfassets.net/cdy7uua7fh8z/4ydHJBdKGs4XVLnRst66A3/1f61ad2e087252c6c3aa10add13d99cd/configuration0auth.png)\n\n### ApiKey\n\nThe rule uses the ApiKey to communicate with the Authorization Extension API and get the policy. The ApiKey is stored as a rule config and will be created automatically when the rule is published. To rotate the ApiKey, click the **Rotate** button; when the ApiKey is rotated, the rule config will be updated automatically.\n\n![Authorization Extension - Configuration - ApiKey](https://images.ctfassets.net/cdy7uua7fh8z/5PEBRO9ox7CaDUCaFOH46O/c24f253e90359143eea97a75a68ba52f/apikey-config.png)\n\nYou can store authorization data like groups, roles, or permissions in the outgoing token issued by Auth0. Your application can then consume this information by inspecting the token and take appropriate actions based on the user's current authorization context.\n\n![Authorization Extension - Configuration - User Info](https://images.ctfassets.net/cdy7uua7fh8z/7IwRUnCsiC61sq8tUH7m50/db49bb0f6942ca93b86dd3f783d5745d/user-info.png)\n\nTo add groups, roles, and/or permissions information to the outgoing token, enable the slider next to the option you want to be included.\n\n### Merge authorization data from IdP\n\nYou might have users that receive groups, roles, or permissions from the identity provider (IdP) you're using, such as Active Directory. If you want to merge these items (to preserve them) with the ones defined in the Authorization Extension, make sure you enable the appropriate **Passthrough** options. Enable the slider next to the appropriate merges you want enabled.\n\n![Authorization Extension - Configuration - Passthrough](https://images.ctfassets.net/cdy7uua7fh8z/3iDtMjVci6iAzs7mkWnZSr/36939acc06b48f3fe3e8a630f40d8dde/passthrough.png)\n\n### Store authorization information in user profiles\n\nIf your authorization context is large (for example, the user might belong to many groups or have been granted many permissions), you might find it useful to store some of the authorization content in the users' profiles. This allows you to store less information in the token, which means you're less likely to see performance-related issues or even problems with token issuance. **Persistence** is the process by which you store groups, roles, and permissions information in the users' profiles.\n\nThe data will be stored in the user's `app_metadata` field, and you can then use the Management API or the [Dashboard](https://manage.auth0.com/#/users) to retrieve this information after the user has logged in.\n\n![Authorization Extension - Configuration - Persistence](https://images.ctfassets.net/cdy7uua7fh8z/5kfgcLhwwZkQ2Oh5uxaGxF/de5cf05429d1d1730a0165f4c61ac629/persistence.png)\n\n## Save changes to rule\n\nOnce you've configured your rule, click **Publish Rule**. This creates a rule for your tenant that executes after each user login.\n\n### View rule\n\nIf you'd like to see the rule you've created, you can do so at [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules).\n\n![Auth0 Pipeline - Rules](https://images.ctfassets.net/cdy7uua7fh8z/6SyIeDsVhO0UwvFhSU0Lfl/5e9535ad6f2961234837ab4baebdb7ec/Dashboard_-_Auth_Pipeline_-_Rules.png)\n\nYou can open the rule to see the exact rules configuration.\n\n## Learn more\n\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Enable API Access to Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension)\n*   [Use Rules with the Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension)\n*   [Set Up Users in Authorization Extension Dashboard](https://auth0.com/docs/customize/extensions/authorization-extension/set-up-authorization-extension-users)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)\n*   [Migrate to Authorization Extension v2](https://auth0.com/docs/customize/extensions/authorization-extension/migrate-to-authorization-extension-v2)",
    "title": "Configure Authorization Extension",
    "description": "Learn how to configure the Authorization Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension",
    "markdown": "# Use Rules with the Authorization Extension\n\nYou can use Auth0 Rules with the Authorization Extension to do things like:\n\n*   Add custom claims to the issued token.\n    \n*   Determine the user's group membership, roles, and permissions.\n    \n*   Store the user's groups, roles, and permissions info as part of the `app_metadata`.\n    \n*   Add the user's groups, roles, and permissions to the outgoing token (which can be requested via the `openid groups permissions roles` scope).\n    \n\nBecause the above logic is part of a rule, it will only be executed in the context of a login. If users are added to or removed from a group, this change will only be reflected in Auth0 after the user's next login.\n\nTo learn more, read [Auth0 Rules](https://auth0.com/docs/customize/rules).\n\n## Add custom claims to the issued token\n\nTo add custom claims to your tokens, you can do so by creating an additional rule that allows the Authorization Extension to do so. Custom claims can be namespaced or non-namespaced.\n\nTo learn more, read [Create Custom Claims.](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims)\n\nYou should limit the number of claims you add to the token.\n\n```\nfunction (user, context, callback) {\n  var namespace = 'http://yourdomain/claims/'; // You can set your own namespace, but do not use an Auth0 domain\n\n  // Add the namespaced tokens. Remove any which is not necessary for your scenario\n  context.idToken[namespace + \"permissions\"] = user.permissions;\n  context.idToken[namespace + \"groups\"] = user.groups;\n  context.idToken[namespace + \"roles\"] = user.roles;\n  \n  callback(null, user, context);\n}\n```\n\nThis rule must run **after** the Authorization Extension rule. To make sure this happens, make sure that you place it below the Authorization Extension rule.\n\nWhen calling the `/authorize` endpoint or configuring Lock, you'll need to specify the information you want in the `scope` by indicating `groups`, `permissions` and/or `roles`.\n\n## Control app access\n\nYou can also write rules that are executed after the Authorization Extension rule to do things like control access to your application. One method of doing this is to specify the roles that are required for each application using the application metadata.\n\nFor more details, review [Manage Metadata with Rules](https://auth0.com/docs/manage-users/user-accounts/metadata/manage-metadata-rules).\n\n### Set app metadata required roles\n\nYou can set the app's metadata with roles, which are groups of permissions that you group together to create a specific set of functionality. You can think of this step as \"tagging\" the app so that the rules you set up know which app to act on.\n\n1.  ⁠⁠⁠⁠To set the `context.clientMetadata` field with `required_roles`, select the application you want to work at [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications). This brings you to the application's **Settings**. Scroll down, and select **Show Advanced Settings** at the bottom of the page.\n    \n2.  Under **Application Metadata** add an item setting the **Key** to `required_roles` and in **Value** field list your roles in comma separated style. Select **\\+ Add** to add the field.\n    \n    ![Dashboard - Extensions - Authorization Extension - Advanced Settings - Application Metadata](https://images.ctfassets.net/cdy7uua7fh8z/6Cn2r0OzoMi1xnQVIbto8k/e5eebc82808a73a9e83ba953dc1e8dcd/Dashboard_-_Extensions_-_Authorization_Extension_-_Advanced_Settings_-_Application_Metadata.png)\n3.  When finished, select **Save Changes**. Now, when you log in from this application, in `context.clientMetadata`, you will have the `required_roles` with the roles value string you entered.\n    \n\n### Create rule enforcing app roles\n\nNow that each app has a role associated with it, you can create the rule executes with this piece of app information in context.\n\n1.  Before creating this rule, enable **Roles** under the **Token Contents** and publish the Authorization Extension rule.\n    \n2.  Add this rule and make sure it is listed after the generated \"auth0-authorization-extension\" rule.\n    \n3.  After setting `required_roles`, create a new [rule](https://manage.auth0.com/#/rules) with the following body:\n    \n    ```\n    function (user, context, callback) {\n      context.clientMetadata = context.clientMetadata || {};\n      if (context.clientMetadata.required_roles && context.clientMetadata.required_roles.length){\n        if (user.roles) {\n          var _ = require('lodash');\n          var roles = context.clientMetadata.required_roles.split(',');\n          var matchingRoles =_.filter(user.roles, function(roleName) {\n            return _.includes(roles, roleName);\n          });\n    \n          if (matchingRoles && matchingRoles.length) {\n            return callback(null, user, context);\n          }\n        }\n    \n        return callback(new UnauthorizedError('You do not have the required role to access ' + context.clientName));\n      }\n    \n     callback(null, user, context);\n    }\n    ```\n    \n\n## Learn more\n\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Enable API Access to Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)",
    "title": "Use Rules with the Authorization Extension",
    "description": "Describes how to use information from the Authorization Extension in rules.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/set-up-authorization-extension-users",
    "markdown": "# Set Up Users in Authorization Extension Dashboard\n\nIf you have an application that is accessible to everyone within your corporation, the **users** are the individuals to whom you'd like to grant access to your application. If you have a large number of users, managing the access rights and permissions for each one individually can become unwieldy. The **groups** functionality helps make this process easier. For example, your groups can reflect the various departments of your organization: accounting, information technology, engineering, support, and so on. You might also create nested groups, such as by dividing the engineering group into two nested groups: internal tools and client-facing applications. Your organization hierarchy therefore looks like this:\n\n*   Corporation\n    \n    *   Accounting\n        \n    *   Information Technology\n        \n    *   Engineering\n        \n        *   Internal Tools\n            \n        *   Client-Facing Applications\n            \n    *   Support\n        \n\n![Authorization Extension Corporate Groups Diagram](https://images.ctfassets.net/cdy7uua7fh8z/jRZWY5HDZRf1dzXVI0L2C/19a192472218b704d675d9bec966ebd4/corporation.png)\n\nYou can add users to your groups manually or dynamically based on the Connection(s) they're using to access your application. For example, if someone logs in using the Active Directory Connection and their AD profile indicates that they're in the Marketing group, the Authorization Extension can also add them to the Marketing group you're managing with the extension.\n\nFinally, we have permissions and roles, which are groups of permissions. The purpose of the latter is to make it easier to assign several permissions simultaneously to either a user or a group.\n\n![Authorization Extension Roles Permissions Diagram](https://images.ctfassets.net/cdy7uua7fh8z/5EOgccyg3hxlSu00MIEZ1f/8e38920f5b67a0dc2e51be0be1f532f6/roles-permissions.png)\n\nFor example, you may want to grant permissions to:\n\n*   Approve requests for travel\n    \n*   Approve travel expenses\n    \n\nRather than assigning both permissions to groups/users, you can roll the two (along with many others) into a role called **Travel Administrator**. You can then assign Travel Administrator to individual users or to one or more groups.\n\n![Authorization Extension Groups Roles Permissions Diagram](https://images.ctfassets.net/cdy7uua7fh8z/uAkCNyDbbGjUxDhWJPScV/6bec8d56519c319e4a3df683be7707c0/groups-roles-permissions.png)\n\n## Users\n\nThe **Users** section lists all the current users of your applications. Here you can find a specific user, see their profile, change their group affiliations, and change their roles.\n\n![Dashboard - Extensions - Authorization Dashboard - Users](https://images.ctfassets.net/cdy7uua7fh8z/1ALaqm8mvtleQfm3XKvBtf/73fb69c35e2eed4dae74b1baa8e372a2/auth-dashboard-v2.png)\n\n## Groups\n\nTo create and manage the groups with which you'll manage users' settings, click **Groups** in the Authorization Dashboard.\n\nClick **Create Group** to create a new group for your users. You'll be asked to provide a **name** for the group, as well as a **description** for that group.\n\n![Dashboard - Extensions - Authorization Extension - Create New Group](https://images.ctfassets.net/cdy7uua7fh8z/1ur4HTbdZz7PKlNdYFcX16/39ec8e20f833fcc6b56f6ba951a1f68f/create-group-v2.png)\n\nYou can manage your users and their group affiliations in one of two ways:\n\n*   Opening the **group** and managing the group's users\n    \n    ![Dashboard - Extensions - Authorization Extension - Group Membership - Group Management](https://images.ctfassets.net/cdy7uua7fh8z/5mGdeDG5kWbbEm8NQK7h8L/8c9371d19b7987c0251086181353fc78/group-membership-v2.png)\n*   Opening the **user** and managing the user's group membership(s)\n    \n    ![Dashboard - Extensions - Authorization Extension - Group Membership - User Management](https://images.ctfassets.net/cdy7uua7fh8z/3a5gnzfB6PNxvyeJ6Zjk6z/c4986b454485b34715bd9e2f428e1451/user-membership-v2.png)\n\nThe groups you'll create are dependent on the needs of your business process. For example, you might have a group for your users in finance, a group for your users in IT, and so on. Additionally, you may create nested groups that are similar to the following:\n\n*   Example Company\n    \n    *   Accounting\n        \n        *   External Accountants\n            \n    *   Human Resources\n        \n    *   Finance\n        \n        *   Finance IT Support\n            \n    *   Management\n        \n\nTo create nested groups, you must first create all of the individual groups via the **CREATE** button on the Groups page of the Authorization Dashboard.\n\n![Dashboard - Extensions - Authorization Extension - Add Nested Groups](https://images.ctfassets.net/cdy7uua7fh8z/1crGcKf5Hutc4N6s3q4iss/bfeb57a9f916e77ac4d8216412d8c13b/add-nested-groups-v2.png)\n\nTo nest the groups:\n\n1.  Open up the top-level Group (in the example above, this would be the Example Company Group)\n    \n2.  Click on the **Nested Groups** tab\n    \n3.  Click on the **ADD NESTED GROUP** button. You will be presented with a list of Groups that can be added to the primary Group. To select a particular Group, click on the checkbox to the left of the name. After each selection, you will be returned to the primary group page. Continue this process until you have included all the Groups you need.\n    \n\nWith nested groups, adding a user to a sub-group also grants the user permissions granted to the groups that are parents (and grandparents) of that group. For example, adding a user to the External Accountants group automatically makes them a member of the Finance and Company Groups. However, the user is only explicitly a member of External Accountants; all other memberships are purely dynamic and are calculated as needed (for example, when loading the user's group memberships).\n\n![Dashboard - Authorization Extension - Nested Groups - Membership Details](https://images.ctfassets.net/cdy7uua7fh8z/5R17H673JPJkjpC45FjZ1E/b440ef81e3c1b5eb86dd8b12877cb1a6/nested-groups-v2.png)\n\nTo prevent confusion, you will be shown both the explicit members AND the \"calculated members\" that result from nested groups whenever you open a specific group's page in the Authorization Dashboard.\n\n### Group mappings\n\nGroup Mappings allow you to dynamically add users to different Groups based on the users' Connections. Essentially, using the Connection and the groups information provided by the IdP, you can dynamically make the user a member of the group in which you've created the appropriate mapping.\n\nFor example, suppose your users are logging in using their Active Directory (AD) credentials. As part of their identity, AD allows users to have group information associated (such as \"Administrative\" and \"Marketing\").\n\nYou can then configure group mappings to look at a user's profile if they're connecting with the Active Directory connection. When the extension sees that the person is a part of the \"Administrative\" group, it will automatically make the user a member of your company's Admin group.\n\n![Dashboard - Extensions - Authorization Extensions Dashboard - Group Mapping](https://images.ctfassets.net/cdy7uua7fh8z/o77WUpuOKc5LOPZw2Bcu4/d0275f49951fbb114852f04ffd8acd19/group-mapping-v2.png)\n\n## Roles\n\nThe roles that you will create will depend on the access to certain permissions in your application. For example, let's say that you have an application that allows employees to enter in company expenses. You want all employees to be able to submit expenses, but want certain Finance users to have more admin type of actions such as being able to approve or delete expenses. These actions can be mapped to [Permissions](#permissions) and then assigned to a certain Role.\n\nYou can create different types of Roles such as: Expense Admins, Expense Manager, and Expense User for your Expense Management Tool.\n\n![Dashboard - Extensions - Authorization Extensions Dashboard - Permissions](https://images.ctfassets.net/cdy7uua7fh8z/4nTv8DofRA0Xyz6mbJASCl/eeca2e8bd741b764a98ddfdfea24aee4/roles.png)\n\nTo add a role, click the **CREATE ROLE** button from the **Roles** section of the dashboard. Then choose the application this Role applies to (such as Expense Management Tool) and then add a name of the role (such as Expense Admins) and a description of the role. Then select the permissions you wish to grant to this role. If you haven't yet created your permissions you can add them later to an existing Role.\n\n![Dashboard - Extensions - Authorization Extensions Dashboard - Add Role to User](https://images.ctfassets.net/cdy7uua7fh8z/3adPx2VSqkK7560VixOZLN/926e19500a0633f602469bb975f4a0f7/add-role-to-user.png)\n\nOnce you have a **Role** created, you can add it to a user so they can then have the associated **Permissions**. To add a role to a user, find the user in the **Users** section, then click the **Roles** tab. Then click **ADD ROLE TO USER** to choose which roles you wish to assign to a user, then click **SAVE**.\n\n## Permissions\n\nPermissions are the actions or functions that can be added to Roles.\n\nUsing the previous example of an Expense application, let's look at possible roles and how they can be associated with certain permissions:\n\n*   Role: Expense User\n    \n    *   Permissions:\n        \n        *   View their own expenses\n            \n        *   Add a new expense\n            \n*   Role: Expense Admin\n    \n    *   Permissions:\n        \n        *   Approve expenses\n            \n        *   View all user expenses\n            \n        *   Delete expenses\n            \n        *   Add a new expense\n            \n\nTo create a new permission, go to the **Permissions** section of the Authorization Extension dashboard.\n\n![Dashboard - Extensions - Authorization Extensions Dashboard - Permissions](https://images.ctfassets.net/cdy7uua7fh8z/1KuY9kChurITXwOkfvT7Jd/44b2996aa8976acd0fd27b7360bd2c56/permissions.png)\n\nThen click the **CREATE PERMISSION** button. Then enter the name of the permission, the description and select the application for which this permission applies.\n\n![Dashboard - Extensions - Authorization Extensions Dashboard - Create Permissions](https://images.ctfassets.net/cdy7uua7fh8z/4iyUqIAjXwutcNa5pKjeie/6295453f5a9c956c006e481eabc6df0c/create-permission.png)\n\nOnce you have your permissions created, you can associate them with roles.\n\n## Learn more\n\n*   [Configure Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/configure-authorization-extension)\n*   [Enable API Access to Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/enable-api-access-to-authorization-extension)\n*   [Import and Export Authorization Extension Data](https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data)\n*   [Troubleshoot Authorization Extension](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-authorization-extension)\n*   [Use Rules with the Authorization Extension](https://auth0.com/docs/customize/extensions/authorization-extension/use-rules-with-the-authorization-extension)",
    "title": "Set Up Users in Authorization Extension Dashboard",
    "description": "Learn how to set up users, groups, roles, and permissions in the Authorization Extension Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/import-and-export-authorization-extension-data",
    "markdown": "# Import and Export Authorization Extension Data\n\n```\n{\n  \"configuration\": [\n    {\n      \"_id\": \"v1\",\n      \"rolesInToken\": true\n    }\n  ],\n  \"groups\": [\n    {\n      \"name\": \"Admin\",\n      \"description\": \"Administrators of the company\",\n      \"_id\": \"f185e4aa-0c28-4da7-8639-ae998512c838\"\n    },\n    {\n      \"_id\": \"5f5371c6-c8ff-4c7c-825e-c5ef8ac51cad\",\n      \"name\": \"HR\",\n      \"description\": \"Human Resources\",\n      \"members\": [\n        \"auth0|59c13f5ed6e34e41877c0810\"\n      ],\n      \"roles\": [\n        \"6ab494d6-2592-4af0-a62f-2c13646143d0\"\n      ],\n      \"nested\": [\n        \"59f2adac-9016-4051-ad02-dd5196b8f99e\"\n      ]\n    },\n    {\n      \"name\": \"Trainers\",\n      \"description\": \"HR Trainers for New Employees\",\n      \"_id\": \"59f2adac-9016-4051-ad02-dd5196b8f99e\"\n    }\n  ],\n  \"permissions\": [\n    {\n      \"applicationType\": \"client\",\n      \"applicationId\": \"fhginJh46igC6Rj630UeZBhUyDrgvJ08\",\n      \"description\": \"approve company expenditures\",\n      \"name\": \"Approve Expenses\",\n      \"_id\": \"e61f10f4-837e-4011-a52f-53618bd659e7\"\n    },\n    {\n      \"applicationType\": \"client\",\n      \"applicationId\": \"fhginJh46igC6Rj630UeZBhUyDrgvJ08\",\n      \"description\": \"approve hiring of employees\",\n      \"name\": \"Hire employees\",\n      \"_id\": \"03b94d9b-8893-413d-bdb3-451192264594\"\n    }\n  ],\n  \"roles\": [\n    {\n      \"applicationType\": \"client\",\n      \"applicationId\": \"fhginJh46igC6Rj630UeZBhUyDrgvJ08\",\n      \"description\": \"Control over HR-related tasks\",\n      \"name\": \"HR Manager\",\n      \"permissions\": [\n        \"e61f10f4-837e-4011-a52f-53618bd659e7\",\n        \"03b94d9b-8893-413d-bdb3-451192264594\"\n      ],\n      \"_id\": \"6ab494d6-2592-4af0-a62f-2c13646143d0\"\n    }\n  ]\n}\n```",
    "title": "Import and Export Authorization Extension Data",
    "description": "Describes how to import and export Authorization Extension Data.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/authorization-extension/migrate-to-authorization-extension-v2",
    "markdown": "# Migrate to Authorization Extension v2\n\nOne of the major changes between versions 1 and 2 of the Authorization Extension is the removal of the **Applications** section. This section was removed to simplify its inherent complexity, such as when it was used to define a policy for access control. The desired approach for such use cases is to use [rules](https://auth0.com/docs/customize/rules).\n\n## Upgrade extension version\n\nTo upgrade the Authorization Extension, go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select the **Installed Extensions** view.\n\nOn the Authorization Extension row, you'll see a link that will begin the upgrade process to the latest version.",
    "title": "Migrate to Authorization Extension v2",
    "description": "Describes how to upgrade the Authorization Extension v2.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/install-delegated-admin-extension",
    "markdown": "# Install Delegated Admin Extension\n\nYou can install the [Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension), which allows you to expose the **Users** section of the Auth0 Dashboard to a select group of users without allowing them access to the rest of the Dashboard.\n\n## Prerequisite\n\n[Create a Delegated Admin Dashboard application](https://auth0.com/docs/dashboard/guides/extensions/delegated-admin-create-app) in Auth0.\n\n## Install extension\n\n1.  Go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and filter for **Delegated Admin**.\n    \n2.  Select **Delegated Administration Dashboard** in the list of provided extensions. The **Install Extension** window will open.\n    \n    ![Dashboard - Extensions - Delegated Admin - Install](https://images.ctfassets.net/cdy7uua7fh8z/51vm5Sttau4SgnuLbUrKOK/c988e2a52c4b0fc1d091287f14edccda/dashboard-extensions-install_delegated-admin.png)\n3.  Set the following configuration variables, and select **Install**:\n    \n    | Variable | Description |\n    | --- | --- |\n    | **EXTENSION\\_CLIENT\\_ID** | **Client ID** of the application with which you plan to use this extension. |\n    | **TITLE** | Custom title that will appear at the top of the Delegated Administration Dashboard page. |\n    | **CUSTOM\\_CSS** | (_Optional_) Link to a custom CSS you can use to style the look of your Delegated Administration Dashboard page. |\n    | **FAVICON\\_PATH** | (_Optional_) Path to custom favicon. |\n    | **AUTH0\\_CUSTOM\\_DOMAIN** | (_Optional_) If you have a custom domain name configured, enter it here (e.g., `login.example.com`). This will change the authorization endpoint to `https://login.example.com/login`. |\n    | **FEDERATED\\_LOGOUT** | (_Optional_) Indicates whether to sign out from the connection when users log out. |\n    \n    Setting the `AUTH0_CUSTOM_DOMAIN` variable does not affect the extension URL; it only changes the authorization endpoint. When a custom domain is used, users that are logging into the extension will be navigated to `https://AUTH0_CUSTOM_DOMAIN/login` instead of the default `https://tenant-name.us.auth0.com/login`. If you navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), you will see that the extension created an additional application. This application is authorized to access the Management API, so you shouldn't modify it.\n\n## Add callback URLs to Application\n\n1.  Navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select the name of the application with which you plan to use this extension. This should be the application with the Client ID you entered earlier when setting the configuration variables for the Delegated Administration Dashboard.\n    \n2.  Locate **Allowed Callback URLs**, and add the appropriate callback URL for your region and your tenant's extensibility runtime.\n    \n    | Location | Name | Allowed Callback URL for Node.js 12 |\n    | --- | --- | --- |\n    | USA | US-1 | `https://{yourTenant}.us12.webtask.io/auth0-delegated-admin/login` |\n    | USA | US-3 | `https://{yourTenant}.us.webtask.run/auth0-delegated-admin/login` |\n    | Australia | AU  | `https://{yourTenant}.au12.webtask.io/auth0-delegated-admin/login` |\n    | Europe | EU  | `https://{yourTenant}.eu12.webtask.io/auth0-delegated-admin/login` |\n    | Japan | JP-1 | `https://{yourTenant}.jp.webtask.run/auth0-delegated-admin/login` |\n    \n    | Location | Name | Allowed Callback URL for Node.js 8 |\n    | --- | --- | --- |\n    | USA | US-1 | `https://YOUR_TENANT.us8.webtask.io/auth0-delegated-admin/login` |\n    | Europe | EU  | `https://YOUR_TENANT.eu8.webtask.io/auth0-delegated-admin/login` |\n    | Australia | AU  | `https://YOUR_TENANT.au8.webtask.io/auth0-delegated-admin/login` |\n    \n3.  Select **Save Changes**.\n    \n\n## Use extension\n\n1.  Go to [Auth0 Dashboard > Extensions](https://manage.auth0.com/#/extensions), and select the **Installed Extensions** view.\n    \n2.  Select **Delegated Administration Dashboard**. A new tab will open to display the login prompt.\n    \n    ![Extensions - Delegated Admin - Login prompt](https://images.ctfassets.net/cdy7uua7fh8z/3vMz5sulIjCU3BHCfQDJyE/1fd90600422c7d6ae4ca909f37db6784/login-prompt.png)\n    \n    Because we disabled signups for the database connection while configuring it, the login screen will not display a Sign Up option.\n    \n    Once you provide valid credentials, you will be directed to your custom **Delegated Administration Dashboard** page, which will have the **Title** you provided at the top of the page, and if you provided a custom CSS file, that styling will be applied.\n    \n    ![Extensions - Delegated Admin - Standard dashboard](https://images.ctfassets.net/cdy7uua7fh8z/3TqngvmqfsSSajsAzP3M9N/e44325f2d60b05769ed2c7c395c26f25/standard-dashboard.png)\n\n## Learn more\n\n*   [Create Delegated Admin Applications](https://auth0.com/docs/customize/extensions/delegated-administration-extension/create-delegated-admin-applications)",
    "title": "Install Delegated Admin Extension",
    "description": "Describes how to install the Delegated Administration Extension, which allows you to expose the Users section of the Auth0 Dashboard to a select group of users without allowing them access to the rest of the Dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/create-delegated-admin-applications",
    "markdown": "# Create Delegated Admin Applications\n\nUse the [Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension) to expose the **Users** section of the Auth0 Dashboard to a select group of users without allowing them access to the rest of the Dashboard. Before you add the Delegated Admin extension, you need to create the Delegated Admin application in Auth0.\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select **Create Application**.\n    \n2.  Enter a descriptive name for your Application (for example, **Users Dashboard**), select an application type of **Single-Page Web Application**, and click **Create**.\n    \n3.  In the **Settings** view, set the **Allowed Callback URLs** and **Allowed Logout URLs** based on your location, and click **Save Changes**.\n    \n    If you are using Node 8:\n    \n    | Location | Name | Login Link for Node.js 8 |\n    | --- | --- | --- |\n    | USA | US-1 | `https://YOUR_TENANT.us8.webtask.io/auth0-delegated-admin` |\n    | Europe | EU  | `https://YOUR_TENANT.eu8.webtask.io/auth0-delegated-admin` |\n    | Australia | AU  | `https://YOUR_TENANT.au8.webtask.io/auth0-delegated-admin` |\n    \n    If you are using Node 12:\n    \n    | Location | Name | Login Link |\n    | --- | --- | --- |\n    | Australia | AU  | `https://{yourTenant}.au.webtask.io/auth0-delegated-admin` |\n    | Europe | EU  | `https://{yourTenant}.eu.webtask.io/auth0-delegated-admin` |\n    | Europe | EU-2 | `https://{yourTenant}.eu.webtask.run/auth0-delegated-admin` |\n    | Japan | JP-1 | `https://{yourTenant}.jp.webtask.run/auth0-delegated-admin` |\n    | UK  | UK  | `https://{yourTenant}.uk.webtask.run/auth0-delegated-admin` |\n    | USA | US-1 | `https://{yourTenant}.us.webtask.io/auth0-delegated-admin` |\n    | USA | US-3 | `https://{yourTenant}.us.webtask.run/auth0-delegated-admin` |\n    \n\nNext, [install the Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension/install-delegated-admin-extension).\n\n## Learn more\n\n*   [Troubleshoot Extensions](https://auth0.com/docs/troubleshoot/integration-extensibility-issues/troubleshoot-extensions)",
    "title": "Create Delegated Admin Applications",
    "description": "Learn how to create an application to use with the Delegated Admin Extension, allowing you to selectively expose the users section of the dashboard.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks",
    "markdown": "# Delegated Administration: Extension Hooks\n\nIf you're a user assigned the **Delegated Admin - Administrator** role, you can manage the different Extension Hooks and queries that allow you to customize the behavior of the Delegated Administration extension.\n\nTo access the configuration area:\n\n1.  Log in to the Delegated Administration Dashboard.\n    \n2.  Click on your name in the top-right corner. You'll see a dropdown menu; click on the **Configure** option.\n    \n\nThe **Configuration** page to which you're redirected is where you can manage your Hooks and queries.\n\n## Extension Hooks Context\n\nThe context (**ctx**) object will expose a few helpers and information about the current request. The following methods and properties are available in every Extension Hook:\n\n*   Logging\n    \n*   Caching\n    \n*   Custom Data\n    \n*   Payload and Request\n    \n*   Remote Calls\n    \n\n### Logging\n\nTo add a message to the Webtask logs (which you can view using the Realtime Webtask Logs extension), call the **log** method:\n\n```\nfunction(ctx, callback) {\n  ctx.log('Logging action:', ctx.payload.action);\n  return callback();\n}\n```\n\nTo learn more about the Realtime Webtask Log extension, read [Realtime Webtask Logs](https://auth0.com/docs/customize/extensions/real-time-webtask-logs).\n\n### Caching\n\nTo cache something (such as a long list of departments), you can store it on the context's **global** object. This object will be available until the Webtask container recycles.\n\n```\nfunction(ctx, callback) {\n  ctx.global.departments = [ 'IT', 'HR', 'Finance' ];\n  return callback();\n}\n```\n\n### Custom data\n\nYou can store custom data within the extension. This field is limited to 400kb of data.\n\n```\nvar data = {\ndepartments: [ 'IT', 'HR', 'Finance' ]\n};\n\nctx.write(data)\n.then(function() {\n    // ...\n})\n.catch(function(err) {\n    // ...\n});\n```\n\nTo read the data:\n\n```\nctx.read()\n.then(function(data) {\n    // ...\n})\n.catch(function(err) {\n    // ...\n});\n```\n\n### Payload and request\n\nEach Extension Hook exposes the current payload or request with specific information. The request will always contain information about the user that is logged into the Users Dashboard:\n\n```\nfunction(ctx, callback) {\n  ctx.log('Current User:', ctx.request.user);\n  return callback();\n}\n```\n\n### Remote calls\n\nIf you want to call an external service (such as an API) to validate data or to load memberships, you can do this using the `request` module.\n\n```\nfunction(ctx, callback) {\nvar request = require('request');\n    request('http://api.mycompany.com/departments', function (error, response, body) {\n        if (error) {\n        return callback(error);\n        }\n\n        // ...\n    });\n}\n```\n\n### Hook contract\n\n*   `ctx`: The context object\n    \n    *   `payload`: The payload object\n        \n        *   `action`: The current action (for example, `delete:user`) that is being executed\n            \n        *   `user`: The user on which the action is being executed\n            \n*   `callback(error)`: The callback to which you can return an error if access is denied\n    \n\n### Sample use\n\nKelly manages the Finance department, and she should only be able to access users within her department.\n\n```\nfunction(ctx, callback) {\n  if (ctx.payload.action === 'delete:user') {\n    return callback(new Error('You are not allowed to delete users.'));\n  }\n\n  // Get the department from the current user's metadata.\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!department || !department.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // The IT department can access all users.\n  if (department === 'IT') {\n    return callback();\n  }\n\n  ctx.log('Verifying access:', ctx.payload.user.app_metadata.department, department);\n\n  if (!ctx.payload.user.app_metadata.department || ctx.payload.user.app_metadata.department !== department) {\n    return callback(new Error('You can only access users within your own department.'));\n  }\n\n  return callback();\n}\n```\n\nIf this hook is not configured, all users will be accessible.\n\nSupported action names:\n\n*   `read:user`\n    \n*   `delete:user`\n    \n*   `reset:password`\n    \n*   `change:password`\n    \n*   `change:username`\n    \n*   `change:email`\n    \n*   `read:devices`\n    \n*   `read:logs`\n    \n*   `remove:multifactor-provider`\n    \n*   `block:user`\n    \n*   `unblock:user`\n    \n*   `send:verification-email`\n    \n\n## Available Extension Hooks\n\nThe following Extension Hooks are available for use with the Delegated Administration Application:\n\n*   [Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n    \n*   [Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n    \n*   [Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n    \n*   [Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n    \n*   [Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)\n    \n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
    "title": "Delegated Administration: Extension Hooks",
    "description": "Learn how to customize the behavior of the Delegated Administration Extension using Extension Hooks.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-manage-users",
    "markdown": "# Delegated Administration: Manage Users\n\nIn the Application exposed by the Delegated Administration extension, there are two views available: **Users** and **Logs**. On the **User**s view, you can see the display and modify users associated with your Auth0 account.\n\nBy default, all users are displayed, but you can filter the displayed list by configuring a Filter Hook.\n\nFor more information on the Filter Hook, see [Delegation Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook).\n\n## User actions in Delegated Administration dashboard\n\nTo limit the number of options someone with access to the Dashboard exposed by the Delegated Administration extension, configure an Access Hook.\n\nRead more about Access Hooks at [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook).\n\nThe **Change Profile** option is available only if you have configured custom fields.\n\nNotice the new **Reset Password** option available via the extension. This option will send an email to the user allowing them to choose a new password. To do this, select a user, and select **Actions** > **Reset Password**.\n\n![Extensions - Administration Dashboard - Reset password](https://images.ctfassets.net/cdy7uua7fh8z/pb5CYFkEPisB5h06OzgKT/d45bb0831310219088cf2b2d35299c7e/reset-pass-01.png)\n\nThis will send an email to the user, containing a link to change the password.\n\nIf your profile indicates that you have the `Delegated Admin - Administrator` role, the **Logs** view allows you to see a list of authentications made by your users (this view is only visible to users with the `Delegated Admin - Administrator` role). The contents of this view are a subset of the data displayed in [Auth0 Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs). The Logs dashboard also displays data on administrative actions taken in the Auth0 Dashboard.\n\n## Create users\n\nYou can create a new user by selecting the **\\+ Create User** button on the **Users** view. You need to specify email and password. Depending on your role, you may not be able to set the **Departmen**t to which the new user belongs.\n\nFor example, users with the `Delegated Admin - Administrator` role can see the **Department** field and select any of its values.\n\n![Extensions - Administration Dashboard - Create admin](https://images.ctfassets.net/cdy7uua7fh8z/4vrbU6nRuIkF30ZPM4yHnG/73fd2060fe9618c9f465025cb56deb02/create-user-admin.png)\n\nOn the other hand, Kelly, who has the `Delegated Admin - User` role and belongs to the Finance department, cannot see the **Department** field. The user she creates will be automatically assigned to the Finance department.\n\n![Extensions - Delegated Administration Dashboard - Create user](https://images.ctfassets.net/cdy7uua7fh8z/2CSdiPbyiyPsURHH9X5VVZ/8416222627933bd35c044aa15c22dfae/create-user-kelly.png)\n\n#### Delegated Administration session timeout\n\nBy default, token expiration time is 10 hours. However, for security reasons, when using Delegated Administration, Auth0 doesn't save a token to cookies or `sessionStorage`. You must start a new session on each page reload.\n\n## Learn more\n\n*   [Delegated Administration: Extension Hooks](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks)",
    "title": "Delegated Administration: Manage Users",
    "description": "Learn how to manage users in the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/authorization-extension",
    "markdown": "# Authorization Extension API Explorer\n\n## Introduction\n\nThe Authorization Extension API enables you to:\n\n*   automate provisioning for your users, roles, groups, and permissions\n*   query the authorization context of your users in real time\n\nIn order to use it, you first have to [enable API access](https://auth0.com/docs/extensions/authorization-extension/v2#enable-api-access) from your Authorization Dashboard.\n\nFor more information on the Authorization Extension and how to configure it, refer to [Auth0 Authorization Extension](https://auth0.com/docs/extensions/authorization-extension).\n\nFor each endpoint in this explorer, you will find sample snippets you can use, in three available formats:\n\n*   HTTP request\n*   Curl command\n*   JavaScript: depending on the endpoint each snippet may use Node.js or simple JavaScript\n\nEach request should be sent with a Content-Type of `application/json`.\n\n## Find your extension URL\n\nAll endpoints in this explorer start with `https://{extension_url}`. This is the URL of your Authorization Dashboard. It differs based on you tenant's region:\n\n| Region | Extension URL |\n| --- | --- |\n| US West | `https://{yourTenant}.us.webtask.io/adf6e2f2b84784b57522e3b19dfc9201/api` |\n| Europe | `https://{yourTenant}.eu.webtask.io/adf6e2f2b84784b57522e3b19dfc9201/api` |\n| Australia | `https://{yourTenant}.au.webtask.io/adf6e2f2b84784b57522e3b19dfc9201/api` |\n\n## Get an Access Token\n\nWhen you [enabled API access for your tenant](https://auth0.com/docs/extensions/authorization-extension/v2#enable-api-access), an API was created at your [dashboard](https://manage.auth0.com/#), which you can use to access the Authorization Extension API.\n\nTo do so you will have to configure a machine to machine application which will have access to this API and which you will use to get an Access Token.\n\nFollow these steps to set up your application (you will have to do this only once):\n\n1.  Go to [Dashboard > Applications](https://manage.auth0.com/#/applications) and create a new application of type `Machine to Machine`.\n2.  Go to the [Dashboard > APIs](https://manage.auth0.com/#/apis) and select the `auth0-authorization-extension-api`.\n3.  Go to the `Machine to Machine Applications` tab, find the application you created at the first step, and toggle the `Unauthorized` to `Authorized`.\n4.  Select the [scopes](https://auth0.com/docs/scopes/current/api-scopes) that should be granted to your application, based on the endpoints you want to access. For example, `read:users` to [get all users](#get-all-users).\n\nTo get an Access Token, you need to `POST` to the `/oauth/token` endpoint. You can find detailed instructions [here](https://auth0.com/docs/flows/guides/client-credentials/call-api-client-credentials#request-token).\n\nUse this Access Token to access the Authorization Extension API.\n\n## Groups\n\nGroups are collections of users. The groups that you will create are dependent on the needs of your business process. For example, you might have a group for your users in Finance, a group for your users in IT, and so on.\n\nFor more information, refer to [Auth0 Authorization Extension](https://auth0.com/docs/extensions/authorization-extension#groups).\n\n## Get all Groups\n\n##### Examples\n\n```\nGET https://{extension_url}/groups\nAuthorization:  'Bearer {access_token}'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"groups\":[\n      {\n         \"_id\":\"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n         \"name\":\"Test\",\n         \"description\":\"Test\",\n         \"members\":[\n            \"auth0|59396da1b3c34a15589c780d\"\n         ],\n         \"mappings\":[\n\n         ]\n      },\n      {\n         \"_id\":\"81097bea-f7a3-48b6-a3fc-e2c3eb6c1ace\",\n         \"name\":\"Google\",\n         \"description\":\"Google\",\n         \"mappings\":[\n            {\n               \"_id\":\"529e053f-285b-4f7f-b73c-c8c37b0ae4f2\",\n               \"groupName\":\"Google\",\n               \"connectionName\":\"google-oauth2\"\n            }\n         ],\n         \"members\":[\n            \"auth0|59396da1b3c34a15589c780d\",\n            \"google-oauth2|113108011846505476166\"\n         ],\n         \"nested\":[\n            \"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\"\n         ],\n         \"roles\":[\n            \"9b814aac-87ba-4d84-8de6-3bcd0afee761\"\n         ]\n      }\n   ],\n   \"total\":2\n}\n```\n\n### GET /groups\n\nUse this endpoint to retrieve all groups.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n\n## Get a single Group\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n  \"_id\": \"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n  \"name\": \"Test\",\n  \"description\": \"Test\"\n}\n```\n\n### GET /groups/{group\\_id}\n\nUse this endpoint to get a single group based on its unique identifier. Add \"?expand\" to also load all roles and permissions for this group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to retrieve. |\n\n## Create Group\n\n##### Examples\n\n```\ncurl --request POST \\\n  --url 'https://{extension_url}/groups' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\": \"My name\", \"description\": \"My description\"}'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n  \"name\":\"My name\",\n  \"description\":\"My description\",\n  \"_id\":\"3ea7dc85-3e50-4ba8-ae5a-4956ed6b26d5\"\n}\n```\n\n### POST /groups\n\nUse this endpoint to create a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ncreate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `name`  <br>Required | The name of the new group |\n| `description` | A description of the new group |\n\n## Delete Group\n\n##### Examples\n\n```\nPOST https://{extension_url}/groups/{group_id}\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n```\n\n```\ncurl --request POST \\\n  --url 'https://{extension_url}/groups/{group_id}' \\\n  --header 'Authorization: Bearer {access_token}' \\\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /groups/{group\\_id}\n\nUse this endpoint to delete a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ndelete:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to delete |\n\n## Update Group\n\n##### Examples\n\n```\nPUT https://{extension_url}/groups/{group_id}\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n{\n  name: \"New name\",\n  description: \"New description\"\n}\n```\n\n```\ncurl --request PUT \\\n  --url 'https://{extension_url}/groups/{group_id}' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '{ \"name\": \"New name\", \"description\": \"New description\" }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n  \"_id\": \"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n  \"name\": \"New name\",\n  \"description\": \"New description\",\n  \"members\": [\n    \"auth0|59396da1b3c34a15589c780d\"\n  ]\n}\n```\n\n##### PUT /groups/{group\\_id}\n\nUse this endpoint to update the name or the description of a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to update |\n| `name`  <br>Required | The updated group name |\n| `description`  <br>Required | The updated group description |\n\n## Get Group Mappings\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/mappings\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n  \"_id\":\"529e053f-285b-4f7f-b73c-c8c37b0ae4f2\",\n  \"groupName\":\"Google\",\n  \"connectionName\":\"google-oauth2 (google-oauth2)\"\n}\n```\n\n### GET /groups/{group\\_id}/mappings\n\nUse this endpoint to retrieve the mappings of a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group whose mappings you want to retrieve |\n\n## Create Group Mappings\n\n##### Examples\n\n```\nPATCH https://{extension_url}/groups/{group_id}/mappings\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n{\n  groupName: \"Test\",\n  connectionName: \"google-oauth2\"\n}\n```\n\n```\ncurl -v -X PATCH \\\n  --url 'https://{extension_url}/api/groups/{group_id}/mappings' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[{\"groupName\": \"Test\", \"connectionName\": \"google-oauth2\"}]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n##### PATCH /groups/{group\\_id}/mappings\n\nUse this endpoint to create one or more mappings in a group.\n\nGroup Mappings allow you to dynamically \"add\" users to different Groups based on the users' Connections. Essentially, using the Connection and the Groups information provided by the Identity Provider, you can dynamically make the user a member of the group in which you've created the appropriate mapping. For more information, refer to [Group Mappings](https://auth0.com/docs/extensions/authorization-extension/v2/implementation/setup#group-mappings).\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group whose mappings you want to retrieve |\n| `groupName`  <br>Required | Group to add the users to |\n| `connectionName`  <br>Required | Connection for the mapping |\n\n## Delete Group Mappings\n\n##### Examples\n\n```\nDELETE https://{extension_url}/groups/{group_id}/mappings\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n{\n  _id: [\n    \"7b57312c-579a-4798-bd91-9647563e1b8a\"\n  ],\n}\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/groups/{group_id}/mappings' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '{\"_id\": [\"7b57312c-579a-4798-bd91-9647563e1b8a\"]}'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /groups/{group\\_id}/mappings\n\nUse this endpoint to delete one or more group mappings from a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more information on how to implement this, refer to our [machine-to-machine flow implementation guide](https://auth0.com/docs/flows/guides/client-credentials/call-api-client-credentials) |\n| `{group_id}`  <br>Required | The id of the group whose mappings you want to delete |\n\n## Get Group Members\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/members\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"total\":1,\n   \"users\":[\n      {\n         \"email\":\"richard.dowinton@auth0.com\",\n         \"email_verified\":true,\n         \"user_id\":\"auth0|59396da1b3c34a15589c780d\",\n         \"picture\":\"https://s.gravatar.com/avatar/3e8ce75cfe7c53f13715df274f63e129?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fri.png\",\n         \"nickname\":\"richard.dowinton\",\n         \"identities\":[\n            {\n               \"user_id\":\"59396da1b3c34a15589c780d\",\n               \"provider\":\"auth0\",\n               \"connection\":\"Username-Password-Authentication\",\n               \"isSocial\":false\n            }\n         ],\n         \"updated_at\":\"2017-06-25T07:28:54.719Z\",\n         \"created_at\":\"2017-06-08T15:30:41.237Z\",\n         \"name\":\"richard.dowinton@auth0.com\",\n         \"app_metadata\":{\n            \"authorization\":{\n               \"roles\":[\n\n               ],\n               \"permissions\":[\n\n               ]\n            }\n         },\n         \"last_ip\":\"83.208.22.80\",\n         \"last_login\":\"2017-06-25T07:28:54.719Z\",\n         \"logins_count\":12\n      }\n   ]\n}\n```\n\n### GET /groups/{group\\_id}/members\n\nUse this endpoint to get the members for a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group whose members you want to retrieve |\n| `{page}` | The page number. One-based. |\n| `{per_page}` | The amount of entries per page. Default: `25`. Max value: `25`. |\n\n## Add Group Members\n\n##### Examples\n\n```\nPATCH https://{extension_url}/groups/{group_id}/members\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"google-oauth2|113108011846505476166\" ]\n```\n\n```\ncurl --request PATCH \\\n  --url 'https://{extension_url}/groups/{group_id}/members' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[ \"{user_id}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### PATCH /groups/{group\\_id}/members\n\nUse this endpoint to add one or more members in a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to which you want to add members |\n| `{user_id}` | Id of the user to add in a group |\n\n## Delete Group Members\n\n##### Examples\n\n```\nDELETE https://{extension_url}/groups/{group_id}/members\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[\"7b57312c-579a-4798-bd91-9647563e1b8a\"]\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/groups/{group_id}/members' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[\"7b57312c-579a-4798-bd91-9647563e1b8a\"]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /groups/{group\\_id}/members\n\nUse this endpoint to remove one or more members from a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which you want to remove members |\n\n## Get Nested Group Members\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/members/nested\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"total\":1,\n   \"nested\":[\n      {\n         \"user\":{\n            \"user_id\":\"auth0|59396da1b3c34a15589c780d\",\n            \"name\":\"richard.dowinton@auth0.com\",\n            \"nickname\":\"richard.dowinton\",\n            \"email\":\"richard.dowinton@auth0.com\"\n         },\n         \"group\":{\n            \"_id\":\"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n            \"name\":\"New name\",\n            \"description\":\"New description\"\n         }\n      }\n   ]\n}\n```\n\n### GET /groups/{group\\_id}/members/nested\n\nUse this endpoint to get the nested members for a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which the nested members will be retrieved |\n| `{page}` | The page number. One-based. |\n| `{per_page}` | The amount of entries per page. Default: `25`. Max value: `25`. |\n\n## Get Nested Groups\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/nested\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"_id\":\"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n      \"name\":\"Test\",\n      \"description\":\"Test\",\n      \"members\":[\n         \"auth0|59396da1b3c34a15589c780d\"\n      ]\n   }\n]\n```\n\n### GET /groups/{group\\_id}/nested\n\nUse this endpoint to get the nested groups for a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which the nested members will be retrieved |\n\n## Add Nested Groups\n\n##### Examples\n\n```\nPATCH https://{extension_url}/groups/{group_id}/nested\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"{group_id_to_add}\" ]\n```\n\n```\ncurl --request PATCH \\\n  --url 'https://{extension_url}/groups/{group_id}/nested' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '[ \"{group_id_to_add}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### PATCH /groups/{group\\_id}/nested\n\nUse this endpoint to add nested groups.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to which you want to add members |\n| `{group_id_to_add}` | List of group IDs that you want to add in the group |\n\n## Delete Nested Groups\n\n##### Examples\n\n```\nDELETE https://{extension_url}/groups/{group_id}/nested\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[\"{NESTED_GROUP_ID}\"]\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/groups/{group_id}/nested' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[\"{NESTED_GROUP_ID}\"]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /groups/{group\\_id}/nested\n\nUse this endpoint to remove one or more nested groups.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which you want to remove other group members |\n| `{NESTED_GROUP_ID}`  <br>Required | The id of the group to remove |\n\n## Get Group Roles\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/roles\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"applicationType\":\"client\",\n      \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n      \"description\":\"Test\",\n      \"name\":\"Test\",\n      \"permissions\":[\n\n      ],\n      \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\"\n   }\n]\n```\n\n### GET /groups/{group\\_id}/roles\n\nUse this endpoint to get the roles for a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which the nested members will be retrieved |\n\n## Add Group Roles\n\n##### Examples\n\n```\nPATCH https://{extension_url}/groups/{group_id}/roles\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"google-oauth2|113108011846505476166\" ]\n```\n\n```\ncurl --request PATCH \\\n  --url 'https://{extension_url}/groups/{group_id}/roles' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[ \"{role_id}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### PATCH /groups/{group\\_id}/roles\n\nUse this endpoint to add roles to a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group to which you want to add members |\n| `{role_id}` | List of role IDs to add in the group |\n\n## Delete Group Roles\n\n##### Examples\n\n```\nDELETE https://{extension_url}/groups/{group_id}/roles\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[\"{GROUP_ROLES_ID}\"]\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/groups/{group_id}/roles' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '[\"{role_id}\"]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /groups/{group\\_id}/roles\n\nUse this endpoint to remove one or more groups roles.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which you want to remove members |\n| `{role_id}`  <br>Required | The IDs of the roles to be removed from the group |\n\n## Get Nested Group Roles\n\n##### Examples\n\n```\nGET https://{extension_url}/groups/{group_id}/roles/nested\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"role\":{\n         \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\",\n         \"applicationType\":\"client\",\n         \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n         \"description\":\"Test\",\n         \"name\":\"Test\",\n         \"permissions\":[\n\n         ],\n         \"users\":[\n            \"auth0|59396da1b3c34a15589c780d\"\n         ]\n      },\n      \"group\":{\n         \"_id\":\"81097bea-f7a3-48b6-a3fc-e2c3eb6c1ace\",\n         \"name\":\"Google\",\n         \"description\":\"Google\",\n         \"mappings\":[\n            {\n               \"_id\":\"529e053f-285b-4f7f-b73c-c8c37b0ae4f2\",\n               \"groupName\":\"Google\",\n               \"connectionName\":\"google-oauth2\"\n            }\n         ],\n         \"members\":[\n            \"auth0|59396da1b3c34a15589c780d\",\n            \"google-oauth2|113108011846505476166\"\n         ],\n         \"nested\":[\n            \"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\"\n         ],\n         \"roles\":[\n            \"9b814aac-87ba-4d84-8de6-3bcd0afee761\"\n         ]\n      }\n   }\n]\n```\n\n### GET /groups/{group\\_id}/roles/nested\n\nUse this endpoint to get the nested roles for a group.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your application retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{group_id}`  <br>Required | The id of the group from which the nested members will be retrieved |\n\n## Roles\n\nRoles are collections of permissions. For example, let's say that you have an application that allows employees to enter in company expenses. You want all employees to be able to submit expenses, but want certain Finance users to have more admin type of actions such as being able to approve or delete expenses. These actions can be mapped to [Permissions](https://auth0.com/docs/extensions/authorization-extension#permissions) and then assigned to a certain role.\n\nFor more information, refer to [Auth0 Authorization Extension](https://auth0.com/docs/extensions/authorization-extension#roles).\n\n## Get all Roles\n\n##### Examples\n\n```\nGET https://{extension_url}/roles\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"roles\":[\n      {\n         \"applicationType\":\"client\",\n         \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n         \"description\":\"Test\",\n         \"name\":\"Test\",\n         \"permissions\":[\n\n         ],\n         \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\"\n      },\n      {\n         \"applicationType\":\"client\",\n         \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n         \"description\":\"Example\",\n         \"name\":\"Example 2\",\n         \"permissions\":[\n\n         ],\n         \"_id\":\"7f3d03a7-b44e-4605-ad68-c2d94912a692\"\n      }\n   ],\n   \"total\":2\n}\n```\n\n### GET /roles\n\nUse this endpoint to retrieve all roles.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n\n## Get a single Role\n\n##### Examples\n\n```\nGET https://{extension_url}/roles/{role_id}\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\",\n   \"name\":\"Test\",\n   \"description\":\"Test\"\n}\n```\n\n### GET /roles/{role\\_id}\n\nUse this endpoint to get a single role based on its unique identifier.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{role_id}`  <br>Required | The id of the role to retrieve. |\n\n## Create Role\n\n##### Examples\n\n```\ncurl --request POST \\\n  --url 'https://{extension_url}/roles' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\":\"My new example name\", \"description\":\"Example description\", \"applicationType\":\"client\", \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\", \"permissions\":[\"{permission_id}\"] }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"name\":\"Example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n   \"permissions\":[\n      \"bc6945e0-393a-4405-99d9-96903eaec4a1\"\n   ],\n   \"_id\":\"22787849-f39c-4165-814f-6996ad8e72a0\"\n}\n```\n\n### POST /roles\n\nUse this endpoint to create a role.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ncreate:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `name` | The new role's name |\n| `description` | The new role's description |\n| `applicationType` | The new role's application type |\n| `applicationId` | The new role's application Id |\n| `permissions` | A comma separated list of permissions (`{permission_id}`) for the new role |\n\n## Update Role\n\n##### Examples\n\n```\nPUT https://{extension_url}/roles/{role_id}\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n{\n   \"name\":\"My new example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n   \"permissions\":[\n      \"{permission_id}\"\n   ]\n}\n```\n\n```\ncurl --request PUT \\\n  --url 'https://{extension_url}/roles/{role_id}' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"name\":\"My new example name\", \"description\":\"Example description\", \"applicationType\":\"client\", \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\", \"permissions\":[\"{permission_id}\"] }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"_id\":\"22787849-f39c-4165-814f-6996ad8e72a0\",\n   \"name\":\"My new example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n   \"permissions\":[\n      \"deeb552d-2d98-4efb-bb84-0c8babe5f431\"\n   ]\n}\n```\n\n##### PUT /roles/{role\\_id}\n\nUse this endpoint to update the details of a role.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{role_id}`  <br>Required | The id of the role to update |\n| `name` | The updated role name |\n| `description` | The updated role description |\n| `applicationType` | The updated application type |\n| `applicationId` | The updated application Id |\n| `permissions` | The updated list of permissions |\n\n## Delete Role\n\n##### Examples\n\n```\nDELETE https://{extension_url}/roles/{role_id}\nAuthorization:  'Bearer {access_token}'\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/roles/{role_id}' \\\n  --header 'Authorization: Bearer {access_token}'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /roles/{role\\_id}\n\nUse this endpoint to remove a role.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ndelete:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{role_id}`  <br>Required | The id of the role to delete |\n\n## Permissions\n\nPermissions are actions or functions that a user, or group of user, is allowed to do. For example, let's say that you have an application that allows employees to enter in company expenses. You want all employees to be able to submit expenses, but want certain Finance users to have more admin type of actions such as being able to approve or delete expenses. These actions can be mapped to [permissions](https://auth0.com/docs/extensions/authorization-extension#permissions) (which later on can be grouped in [roles](https://auth0.com/docs/extensions/authorization-extension#roles)):\n\nFor more information, refer to [Auth0 Authorization Extension](https://auth0.com/docs/extensions/authorization-extension#permissions).\n\n## Get all Permissions\n\n##### Examples\n\n```\nGET https://{extension_url}/permissions\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"permissions\":[\n      {\n         \"applicationType\":\"client\",\n         \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n         \"description\":\"Example permission\",\n         \"name\":\"Example\",\n         \"_id\":\"deeb552d-2d98-4efb-bb84-0c8babe5f431\"\n      }\n   ],\n   \"total\":1\n}\n```\n\n### GET /permissions\n\nUse this endpoint to retrieve all permissions.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:permissions\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n\n## Get a single Permission\n\n##### Examples\n\n```\nGET https://{extension_url}/permissions/{permission_id}\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"_id\":\"deeb552d-2d98-4efb-bb84-0c8babe5f431\",\n   \"name\":\"Example\",\n   \"description\":\"Example permission\"\n}\n```\n\n### GET /permissions/{permission\\_id}\n\nUse this endpoint to get a single permission based on its unique identifier.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:permissions\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{permission_id}`  <br>Required | The id of the permission to retrieve. |\n\n## Create Permission\n\n##### Examples\n\n```\ncurl --request POST \\\n  --url 'https://{extension_url}/permissions' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\":\"Example name\", \"description\":\"Example description\", \"applicationType\":\"client\", \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\" }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"name\":\"Example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n   \"_id\":\"4dcdbcbb-e598-4b8f-abc1-7feb57dc54fe\"\n}\n```\n\n### POST /permissions\n\nUse this endpoint to create a permission.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ncreate:permissions\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `name` | The new permission's name |\n| `description` | The new permission's description |\n| `applicationType` | The new permission's application type |\n| `applicationId` | The new permission's application Id |\n\n## Update Permission\n\n##### Examples\n\n```\nPUT https://{extension_url}/permissions/{permission_id}\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n{\n   \"name\":\"New example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\"\n}\n```\n\n```\ncurl --request PUT \\\n  --url 'https://{extension_url}/permissions/{permission_id}' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --data '{ \"name\":\"New example name\", \"description\":\"Example description\", \"applicationType\":\"client\", \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\" }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"_id\":\"bc6945e0-393a-4405-99d9-96903eaec4a1\",\n   \"name\":\"New example name\",\n   \"description\":\"Example description\",\n   \"applicationType\":\"client\",\n   \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\"\n}\n```\n\n##### PUT /permissions/{permission\\_id}\n\nUse this endpoint to update the details of a permission.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:permissions\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{permission_id}`  <br>Required | The id of the permission to update |\n| `name` | The updated permission name |\n| `description` | The updated permission description |\n| `applicationType` | The updated application type |\n| `applicationId` | The updated application Id |\n\n## Delete Permission\n\n##### Examples\n\n```\nDELETE https://{extension_url}/permissions/{permission_id}\nAuthorization:  'Bearer {access_token}'\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/permissions/{permission_id}' \\\n  --header 'Authorization: Bearer {access_token}'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /permissions/{permission\\_id}\n\nUse this endpoint to remove a permission.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\ndelete:permissions\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{permission_id}`  <br>Required | The id of the permission to delete |\n\n## Users\n\nThese endpoints enable you to manage all the current users of your applications. You can retrieve their profile and edit or view their groups and their roles.\n\nFor more information, refer to [Auth0 Authorization Extension](https://auth0.com/docs/extensions/authorization-extension/v2#users).\n\n## Get all Users\n\n##### Examples\n\n```\nGET https://{extension_url}/users\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"start\":0,\n   \"limit\":100,\n   \"length\":5,\n   \"users\":[\n      {\n         \"logins_count\":12,\n         \"identities\":[\n            {\n               \"isSocial\":false,\n               \"user_id\":\"59091da1b3c34a15589c780d\",\n               \"provider\":\"auth0\",\n               \"connection\":\"Username-Password-Authentication\"\n            }\n         ],\n         \"user_id\":\"auth0|59091da1b3c34a15589c780d\",\n         \"last_login\":\"2017-06-25T07:28:54.719Z\",\n         \"name\":\"placeholder.user@example.com\",\n         \"picture\":\"https://s.gravatar.com/avatar/your-gravatar.png\",\n         \"email\":\"richard.dowinton@auth0.com\"\n      }\n   ],\n   \"total\":1\n}\n```\n\n### GET /users\n\nUse this endpoint to retrieve all users.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{page}` | The page number. One-based. |\n| `{per_page}` | The amount of entries per page. Default: `100`. Max value: `200`. |\n\n## Get a single User\n\n##### Examples\n\n```\nGET https://{extension_url}/users/{user_id}\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"email\":\"placeholder.user@example.com\",\n   \"email_verified\":true,\n   \"user_id\":\"auth0|59091da1b3c34a15589c780d\",\n   \"picture\":\"https://s.gravatar.com/avatar/your-gravatar.png\",\n   \"nickname\":\"placeholder.user\",\n   \"identities\":[\n      {\n         \"user_id\":\"59091da1b3c34a15589c780d\",\n         \"provider\":\"auth0\",\n         \"connection\":\"Username-Password-Authentication\",\n         \"isSocial\":false\n      }\n   ],\n   \"updated_at\":\"2017-06-25T07:28:54.719Z\",\n   \"created_at\":\"2017-06-08T15:30:41.237Z\",\n   \"name\":\"placeholder.user@example.com\",\n   \"app_metadata\":{\n      \"authorization\":{\n         \"roles\":[\n\n         ],\n         \"permissions\":[\n\n         ]\n      }\n   },\n   \"last_ip\":\"83.208.22.80\",\n   \"last_login\":\"2017-06-25T07:28:54.719Z\",\n   \"logins_count\":12\n}\n```\n\n### GET /users/{user\\_id}\n\nUse this endpoint to get a single user based on its unique identifier.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user to retrieve. |\n\n## Get User Groups\n\n##### Examples\n\n```\nGET https://{extension_url}/users/{user_id}/groups\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"_id\":\"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n      \"name\":\"Test\",\n      \"description\":\"Test\"\n   },\n   {\n      \"_id\":\"81097bea-f7a3-48b6-a3fc-e2c3eb6c1ace\",\n      \"name\":\"Google\",\n      \"description\":\"Google\"\n   }\n]\n```\n\n### GET /users/{user\\_id}/groups\n\nUse this endpoint to get the groups of a single user, based on its unique identifier. Add \"?expand\" to also load all roles and permissions for these groups.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user to retrieve. |\n\n## Add User to Groups\n\n##### Examples\n\n```\nPATCH https://{extension_url}/users/{user_id}/groups\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"{group_id}\" ]\n```\n\n```\ncurl --request PATCH \\\n  --url 'https://{extension_url}/users/{user_id}/groups' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '[ \"{group_id}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### PATCH /users/{user\\_id}/groups\n\nUse this endpoint to add a user to one or more groups.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user that you want to add to groups |\n| `{group_id}`  <br>Required | The id of the group to which you want to add users |\n\n## Calculate Group Memberships\n\n##### Examples\n\n```\nGET https://{extension_url}/users/{user_id}/groups/calculate\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"_id\":\"2a1e2b9f-3435-4954-8c5d-56e8e9ce763f\",\n      \"name\":\"Test\",\n      \"description\":\"Test\"\n   },\n   {\n      \"_id\":\"81097bea-f7a3-48b6-a3fc-e2c3eb6c1ace\",\n      \"name\":\"Google\",\n      \"description\":\"Google\"\n   }\n]\n```\n\n### GET /users/{user\\_id}/groups/calculate\n\nUse this endpoint to calculate the group memberships for a user (including nested groups).\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:groups\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user for whom you want to calculate the group memberships |\n\n## Get User Roles\n\n##### Examples\n\n```\nGET https://{extension_url}/users/{user_id}/roles\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\",\n      \"name\":\"Test\",\n      \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n      \"description\":\"Test\"\n   },\n   {\n      \"_id\":\"7f3d03a7-b44e-4605-ad68-c2d94912a692\",\n      \"name\":\"Example 2\",\n      \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n      \"description\":\"Example\"\n   }\n]\n```\n\n### GET /users/{user\\_id}/roles\n\nUse this endpoint to get the roles of a single user, based on its unique identifier.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user for whom you want to retrieve the roles |\n\n## Add User to Roles\n\n##### Examples\n\n```\nPATCH https://{extension_url}/users/{user_id}/roles\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"{role_id}\" ]\n```\n\n```\ncurl --request PATCH \\\n  --url 'https://{extension_url}/users/{user_id}/roles' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '[ \"{role_id}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### PATCH /users/{user\\_id}/roles\n\nUse this endpoint to assign a role to a user.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user that you want to assign to roles |\n| `{role_id}`  <br>Required | The id of the role to which you want to assign users |\n\n## Remove User from Roles\n\n##### Examples\n\n```\nDELETE https://{extension_url}/users/{user_id}/roles\nContent-Type:   'application/json'\nAuthorization:  'Bearer {access_token}'\n[ \"{role_id}\" ]\n```\n\n```\ncurl --request DELETE \\\n  --url 'https://{extension_url}/users/{user_id}/roles' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '[ \"{role_id}\" ]'\n```\n\n> RESPONSE SAMPLE:\n\n```\n(empty response body)\n```\n\n### DELETE /users/{user\\_id}/roles\n\nUse this endpoint to remove one or more user from a role.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nupdate:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user you want to remove from roles |\n| `body`  <br>Required | The id of the role(s) you want to remove users from (i.e. `[ \"{role_id}\" ]`) |\n\n## Calculate Roles\n\n##### Examples\n\n```\nGET https://{extension_url}/users/{user_id}/roles/calculate\n```\n\n> RESPONSE SAMPLE:\n\n```\n[\n   {\n      \"_id\":\"9b814aac-87ba-4d84-8de6-3bcd0afee761\",\n      \"name\":\"Test\",\n      \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n      \"description\":\"Test\"\n   },\n   {\n      \"_id\":\"7f3d03a7-b44e-4605-ad68-c2d94912a692\",\n      \"name\":\"Example 2\",\n      \"applicationId\":\"LcGQZRtjVPPtZfq33I8vtKxldPKPRwBa\",\n      \"description\":\"Example\"\n   }\n]\n```\n\n### GET /users/{user\\_id}/roles/calculate\n\nUse this endpoint to calculate the roles assigned to the user (including through group memberships).\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:roles\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 in order to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required | The id of the user for whom you want to calculate the roles |\n\n##### Examples\n\n```\ncurl --request POST \\\n  --url 'https://{extension_url}/users/{user_id}/policy/{client_id}' \\\n  --header 'Authorization: Bearer {access_token}' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"connectionName\": \"Username-Password-Database\", \"groups\": [{group_id}] }'\n```\n\n> RESPONSE SAMPLE:\n\n```\n{\n   \"groups\":[\n      \"New name\",\n      \"Google\",\n      \"My name\"\n   ],\n   \"permissions\":[\n\n   ],\n   \"roles\":[\n      \"Test\",\n      \"Example 2\"\n   ]\n}\n```\n\n### POST /users/{user\\_id}/policy/{client\\_id}\n\nUse this endpoint to execute the authorization policy for a user in the context of a client. This will return the user's groups but also roles and permissions that apply to the current client.\n\n### Scopes\n\nThe [Access Token](#get-an-access-token) should have the following scopes:\n\nread:users\n\n### Parameters\n\n| Parameter | Description |\n| --- | --- |\n| `{extension_url}`  <br>Required | The URL of your Authorization Extension. For more info, see [Find your extension URL](#find-your-extension-url) |\n| `{access_token}`  <br>Required | The token your client retrieved from Auth0 to access the API. For more info, see [Get an Access Token](#get-an-access-token) |\n| `{user_id}`  <br>Required |     |\n| `{client_id}`  <br>Required |     |\n| `connectionName`  <br>Required | The name of the connection with which the user logged in |\n| `groups` | List of group names received from the IdP (AD, ADFS, and so on) |",
    "title": "Authorization Extension API Explorer",
    "description": "Get started using Auth0. Implement authentication for any kind of application in minutes.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles",
    "markdown": "# Create Roles\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"ROLE_NAME\", \"description\": \"ROLE_DESC\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/roles',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {name: 'ROLE_NAME', description: 'ROLE_DESC'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"ROLE_NAME\",\n                              @\"description\": @\"ROLE_DESC\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"ROLE_NAME\",\n  \"description\": \"ROLE_DESC\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Create Roles",
    "description": "Learn how to create a role using the Auth0 Dashboard or the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/how-to-set-up-aws-for-delegated-authentication",
    "markdown": "# Configure Amazon Web Services for Delegated Authentication\n\nYou can configure Amazon Web Services (AWS) for delegated authentication with Auth0. To learn more, [Configure Amazon Web Services for Single Sign-on](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso) and [Secure AWS API Gateway Endpoints Using Custom Authorizers](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-custom-authorizers).\n\n## Create a SAML provider in AWS\n\n1.  Log in to AWS, and go to the [IAM console](https://console.aws.amazon.com/iam). Using the left-hand navigation menu, select **Identity Providers**. Click **Create Provider**. Set the following parameters:\n    \n    | Parameter | Description and Sample Value |\n    | --- | --- |\n    | Provider Type | The type of provider. Set as `SAML` |\n    | Provider Name | A descriptive name for the provider, such as `auth0SamlProvider` |\n    | Metadata Document | Upload the file containing the Auth0 metadata, found in **Dashboard > Applications > Application Settings > Advanced Settings > Endpoints > SAML Metadata URL** |\n    \n2.  Click **Next Step**.\n    \n3.  Verify your settings and click **Create** if everything is correct.\n    \n\n## Create a role for your SAML provider\n\nTo use the provider, you must create an IAM role using the provider in the role's trust policy.\n\n1.  In the IAM console, go to [Roles](https://console.aws.amazon.com/iam/home#/roles). Click **Create role**. You'll be redirected to the **Trust** page. Indicate **Saml 2.0 federation** under **Select type of trusted entity**. Provide the following values:\n    \n    | Parameter | Value |\n    | --- | --- |\n    | SAML Provider | The name for your new role |\n    | Attribute | `SAML:iss` |\n    | Value | `urn:{yourDomain}` |\n    \n2.  Click **Next: Permissions** to proceed.\n    \n3.  You will need to attach permissions policies to your new role. You'll attach a custom policy. To create one, click **Create Policy**.\n    \n4.  In the **Create policy** editor that launches, switch over to the **JSON** tab. Provide a custom policy.\n    \n    ```\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [{\n          \"Effect\": \"Allow\",\n          \"Action\": [\n            \"*\"\n          ],\n          \"Resource\": [\n          \"arn:aws:s3:::{yourBucket}/<%= '${saml:sub}' %>\",\n          \"arn:aws:s3:::{yourBucket}/<%= '${saml:sub}' %>/*\"]\n      }]\n    }\n    ```\n    \n    This defines the permissions that users granted this role will have with AWS. Click **Review policy**.\n5.  Review the policy that you've created. Be sure to provide a **Name** for your policy and (optionally) a **Description**.\n    \n6.  Click **Create policy** when done. If successful, you'll see the following message confirming the creation of your new policy: \"auth0SamlRolePolicy has been created\".\n    \n7.  Returning to the role creation wizard (you should be on step **2 - Permissions**), find the new policy you just create and click its checkbox to attach the policy to your role. We recommend using the **Customer managed** filter to find your policy.\n    \n8.  Click **Next: Review** to proceed.\n    \n9.  Review the information about your role, provide a **Role name**, and optionally a **Role description**. You'll see the policy you attached as well. If everything looks correct, click **Create role** to proceed.\n    \n10.  Once created, you can find your roles located on the primary **Roles** page.\n    \n\n## Copy the ARN Values\n\nThe following instructions will show you where you can find the Provider and Role ARN values.\n\n### Provider ARN\n\nIn the IAM console, go to [Identity providers](https://console.aws.amazon.com/iam/home#/providers). Select the role in which you're interested to open up its summary page. Copy the **Provider ARN** value, which is listed first under **Summary**.\n\n### Role ARN\n\nIn the IAM console, go to [Roles](https://console.aws.amazon.com/iam/home#/roles). Select the role in which you're interested to open up its summary page. Copy the **Role ARN** value, which is listed first under **Summary**.",
    "title": "Configure Amazon Web Services for Delegated Authentication",
    "description": "Learn how to configure Amazon Web Services (AWS) for delegated authentication.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso",
    "markdown": "# Configure Amazon Web Services for Single Sign-On\n\nBy integrating Auth0 with AWS, you'll allow your users to log in to AWS using any supported identity provider.\n\nTo configure AWS for SSO, you need to complete the following steps:\n\n1.  Create an external identity provider in AWS.\n    \n2.  Configure the SAML2 Web App addon for your Auth0 application.\n    \n3.  Complete AWS identity provider configuration.\n    \n4.  Create an AWS IAM role.\n    \n5.  Map the AWS role to a user.\n    \n\n## Create an external identity provider in AWS\n\n1.  Set up an external identity provider in AWS using AWS's [Connect to your External Identity Provider](https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-idp.html) guide with one change.\n    \n    1.  Rather than downloading the AWS metadata file, click **Show Individual Metadata Values**.\n        \n    2.  Copy the **AWS SSO issuer URL** and **AWS SSO ACS URL** values. You will use these in the next section.\n        \n2.  Leave this page open in your browser because you'll need to complete the configuration in a future section.\n    \n\n## Configure SAML SSO for Auth0\n\nConfigure the SAML2 Web App add-on for your application using the Auth0 Dashboard. To learn how, read [Configure Auth0 as Identity Provider for Amazon Web Services](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-aws).\n\n## Complete AWS identity provider configuration\n\n1.  Return to the open AWS SSO identity provider page in your browser.\n    \n2.  Upload the metadata file you downloaded and saved in the previous section.\n    \n3.  Review and **Confirm** that you are changing the identity source.\n    \n\n## Create AWS IAM role\n\nTo use the provider, you must create an IAM role using the provider in the role's trust policy.\n\n1.  In the sidebar, under **Access Management**, navigate to [**Roles**](https://console.aws.amazon.com/iam/home#/roles). Click **Create Role**.\n    \n2.  On the next page, you will be asked to select the type of trusted entity. Select **SAML 2.0 Federation**.\n    \n3.  When prompted, set the provider you created above as the **SAML provider**. Select **Allow programmatic and AWS Management Console access**. Click **Next** to proceed.\n    \n4.  On the **Attach Permission Policies** page, select the appropriate policies to attach to the role. These define the permissions that users granted this role will have with AWS. For example, to grant your users read-only access to IAM, filter for and select the `IAMReadOnlyAccess` policy. Once you are done, click **Next Step**.\n    \n5.  The third **Create Role** screen is **Add Tags**. You can use tags to organize the roles you create if you will be creating a significant number of them.\n    \n6.  On the **Review** page, set the **Role Name** and review your settings. Provide values for the following parameters:\n    \n    | **Field** | **Description** |\n    | --- | --- |\n    | **Role name** | Descriptive name for your role. |\n    | **Role description** | Description of what your role is used for. |\n    \n7.  Review the **Trusted entities** and **Policies** information, then click **Create Role**.\n    \n\n## Map AWS role to a user\n\nThe **AWS roles** specified will be associated with an **IAM policy** that enforces the type of access allowed to a resource, including the AWS Consoles. To learn more about roles and policies, read [Creating IAM Roles](http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-creatingrole.html).\n\n1.  To map an AWS role to a user, create a [rule](https://auth0.com/docs/customize/rules):\n    \n    ```\n    function (user, context, callback) {\n    \n      user.awsRole = 'arn:aws:iam::951887872838:role/TestSAML,arn:aws:iam::951887872838:saml-provider/MyAuth0';\n      user.awsRoleSession = user.name;\n    \n      context.samlConfiguration.mappings = {\n        'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',\n        'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession'\n      };\n    \n      callback(null, user, context);\n    \n    }\n    ```\n    \n    In the code snippet above, `user.awsRole` identifies the AWS role and the IdP. The AWS role identifier comes before the comma, and the IdP identifier comes after the comma.\n    1.  Your rule can obtain these two values in multiple ways. You can get these values from the IAM Console by selecting the items you created in AWS in the previous steps from the left sidebar. Both the Identity Provider and the Role you created have an ARN available to copy if you select them in the Console.\n        \n    2.  In the example above, both of these values are hard-coded into the rule. Alternatively, you might also store these values in the [user profile](https://auth0.com/docs/videos/get-started-series/learn-user-profiles) or derive them using other attributes. For example, if you're using Active Directory, you can map properties associated with users, such as `group` to the appropriate AWS role:\n        \n        ```\n        var awsRoles = {\n          'DomainUser': 'arn:aws:iam::951887872838:role/TestSAML,arn:aws:iam::95123456838:saml-provider/MyAuth0',\n          'DomainAdmins': 'arn:aws:iam::957483571234:role/SysAdmins,arn:aws:iam::95123456838:saml-provider/MyAuth0'\n        };\n        user.awsRole = awsRoles[user.group];\n        user.awsRoleSession = user.email;\n        \n        context.samlConfiguration.mappings = {\n          'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',\n          'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession',\n        };\n        ```\n        \n\n### Map multiple roles\n\nYou can also assign an array to the role mapping (so you'd have `awsRoles = [ role1, role2 ]` instead of `awsRoles: role1`)\n\nFor example, let's say that you have Active Directory Groups with the following structure:\n\n```\nvar user = {\n  app_metadata: {\n    ad_groups: {\n      \"admins\": \"some info not aws related\",\n      \"aws_dev_Admin\": \"arn:aws:iam::123456789111:role/Admin,arn:aws:iam::123456789111:saml-provider / Auth0\",\n      \"aws_prod_ReadOnly\": \"arn:aws:iam::123456789999:role/ReadOnly,arn:aws:iam::123456789999:saml-provider / Auth0\"\n    }\n  }\n};\n```\n\nYour rule might therefore look like this:\n\n```\nfunction (user, context, callback) {\n\n  var userGroups = user.app_metadata.ad_groups;\n\n  function awsFilter(group) {\n    return group.startsWith('aws_');\n  }\n\n  function mapGroupToRole(awsGroup) {\n    return userGroups[awsGroup];\n  }\n\n  user.awsRole = Object.keys(userGroups).filter(awsFilter).map(mapGroupToRole);\n  user.awsRoleSession = 'myawsuser'; // unique per user http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html\n\n  context.samlConfiguration.mappings = {\n    'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',\n    'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession'\n  };\n\n  callback(null, user, context);\n\n}\n```\n\n## Configure session expiration\n\nTo extend the amount of time allowed to elapse before the AWS session expires (3600 seconds), use a custom [rule](https://auth0.com/docs/customize/rules). Your rule sets the [**SessionDuration** attribute](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_assertions.html) that changes the duration of the session.\n\nto configure this snippet with your account\n\n```\nfunction (user, context, callback) {\n    if(context.clientID !== '{yourClientId}'){\n      return callback(null, user, context);\n    }\n\n  user.awsRole = '{yourArn}';\n  user.awsRoleSession = '{yourRoleSession}';\n  user.time = 1000; // time until expiration in seconds\n\n  context.samlConfiguration.mappings = {\n    'https://aws.amazon.com/SAML/Attributes/Role': '{yourAwsRoleName}',\n    'https://aws.amazon.com/SAML/Attributes/RoleSessionName': '{yourAwsRoleSessionName}',\n    'https://aws.amazon.com/SAML/Attributes/SessionDuration': 'time'   };\n\n  callback(null, user, context);\n}\n```\n\n## Test configuration\n\n1.  Go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and click the name of your application.\n    \n2.  On the **Addons** tab, select the **SAML2 Web App** add-on.\n    \n3.  On the **Usage** tab, locate the **Identity Provider Login URL**. You should be redirected to the Auth0 account login page. If you successfully log in, you'll be redirected to AWS.\n    \n\n## Learn more\n\n*   [Configure Amazon Web Services as SAML Service Provider](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-aws)",
    "title": "Configure Amazon Web Services for Single Sign-On",
    "description": "Learn how to configure single sign-on (SSO) for Auth0 with Amazon Web Services (AWS).",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-custom-authorizers",
    "markdown": "# Secure AWS API Gateway Endpoints Using Custom Authorizers\n\nSecure [](https://aws.amazon.com/api-gateway/)AWS API Gateway endpoints using custom authorizers that accept Auth0-issued access tokens. To do this, you configure your API with [](https://aws.amazon.com/api-gateway/)API Gateway, create and configure your [](https://aws.amazon.com/lambda/)AWS Lambda functions (including the custom authorizers) to secure your API endpoints, and implement the authorization flow so that your users can retrieve the access tokens needed to gain access to your API from Auth0.\n\nTo learn more, visit [AWS Lambda Overview](https://aws.amazon.com/lambda/) once you log into your [AWS API Gateway](https://aws.amazon.com/api-gateway/).\n\nThe API Gateway extends the capabilities of Lambda by adding a service layer in front of your Lambda functions to extend security, manage input and output message transformations, and provide capabilities like throttling and auditing. A serverless approach simplifies your operational demands since concerns like scaling out and fault tolerance are now the responsibility of the compute service that is executing your code.\n\nThe custom authorizers will:\n\n*   Confirm that the access token has been passed via the `authorization` header of the request to access the API.\n    \n*   Verify the RS256 signature of the Access Token using a public key obtained via a [](https://auth0.com/docs/tokens/concepts/jwks)JWKS endpoint.\n    \n*   Ensure the access token has the required Issuer `iss` and audience `aud` claims.\n    \n\nUse the following steps to use custom authorizers:\n\n1.  [Create an Auth0 API](#create-an-auth0-api)\n    \n2.  [](https://auth0.com/docs/integrations/aws-api-gateway/part-2)[Import and deploy the AWS API Gateway API](#import-and-deploy-the-aws-api-gateway-api)\n    \n3.  [Create the custom authorizers](#create-the-custom-authorizers)\n    \n4.  [Secure the API using custom authorizers](#secure-the-api-using-custom-authorizers)\n    \n5.  [Test your deployment](#test-your-deployment)\n    \n\nTo read more about signing algorithms, read [Signing Algorithms](https://auth0.com/docs/get-started/applications/signing-algorithms). For more details on using JWKS, visit [JSON Web Key Sets](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets).\n\n[According to Amazon](http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html), an API Gateway custom authorizer is a \"Lambda function you provide to control access to your API using bearer token authentication strategies, such as OAuth or SAML.\"\n\nWhenever someone (or some program) attempts to call your API, API Gateway checks to see if there's a custom authorizer configured for the API.\n\nIf **there is a custom authorizer for the API**, API Gateway calls the custom authorizer and provides the authorization token extracted from the request header received.\n\nYou can use the custom authorizer to implement different types of authorization strategies, including [](https://auth0.com/docs/tokens/concepts/jwts)JWT verification, to return IAM policies authorizing the request. If the policy returned is invalid or if the permissions are denied, the API call fails.\n\nFor a valid policy, API caches the returned policy, associating it with the incoming token and using it for the current and subsequent requests. You can configure the amount of time for which the policy is cached. The default value is `300` seconds and the maximum length of caching is `3600` seconds (you can also set the value to 0 to disable caching).\n\nTo read more, visit [What is Amazon API Gateway?](http://docs.aws.amazon.com/apigateway/latest/developerguide/use-custom-authorizer.html) in the Amazon Developer's Guide. For more information on JWT verification, review our [JSON Web Token](https://auth0.com/docs/secure/tokens/json-web-tokens) article.\n\n## Prerequisite\n\nYou need to [sign up for an AWS account](https://portal.aws.amazon.com/gp/aws/developer/registration/index.html). This grants you access to the AWS features, including API Gateway and Lambda. All new members receive twelve months of free tier access to AWS.\n\n## Create an Auth0 API\n\nConfigure the APIs consumed by the applications that successfully authorize.\n\n1.  Go to [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis), and select **Create API**.\n    \n2.  Enter values for the following fields, and select **Create**.\n    \n    | Field | Description |\n    | --- | --- |\n    | Name | A friendly name for your API. This is the name you'll see in your list of Auth0 APIs. |\n    | Identifier | A logical identifier for your API. We recommend formatting this identifier like a URL `https://your-api-gateway`. |\n    | Signing Algorithm | The algorithm you want Auth0 to use to sign the issued Access Tokens. To learn more, see [Signing Algorithms](https://auth0.com/docs/get-started/applications/signing-algorithms). |\n    \n\nTo see the details of your newly-created API, refer to the **Settings** view.\n\n![Dashboard - Create API - AWS API Gateway](https://images.ctfassets.net/cdy7uua7fh8z/4P1N7SSCXUF1SfyC8SXTiO/421e1cfb0515ae3271d72d1d0e7a203e/Dashboard_-_APIs_-_Create_API_Gateway.png)\n\nCreating an API also creates a Machine to Machine Application for use with the API. You can see this application listed as **Authorized** under the **Machine to Machine Application** view. Take note of the Client ID; you will need it in part 3 of this tutorial.\n\n## Import and deploy the AWS API Gateway API\n\nIn this step, you will:\n\n*   Import an API into API Gateway\n    \n*   Test an API import\n    \n*   Deploy an API for use with any front-end applications\n    \n*   Test an API deployment\n    \n\n### Import and configure the Pets API\n\n1.  Log in to your AWS account, and using the **Services** drop-down located in the top navigation bar, go to the **API Gateway** Console.\n    \n2.  If you've previously created an API, simply navigate to the API Gateway Console and click **Create API**. You'll be given the option to create the **Example API** on the **Create new API** form. If you've never created an API using API Gateway, you'll see the following screen. Click **Get Started** to proceed.\n    \n    ![AWS API Gateway - Get Started](https://images.ctfassets.net/cdy7uua7fh8z/3MX6jO6ZzTqEWNZaWps0j5/4b97df023e694e452d4f34f03d15d21c/aws-pt1-1.png)\n    \n    You'll see a pop-up message welcoming you to API Gateway. Click **OK** to proceed.\n    \n3.  On the **Create new API** form, you'll see that **Example API** is selected by default, and there's an example API defined in the editor. We'll use this API for the rest of our tutorial, so begin the API creation process by clicking **Import**.\n    \n    ![AWS API Gateway - Example API](https://images.ctfassets.net/cdy7uua7fh8z/8b4yGZNUwCNRYovU203Au/d010702b68635ef7e1864554c3a3826f/aws-pt1-4.png)\n    \n    When done, AWS displays a message indicating that your API created and populated with the provided data. Notice the API already has methods associated with it (namely, `GET` and `POST`). You can view the details of a method, modify its configuration, or test the method invocation by clicking the method name from the resource tree.\n    \n    ![AWS API Gateway - Resources Tree](https://images.ctfassets.net/cdy7uua7fh8z/1COXG4sI0DNSM4NIMEtma9/9cc6104e234ac25d1098fd92f1183bc1/aws-pt1-5a.png)\n\n### Test your API\n\nTo test your API, click **POST** under `/pets`. This brings up the **Method Execution** window that provides an overview of the `POST` method's structure and behaviors:\n\n*   **Method Request** and **Method Response**: the API's interface with the front-end\n    \n*   **Integration Request** and **Integration Response**: the API's interface with the back-end\n    \n\nWe can use this area to test the API.\n\n1.  Click **Test** (shown on the **Client** sliver located in the middle of the page). You'll be redirected to the `/pets - POST - Method Test` page. Scroll to the bottom of the page, and provide the following snippet as the **Request Body**:\n    \n    ```\n    {\"type\": \"dog\", \"price\": 249.99}\n    ```\n    \n    The request body indicates the attributes of the pet we want to add to the database, as well as the cost for the pet. ![AWS API Gateway - Request Body](https://images.ctfassets.net/cdy7uua7fh8z/5XKCxyYc5nBCsqln27HVLF/bcd9c16f9e3405fda8cc44f455cb819b/aws-pt1-5d.png)\n2.  Click **Test** to proceed. You'll see the results of the test at the right side of the page.\n    \n    ![AWS API Gateway - Test Results](https://images.ctfassets.net/cdy7uua7fh8z/2cwnpb0irU5DOVKCjcjnil/986f046738bc3b0f79145daa7b86ff3c/aws-pt1-5e.png)\n\n### Deploy the API\n\nThe test we just completed was done using the API Gateway console. To use the API with a different application, you'll need to deploy the API to a stage.\n\n1.  From the **Actions** menu, select **Deploy API**.\n    \n2.  Provide the following values, and click **Deploy**.\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **Deployment stage** | Choose `[New Stage]` |\n    | **Stage name** | Provide a name for your stage |\n    | **Stage description** | Provide a description for your stage |\n    | **Deployment description** | Provide a description for your API deployment |\n    \n\n### Test the deployment\n\nWhen the API has successfully deployed, you'll be redirected to the **Test Stage Editor**. You can, at this point, test the API to see if it deployed correctly.\n\n1.  At the top of the **Test Stage Editor** window is a blue banner with your **Invoke URL**. This is the URL used to invoke the `GET` endpoint of your API. Click on the link to submit the `GET / method` request in a browser. This should result in the following success response:\n    \n    ![AWS API Gateway - Deploy Test Response](https://images.ctfassets.net/cdy7uua7fh8z/7d8340OcAtOF8GvBtihRBt/958eff065c665682ef53b9eedae77a8e/aws-pt1-8.png)\n2.  In the **Stages** page, expand the tree under **Test**. Click **GET** under `/pets/{petId}`.\n    \n    ![AWS API Gateway - Get Pet ID](https://images.ctfassets.net/cdy7uua7fh8z/2QzVCjIndpP9EQ4VUxVzZc/5c2afef3f8c83004b35636557c9ec59e/aws-pt1-9.png)\n3.  You'll see an **Invoke URL** displayed in the blue banner at the top of the window. The final portion, `{petID}`, stands for a path variable. Replace this variable with `1`, and navigate to the new URL using your browser. You should receive an HTTP 200 request with the following JSON payload:\n    \n    ```\n    {\n      \"id\": 1,\n      \"type\": \"dog\",\n      \"price\": 249.99\n    }\n    ```\n    \n\n## Create the custom authorizers\n\nNow that we have a fully functional API that's managed by API Gateway, secure this API so only those with the appropriate authorization may access the back-end behind the API.\n\nUse API Gateway's custom request authorizers to authorize your APIs using bearer token authorization strategies, such as OAuth 2.0 or SAML. For each incoming request, the following happens:\n\n1.  API Gateway checks for a properly-configured custom authorizer.\n    \n2.  API Gateway calls the custom authorizer (which is a Lambda function) with the authorization token.\n    \n3.  If the authorization token is valid, the custom authorizer returns the appropriate AWS Identity and Access Management (IAM) policies.\n    \n4.  API Gateway uses the policies returned in step 3 to authorize the request.\n    \n\n### Prepare the custom authorizer\n\nYou can [download a sample custom authorizer](https://github.com/auth0-samples/jwt-rsa-aws-custom-authorizer) that supports Auth0-issued tokens. Afterward, you'll need to customize the files so that the custom authorizer works for your environment.\n\n1.  Unzip the folder containing the sample files you downloaded above to the location of your choice, and navigate to the folder using the command line.\n    \n2.  Within the sample folder, run `npm install` to install the Node.js packages required for deployment; AWS requires that these files be included in the bundle you will upload to AWS during a later step.\n    \n3.  Configure your local environment with a `.env` file. You can copy the `.env.sample` file (while simultaneously renaming it `.env`) using `cp .env.sample .env`. Make the following changes:\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **`TOKEN_ISSUER`** | The issuer of the token. If Auth0 is the token issuer, use `https://{yourDomain}/`. Be sure to include the trailing slash. |\n    | **`JWKS_URI`** | The URL of the JWKS endpoint. If Auth0 is the token issuer, use `https://{yourDomain}/.well-known/jwks.json` |\n    | **`AUDIENCE`** | The **identifier** value of the API you created in the Create an Auth0 API section above. |\n    \n    As an example, the text of your `.env` file should look something like this when complete:\n    \n    ```\n    JWKS_URI=https://{yourDomain}/.well-known/jwks.json\n    AUDIENCE=https://your-api-gateway\n    TOKEN_ISSUER=https://{yourDomain}/\n    ```\n    \n\n### Test the custom authorizer locally\n\nObtain a valid JWT access token. There are multiple ways you can get one and the method you choose depends on your application's type, trust level, or overall end-user experience. For more information, review [Get Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/get-access-tokens).\n\n1.  You can get a test token for your API by navigating to [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis), selecting your API, and selecting **Test**.\n    \n2.  Create a local `event.json` file containing the token. You can copy the sample file (run `cp event.json.sample event.json`). Replace `ACCESS_TOKEN` with your JWT token, and `methodArn` with the appropriate ARN value for the `GET` method of your API.\n    \n\nTo get the `methodArn`:\n\n1.  Using the API Gateway Console, open the **PetStore** API.\n    \n2.  In the left-hand navigation, select **Resources**.\n    \n3.  In the middle **Resources** panel, expand the resource tree. Underneath `/pets`, select **GET**.\n    \n4.  In the **Method Request** box, you'll see the **ARN**.\n    \n5.  Run the test using `npm test`.\n    \n\nThe test uses the [](https://www.npmjs.com/package/lambda-local)lambda-local package to test the custom authorizer using your token. If the test was successful, you'll see output similar to the following:\n\n```\nMessage\n------\n{\n    \"principalId\": \"C8npTEMVnBrILsBTI91MOh6dfuZbPVAU@clients\",\n    \"policyDocument\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Action\": \"execute-api:Invoke\",\n                \"Effect\": \"Allow\",\n                \"Resource\": \"arn:aws:execute-api:us-east-1:1234567890:apiId/stage/method/resourcePath\"\n            }\n        ]\n    },\n    \"context\": {\n        \"scope\": \"FULL_LIST_OF_SCOPES\"\n    }\n}\n```\n\nIf the value of `Effect` is `Allow`, your authorizer would've allowed the call to API Gateway.\n\nTo learn more, visit [Lambda-local](https://www.npmjs.com/package/lambda-local) at NPM.\n\n### Create the IAM role\n\nThe IAM role has the required permissions to call Lambda functions; before we can proceed with our custom authorizer, we'll need to create an IAM role that can call our custom authorizer whenever API Gateway receives a request for access.\n\n1.  Log in to AWS, and navigate to the [IAM Console](https://console.aws.amazon.com/iam). In the left-hand navigation, select **Roles**.\n    \n2.  Select **Create new role**.\n    \n3.  Under **AWS service**, select the **AWS Lambda** row, then **Next: Permissions**.\n    \n4.  On the **Attach permissions policy** screen, select the **AWSLambdaRole**. You can use the provided filter to narrow down the list of options. Select **Next: Tags**, then select **Next: Review** to proceed.\n    \n5.  On the **Review** screen, provide a **Role name**, such as `Auth0Integration`. Leave the rest of the fields as is. Select **Create role**.\n    \n6.  Once AWS has created your role, you'll be directed back to the **Roles** page of IAM. Select your new role.\n    \n7.  On the **Summary** page for the role you've just created, select the **Trust relationships** view.\n    \n8.  Select **Edit trust relationship**, and populate the **Policy Document** field with the following JSON snippet:\n    \n    ```\n    {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": [\n            \"apigateway.amazonaws.com\",\n            \"lambda.amazonaws.com\"\n            ]\n        },\n        \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n    }\n    ```\n    \n9.  Click **Update Trust Policy**.\n    \n10.  You'll be redirected back to the **Summary** page. Copy down the **Role ARN** value for later use.\n    \n    ![undefined](https://images.ctfassets.net/cdy7uua7fh8z/1ki5GDOZenh5WRgpbWwzC8/76f415684f08510b4206559032880a59/pt2-10.png)\n\n### Create the Lambda function and deploy the custom authorizer\n\nNow that you've configured your custom authorizer for your environment and tested it to see it works, deploy it to AWS.\n\n1.  Create a bundle that you can upload to AWS by running `npm run bundle`. This generates a `custom-authorizer.zip` bundle containing the source, configuration, and node modules required by AWS Lambda.\n    \n2.  Navigate to the [Lambda console](https://console.aws.amazon.com/lambda), and click **Create function**.\n    \n3.  On the **Select blueprint** page, click **Author from scratch** to create a blank function. Under **Basic information**, provide values for the following parameters:\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **Name** | A name for your Lambda function, such as `jwtRsaCustomAuthorizer` |\n    | **Description** | A description for your Lambda function (optional) |\n    | **Runtime** | Select `Node.js 10.x` |\n    \n4.  Click **Create Function** to continue.\n    \n5.  On the **Configuration** page of your function, scroll down to the **Function Code** section.\n    \n6.  Select **Upload a .ZIP file** as the **Code entry type**.\n    \n7.  Click **Upload** and select the `custom-authorizer.zip` bundle you created earlier.\n    \n8.  Then, create the following three **Environment variables**. Note that this information is identical to that which is the `.env` file.\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **`TOKEN_ISSUER`** | The issuer of the token. If Auth0 is the token issuer, use `https://{yourDomain}/` |\n    | **`JWKS_URI`** | The URL of the JWKS endpoint. If Auth0 is the token issuer, use `https://{yourDomain}/.well-known/jwks.json` |\n    | **`AUDIENCE`** | The **identifier** value of the API you created in step 1. |\n    \n9.  In the **Execution role** section, select **Use an existing role** then select the IAM role you created previously as the **Existing role**.\n    \n10.  Under **Basic settings**, set **Timeout** to **30** sec.\n    \n11.  Click **Save**.\n    \n12.  To test the Lambda function you just created, click **Test** in the top-right corner.\n    \n13.  Copy the contents of your `event.json` file into the **Configure test event** form. You can use the default \"Hello World\" event template.\n    \n14.  Click **Create**.\n    \n15.  Run your test by selecting it and clicking **Test**. If the test was successful, you'll see: \"Execution result: succeeded\". Expanding the output window should show a message similar to the one you received after your successful local test.\n    \n    ![undefined](https://images.ctfassets.net/cdy7uua7fh8z/8Xr9yXq8LwOChAbQkDZlJ/0905bbce96f257716a67376f17a0c975/pt2-19.png)\n\n### Configure API Gateway custom authorizer\n\n1.  Return to API Gateway Console and open the **PetStore** API we created earlier.\n    \n2.  Using the left-hand navigation, open **Authorizers** and select **Create New Authorizer**, then set the following parameters, and click **Create**.\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **Name** | `jwt-rsa-custom-authorizer` |\n    | **Type** | Select **Lambda** |\n    | **Lambda Region** | Use the region for the Lambda function you created previously |\n    | **Lambda Function** | `jwtRsaCustomAuthorizer` |\n    | **Lambda Invoke Role** | The IAM Role ARN you copied above |\n    | **Lambda Event Payload** | Select **Token** |\n    | **Token Source** | `Authorization` |\n    | **Token Validation** | `^Bearer [-0-9a-zA-z\\.]*$` |\n    | **TTL (seconds)** | `3600` |\n    \n3.  After AWS creates the authorizer and the page refreshes, test your authorizer by clicking **Test** and providing the Auth0 token (`Bearer ey...`) you previously used. If the test was successful, you'll see a response similar to the following.\n    \n    ![undefined](https://images.ctfassets.net/cdy7uua7fh8z/5lx86XsQEJtxVikZJ4lC2C/c2a5c24a31b9cb4b6540267828bbd3a2/pt2-26.png)\n\n## Secure the API using custom authorizers\n\nTo learn how to secure your API's endpoints, see the Amazon API Gateway developer guide article: [Use API Gateway Lambda Authorizers](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html).\n\n### Configure API Gateway resources to use the custom authorizer\n\n1.  Log in to AWS, and navigate to the [API Gateway Console](http://console.aws.amazon.com/apigateway).\n    \n2.  Open the **PetStore** API we created in step 2 of this tutorial. Under the **Resource** tree in the center pane, select the **GET** method under the `/pets` resource.\n    \n    ![undefined](https://images.ctfassets.net/cdy7uua7fh8z/3Z9Gmy20NDr9Hb9Yk0piXF/0c7572fc188e13106d9340562580e5e0/pt3-2.png)\n3.  Select **Method Request**.\n    \n4.  Under **Settings**, click the **pencil** icon to the right of **Authorization** and choose the `jwt-rsa-custom-authorizer` custom authorizer you created in [](https://auth0.com/docs/integrations/aws-api-gateway/part-3)step 3.\n    \n5.  Click the **check mark** icon to save your choice of custom authorizer. Make sure the **API Key Required** field is set to `false`.\n    \n\n### Deploy the API\n\nTo make your changes public, deploy your API.\n\n1.  From the **Actions** menu, select **Deploy API**.\n    \n2.  Provide the following values, and click **Deploy**:\n    \n    | **Parameter** | **Value** |\n    | --- | --- |\n    | **Deployment stage** | Choose `[New Stage]` |\n    | **Stage name** | Provide a name for your stage |\n    | **Stage description** | Provide a description for your stage |\n    | **Deployment description** | Provide a description for your API deployment |\n    \n\nIf successful, you'll be redirected to the **Test Stage Editor**. Note the **Invoke URL** provided in the blue ribbon at the top because you need this to test your deployment.\n\n## Test your deployment\n\nTo test your deployment, make a `GET` call to the **Invoke URL** you noted in the previous step. If this test fails, check that you obtained the JWT access token correctly.\n\nFor details, see [Get Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/get-access-tokens).\n\n*   [cURL](#02d0324c159c4503acf1d5346a852ca4_shell)\n*   [C#](#02d0324c159c4503acf1d5346a852ca4_csharp)\n*   [Go](#02d0324c159c4503acf1d5346a852ca4_go)\n*   [Java](#02d0324c159c4503acf1d5346a852ca4_java)\n*   [Node.JS](#02d0324c159c4503acf1d5346a852ca4_node)\n*   [Obj-C](#02d0324c159c4503acf1d5346a852ca4_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url https://%7ByourInvokeUrl%7D/pets\n```\n\n```\nvar client = new RestClient(\"https://%7ByourInvokeUrl%7D/pets\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://%7ByourInvokeUrl%7D/pets\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://%7ByourInvokeUrl%7D/pets\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {method: 'GET', url: 'https://%7ByourInvokeUrl%7D/pets'};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://%7ByourInvokeUrl%7D/pets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://%7ByourInvokeUrl%7D/pets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nconn.request(\"GET\", \"%7ByourInvokeUrl%7D/pets\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://%7ByourInvokeUrl%7D/pets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://%7ByourInvokeUrl%7D/pets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Secure AWS API Gateway Endpoints Using Custom Authorizers",
    "description": "How to use secure AWS API Gateway using custom authorizers that accept Auth0-issued access tokens.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation",
    "markdown": "# Build Serverless Applications Using Token-Based Authentication with AWS API Gateway and Lambda\n\nWith AWS, you can create powerful, serverless, highly scalable APIs and applications through AWS Lambda, Amazon API Gateway, and a JavaScript application.\n\nA serverless application runs custom code as a compute service without the need to maintain an operating environment to host your service. Instead, a service like [AWS Lambda](https://aws.amazon.com/lambda/) executes your code on your behalf.\n\nAmazon API Gateway extends the capabilities of AWS Lambda by adding a service layer in front of your Lambda functions to extend security, manage input and output message transformations, and provide capabilities like throttling and auditing. A serverless approach simplifies your operational demands, since concerns like scaling out and fault tolerance are now the responsibility of the compute service that is executing your code.\n\nHowever, you often want to tie your APIs to your existing users, either from social providers like Twitter and Facebook, or within your own organization from Active Directory or a customer database. This tutorial demonstrates how to authorize access of your Amazon API Gateway methods for your existing users using Auth0 delegation for AWS and integration with AWS Identity and Access Management (IAM).\n\nNext, the tutorial walks you through setting up the Amazon API Gateway using AWS Lambda functions, securing those functions with AWS IAM roles, and then using Auth0 delegation to obtain a token for the AWS IAM role. It will then show you how to assign different permissions to various classes of users, like internal database or social users, and how to flow identity using a JSON Web Token (JWT).\n\nYou will be taken through the following steps:\n\n*   [Step 1 - Set up the AWS API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-1)\n    \n*   [Step 2 - Secure and Deploy the Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2)\n    \n*   [Step 3 - Build the Application](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-3)\n    \n*   [Step 4 - Use Multiple Roles with Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-4)\n    \n*   [Step 5 - Use Identity Tokens to Flow Identity](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-5)",
    "title": "Build Serverless Applications Using Token-Based Authentication with AWS API Gateway and Lambda",
    "description": "How to build a serverless application using Token-based Authentication with AWS API Gateway and Lambda.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/amazon-cognito",
    "markdown": "# Integrate with Amazon Cognito\n\nAmazon Cognito is a backend-as-a-service that lets you focus on developing the user experience for your application. To learn more and sign up for services, read [Amazon Cognito](http://aws.amazon.com/cognito/).\n\n## Configure Amazon Web Services\n\n### Get Auth0 application details\n\nFirst, you'll need to get some information about your application in Auth0:\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications).\n    \n2.  Select your application, and then switch to the **Settings** view.\n    \n3.  Record the **Domain** and the **Client ID**.\n    \n\n### Create new OpenID Connect (OIDC) provider\n\nIn AWS, create a new identity provider (IdP):\n\n1.  Open the [IAM Console](https://console.aws.amazon.com/), select **Identity Providers** in the left sidebar, and then select **Create Provider**.\n    \n2.  Select **OpenID Connect** as the **Provider Type**.\n    \n3.  For the **Provider URL**:\n    \n    1.  Enter your **Domain** into the **Provider URL** field.\n        \n    2.  Enter your **Client ID** into the **Audience** field.\n        \n4.  Use the certificate thumbprint to verify the server certificate of your IdP. To learn more, read [Obtaining the Thumbprint for an OpenID Connect Identity Provider on AWS Docs](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html).\n    \n5.  Select **Add Provider**.\n    \n6.  Navigate to your newly created provider and record the **Provider ARN.**\n    \n\n### Get Auth0 tenant certificate thumbprint\n\nNext, generate the certificate thumbprint for your Auth0 tenant:\n\n1.  Retrieve your [Auth0 tenant's certificate chain.](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html?icmpid=docs_iam_console)\n    \n2.  Isolate the last certificate in the chain. This should be the certificate of your root Certificate Authority (CA).\n    \n3.  Using the CA certificate, [compute the fingerprint](https://www.samltool.com/fingerprint.php).\n    \n4.  Convert the fingerprint to a thumbprint by removing all of the colon (`:`) characters.\n    \n5.  Use the computed thumbprint when calling the `aws iam create-open-id-connect-provider` command.\n    \n\n### Create Identity Pool\n\nCreate an Identity Pool in AWS to allow Cognito to use the Auth0 OIDC identity provider for authentication:\n\n1.  Sign in to the [Cognito Console.](https://console.aws.amazon.com/cognito/home)\n    \n2.  Select **Federated Identities**.\n    \n3.  For **Identity Pool Name**, specify a name for the pool (for example, `Auth0`).\n    \n4.  Under **Authentication Providers**, select the **OpenID** tab, then select the name of the provider you created in the previously.\n    \n5.  Select **Create Pool**, and then select **Allow** to finish creating the new identity pool.\n    \n6.  Under Dashboard, select **Edit Identity Pool** to view the **Identity Pool ID**.\n    \n7.  Record the **ARN** of the IAM role that was automatically created. This value will be used when sending credentials to Cognito.\n    \n\n## Configure Auth0\n\nCognito uses the public signing key from the [OpenID Provider Metadata](https://subscription.auth0.com/.well-known/jwks.json) to validate the signature of the JSON Web Token (JWT).\n\nConfirm that your Auth0 application is configured to use the RS256 signature algorithm:\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), select your application, and then switch to the **Settings** view.\n    \n2.  Expand the **Advanced Settings** section, and then switch to the **OAuth** view.\n    \n3.  Locate the **JSON Web Token (JWT) Signature Algorithm** field, and select **RS256** from the dropdown menu.\n    \n4.  Select **Save Changes**.\n    \n\n## Implementation\n\nYou can use the [Auth0 Lock SDK](https://auth0.com/docs/libraries#lock) to integrate Auth0 within your application.\n\nOnce the user logs in with Auth0, the next step is to send their credentials to Cognito. To learn more, read [Open ID Connect providers (identity pools) on AWS Docs](http://docs.aws.amazon.com/cognito/latest/developerguide/open-id.html).\n\nCognito takes the ID token a user receives from Auth0, and uses it to generate unique Cognito IDs. When the user logs in to Cognito through Auth0, you can store information in Cognito that only they can access.\n\n## Troubleshooting\n\n### \"Invalid login token\" error\n\nIf you receive a \"Invalid login token\" error, confirm that the Auth0 application is configured to use the RS256 signature algorithm:\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), select your application, and then switch to the **Settings** view.\n    \n2.  Expand the **Advanced Settings** section, and then switch to the **OAuth** view.\n    \n3.  Locate the **JSON Web Token (JWT) Signature Algorithm** field, and select **RS256** from the dropdown menu.",
    "title": "Integrate with Amazon Cognito",
    "description": "How to integrate Auth0 with Amazon Cognito using an OpenID Connect (OIDC) Provider.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-cognito",
    "markdown": "# Secure AWS API Gateway Using Cognito\n\nInstead of using IAM roles and policies to secure your API, you can do so using user pools in Amazon Cognito.\n\nPlease [create the appropriate Amazon Cognito User Pools](http://docs.aws.amazon.com/cognito/latest/developerguide/setting-up-cognito-user-identity-pools.html) prior to beginning this tutorial.\n\n## Integrate the Cognito User Pool with the API Gateway API\n\nGo to the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway). Using the left-hand navigation bar, select the **SecurePets** API.\n\nThen, select **Authorizers** for the **SecurePets** API.\n\nOn the Authorizers column near the center of the screen, choose **Create** and indicate that you are creating a **Cognito User Pool Authorizer**.\n\nTo configure your authorizer:\n\n1.  Choose the **Cognito region** in which you created your User Pool.\n    \n2.  Customize the **Authorizer name** field, if desired (it will be automatically populated with the name of the chosen User Pool, so you can opt to leave it as is)\n    \n3.  Customize the **Identity token source** field. By default, this field is set to `method.request.header.Authorization`, which sets the name of the incoming request header containing the API caller's identity token to `Authorization`.\n    \n4.  If desired, add a regular expression to the **App client ID regex** field to validate client IDs associated with the User Pool.\n    \n\nWhen you've finished configuring your authorizer, click **Create** to integrate the User Pool with your API.\n\nFor each method that you want the User Pool to act as an authorizer, you must enable the User Pool to do so for that particular method.\n\nTo enable the User Pool authorizer on the `GET` method:\n\n1.  After selecting the SecurePets API, select the `GET` method listed under `/pets`.\n    \n2.  Click on **Method Request**.\n    \n3.  Under Authorization Settings, click on the **edit icon** next to the Authorization field.\n    \n4.  Choose the appropriate Cognito User Pool authorizer from the list. Click the **checkmark icon** to save your selection.\n    \n\nRepeat this process for any additional methods for which you want the Cognito User Pool to act as an authorizer (`GET` and `PURCHASE` for `/pets`, as well as `POST` for `/purchase`).",
    "title": "Secure AWS API Gateway Using Cognito",
    "description": "How to secure the API Gateway Tutorial using Cognito instead of IAM roles and policies.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/hook-secrets/update-hook-secrets",
    "markdown": "# Update Hook Secrets\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"\n\n\tpayload := strings.NewReader(\"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/hooks/HOOK_ID/secrets\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Update Hook Secrets",
    "description": "Learn how to update Hook Secrets using the Dashboard or Management API. Hook Secrets may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/session-tags",
    "markdown": "# Use Amazon Web Services Session Tags for Role-Based Access Control\n\nWith Amazon Web Services (AWS) Session Tags, you can tag resources and assign users key/value pairs, which allows you to implement role-based access control (RBAC) for AWS APIs and resources.\n\nIn the example included in this guide, we will tag our AWS resources with AWS Session Tags, then create a policy for an AWS IAM role that will allow users with this role and the appropriate tags to perform specific actions on our AWS resources. We will then create a rule in Auth0 that will attach our AWS IAM role and appropriate AWS Session Tags to an Auth0 user and pass them through SAML assertions in the token. This example builds on the example provided in [Configure Amazon Web Services for Single Sign-On](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso).\n\nTo use AWS Session Tags with AWS APIs and Resources, you must:\n\n1.  Tag AWS instances.\n    \n2.  Create a specialized AWS IAM role.\n    \n3.  Create an Auth0 rule.\n    \n4.  Test your configuration.\n    \n\n## Prerequisites\n\n*   You'll need an [Amazon Web Services (AWS) account](https://portal.aws.amazon.com/billing/signup#/start) for which you are an administrator.[](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso)\n    \n*   [Configure AWS for SSO](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso)[](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance)[](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance)\n    \n*   [Set up some AWS VM Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance). For the example in this guide, we use three separate instances.\n    \n\n### Tag AWS instances\n\nAdd tags to your AWS resources. Follow instructions in [Amazon Elastic Compute Cloud User Guide for Linux Instances: Adding and Deleting Tags on an Individual Resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#adding-or-deleting-tags).\n\nYou should have created three instances. Add the following tags:\n\n| Instance | Tags |\n| --- | --- |\n| 1   | Key: `CostCenter`, Value: `marketing`.  <br>Key: `Project`, Value: `website`. |\n| 2   | Key: `CostCenter`, Value: `engineering`.  <br>Key: `Project`, Value: `management_dashboard`. |\n| 3   | Key: `CostCenter`, Value: `marketing`.  <br>Key: `Project`, Value: `community_site`. |\n\n### Create a specialized AWS IAM role\n\nCreate an IAM role using the AWS SAML identity provider you set up during the prerequisites. Follow the instructions in [AWS Identity and Access Management User Guide: Creating a Role for SAML 2.0 Federation (Console)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html).\n\nWhile setting up your role, make sure you use the following parameters:\n\n| Parameter | Description and Sample Value |\n| --- | --- |\n| SAML Provider | Name of the identity provider you created in the prerequisites, such as `auth0SamlProvider`. Select **Allow programmatic and AWS Management Console access**. |\n\nWhen asked to **Attach permissions policies**, create a policy with the following JSON and name it `VirtualMachineAccessByCostCenter`.\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeInstances\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:StartInstances\",\n                \"ec2:StopInstances\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"ec2:ResourceTag/CostCenter\": \"<%= \"${aws:PrincipalTag/CostCenter}\" %>\"\n                }\n            }\n        }\n    ]\n}\n```\n\nOnce the policy has been created, refresh the policy list for the role, then filter and select the new policy.\n\nWhen reviewing your settings, make sure you use the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| Role name | Descriptive name for your role, such as `AccessByCostCenter`. |\n| Role description | Description of the purpose for which your role is used. |\n\n### Create an Auth0 rule\n\nTo map the AWS role and tags to a user, you'll need to [create a rule](https://auth0.com/docs/customize/rules/create-rules) in Auth0. These values will then be passed through the SAML assertions in the token. For the example:\n\n```\nfunction(user, context, callback) {\n  var awsAccount = '013823792818';\n  var rolePrefix = `arn:aws:iam::` + awsAccount; \n  var samlIdP = rolePrefix + `:saml-provider/auth0SamlProvider`;\n\n  user.awsRole = rolePrefix + `:role/AccessByCostCenter,` + samlIdP;\n  user.awsRoleSession = user.email;\n  user.awsTagKeys = ['CostCenter', 'Project'];\n  user.CostCenter = 'marketing';\n  user.Project = 'website';\n\n  context.samlConfiguration.mappings = {\n    'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',\n    'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession',\n    'https://aws.amazon.com/SAML/Attributes/PrincipalTag:CostCenter': 'CostCenter',\n    'https://aws.amazon.com/SAML/Attributes/PrincipalTag:Project': 'Project'\n  };\n\n  callback(null, user, context);\n}\n```\n\n### Test configuration\n\nYou should now be able to log in to the AWS Console using an Auth0 user and test your implementation.\n\nTo log in, you will need the SSO login for the AWS Console. To find it:\n\n1.  Go to [Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select the name of the Application to view.\n    \n2.  On the **Addons** tab, enable the **SAML2 Web App** add-on.\n    \n3.  On the **Usage** tab, locate **Identity Provider Login URL**.\n    \n4.  Go to the indicated URL.\n    \n5.  Once you have signed in, from **EC2**, select **Instances**. Click one of the instances tagged with a `CostCenter` of `marketing`, and click **Actions** > **Instance State** > **Stop**. Notice that the action completes successfully.\n    \n6.  Click the instance tagged with a `CostCenter` of `engineering`, and click **Actions** > **Instance State** > **Stop**. Notice that the action fails with an error.\n    \n\n## Learn more\n\n*   [Configure Amazon Web Services for Single Sign-On](https://auth0.com/docs/customize/integrations/aws/configure-amazon-web-services-for-sso)\n*   [Configure Amazon Web Services as SAML Service Provider](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider/configure-saml2-web-app-addon-for-aws)",
    "title": "Use Amazon Web Services Session Tags for Role-Based Access Control",
    "description": "Learn how to use Amazon Web Services (AWS) Session Tags to implement role-based access control (RBAC) for AWS APIs and Resources.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/hook-secrets/delete-hook-secrets",
    "markdown": "# Delete Hook Secrets\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --data '{ [ \"HOOK_SECRET_NAME\", \"HOOK_SECRET_NAME\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddParameter(\"undefined\", \"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"\n\n\tpayload := strings.NewReader(\"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .body(\"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'},\n  data: '{ [ \"HOOK_SECRET_NAME\", \"HOOK_SECRET_NAME\" ] }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ [ \"HOOK_SECRET_NAME\", \"HOOK_SECRET_NAME\" ] }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\"\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/hooks/HOOK_ID/secrets\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest.body = \"{ [ \\\"HOOK_SECRET_NAME\\\", \\\"HOOK_SECRET_NAME\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet postData = NSData(data: \"{ [ \"HOOK_SECRET_NAME\", \"HOOK_SECRET_NAME\" ] }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Delete Hook Secrets",
    "description": "Learn how to delete Hook Secrets using the Dashboard and Management API. Hook Secrets may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/hook-secrets/create-hook-secrets",
    "markdown": "# Create Hook Secrets\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"\n\n\tpayload := strings.NewReader(\"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/hooks/HOOK_ID/secrets\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ], [ \\\"HOOK_SECRET_KEY\\\", \\\"HOOK_SECRET_VALUE\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ], [ \"HOOK_SECRET_KEY\", \"HOOK_SECRET_VALUE\" ] }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Create Hook Secrets",
    "description": "Learn how to create Hook Secrets using the Dashboard and Management API. Hook Secrets may also be imported and exported using the Auth0 Deploy Command-Line Interface (CLI) tool.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/hooks/hook-secrets/view-hook-secrets",
    "markdown": "# View Hook Secrets\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/hooks/HOOK_ID/secrets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/hooks/HOOK_ID/secrets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View Hook Secrets",
    "description": "Learn how to view Hook Secrets using the Dashboard and Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/alterian",
    "markdown": "# Export User Data to Alterian\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Alterian with the campaign manager's data import tool.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Alterian accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you get started, you can find more information by visiting [Alterian Campaign Manager: Data Import](http://cm.help.alterian.com/CM404/Default.htm#Customer_Analytics/Import_Export/Data_Import.htm).\n\nTo import your CSV file into Alterian, follow these steps:\n\n1.  Open your Alterian Campaign Manager and click **Documents**.\n    \n2.  Choose the directory to import the file to.\n    \n3.  Click **Upload Files** and select your CSV file.\n    \n4.  Click **Upload**.\n    \n5.  Once the upload is complete, open the **Data Import** tool.\n    \n6.  Configure your import settings using the provided fields on the **New Imports data** window.\n    \n7.  After you've reviewed your settings, click **Run Processes**.\n    \n\nThat's it! You successfully imported your Auth0 users into Alterian.",
    "title": "Export User Data to Alterian",
    "description": "Learn how to export your Auth0 user data and import it into Alterian.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/adobe-campaign",
    "markdown": "# Export User Data to Adobe Campaign\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Adobe Campaign with the [Adobe Campaign Import Wizard](https://docs.adobe.com/content/help/en/campaign-classic/using/getting-started/importing-and-exporting-data/importing-data.html).\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard, and opening the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Adobe Campaign accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you get started, you can find more information by visiting [Adobe Campaign Documentation: Importing Data](https://docs.adobe.com/content/help/en/campaign-classic/using/getting-started/importing-and-exporting-data/importing-data.html).\n\nLog in to your Adobe Campaign client dashboard and navigate to **Profiles and Targets > Jobs**. Create a new import job by clicking the **Create** button and selecting **New Import**.\n\nA new **Import Wizard** window should open. On the **Template Selection** step you can set your import parameters.\n\nOnce you've configured your import parameters, click the **Next** button to continue.\n\nOn the **File to Import** step upload the user data CSV file you exported from Auth0 in the previous section. Click the **Next** button to proceed to **Field Mapping**.\n\nNext, map the export file schema to your Adobe Campaign database schema. Check that the field names and field types are correct, then click the **Next** button.\n\nComplete the remaining configuration steps by defining your data reconciliation mode and selecting a folder, list, or service for the users being imported.\n\nFinally, begin the import by clicking the **Start** button on the **Data Import Execution** window.\n\nThat's it! You successfully imported your Auth0 users into Adobe Campaign.",
    "title": "Export User Data to Adobe Campaign",
    "description": "Learn how to export your Auth0 user data and import it into Adobe Campaign.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/marketo",
    "markdown": "# Export User Data to Marketo\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Marketo using the [Bulk Leads endpoint](http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Bulk_Leads) of the Marketo REST API.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Marketo accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n### Import a user data file\n\nBefore you get started, you can find more information by visiting [Marketo Documentation: Bulk Lead Import](http://developers.marketo.com/rest-api/bulk-import/bulk-lead-import/).\n\nTo import the user data file to Marketo, perform a POST request to the [Bulk Leads endpoint](http://developers.marketo.com/rest-api/endpoint-reference/lead-database-endpoint-reference/#/Bulk_Leads). Set the content-type header of the request to `multipart/form-data` and include a `file` parameter with your exported CSV file as well as format parameter set to `csv`. For example:\n\n*   [cURL](#16de1efb58d34ac38cb12aed97d92757_shell)\n*   [C#](#16de1efb58d34ac38cb12aed97d92757_csharp)\n*   [Go](#16de1efb58d34ac38cb12aed97d92757_go)\n*   [Java](#16de1efb58d34ac38cb12aed97d92757_java)\n*   [Node.JS](#16de1efb58d34ac38cb12aed97d92757_node)\n*   [Obj-C](#16de1efb58d34ac38cb12aed97d92757_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url https://marketo_rest_api_base_url/bulk/v1/leads.json \\\n  --header 'authorization: Bearer {MARKETO_ACCESS_TOKEN}' \\\n  --form file=@auth0_users.csv \\\n  --form format=csv\n```\n\n```\nvar client = new RestClient(\"https://marketo_rest_api_base_url/bulk/v1/leads.json\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\");\nrequest.AddHeader(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\");\nrequest.AddParameter(\"multipart/form-data; boundary=---011000010111000001101001\", \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://marketo_rest_api_base_url/bulk/v1/leads.json\"\n\n\tpayload := strings.NewReader(\"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\")\n\treq.Header.Add(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://marketo_rest_api_base_url/bulk/v1/leads.json\")\n  .header(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\")\n  .header(\"content-type\", \"multipart/form-data; boundary=---011000010111000001101001\")\n  .body(\"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://marketo_rest_api_base_url/bulk/v1/leads.json',\n  headers: {\n    authorization: 'Bearer {MARKETO_ACCESS_TOKEN}',\n    'content-type': 'multipart/form-data; boundary=---011000010111000001101001'\n  },\n  data: '-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"auth0_users.csv\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"format\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {MARKETO_ACCESS_TOKEN}\",\n                           @\"content-type\": @\"multipart/form-data; boundary=---011000010111000001101001\" };\nNSArray *parameters = @[ @{ @\"name\": @\"file\", @\"fileName\": @\"auth0_users.csv\", @\"contentType\": @\"text/csv\" },\n                         @{ @\"name\": @\"format\", @\"value\": @\"csv\", @\"contentType\": @\"text/plan\" } ];\nNSString *boundary = @\"---011000010111000001101001\";\n\nNSError *error;\nNSMutableString *body = [NSMutableString string];\nfor (NSDictionary *param in parameters) {\n    [body appendFormat:@\"--%@\\r\\n\", boundary];\n    if (param[@\"fileName\"]) {\n        [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", param[@\"name\"], param[@\"fileName\"]];\n        [body appendFormat:@\"Content-Type: %@\\r\\n\\r\\n\", param[@\"contentType\"]];\n        [body appendFormat:@\"%@\", [NSString stringWithContentsOfFile:param[@\"fileName\"] encoding:NSUTF8StringEncoding error:&error]];\n        if (error) {\n            NSLog(@\"%@\", error);\n        }\n    } else {\n        [body appendFormat:@\"Content-Disposition:form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", param[@\"name\"]];\n        [body appendFormat:@\"%@\", param[@\"value\"]];\n    }\n}\n[body appendFormat:@\"\\r\\n--%@--\\r\\n\", boundary];\nNSData *postData = [body dataUsingEncoding:NSUTF8StringEncoding];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://marketo_rest_api_base_url/bulk/v1/leads.json\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://marketo_rest_api_base_url/bulk/v1/leads.json\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {MARKETO_ACCESS_TOKEN}\",\n    \"content-type: multipart/form-data; boundary=---011000010111000001101001\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"marketo_rest_api_base_url\")\n\npayload = \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\"\n\nheaders = {\n    'authorization': \"Bearer {MARKETO_ACCESS_TOKEN}\",\n    'content-type': \"multipart/form-data; boundary=---011000010111000001101001\"\n    }\n\nconn.request(\"POST\", \"/bulk/v1/leads.json\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://marketo_rest_api_base_url/bulk/v1/leads.json\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer {MARKETO_ACCESS_TOKEN}'\nrequest[\"content-type\"] = 'multipart/form-data; boundary=---011000010111000001101001'\nrequest.body = \"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"auth0_users.csv\\\"\\r\\nContent-Type: text/csv\\r\\n\\r\\n\\r\\n-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"format\\\"\\r\\nContent-Type: text/plan\\r\\n\\r\\ncsv\\r\\n-----011000010111000001101001--\\r\\n\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer {MARKETO_ACCESS_TOKEN}\",\n  \"content-type\": \"multipart/form-data; boundary=---011000010111000001101001\"\n]\nlet parameters = [\n  [\n    \"name\": \"file\",\n    \"fileName\": \"auth0_users.csv\",\n    \"contentType\": \"text/csv\"\n  ],\n  [\n    \"name\": \"format\",\n    \"value\": \"csv\",\n    \"contentType\": \"text/plan\"\n  ]\n]\n\nlet boundary = \"---011000010111000001101001\"\n\nvar body = \"\"\nvar error: NSError? = nil\nfor param in parameters {\n  let paramName = param[\"name\"]!\n  body += \"--\\(boundary)\\r\\n\"\n  body += \"Content-Disposition:form-data; name=\\\"\\(paramName)\\\"\"\n  if let filename = param[\"fileName\"] {\n    let contentType = param[\"content-type\"]!\n    let fileContent = String(contentsOfFile: filename, encoding: String.Encoding.utf8)\n    if (error != nil) {\n      print(error)\n    }\n    body += \"; filename=\\\"\\(filename)\\\"\\r\\n\"\n    body += \"Content-Type: \\(contentType)\\r\\n\\r\\n\"\n    body += fileContent\n  } else if let paramValue = param[\"value\"] {\n    body += \"\\r\\n\\r\\n\\(paramValue)\"\n  }\n}\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://marketo_rest_api_base_url/bulk/v1/leads.json\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe response should look something like this:\n\n```\n{\n    \"requestId\": \"e42b#14272d07d78\",\n    \"success\": true,\n    \"result\": [{\n        \"batchId\": 1234,\n        \"status\": \"Importing\"\n    }]\n}\n```\n\nYou can check the status of your import using the [Get Import Lead Status API](https://auth0.com/docs/) and your import job's `batchId`. For example:\n\n*   [cURL](#c98372be32434a0aa72b83b3313d004a_shell)\n*   [C#](#c98372be32434a0aa72b83b3313d004a_csharp)\n*   [Go](#c98372be32434a0aa72b83b3313d004a_go)\n*   [Java](#c98372be32434a0aa72b83b3313d004a_java)\n*   [Node.JS](#c98372be32434a0aa72b83b3313d004a_node)\n*   [Obj-C](#c98372be32434a0aa72b83b3313d004a_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json \\\n  --header 'authorization: Bearer {MARKETO_ACCESS_TOKEN}'\n```\n\n```\nvar client = new RestClient(\"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\")\n  .header(\"authorization\", \"Bearer {MARKETO_ACCESS_TOKEN}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json',\n  headers: {authorization: 'Bearer {MARKETO_ACCESS_TOKEN}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {MARKETO_ACCESS_TOKEN}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {MARKETO_ACCESS_TOKEN}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"marketo_rest_api_base_url\")\n\nheaders = { 'authorization': \"Bearer {MARKETO_ACCESS_TOKEN}\" }\n\nconn.request(\"GET\", \"/bulk/v1/leads/batch/BATCH_ID.json\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {MARKETO_ACCESS_TOKEN}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {MARKETO_ACCESS_TOKEN}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://marketo_rest_api_base_url/bulk/v1/leads/batch/BATCH_ID.json\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nAnd the response:\n\n```\n{\n    \"requestId\": \"8136#146daebc2ed\",\n    \"success\": true,\n    \"result\": [{\n        \"batchId\": 1234,\n        \"status\": \"Complete\",\n        \"numOfLeadsProcessed\": 123,\n        \"numOfRowsFailed\": 0,\n        \"numOfRowsWithWarning\": 0\n    }]\n}\n```\n\nThat's it! You successfully imported your Auth0 users into Marketo.",
    "title": "Export User Data to Marketo",
    "description": "Learn how to export your Auth0 user data and import it into Marketo.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/sailthru",
    "markdown": "# Export User Data to Sailthru\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into the Sailthru dashboard.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Sailthru accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n### Import a user data file\n\nBefore you get started, you can find more information by visiting [Sailthru Documentation: Adding Users to Sailthru and Sailthru Lists](https://getstarted.sailthru.com/audience/managing-users/add-users-to-sailthru-and-lists/#List_File_Upload).\n\nTo import your CSV file into Sailthru, follow these steps:\n\n1.  Log in to Sailthru and navigate to [Lists](https://my.sailthru.com/lists).\n    \n2.  Choose a list, then click **Upload List** and select your CSV file.\n    \n3.  Select **Add To List** for the **Action**.\n    \n4.  Set your **Replace Vars** option and enter an email to receive notifications if desired.\n    \n5.  Review your settings and click **Submit** to upload the file.\n    \n\nThat's it! You successfully imported your Auth0 users into Sailthru.",
    "title": "Export User Data to Sailthru",
    "description": "Learn how to export your Auth0 user data and import it into Sailthru.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/mailchimp",
    "markdown": "# Export User Data to MailChimp\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into the [MailChimp dashboard](https://login.mailchimp.com/).\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. MailChimp accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nTo learn more, review [MailChimp Knowledge Base: Format Guidelines for Your Import File](https://kb.mailchimp.com/lists/growth/format-guidelines-for-your-import-file).\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For MailChimp, an email field with the column name `Email Address` is required, so make sure to include it. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you get started, you can find more information by visiting [MailChimp Knowledge Base: Import Subscribers to a List](https://kb.mailchimp.com/lists/growth/import-subscribers-to-a-list).\n\nLog in to your MailChimp account and go to the **Lists** page. Select a list to import your Auth0 users into ([or create a new list](https://kb.mailchimp.com/lists/growth/create-a-new-list)).\n\n1.  On your MailChimp List page, click on **Import Contacts** from the **Add Contacts** menu.\n    \n2.  Select the `CSV or tab-delimited text file` option to import contacts from.\n    \n3.  Upload the user data CSV file you exported from Auth0 in the previous section. MailChimp will interpret your user data on the following page.\n    \n4.  Check that the column names and field types are correct.\n    \n5.  Click the **Next** button.\n    \n6.  Review your selections and set the import category.\n    \n7.  Click the **Import** button to start the user import.\n    \n\nThat's it! You successfully imported your Auth0 users into MailChimp.",
    "title": "Export User Data to MailChimp",
    "description": "Learn how to export your Auth0 user data and import it into MailChimp.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/constant-contact",
    "markdown": "# Export User Data to Constant Contact\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into the Constant Contact dashboard.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Constant Contact accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you get started, you can find more information by visiting [Constant Contact Knowledge Base: Import or Upload a File of Contact Email Addresses](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5296-import-or-upload-a-file-of-contact-email-addresses)\n\nTo import your CSV file into Constant Contact, follow these steps:\n\n1.  [Log in to Constant Contact](https://login.constantcontact.com/) and navigate to **Contacts**.\n    \n2.  From the **Contacts** page, click **Add Contacts > Upload from file**.\n    \n3.  Provide you CSV file on the **Upload from file** page then click **Continue**.\n    \n4.  Review the columns and match them with your Constant Contact fields. Once you're finished click **Continue**.\n    \n5.  On the **Select lists** page, choose the list or lists to add your contacts to.\n    \n6.  Click **Upload**.\n    \n\nThat's it! You successfully imported your Auth0 users into Constant Contact.",
    "title": "Export User Data to Constant Contact",
    "description": "Learn how to export your Auth0 user data and import it into Constant Contact.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/eloqua",
    "markdown": "# Export User Data to Oracle Eloqua\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Eloqua with the contact upload wizard.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Eloqua accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you get started, you can find more information by visiting [Oracle Eloqua Help Center: Uploading Contacts](https://docs.oracle.com/cloud/latest/marketingcs_gs/OMCAA/index.html#Help/Contacts/Tasks/UploadingContacts.htm).\n\nTo import your CSV file into Eloqua, follow these steps:\n\n1.  Log in to Eloqua and navigate to **Audience > Contacts > Upload** to open the **Contact Upload Wizard**.\n    \n2.  Configure the import using the provided fields on the **Pick Data Source** tab.\n    \n3.  Click the **Cloud** button and select the file to upload.\n    \n4.  After you've verified the file contents on the **Review** tab, click **Next Step**.\n    \n5.  Under the **Map Fields** tab, enter the field mapping settings to match your CSV file data to contact fields. Click **Next Step** to continue.\n    \n6.  Complete the final step of the wizard and click **Finish**.\n    \n\nThat's it! You successfully imported your Auth0 users into Eloqua.",
    "title": "Export User Data to Oracle Eloqua",
    "description": "Learn how to export your Auth0 user data and import it into Oracle Eloqua.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/watson-campaign-automation",
    "markdown": "# Export User Data to Watson Campaign Automation\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into the Watson Campaign Automation dashboard.\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Watson Campaign Automation accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nTo import your CSV file into Watson Campaign Automation, follow these steps:\n\n1.  Log in to Watson Campaign Automation and navigate to **Data > Import New**.\n    \n2.  On the **Select File** step, enter the new database's settings in the provided fields.\n    \n3.  Select the option to upload a file from a local hard drive, then click **Browse** to select the file.\n    \n4.  Set the file type to CSV (comma-separated values).\n    \n5.  Click **Next** to proceed to the **Define Data Format** step.\n    \n6.  Make sure your data was processed correctly, then click **Next**.\n    \n7.  On the **Map Fields** step, choose which fields to include in the import as well as their types.\n    \n8.  Click **Next** to proceed to the **Edit Field Settings** step.\n    \n9.  Edit the settings on default or new fields as needed.\n    \n10.  To start the import click **Next**.\n    \n\nThat's it! You successfully imported your Auth0 users into Watson Campaign Automation.",
    "title": "Export User Data to Watson Campaign Automation",
    "description": "Learn how to export your Auth0 user data and import it into Watson Campaign Automation.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/introduction-to-integrating-with-auth0",
    "markdown": "# Introduction to Integrating with Auth0\n\nAuth0 provides an authentication and authorization service built on open standards like OIDC, OAuth2, SAML, and others. But, more than that, we provide tools so our customers can outsource user centralization and management, components of application security, and connecting networks of applications to a single source of identity.\n\nAn important part of this is enabling partners, such as yourself, to create an ecosystem of integrations that can be used to enhance and extend what we already provide. We do this by providing extensibility points and methods to allow customization. This means more functionality for customers with less maintenance burden for them.\n\nAlmost 90% of our customers extend the Auth0 platform for their unique requirements. By working with you to solve for common identity problems and use cases, we can expedite the time it takes our customers to implement their identity workflows.\n\n## What can be extended?\n\nThis video below is a quick walk-through of Auth0 under the hood, identifying the places where you are able to add an integration.\n\nThe list below is a list of the different ways that Auth0 can be customized. Some extensibility points allow integrations to be installed directly while others would need a guide that a customer can follow. Also note that some of the extensibility points require a paid Auth0 account.\n\n*   **Single-Sign On to an external service**\n    \n    *   [SAML](https://auth0.com/docs/customize/integrations/marketplace-partners/sso-integrations-for-partners)\n        \n    *   OpenID Connect\n        \n    *   WS-Fed\n        \n*   [**Customize user-facing Auth0 UI**](https://auth0.com/docs/customize)\n    \n    *   Load custom JavaScript and CSS on the login form\n        \n    *   Custom email templates\n        \n*   **Sources of identity**\n    \n    *   [OpenID Connect](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/oidc)\n        \n    *   [OAuth2](https://auth0.com/docs/customize/integrations/marketplace-partners/social-connections-for-partners)\n        \n    *   [SAML](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/saml)\n        \n    *   [Active Directory/LDAP](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap)\n        \n    *   [Custom code pointing to a remote identity source](https://auth0.com/docs/authenticate/database-connections/custom-db)\n        \n*   **Custom code** [**before**](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow) **and** [**after**](https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow) **Auth0 database registration**\n    \n    *   Database Connections\n        \n    *   Passwordless Connections\n        \n*   [**Custom code after successful authentication**](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow)\n    \n    *   Call an external API to enrich the user profile, block logins, etc.\n        \n    *   [Redirect to an external service](https://auth0.com/docs/customize/integrations/marketplace-partners/redirect-actions-for-partners)\n        \n    \n    *   Enrich the user profile stored in Auth0\n        \n    *   Provide a second factor for authentication\n        \n    *   [Step-up authentication](https://auth0.com/docs/secure/multi-factor-authentication/step-up-authentication)\n        \n    *   Trigger Auth0 MFA\n        \n*   **Custom code** [**before**](https://auth0.com/docs/actions/triggers/pre-user-registration) **and** [**after**](https://auth0.com/docs/actions/triggers/post-user-registration) **Auth0 database registration**\n    \n    *   Database Connections\n        \n    *   Passwordless Connections\n        \n*   [**Send MFA codes using a custom SMS provider**](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow)\n    \n*   **Integration with customer applications**\n    \n    *   Integrate via your own SDK\n        \n*   **Application calling a resource/API**\n    \n    *   [Modify access tokens at login](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow)\n        \n    *   [Modify access tokens for machine-to-machine applications](https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow)\n        \n*   [**Log streams**](https://auth0.com/docs/customize/log-streams/custom-log-streams)\n    \n*   [**Email providers via SMTP**](https://auth0.com/docs/customize/email/smtp-email-providers)\n    \n*   **Tenant and user management**\n    \n    *   [Via API using a machine-to-machine application](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens)\n        \n        *   [User management](https://auth0.com/docs/manage-users/user-accounts/manage-users-using-the-management-api)\n            \n        *   [Application management](https://auth0.com/docs/api/management/v2#!/Clients/get_clients)\n            \n        *   [Connection management](https://auth0.com/docs/api/management/v2#!/Connections/get_connections)\n            \n    *   [Via CLI](https://auth0.com/docs/deploy-monitor/deploy-cli-tool)\n        \n\n## Learn more\n\n*   [Marketplace Partners](https://auth0.com/docs/customize/integrations/marketplace-partners)\n*   [Redirect Actions for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/redirect-actions-for-partners)\n*   [Social Connections for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/social-connections-for-partners)\n*   [SSO Integrations for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/sso-integrations-for-partners)",
    "title": "Introduction to Integrating with Auth0",
    "description": "Describes available integrations for Auth0's partners",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/export-user-data-salesforce",
    "markdown": "# Export User Data to Salesforce\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Salesforce using the Data Import Wizard. To review system requirements, visit the Salesforce article [Data Import Wizard](https://help.salesforce.com/articleView?id=data_import_wizard.htm).\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Salesforce accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nDifferent account types may require addition steps for successful import. Take a moment to review the Salesforce article [Prepare Your Data for Import](https://help.salesforce.com/articleView?id=import_prepare.htm). For additional instructions, visit [Salesforce: Import Data with the Data Import Wizard](https://help.salesforce.com/articleView?id=import_with_data_import_wizard.htm).\n\nBefore you begin, make sure your Salesforce account has the required [user permissions](https://help.salesforce.com/articleView?id=faq_import_general_permissions.htm) to import records.\n\nTo import your CSV file into Salesforce, follow these steps:\n\n1.  Login to [Salesforce](https://login.salesforce.com/).\n    \n2.  Navigate to **Setup** and open the **Data Import Wizard**.\n    \n3.  Click **Launch Wizard**.\n    \n4.  Configure the import and select your CSV file to upload using the fields provided.\n    \n5.  Click **Next**.\n    \n6.  On the **Edit Field Mapping** page, map your CSV file's data fields to Salesforce data fields. Click **Next** to proceed.\n    \n7.  After you've verified the information on the **Review** page, click **Start Import**.\n    \n8.  Check out the **Recent Import Jobs** tab on the **Data Import Wizard** home page for updates on the status of your import.\n    \n\nThat's it! You successfully imported your Auth0 users into Salesforce.",
    "title": "Export User Data to Salesforce",
    "description": "Learn how to export your Auth0 user data and import it into Salesforce.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/defining-an-integration-use-case",
    "markdown": "# Defining an Integration Use Case\n\nOne of the most important parts of integrating with Auth0 is defining what the integration will do and how it will do it. Customers need to understand what problem your integration will solve and how it will go about solving it. This is probably an easy question to answer about your service on its own but, in the context of an identity platform like Auth0, it can be more nuanced.\n\nThis guide will help you understand the integration environment a little better and guide you to designing a great integration with Auth0.\n\n#### Review: What does Auth0 do?\n\nHere at Auth0 we ...\n\n*   Enable easy and secure access to any application.\n    \n*   Provide an authentication and authorization service built on open standards like OIDC, OAuth2, SAML, and others.\n    \n*   Build an identity platform that exposes the appropriate building blocks targeted to different operators in the ecosystem.\n    \n*   Handle our customers' outsourced application security, user centralization, and user management by connecting networks of applications to a single source of identity.\n    \n\n#### What does your service do?\n\nIt's helpful for us to understand what your service is capable of doing and what use cases your customers rely on you to handle. A few questions that can help with framing your answer:\n\n*   Are you a source of user identity?\n    \n*   Do you provide data or analytics?\n    \n*   Does your service expose a user interface of any kind?\n    \n*   Do you increase security? Observability?\n    \n\n#### Do you target specific industries or customer types?\n\nAuth0 customers span throughout industries like software/tech, financial services, media, to travel and hospitality. we can handle application networks of all types but our main focus is [Customer Identity and Access Management or CIAM](https://auth0.com/blog/what-is-ciam/). More specifically, we focus on B2C and B2B use cases where the goal is to help our customers generate revenue (B2B) and convert more customers (B2C) while making sure we protect our customers at all cost. We work with companies to create integrations that solve CIAM for any use case.\n\nCompanies that are a good fit with Auth0:\n\n*   Are striving to change the perception that identity is hard\n    \n*   Focus on growing their B2B customers\n    \n*   Aim to increase revenue for their B2C customers\n    \n*   Don't compromise on security\n    \n\nDoes your service do any of the following?\n\n*   Focus on government, medical, eCommerce, or other specific applications?\n    \n*   Typically get used at a certain scale or traffic level?\n    \n*   Get installed on premise?\n    \n\n#### What problem(s) does your service solve for your customers?\n\nIn a general sense, it's important to know why, exactly, our mutual customers would use your service. Focusing on the problems that your service solves can help us find common ground and understand why an integration would be valuable.\n\nSome examples are:\n\n*   Low conversation rates caused by interruptive security measures like MFA\n    \n*   Spam sign ups and content submission\n    \n*   Too much or unhelpful log data\n    \n\n#### How does your service solve those problems in the context of an identity platform?\n\nThis is where we start connecting what your service does to the platform we maintain. We handle many different forms of authentication and authorization, all of which flow through a central context. The question here is asking what parts of our service might cause or exacerbate the problem(s) listed above.\n\nA few ideas:\n\n*   Centralized login creates lots and lots of log data that is impossible to monitor manually\n    \n*   A central user store makes augmenting a user profile beneficial for all applications in the network\n    \n*   Identity verification is easier to provision in one place rather than individually for specific applications\n    \n\n#### Can you provide a visual representation of how this integration will work?\n\nSystem and/or sequence diagrams are helpful to explain how your integration is working to our partner technical team as well as our customers.\n\n#### Are there any limitations to this integration?\n\nOur identity platform enables logging in using a browser, mobile device, CLI, cloud functions, and more. We also gate some features by the type of plan that a customer is on.\n\nDoes your service have:\n\n*   Technology limitations of any kind, including OS, language, platform, or devices?\n    \n*   Rate limits or payment gateways?\n    \n*   Asynchronous processing requirements?\n    \n*   Auth0 plan level limitations? See [our pricing page](https://auth0.com/pricing) for information on specific features.\n    \n\n#### What's next?\n\nNow that you have a sense of how your service can work with Auth0, you are ready to learn more about [Integrating with Auth0](https://auth0.com/docs/customize/integrations/marketplace-partners/introduction-to-integrating-with-auth0).",
    "title": "Defining an Integration Use Case",
    "description": "Describes methodology to plan an Auth0 integration",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketing-tool-integrations/salesforce-marketing-cloud",
    "markdown": "# Export User Data to Salesforce Marketing Cloud\n\nIn this article, you’ll learn how to export user data in Auth0 to a CSV file then import it into Salesforce Marketing Cloud using Email Studio.\n\nTo read more, review the Salesforce article [Get Started Checklist for Email Studio](https://help.salesforce.com/articleView?id=mc_es_get_started_with_email_studio.htm&type=5).\n\n## Create a user data file\n\nStart by navigating to the [Extensions](https://manage.auth0.com/#/extensions) section of the Dashboard and open the **User Import / Export Extension**. On the extension page, select **Export** from the menu.\n\nNext, set the **Export Format** to the required file format. Salesforce Marketing Cloud accepts file imports in CSV format so choose the `Tab Separated Value file (*.csv)` option.\n\n![Dashboard - Extensions - User Import/Export Extension - Set Format](https://images.ctfassets.net/cdy7uua7fh8z/7t85LanHsA9xUIfiYgtmRt/a2ac89c7a1a5dbf46b686993ac41b8f3/import-export-set-format.png)\n\nAt the top in the **Fields** section, provide a **User Field** and **Column Name** for each user attribute to include in the export. For example:\n\n| User Field | Column Name |\n| --- | --- |\n| `email` | Email Address |\n| `created_at` | Created At |\n| `given_name` | First Name |\n| `family_name` | Last Name |\n\n![Dashboard - Extensions - User Import/Export - Extension Fields](https://images.ctfassets.net/cdy7uua7fh8z/3LtGPiE6o0aefYj0gMP3Q9/73dae2d5699c2322b62ff4de65ff862a/import-export-fields.png)\n\nAfter adding the user fields, click on the **Export Users** button to start the export. Once the export is complete, download the CSV file to use in the following section.\n\n## Import a user data file\n\nBefore you begin, make sure your Salesforce account has the required [](https://help.salesforce.com/articleView?id=faq_import_general_permissions.htm)user permissions to import records. Also, you should take a moment to review the steps in the Salesforce article [Email Studio: Import Subscribers](https://help.marketingcloud.com/en/documentation/exacttarget/subscribers/subscribers_for_interactive_marketing_hub/imports/importing_subscribers/) along with [What permissions do I need to import records](https://help.salesforce.com/articleView?id=faq_import_general_permissions.htm).\n\nTo import your CSV file into Salesforce Marketing Cloud, follow these steps:\n\n1.  Log in to Salesforce Marketing Cloud and open **Email Studio**.\n    \n2.  Navigate to **Subscribers > Lists**.\n    \n3.  Choose the list to import to and select the **Import** action.\n    \n4.  After the import wizard's introduction, select your CSV file as the **Upload Source** and select CSV as the **Data Format**. Enter the remaining settings and click **Next**.\n    \n5.  In the **Map Attributes** dialog, map your CSV file's data fields to the correct data fields. When you've finished your mappings click **Next**.\n    \n6.  After you've verified your mappings in the **Confirmed Mappings** dialog, click **Begin** to start the import.\n    \n\nThat's it! You successfully imported your Auth0 users into Salesforce Marketing Cloud.",
    "title": "Export User Data to Salesforce Marketing Cloud",
    "description": "Learn how to export your Auth0 user data and import it into Salesforce Marketing Cloud.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/actions-integrations-for-partners",
    "markdown": "# Actions Integrations for Partners\n\nPartners like you use Actions Integrations to build zero-code solutions that tie their products into Auth0 workflows. Actions Integrations let Auth0 customers implement solutions like identity verification or consent management without writing any code. You write the Actions Integration; customers drag and drop it into their workflow.\n\nActions Integrations are self-contained functions that execute at chosen points in the Auth0 platform. Written in JavaScript, they are closed source; customers can’t modify the code. \n\n## Create and publish an Actions Integration\n\nCreating an Actions Integration involves planning, building, and testing. Before you make it available to customers in the [Auth0 Marketplace](https://marketplace.auth0.com/), Auth0 reviews the Actions Integration. For information about the Auth0 Marketplace, read [Marketplace Partners](https://auth0.com/docs/customize/integrations/marketplace-partners).\n\n### 1\\. Determine your use case\n\nIdentify what use case your Actions Integration will address. What problem will it solve for customers? How will it solve the problem? For more information, read [Defining an Integration Use Case](https://auth0.com/docs/customize/integrations/marketplace-partners/defining-an-integration-use-case). \n\n### 2\\. Choose a flow\n\nAction Integrations consist of a single [Action](https://auth0.com/docs/customize/actions). What an Action can do is determined by where it is executed within the Auth0 runtime environment, its Action [flow](https://auth0.com/docs/customize/actions/flows-and-triggers). Available Action flows are:\n\n*   **Login flow** runs synchronously after a user successfully signs up or logs in. Login events include interactive flows (like username/password or federated login) and non-interactive flows (like session checks and refresh token exchanges). To learn more about this flow, read [Login Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow).\n    \n*   **Machine to Machine flow** runs synchronously when an application requests an access token using the client credentials grant. To learn more about this flow, read [Machine to Machine Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/machine-to-machine-flow).\n    \n*   **Pre User Registration flow** runs synchronously before Auth0 adds a user to a database or passwordless connection. This flow does not run for federated logins like enterprise or social connections. To learn more about this flow, read [Pre User Registration Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/pre-user-registration-flow).\n    \n*   **Post User Registration flow** runs asynchronously after Auth0 adds a user to a database or passwordless connection. This flow does not run for federated logins like enterprise or social connections. To learn more about this flow, read [Post User Registration Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow).\n    \n*   **Post Change Password flow** runs asynchronously after the customer changes a password for a database connection user. This flow does not run for password changes on other types of connections. To learn more about this flow, read [Post Change Password Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/post-change-password-flow).\n    \n*   **Send Phone Message** **flow** delivers a phone or SMS message as part of a custom MFA provider. To learn about custom MFA providers, read [Customize Multi-factor Authentication SMS and Voice Messages](https://auth0.com/docs/customize/customize-sms-or-voice-messages). To learn more about this flow, read [Send Phone Message Flow](https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow).\n    \n\nTo learn more about Action flows, read [Explore Flows and Triggers](https://auth0.com/docs/customize/actions/flows-and-triggers). If you need to redirect users to an endpoint during login, read [Redirect Actions for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/redirect-actions-for-partners).\n\n## 3\\. Build an Actions Integration\n\nOnce you’ve decided which flow fits your Action Integration's use case, build your Action in a testing tenant. For instructions, read [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action). This Action will be the basis for your Action Integration code.\n\nTo learn how to make your Actions Integration secure and stable, read [Actions Coding Guidelines](https://auth0.com/docs/customize/actions/action-coding-guidelines). Also follow these guidelines specific to Actions Integrations:\n\n*   When building your Action in a test tenant, use secrets for all values that a customer needs to provide (such as identifiers, tenant names, and thresholds). When you submit your Actions Integration, Auth0 asks which fields must be encrypted at rest (remain secrets) and which can be editable text fields.\n    \n*   Use a debug/test mode configuration flag for logging that helps with setup or troubleshooting. Actions Integrations should rarely output logs for all executions.\n    \n*   Write secret names in `ALL_CAPS_SNAKE_CASE` to ease review.\n    \n*   Action Integrations are closed source; customers can neither see nor modify the code. Any customer-specific input required to control the Action Integration must come from secrets or configuration.\n    \n\n### 4\\. Test your Actions Integration\n\nBecause Auth0 reviewers don't have access to your service, you must test your Action before submitting it for review. Manually test both successful executions and edge cases. Include these checks:\n\n*   Does the Action fail silently or block further execution?\n    \n*   How does the Action work if an HTTP request fails?\n    \n*   What, if any, error messages are exposed to users?\n    \n*   What information is logged?\n    \n*   Can the Action be bypassed or spoofed?\n    \n\nDuring the submission process, Auth0 asks for unit test coverage for the success path. Auth0 provides all the tooling and examples needed to make this as simple as possible.\n\n### 5\\. Submit your Actions Integration\n\nOnce you’ve written and thoroughly tested your Actions Integration, submit it to Auth0 for review: submit an [Auth0 Marketplace service request](https://autheco.atlassian.net/servicedesk/customer/portal/1/group/1/create/43). After an initial review of the request, Auth0 sends you a link to a GitHub repository with instructions on how to document, test, and submit your Actions Integration.\n\n### 6\\. Publish your Actions Integration\n\nOnce Auth0 reviews your Actions Integration, we send you a preview of your listing and confirm when to publish it in the Auth0 Marketplace. Once it’s live, we send you a URL to the published Actions Integration. When you promote your Actions Integration, you can share the link with customers and potential customers.",
    "title": "Actions Integrations for Partners",
    "description": "Instructions for Auth0 business partners to create zero-code solutions that tie third-party products into Auth0 workflows",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/redirect-actions-for-partners",
    "markdown": "# Redirect Actions for Partners\n\nWhen a user is logging in or signing up, a Redirect Action lets you redirect them to an external page (such as a consent form) and then then back to Auth0 to complete their login or signup. You can redirect users to access an external application that prompts them to:\n\n*   Take an action, like ID proofing\n    \n*   Provide information, like progressive profiling\n    \n*   Agree to something, like consent or terms of service\n    \n\n![Diagram of Redirect Action on Post Login trigger: The Customer Application redirects the user to Auth0 to log in.  If the login is successful, all Actions in the Post Login trigger execute (this happens before MFA, if it is active). If an Action triggers a redirect, the user is sent to the designated URL along with a state parameter. This URL must be hosted by your service or the customer. The user is redirected or POSTed back to Auth0 at a specific path on their domain, along with the original state value, and the Action runs any code that exists in onContinuePostLogin. The user is sent back to the application with their identity or, if something failed, an error message.](https://images.ctfassets.net/cdy7uua7fh8z/7fNydolHKmq8Ke9AuyDxTT/9f406931d88332856b67072965a55612/Action_Flow_-_Redirect.png)\n\nThis process occurs in a Redirect Action:\n\n1.  The **Customer Application** redirects the user to Auth0 to log in.\n    \n2.  If the login is successful, all Actions in the [Post Login trigger](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow) execute (this happens before MFA, if it is active).\n    \n3.  If an Action triggers a redirect, the user is sent to the designated URL along with a state parameter. This URL must be hosted by your service or the customer.\n    \n4.  The user is redirected or POSTed back to Auth0 at a specific path on their domain, along with the original state value, and the Action runs any code that exists in `onContinuePostLogin`.\n    \n5.  The user is sent back to the application with their identity or, if something failed, an error message.\n    \n\nOnce you’re ready to tie your service into the process, there are important elements to consider:\n\n*   How do you determine when to redirect out of Auth0?\n    \n    *   Flag in the [user’s app\\_metadata](https://auth0.com/docs/manage-users/user-accounts/metadata/manage-metadata-rules)?\n        \n    *   Based on a particular metadata field on the Client?\n        \n*   How do you handle existing user profile data that should be verified? (This data could be user-provided or from a federated identity source, such as Google, Facebook, or Azure AD.)\n    \n*   What data do you need from Auth0 in your service and how do you get it there securely?\n    \n*   How do you persist the state value from Auth0 in your service?\n    \n*   How do you get and persist the `/continue` URL to which you want to POST/redirect?\n    \n*   What do you send back to Auth0 and how do you accomplish this securely?\n    \n*   How do you indicate that ID proofing is complete and pass status?\n    \n*   How do you store necessary information in the [user’s app\\_metadata](https://auth0.com/docs/manage-users/user-accounts/metadata/manage-metadata-rules) or the [normalized user profile](https://auth0.com/docs/manage-users/user-accounts/user-profiles/user-profile-structure)\n    \n*   Be mindful of [rate limits](https://auth0.com/docs/support/policies/rate-limit-policy/management-api-endpoint-rate-limits) and update only when necessary\n    \n*   How do you send information back to the requesting application using [custom token claims](https://auth0.com/docs/get-started/apis/scopes/sample-use-cases-scopes-and-claims)?\n    \n\nTo help answer all of these questions and more, read [Redirect with Actions](https://auth0.com/docs/customize/actions/flows-and-triggers/login-flow/redirect-with-actions). When you're ready to submit your Action Integration, follow steps 4-6 in [Action Integrations for Partners.](https://auth0.com/docs/customize/integrations/marketplace-partners/actions-integrations-for-partners)",
    "title": "Redirect Actions for Partners",
    "description": "Learn about redirect Actions and how Auth0 Marketplace partners can use them to customize the login flow.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/sso-integrations-for-partners",
    "markdown": "# SSO Integrations for Partners\n\nSSO (single sign-on) integrations use an Auth0 identity to log in, via SAML, to an external service. This allows customers with internal applications to use SSO to access third-party vendors using the Auth0 identity.\n\nThe [SSO integrations available on Marketplace](https://marketplace.auth0.com/features/sso-integrations) define both the standard SAML configuration values needed to connect Auth0 to external vendors, and the fields necessary for additional customer-specific values. In these integrations, Auth0 acts as the identity provider in a service provider (SP)-initiated scenario. To learn how to configure Auth0 for these integrations, see [Configure Auth0 as a SAML Identity Provider](https://auth0.com/docs/authenticate/single-sign-on/outbound-single-sign-on/configure-auth0-saml-identity-provider).\n\nThe part that our partners will provide is the default SAML configuration to make this transaction work. This will consist of values or customer-requested fields for some or all of the attributes listed in [Customize SAML Assertions: SAML Assertion Attributes](https://auth0.com/docs/authenticate/protocols/saml/saml-configuration/customize-saml-assertions).\n\nTo build and test an integration, [create a tenant](https://auth0.com/signup) in Auth0 and follow the documentation above to create a working SSO integration with your service.\n\n## Submit your SSO Integration\n\nOnce you have an integration working, Auth0 will work with you to publish the integration in the [Auth0 Marketplace](http://marketplace.auth0.com/). When you submit your integration you must provide this information:\n\n1.  The business and marketing content for your Auth0 Marketplace listing. This includes your company's description and logo and describes what the integration does.\n    \n2.  The code and configuration you used for the integration. Partners typically submit the code using GitHub.\n    \n3.  An installation guide in Markdown format with instructions on how to configure your service to work with Auth0. Please follow our [Writing Tips for Installation Guides](https://auth0.com/docs/customize/integrations/marketplace-partners/writing-tips-for-installation-guides) when you create this document.\n    \n\nIf you're ready to become a partner and submit your integration to list in the Auth0 Marketplace, please fill out the [Auth0 Marketplace support center](https://autheco.atlassian.net/servicedesk/customer/portal/1). If you ware a new partner, you will need to Apply to become a Marketplace partner, after that you can fill out the \"Submit a new Integration\" form with the information described above.\n\n**We will need the following configuration and documentation:**\n\n*   The JSON used to configure the working SAML add-on Application\n    \n*   A list of fields that should be shown to the customer configuring the integration (like **Callback URL**, **Audience**, and **Signing Certificate**)\n    \n*   An installation guide written in Markdown following the [SSO Integration installation guide template](https://gist.githubusercontent.com/joshcanhelp/c70b8512a85e38c3370cc5c55d3fbdcb/raw/f3d21c73ef55678e3746e379fa05d0354a721972/sso-template.md)",
    "title": "SSO Integrations for Partners",
    "description": "Learn how to build an SSO Integration as a member of our partner community.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress",
    "markdown": "# Integrate with WordPress\n\nThe Login by Auth0 plugin handles login and account creation flows automatically by creating or matching user accounts with incoming Auth0 profile data. The login process and the signup process are similar and an account will be created or matched based on the data in your WordPress database. Logging in via Auth0 creates a WordPress account, and sign up via Auth0 matches an existing WordPress account.\n\nIf you are using the User Migration setting in the plugin, the login flow will be slightly different from what is explained below. To learn more, read [User Migration in Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0).\n\nBelow are the steps in the process:\n\n1.  The user accesses the WordPress site's login page. This could be the main login page at `[SITE URL]/wp-login.php` or a page containing a widget or shortcode.\n    \n2.  The user provides their username and password, clicks on a social icon to use another identity provider, or completes the Passwordless process in the Auth0 login form, Lock.\n    \n3.  Auth0 attempts to authenticate the user with the method selected.\n    \n    1.  If login or signup with a username + password or with Passwordless fails, an error message appears on Lock.\n        \n    2.  If it is successful, the process continues.\n        \n4.  The user is redirected to the `/authorize` endpoint with a login ticket and a `state` value generated by the plugin. Once this is complete, the Auth0 user record has been created and the rest of the process happens on the WordPress site.\n    \n5.  The actual login process differs whether you are using the [Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow) or the [Implicit Flow](https://auth0.com/docs/authenticate/login/oidc-conformant-authentication/oidc-adoption-implicit-flow):\n    \n    1.  For Authorization Code Flow logins:\n        \n        1.  The user is redirected back to a callback URL, `SITE URL/index.php?auth0=1` with an authorization code and the same `state` value in URL parameters.\n            \n        2.  The `state` value is validated. If validation does not pass, an \"Invalid state\" error is shown and the login process stops. To learn more about state validation, read [Troubleshoot Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0).\n            \n        3.  The ID token is validated to make sure nothing was modified during transit. If the ID token is invalid, an error message is shown and the login process stops (see the Troubleshooting page for more information on ID token validation)\n            \n        4.  The user profile data is retrieved via the Management API using the Machine-to-Machine Flow. To learn more, read [Machine-to-Machine Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow).\n            \n    2.  For Implicit Flow logins:\n        \n        1.  The user is redirected back to a callback URL, `SITE URL/wp-login.php?auth0=implicit` with an ID token and the same `state` value in an anchor link.\n            \n        2.  This anchor link is parsed in JS and then POSTed back to a callback URL `SITE URL/index.php?auth0=implicit` with those 2 same values in URL parameters.\n            \n        3.  The ID token is validated to make sure nothing was modified during transit. If the ID token is invalid, an error message is shown and the login process stops (see the Troubleshooting page for more information on ID token validation)\n            \n        4.  The information in the valid ID token is used as the user profile data.\n            \n6.  The Auth0 authentication process is complete and the plugin attempts to match the profile data with a user in WordPress.\n    \n7.  The plugin checks whether the site requires an email address (plugin settings **Advanced** tab) and if the incoming profile has an `email_verified` flag set.\n    \n    1.  If the site requires an email address and the incoming user does not provide an email address (some social identity providers, like X, do not include an email address), the login process stops with an error message stating \"This account does not have an email associated.\"\n        \n    2.  If the site requires an email address and the incoming user does not have the `email_verified` flag set to `true`, the login process stops with an error message stating \"This site requires a verified email address\" and a link to re-send the verification email. This continues to show until the user successfully verifies their email address.\n        \n    3.  If the site does not require an email address or the incoming user has the `email_verified` flag set to `true`, then the login process continues.\n        \n8.  The plugin checks to see if there is a user in the WordPress database with a `usermeta` value that matches the incoming Auth0 user ID (meaning that the user has signed up or logged in with Auth0 before):\n    \n    1.  If a user is found that has the incoming user ID then the login process continues.\n        \n    2.  If a user is not found with the incoming Auth0 user ID, the plugin looks for an email address matching the incoming user:\n        \n        1.  If a match is found, that user is selected and the login process continues.\n            \n        2.  If a match is not found, the plugin checks if registration is turned on for the WordPress site:\n            \n            1.  If registration is turned off, the login process stops with an error message stating \"Could not create user. The registration process is not available\"`.`\n                \n            2.  If registration is turned on, a new user is created and the login process continues.\n                \n9.  The found or created user is updated with the incoming Auth0 profile data, including their Auth0 user ID.\n    \n10.  The user is logged into their WordPress account with `wp_set_auth_cookie` and the core `do_login` action fires.\n    \n11.  The user is redirected to a page on the site, which could be the default set in the plugin settings **Advanced** tab or the original login URL if a shortcode or widget was used or a different one provided during the login process.\n    \n\nThe user is now logged into Auth0 and their WordPress account with the two associated by their Auth0 user ID.\n\n## Learn more\n\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Troubleshoot Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0)\n*   [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0)",
    "title": "Integrate with WordPress",
    "description": "Describes the scenarios of how Auth0 integrates with WordPress",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/social-connections-for-partners",
    "markdown": "# Social Connections for Partners\n\nIn Auth0, Connections are a source of user identity for logging in ([video](https://auth0-1.wistia.com/medias/tet170a1vt)). Social Connection is the term we use for a consumer-level source of identity, like Google or Facebook ([video](https://auth0-1.wistia.com/medias/5kshjcduya)). Customers can provide their users with the option of using one or more social connections on the login form, or just use a single provider by including a URL parameter when redirecting to the login form.\n\n![Social Connections for Partners - Universal Login with Social Connections - Example login page](https://images.ctfassets.net/cdy7uua7fh8z/4mQxtOyW7bdSznrNA91eky/cf97d19b6136748cbbdc3076fadd77cc/connections-for-partners_sample-login-screen.png)\n\nOnce a user is logged in, their identity from the social provider is mapped to an Auth0 profile, and the result is sent to the application that requested login. This creates an Auth0 user record using the identity from the selected Social Connection. The attributes used for this record are mapped from the external identity source to an [Auth0 user profile](https://auth0.com/docs/manage-users/user-accounts/user-profiles/normalized-user-profiles).\n\nYour Marketplace Social Connection will start as a [Custom Social Connection](https://auth0.com/docs/authenticate/identity-providers/social-identity-providers/oauth2) that can be built on any Auth0 tenant, so you can see how the transaction will work and make sure that users can log in with your authorization server. The following video will show you how to build and test a Connection in Auth0.\n\nOnce you have an integration working, Auth0 will work with you to publish the integration in the [Auth0 Marketplace](http://marketplace.auth0.com/). When you submit your integration you must provide this information:\n\n1.  The business and marketing content for your Auth0 Marketplace listing. This includes your company's description and logo and describes what the integration does.\n    \n2.  The code and configuration you used for the integration. Partners typically submit the code using GitHub.\n    \n3.  An installation guide in Markdown format with instructions on how to configure your service to work with Auth0. Please follow our [Writing Tips for Installation Guides](https://auth0.com/docs/customize/integrations/marketplace-partners/writing-tips-for-installation-guides) when you create this document.\n    \n\nIf you're ready to become a partner and submit your integration to list in the Auth0 Marketplace, please fill out the [Auth0 Marketplace support center](https://autheco.atlassian.net/servicedesk/customer/portal/1). If you ware a new partner, you will need to Apply to become a Marketplace partner, after that you can fill out the \"Submit a new Integration\" form with the information described above.\n\n**We will need the following configuration and documentation:**\n\n*   The Authorization and Token URLs that should be used; if your authorization server uses a tenant architecture, include the pattern to use, and we will include a **Tenant Domain** field or similar.\n    \n*   A list of fields that the customer configuring the integration should see, including **Client ID** and **Client Secret**\n    \n*   A list of scopes that can be requested, including whether to require them and/or request them by default\n    \n*   A profile mapping script (following the [mapping script template](https://gist.github.com/joshcanhelp/26e1fc3581d2ced737c4f50a694ea10f)). This script must map a unique identifier to `user_id` and, if possible, `email`, `email_verified`, and `name`\n    \n*   An installation guide written in Markdown and following the [social connection installation guide template](https://gist.githubusercontent.com/joshcanhelp/b7d51a5b55aff499ea4f2b49aa0123c6/raw/4c087e286f4b8b6405f98d0730e0276611bb2411/social-connection-template.md)",
    "title": "Social Connections for Partners",
    "description": "Learn about social connections and how Auth0 Marketplace partners can use, build, and test them.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin",
    "markdown": "# Login by Auth0 WordPress Plugin\n\nAuth0 provides a WordPress Plugin to integrate your sites with your Auth0 account. This plugin enables Single Sign-on (SSO) for Enterprises, social login, user/password, and passwordless login through all your instances.\n\nLogin features are implemented through a new form (powered by Auth0) that enables:\n\n*   SSO with Enterprise Directories (LDAP, AD, Google Workspace, Office365, and SAML Provider)\n    \n*   SSO with over 30 [Social Providers](https://auth0.com/docs/identityproviders)\n    \n*   SSO between WordPress installs and other applications\n    \n*   User Management Dashboard\n    \n*   Optional Multi-factor Authentication\n    \n*   Optional Passwordless Authentication\n    \n*   Reporting and Analytics\n    \n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Troubleshoot Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0)",
    "title": "Login by Auth0 WordPress Plugin",
    "description": "This page explains the basics of the Login by Auth0 WordPress plugin",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/marketplace-partners/writing-tips-for-installation-guides",
    "markdown": "# Writing Tips for Installation Guides\n\nIf you can't consult a full style guide, review these tips to significantly improve your content.\n\n## Use active voice\n\nAvoid passive voice (to be verb + past-tense verb). To make your text more dynamic, clear, and (often) shorter, try to use actors and active voice wherever possible.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Once you add the required configuration, Auth0 will process all logins for your tenant using this Rule. Before you activate the integration in production, make sure you have configured all components correctly and verified on a test tenant. | Once the required configuration is added, all logins for your tenant will be processed by this Rule. Please make sure all components have been configured correctly and verified on a test tenant before activating the integration in production. |\n\n## Make link titles scannable\n\nWhen you link to other resources, make sure the link describes the action or task in the document to which the link is pointing. Generic link text reduces scannability by forcing readers to read all of the text surrounding a link to identify what to select.\n\n## Write device-agnostic directions\n\nRemember that user interfaces display differently on different devices. Also, remember that users may be using adaptive devices to view your content.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Select **Create**. | Click **Create**. |\n| Switch to the **Applications** view. | Switch to the **Applications** tab. |\n| Locate **Client Secret**. | Scroll up to **Client Secret**. |\n\n## Use verbs and noun/adjectives properly\n\nBe careful about words that can be used as both verbs and nouns or adjectives. Verb forms usually require a space between words, while nouns and adjectives can be compounded.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Log in to your account. | Login to your account. |\n| Auth0 processes logins. | Auth0 processes log ins. |\n| Set up your hardware. | Setup your hardware. |\n| Describe your hardware setup. | Describe your hardware set up. |\n\n## Use sentence case for headings\n\nOnly capitalize the first word and any other proper nouns or Auth0 product names.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Add a dependency | Add a Dependency |\n| Validate resumed login | Validate Resumed Login |\n| Create an Action | Create an action |\n\n## Use simple tense for headings\n\nAvoid unnecessary wordiness by using simple tenses for headings.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Assign and change users | Assigning and changing users |\n| Connect a custom database | How to connect a custom database |\n\n## Write steps concisely\n\nWhen writing introductory text for steps, be direct and concise. Remember that users already know what they need to do with a numbered list of steps.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| To install the SDK: | Follow the steps below: |\n\n## Set user expectations in steps\n\nTell users what the outcome of their behavior should be before describing the behavior they need to take.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| To activate this integration, select **Save Changes**. | Select **Save Changes** to activate this integration. |\n\n## List actions within steps in order\n\nWithin individual steps, tell the user what to do in the order they need to do it.\n\n| **Preferred** | **Discouraged** |\n| --- | --- |\n| Locate the **Integrations** section, and select **Add Integration**. | Select **Add Integration** under the **Integrations** section. |\n\n## Use notes and warning appropriately\n\nNotes and warnings have different functions. Notes should include general information that would be nice to know, whereas warnings contain information that may cause failure if not followed.\n\nIf information warrants being presented as a warning, you should include the warning exactly where the user would need to perform the related action. Users should not have to hunt for warnings.\n\n## Learn more\n\n*   [Marketplace Partners](https://auth0.com/docs/customize/integrations/marketplace-partners)\n*   [Redirect Actions for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/redirect-actions-for-partners)\n*   [Social Connections for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/social-connections-for-partners)\n*   [SSO Integrations for Partners](https://auth0.com/docs/customize/integrations/marketplace-partners/sso-integrations-for-partners)",
    "title": "Writing Tips for Installation Guides",
    "description": "Describes writing guidelines for Partners submitting integrations",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0",
    "markdown": "# Troubleshoot Login by Auth0 WordPress Plugin\n\nHere are some common troubleshooting questions. If the items below do not solve your issue, then consider the following alternatives:\n\n*   If you're setting up the plugin for the first time or having problems with users logging in, please read [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0).\n    \n*   If you found a bug in the plugin code, [submit an issue](https://github.com/auth0/wp-auth0/issues) or [create a pull request](https://github.com/auth0/wp-auth0/pulls) in GitHub.\n    \n*   If you have questions about how to use Auth0 or the plugin, please [post on our community site](https://community.auth0.com/) or [create a request in the plugin's WordPress support forum](https://wordpress.org/support/plugin/auth0).\n    \n*   To see additional documentation and find more answers, [visit our support site](https://support.auth0.com/). Customers on a paid Auth0 plan can [submit a trouble ticket](https://support.auth0.com/tickets) for a fast response.\n    \n\n## I'm seeing the error message \"Invalid state\" that prevents me from logging in\n\nState validation is a security feature added in [version 3.6.0](https://github.com/auth0/wp-auth0/releases/tag/3.6.0). A cached callback URL usually causes this error message (see your Application settings for the callback URLs that should not be cached). To learn more, read [Troubleshoot WordPress Plugin Invalid State Errors](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-wordpress-plugin-invalid-state-errors).\n\n## I'm having an issue logging in or changing email/password using a custom database\n\nTo learn about possible solutions, read [User Migration in Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0).\n\n## I'm seeing the error message \"Invalid ID token\" or \"Expired ID token\" that prevents me from logging in\n\nThis is typically caused by a server set to an incorrect time. If the error message includes \"used too early,\" then your server time is set in the future. If it says that the token is expired, then the server time is set too far in the past. A difference in time between two servers is common. Output `echo date(DateTime::ISO8601)` in PHP on your server and compare that, including seconds, to the current UTC time. If your server's time is more than 60 seconds (the default leeway) off from UTC time, then you’ll need to set a longer leeway to account for your server’s clock skew. You can paste the below code in your theme's `functions.php` or anywhere else that would run it after the plugin loads and before the login hook runs:\n\nThis would provide a 120 second leeway. You may need to adjust this depending upon how skewed your server's time is.\n\n## I see the error message \"This account does not have an email associated...\" that prevents me from logging in\n\nIf you get this error, make sure you are requesting an email from each provider in the Auth0 Dashboard under **Connections > Social** (expand each provider). Take into account that not all providers return email addresses for users (e.g., X). If this happens, you can always add an Email address to any logged in user through the Auth0 Dashboard (or API). See **Users > Edit**.\n\nFor Connections that don't provide an `email_verified` flag (some Enterprise connections will not include this) or to skip this validation for specific Social Connections, add the strategy for that Connection in the \"Skip Strategies\" field. This field is located below the **Require Verified Email** switch accessible via **wp-admin** > **Auth0** > **Settings** > **Advanced**.\n\n**This field should only be used if necessary because it circumvents the security precautions recommended by Auth0.**\n\n## I see the error message \"There is a user with the same email\" that prevents me from logging in\n\nThis means that there is a user in WordPress that has the same email as the one being used to login associated with a different Auth0 user. If you're in the process of testing the plugin or want to associate the existing user with the new Auth user instead:\n\n1.  Log in as an admin\n    \n2.  Go to **wp-admin > Users** and search for the email being used\n    \n3.  View the user's profile and scroll down to the bottom\n    \n4.  Click **Delete Auth0 Data** and confirm\n    \n\nIf you have 2 user accounts in Auth0 with the same email address, this error message will persist. We recommend that you [link user accounts](https://auth0.com/docs/manage-users/user-accounts/user-account-linking/link-user-accounts).\n\n## I see the error message \"Failed cross origin authentication\" or \"No verifier returned from client\" in my browser's console logs when trying to log in\n\nGo to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), select your WordPress application to view its settings, and check that the **Allowed Callback URLs** and **Allowed Origins (CORS)** match your WordPress site.\n\nIf you're using a Chromium-based browser, make sure you don't have third-party cookies turned off. To learn more, read [Cross-Origin Authentication](https://auth0.com/docs/authenticate/login/cross-origin-authentication).\n\nThis means that the plugin is already configured with a Domain, Client ID, and Client Secret. Running the Setup Wizard a second time can have unpredictable results. If you're setting up WordPress for the first time and want to start over before any logins have occurred:\n\n1.  Go to **wp-admin** > **Auth0** > **Settings** > **Basic**.\n    \n2.  Delete the Domain and Client ID. Scroll down and click **Save Changes**.\n    \n3.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications).\n    \n4.  Find the Application that was created by WordPress (its name should be the site name of your WordPress site).\n    \n5.  Select the Application to view its settings. Scroll down, and select **Delete Application**.\n    \n6.  Go to [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database).\n    \n7.  Find the Connection that was created by WordPress (its name should be the site name of your WordPress site prepended with \"DB-\").\n    \n8.  Select the Connection to view its settings. Scroll down, and select **I Want To Delete This Connection.** Please note that this will delete the Connection and all users that were created within it.\n    \n9.  Return to WordPress. You will now see the Setup Wizard option under Auth0 in the admin menu.\n    \n\n## How do I setup Passwordless login?\n\nPasswordless login is possible any Auth0-enabled website using email or SMS. To make this work on your WordPress site:\n\n1.  Turn on **Passwordless Login** from the plugin settings' **Features** view and save.\n    \n2.  Go to [Auth0 Dashboard > Authentication > Passwordless](https://manage.auth0.com/#/connections/passwordless).\n    \n\n*   To use email, turn on the **Email** connection and modify the settings if desired. This will turn on email code login (users are emailed a code which is then typed into the login form on your site).\n    \n*   To use a \"magic link\" (emailed link will automatically log users in), add `{passwordlessMethod: 'code'}` to the \"Extra Settings\" field in the plugin settings' **Advanced** tab.\n    \n*   To use SMS login, turn on the **SMS** connection and follow the steps to set up a Twilio developer account (this will require a paid Twilio account depending on usage).\n    \n\nThe Auth0 login form will select a Passwordless method depending on which connection is activated above. If you have both connections active, it will default to email. In this case, either turn off the email connection to show SMS or add `sms` to the **Connections** field in the plugin settings' **Advanced** tab.\n\n## I have two accounts for the same user in WordPress\n\nUnder some situations, you may end up with a user with two accounts. WordPress allows you to merge users by deleting one of the accounts and attributing that account's content to another user. Go to wp-admin > Users, select the account you want to remove, and in the confirmation dialog select another user to transfer the content.\n\n## My configuration is wrong, and I can't authenticate using Auth0. Is there another way to access the plugin?\n\nThe plugin can be accessed using valid WordPress credentials through the regular WordPress login by adding `?wle` to the login URL. For example: `http://yourdomain.com/wp-login.php?wle`.\n\n## I am having problems when a user logs in. Where can I find a log of what is happening?\n\nThe plugin provides an error log where you can check what has happened. Access it through the **Error Log** sub-item of the **Auth0** plugin menu. You can find additional information at [Auth0 Dashboard > Monitoring > Logs](https://manage.auth0.com/#/logs).\n\n## How can I show the widget or shortcode in signup mode by default?\n\nYou can use the widget `Extra configuration` setting (or the `extra_conf` attribute in the shortcode) and add this JSON `{\"mode\":\"signup\" }` that will force the plugin to be shown in this mode.\n\n## When using a plugin to force the login, the user is not logged in\n\nThis is typically caused by a cached page after login. Check with your host for strategies to mitigate this or try adding a cache-busting parameter to the URL. To learn more, [use this gist on GitHub](https://gist.github.com/joshcanhelp/e3eb693749f0fe66aad097c3bbb3b415).\n\n### The user is not logged in when using the \"Force Login\" plugin\n\nThis is because the callback URL has not been added to the AllowList. Try adding this code to the `my_forcelogin_whitelist` filter:\n\n## How can I redirect the users to a specific URL after login?\n\nAll redirects are checked using `wp_safe_redirect()` before being performed. If you're trying to redirect to a domain that is not your main domain, add that domain to the check using the core WordPress `allowed_redirect_hosts` filter. To learn more, read [apply\\_filters( 'allowed\\_redirect\\_hosts', string\\[\\] $hosts, string $host ) on wordpress.org](https://developer.wordpress.org/reference/hooks/allowed_redirect_hosts/).\n\n### On the login page\n\nThis plugin leverages WordPress features to work seamlessly with default settings. To add a redirect, you can append the `redirect_to` query parameter to the URL when you direct the user to the login page. The plugin will redirect the user to this URL after a successful login.\n\nYou can also use the **Login redirection URL** setting in the Auth0 plugin settings page. This will URL be used to redirect the user when the `redirect_to` parameter is not provided.\n\n### Using the widget\n\nThe widget will automatically redirect to the same page where the user was before authentication. You can override this using the `Redirect after login:` setting.\n\n### Using the shortcode\n\nThe shortcode will automatically redirect to the same page where the user was before authentication. You can override this using the `redirect_to` attribute.\n\n## How can I migrate my WordPress users to Auth0?\n\nThe current version of the plugin does not provide a way to migrate users to Auth0 automatically, but you have a few options:\n\n*   The plugin exposes two endpoints to mark your custom database connection for **import to Auth0** mode. To learn more about the endpoints, read [Configure Automatic Migration from Your Database](https://auth0.com/docs/connections/database/migrating). You can [use these plugin scripts](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_CustomDBLib.php) to set up your connection.\n    \n*   Export your user data to a JSON file and upload it for batch-import into Auth0. Initially, your users will have to reset their passwords when logging in using Auth0 because there is no way for Auth0 to decrypt the WordPress passwords during migration. To learn how to generate the JSON file, read [Bulk User Imports](https://auth0.com/docs/manage-users/user-migration/bulk-user-imports). Then you will need to upload the file using the Auth0 Management API's [Import Users endpoint](https://auth0.com/docs/api/v2#!/Jobs/post_users_imports).\n    \n*   [Use this script](https://gist.github.com/glena/b31716e3c8fe48927be2) and the WordPress XML RPC endpoint to set up the migration flow using a custom database connection. To learn more about setting up the migration flow, read [Configure Automatic Migration from Your Database](https://auth0.com/docs/connections/database/migrating). To learn more about the WordPress XML RPC endpoint, read [XML-RPC Support on wordpress.org](https://codex.wordpress.org/XML-RPC_Support).\n    \n\n## The form\\_title setting is ignored when I set up the dict setting\n\nInternally, the plugin uses the dict setting to change the Auth0 widget title. When you set up the dict field, it overrides the form\\_title one.\n\nTo change the form\\_title in this case, you need to add the following attribute to the dict JSON:\n\n## How can I modify the embedded Auth0 login form?\n\nThere are many options on the **Appearance** tab of the plugin settings page that can change the look and feel of the login form that is embedded on your site (`wp-login/php` page, shortcodes, or widgets). To learn more about these options, read [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0). This will not affect the the login form on the Auth0-hosted Universal Login Page.\n\nThere is also a field called \"Extra Settings\" on the **Advanced** tab that accepts a valid JSON object with all the settings you want to configure. This will override any changes made on the **Appearance** tab. To see all possible configuration options, read [Lock Configuration Options](https://auth0.com/docs/libraries/lock/lock-configuration).\n\nExternal style sheets and JS files should be loaded in your theme using the `wp_enqueue_scripts` hook for shortcodes/widgets and the `login_enqueue_scripts` hook for `wp-login.php`. To learn more, read [`do_action( 'wp_enqueue_scripts' )` on wordpress.org](https://developer.wordpress.org/reference/hooks/wp_enqueue_scripts/) and [`do_action( 'login_enqueue_scripts' )` on wordpress.org](https://developer.wordpress.org/reference/hooks/login_enqueue_scripts/).\n\n## The session expires too soon\n\nThe Auth0 plugin does not handle sessions; it uses the WordPress settings. By default, user sessions are kept alive for two days. You can enable the `Remember users session` setting on the plugin settings' **Advanced** tab to allow sessions to remain live for up to 14 hours.\n\n## How do I implement a Refresh Token?\n\nWe implemented additional parameters in the login methods used by the plugin to allow for Refresh Tokens. Use the `auth0_auth_scope` filter combined with the `auth0_user_login` action to accomplish this.\n\n## Profile data saved in WordPress is not being synced to the Auth0 user account.\n\nThis is a current limitation of the plugin but something we're looking at in a future release. The one exception to this is the user password. If the password is changed in WordPress and it passes the security policy set for the database connection being used, then that password will update for the Auth0 user as well. We'll be adding an error message in a future release to stop the process if the password is not strong enough.\n\nHistorically, Auth0 has maintained two WordPress plugins:\n\n*   [Login by Auth0](https://wordpress.org/plugins/auth0/)\n    \n*   [Social Login with Auth0](https://wordpress.org/plugins/social-login-with-auth0/)\n    \n\nThese two plugins are effectively the same, but **Social Login with Auth** will not receive any updates past version 3.7.0 (released 13 August 2018). Migrating from **Social Login with Auth** to **Login by Auth0** is simple and won't result in any Auth0 or WordPress data loss.\n\nMoving from **Social Login with Auth** to **Login by Auth0** will update the version number you see, so make sure to test this change out on a staging or development server first (just as you would if you were updating the plugin in wp-admin). Furthermore, logins may not work during the migration process, so be sure to use a maintenance mode plugin or complete the migration during off-peak hours.\n\nThe easiest way to migrate is via (S)FTP:\n\n1.  Log in to the WordPress site as an administrator.\n    \n2.  [Download Login by Auth0](https://downloads.wordpress.org/plugin/auth0.zip) and unzip it locally.\n    \n3.  Deactivate the **Social Login with Auth0** plugin from the WordPress admin > Plugins screen.\n    \n4.  Log in to the server you want to migrate to and navigate to `wp-content/plugins`.\n    \n5.  Move the `social-login-with-auth0` folder out of the plugins folder to back up the contents.\n    \n6.  Upload the new `auth0` plugin folder to the plugins directory.\n    \n7.  Activate the new \"Login by Auth0\" plugin from the WordPress **Admin** > **Plugins** screen.\n    \n\nIf you're unable to access the site via FTP, you can also run the process directly from the WordPress admin:\n\n1.  Log in to the WordPress site as an administrator.\n    \n2.  Go to **Auth0** > **Import-Export Settings**.\n    \n3.  Click **Export Settings**, then **Export**.\n    \n4.  Deactivate the **Social Login with Auth0** plugin from the WordPress **Admin** > **Plugins** screen.\n    \n5.  Delete the **Social Login with Auth0** plugin and confirm.\n    \n6.  Go to **Plugins** > **Add New** and search for \"Auth0\".\n    \n7.  For the **Login by Auth0** plugin (make sure to check the name), click **Install Now**.\n    \n8.  When this completes, click **Activate**.\n    \n9.  Check **Auth0** > **Settings** and make sure the previous settings remain. If not:\n    \n    1.  Go to **Auth0** > **Import-Export Settings**.\n        \n    2.  Paste in the settings JSON exported previously and click **Import**.\n        \n10.  Completely delete the settings file export JSON (it contains sensitive information).\n    \n\nEverything should now be working as expected with the new plugin and updates will resume as usual.\n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0)",
    "title": "Troubleshoot Login by Auth0 WordPress Plugin",
    "description": "This page explains common troubleshooting issues with the Login by Auth0 WordPress plugin",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0",
    "markdown": "# Install Login by Auth0\n\nThis plugin can be added to your WordPress site using the **Plugins** screen in the wp-admin:\n\n1.  Log in to an existing WordPress site as an administrator.\n    \n2.  Go to **Plugins > Add New** in the admin menu on the left.\n    \n3.  Search for \"Login by Auth0\"\n    \n4.  For the Login by Auth0 plugin, click **Install Now**, then **Activate**.\n    \n\nTo learn more about this process, read [WordPress.com and WordPress.org on wordpress.com](https://wordpress.com/support/com-vs-org/)[](https://wordpress.org/support/article/managing-plugins/#installing-plugins).\n\nAs soon as the plugin is activated, you are redirected to the start of the Setup Wizard.\n\nIf you don't already have an Auth0 account, [s**ign up for free to create one**](https://auth0.com/signup) before proceeding.\n\n## Multisite setup\n\nThe Login by Auth0 plugin is compatible with WordPress multisite networks. The plugin can be network activated to automatically protect network sites (once configuration is complete) or activated only on a sub-set of the network.\n\nThere are a few ways that a network of sites can be set up in Auth0:\n\n1.  **All sites can share both an Application and a database connection**\n    \n    1.  Run the Setup Wizard steps to completion for the main site.\n        \n    2.  Configure all other sites manually using the **Domain**, **Client ID**, and **Client Secret** from the main site in the Basic tab of the Auth0 settings page.\n        \n    3.  Update the Application's **Allowed Callback URLs**, **Allowed Web Origins**, and **Allowed Logout URLs** to include each site (wildcards can be used if your network uses subdomains).\n        \n2.  **Each site can have its own Application and share a database connection**\n    \n    1.  Run the Setup Wizard steps to completion for the main site.\n        \n    2.  Next, [manually create an Application for each site](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0) and add each one to the previously-created database connection.\n        \n    3.  Add the **Domain**, **Client ID**, and **Client Secret** values to the Basic tab of the Auth0 settings page for each site.\n        \n3.  **Each site can have its own Application and its own database connection.** In this case, Run the Setup Wizard steps to completion for each site.\n    \n\nEach of the options above has trade-offs. Option 1 has the least number of different entities to manage in Auth0 but, if your network has hundreds of sites and you're not using subdomains, you might run into limitations with the number of callback URLs. Option 2 will require managing many different Applications but will allow you to configure each site's Application differently.\n\nAs always, if you have any questions about this configuration process, [create a post in our Community and tag it \"wordpress\"](https://community.auth0.com/tags/wordpress).\n\n## Setup Wizard\n\nThe Setup Wizard will attempt to create all the necessary components needed to use Auth0 on your WordPress site. If you have an existing Application or Database Connection you want to use, please see the Manual Setup steps below.\n\n### Option 1: Standard Setup\n\nThis will create and configure an Application and a Database Connection for this site.\n\nFirst, [generate a Management API token](https://auth0.com/docs/api/management/v2/get-access-tokens-for-test#get-access-tokens-manually). Once the token is generated, make a note of the domain name used in the **Identifier** field under the **Settings** tab. For example, if your Identifier is `https://tenant-name.auth0.com/api/v2/`, then the tenant domain is `tenant-name.auth0.com`. To learn more about tenant domains, read [Create Tenants](https://auth0.com/docs/get-started/auth0-overview/create-tenants).\n\nBack in the WordPress admin's Setup Wizard, click **Standard**. In the modal that appears, click **Start Standard Setup**.\n\nEnter the tenant domain and API token from above. This token is only used for the setup process and will not be saved in the database.\n\nIf the first part of the setup successfully completes, you'll see the \"Configure your social connections\" screen. Click **Next** to continue the setup process by migrating your administrator account.\n\nThis step connects your WordPress user with an Auth0 user that authorizes you to log in. You can choose the same password as your admin account or a different one, but make sure it conforms to the password strength policies[](https://auth0.com/docs/connections/database/password-strength#password-policies) for the database Connection being used. To learn more, read [Password Strength in Auth0 Database Connections: Password Policies](https://auth0.com/docs/connections/database/password-strength#password-policies).\n\nThe Setup Wizard must run to completion for your site to be configured correctly. If the Wizard fails for any reason before the \"setup successful\" screen, check the plugin error log at **wp-admin > Auth0 > Error Log** and the steps below to determine the issue.\n\nTo start the process over completely, delete any Applications or Database Connections that were created in the Auth0 Dashboard. In WordPress, go to **Auth0 > Settings > Basic**, delete the Domain, Client ID, and Client Secret fields, and click **Save**. Now, click **Setup Wizard** in the admin menu to start the process over again.\n\nIf you're still not able to install, [post a thread in our Community](https://community.auth0.com/tags/wordpress) with the error messages you're seeing in the Error Log, and we'll be happy to help!\n\n### Option 2: User Migration Setup\n\nThis will create and configure an Application and a database connection plus data migration from your WordPress database. This requires an inbound connection from Auth0 servers and cannot be changed later without losing data. To learn more, read [User Migration in Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0).\n\n::: warning If you have more than one custom database connection in Auth0, you'll need to make sure that the user IDs are namespaced to avoid conflicts. This is done automatically for sites installing version 3.11.0 or later. If your connections are/were being created with an earlier version, read the troubleshooting steps in [User Migration in Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0). :::\n\nOnce the configuration process is complete, log out of your WordPress site and attempt to log back in using your existing WordPress credentials in the Auth0 login form. This should create an Auth0 user linked to your WordPress account.\n\n### Option 3: Manual Setup\n\nThis will skip the automatic setup and allow you to create and configure your own Application and database connection (see below). This should be used if you want this site to use an existing Application or database connection.\n\n### Option 4: Import Setup\n\nThe site can also be set up by importing settings from another site. This is useful if you're migrating between environments or have a similar WordPress site that is already configured.\n\n## Setup complete\n\nWhen you see the \"Done\" screen, Auth0 is enabled and ready to accept logins and, if configured, signups.\n\nThis is a good time to confirm that the basics are working for your site before changing any of the default settings:\n\n1.  Log out of WordPress and confirm that the Auth0 form now appears at `/wp-login.php`.\n    \n2.  Log in with the Auth0 user created above.\n    \n3.  Log out and try creating an account with a different email address (if you have \"Anyone can register\" turned on in your General WordPress settings).\n    \n4.  Try logging in using a social connection (if you've turned those on).\n    \n\nNow you're ready to [configure the application](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0).\n\n## Manual setup\n\nThe plugin can be configured using the built-in Setup Wizard (covered below) or manually by creating an Application and assigning connections. The completely manual setup process can be used if you're having trouble with the wizard, have been through the setup process before, or want to share a database connection between Applications.\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#), and select **Create**.\n    \n2.  Give your application a descriptive name, select **Regular Web Applications**, then select **Create**.\n    \n3.  Configure the application for your WordPress installation. To learn how to configure the application, read [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0) and follow all sections through \"Update Auth0 settings in WordPress\".\n    \n\nOnce the steps above are complete, your site will be configured and ready to use.\n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Troubleshoot Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0)\n*   [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0)",
    "title": "Install Login by Auth0",
    "description": "Explains how to install the Auth0 WordPress plugin",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/organizations/patch-enabled-connections-by-connection-id",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0",
    "markdown": "# Configure Login by Auth0\n\nLogin by Auth0 can be configured using the Setup Wizard in the plugin or manually for more control over the process. To learn more, read [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0). The instructions below can also be used if the Setup Wizard did not complete or as part of troubleshooting login issues.\n\n## Auth0 configuration\n\nYour Auth0 tenant must be configured to accept login requests from your WordPress site and source user identities from at least one Connection, whether that's an Auth0 database, a social connection, or a business directory. To learn more about tenants, read [Create Tenants](https://auth0.com/docs/get-started/auth0-overview/create-tenants). To learn more about connections, read [Identity Providers](https://auth0.com/docs/authenticate/identity-providers).\n\n### Application setup\n\n1.  Create an Application for your WordPress site:\n    \n\n*   **If you're troubleshooting the Setup Wizard**, navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and look for an Application that is similar to your WordPress site name. If you don't find one, it means that an Application was not created by the Wizard. Restart the Setup Wizard in WordPress or follow the step just below to create an Application manually.\n    \n*   **If you're configuring manually**, navigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select **Create**. Enter a name for the Application, select **Regular Web Applications**, and select **Create**.\n    \n\n1.  Select the **Settings** view for the Application. You will see your Domain, Client ID, and Client Secret, which are used in **wp-admin > Auth0 > Settings** to connect to Auth0.\n    \n2.  **Application Type** must be set to **Regular Web Application** and **Token Endpoint Authentication Method** must be set to **Post**\n    \n3.  Scroll down to **Allowed Callback URLs** and provide the WordPress site URL with `?auth0=1` appended:\n    \n\n1.  Enter your WordPress site's **WordPress Address (URL)** (where the WordPress site appears publicly) and, if different, the **Site Address (URL)** (where wp-admin is served from) in the **Allowed Web Origins** field. Both of these values are found on your WordPress site's general settings screen.\n    \n2.  Enter your WordPress site's login URL in the **Allowed Logout URLs** field\n    \n3.  Leave the **Allowed Origins (CORS)** field blank (it will use the **Allowed Callback URLs** values from above)\n    \n\n1.  Scroll down and select **Show Advanced Settings**, then select the **OAuth** view and make sure **JsonWebToken Signature Algorithm** is set to RS256. If this needs to be changed later, it should be changed here as well as in wp-admin (see Settings > Basic below).\n    \n2.  Turn on **OIDC Conformant**.\n    \n3.  Click the **Grant Types** tab and select at least **Authorization Code** and **Client Credentials**.\n    \n4.  Click **Save Changes**.\n    \n\nIn order for your WordPress site to perform certain actions on behalf of your Auth0 tenant, you'll need to authorize the Application created above to access the Management API. This is not required but will enable retrieving complete user data on login (including `user_metadata` and `app_metadata`), email and password changes for users, and email verification re-sending when verified emails are required.\n\n1.  Make sure your Application allows the Client Credentials grant (step 10 in the section above).\n    \n2.  Navigate to [Auth0 Dashboard > Applications > APIs](https://manage.auth0.com/#/apis).\n    \n3.  Select **Auth0 Management API**, then the **Machine to Machine Applications** view.\n    \n4.  Look for the WordPress Application and select **Unauthorized** to grant access.\n    \n5.  In the panel that appears, select only the `read:users` and `update:users` scopes, then select **Update** (you can search using the **Filter scopes** field).\n    \n\n### Database Connection setup\n\nDatabase Connections enable username and password login with user records stored at Auth0. This type of Connection is not required and can be skipped if you're using passwordless, social, or enterprise logins only.\n\n1.  If you used the wizard during setup, navigate to [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database) and look for a Connection that has a similar name to the Application setup above. Otherwise, you can create a new Connection, use an existing Connection, or use the default **Username-Password-Authentication**. Select an existing Connection name to view settings or select **Create DB Connection** and follow the steps.\n    \n2.  Select the **Applications** view and activate the Application created above.\n    \n\nTo learn how to activate and configure this login method, read [Social Identity Providers](https://auth0.com/docs/authenticate/identity-providers/social-identity-providers).\n\n### Enterprise Connection setup\n\nTo learn how to activate and configure this login method, read [Enterprise Identity Providers](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers).\n\n## WordPress configuration\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and select the Application created above.\n    \n2.  In a new tab/window, log in to wp-admin for your WordPress site and go to **wp-admin > Auth0 > Settings**.\n    \n3.  Copy **Domain**, **Client ID**, and **Client Secret** from your Auth0 Application page to your WordPress settings using the **Copy to Clipboard** buttons next to each field.\n    \n4.  Scroll down and select **Save Changes**.\n    \n\n## PHP constant setting storage\n\nPlugin settings can be saved to the database (default) or they can be set using a specifically named PHP constant. This will allow for sensitive data like the client secret, API token, and migration token to be stored more securely (assuming that file they are defined in is stored securely; to learn more, read [Hardening WordPress on wordpress.org](https://wordpress.org/support/article/hardening-wordpress/)).\n\nThe constant **must** be defined before the plugin is loaded or it will not be used. This should happen in your `wp-config.php` file or in a must-use plugin. To learn more, read [Must Use Plugins on wordpress.org](https://wordpress.org/support/article/must-use-plugins/). If the constant is defined in your theme's `functions.php` or in a plugin that loads after Auth0, the value will be ignored.\n\nThe PHP constants are defined like so:\n\nThe default constant name should be `AUTH0_ENV_` followed by the option name to override in all caps (the prefix can be modified with the `auth0_settings_constant_prefix` filter; to learn more, read [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0)). All plugin options can be overridden and their keys can be found in the `WP_Auth0_Options::defaults()` method. To see which options are available, [view WordPress Auth0 Lock Options in our GitHub repository](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_Lock.php).\n\n**Note:** The `migration_token` value is generated by the plugin when user migration is turned on. If there is already a value in the admin, make sure to set the constant to the same value. If that value needs to change, it also must be changed in the custom scripts for the database Connection being used in the Auth0 dashboard.\n\nThe settings field will change its display based on this new value and show the constant being used for reference. This value will be used everywhere in the plugin automatically.\n\n**Important:** Saving the settings page after setting a constant value will validate the constant-set values (but not change them) and delete them from the options array being saved to the database. If you are just testing this functionality, do not save settings in the WordPress admin page until you're ready to delete that value.\n\nAll sites in a WordPress multi-site network will use the same constant value making this an easy way to setup a network using a single Application and database Connection.\n\n## Plugin settings\n\n### Basic\n\n*   **Domain:** The Domain copied from the Application settings in your dashboard. Option name is `domain`.\n    \n*   **Custom Domain:** The Custom Domain for your tenant, if one is configured. To learn more, read [Custom Domains](https://auth0.com/docs/customize/custom-domains). Option name is `custom_domain`.\n    \n*   **Client ID:** The Client ID copied from the Application settings in your dashboard. Option name is `client_id`.\n    \n*   **Client Secret:** The Client Secret copied from the Application settings in your dashboard. Option name is `client_secret`.\n    \n*   **JWT Signature Algorithm** The algorithm used for signing tokens from the Advanced Application Settings, OAuth tab; default is RS256. Option name is `client_signing_algorithm`.\n    \n*   **JWKS Cache Time (in minutes):** How long the JWKS information should be stored when using the RS256 JWT Signature Algorithm. Option name is `cache_expiration`.\n    \n*   **Original Login Form on wp-login.php:** Provides ways to access or block the core WordPress login page. Option name is `wordpress_login_enabled`. Login page code option name is `wle_code`.\n    \n    *   **Never** will not allow the core WordPress login form to display.\n        \n    *   **Via a link under the Auth0 form** will display a link to the WordPress core login form directly below the Auth0 embedded one on `wp-login.php`. The login page can also be accessed directly by adding `?wle` to the login URL.\n        \n    *   **When \"wle\" query parameter is present** will allow the login page to be accessed directly by adding `?wle` to the login URL. This will bypass the Universal Login Page redirect.\n        \n    *   **When \"wle\" query parameter contains specific code** will allow the login page to be accessed directly by adding `?wle=` plus a code to the login URL. The code is generated automatically and will be shown below the controls for this setting. This will bypass the Universal Login Page redirect.\n        \n*   **Allow Signups:** User signup will be available only if the WordPress Anyone can register option is enabled. You can find this setting under **Settings > General > Membership**.\n    \n\n### Features\n\n*   **Universal Login Page:** Redirects the `wp-login.php` page to the Universal Login Page for Single Sign-on (SSO) authentication using all active Connections for this Application. Option name is `auto_login`.\n    \n*   **Auto Login Method:** A single, active connection to use for authentication when **Universal Login Page** is turned on. Leave this blank to show all active Connections on the Universal Login Page. Option name is `auto_login_method`.\n    \n*   **Auth0 Logout:** Enable this option to log out of Auth0 when logging out of WordPress. Option name is `singlelogout`.\n    \n*   **Override WordPress Avatars:** Forces WordPress to use Auth0 avatars. Option name is `override_wp_avatars`.\n    \n\n### Embedded\n\nOptions here do not affect the Universal Login Page (To learn about customization options, read [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login)).\n\n*   **Passwordless Login:** Enable this option to turn on Passwordless login on all embedded Auth0 login forms. Passwordless connections are managed in the Auth0 dashboard and at least one must be active and enabled on this Application for this to work. Option name is `passwordless_enabled`.\n    \n*   **Icon URL:** Sets the icon above the embedded Auth0 login form. Option name is `icon_url`.\n    \n*   **Form Title:** Sets the title of the embedded Auth0 login form. Option name is `form_title`.\n    \n*   **Enable Gravatar Integration:** When user enters their email, their associated Gravatar picture is displayed in the embedded Auth0 login form. Option name is `gravatar`.\n    \n*   **Login Name Style:** Selecting **Email** will require users to enter their email address to login. Set this to **Username** if you do not want to force a username to be a valid email address. Option name is `username_style`. Option name is `client_secret_b64_encoded`.\n    \n*   **Primary Color:** To learn more about this setting, read [Lock Configuration Options](https://auth0.com/docs/libraries/lock/lock-configuration). Option name is `primary_color`.\n    \n*   **Extra Settings:** A valid JSON object that includes options to call Lock with. This overrides all other options set above. For a list of available options, see the Lock: User configurable options (e.g.: `{\"disableResetAction\": true }`). Option name is `extra_conf`.\n    \n*   **Use Custom Lock JS URL:** When turned off, WordPress will use the latest tested version of Lock (Auth0 embedded login form) automatically. When turned on, administrators can provide a custom Lock URL to use. Option name is `custom_cdn_url`.\n    \n*   **Custom Lock JS URL:** A valid URL pointing to a version of Lock. This field will be automatically hidden when **Use Custom Lock JS URL** is turned off. Option name is `cdn_url`.\n    \n*   **Connections to Show:** List here each of the identity providers you want to allow users to login with. If left blank, all enabled providers will be allowed. (To learn more, read [Lock UI Customization](https://auth0.com/docs/libraries/lock/lock-ui-customization).) Option name is `lock_connections`.\n    \n\n### Advanced\n\n*   **Require Verified Email:** If set, requires the user to have a verified email to log in. This can prevent some Connections from working properly if they do not provide an email address or an `email_verified` flag in the user profile data. Option name is `requires_verified_email`.\n    \n*   **Skip Strategies:** If Require Verified Email is turned on, this setting will display. This field accepts strategy names to skip the verified email requirement on login and account association. This should **only** be used for strategies that do not provide an `email_verified` flag.\n    \n*   **Remember User Session:** By default, user sessions live for two days. Enable this setting to keep user sessions live for 14 days. Option name is `remember_users_session`.\n    \n    *   This setting must be less than or equal to your tenant's [Inactivity Timeout](https://auth0.com/docs/manage-users/sessions/session-lifetime-limits)docs/manage-users/sessions/session-lifetime-limits setting to ensure that the user's session is properly maintained.\n        \n*   **Login Redirection URL:** If set, redirects users to the specified URL after login. This does not affect logging in via the `[auth0]` shortcode. Option name is `default_login_redirection`. To change the redirect for the shortcode, add a `redirect_to` attribute, like so:\n    \n    `[auth0 redirect_to=\"http://yourdomain.com/redirect-here\"]`\n    \n*   **Force HTTPS Callback:** Enable this option if your site allows HTTPS but does enforce it. This will force Auth0 callbacks to HTTPS in the case where your home URL is not set to HTTPS. Option name is `force_https_callback`.\n    \n*   **Auto Provisioning:** Should new users from Auth0 be stored in the WordPress database if new registrations are not allowed? This will create WordPress users that do no exist when they log in via Auth0 (for example, if a user is created in the Auth0 dashboard). Option name is `auto_provisioning`.\n    \n*   **User Migration:** Enabling this option will expose the Auth0 migration web services. However, the Connection will need to be manually configured in the [Auth0 Dashboard](https://manage.auth0.com/#). To learn more about the migration process, read [User Migration in Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0). The **Generate New Migration Token** button can be used to replace the saved token with a new one. Make sure to have your database Connection configuration page open to the **Custom Database** tab so you can replace the existing token with the new one in both scripts. Option name is `migration_ws`. Migration token option name is `migration_token`.\n    \n*   **Migration IPs AllowList:** Only requests from listed IPs will be allowed access to the migration webservice. Option name is `migration_ips_filter`.\n    \n*   **Valid Proxy IP:** List the IP address of your proxy or load balancer to enable IP checks for logins and migration web services. Option name is `valid_proxy_ip`.\n    \n*   **Auth0 Server Domain:** The Auth0 domain, it is used by the setup wizard to fetch your account information. Option name is `auth0_server_domain`.\n    \n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Troubleshoot Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-login-by-auth0)\n*   [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0)",
    "title": "Configure Login by Auth0",
    "description": "How to configure WordPress as an application with Auth0",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-search/v2/query-syntax",
    "markdown": "# User Search Query Syntax v2\n\nThis page explains query string syntax, the mini-language used by the Query String Query.\n\nWhen searching using Auth0's [List or Search Users](https://auth0.com/docs/api/v2/#!/Users/get_users) endpoint, you can construct custom queries using this syntax for the value of the `q` field.\n\nThe query string is parsed into a series of terms and operators. A term can be a single word  (`john` or `smith`) or a phrase surrounded by double quotes (`\"john smith\"`) which will match all the words in the phrase in the same order.\n\n## Searchable fields\n\nYou can search for users using the following fields:\n\n*   All the [normalized user profile](https://auth0.com/docs/manage-users/user-accounts/user-profiles/normalized-user-profile-schema) fields\n    \n*   **Only** the profile information under the `user_metadata` object:\n    \n    *   `name`\n        \n    *   `nickname`\n        \n    *   `given_name`\n        \n    *   `family_name`\n        \n\nTo learn more, read [Understand How Metadata Works in User Profiles](https://auth0.com/docs/manage-users/user-accounts/metadata).\n\n### Field name examples\n\nSome examples of query string syntax are:\n\n*   Where the `created_at` field contains `2016`: `created_at:2016`\n    \n*   Where the `user_name` field contains `john` or `smith`. If you omit the OR operator the default operator will be used.\n    \n    `user_name: (john OR smith)` `user_name: (john smith)`\n    \n*   Where the `user_name` field contains the exact phrase `\"john smith\"`: `user_name: \"john smith\"`\n    \n*   Where the field `nickname` has no value or is missing: `NOT _exists_: nickname`\n    \n*   Where the field `nickname` has any non-null value: `_exists_: nickname`\n    \n*   Your query can search across more than one field by using the `AND` & `OR` condition. Where the username field is exactly `\"john\"` AND the field `nickname` has any non-null value: `username: \"john\" AND _exists_: nickname`\n    \n\n## Wildcards\n\nWildcard searches can be run on individual terms, using `?` to replace a single character, and `*` to replace zero or more characters: `2016-0?-*`\n\nNote that certain wildcard queries will require an enormous amount of memory and perform poorly. (For example, imagine how many terms need to be queried to match the query string `\"a* b* c*\"`.)\n\n## Regular expressions\n\nRegular expression patterns can be embedded in the query string by wrapping them in forward-slashes (\"/\"): `name:/joh?n(ath[oa]n)/`\n\nA detailed explanation of the supported regular expression syntax is explained on the Elastic's site at [Regular Expression Syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax).\n\n## Fuzziness\n\nYou can search for terms that are similar to, but not exactly like, your search terms using the `~` as a \"fuzzy\" operator: `oauth~`\n\nThis is useful for commonly misspelled fields.\n\n## Proximity searches\n\nWhile a phrase query (eg `\"john smith\"`) matches all of the terms in the exact same order, a proximity query allows the specified words to be further apart or in a different order. In the same way that a fuzzy query can specify a maximum edit distance between characters in a word, a proximity search allows you to specify a maximum distance between words in a phrase: `\"fox quick\"~5`\n\nThe closer the text in a field is to the original order specified in the query string, the more relevant that result is ranked. When compared to the above example query, the phrase `\"quick fox\"` would be considered more relevant than `\"quick brown fox\"`.\n\n## Ranges\n\nInclusive ranges are specified with square brackets: `[min TO max]` and exclusive ranges with curly brackets: `{min TO max}`. Curly and square brackets can be combined in the same range expression: `logins_count:[100 TO 200}`.\n\nRanges can be specified for date, numeric or string fields.\n\nSome examples of range queries are:\n\n*   Last login date of 2015:\n    \n    `last_login:[2015-01-01 TO 2015-12-31]`\n    \n*   Users who have logged in between 1-5 times:\n    \n    `logins_count:[1 TO 5]`\n    \n*   Last login between two dates, excluding the first and last day:\n    \n    `last_login:{2012-01-01 TO 2012-12-31}`\n    \n*   Users that have logged on over 10 times:\n    \n    `logins_count:[10 TO *]`\n    \n*   Logins before 2015:\n    \n    `last_login{* TO 2015-01-01}`\n    \n\nCurly and square brackets can be combined in the same range expression:\n\n*   Logins count > 100 and < 200:\n    \n    `logins_count:[100 TO 200}`\n    \n\nFor ranges with one side unbounded, you can use the following syntax:\n\n`logins_count:>10` `logins_count:>=10` `logins_count:<10` `logins_count:<=10`\n\nTo combine an upper and lower bound with the simplified syntax, you need to join two clauses with an `AND` operator:\n\n`logins_count:(>=10 AND <20)` `logins_count:(+>=10 +<20)`\n\nThe parsing of ranges in query strings can be complex and error prone. It is more reliable to use an explicit [range query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html).\n\n## Boosting\n\nUse the boost operator ^ to make one term more relevant than another. For instance, if you want to find all documents about foxes, but are especially interested in quick foxes:\n\n`quick^2 fox`\n\nThe default boost value is 1, but it can be any positive floating-point number. Boost values between 0 and 1 reduce relevance of the matching result.\n\nBoosts can also be applied to phrases or groups:\n\n`\"john smith\"^2 (foo bar)^4`\n\n## Boolean operators\n\nBy default, all terms are optional as long as one term matches. A search for `foo bar baz` will find any document that contains one or more of `foo` or `bar` or `baz`.\n\nUse of the `default_operator`, which allows you to force all terms to be required, is discussed above. However, there are Boolean operators that can be used in the query string itself for more control.\n\nThe preferred operators are `+` (this term must be present) and `-` (this term must not be present). All other terms are optional. For example, this query:\n\n`quick brown +fox -news`\n\nstates that:\n\n*   `fox` must be present\n    \n*   `news` must not be present\n    \n*   `quick` and `brown` are optional but their presence will increase the relevance of the result.\n    \n\nThe familiar operators `AND`,`OR` and `NOT`(also written `&&`,`||` and `!`) are also supported. However, the effects of these operators can be more complicated than is obvious at first. `NOT` takes precedence over `AND`, which takes precedence over `OR`. While the `+` and `-` only affect the term to the right of the operator, `AND` and `OR` can affect both the terms to the left and to the right.\n\n## Grouping\n\nMultiple terms or clauses can be grouped together with parentheses to form sub-queries:\n\n`(quick OR brown) AND fox`\n\nGroups can be used to target a particular field, or to boost the result of a sub-query:\n\n`status:(active OR pending) title:(full text search)^2`\n\n## Reserved characters\n\nIf you need to use any of the characters which function as operators in the query itself as literal text (not as operators), then you must escape them with a leading backslash. For instance, to search for \"(1+1)=2\", you would need to write your query as `\\(1\\+1\\)\\=2`.\n\nThe reserved characters are: `+ - = && || > < ! ( ) { } [ ] ^ \" ~ * ? : \\ /`\n\nFailing to escape these special characters correctly could lead to a syntax error which will prevent your query from executing correctly.\n\n## Empty query\n\nIf the query string is empty or contains only whitespaces, the query will yield an empty result set.\n\n## Additional Information\n\nFor example queries for searching users, see [Users Search](https://auth0.com/docs/manage-users/user-search/v2).\n\nThe preceding information is adapted from Elastic's [Elasticsearch Reference](http://elastic.co/).\n\n## Learn more\n\n*   [User Search Query Syntax](https://auth0.com/docs/manage-users/user-search/user-search-query-syntax)",
    "title": "User Search Query Syntax v2",
    "description": "Learn how to use search query string syntax to construct custom queries when searching using Auth0's Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/users/get-users",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/add-permissions-to-roles",
    "markdown": "# Add Permissions to Roles\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"permissions\": [ { \"resource_server_identifier\": \"API_IDENTIFIER\", \"permission_name\": \"PERMISSION_NAME\" }, { \"resource_server_identifier\": \"API_IDENTIFIER\", \"permission_name\": \"PERMISSION_NAME\" } ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"\n\n\tpayload := strings.NewReader(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    permissions: [\n      {\n        resource_server_identifier: 'API_IDENTIFIER',\n        permission_name: 'PERMISSION_NAME'\n      },\n      {\n        resource_server_identifier: 'API_IDENTIFIER',\n        permission_name: 'PERMISSION_NAME'\n      }\n    ]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"permissions\": @[ @{ @\"resource_server_identifier\": @\"API_IDENTIFIER\", @\"permission_name\": @\"PERMISSION_NAME\" }, @{ @\"resource_server_identifier\": @\"API_IDENTIFIER\", @\"permission_name\": @\"PERMISSION_NAME\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/roles/ROLE_ID/permissions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"permissions\": [\n    [\n      \"resource_server_identifier\": \"API_IDENTIFIER\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ],\n    [\n      \"resource_server_identifier\": \"API_IDENTIFIER\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Add Permissions to Roles",
    "description": "Learn how to add permissions to roles using the Auth0 Dashboard or the Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users",
    "markdown": "# Remove Roles from Users\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"roles\": [ \"ROLE_ID\", \"ROLE_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/roles\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/roles\"\n\n\tpayload := strings.NewReader(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/roles',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {roles: ['ROLE_ID', 'ROLE_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"roles\": @[ @\"ROLE_ID\", @\"ROLE_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/users/USER_ID/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"roles\": [\"ROLE_ID\", \"ROLE_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Remove Roles from Users",
    "description": "Learn how to remove roles assigned to a user using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles",
    "markdown": "# Manage Role-Based Access Control Roles\n\nFor role-based access control (RBAC) to work properly, you must enable it for your API using either the Dashboard or the Management API. The Authorization Core functionality is different from the Authorization Extension. For a comparison, read [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension).\n\nWe provide various functions to help you manage your roles, which you can access through either the Auth0 Dashboard or the Auth0 Management API:\n\n*   [Create roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles)\n    \n*   [Edit role definitions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/edit-role-definitions)\n    \n*   [Add permissions to roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/add-permissions-to-roles)\n    \n*   [Remove permissions from roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/remove-permissions-from-roles)\n    \n*   [View role permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-role-permissions)\n    \n*   [View role users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-users-assigned-to-roles)\n    \n*   [Delete roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/delete-roles)\n    \n\n## Learn more\n\n*   [Assign Roles to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users)\n*   [Register APIs](https://auth0.com/docs/get-started/auth0-overview/set-up-apis)\n*   [Add API Permissions](https://auth0.com/docs/get-started/apis/add-api-permissions)\n*   [Troubleshoot Role-Based Access Control and Authorization](https://auth0.com/docs/troubleshoot/authentication-issues/troubleshoot-rbac-authorization)",
    "title": "Manage Role-Based Access Control Roles",
    "description": "Learn how to manage roles using the Auth0 Management Dashboard. For use with Auth0's API Authorization Core feature set.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/login/logout/back-channel-logout/oidc-back-channel-logout-initiators",
    "markdown": "# OIDC Back-Channel Logout Initiators\n\nOIDC Back-Channel Logout Initiators allow you to remotely log out users from their applications based on session termination events. OIDC Back-Channel Logout Initiators work across protocols—for example, an identity provider\\-initiated (IdP-initiated) SAML logout request—and are unaffected by third-party cookie restrictions.\n\nThis feature is an extension to the standard OIDC back-channel specification. You can configure it to initiate an OIDC Back-Channel Logout request for specific session termination events, such as a password change or session expiration, or for all session termination events.\n\nAdministrators can enable this feature for specific applications with the Auth0 Management API.\n\n## How OIDC Back-Channel Logout Initiators work\n\nInitiators bind an OIDC Back-Channel Logout response to a session termination event. They capture the event and use it to trigger an OIDC logout token in all applications associated with the given session.\n\nThe following diagram illustrates how an OIDC Back-Channel Logout Initiator works for a password change event:\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/2GwtCTwecxYONxL1DbewxO/b504426017276605735ab59dc3242794/OIDC_Back-Channel_Logout_Initiators_Diagram.png)\n\n## Configure OIDC Back-Channel Logout Initiators\n\nYou can configure OIDC Back-Channel Logout Initiators with the Auth0 Management API.\n\n### Management API\n\nYou can configure the OIDC Back-Channel Logout Initiators for an application with the Management API by using the [Update a Client](https://auth0.com/docs/api/management/v2/clients/patch-clients-by-id) endpoint.\n\n1.  Get an [Management API access token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens) with the `update:clients` scope.\n    \n2.  Call the [Update a Client](https://auth0.com/docs/api/management/v2/clients/patch-clients-by-id) endpoint with the appropriate configuration data in the payload. For example, to log out an application after a password change event, provide the following:\n    \n    to configure this snippet with your account\n    \n    ```\n    PATCH /api/v2/clients/{yourClientId}\n    {\n      ...\n      \"oidc_logout\": {\n        \"backchannel_logout_urls\": [\"https://example.com/cb\"]\n        \"backchannel_logout_initiators\": {\n          \"mode\":\"custom\",\n          \"selected_initiators\": [\"rp-logout\", \"idp-logout\", \"password-changed\"]\n        }\n      }\n      ...\n    }\n    ```\n    \n\n#### Properties\n\nThe `backchannel_logout_initiators` object supports the following properties:\n\n| **Property** | **Type** | **Required?** | **Description** | **Supported values** |\n| --- | --- | --- | --- | --- |\n| `mode` | string | Required | Configuration method for enabling initiators. | `custom`, `all` |\n| `selected_initiators` | array | Required if `mode` is `custom` | List of initiators to enable. | `rp-logout`, `idp-logout`, `password-changed`, `session-expired`, `session-revoked`, `account-deleted`, `email-identifier-changed` |\n\n##### mode property\n\nThe `mode` property determines the configuration method for enabling initiators.\n\nBy default, it is set to `custom`, which allows you to specify which initiators you want to enable. If you want your application to logout anytime the IdP session ends, set it to `all`.\n\nThe `mode` property supports the following values:\n\n| **Value** | **Description** |\n| --- | --- |\n| `custom` | Enables only the initiators listed in the `selected_initiators` array. |\n| `all` | Automatically enables all current and future initiators. |\n\n##### selected\\_initiators property\n\nThe `selected_initiators` property contains the list of initiators to be enabled for the given application.\n\nThe `selected_initiators` property supports the following values:\n\n| **Value** | **Description** |\n| --- | --- |\n| `rp-logout` | Request was initiated by a relying party (RP). |\n| `idp-logout` | Request was initiated by an external identity provider (IdP). |\n| `password-changed` | Request was initiated by a password change. |\n| `session-expired` | Request was initiated by session expiration. |\n| `session-revoked` | Request was initiated by session deletion. |\n| `account-deleted` | Request was initiated by an account deletion. |\n| `email-identifier-changed` | Request was initiated by an email identifier change. |\n\n#### Examples\n\n##### Subscribe an application to all current and future initiators\n\nto configure this snippet with your account\n\n```\nPATCH /api/v2/clients/{yourClientId}\n\n{\n  ...\n  \"oidc_logout\": {\n    \"backchannel_logout_urls\": [\"https://example.com/cb\"]\n    \"backchannel_logout_initiators\": {\n      \"mode\":\"all\"\n    }\n  }\n  ...\n}\n```\n\n##### Subscribe an application to password-changed initiator only (rp-logout and idp-logout are required)\n\nto configure this snippet with your account\n\n```\nPATCH /api/v2/clients/{yourClientId}\n\n{\n  ...\n  \"oidc_logout\": {\n    \"backchannel_logout_urls\": [\"https://example.com/cb\"]\n    \"backchannel_logout_initiators\": {\n      \"mode\":\"custom\",\n      \"selected_initiators\": [\"rp-logout\", \"idp-logout\", \"password-changed\"]\n    }\n  }\n  ...\n}\n```\n\n##### Unsubscribe all initiators (rp-logout remains the default)\n\nto configure this snippet with your account\n\n```\nPATCH /api/v2/clients/{yourClientId}\n\n{\n  ...\n  \"oidc_logout\": {\n\t  \"backchannel_logout_urls\": [\"https://example.com/cb\"]\n  }\n  ...\n}\n```\n\n### Dashboard\n\nOpenID Connect Back-Channel Logout can be configured alongside the rest of your application settings. This feature automatically activates once a Back-Channel Logout URI is provided.\n\n![](https://images.ctfassets.net/cdy7uua7fh8z/vgN0wudP38zgRZNL59Mhy/99349b00a02fee72fe48e62935485f0c/OIDC_Back-Channel_Logout_Initiators_-_Dashboard.png)\n\n#### Selected initiators only\n\nOnly the required initiators (`rp-logout` and `idp-logout`) will be subscribed to by default. Any additional initiators, including any added in the future, must first be selected before they can initiate a logout from your application.\n\nSelect this option if you want your application to log out only for initiators you select.\n\n#### All supported initiators\n\nAll supported initiators, including any added in the future, will be subscribed to by default.\n\nSelect this option if you want your application to log out any time the IdP session ends.",
    "title": "OIDC Back-Channel Logout Initiators",
    "description": "Learn how OIDC Back-Channel Logout Initiators work and how to configure them for your application(s).",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users",
    "markdown": "# Manage Role-Based Access Control Users\n\n##### Manage Role-Based Access Control Users\n\nManage Users\n\n*   [User Accounts](https://auth0.com/docs/manage-users/user-accounts \"User Accounts\")\n*   [User Migration](https://auth0.com/docs/manage-users/user-migration \"User Migration\")\n*   [User Search](https://auth0.com/docs/manage-users/user-search \"User Search\")\n*   [Organizations](https://auth0.com/docs/manage-users/organizations \"Organizations\")\n\nManage Access\n\n*   [Access Control](https://auth0.com/docs/manage-users/access-control \"Access Control\")\n*   [Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/rbac \"Role-Based Access Control\")\n*   [Authorization Policies](https://auth0.com/docs/manage-users/access-control/authorization-policies \"Authorization Policies\")\n*   [Rules for Authorization Policies](https://auth0.com/docs/manage-users/access-control/rules-for-authorization-policies \"Rules for Authorization Policies\")\n*   [Sample Use Cases: Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/sample-use-cases-role-based-access-control \"Sample Use Cases: Role-Based Access Control\")\n*   [Sample Use Cases: Actions with Authorization](https://auth0.com/docs/manage-users/access-control/sample-use-cases-actions-with-authorization \"Sample Use Cases: Actions with Authorization\")\n*   [Sample Use Cases: Rules with Authorization](https://auth0.com/docs/manage-users/access-control/sample-use-cases-rules-with-authorization \"Sample Use Cases: Rules with Authorization\")\n*   [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension \"Authorization Core vs. Authorization Extension\")\n*   [Configure Core RBAC](https://auth0.com/docs/manage-users/access-control/configure-core-rbac \"Configure Core RBAC\")\n*   [Manage Role-Based Access Control Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles \"Manage Role-Based Access Control Roles\")\n*   [Manage Role-Based Access Control Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users \"Manage Role-Based Access Control Users\")\n*   [View Roles Assigned to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-roles \"View Roles Assigned to Users\")\n*   [View User Permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-permissions \"View User Permissions\")\n*   [Remove Roles from Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users \"Remove Roles from Users\")\n*   [Remove Permissions from Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-permissions-from-users \"Remove Permissions from Users\")\n*   [Assign Roles to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users \"Assign Roles to Users\")\n*   [Assign Permissions to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-permissions-to-users \"Assign Permissions to Users\")\n*   [Manage Role-Based Access Control Permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions \"Manage Role-Based Access Control Permissions\")\n*   [Enable Role-Based Access Control for APIs](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/enable-role-based-access-control-for-apis \"Enable Role-Based Access Control for APIs\")\n*   [Sessions](https://auth0.com/docs/manage-users/sessions \"Sessions\")\n*   [Cookies](https://auth0.com/docs/manage-users/cookies \"Cookies\")\n\nWas this article helpful?",
    "title": "Manage Role-Based Access Control Users",
    "description": "Learn how to manage users in a role-based access control (RBAC) system using the Auth0 Management Dashboard. For use with Auth0's API Authorization Core feature set.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions",
    "markdown": "# Manage Role-Based Access Control Permissions\n\n##### Manage Role-Based Access Control Permissions\n\n[Contact sales](https://auth0.com/get-started?place=header&type=button&text=talk%20to%20sales) Log in\n\n[\n\n###### Manage Users\n\n](https://auth0.com/docs/manage-users)\n\nManage Users\n\n*   [User Accounts](https://auth0.com/docs/manage-users/user-accounts \"User Accounts\")\n*   [User Migration](https://auth0.com/docs/manage-users/user-migration \"User Migration\")\n*   [User Search](https://auth0.com/docs/manage-users/user-search \"User Search\")\n*   [Organizations](https://auth0.com/docs/manage-users/organizations \"Organizations\")\n\nManage Access\n\n*   [Access Control](https://auth0.com/docs/manage-users/access-control \"Access Control\")\n*   [Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/rbac \"Role-Based Access Control\")\n*   [Authorization Policies](https://auth0.com/docs/manage-users/access-control/authorization-policies \"Authorization Policies\")\n*   [Rules for Authorization Policies](https://auth0.com/docs/manage-users/access-control/rules-for-authorization-policies \"Rules for Authorization Policies\")\n*   [Sample Use Cases: Role-Based Access Control](https://auth0.com/docs/manage-users/access-control/sample-use-cases-role-based-access-control \"Sample Use Cases: Role-Based Access Control\")\n*   [Sample Use Cases: Actions with Authorization](https://auth0.com/docs/manage-users/access-control/sample-use-cases-actions-with-authorization \"Sample Use Cases: Actions with Authorization\")\n*   [Sample Use Cases: Rules with Authorization](https://auth0.com/docs/manage-users/access-control/sample-use-cases-rules-with-authorization \"Sample Use Cases: Rules with Authorization\")\n*   [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension \"Authorization Core vs. Authorization Extension\")\n*   [Configure Core RBAC](https://auth0.com/docs/manage-users/access-control/configure-core-rbac \"Configure Core RBAC\")\n*   [Manage Role-Based Access Control Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles \"Manage Role-Based Access Control Roles\")\n*   [Manage Role-Based Access Control Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users \"Manage Role-Based Access Control Users\")\n*   [Manage Role-Based Access Control Permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/manage-permissions \"Manage Role-Based Access Control Permissions\")\n*   [Enable Role-Based Access Control for APIs](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/enable-role-based-access-control-for-apis \"Enable Role-Based Access Control for APIs\")\n*   [Sessions](https://auth0.com/docs/manage-users/sessions \"Sessions\")\n*   [Cookies](https://auth0.com/docs/manage-users/cookies \"Cookies\")\n\nThis guide will show you how to manage permissions in a [role-based access control (RBAC)](https://auth0.com/docs/authorization/concepts/rbac) system. These permissions are used with the API Authorization Core feature set.\n\nWe provide various functions to help you manage your permissions, which you can access through either the Auth0 Dashboard or the Auth0 Management API:\n\n*   [Add API permissions](https://auth0.com/docs/get-started/apis/add-api-permissions)\n    \n*   [Delete API permissions](https://auth0.com/docs/get-started/apis/delete-api-permissions)\n    \n*   [Add permissions to roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/add-permissions-to-roles)\n    \n*   [Assign permissions to users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-permissions-to-users)\n    \n*   [View role permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-role-permissions)\n    \n*   [View user permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-permissions)\n    \n*   [Remove role permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/remove-permissions-from-roles)\n    \n*   [Remove user permissions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-permissions-from-users)\n    \n\n## Learn more\n\n*   [Manage Role-Based Access Control Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users)\n*   [Manage Role-Based Access Control Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles)\n\nWas this article helpful?",
    "title": "Manage Role-Based Access Control Permissions",
    "description": "Learn how to manage permissions in a role-based access control (RBAC) system using the Auth0 Management Dashboard. For use with Auth0's API Authorization Core feature set.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/enable-role-based-access-control-for-apis",
    "markdown": "# Enable Role-Based Access Control for APIs\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/resource-servers/API_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"enforce_policies\": \"true\", \"token_dialect\": \"TOKEN_DIALECT\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/resource-servers/API_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/resource-servers/API_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/resource-servers/API_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/resource-servers/API_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {enforce_policies: 'true', token_dialect: 'TOKEN_DIALECT'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"enforce_policies\": @\"true\",\n                              @\"token_dialect\": @\"TOKEN_DIALECT\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/resource-servers/API_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/resource-servers/API_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/resource-servers/API_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/resource-servers/API_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"enforce_policies\\\": \\\"true\\\", \\\"token_dialect\\\": \\\"TOKEN_DIALECT\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"enforce_policies\": \"true\",\n  \"token_dialect\": \"TOKEN_DIALECT\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/resource-servers/API_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Enable Role-Based Access Control for APIs",
    "description": "Learn how to enable role-based access control (RBAC) for an API using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/authenticate/login/logout/back-channel-logout/configure-back-channel-logout",
    "markdown": "# Configure OIDC Back-Channel Logout\n\n## Availability\n\nOIDC Back-Channel Logout is available for all Enterprise plan customers. You should check the OIDC standard `/.well-known/*` metadata endpoint to determine if your application meets the requirements.\n\n```\nGET https://acme.eu.auth0.com/.well-known/openid-configuration\n\nHTTP 200\n{ ..., \"backchannel_logout_supported\": true, \n  \"backchannel_logout_session_supported\": true }\n```\n\n## Back-Channel Logout restrictions\n\nBack-Channel Logout URLs are called on publicly-exposed endpoints and must adhere to certain restrictions:\n\n1.  You must use the HTTPS protocols. Unencrypted HTTP or other protocols are not permitted.\n    \n2.  You must not use Auth0 subdomains. Some Auth0 subdomains are:\n    \n    *   auth0.com\n        \n    *   auth0app.com\n        \n    *   webtask.io\n        \n    *   webtask.run\n        \n3.  We do not recommend using IP addresses without domains. IP addresses must be public IPs to use Back-Channel Logout. IP addresses from internal, reserved, or loopback ranges are not permitted.\n    \n\n## Configure Auth0\n\nRegister your application to receive Logout Tokens via Auth0 Dashboard or Management API.\n\n#### Subscribe applications\n\n1.  Navigate to [**Auth0 Dashboard > Applications**](https://manage.auth0.com/#/applications).\n    \n2.  Choose the application you want to register.\n    \n3.  Select the **Settings** tab.\n    \n4.  Under the **OpenID Connect Back-Channel Logout > Back-Channel Logout URI**, add the application logout URI that will receive the logout\\_tokens\n    \n5.  Once complete, select **Save Changes**.\n    \n    ![Auth0 Dashboard > Applications > Settings](https://images.ctfassets.net/cdy7uua7fh8z/19uQRkVswdmaO8gHTVTXCc/012f80894579d766a4263612018f9c39/back-channel-logout-dashboard.png)\n\n#### Unsubscribe applications\n\nUnsubscribing your application stops the service from tracking new logins and sending logout events. The service discards pending logout events once your application is unsubscribed.\n\nTo unsubscribe your application, delete the back-channel logout URL.\n\n1.  Navigate to [Auth0 Dashboard > Applications](http://manage.auth0.com/#/applications).\n    \n2.  Choose the application you want to register.\n    \n3.  Select the **Settings** tab.\n    \n4.  Under the **OpenID Connect Back-Channel Logout > Back-Channel Logout URI**\n    \n5.  Remove the back-channel URL.\n    \n6.  Once complete, select **Save Changes**.\n    \n    ![Auth0 Dashboard > Applications > Settings](https://images.ctfassets.net/cdy7uua7fh8z/5SlrBhwrNbJx0Wdw2kQ19t/48c4d897090e424dc1b5da5c91674876/back-channel-logout-dashboard.png)\n\nFor auditing purposes, the service always logs subscribing or unsubscribing back-channel logout URLs as `API Operation Event` in Auth0 tenant logs. To learn more, read [Logs](https://auth0.com/docs/deploy-monitor/logs).\n\n![Auth0 Dashboard > Monitoring > Logs](https://images.ctfassets.net/cdy7uua7fh8z/66sFzlAX2427dKMquiL9cQ/fd7a69aa960e37b90a876ff879b73a0e/2023-05-30_17-44-21.png)\n\n## Configure your application\n\nOnce you have configured Back-Channel Logout via the Auth0 Dashboard or Management API, configure your application to use the service based on the technology or framework.\n\n1.  Implement end-user authentication according to your application type. \n    \n    1.  End-users should be able to log in to the application, and a session should be created. \n        \n    2.  An ID token should be issued from Auth0 and should be accessible in the application backend for further processing.\n        \n2.  Extend the login process to save the `sid` and, optionally, sub claims after the ID token is validated. \n    \n    1.  These claims must be saved against the current application session. \n        \n    2.  The session management functions should be able to retrieve a specific session by the `sid` value.\n        \n3.  Configure the Back-Channel Logout endpoint:\n    \n    1.  The endpoint must process only `HTTP POST` requests.\n        \n    2.  Extract the `logout_token` parameter and validate it as a regular JWT according to the spec.\n        \n    3.  Verify that the token contains an events claim with a JSON object value and a member named `http://schemas.openid.net/event/backchannel-logout`.\n        \n    4.  Verify that the token contains the `sid` and/or `sub` claims.\n        \n    5.  Verify that the token does NOT contain the `nonce` claim. This is required to prevent abuse by distinguishing the Logout Token from the ID token.\n        \n    6.  Once the token is validated, retrieve the session corresponding to the received `sid` and/or `sub` value and terminate it. The exact application session termination process depends on the implementation details. For example, this event may need to be communicated to the front-end.\n        \n\n## OIDC Back-Channel Logout request example\n\nCoded token payload:\n\n```\nPOST /backchannel-logout HTTP/1.1\nHost: rp.example.org\nContent-Type: application/x-www-form-urlencoded\n\nlogout_token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImdwY3ZFT0FPREE2T3pXRmw3ODVxbCJ9.eyJpc3MiOiJodHRwczovL2FydGV4LWRldi5ldS5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjAyZTkzZGI4M2ZhNmYwMDc0OWEyM2U2IiwiYXVkIjoiVHVoTkx2N3VsWEQzUmZ5TGxTTWJPdnN6endKSkZQcE8iLCJpYXQiOjE2OTgxNjA5MjgsImV4cCI6MTY5ODE2MTA0OCwianRpIjoiNDRhOTEyMTUtZGZiNC00ZGZlLWExZWItZmNhZmE5MTFkZWJhIiwiZXZlbnRzIjp7Imh0dHA6Ly9zY2hlbWFzLm9wZW5pZC5uZXQvZXZlbnQvYmFja2NoYW5uZWwtbG9nb3V0Ijp7fX0sInRyYWNlX2lkIjoiODFiMzM2YTk0YTRhNTcwNyIsInNpZCI6IjM3NVVJcF9JRDVtQ1RDbEllQkVIcFhmR3dxNTF0Rl9MIn0.aEoAL_U-EPlf3f7Fup-bu7Yv0S0GOnrkL8Njd6j6UNqZcr5VrWWFf3CWvkRi7Cm6wMgU2qIMhb7643ca8-ajR7zHlMu0Z3r-gfd2D1xudKLyUSC3v2D5WJZz5I8xMZ_LWtIN2W3l4SQFO9MgK_7F3x0WIWXo9KPC9tgOaOLPnsiv__MutM1ZakoCsJPddl5gVM4TYtHOue6WM7SOXZNa3SSiv57YQOX2KNCL7sWmZp_J1OXKy8lsgkNFqiOVwu39p4sgjKYEXQU0G-I0yY_aeNbnlnxFG6OuxaDt_zwg6AvKglLSNGqrrvzy4GsYJi5HMGZ1GsSs7rQLg7Iuu6JM-A\n```\n\nDecoded token payload:\n\n```\n{\n  \"iss\": \"https://artex-dev.eu.auth0.com/\",\n  \"sub\": \"auth0|602e93db83fa6f00749a23e6\",\n  \"aud\": \"TuhNLv7ulXD3RfyLlSMbOvszzwJJFPpO\",\n  \"iat\": 1698160928,\n  \"exp\": 1698161048,\n  \"jti\": \"44a91215-dfb4-4dfe-a1eb-fcafa911deba\",\n  \"events\": {\n    \"http://schemas.openid.net/event/backchannel-logout\": {}\n  },\n  \"trace_id\": \"81b336a94a4a5707\",\n  \"sid\": \"375UIp_ID5mCTClIeBEHpXfGwq51tF_L\"\n}\n```\n\n## Expected responses\n\n*   **HTTP 200**:  Confirms user logout from the specific application.\n    \n*   **HTTP 400**: Indicates an incorrect request. The request is not understood or the token failed validation. Auth0 records the problem in tenant logs but does not attempt further requests for this specific session.\n    \n\n## Troubleshoot issues\n\n### Application did not receive the logout events\n\nIf your application did not receive a logout request after a logout event.\n\n1.  Make sure your application has a Back-Channel Logout URL registered in Auth0 Dashboard.\n    \n2.  Ensure the Back-Channel Logout URL is reachable from the Auth0 tenant.\n    \n3.  Ensure a valid session is established. The end-user must log in to your specific application via Auth0.\n    \n4.  Check Auth0 tenant logs for messages about unsuccessful logout message delivery.\n    \n    ![Auth0 Dashboard > Monitoring > Logs](https://images.ctfassets.net/cdy7uua7fh8z/3INGdmv1w9H4yiERpsHPsz/9472b517200e4ac8e612be9916e08632/2023-10-02_10-48-29.png)\n5.  Make sure the logout is triggered via the standard logout endpoint. Other events do not trigger the logout events.\n    \n6.  If possible, check for blocked requests on the web server and/or application firewall logs.\n    \n\n#### I can't find OIDC Back-Channel Logout tenant logs\n\nThis feature will be gradually released to all tenants starting 3 October 2023. You may still receive [tenant log event codes](https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes) `sslo` for `oidc_backchannel_logout_succeeded` or `fslo` for `oidc_backchannel_logout_failed`.\n\n### Client app cannot verify the received Logout Token\n\nIf the transaction still fails with a 400 error:\n\n1.  Check if the token is a standard base64-encoded JWT. Some web servers may truncate long parameters. To learn more, read [Signing Algorithms](https://auth0.com/docs/get-started/applications/signing-algorithms).\n    \n2.  If possible, capture a token and verify that it’s a JWT. Use a verified source, like [JWT.IO](http://jwt.io/).\n    \n3.  Make sure the verification function fetches the tenant signing key dynamically via [JSON Web Key Sets](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets) (JWKS).\n    \n\n### Response Timeout Errors\n\nAuth0 will wait five seconds for the application OIDC Back-Channel Logout URL to respond. After this time, it will record a \"Failed OIDC Back-Channel Logout request\" in the tenant logs with an empty response description.\n\n## Learn more\n\n*   [Check Login and Logout Issues](https://auth0.com/docs/troubleshoot/authentication-issues/check-login-and-logout-issues)\n*   [Log Users Out of Auth0 with OIDC Endpoint](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-auth0)\n*   [Log Users Out of Applications](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-applications)\n*   [Log Users Out of Identity Providers](https://auth0.com/docs/authenticate/login/logout/log-users-out-of-idps)",
    "title": "Configure OIDC Back-Channel Logout",
    "description": "Describes how to configure OIDC back-channel logout with your Auth0 services.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/bot-detection/configure-captcha",
    "markdown": "# Configure Third-Party CAPTCHA Provider Integrations\n\nAuth0 supports several third-party CAPTCHA provider integrations for [Bot Detection](https://auth0.com/docs/secure/attack-protection/bot-detection).\n\n## Google reCAPTCHA Enterprise on Google Cloud Platform (GCP)\n\nYou can use Google reCAPTCHA Enterprise as a Bot Detection service for traffic exceeding 1 million assessments per month.\n\nTo learn how to configure reCAPTCHA Enterprise on GCP, read [Set up reCAPTCHA Enterprise ... on Google Documentation](https://cloud.google.com/recaptcha-enterprise/docs/authenticate-apis).\n\n### Locate your GCP project ID\n\n1.  Go to your [Google Cloud Dashboard](https://console.cloud.google.com/).\n    \n2.  Select your project in the drop-down menu to see the corresponding **Project ID**.\n    \n3.  Make a note of the **Project ID** as you will need it later.\n    \n\n### Enable reCAPTCHA Enterprise\n\n1.  In the [Google Cloud Dashboard](https://console.cloud.google.com/), enter reCAPTCHA Enterprise API in the search bar, and then select it from the Marketplace results.\n    \n2.  Select **Enable** to enable the API.\n    \n\n### Create a site key\n\n1.  In the [Google Cloud Dashboard](https://console.cloud.google.com/), enter reCAPTCHA Enterprise in the search bar, and then select it from the Marketplace results.\n    \n2.  Select **Create Key**.\n    \n3.  Under **Domain List**, add your Auth0 tenant domain.\n    \n4.  Enable the toggle for **Disable domain verification**.\n    \n5.  Enable the toggle for **Use checkbox challenge** to enable Google's \"I am not a robot\" verification checkbox.\n    \n6.  Under **Challenge Security**, select a difficulty level for the challenge.\n    \n7.  Select **Create Key**.\n    \n8.  Make a note of the **Site Key** as you will need it later.\n    \n\n### Create an API key\n\n1.  In the [Google Cloud Dashboard](https://console.cloud.google.com/), enter Credentials in the search bar, and then select it from the results.\n    \n2.  Select **Create Credentials > API Key**. Make a note of the **API Key** as you will need it later.\n    \n3.  In the pop-up, select **Edit Key**.\n    \n4.  Under **Application Restrictions**, select **IP addresses (web servers, cron jobs, etc.)**, and then enter the [Auth0 IP Addresses for Allow Lists](https://auth0.com/docs/secure/security-guidance/data-security/allowlist).\n    \n5.  Under **API Restrictions**, select **Restrict Key**, select **reCAPTCHA Enterprise API** from the drop-down list, and click OK.\n    \n6.  Select **Save**.\n    \n\n## hCaptcha\n\nThe hCaptcha widget can protect your applications from bots, spam, and other forms of automated abuse.\n\nTo learn more about hCaptcha and how to get configuration details, read [Switch from reCAPTCHA to hCaptcha on hCaptcha Docs](https://docs.hcaptcha.com/switch).\n\n## Friendly Captcha\n\nFriendly Captcha is a system for preventing spam on your website. You can add the Friendly Captcha widget to your web app to fight spam, with little impact to the user experience.\n\nTo learn more about Friendly Captcha and how to get configuration details, read [Installation on Friendly Captcha Docs](https://docs.friendlycaptcha.com/#/installation?id=installation).\n\n## Arkose\n\nArkose Labs provides a bot detection solution for mitigating human-based and bot-driven attacks. For more information on seamlessly integrating with Arkose as your CAPTCHA provider, see [Arkose Bot Manager](https://www.arkoselabs.com/arkose-bot-manager/).\n\n### Configure callback action with Auth0.js\n\nWhen using Arkose as the CAPTCHA provider, the Auth0.js WebAuth client’s `renderCaptcha` method allows you to pass a callback function. The second parameter of the callback will be a payload object containing the `triggerCaptcha` function. The `triggerCaptcha` function can be used to configure how your application handles and renders the CAPTCHA prompt.\n\nTo learn more about configuring the `renderCaptcha` method, read [renderCaptcha](https://auth0.github.io/auth0.js/WebAuth.html#renderCaptcha) in the Auth0.js documentation.",
    "title": "Configure Third-Party CAPTCHA Provider Integrations",
    "description": "Learn how to configure third-party CAPTCHA provider integrations with Auth0 Bot Detection. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-native-apps",
    "markdown": "# Add Bot Detection to Native Applications\n\nYou can add [Bot Detection](https://auth0.com/docs/secure/attack-protection/bot-detection) to your native applications with little to no additional configuration depending on the SDK and authentication flow you are using.\n\n## Auth0.swift and Auth0.Android\n\nIf you’re using Universal Login, Bot Detection is supported automatically by the following SDK versions:\n\n*   `Auth0.swift` version 1.28.0+\n    \n*   `Auth0.Android` version 1.25.0+\n    \n\nIf you’re not using Universal Login, Bot Detection is supported, but you need to configure your application accordingly:\n\n*   Your application must handle the `requires_verification` exception (which is thrown when a high-risk login attempt is detected) and then trigger a WebAuth flow to render a CAPTCHA verification step.\n    \n*   When you trigger the WebAuth flow, you may pass the `login_hint` parameter to prevent the user from needing to type in their username again.\n    \n\n### Auth0.swift example\n\nIf your application performs database login/signup through the [Authentication API](https://auth0.com/docs/api/authentication), you must handle the `isVerificationRequired` error. This error indicates that the request was flagged as suspicious and an additional verification step is necessary to authenticate the user.\n\n```\nAuth0\n    .authentication()\n    .login(usernameOrEmail: email, \n           password: password, \n           realmOrConnection: connection, \n           scope: scope)\n    .start { result in\n        switch result {\n        case .success(let credentials): // ...\n        case .failure(let error) where error.isVerificationRequired:\n            DispatchQueue.main.async {\n                Auth0\n                    .webAuth()\n                    .connection(connection)\n                    .scope(scope)\n                    .useEphemeralSession()\n                    // ☝🏼 Otherwise a session cookie will remain\n                    .parameters([\"login_hint\": email])\n                    // ☝🏼 So the user doesn't have to type it again\n                    .start { result in\n                        // ...\n                    }\n            }\n        case .failure(let error): // ...\n        }\n    }\n```\n\nIn the case of signup, you can add [an additional parameter](https://auth0.com/docs/authenticate/login/auth0-universal-login) to make the user land directly on the signup page:\n\n`.parameters([\"login_hint\": email, \"screen_hint\": \"signup\"])`\n\nRead [Auth0.swift Getting Started](https://github.com/auth0/Auth0.swift#getting-started) for details on how to set up Universal Login.\n\n### Auth0.Android example\n\nIf your application performs database login/signup through the Authentication API, you must handle the `AuthenticationException#isVerificationRequired()` error. This error indicates that the request was flagged as suspicious and an additional verification step is necessary to log the user in.\n\n```\nfinal String email = \"username@domain.com\";\nfinal String password = \"a secret password\";\nfinal String realm = \"my-database-connection\";\n\nAuthenticationAPIClient authentication = new AuthenticationAPIClient(account);\nauthentication.login(email, password, realm)\n        .start(new BaseCallback<Credentials, AuthenticationException>() {\n\n            @Override\n            public void onFailure(AuthenticationException error) {\n                if (error.isVerificationRequired()){\n                    Map<String, Object> params = new HashMap<>();\n                    params.put(\"login_hint\", email); // So the user doesn't have to type it again\n                    WebAuthProvider.login(account)\n                            .withConnection(realm)\n                            .withParameters(params)\n                            .start(LoginActivity.this, new AuthCallback() {\n                                // You might already have an AuthCallback instance defined\n\n                                @Override\n                                public void onFailure(@NonNull Dialog dialog) {\n                                    // Error dialog available\n                                }\n\n                                @Override\n                                public void onFailure(AuthenticationException exception) {\n                                    // Error\n                                }\n\n                                @Override\n                                public void onSuccess(@NonNull Credentials credentials) {\n                                    // Handle WebAuth success\n                                }\n                            });\n                }\n            }\n\n            @Override\n            public void onSuccess(Credentials payload) {\n                // Handle API success\n            }\n        });\n```\n\nIn the case of signup, you can add [an additional parameter](https://auth0.com/docs/authenticate/login/auth0-universal-login) to make the user land directly on the signup page:\n\n`params.put(\"screen_hint\", \"signup\");`\n\nRead [Auth0.Android Authentication with Universal Login SDK documentation](https://github.com/auth0/Auth0.Android#authentication-with-universal-login) for details on how to set up Universal Login.\n\n## Lock.Swift and Lock.Android\n\nIf you’re using Universal Login, Bot Detection is supported automatically by the following SDK versions:\n\n*   `Lock.Swift` version 2.19.0+\n    \n*   `Lock.Android` version 2.22.0+\n    \n\nIf you’re not using Universal Login, Bot Detection is supported, but you need to configure your application accordingly:\n\n*   Your application must handle the `requires_verification` exception (which is thrown when a high-risk login attempt is detected) and then trigger a WebAuth flow to render a CAPTCHA verification step.\n    \n*   When you trigger the WebAuth flow, you may pass the `login_hint` parameter to prevent the user from needing to type in their username again.\n    \n\n## Authentication API\n\nIf you’re using the Authentication API directly, Bot Detection is supported, but you need to configure your application accordingly:\n\n*   Your application must handle the `requires_verification` error (which is returned by the Authentication API when a high-risk login attempt is detected) and then trigger a WebAuth flow to render a CAPTCHA verification step.\n    \n\n## Learn more\n\n*   [Add Bot Detection to Custom Login Pages](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages)",
    "title": "Add Bot Detection to Native Applications",
    "description": "Learn how to add bot protection and detection to your native application that use Auth0.Swift, Auth0.Android, Lock.Swift, and Lock.Android. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages",
    "markdown": "# Add Bot Detection to Custom Login Pages\n\nIf you build a custom login page using the auth0.js library, you can enable Bot Detection to render a CAPTCHA step in scenarios when a request is determined to be high risk by Auth0.\n\nYour custom login form code must handle scenarios where the user is asked to pass a CAPTCHA step. If you don't account for this scenario, your application may cause an error.\n\n## Use custom login page template\n\nAuth0 provides a template for you to use with code to handle high-risk logins.\n\n1.  Go to [Dashboard > Branding > Universal Login](https://manage.auth0.com/#/login_settings) and select **Classic**.\n    \n2.  Click the **Login** tab and enable the **Customize Login Page** switch if it is not already enabled.\n    \n3.  Locate the **Default Templates** drop-down menu and select **Custom Login Form**.\n    \n    ![Dashboard Branding Universal Login Classic Login Tab Custom Login Form](https://images.ctfassets.net/cdy7uua7fh8z/4m3WA0sKMoR0C1KVnVmZ1G/2af0bf233072109bd882a16a6267c7bd/dashboard-branding-universal-login-classic-login-custom-login-form.png)\n4.  Copy the template to use for your custom login page. Use the steps below to customize the form.\n    \n5.  Customize the login form (see below), and replace you new form in the **Login** tab.\n    \n6.  Click **Preview** to see your new form.\n    \n7.  Click **Save Changes**.\n    \n\n## Customize the login form\n\nIf you'd like to support Bot Detection, you must use version `9.24` or higher of the auth0.js library.\n\n`<script src=\"https://cdn.auth0.com/js/auth0/9.24/auth0.min.js\"></script>`\n\n1.  Add an element to render the CAPTCHA below your password input and above your sign-up and login buttons. For example: `<div class=\"captcha-container\"></div>`\n    \n2.  Initialize the CAPTCHA component after the WebAuth constructor.\n    \n    ```\n    var webAuth = new auth0.WebAuth(params);\n    var captcha = webAuth.renderCaptcha(\n      document.querySelector('.captcha-container')\n    );\n    ```\n    \n3.  Append the value of the CAPTCHA with `captcha: captcha.getValue()` to the `login` and `signup` calls as follows:\n    \n    ```\n    webAuth.login({\n      realm: connection,\n      username: username,\n      password: password,\n      captcha: captcha.getValue()\n    }, function(err) {\n      displayError(err);\n      //....\n    });\n    \n    webAuth.redirect.signupAndLogin({\n      connection: databaseConnection,\n      email: email,\n      password: password,\n      captcha: captcha.getValue()\n    }, function(err) {\n      displayError(err);\n      //....\n    });\n    ```\n    \n    To learn more about the `login cb` parameter, read [auth0.js login documentation](https://auth0.github.io/auth0.js/global.html#login).\n    \n4.  Reload the CAPTCHA in your generic error handling logic.\n    \n    ```\n    function displayError(err) {\n      captcha.reload();\n      var errorMessage = document.getElementById('error-message');\n      errorMessage.innerHTML = err.description;\n      errorMessage.style.display = 'block';\n    }\n    ```\n    \n\nThe `render` method supports an optional parameter that allows you to change the default templates. You can find the default values here: [https://github.com/auth0/auth0.js/blob/master/src/web-auth/captcha.js#L11](https://github.com/auth0/auth0.js/blob/master/src/web-auth/captcha.js#L11).\n\n### Support passwordless flows\n\nIf you'd like to support Bot Detection for passwordless flows, you must use version `9.24` or higher of the auth0.js library.\n\n`<script src=\"https://cdn.auth0.com/js/auth0/9.20/auth0.min.js\"></script>`\n\n1.  Add an element to render the CAPTCHA above the submit button. If you also support a username/password login, a separate element should be created for the passwordless CAPTCHA. For example: `<div class=\"passwordless-captcha-container\"></div>`\n    \n2.  Initialize the CAPTCHA component for passwordless flows after the WebAuth constructor.\n    \n    ```\n    var passwordlessCaptcha = webAuth.renderPasswordlessCaptcha(\n      document.querySelector('.passwordless-captcha-container')\n    );\n    ```\n    \n3.  Add the captcha property to the Passwordless call, and reload the CAPTCHA component upon errors.\n    \n    ```\n    webAuth.passwordlessStart({\n      connection: 'email',\n      send: 'code',\n      email: 'foo@bar.com',\n      captcha: passwordlessCaptcha.getValue()\n    }, function (err,res) {\n      if (err) {\n        passwordlessCaptcha.reload();\n        // handle errors\n      }\n      // continue\n    });\n    ```\n    \n\n## Learn more\n\n*   [Add Bot Detection to Native Applications](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-native-apps)",
    "title": "Add Bot Detection to Custom Login Pages",
    "description": "Learn how to enable and configure bot detection when using custom login pages built with the auth0.js library. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-passwordless-flows",
    "markdown": "# Add Bot Detection to Passwordless Flows\n\nIf you use passwordless login and signup flows, you can enable Bot Detection to render a CAPTCHA step in scenarios when a request is determined to be high-risk by Auth0. \n\n## Configure Bot Detection for passwordless flows\n\nYou can use the Auth0 Dashboard to configure the behavior of the CAPTCHA feature.\n\n1.  In the [Auth0 Dashboard](https://manage.auth0.com/dashboard), go to [Security > Attack Protection > Bot Detection](https://manage.auth0.com/dashboard/#/security/attack-protection/bot-detection).\n    \n2.  Locate the **Response** section.\n    \n3.  For the **Enforce CAPTCHA for passwordless flows** setting, select when to require CAPTCHA:\n    \n    *   **Never**: Users are not required to complete a CAPTCHA to log in.\n        \n    *   **When Risky**: Users are required to complete a CAPTCHA if the login is high risk.\n        \n    *   **Always**: Users are always required to complete a CAPTCHA to log in.\n        \n\n![](https://images.ctfassets.net/cdy7uua7fh8z/6usFho8JQOhBL7qUptvzpa/f3aafa7f19baffc4c8fc5779063dbfe5/Bot_Detection_for_Passwordless.png)\n\n## Configure Bot Detection for custom login pages\n\nIf you are using custom login pages and would like to configure Bot Detection, please read [Add Bot Detection to Custom Login Pages](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages).\n\n## Learn more\n\n*   [Add Bot Detection to Custom Login Pages](https://auth0.com/docs/secure/attack-protection/bot-detection/bot-detection-custom-login-pages)",
    "title": "Add Bot Detection to Passwordless Flows",
    "description": "Learn how to enable and configure bot detection for passwordless flows in Auth0.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/attack-protection/patch-suspicious-ip-throttling",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent",
    "markdown": "# GDPR: Conditions for Consent\n\nAccording to Article 7 of GDPR, you must ask users to consent on the processing of their personal data in a clear and easily accessible form. You must also show that the user has consented, and provide an easy way to withdraw consent at any time.\n\nThis article explains how you can use Auth0 features to implement these requirements.\n\n## Ask for consent\n\nUpon signup you have to ask your users for consent. With Auth0, you can save this information with the user metadata. There are several available options depending on how you use Auth0 to authenticate your users. Before you design your solution using metadata make sure you are aware of the restrictions. Auth0 limits the total size of the `user_metadata` to **16 MB**. To learn more, read [Metadata Field Names and Data Types](https://auth0.com/docs/manage-users/user-accounts/metadata/metadata-fields-data).\n\n### Use Lock\n\nYou can customize the Lock UI to display links to your terms and conditions and/or privacy statement pages, and a consent checkbox that the user has to check in order to sign up. This can be done with the `mustAcceptTerm`s Lock option. This property, when set to `true`, displays a checkbox alongside the terms and conditions that must be checked before signing up. The terms and conditions can be specified using the languageDictionary option. To learn more, read [Lock Configuration Options](https://auth0.com/docs/libraries/lock/lock-configuration).\n\nOnce the user accepts and signs up, save the consent information at the `user_metadata` using a rule that will run upon first login. To learn more about rules, read [Auth0 Rules](https://auth0.com/docs/customize/rules).\n\nIf you want to get more information from the users during signup, and you authenticate users with a database connection, you can add custom fields to the Lock UI. This can be done with the additionalSignUpFields Lock option. Any custom fields are automatically added to the `user_metadata`.\n\nIf you are using social logins, adding custom fields is not an option, but you can redirect the user to another page where you ask for consent and any additional info, and then redirect back to finish the authentication transaction. This can be done with redirect rules. To learn more, read [Redirect Users from Within Rules](https://auth0.com/docs/customize/rules/redirect-users). Once the signup process is complete, save the consent information at the `user_metadata` by calling the Management API [**Update User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id).\n\nTo learn how to implement any of these scenarios, read [GDPR: Track Consent with Lock](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-lock).\n\n### Use custom UI\n\nIf you use a custom signup form with a database connection, you have to add an extra field to the signup screen in order to capture the user's consent. Afterward, call the Authentication API [**Signup** endpoint](https://auth0.com/docs/api/authentication#signup) in order to create the user in Auth0. At this point, you can set the consent information as part of the `user_metadata`.\n\nAlternatively, if you use Auth0.js from a SPA, you can [use the `signup` method](https://auth0.com/docs/libraries/auth0js) to create the user in Auth0 and set the consent info as part of the `user_metadata`.\n\nIf you use a custom signup form with social providers, you cannot set the user's consent information upon signup but you can update it as soon as the user is created. Save the consent information at the `user_metadata` by calling the Management API [**Update User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id).\n\nTo learn how to implement any of these scenarios, read [GDPR: Track Consent with Custom UI](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-custom-ui).\n\n### Re-consent and user migration\n\nIf you need to ask for consent from existing users and you decide to migrate your users from an existing database to Auth0, you can [use our Automatic User Migration](https://auth0.com/docs/manage-users/user-migration/configure-automatic-migration-from-your-database) feature. By activating this, each time a user logs in for the first time (since this was activated), they will be created in Auth0 without having to reset their password. To do this you must:\n\n*   Write up the notification users will see around how users' data is being used, how long data will be used, users' rights, etc. as well as customize the UI sign-up box.\n    \n*   Determine if re-consent is required for your users, depending on your old terms and conditions and previous privacy certifications.\n    \n\nNote that every time your Terms and Conditions change, you **must** ask the users for consent again.\n\n## Track consent\n\nAccording to GDPR, you should be able to show that the user has consented to the processing of their personal data.\n\nWith Auth0 you can save the user's consent information as part of the `user_metadata`. You can either save only a flag, showing if the user has consented or not, or a set of consent information and preferences (including, for example, the day the user provided consent, the terms he consented to, etc). Afterward, you can access and manipulate this information using our Management API.\n\nThe Management API also offers several options when it comes to user search and endpoints to update user metadata or batch export users.\n\nTo access the Management API you will need an access token. To learn how to get an access token for the Management API, read [Management API Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).\n\n### Search for users by email address\n\nTo search for a user using their email address, use the [**Search User by Email** endpoint](https://auth0.com/docs/manage-users/user-search/user-search-best-practices).\n\nSet the **fields** request parameter to `user_metadata` in order to limit the fields returned. This way, only the user\\_metadata will be returned instead of the complete user profile.\n\nSample request:\n\n*   [cURL](#80aa66e859b641c69759383ae64039a5_shell)\n*   [C#](#80aa66e859b641c69759383ae64039a5_csharp)\n*   [Go](#80aa66e859b641c69759383ae64039a5_go)\n*   [Java](#80aa66e859b641c69759383ae64039a5_java)\n*   [Node.JS](#80aa66e859b641c69759383ae64039a5_node)\n*   [Obj-C](#80aa66e859b641c69759383ae64039a5_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata' \\\n  --header 'authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\")\n  .header(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users-by-email',\n  params: {email: 'USER_EMAIL_ADDRESS', fields: 'user_metadata'},\n  headers: {authorization: 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users-by-email?email=USER_EMAIL_ADDRESS&fields=user_metadata\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nSample response:\n\n```\n[\n  {},\n  {\n    \"user_metadata\": {\n      \"consent\": {\n\t    \"given\": true,\n\t    \"date\": \"01/23/2018\",\n\t    \"text_details\": \"some-url\"\n\t  }\n    }\n  }\n]\n```\n\n### Search for users by ID\n\nTo search for a user using their ID, use the [**Get a User** endpoint](https://auth0.com/docs/manage-users/user-search/user-search-best-practices).\n\nSet the **fields** request parameter to `user_metadata` in order to limit the fields returned. This way, only the `user_metadata` will be returned instead of the complete user profile.\n\nSample request:\n\n*   [cURL](#7daf397b39214e7fb5c8999174d7c20b_shell)\n*   [C#](#7daf397b39214e7fb5c8999174d7c20b_csharp)\n*   [Go](#7daf397b39214e7fb5c8999174d7c20b_go)\n*   [Java](#7daf397b39214e7fb5c8999174d7c20b_java)\n*   [Node.JS](#7daf397b39214e7fb5c8999174d7c20b_node)\n*   [Obj-C](#7daf397b39214e7fb5c8999174d7c20b_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata' \\\n  --header 'authorization: Bearer {yourMgmtApiAccessToken}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\")\n  .header(\"authorization\", \"Bearer {yourMgmtApiAccessToken}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/%7ByourUserID%7D',\n  params: {fields: 'user_metadata'},\n  headers: {authorization: 'Bearer {yourMgmtApiAccessToken}'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer {yourMgmtApiAccessToken}\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer {yourMgmtApiAccessToken}\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer {yourMgmtApiAccessToken}\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer {yourMgmtApiAccessToken}'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer {yourMgmtApiAccessToken}\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/%7ByourUserID%7D?fields=user_metadata\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nSample response:\n\n```\n{\n  \"user_metadata\": {\n    \"consent\": {\n\t    \"given\": true,\n\t    \"date\": \"01/23/2018\",\n\t    \"text_details\": \"some-url\"\n  \t}\n  }\n}\n```\n\n### Update consent information\n\nTo update a user's `user_metadata`, use the [**Update a User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id).\n\nHow you structure your request depends on how you have structured your metadata: as root or as inner properties.\n\nIf your metadata are stored as root properties:\n\n```\n{\n  \"consentGiven\": true,\n  \"consentDetails\": \"some-url\"\n}\n```\n\nIf your metadata are stored as inner properties:\n\n```\n{\n  \"consent\": {\n    \"given\": true,\n    \"text_details\": \"some-url\"\n  }\n}\n```\n\n#### Update root property\n\nUpdates to root-level properties are merged, so you only need to send the value for the field you want to update. For example, let's say we want to add a consent date and set it to `01/23/2018`.\n\n*   [cURL](#0f4f8a79939e45b49cf99296d87b2848_shell)\n*   [C#](#0f4f8a79939e45b49cf99296d87b2848_csharp)\n*   [Go](#0f4f8a79939e45b49cf99296d87b2848_go)\n*   [Java](#0f4f8a79939e45b49cf99296d87b2848_java)\n*   [Node.JS](#0f4f8a79939e45b49cf99296d87b2848_node)\n*   [Obj-C](#0f4f8a79939e45b49cf99296d87b2848_objc)\n*   [...](#)\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_metadata\":{\"consentDate\":\"01/24/2018\"}}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\tpayload := strings.NewReader(\"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {\n    authorization: 'Bearer YOUR_MGMT_API_ACCESS_TOKEN',\n    'content-type': 'application/json'\n  },\n  data: {user_metadata: {consentDate: '01/24/2018'}}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"user_metadata\": @{ @\"consentDate\": @\"01/24/2018\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\"\n\nheaders = {\n    'authorization': \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/users/USER_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"user_metadata\\\":{\\\"consentDate\\\":\\\"01/24/2018\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\"user_metadata\": [\"consentDate\": \"01/24/2018\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThis will add a new property to the user profile, the **user\\_metadata.consentDate**, which will hold the date the customer consented. The response will be the full user profile. The updated metadata will look like this:\n\n```\n{\n  \"consentGiven\": true,\n  \"consentDate\": \"01/23/2018\",\n  \"consentDetails\": \"some-url\"\n}\n```\n\n#### Update inner property\n\nTo update an inner property, you must send the whole metadata object, even if you are not updating more than one property. If you do not include the entire object, Auth0 will remove your existing properties.\n\nLet's add an inner property for the consent date and set it to `01/23/2018`.\n\n*   [cURL](#276d731874234d919edce6596c41e34c_shell)\n*   [C#](#276d731874234d919edce6596c41e34c_csharp)\n*   [Go](#276d731874234d919edce6596c41e34c_go)\n*   [Java](#276d731874234d919edce6596c41e34c_java)\n*   [Node.JS](#276d731874234d919edce6596c41e34c_node)\n*   [Obj-C](#276d731874234d919edce6596c41e34c_objc)\n*   [...](#)\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_metadata\":{\"consent\": {\"given\":true, \"date\":\"01/23/2018\", \"text_details\":\"some-url\"}}}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\tpayload := strings.NewReader(\"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {\n    authorization: 'Bearer YOUR_MGMT_API_ACCESS_TOKEN',\n    'content-type': 'application/json'\n  },\n  data: {\n    user_metadata: {consent: {given: true, date: '01/23/2018', text_details: 'some-url'}}\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"user_metadata\": @{ @\"consent\": @{ @\"given\": @YES, @\"date\": @\"01/23/2018\", @\"text_details\": @\"some-url\" } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\"\n\nheaders = {\n    'authorization': \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/users/USER_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"user_metadata\\\":{\\\"consent\\\": {\\\"given\\\":true, \\\"date\\\":\\\"01/23/2018\\\", \\\"text_details\\\":\\\"some-url\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\"user_metadata\": [\"consent\": [\n      \"given\": true,\n      \"date\": \"01/23/2018\",\n      \"text_details\": \"some-url\"\n    ]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThis will add a new property to the user profile, the **user\\_metadata.consent.date,** which will hold the date the customer consented. The response will be the full user profile. The updated metadata will look like this:\n\n```\n{\n  \"consent\": {\n    \"given\": true,\n    \"date\": \"01/23/2018\",\n    \"text_details\": \"some-url\"\n  }\n}\n```\n\n### Export consent information\n\nTo export a list of your users using the Management API, use the [**User Export** endpoint](https://auth0.com/docs/manage-users/user-search/user-search-best-practices).\n\nThis endpoint creates a job that exports all users associated with a connection. You will need the ID of the connection. To find this ID, use the [**Get Connections** endpoint](https://auth0.com/docs/api/management/v2#!/Connections/get_connections) (you can set the **name** parameter to the name of the connection to retrieve only this one).\n\nOnce you have the connection ID and an access token for the Management API, you are ready to start exporting users. To see a sample request and response, read [Import and Export Users](https://auth0.com/docs/manage-users/user-migration). To learn how to get an access token for the Management API, read [Management API Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).\n\nYou also must:\n\n*   Determine how you want to track consent. We recommend including information on not just the date the user consented, but the version of terms and conditions to which the user agreed. We also recommend including an array to hold information about users that withdraw their permission (remember that the user can consent and withdraw multiple times).\n    \n*   Choose where you want to store consent: in Auth0's database or elsewhere.\n    \n\n## Withdraw consent\n\nThe user should have the option to withdraw consent using your app. This option should be easily accessible, and clearly distinguishable. Once the user decides to withdraw their consent, you should take action.\n\nFirst, you have to decide how you will handle the withdrawal of consent: will you delete the users or flag them as deleted?\n\n### Delete user\n\nTo delete a user, use the [**Delete a User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/delete_users_by_id).\n\n*   [cURL](#eacaf70a052743ac9a8b3b39b7571144_shell)\n*   [C#](#eacaf70a052743ac9a8b3b39b7571144_csharp)\n*   [Go](#eacaf70a052743ac9a8b3b39b7571144_go)\n*   [Java](#eacaf70a052743ac9a8b3b39b7571144_java)\n*   [Node.JS](#eacaf70a052743ac9a8b3b39b7571144_node)\n*   [Obj-C](#eacaf70a052743ac9a8b3b39b7571144_objc)\n*   [...](#)\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {authorization: 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/users/USER_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe response body for this endpoint is empty, so if you want to confirm that the user was successfully deleted try to retrieve the user using their email. If the endpoint returns an error, then your call to delete the user was successful.\n\n### Flag user as deleted\n\nIf you don't want to delete the user, flag their profile as deleted using the [**app\\_metadata** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id). Then, add some code that will make the authentication process to fail for any user with their profile flagged as such.\n\nThis allows you to keep a record of deleted users for future use.\n\n#### Flag the profile\n\nTo flag a user as deleted, use the app\\_metadata. In the following example, we will show you how to add a property called **deleted** to the **app\\_metadata** field. This allows you to configure the authentication process to treat all uses with this property set to true as deleted.\n\nTo update a user's metadata, use the [**Update a User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id).\n\n*   [cURL](#e5ffb244cd294be5b7e1164b3ae2cab0_shell)\n*   [C#](#e5ffb244cd294be5b7e1164b3ae2cab0_csharp)\n*   [Go](#e5ffb244cd294be5b7e1164b3ae2cab0_go)\n*   [Java](#e5ffb244cd294be5b7e1164b3ae2cab0_java)\n*   [Node.JS](#e5ffb244cd294be5b7e1164b3ae2cab0_node)\n*   [Obj-C](#e5ffb244cd294be5b7e1164b3ae2cab0_objc)\n*   [...](#)\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"app_metadata\":{\"deleted\":true}}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\tpayload := strings.NewReader(\"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"authorization\", \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {\n    authorization: 'Bearer YOUR_MGMT_API_ACCESS_TOKEN',\n    'content-type': 'application/json'\n  },\n  data: {app_metadata: {deleted: true}}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"app_metadata\": @{ @\"deleted\": @YES } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\"\n\nheaders = {\n    'authorization': \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/users/USER_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"app_metadata\\\":{\\\"deleted\\\":true}}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer YOUR_MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\"app_metadata\": [\"deleted\": true]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\n#### Disable login for flagged users\n\nNext, you must disable login for users flagged as deleted. To do so, you will add a rule (a JavaScript snippet that runs as part of the authentication pipeline).\n\n1.  Go to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules) and create a rule.\n    \n2.  Copy the script below:\n    \n    ```\n    function (user, context, callback) {\n      user.app_metadata = user.app_metadata || {};\n      if (user.app_metadata.deleted){\n      \treturn callback(new UnauthorizedError('Access denied (deleted user)'));\n      }\n      callback(null, user, context);\n    }\n    ```\n    \n    The script does the following:\n    1.  Checks the value of the **deleted** metadata property (`user.app_metadata.deleted`).\n        \n    2.  Returns an `Access denied (deleted user)` error to your app if `user.app_metadata.deleted = true`\n        \n3.  Give a name to your rule and save your changes.\n    \n\nYou also must:\n\n*   Ensure the consent withdrawal piece is granular enough.\n    \n*   Configure into the app, the area where customers will withdraw consent.\n    \n\n## Learn more\n\n*   [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization)\n*   [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability)\n*   [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data)\n*   [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data)",
    "title": "GDPR: Conditions for Consent",
    "description": "Describes which Auth0 features can help you comply with the Conditions for Consent GDPR requirements.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-custom-ui",
    "markdown": "# GDPR: Track Consent with Custom UI\n\nIn this tutorial we will see how you can use auth0.js or the Auth0 APIs to ask for consent information and save the input at the user's metadata. To learn more, read [Understand How Metadata Works in User Profiles](https://auth0.com/docs/manage-users/user-accounts/metadata).\n\nIf you would instead like to track consent using Lock, see [GDPR: Track Consent with Lock](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-track-consent-with-lock).\n\nThe contents of this document are **not** intended to be legal advice, nor should they be considered a substitute for legal assistance. The final responsibility for understanding and complying with GDPR resides with you, though Auth0 will assist you in meeting GDPR requirements where possible.\n\n## Overview\n\nWe will capture consent information, under various scenarios, and save this in the user's metadata.\n\nAll scenarios will save the following properties in the user's metadata:\n\n*   `consentGiven` (true/false) shows if the user has provided consent (true) or not (false)\n    \n*   `consentTimestamp` (Unix timestamp) indicates when the user-provided consent\n    \n\nFor example:\n\n```\n{\n  \"consentGiven\": \"true\"\n  \"consentTimestamp\": \"1525101183\"\n}\n```\n\nWe will see four different implementations for this:\n\n1.  one that displays a flag, works for database connections, and uses the auth0.js library to create the user (used by Single-Page Applications). To learn more, read [Auth0.js v9 Reference](https://auth0.com/docs/libraries/auth0js).\n    \n2.  one that displays a flag, works for database connections, and uses the Authentication API to create the user (used by Regular Web Apps)\n    \n3.  one that displays a flag, works for social connections, and uses the Management API to update the user's information (used either by SPAs or Regular Web Apps)\n    \n4.  one that redirects to another page where the Terms & Conditions and/or privacy policy information can be reviewed and consent info can be provided (used either by SPAs or Regular Web Apps)\n    \n\n## Option 1: Use auth0.js\n\nIn this section, we will use a simple Single-Page Application and customize the login widget to add a flag which users can use to provide consent information. Instead of building an app from scratch, we will [use Auth0's JavaScript Quickstart sample](https://auth0.com/docs/quickstart/spa/vanillajs). We will also use Auth0's Universal Login pages so we can implement Universal Login, instead of embedding the login in our app. To learn more about Universal Login, read [Auth0 Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login). To learn more about the differences between Universal Login and embedded login, read [Centralized Universal Login vs. Embedded Login](https://auth0.com/docs/authenticate/login/universal-vs-embedded-login).\n\nThis works **only** for database connections (we will use Auth0's infrastructure, instead of setting up our own database).\n\n1.  Go to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications) and create a new application. Choose `Single Web Page Applications` as type. Go to **Settings** and set the **Allowed Callback URLs** to `http://localhost:3000`.\n    \n    This field holds the set of URLs to which Auth0 is allowed to redirect the users after they authenticate. Our sample app will run at `http://localhost:3000` hence we set this value.\n    \n2.  Copy the **Client Id** and **Domain** values. You will need them in a while.\n    \n3.  Go to [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database) and create a new connection. Click **Create DB Connection**, set a name for the new connection, and click **Save**. Go to the connection's **Applications** tab and make sure your newly created application is enabled.\n    \n4.  [Download the JavaScript SPA Sample](https://auth0.com/docs/quickstart/spa/vanillajs).\n    \n5.  [Set the Client ID and Domain values](https://github.com/auth0-samples/auth0-javascript-samples/tree/master/01-Login#set-the-client-id-and-domain).\n    \n6.  Go to [Auth0 Dashboard > Branding > Universal Login](https://manage.auth0.com/#/login_settings). At the **Login** tab enable the toggle.\n    \n7.  At the **Default Templates** dropdown make sure that `Custom Login Form` is picked. The code is pre-populated for you.\n    \n8.  Set the value of the `databaseConnection` variable to the name of the database connection your app is using.\n    \n    ```\n    //code reducted for simplicity\n    \tvar databaseConnection = 'test-db';\n    \t//code reducted for simplicity\n    ```\n    \n9.  To add a field for the `consentGiven` metadata, add a checkbox at the form. For our example, we will configure the checkbox as checked by default and disabled so the user cannot uncheck it. You can adjust this according to your business needs.\n    \n    ```\n    //code reducted for simplicity\n        <div class=\"form-group\">\n          <label for=\"name\">I consent with data processing</label>\n          <input\n            type=\"checkbox\"\n            id=\"userConsent\"\n            checked disabled>\n        </div>\n        //code reducted for simplicity\n    ```\n    \n10.  Edit the signup function to set the metadata. Note that we set the value of the metadata to a string with the value `true` and not to a boolean value, and we are using `toString` to convert the number to a string. This is due to a restriction of the Authentication API [**Signup** endpoint](https://auth0.com/docs/api/authentication#signup) which only accepts strings as values.\n    \n    ```\n    //code reducted for simplicity\n        webAuth.redirect.signupAndLogin({\n          connection: databaseConnection,\n          email: email,\n          password: password,\n          user_metadata: { consentGiven: 'true', consentTimestamp: Date.now().toString() }\n        }, function(err) {\n          if (err) displayError(err);\n        });\n        //code reducted for simplicity\n    ```\n    \n11.  To see what the login widget will look like, click the **Preview** tab.\n    \n\n![Dashboard Branding Universal Login Classic Login Tab Custom Login Form](https://images.ctfassets.net/cdy7uua7fh8z/4m3WA0sKMoR0C1KVnVmZ1G/2af0bf233072109bd882a16a6267c7bd/dashboard-branding-universal-login-classic-login-custom-login-form.png)\n\n1.  To test this configuration run the application and go to `http://localhost:3000`. Sign up with a new user. Then go to [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users) and search for your new user. Go to **User Details** and scroll down to the **Metadata** section. At the **user\\_metadata** text area, you should see the `consentGiven` metadata set to `true`.\n    \n\n## Option 2: Use the API (database)\n\nIf you serve your login page from your own server, then you can call the Authentication API [**Signup** endpoint](https://auth0.com/docs/api/authentication#signup) directly once the user signs up.\n\nFor the same scenario we have been discussing so far, once you sign up a new user, you can use the following snippet to create the user at Auth0 and set the metadata. Remember to replace the value of the `consentTimestamp` request parameter with the timestamp of when the user provided consent.\n\n*   [cURL](#e22544b18fe34e3bb5e0610e9faf0a5d_shell)\n*   [C#](#e22544b18fe34e3bb5e0610e9faf0a5d_csharp)\n*   [Go](#e22544b18fe34e3bb5e0610e9faf0a5d_go)\n*   [Java](#e22544b18fe34e3bb5e0610e9faf0a5d_java)\n*   [Node.JS](#e22544b18fe34e3bb5e0610e9faf0a5d_node)\n*   [Obj-C](#e22544b18fe34e3bb5e0610e9faf0a5d_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/dbconnections/signup' \\\n  --header 'content-type: application/json' \\\n  --data '{\"client_id\": \"{yourClientId}\",\"email\": \"YOUR_USER_EMAIL\",\"password\": \"YOUR_USER_PASSWORD\",\"user_metadata\": {\"consentGiven\": \"true\", \"consentTimestamp\": \"1525101183\" }}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/dbconnections/signup\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/dbconnections/signup\"\n\n\tpayload := strings.NewReader(\"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/dbconnections/signup\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/dbconnections/signup',\n  headers: {'content-type': 'application/json'},\n  data: {\n    client_id: '{yourClientId}',\n    email: 'YOUR_USER_EMAIL',\n    password: 'YOUR_USER_PASSWORD',\n    user_metadata: {consentGiven: 'true', consentTimestamp: '1525101183'}\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"client_id\": @\"{yourClientId}\",\n                              @\"email\": @\"YOUR_USER_EMAIL\",\n                              @\"password\": @\"YOUR_USER_PASSWORD\",\n                              @\"user_metadata\": @{ @\"consentGiven\": @\"true\", @\"consentTimestamp\": @\"1525101183\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/dbconnections/signup\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/dbconnections/signup\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/{yourDomain}/dbconnections/signup\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/dbconnections/signup\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"client_id\\\": \\\"{yourClientId}\\\",\\\"email\\\": \\\"YOUR_USER_EMAIL\\\",\\\"password\\\": \\\"YOUR_USER_PASSWORD\\\",\\\"user_metadata\\\": {\\\"consentGiven\\\": \\\"true\\\", \\\"consentTimestamp\\\": \\\"1525101183\\\" }}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"client_id\": \"{yourClientId}\",\n  \"email\": \"YOUR_USER_EMAIL\",\n  \"password\": \"YOUR_USER_PASSWORD\",\n  \"user_metadata\": [\n    \"consentGiven\": \"true\",\n    \"consentTimestamp\": \"1525101183\"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/dbconnections/signup\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nNote that we set the value of the metadata to a string with the value `true` and not to a boolean value due to the API restriction that accepts strings as values, not booleans.\n\nIf setting boolean values is a requirement for you, you can use the Management API instead. In this scenario you sign up your user as usual, and then you call the Management API [**Update User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id) to set the required metadata after the user has been created. For details on how to do that keep reading, the next paragraph uses that endpoint.\n\nIf you use social connections, then you cannot use the Authentication API to create the user at Auth0, since that endpoint works only for database connections.\n\nWhat you have to do instead is let your user sign up with the social provider (which will create a user record at Auth0) and then use the Management API to update the user's information.\n\nBefore you call the Management API you need to get a valid token. To learn more, read [Get Management API Access Tokens for Production](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production).\n\nThe linked article uses the Client Credentials Flow to get a token, which you cannot use from an app running on the browser. What you can use instead is the Implicit Flow. To learn more about the Client Credentials Flow, read [Client Credentials Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow). To learn more about the Implicit Flow, read [Implicit Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/implicit-flow-with-form-post).\n\nSet the **audience** request parameter to `https://YOUR_DOMAIN/api/v2/` and the **scope** parameter to the scope `create:current_user_metadata`. You can use the Access Token you will get at the response to call the Management API [**Update User** endpoint](https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id).\n\nOnce you have a valid token, use the following snippet to update the user's metadata.\n\n*   [cURL](#00a274bf8176488faf6298ee9641f53a_shell)\n*   [C#](#00a274bf8176488faf6298ee9641f53a_csharp)\n*   [Go](#00a274bf8176488faf6298ee9641f53a_go)\n*   [Java](#00a274bf8176488faf6298ee9641f53a_java)\n*   [Node.JS](#00a274bf8176488faf6298ee9641f53a_node)\n*   [Obj-C](#00a274bf8176488faf6298ee9641f53a_objc)\n*   [...](#)\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/users/%7BUSER_ID%7D' \\\n  --header 'authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_metadata\": {\"consentGiven\":true, \"consentTimestamp\": \"1525101183\"}}'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Bearer YOUR_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer YOUR_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\")\n  .header(\"authorization\", \"Bearer YOUR_ACCESS_TOKEN\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/users/%7BUSER_ID%7D',\n  headers: {authorization: 'Bearer YOUR_ACCESS_TOKEN', 'content-type': 'application/json'},\n  data: {user_metadata: {consentGiven: true, consentTimestamp: '1525101183'}}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer YOUR_ACCESS_TOKEN\",\n                           @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"user_metadata\": @{ @\"consentGiven\": @YES, @\"consentTimestamp\": @\"1525101183\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer YOUR_ACCESS_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\"\n\nheaders = {\n    'authorization': \"Bearer YOUR_ACCESS_TOKEN\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/users/%7BUSER_ID%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"authorization\"] = 'Bearer YOUR_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"user_metadata\\\": {\\\"consentGiven\\\":true, \\\"consentTimestamp\\\": \\\"1525101183\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer YOUR_ACCESS_TOKEN\",\n  \"content-type\": \"application/json\"\n]\nlet parameters = [\"user_metadata\": [\n    \"consentGiven\": true,\n    \"consentTimestamp\": \"1525101183\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/%7BUSER_ID%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nNote that in order to make this call you need to know the unique `user_id`. You can retrieve this from the `sub` claim of the ID Token, if you got one from the response. To learn more, read [ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens). Alternatively, if all you have is the email, you can retrieve the Id by calling another endpoint of the Management API. To learn more, read [User Search Best Practices](https://auth0.com/docs/manage-users/user-search/user-search-best-practices).\n\n## Option 4: Redirect to another page\n\nIf you want to display more information to your user, then upon signup you can redirect to another page where you ask for consent and any additional info, and then redirect back to finish the authentication transaction. This can be done with redirect rules. That same rule can be used to save the consent information at the user's metadata so you can track this information and not ask for consent upon next login. To learn more, read [Redirect Users from Within Rules](https://auth0.com/docs/customize/rules/redirect-users).\n\nYou will need to host this form, and the URL for the form must be publicly-accessible. You'll need to provide the URL where the form can be accessed to Auth0 at a later step of this tutorial.\n\n1.  Add the redirect rule. Go to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules), and click **Create Rule**. At **Rules Templates**, select **empty rule**. Change the default rule's name from `empty rule` to something descriptive (e.g., `Redirect to consent form`).\n    \n2.  Add the following JavaScript code to the script editor, and **Save** your changes.\n    \n    ```\n    exports.onExecutePostLogin = async (event, api) => {\n        const { consentGiven } = event.user.user_metadata || {};\n    \n        // redirect to consent form if user has not yet consented\n        if (!consentGiven && api.redirect.canRedirect()) {\n          const options = {\n            query: {\n              auth0_domain: `${event.tenant.id}.auth0.com`,\n            },\n          };\n          api.redirect.sendUserTo(event.secrets.CONSENT_FORM_URL, options);\n        }\n    };\n    \n    // if user clicks 'I agree' on the consent form, save it to their profile so they don't get prompted again\n    exports.onContinuePostLogin = async (event, api) => {\n      if (event.request.body.confirm === \"yes\") {\n        api.user.setUserMetadata(\"consentGiven\", true);\n        api.user.setUserMetadata(\"consentTimestamp\", Date.now());\n        return;\n      } else {\n        return api.access.deny(\"User did not consent\");\n      }\n    };\n    ```\n    \n3.  Return to [Auth0 Dashboard > Auth0 Pipeline > Rules](https://manage.auth0.com/#/rules) and scroll down to the bottom of the page where the **Settings** section is. Create a key/value pair as follows:\n    \n    1.  **Key**: `CONSENT_FORM_URL`\n        \n    2.  **Value**: `your-consent-form-url.com`\n        \n\nBe sure to provide the publicly-accessible URL where your consent form can be found.\n\nWhen setting up redirection to your consent form for use in a Production environment, be sure to review [Trusted Callback URLs](https://github.com/auth0/rules/tree/master/redirect-rules/simple#trusted-callback-urls) and [Data Integrity](https://github.com/auth0/rules/tree/master/redirect-rules/simple#data-integrity) regarding security concerns.\n\nIf you require a specialized consent prompt, for example a parental consent, you need to build your own custom consent form. Be aware that laws vary according to country.\n\nWe are done with the configuration part, let's test!\n\n## Test the configuration\n\n1.  Run the application and go to `https://localhost:3000`.\n    \n2.  Sign up with a new user. You will be redirected to the consent form.\n    \n3.  Check the **I agree** flag, and click **Submit**.\n    \n4.  Go to [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users), and search for your new user.\n    \n5.  Go to **User Details**, and scroll down to the **Metadata** section.\n    \n6.  At the **user\\_metadata** text area, you should see the `consentGiven` metadata set to `true` and the `consentTimestamp` set to the Unix timestamp of the moment the user consented.\n    \n    ![Application Sign Up Widget Lock Consent Form Agree](https://images.ctfassets.net/cdy7uua7fh8z/dk2NIuhs47m3eU28cgEkI/0d73b6c33d438da1e82454da17ce8e6a/lock-consent-form-agree.png)\n\nThat's it, you are done!",
    "title": "GDPR: Track Consent with Custom UI",
    "description": "Describes how you can use either auth0.js or the Auth0 APIs to capture consent information when you use your own custom UI for logins.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data",
    "markdown": "# GDPR: Right to Access, Correct, and Erase Data\n\nAs per articles 15, 16, 17, and 19 of GDPR, users have the right to get a copy of their personal data you are processing, ask for rectifications if they are inaccurate, and ask you to delete their personal data.\n\nWith Auth0, you can access, edit, and delete user information manually, using the Dashboard, or programmatically, using the Management API.\n\n## Manual process\n\nYou can view, edit, and delete user information at [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users). Drill down to a user to view their information. The information you can change is:\n\n| **Field** | **How to edit** |\n| --- | --- |\n| **Email** | Click Edit. Set the new email. |\n| **Email verified** | Click **Edit** at the **Εmail** field. Click the **Set email as verified** link. |\n| **Metadata** | Both the `app_metadata` and the `user_metadata` objects are editable from this screen. Edit the JSON at the **Metadata** section and save your changes. |\n| **Blocked** | Not directly editable. Click **Actions > Block User** at the top right of this screen. To unblock click **Actions > Unblock User**. |\n| **Email** | Not directly editable. Click **Actions > Change Email** at the top right of this screen. |\n| **Password** | Not directly editable. Click **Actions > Change Password** at the top right of this screen. |\n\nTo delete a user, click **Actions > Delete User**.\n\n## Programmatic process\n\nYou can retrieve, edit, and delete user information using our API. Choose an endpoint that matches your needs:\n\n*   Retrieve a user using the ID as search criteria\n    \n*   Retrieve a user using the Email as search criteria\n    \n*   Export all users to a file using a long running job\n    \n*   Update a user. Note that not all fields are editable (see the next section). Keep in mind that:\n    \n    *   The properties of the new object will replace the old ones. The `user_metadata` and `app_metadata` fields are an exception to this rule. These properties are merged instead of being replaced, though the merge happens only on the first level.\n        \n    *   If you are updating `email_verified`, `phone_verified`, `username`, or `password`, you must set the `connection` parameter.\n        \n    *   If your are updating `email` or `phone_number`, you must set the `connection` and the `client_id` parameters.\n        \n*   Delete a user based on the ID\n    \n\nIn order to call any of the API endpoints, you will need an valid access token. This token must have the required permissions per endpoint. Each endpoint at the Management API explorer has a scopes section that lists the scope(s) that the access token must contain in order to access it. Once you know which endpoint you want to access, and you have a valid access token, you are ready to send your request.\n\n## Editable data\n\nThe following user information can be updated using the API:\n\n*   blocked\n    \n*   email\\_verified\n    \n*   email\n    \n*   verify\\_email\n    \n*   password\n    \n*   phone\\_number\n    \n*   phone\\_verified\n    \n*   verify\\_password\n    \n*   user\\_metadata\n    \n*   app\\_metadata\n    \n*   username\n    \n\nThe following user information are **not** editable:\n\n*   given\\_name\n    \n*   family\\_name\n    \n*   name\n    \n*   nickname\n    \n*   picture\n    \n\n## Searchable fields\n\nYou can search for users using the following:\n\n*   All the normalized user profile fields\n    \n*   The profile information under the `user_metadata` object:\n    \n    *   name\n        \n    *   nickname\n        \n    *   given\\_name\n        \n    *   family\\_name\n        \n\nYou are responsible for ensuring customer is erased or data is updated in any other databases that Auth0 is not connected to.\n\n## Learn more\n\n*   [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent)\n*   [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization)\n*   [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability)\n*   [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data)",
    "title": "GDPR: Right to Access, Correct, and Erase Data",
    "description": "Describes Auth0 features that help you comply with the GDPR requirements on the user's right to access, correct, and erase their personal data.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability",
    "markdown": "# GDPR: Data Portability\n\nAccording to Article 20 of GDPR, users have the right to receive the personal data concerning them in a structured, commonly used and machine-readable format.\n\nYou can export user data, stored in the Auth0 user store, either manually or programmatically. Raw data from Auth0 can be exported in JSON format (which is machine-readable).\n\n## Export data manually\n\n1.  Go to [Auth0 Dashboard > User Management > Users](https://manage.auth0.com/#/users).\n    \n2.  Search for the user and drill down on their name.\n    \n3.  Click the **Raw JSON** tab. Here you can see the complete user profile in JSON format.\n    \n4.  Click **Copy JSON**. The profile is copied to your clipboard.\n    \n5.  Paste the clipboard contents to an editor and save.\n    \n\n## Export data using the API\n\nYou can export a user's full profile using our Management API. The response will be in JSON format. You can either search for a user using their ID, or export a list of your users.\n\n## Learn more\n\n*   [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent)\n*   [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization)\n*   [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data)\n*   [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data)",
    "title": "GDPR: Data Portability",
    "description": "Describes how you can export user data in order to comply with data portability GDPR requirements.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data",
    "markdown": "# GDPR: Protect and Secure User Data\n\nAs per article 32 of GDPR, you must implement appropriate security measures in order to ensure a level of security appropriate to the risk, including (but not limited to):\n\n*   Τhe encryption of personal data\n    \n*   Τhe ability to ensure the ongoing confidentiality, integrity, availability, and resilience of processing systems and services\n    \n*   Τhe ability to restore the availability and access to personal data in a timely manner in the event of a physical or technical incident\n    \n\nThere are several Auth0 features that can help you achieve that, like user profile encryption, brute-force protection, breached password detection, step-up authentication, and more.\n\n## Encrypt user profile information\n\nYou can encrypt user information before you save it in the user profile. You can use any encryption mechanism you like prior to storing data in the metadata fields. When a user sets sensitive information, call the Update a User endpoint.\n\n## Enable brute-force protection\n\nAuth0's brute-force protection shield is enabled by default to stop malicious attempts to access your application.\n\nThere are two types of triggers for this shield:\n\n*   10 consecutive failed login attempts for the same user and from the same IP address\n    \n*   100 failed login attempts from the same IP address in 24 hours or 50 sign up attempts per minute from the same IP address\n    \n\nFor example, if a user with **user\\_id1** signs in from **IP1** and fails to login consecutively for 10 attempts, their log in attempt from this **IP1** will be blocked. Another user, **user\\_id2**, signing in from **IP1** will not be blocked.\n\nEvery time Auth0 detects 10 failed login attempts into a single account from the same IP, we will:\n\n*   Send a notification email to the user.\n    \n*   Block the suspicious IP address for that user.\n    \n\nEvery time Auth0 detects 100 failed login attempts in 24 hours or 50 sign up attempts from the same IP address, we will:\n\n*   Notify dashboard administrator(s).\n    \n*   Block suspicious addresses for 15 minutes.\n    \n\nYou can enable brute-force protection, configure which actions you want to take, and customize the blocked account email using the Dashboard.\n\n## Enable breached password detection\n\nThe breached password detection shield helps you identity user credentials that might have been compromised in a public data breach.\n\nAuth0 tracks large security breaches that are happening on major third-party sites. If one of your users' credentials were included in a public security breach, you can take action and:\n\n*   Send an email to the affected user\n    \n*   Send an email to dashboard owners immediately, and/or have a daily/weekly/monthly summary\n    \n*   Block login attempts for suspected user accounts using that username and password combination. This block remains in place until the user changes their password\n    \n\nYou can enable breached password detection and configure which actions you want to take using the Dashboard.\n\n## Harden your security with multi-factor authentication\n\nWith multi-factor authentication (MFA), you can add an additional layer of security to your applications. It is a method of verifying a user's identity by asking them to present more than one piece of identifying information.\n\nWe support MFA using push notifications, SMS, one-time password authentication services, and custom providers. You can enable MFA for specific users or specific actions (for example, access screens with sensitive data). You can also define the conditions that will trigger additional authentication challenges, such as changes in geographic location or logins from unrecognized devices.\n\n## Help your users choose better passwords\n\nYou can customize the level of password complexity for new sign ups. For example, you can ask for a password that has at least 10 characters and includes at least one uppercase letter, a number, and a special character.\n\nYou can also forbid the use of previous passwords using our Password History feature and stop users from choosing common passwords using our Password Dictionary. All three features are configurable from the Dashboard.\n\n## Step-up authentication\n\nWith step-up authentication, applications can ask users to authenticate with a stronger authentication mechanism to access sensitive resources. For example, you may have a banking application that does not require Multi-factor Authentication (MFA) to view the account's basic information, but when users try to transfer money between accounts then they must authenticate with one more factor (for example, a code sent via SMS).\n\nYou can check if a user has logged in with MFA by reviewing the contents of their ID Token or Access Token. You can then configure your application to deny access to sensitive resources if the token indicates that the user did not log in with MFA.\n\n## Availability and resilience\n\nAuth0 is designed and built as a scalable, highly available, multi-tenant cloud service. We are highly resilient to the failure of any of our components because we implement redundant components at all levels. We also detect failures rapidly and our failover is very quick.\n\nTo learn more information on Auth0 architecture, read [Availability & Trust](https://auth0.com/availability-trust).\n\n## Learn more\n\n*   [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent)\n*   [GDPR: Data Minimization](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization)\n*   [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability)\n*   [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data)",
    "title": "GDPR: Protect and Secure User Data",
    "description": "Describes how you can use Auth0 features to protect and secure user's personal data.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-minimization",
    "markdown": "# GDPR: Data Minimization\n\nAccording to Article 5 of GDPR, the personal data you collect must be limited to what is necessary for processing and must be kept only as long as needed. Appropriate security must be ensured during data processing, including protection against unauthorised or unlawful processing and against accidental loss, destruction, or damage.\n\nThere are several Auth0 features than can help you achieve these goals, like account linking, user profile encryption, and more.\n\n## Restrict user profile information\n\nTo limit the amount of personal information in the Auth0 user profile, you can:\n\n*   Minimize (or avoid) saving personal information in the metadata section of the user profile\n    \n*   If you use enterprise directories, configure them to return only the minimum information needed\n    \n*   If you use social providers, configure them to return only the minimum information needed\n    \n*   Denylist the user attributes that you do not want to persist in the Auth0 databases\n    \n\n## Encrypt user profile information\n\nYou can encrypt user information before you save it in the user profile. You can use any encryption mechanism you like prior to storing data in the metadata fields. When a user sets sensitive information, call the Update a User endpoint.\n\n## Use account linking\n\nEvery time a user uses a connection to log in to your application, a user profile is created if it doesn't already exist. Note that this is per connection.\n\nTo better understand this, consider the following scenario. Your application offers three different options for signup:\n\n*   sign up with email/password\n    \n*   login with Google\n    \n*   login with Facebook\n    \n\nIf a user signs up with Google, this will create a user profile in Auth0. If the same user, upon return, does not remember what he signed up with, and chooses to login with Facebook, Auth0 will create another user profile for the user. So now you have two profiles for the same user.\n\nYou can fix this with account linking. You can link multiple accounts under a single user profile, regardless of the connection's type (for example, user/password, social, or SAML).\n\nThere are two ways to implement this:\n\n*   **User-initiated** account linking: your app must provide the UI so an authenticated user can link their accounts manually.\n    \n*   **Suggested** account linking: in this case you still configure a rule that will link accounts with the same verified email address. However, instead of completing the link automatically, your app will first prompt the user to link their identities.\n    \n\n## Export logs\n\nYou can export Auth0 logs and either store them yourself or automatically push them to an external log service in [Auth0 Marketplace](https://marketplace.auth0.com/features/log-streaming). This functionality can help you with data retention requirements, as well as log analysis requirements.\n\n### Export logs with the API\n\nYou can use the Management API to export logs and store them yourself. There are the two available endpoints, each providing slightly different information.\n\n#### Search all logs\n\nThe Search Log Events endpoint retrieves log entries that match the search criteria you provided. If you do not provide any search criteria, you will get a list of all available entries.\n\nYou can provide search criteria using the **q** parameter and retrieve specific fields using the **fields** parameter.\n\nTo access the API, you need a Management APIv2 token.\n\nThis sample request retrieves all logs for successful logins (the event acronym for successful login is `s`). The list of fields we will retrieve per log entry is: **date**, **description**, **client\\_id**, and **log\\_id**.\n\n#### Get a single log entry\n\nThe Get a Log Event by ID endpoint retrieves the log entry associated with the provided ID.\n\nThis sample request retrieves a single log entry with the ID `90020180129170850881585554625888895190928456277777449010`.\n\n### Export to an external service\n\nYou can install and configure one of our [log streaming solutions](https://marketplace.auth0.com/features/log-streaming) in Auth0 Marketplace to export logs automatically to another provider, like Sumo Logic or Loggly. For a list of available providers and detailed steps to configure each, see Export Auth0 logs to an external service.\n\n## Keep sensitive information from logs\n\nYou should minimize any sensitive information contained in URLs that might be captured by Auth0 log files. For example, consider using `health-site` or similar as your domain name instead of `cancer-treatments`.\n\nYou also need to ensure that you do the following:\n\n*   Analyze what you are collecting in sign up and through social media and whether that is necessary for the purpose of your service.\n    \n*   Configure enterprise identity providers to control what data is returned to Auth0.\n    \n*   Specify what data you want to collect from the social provider and negotiate any particular terms around social login with the social provider around use of the data they will get around your users’ login.\n    \n\n## Learn more\n\n*   [GDPR: Conditions for Consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-conditions-for-consent)\n*   [GDPR: Data Portability](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-data-portability)\n*   [GDPR: Protect and Secure User Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-protect-and-secure-user-data)\n*   [GDPR: Right to Access, Correct, and Erase Data](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data)",
    "title": "GDPR: Data Minimization",
    "description": "Describes how you can minimize the personal data they collect for processing and ensure their security.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2022-23505",
    "markdown": "# CVE-2022-23505: Security Update for passport-wsfed-saml2 Library\n\n**Published**: Dec 12, 2022\n\nCVE number: CVE-2022-23505\n\n### Overview\n\nA remote attacker can bypass WSFed authentication on a website using `passport-wsfed-saml2`. A successful attack requires that the attacker is in possession of an arbitrary IDP signed WSFed assertion. Depending on the IDP used, fully unauthenticated attacks (e.g without access to a valid user) might also be feasible if generation of a signed message can be triggered.\n\n### Am I affected?\n\nYou are affected if you are using WSFed protocol with the `passport-wsfed-saml2` library versions  `<4.6.3`.\n\nSAML2 protocol is not affected.\n\n### How to fix that?\n\nUpgrade to version `>=4.6.3`\n\n### Will this update impact my users?\n\nThe fix provided in the patch will not affect your users.",
    "title": "CVE-2022-23505: Security Update for passport-wsfed-saml2 Library",
    "description": "Describes the security update for the passport-wsfed-saml2 Library.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2022-24794",
    "markdown": "# CVE-2022-24794: Security Update for Express OpenID Connect Library\n\n**Published**: March 30, 2022\n\n**CVE number**: CVE-2022-24794\n\n### Overview\n\nUsers of the `requiresAuth` middleware, either directly or through the default `authRequired` option, are vulnerable to an Open Redirect when the middleware is applied to a catch all route.\n\nIf all routes under `example.com` are protected with the `requiresAuth` middleware, a visit to `http://example.com//google.com` will be redirected to `google.com` after login because the original url reported by the Express framework is not properly sanitised.\n\n### Am I affected?\n\nYou are affected by this vulnerability if you are using the `requiresAuth` middleware on a catch all route or the default `authRequired` option and `express-openid-connect` version `<=2.7.1`.\n\n### How to fix that?\n\nUpgrade to version `>=2.7.2`\n\n### Will this update impact my users?\n\nThe fix provided in the patch will not affect your users.",
    "title": "CVE-2022-24794: Security Update for Express OpenID Connect Library",
    "description": "CVE-2022-24794: Security Update for Express OpenID Connect Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/2019-01-10-rules",
    "markdown": "# Auth0 Security Bulletin for Rules\n\n**Published**: January 10, 2019\n\n## Overview\n\nThis security bulletin covers several scenarios that customers should avoid in custom rule code, as they may create vulnerabilities in the authentication flow. A description of each issue and, where possible, an alternative way to write the same rule, is provided below.\n\n*   Custom rule code containing conditional logic to enforce multi-factor authentication (MFA) may introduce the ability to bypass MFA altogether, especially when using silent authentication.\n    \n*   Custom rule code implementing authorization controls based on a specific substring without appropriate logic may result in elevated privileges.\n    \n*   Custom rule code sending diagnostic information to third-party services, rather than using Auth0's built-in debugging features, may result in sensitive information disclosure.\n    \n*   Custom rule code triggering paid services may introduce the ability for an adversary to incur unwanted billing charges.\n    \n*   Custom rule code granting authorization based on unverified email addresses may allow adversaries to acquire those privileges through a secondary connection type.\n    \n*   Custom rule code containing hardcoded secrets, such as API keys, rather than using the global configuration object, increases the risk of exposing such secrets.\n    \n\n## Improper MFA rules\n\n### Silent authentication\n\nWithin a single-page application (SPA), silent authentication enables new access tokens to be issued without user interaction as long as the current session is valid against the authorization server.\n\nAuth0 offers silent authentication through a special parameter which is added to the authorization endpoint as follows: `/authorize?prompt=none`\n\nIf MFA is added to the silent authentication process, however, then user interaction becomes necessary.\n\nConditional logic based on silent authentication to bypass MFA should not be used as a workaround. Rules such as this allow complete MFA bypass and should not be utilized:\n\n```\nfunction (user, context, callback) {\n  if (context.request.query && context.request.query.prompt === 'none') {\n  // skip MFA for silent token requests\n  return callback(null, user, context);\n  }\n...\n}\n```\n\n### Silent authentication with redirection to custom MFA provider\n\nRules that determine whether to redirect to custom multi-factor authentication based on silent authentication may allow MFA bypass in some unusual circumstances. For example, avoid the following:\n\n```\nfunction (user, context, callback) {\n  if (context.request.query && context.request.query.prompt === 'none') {\n  //redirect to custom MFA\n  context.redirect = {\n    url: \"https://example.com/\"\n  };\n...\n}\n```\n\n### Improper verification\n\nUtilizing rules to bypass multi-factor authentication given specific conditions may bypass MFA when the checks in place are inadequate for determining the veracity of a desired state.\n\nIn these cases, the root of the issue is that rules can never determine whether MFA was successfully executed, as MFA happens after rule execution. Rules configured in this manner (see examples below) prematurely update the user record under the incorrect assumption that MFA will be successfully executed while relying on the same user record to skip MFA under given conditions.\n\nThe examples below illustrate improper verification checks which can result in full multi-factor authentication bypass.\n\n#### Device fingerprint\n\n```\nfunction (user, context, callback) {\n\n  var crypto = require('crypto');\n\n  var deviceFingerPrint = getDeviceFingerPrint();\n  user.app_metadata = user.app_metadata || {};\n\n  // Inadequate verification check\n  if (user.app_metadata.lastLoginDeviceFingerPrint !== deviceFingerPrint) {\n    user.app_metadata.lastLoginDeviceFingerPrint = deviceFingerPrint;\n    context.multi-factor = {\n      ...\n    };\n    ...\n  }\n  function getDeviceFingerPrint() {\n    var shasum = crypto.createHash('sha1');\n    shasum.update(context.request.userAgent);\n    shasum.update(context.request.ip);\n    return shasum.digest('hex');\n  }\n}\n```\n\n#### Country code\n\n```\nfunction (user, context, callback) {\n  user.app_metadata = user.app_metadata || {};\n\n  // Inadequate verification check\n  if (user.app_metadata.last_location !== context.request.geoip.country_code) {\n    user.app_metadata.last_location = context.request.geoip.country_code;\n    context.multi-factor = {\n    ...\n    };\n  }\n```\n\n### Am I affected?\n\nIf you use any of the previously illustrated rule logic, an adversary who has successfully logged in with the first authentication factor may be able to bypass MFA on your application.\n\n### Mitigation steps\n\n**If you are affected by the silent authentication scenario**, remove the conditional logic based on `prompt === 'none'`. This will trigger multi-factor authentication on each silent authentication call to check session status.\n\n**If you are affected by the silent authentication with redirection scenario**, remove the conditional logic based on `prompt === 'none'` and switch to an Auth0-supported multi-factor authentication provider.\n\nTo avoid prompting the user for MFA too often, you can set the parameter `allowRememberBrowser` to true, which will enable end-users to check a box so they will only be prompted for multi-factor authentication every 30 days. For example:\n\n```\ncontext.multi-factor = {\n    provider: 'guardian',\n    allowRememberBrowser: true\n  };\n```\n\nYou may want to notify your end users about checking the box to avoid being prompted too frequently.\n\n**If you are affected by rules utilizing improper verification for skipping MFA**, ensure to use sound verification checks, discontinue MFA exceptions entirely, or use the `allowRememberBrowser` configuration option described above.\n\n### Will this update impact my users?\n\nDepending on how you adjust your rules or configuration, this update may impact your users by prompting them for MFA more than usual.\n\n## Improper substring verification\n\nIf you have rule logic that requires access control based on an exact match of a particular string, such as an email domain, but you are only checking for a substring instead of an exact string match, your logic may not function as you intend. For example:\n\n`if( _.findIndex(connection.options.domain_aliases,function(d){ return user.email.indexOf(d) >= 0;`\n\nThe above logic would return true given emails such as these:\n\n*   `user.domain.com@not-domain.com`\n    \n*   `\"user@domain.com\"@not-domain.com` (quotes included)\n    \n\n### Am I affected?\n\nOnly customers using conditional logic in rules as described above, are affected.\n\n### Mitigation steps\n\nUtilize logic such as:\n\n`const emailSplit = user.email.split('@'); const userEmailDomain = emailSplit[emailSplit.length - 1].toLowerCase();`\n\nPlease refer to the [Check Domains Against Connection Aliases rule template](https://github.com/auth0/rules/blob/master/src/rules/check-domains-against-connection-aliases.js) for more information. Alternatively, in the **Rules** section of the Auth0 Dashboard, view the rule template named **Check if user email domain matches configured domain**.\n\n### Will this update impact my users?\n\nPossibly. The recommended change to rules with logic based on substring checks may impact end users, though you will be the best judge of the intent of your rules and whether any recommended changes are likely to impact your end users.\n\n## Debugging using external services\n\nIf you have rule logic that sends the Auth0 context object to an external service, you are exposing items such as `id_token` or `access_token` associated with the request. For example:\n\n```\nrequest.post({\n    url: 'http://requestbin.fullcontact.com/YourBinUrl',\n    json: {\n      user: user,\n      context: context,\n    },\n    timeout: 15000\n  }, function(err, response, body){\n    if (err) return callback(err);\n    return callback(null, user, context);\n  });\n```\n\n### Am I affected?\n\nOnly customers with rule logic as described above are affected.\n\n### Mitigation steps\n\nYou should modify your rule so it no longer sends the entire context object to requestbin, as this may expose any `id_token` or `access_token` associated with each request. Instead, you should send a subset of attributes from the context object that are less sensitive.\n\nPlease refer to the [Requestbin rule template](https://github.com/auth0/rules/blob/master/src/rules/requestbin.js) for more information. Alternatively, in the **Rules** section of the Auth0 Dashboard, view the rule template named **Dump rule variables to RequestBin**.\n\nAuth0 also offers built-in methods for debugging rules without sending information to external services.\n\n### Will this update impact my users?\n\nNo. The impacted rule was typically used for debugging purposes. Modification should not impact end users.\n\n## Rules using a paid service\n\nIf you have rule logic that involves a paid service, such as sending SMS messages via Twillio, as part of the authentication process, you may be vulnerable to increased costs because an adversary with a valid username and password may be able to trigger a call to the service and incur costs without having to complete the entire authentication process specified by rules. For example:\n\n```\n//Sends user SMS via Twilio\n  function notifyUser(done) {\n    const request = require('request');\n    const twilioAccount = '{yourTwilioAccount}';\n    const twilioAuthToken = '{yourTwilioAuthToken}';\n\n    request.post({\n      url: 'https://api.twilio.com/2010-04-01/Accounts/' + twilioAccount + '/Messages.json',\n      auth: {\n        'user': twilioAccount,\n        'pass': twilioAuthToken,\n      },\n      form: {\n        body: 'You\\'ve logged in from a different device or location.',\n        to: user.phone,\n        from: '+18668888888'\n      }\n    }, function (error, response, body) {\n      if (error) return done(error);\n      if (response.statusCode !== 201) return done(new Error(response.statusCode));\n      return done(null);\n    });\n  }\n```\n\n### Am I affected?\n\nOnly customers with rule logic as described above, and whose rule logic can be triggered by any untrusted user, are affected.\n\n### Mitigation steps\n\nTo mitigate this risk, consider one or more of the following actions:\n\n*   Disallow public sign-ups, if not needed, to reduce the numbers of users who can sign up and trigger calls to paid services.\n    \n*   Mitigate the risk of credential theft to avoid account takeover by hackers who might use hijacked accounts to trigger calls to paid services.\n    \n*   Ensure your users have strong passwords when using Database connections.\n    \n*   Ensure your users utilize multi-factor authentication.\n    \n*   Ensure that the rule only gets triggered for an authorized subset of users, or under other appropriate conditions. For example, you may wish to add logic that checks if a user has a particular email domain, role/group, or subscription level before triggering the call to the paid service.\n    \n\n### Will this update impact my users?\n\nThe impact to end users depends on which of the options described above you choose to mitigate the issue.\n\nIf you have rule logic that requires access control based on a particular email or email domain, but you are failing to check whether that user has verified their email, an adversary could potentially gain additional privileges by using a second connection type. For example:\n\n```\nvar userHasAccess = allowList.some(function (email) {\n    return email === user.email;\n  });\n```\n\nThe above logic would return `true` if an adversary could create an account using a different connection type (such as social) with an email address present in the allow-list. This happens because the same email can exist in different connection types.\n\n### Am I affected?\n\nOnly customers using conditional logic in rules as described above, and allowing for multiple connection types, are affected.\n\n### Mitigation steps\n\nWhenever granting authorization based on email addresses, always start the rule with the following logic:\n\n```\nfunction (user, context, callback) {\n  // Access should only be granted to verified users.\n  if (!user.email || !user.email_verified) {\n    return callback(new UnauthorizedError('Access denied.'));\n  }\n```\n\nSometimes even a verified email may not be an adequate check for the authorization you want to perform. To find out more about such cases, please read about the Email Verified Usage.\n\n### Will this update impact my users?\n\nThis will only affect existing users if they have not verified their email addresses.\n\n## Plaintext secrets within rule code\n\nIf you specify sensitive information, such as API keys, within rule code, you should configure those values in rule settings instead. For example:\n\n`const myApiKey = 'abcdefghijklmnopqrstuvwxyz';`\n\nSuch sensitive values, being present in the rule code, will remain unencrypted in our systems and suffer the risk of being exposed.\n\n### Am I affected?\n\nIf your rules contain sensitive values within the rule code itself, you are affected.\n\n### Mitigation steps\n\nPlace the sensitive values in the **Settings** area of the main **Rules** section of the Auth0 Dashboard and then access them in your rule via the following:\n\n`const myApiKey = configuration.myApiKey;`\n\nThis will ensure that all sensitive values are encrypted within Auth0's systems, reducing the risk of exposure.\n\n### Will this update impact my users?\n\nThis will not impact your users.",
    "title": "Auth0 Security Bulletin for Rules",
    "description": "Cases where improper custom rule code may create vulnerabilities in the authentication flow.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/2022-12-21-jsonwebtoken",
    "markdown": "# CVE-2022-23539, CVE-2022-23541, CVE-2022-23540: Security Update for jsonwebtoken\n\n**Published**: Dec 21, 2022\n\n**CVE numbers**: CVE-2022-23539, CVE-2022-23541, CVE-2022-23540\n\n### Overview\n\nAuth0 has released a new major version of the `jsonwebtoken` library to address four vulnerabilities.\n\nWe recommend you review the following security advisories and upgrade to the new major version:\n\n*   Unrestricted key type could lead to legacy keys usage: [CVE-2022-23539](https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33)\n    \n*   Insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC: [CVE-2022-23541](https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959)\n    \n*   Insecure default algorithm in jwt.verify() could lead to signature validation bypass: [CVE-2022-23540](https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6)\n    \n\n### Am I affected?\n\nYou could be affected if you are using `jsonwebtoken` in any version <= 8.5.1 depending on the configuration. Please consult the individual security advisories for more details.\n\n### How to fix that?\n\nIf you are using `jsonwebtoken`, upgrade to version 9.0.0 or higher. You may need some additional configuration. Please consult the individual security advisories for more details.\n\n### Will this update impact my users?\n\nUpdating to version 9.0.0 may impact your users depending on your configuration and application needs. Please consult the individual security advisories for more details.",
    "title": "CVE-2022-23539, CVE-2022-23541, CVE-2022-23540: Security Update for jsonwebtoken",
    "description": "Describes CVE-2022-23539, CVE-2022-23541, CVE-2022-23540 security update for JSON web token library.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-43812",
    "markdown": "# CVE-2021-43812: Security Update for Next.js Auth0 Library\n\n**Published**: December 16, 2021\n\n**CVE number**: CVE-2021-43812\n\n### Overview\n\nVersions `<=1.6.1` do not filter out certain `returnTo` parameter values from the login url, which expose the application to an open redirect vulnerability.\n\n### Am I affected?\n\nYou are affected by this vulnerability if you are using `@auth0/nextjs-auth0` version `<=1.6.1`.\n\n### How to fix that?\n\nUpgrade to version `>=1.6.2`\n\n### Will this update impact my users?\n\nThe fix provided in patch will not affect your users.",
    "title": "CVE-2021-43812: Security Update for Next.js Auth0 Library",
    "description": "CVE-2021-43812: Security Update for Next.js Auth0 Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-41246",
    "markdown": "# CVE-2021-41246: Security Update for Express OpenID Connect Library\n\n**Published**: December 08, 2021\n\n**CVE number**: `CVE-2021-41246`\n\n### Overview\n\nVersions `2.3.0` up to and including `2.5.1` do not regenerate the session id and session cookie when user logs in. This behavior opens up the application to various session fixation vulnerabilities.\n\n### Am I affected?\n\nYou are affected by this vulnerability if you are using `express-openid-connect` version `2.3.0` up to and including `2.5.1` and use a custom session store.\n\n### How to fix that?\n\nUpgrade to version `>= 2.5.2`\n\n### Will this update impact my users?\n\nThe fix provided in patch will not affect your users.",
    "title": "CVE-2021-41246: Security Update for Express OpenID Connect Library",
    "description": "CVE-2021-41246: Security Update for Express OpenID Connect Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15240",
    "markdown": "# CVE-2020-15240: Security Update for omniauth-auth0 JWT Validation\n\n**Published**: October 21st, 2020\n\n**CVE number**: CVE-2020-15240\n\n## Overview\n\nVersions after and including `2.3.0` are improperly validating the JWT token signature when using the `JWTValidator.verify` method. Improper validation of the JWT token signature when not using the default Authorization Code Flow can allow an attacker to bypass authentication and authorization.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using `omniauth-auth0`\n    \n*   You are using `JWTValidator.verify` method directly OR you are not authenticating using the SDK’s default Authorization Code Flow.\n    \n\n## How to fix that?\n\nUpgrade to version `2.4.1`.\n\n## Will this update impact my users?\n\nThe fix provided in this version will not affect your users.",
    "title": "CVE-2020-15240: Security Update for omniauth-auth0 JWT Validation",
    "description": "CVE-2020-15240: Security update for omniauth-auth0 JWT validation",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15125",
    "markdown": "# CVE-2020-15125: Security Update for node-auth0 Library\n\n**Published**: July 28, 2020\n\n**CVE number**: CVE-2020-15125\n\n**Credit**: Omar Diab (http://github.com/osdiab)\n\n## Overview\n\nVersions before and including 2.27.0 use a block list of specific keys that should be sanitized from the request object contained in the error object. When a request to Auth0 management API fails, the key for `Authorization` header is not sanitized and the `Authorization` header value can be logged exposing a bearer token.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using auth0 npm package.\n    \n*   You are using a Machine to Machine application authorized to use Auth0's management API Client Credentials Flow.\n    \n\n## How to fix that?\n\nUpgrade to version 2.27.1.\n\n## Will this update impact my users?\n\nThe fix provided in patch will not affect your users.",
    "title": "CVE-2020-15125: Security Update for node-auth0 Library",
    "description": "CVE-2020-15125: Security update for node-auth0 library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-32702",
    "markdown": "# CVE-2021-32702: Security Update for Auth0 Next.js Library\n\n**Published**: June 23, 2021\n\n**CVE number**: `CVE-2021-32702` \n\n## Overview\n\nVersions before and including `1.4.1` are vulnerable to reflected XSS. An attacker can execute arbitrary code by providing an XSS payload in the `error` query parameter which is then processed by the callback handler as an error message.\n\n## Am I affected?\n\nYou are affected by this vulnerability if you are using `@auth0/nextjs-auth0` version `1.4.1` or lower **unless** you are using custom error handling that does not return the error message in an HTML response.\n\n### How to fix that?\n\nUpgrade to version `1.4.2`.\n\n### Will this update impact my users?\n\nThe fix adds basic HTML escaping to the error message and it should not impact your users.\n\n### Credit\n\n[https://github.com/inian](https://github.com/inian)",
    "title": "CVE-2021-32702: Security Update for Auth0 Next.js Library",
    "description": "CVE-2021-32702: Security Update for Auth0 Next.js Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2021-32641",
    "markdown": "# CVE-2021-32641: Security Update for Auth0 Lock Library\n\n**Published**: June 4, 2021\n\n**CVE number**: CVE-2021-32641\n\n## Overview\n\nVersions before and including `11.30.0` are vulnerable to a reflected XSS. An attacker can execute arbitrary code when either:\n\n*   The library's `flashMessage` feature is used and user input or data from URL parameters is incorporated into the `flashMessage`.\n    \n\nOr\n\n*   The library's `languageDictionary` feature is used and user input or data from URL parameters is incorporated into the `languageDictionary`.\n    \n\n## Am I affected?\n\nThis vulnerability affects you if your implementation fits either of these descriptions:\n\n### flashMessage vulnerability\n\nIf all of these conditions are true, you're vulnerable:\n\n*   You use `auth0-lock` version `11.30.0` or older.\n    \n*   You use the `flashMessage` feature.\n    \n*   User input or data from URL parameters is incorporated into the `flashMessage`.\n    \n\nThis is an example of a vulnerable snippet where query parameters are used to populate the `text` property of a `flashMessage`:\n\n```\nvar params = new URLSearchParams(location.search);\n\nvar errorMessage = params.get('error__message');\nvar showParams = {};\n\nif (!!errorMessage === true) {\n  showParams.flashMessage = {\n    type: 'error',\n    text: 'We were unable to log you in. ' + errorMessage,\n  };\n}\n\nlock.show(showParams);\n```\n\n### languageDictionary vulnerability\n\nIf all of these conditions are true, you're vulnerable:\n\n*   You use `auth0-lock` version `11.30.0` or older.\n    \n*   You use the `languageDictionary` feature.\n    \n*   User input or data from URL parameters is used in `languageDictionary` properties.\n    \n\nThis is an example of a vulnerable snippet that uses query parameters to populate the `socialLoginInstructions` property of a `languageDictionary`:\n\n```\nvar params = new URLSearchParams(location.search);\nvar instruction = params.get('instruction');\n\nvar options = {\n  languageDictionary: {\n    emailInputPlaceholder: \"something@youremail.com\",\n    title: \"title\",\n    socialLoginInstructions: instruction\n  },\n};\n\nvar lock = new Auth0LockPasswordless(\n    CLIENT_ID,\n    DOMAIN,\n    options\n);\n\nlock.show();\n```\n\n## How to fix that?\n\nUpgrade to `auth0-lock` version `11.30.1`.\n\n## Will this update impact my users?\n\nThe fix uses [DOMPurify](https://github.com/cure53/DOMPurify) to sanitize the `flashMessage` and `languageDictionary` inputs. It removes any JavaScript in these fields, such as `script` tags or `onclick` attributes.",
    "title": "CVE-2021-32641: Security Update for Auth0 Lock Library",
    "description": "CVE-2021-32641: Security Update for Auth0 Lock Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15259",
    "markdown": "# CVE 2020-15259: Security Update for ad-ldap-connector\n\n**Published**: 05 November 2020\n\n**CVE number**: CVE-2020-15259\n\n## Overview\n\nThe ad-ldap-connector admin console does not provide CSRF protection, which when exploited may result in remote code execution or confidential data loss. CSRF exploits may occur if the user visits a malicious page containing CSRF payload on the same machine that has access to the ad-ldap-connector admin console via a browser.\n\n## Am I affected?\n\nYou may be affected if you use the admin console included with ad-ldap-connector versions <=5.0.12.\n\nIf you do not have ad-ldap-connector admin console enabled or do not visit any other public URL while on the machine it is installed on, you are **not** affected.\n\n## How to fix that?\n\nUpgrade to the latest version of [ad-ldap-connector](https://github.com/auth0/ad-ldap-connector) and restart your admin console.\n\n## Will this update impact my users?\n\nThe fix provided in this version will not affect your users.",
    "title": "CVE 2020-15259: Security Update for ad-ldap-connector",
    "description": "CVE 2020-15259: Security Update for ad-ldap-connector",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/2020-03-31-wpauth0",
    "markdown": "# CVE-2020-5391, CVE-2020-5392, CVE-2020-6753, CVE-2020-7948, CVE-2020-7947: Security Update for WordPress Plugin for Auth0\n\n**Published**: March 31, 2020\n\n**CVE numbers**: CVE-2020-5391, CVE-2020-5392, CVE-2020-6753, CVE-2020-7948, CVE-2020-7947\n\n**Credit**: Muhamad Visat\n\n## Overview\n\nAuth0 has released a new major version of the [WordPress Plugin for Auth0](https://github.com/auth0/wp-auth0) to address several vulnerabilities.\n\nWe recommend you review the following security advisories and upgrade to the new major version:\n\n*   CSRF controls missing for domain field in Auth0 WP plugin: [CVE-2020-5391](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5391)\n    \n*   Stored XSS in Auth0 WP plugin (Settings page): [CVE-2020-5392](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5392)\n    \n*   Stored XSS in Auth0 WP plugin (multiple pages): [CVE-2020-6753](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-6753)\n    \n*   CSV injection vulnerabilities in Auth0 WP plugin: [CVE-2020-7947](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7947)\n    \n*   Insecure direct object reference in Auth0 WP plugin: [CVE-2020-7948](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7948)\n    \n\n## Am I affected?\n\nCustomers using any version of the WordPress Plugin for Auth0 3.11.3 or earlier can be affected.\n\n## How to fix that?\n\nCustomers using [WordPress Plugin for Auth0](https://github.com/auth0/wp-auth0) need to upgrade to version 4.0.0 or higher.\n\n## Will this update impact my users?\n\nThe [release notes](https://github.com/auth0/wp-auth0/blob/master/CHANGELOG.md) provide more in-depth information about the changes that were made, and the [migration instructions](https://github.com/auth0/wp-auth0/blob/master/MIGRATE-v3-TO-v4.md) provide more in-depth information about the upgrade path.",
    "title": "CVE-2020-5391, CVE-2020-5392, CVE-2020-6753, CVE-2020-7948, CVE-2020-7947: Security Update for WordPress Plugin for Auth0",
    "description": "CVE-2020-5391, CVE-2020-5392, CVE-2020-6753, CVE-2020-7948, CVE-2020-7947: Security Update for WordPress Plugin for Auth0",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15084",
    "markdown": "# CVE-2020-15084: Security Update for express-jwt Library\n\n**Published**: June 30, 2020\n\n**CVE number**: CVE-2020-15084\n\n**Credit**: IST Group\n\n## Overview\n\nVersions before and including 5.3.3, we are not enforcing the **algorithms** entry to be specified in the configuration.\n\nWhen **algorithms** is not specified in the configuration, with the combination of jwks-rsa or potentially other asymmetric crypto libraries, it may lead to authorization bypass.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using express-jwt, AND\n    \n*   You do not have **algorithms** configured in your express-jwt configuration, AND\n    \n*   You are using libraries such as jwks-rsa as the **secret**.\n    \n\n## How to fix that?\n\nSpecify **algorithms** in the express-jwt configuration. The following is an example of a proper configuration:\n\n```\nconst checkJwt = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://{DOMAIN}/.well-known/jwks.json`\n  }),\n  // Validate the audience and the issuer.\n  audience: process.env.AUDIENCE,\n  issuer: `https://{DOMAIN}/`,\n  // restrict allowed algorithms\n  algorithms: ['RS256']\n});\n```\n\n## Will this update impact my users?\n\nThe fix provided in the patch will not affect your users if you specified the algorithms allowed. The patch now makes algorithms a required configuration.",
    "title": "CVE-2020-15084: Security Update for express-jwt Library",
    "description": "CVE-2020-15084: Security update for Express-jwt Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-15119",
    "markdown": "# CVE-2020-15119: Security Update for Auth0 Lock Library\n\n**Published**: August 16, 2020\n\n**CVE number**: CVE-2020-15119\n\n**Credit**: [Muhamad Visat](https://github.com/mvisat)\n\n## Overview\n\nVersions before and including `11.25.1` are using `dangerouslySetInnerHTML` to display an informational message when used with a Passwordless or Enterprise connection.\n\n*   For a Passwordless connection, the value of the input (email or phone number) is displayed back to the user while waiting for verification code input.\n    \n*   For an Enterprise connection, the value of the input (IdP Domain) from the Enterprise connection setup screen (Auth0 Dashboard) is displayed back to the user when the Lock widget opens.\n    \n\nWhen a Passwordless or Enterprise connection is used, the application and its users might be exposed to cross-site scripting (XSS) attacks.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using `auth0-lock`\n    \n*   You are using Passwordless or Enterprise connection mode\n    \n\n## How to fix that?\n\nUpgrade to version `11.26.3`.\n\n### Will this update impact my users?\n\nThe fix provided in the patch will not affect your users.",
    "title": "CVE-2020-15119: Security Update for Auth0 Lock Library",
    "description": "CVE-2020-15119: Security Update for Auth0 Lock Library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2020-5263",
    "markdown": "# CVE-2020-5263: Security Update for auth0.js Library\n\n**Published**: April 09, 2020\n\n**CVE number**: CVE-2020-5263\n\n**Credit**: Bogdan Vitoc (Spatial Systems Inc)\n\n## Overview\n\nBetween versions 8.0.0 and 9.13.1 (inclusive), in the case of an (authentication) error, the error object returned by the library contains the original request of the user, which may include the plaintext password the user entered.\n\nIf the error object is exposed or logged without modification, the application risks password exposure.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using Auth0.js version between 8.0.0 and 9.13.1 (inclusive).\n    \n*   You store or display error objects without filtering.\n    \n\n## How to fix that?\n\nDevelopers should upgrade auth0.js to version 9.13.2 or later where user inputted passwords are masked in errors. If upgrading is not possible, a temporary fix may include not storing the error object or displaying it publicly without modification.\n\n## Will this update impact my users?\n\nThis fix patches the Auth0.js and may require changes in application code due to password no longer available in error object, but it will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2020-5263: Security Update for auth0.js Library",
    "description": "CVE-2020-5263: Security Update for auth0.js library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-7644",
    "markdown": "# CVE-2019-7644: Security Vulnerability in Auth0-WCF-Service-JWT\n\n**Published**: February 15, 2019\n\n**CVE number**: CVE-2019-7644\n\n**Credit**: Conny Dahlgren, Security Researcher at DevilSec AB\n\n## Overview\n\nAll versions of [Auth0-WCF-Service-JWT](https://www.nuget.org/packages/Auth0-WCF-Service-JWT/) NuGet package lower than 1.0.4 include sensitive information about the expected JWT signature in an error message emitted when JWT signature validation fails:\n\n`Invalid signature. Expected 8Qh5lJ5gSaQylkSdaCIDBoOqKzhoJ0Nutkkap8RgB1Y= got 8Qh5lJ5gSaQylkSdaCIDBoOqKzhoJ0Nutkkap8RgBOo=`\n\nThis vulnerability allows attackers to use this error message to obtain a valid signature for arbitrary JWT tokens. This way attackers can forge tokens to bypass authentication and authorization mechanisms.\n\n## Am I affected?\n\nYou are affected by this vulnerability if the following conditions apply:\n\n*   You use a version of [Auth0-WCF-Service-JWT](https://www.nuget.org/packages/Auth0-WCF-Service-JWT/) NuGet package lower than 1.0.4\n    \n*   You show signature verification exception message in the user interface or make it otherwise available to the attacker (for example through logs or diagnostic messages)\n    \n\n## How to fix that?\n\nDevelopers using the [Auth0-WCF-Service-JWT](https://www.nuget.org/packages/Auth0-WCF-Service-JWT/) library need to upgrade to the latest version 1.0.4.\n\nThe updated package is available on [NuGet](https://www.nuget.org/): `Install-Package Auth0-WCF-Service-JWT -Version 1.0.4`\n\n### Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2019-7644: Security Vulnerability in Auth0-WCF-Service-JWT",
    "description": "CVE-2019-7644: Security vulnerability in Auth0-WCF-Service-JWT for ASP.NET",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-16929",
    "markdown": "# CVE-2019-16929: Security Vulnerability in auth0.net\n\n**Published**: 10/03/2019\n\n**CVE number**: CVE-2019-16929\n\n**Credit**: Dennis Detering (Spike Reply GmbH)\n\n## Overview\n\nVersions of [auth0.net](https://github.com/auth0/auth0.net) and associated NuGet Package [Auth0.AuthenticationAPI](https://www.nuget.org/packages/Auth0.AuthenticationApi/) from `5.8.0` to `6.5.3` inclusive include a class named `IdentityTokenValidator` with a public `ValidateAsync` method, that performs limited validation suitable only for auth0 issued tokens.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using the `IdentityTokenValidator` to validate untrusted ID tokens\n    \n*   You are using a version of Auth0.AuthenticationAPI between `5.8.0` and `6.5.3` inclusive\n    \n\n## How to fix that?\n\nDevelopers should not use the `IdentityTokenValidator` class to validate untrusted ID tokens. See [Validate ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens/validate-id-tokens) for our recommendations for validating ID tokens. [https://jwt.io/](https://jwt.io/) is a good resource on open source JWT validation libraries and their capabilities. Note that additional logic may be required based upon your use case.\n\nDevelopers using the [auth0.net](https://github.com/auth0/auth0.net) and associated NuGet Package [Auth0.AuthenticationAPI](https://www.nuget.org/packages/Auth0.AuthenticationApi/) between `5.8.0` and `6.5.3` inclusive should upgrade to the latest version `6.5.4` to prevent accidental usage of the `IdentityTokenValidator` class.\n\n### Will this update impact my users?\n\nNo. This fix patches the client library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2019-16929: Security Vulnerability in auth0.net",
    "description": "CVE-2019-16929: Security vulnerability in auth0.net",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-20174",
    "markdown": "# CVE-2019-20174: Security Update for Auth0 Lock Library\n\n**Published**: January 30, 2020\n\n**CVE number**: CVE-2019-20174\n\n**Credit**: Muhamad Visat\n\n## Overview\n\nAuth0 Lock version 11.20.4 and earlier did not properly sanitize the generated HTML code. Customers using the `additionalSignUpFields` customization option to add a checkbox to the sign-up dialog who are passing a `placeholder` property obtained from an untrusted source (e.g., a query parameter) could allow cross-site scripting (XSS) on their sign-up pages.\n\n## Am I affected?\n\nYou are affected by this vulnerability if all of the following conditions apply:\n\n*   You are using Auth0 Lock version 11.20.4 or earlier.\n    \n*   You pass `additionalSignUpFields` as an option when initializing Lock, and it includes a field of type `checkbox` with a `placeholder` value obtained from an untrusted source.\n    \n\nAn example of a vulnerable snippet is the following where the `placeholder` value is partially user-controlled by the `name` query parameter:\n\n```\n<script>\n    var params = new URLSearchParams(window.location.search);\n    var options = {\n        auth: {\n            redirectUrl: 'http://localhost:12345/callback',\n            responseType: 'code',\n            params: {\n                scope: 'openid email',\n            },\n        },\n        additionalSignUpFields: [{\n            name: 'agree',\n            type: 'checkbox',\n            placeholder: \"I agree to Terms & Conditions for \" + params.get('name'),\n        }],\n    };\n    var lock = new Auth0Lock('<CLIENT_ID>', '<TENANT_NAME>.auth0.com', options);\n    lock.show({\n        allowShowPassword: true,\n        initialScreen: 'signUp',\n    });\n</script>\n```\n\n## How to fix that?\n\nDevelopers using Auth0’s Lock sign-in solution need to upgrade to version 11.21.0 or later. Version 11.21.0 introduces two changes:\n\n1.  The existing `placeholder` property is now treated as plain text to mitigate the problem.\n    \n2.  A new `placeholderHTML` property is introduced that indicates the level of control it provides and that its value should be supplied only from trusted sources.\n    \n\n## Will this update impact my users?\n\nThis fix patches the Auth0 Lock widget and may require changes in application code, but it will not impact your users, their current state, or any existing sessions.\n\nDevelopers using the `placeholder` property with HTML content from a trusted source should start using the `placeholderHTML` property to continue providing the same user experience.",
    "title": "CVE-2019-20174: Security Update for Auth0 Lock Library",
    "description": "CVE-2019-20174: Security Update for Auth0 Lock library",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2019-13483",
    "markdown": "# CVE-2019-13483: Security Vulnerability in Passport-SharePoint\n\n**Published**: 7/23/2019\n\n**CVE number**: CVE-2019-13483\n\n## Overview\n\nVersions of [Passport-SharePoint](https://github.com/auth0/passport-sharepoint) prior to **0.4.0** do not validate the JWT signature of an Access Token before processing.\n\nThis vulnerability allows attackers to forge tokens and bypass authentication and authorization mechanisms.\n\n## Am I affected?\n\nYou are affected by this vulnerability if you use a [Passport-SharePoint](https://github.com/auth0/passport-sharepoint) version earlier than 0.4.0.\n\n## How do I fix this?\n\nDevelopers using the [Passport-SharePoint](https://github.com/auth0/passport-sharepoint) library must upgrade to version `0.4.0`.\n\nPlease note that Auth0 has deprecated and will no longer maintain this library. Developers should plan to discontinue its use.\n\n### Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but it will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2019-13483: Security Vulnerability in Passport-SharePoint",
    "description": "CVE-2019-13483: Details about a security vulnerability in Passport-SharePoint",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-15121",
    "markdown": "# CVE-2018-15121: Security Vulnerability in auth0-aspnet and auth0-aspnet-owin\n\n**Published**: August 6, 2018\n\n**CVE number**: CVE-2018-15121\n\n**Credit**: Kévin Chalet\n\n## Overview\n\nAll versions of the [auth0-aspnet](https://github.com/auth0/auth0-aspnet) and [auth0-aspnet-owin](https://github.com/auth0/auth0-aspnet-owin) packages have a security vulnerability that leave client applications vulnerable to a Cross-Site Request Forgery (CSRF) attack during authorization and authentication operations.\n\nThe root cause of this vulnerability is lack of use and verification of the `state` parameter in OAuth 2.0 and OpenID Connect (OIDC) protocols that allows an attacker to inject their authorization code into victim's session.\n\n## Am I affected?\n\nIf you use any version of `auth0-aspnet` or `auth0-aspnet-owin`, you are affected by this vulnerability.\n\n## How to fix that?\n\nFurther development of the [auth0-aspnet](https://github.com/auth0/auth0-aspnet) and [auth0-aspnet-owin](https://github.com/auth0/auth0-aspnet-owin) packages has been discontinued. We strongly recommend moving to OWIN 4 and the official `Microsoft.Owin.Security.OpenIdConnect` package, which is not vulnerable.\n\nIf your application is not currently making use of OWIN, please refer to Microsoft's [OWIN documentation](https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/) to enable it in your application.\n\n### Will this update impact my users?\n\nCurrent user states and sessions will be invalidated, as different libraries will handle authentication.",
    "title": "CVE-2018-15121: Security Vulnerability in auth0-aspnet and auth0-aspnet-owin",
    "description": "CVE-2018-15121: Security vulnerability in deprecated Auth0 middleware for ASP.NET",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-11537",
    "markdown": "# CVE-2018-11537: Security Update for angular-jwt Allow List Bypass\n\n**Published**: June 5, 2018\n\n**CVE number**: CVE-2018-11537\n\n**Credit**: Stephan Hauser\n\n## Overview\n\nThe [domain allowlisting](https://github.com/auth0/angular-jwt#whitelisting-domains) feature can be bypassed. For example, if the setting is initialized with:\n\n`jwtInterceptorProvider.whiteListedDomains = ['whitelisted.Example.com'];`\n\nAn attacker can set up a domain `whitelistedXexample.com` that will pass the allow list filter. The root cause for this is that `angular-jwt` always treats `whiteListedDomains` entries as regular expressions and causes `.` separator to match any character.\n\n## Am I affected?\n\nIf the following apply you are affected by this vulnerability:\n\n*   You use a version of angular-jwt lower than `0.1.10`\n    \n*   You use domain allow listing in your code\n    \n\n## How to fix that?\n\nDevelopers using the angular-jwt library need to upgrade to the latest version: `0.1.10`.\n\nUpdated package is available on [NPM](https://npmjs.com/): `npm install angular-jwt@0.1.10`\n\nTo make it easier to keep up with security updates in the future, please make sure your `package.json` file is updated to take patch and minor level updates of our libraries:\n\n```\n{\n  \"dependencies\": {\n    \"angular-jwt\": \"^0.1.10\"\n  }\n}\n```\n\n### Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2018-11537: Security Update for angular-jwt Allow List Bypass",
    "description": "CVE-2018-11537: Security Update for angular-jwt Allow List Bypass",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-6874",
    "markdown": "# CVE-2018-6874: Security Vulnerability in the Auth0 Authentication Service\n\n**Published**: April 4, 2018\n\n**CVE number**: CVE-2018-6874\n\n**Credit**: Internal\n\n## Overview\n\nA vulnerability has been identified in the Auth0 authentication service. Tenants of the service with the Legacy Lock API flag enabled in the service’s management dashboard are affected. If the flag is not visible, it is disabled. Disabling the flag may break applications employing the auth0.js library with version `< 9.0.0` or the Lock library with version `< 11.0.0` for crossdomain username/password based authentication - also known as [embedded login](https://auth0.com/docs/authenticate/login/universal-vs-embedded-login). Further, any cross-domain use of the `/usernamepassword/login` authentication api endpoint outside of those libraries may also be affected.\n\nAfter the verification of user credentials on `/usernamepassword/login`, an HTML form is rendered into the user’s browser and automatically executed. It POSTs a JSON Web Token (JWT) to the `/login/callback` endpoint. This authenticated token maintains state regarding the identity of the user; this cannot be done directly due to crossdomain session management restrictions maintained by most modern browsers. Due to the lack of session binding, this form post is susceptible to [CSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)). An attacker with valid user credentials at an Auth0 tenant can use them to gain such a form, and then employ techniques such as social engineering or clickjacking to have a victim’s browser execute it. The victim will then have a login session at the Auth0 tenant under the attacker’s account - and therefore be recognized as the attacker by any downstream application in its federation. Should the user undertake any actions while maliciously logged in as such, those actions and any related information will be visible to the attacker.\n\nThe attack does not allow any escalation of privileges on behalf of the attacker, and the victim’s actions visible to the attacker are restricted to whatever permissions have been granted to that attacker within the system. The victim will also be fully recognized as the attacker within the federation, and so may be shown account information or other context clues that reveal they are not operating within the auspices of their own account.\n\n## Am I affected?\n\nYou are affected if you employ username/password authentication (with any database and/or connection) for your Auth0 tenant, and the Legacy Lock API flag in the Auth0 management dashboard is visible and flagged on.\n\n## How to fix that?\n\nTo mitigate the vulnerability, toggle the flag to off. The `/usernamepassword/login` endpoint will still work for logins from the Universal Login page hosted on `/login`, however these - as same-domain logins - will be protected from CSRF. Otherwise, toggling the flag will disable cross-domain authentication on that endpoint.\n\nFor applications employing auth0.js version `< 9.0.0` or Lock version `< 11.0.0`, this may break user logins. Upgrading to auth0.js version `> 9.0.0` or Lock version `> 11.0.0` will restore embedded username/password authentication using cross-origin authentication (note the limitations). Applications are also encouraged to migrate to Universal Login.\n\nPrivate SaaS Appliances running versions `> 14591` with the Legacy Lock API flag set to off are not affected by this vulnerability.\n\n### Will this update impact my users?\n\nIf the Legacy Lock API is disabled without applications having migrated, then all user logins employing the affected functionality will break. Auth0 intends to enforce disablement of the Legacy Lock API for all tenants on July 16th, 2018. The choice of migration may affect the specific user experience of logging into your service, however users, their information, and their sessions will not be otherwise impacted.",
    "title": "CVE-2018-6874: Security Vulnerability in the Auth0 Authentication Service",
    "description": "CVE-2018-6874: Details about a security vulnerability identified in the Auth0 authentication service",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2017-17068",
    "markdown": "# CVE-2017-17068: Security Update for auth0.js Popup Callback Vulnerability\n\n**Published**: December 4, 2017\n\n**CVE number**: CVE-2017-17068\n\n**Credit**: [@AppCheckNG](https://twitter.com/AppCheckNG)\n\n## Overview\n\nA vulnerability has been identified in the [auth0.js JavaScript library](https://auth0.com/docs/libraries/auth0js), affecting versions < `8.12`.\n\nIf your site or application uses a popup callback page with `auth0.popup.callback()` then an attacker can take advantage of unrestricted cross-origin post message requests and gain access to the tokens of logged-in users. A malicious website could then use any acquired Access Tokens to invoke services on behalf of the user.\n\nThis update addresses the vulnerability by implementing origin verification so the message cannot be posted to a page that is not in a specified domain. If no domain is specified, only the domain where the callback page is hosted is allowed. An attacker would receive a cross-origin request error.\n\nPatching this vulnerability requires a library upgrade.\n\n## Am I affected?\n\nIf the following apply you are affected by this vulnerability:\n\n*   You use a version of auth0.js lower than `8.12`\n    \n*   You use a popup callback page with `auth0.popup.callback()` in your code\n    \n\n## How to fix that?\n\nDevelopers using the auth0.js library need to upgrade to the latest version: `8.12`.\n\nUpdated packages are available on npm. To ensure delivery of additional bug fixes moving forward, please make sure your `package.json` file is updated to take patch and minor level updates of our libraries.\n\n```\n{\n  \"dependencies\": {\n    \"auth0-js\": \"^8.12.0\"\n  }\n}\n```\n\n### Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2017-17068: Security Update for auth0.js Popup Callback Vulnerability",
    "description": "CVE-2017-17068: Security Update for auth0.js Popup Callback Vulnerability",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-6873",
    "markdown": "# CVE-2018-6873: Security Vulnerability in the Auth0 Authentication Service\n\n**Published**: April 4, 2018\n\n**CVE number**: CVE-2018-6873\n\n**Credit**: [Cinta Infinita](http://www.cintainfinita.com/)\n\n## Overview\n\nA vulnerability was identified in the Auth0 authentication service. It affected all Auth0 tenants, and was patched on October 15th, 2017 within four hours of report for all public cloud customers. This notice is informational and is intended to explain the vulnerability and the mitigation taken.\n\nAs part of an user authentication flow employed by the Auth0 service, a JSON Web Token (JWT) is passed to the `/login/callback` endpoint identifying the user. This token contains a reference to which audience - an Auth0 tenant - it is intended for. A flaw in the Auth0 service did not properly validate this audience, and therefore allowed tokens intended for one tenant to be used at another. Further, the custom database functionality available to all Auth0 tenants allows for authenticated tokens to be generated with any desired identifier. Therefore, could an attacker learn the user identifier of an intended victim at a target tenant - which is generally considered public information - they could construct a token with that identifier. Due to the improper audience checking the target tenant would accept it, and establish a login session recognizing the attacker as the victim. This allowed for privilege escalation, among other possible attack vectors.\n\nA specific concern was the potential use of this attack on the Auth0 management service. Auth0 tenants are managed by tenant administrators, who have accounts on an \"authority tenant\" with relevant permissions. If an attacker could learn the user identifier of a tenant administrator on the tenant authority (such as by social engineering), this allowed the attacker to login as the administrator by the described attack method. The attacker could then undertake administration actions and view all information at the tenant.\n\nThe attack was never effective if the user had multifactor authentication enabled, which is recommended.\n\n## Am I affected?\n\nAll Auth0 tenants were affected, but have been patched. Public cloud tenants were patched within four hours of the vulnerability report.\n\nThe attack was never effective if the user had multifactor authentication enabled.\n\n## How to fix that?\n\nThe vulnerability was fixed by Auth0, accomplished by adding proper validation of the audience parameter. No additional actions are required of our customers.\n\n### Will this update impact my users?\n\nThe fix was invisible to all users.",
    "title": "CVE-2018-6873: Security Vulnerability in the Auth0 Authentication Service",
    "description": "CVE-2018-6873: Details about a security vulnerability identified in the Auth0 authentication service",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/secure/security-guidance/security-bulletins/cve-2018-7307",
    "markdown": "# CVE-2018-7307: Security Vulnerability for auth0.js < 9.3\n\n**Published**: February 26, 2018\n\n**CVE number**: CVE-2018-7307\n\n**Credit**: Internal\n\n## Overview\n\nA vulnerability has been identified in the [auth0.js JavaScript library](https://auth0.com/docs/libraries/auth0js), affecting versions < `9.3`.\n\nThis vulnerability allows an attacker to bypass the CSRF check from the [state parameter](https://auth0.com/docs/protocols/oauth2/oauth-state) if it's missing from the authorization response, leaving the client vulnerable to CSRF attacks.\n\nPatching this vulnerability requires a library upgrade.\n\n## Am I affected?\n\nIf you use a version of auth0.js lower than `9.3` then you are affected by this vulnerability.\n\n## How to fix that?\n\nDevelopers using the auth0.js library need to upgrade to the version `9.3` or higher.\n\nUpdated packages are available on npm. To ensure delivery of additional bug fixes moving forward, please make sure your `package.json` file is updated to take patch and minor level updates of our libraries.\n\n```\n{\n  \"dependencies\": {\n    \"auth0-js\": \"^9.3.0\"\n  }\n}\n```\n\n### Will this update impact my users?\n\nNo. This fix patches the library that your application runs, but will not impact your users, their current state, or any existing sessions.",
    "title": "CVE-2018-7307: Security Vulnerability for auth0.js < 9.3",
    "description": "CVE-2018-7307: Details about a security vulnerability identified for auth0.js < 9.3",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/users/get-authentication-methods",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/users/post-authentication-methods",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/introduction",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/api/management/v2/guardian/put-policies",
    "markdown": "Auth0 Management API v2",
    "title": "Auth0 Management API v2",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-accounts/user-profiles/root-attributes/set-root-attributes-during-user-import",
    "markdown": "# Set Root Attributes During User Import\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/jobs/usersimports' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: multipart/form-data ' \\\n  --data '{ \"connection_id\": \"CONNECTION_ID\", \"users\": \"JSON_USER_FILE_PATH\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/jobs/usersimports\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data \");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddParameter(\"multipart/form-data \", \"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/jobs/usersimports\"\n\n\tpayload := strings.NewReader(\"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data \")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/jobs/usersimports\")\n  .header(\"content-type\", \"multipart/form-data \")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .body(\"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/jobs/usersimports',\n  headers: {\n    'content-type': 'multipart/form-data ',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN'\n  },\n  data: '{ \"connection_id\": \"CONNECTION_ID\", \"users\": \"JSON_USER_FILE_PATH\" }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data \",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"connection_id\": \"CONNECTION_ID\", \"users\": \"JSON_USER_FILE_PATH\" }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/jobs/usersimports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/jobs/usersimports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: multipart/form-data \"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\"\n\nheaders = {\n    'content-type': \"multipart/form-data \",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/jobs/usersimports\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/jobs/usersimports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data '\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest.body = \"{ \\\"connection_id\\\": \\\"CONNECTION_ID\\\", \\\"users\\\": \\\"JSON_USER_FILE_PATH\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data \",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"\n]\n\nlet postData = NSData(data: \"{ \"connection_id\": \"CONNECTION_ID\", \"users\": \"JSON_USER_FILE_PATH\" }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/jobs/usersimports\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Set Root Attributes During User Import",
    "description": "Learn how to set root attributes for users during import using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/user-accounts/user-profiles/root-attributes/set-root-attributes-during-user-sign-up",
    "markdown": "# Set Root Attributes During User Signup\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/users' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"connection\": CONNECTION_NAME, \"email\": EMAIL_VALUE, \"password\": PASSWORD_VALUE, \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users\"\n\n\tpayload := strings.NewReader(\"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/users',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ \"connection\": CONNECTION_NAME, \"email\": EMAIL_VALUE, \"password\": PASSWORD_VALUE, \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"connection\": CONNECTION_NAME, \"email\": EMAIL_VALUE, \"password\": PASSWORD_VALUE, \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"connection\\\": CONNECTION_NAME, \\\"email\\\": EMAIL_VALUE, \\\"password\\\": PASSWORD_VALUE, \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ \"connection\": CONNECTION_NAME, \"email\": EMAIL_VALUE, \"password\": PASSWORD_VALUE, \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Set Root Attributes During User Signup",
    "description": "Learn how to set root attributes for users during signup using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/api/management/guides/users/update-root-attributes-users",
    "markdown": "# Update Root Attributes for Users\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/users/USER_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: '{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/users/USER_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"given_name\\\": GIVEN_NAME_VALUE, \\\"family_name\\\": FAMILY_NAME_VALUE,\\\"name\\\": NAME_VALUE, \\\"nickname\\\": NICKNAME_VALUE,\\\"picture\\\": PICTURE_VALUE }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\n\nlet postData = NSData(data: \"{ \"given_name\": GIVEN_NAME_VALUE, \"family_name\": FAMILY_NAME_VALUE,\"name\": NAME_VALUE, \"nickname\": NICKNAME_VALUE,\"picture\": PICTURE_VALUE }\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Update Root Attributes for Users",
    "description": "Learn how to update root attributes in existing user profiles using the Auth0 Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-roles",
    "markdown": "# View Roles Assigned to Users\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/roles\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/roles',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/USER_ID/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View Roles Assigned to Users",
    "description": "Learn how to view roles assigned to a user using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-permissions",
    "markdown": "# View User Permissions\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/permissions',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/USER_ID/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View User Permissions",
    "description": "Learn how to view permissions assigned to a user using the Auth0 Dashboard and Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/post-user-registration-flow/api-object",
    "markdown": "# Actions Triggers: post-user-registration - API Object\n\nThe API object for the `post-user-registration` Actions trigger includes:\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`. For errors, the returned object will have a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects with a `value` property holding the cached value as well as an `expires_at` property indicating the maximum expiry of the record in milliseconds since the Unix epoch.\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way will have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes will be used. Lifetimes may not exceed the maximum duration listed at [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `ttl`. If both options are supplied, the earlier expiry of the two will be used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `expires_at`. If both options are supplied, the earlier expiry of the two will be used. |",
    "title": "Actions Triggers: post-user-registration - API Object",
    "description": "Learn about the post-user-registration Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-permissions-from-users",
    "markdown": "# Remove Permissions from Users\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"permissions\": [ { \"resource_server_identifier\": \"API_ID\", \"permission_name\": \"PERMISSION_NAME\" }, { \"resource_server_identifier\": \"API_ID\", \"permission_name\": \"PERMISSION_NAME\" } ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/permissions\"\n\n\tpayload := strings.NewReader(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/permissions',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    permissions: [\n      {resource_server_identifier: 'API_ID', permission_name: 'PERMISSION_NAME'},\n      {resource_server_identifier: 'API_ID', permission_name: 'PERMISSION_NAME'}\n    ]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"permissions\": @[ @{ @\"resource_server_identifier\": @\"API_ID\", @\"permission_name\": @\"PERMISSION_NAME\" }, @{ @\"resource_server_identifier\": @\"API_ID\", @\"permission_name\": @\"PERMISSION_NAME\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/users/USER_ID/permissions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"permissions\": [\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ],\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Remove Permissions from Users",
    "description": "Learn how to remove permissions directly assigned to a user using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/delete-roles",
    "markdown": "# Delete Roles\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/roles/ROLE_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Delete Roles",
    "description": "Learn how to delete a role using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/actions/flows-and-triggers/send-phone-message-flow/api-object",
    "markdown": "# Actions Triggers: send-phone-message - API Object\n\nThe API object for the `send-phone-message` Actions trigger includes:\n\n## `api.cache`\n\nStore and retrieve data that persists across executions.\n\n### `api.cache.delete(key)`\n\nDelete a record describing a cached value at the supplied key if it exists.\n\nReturns a `CacheWriteResult` object with `type: \"success\"` if a value was removed from the cache. A failed operation returns `type: \"error\"`. For errors, the returned object will have a `code` property that indicates the nature of the failure.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.get(key)`\n\nRetrieve a record describing a cached value at the supplied `key`, if it exists. If a record is found, the cached value can be found at the `value` property of the returned object.\n\nReturns a cache record if an item is found in the cache for the supplied `key`. Cache records are objects with a `value` property holding the cached value as well as an `expires_at` property indicating the maximum expiry of the record in milliseconds since the Unix epoch.\n\n**Important:** This cache is designed for short-lived, ephemeral data. Items may not be available in later transactions even if they are within their supplied their lifetime.\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n\n### `api.cache.set(key, value, [options])`\n\nStore or update a string value in the cache at the specified key.\n\nValues stored in this cache are scoped to the Trigger in which they are set. They are subject to the [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\nValues stored in this way will have lifetimes of up to the specified `ttl` or `expires_at` values. If no lifetime is specified, a default of lifetime of 15 minutes will be used. Lifetimes may not exceed the maximum duration listed at [Actions Cache Limits](https://auth0.com/docs/customize/actions/limitations).\n\n| Parameter | Description |\n| --- | --- |\n| `key` | _String_. The key of the record stored in the cache. |\n| `value` | _String_. The value of the record to be stored. |\n| `options` | _Optional object_. Options for adjusting cache behavior. |\n| `options.expires_at` | _Optional number_. The absolute expiry time in milliseconds since the unix epoch. While cached records may be evicted earlier, they will never remain beyond the the supplied `expires_at`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `ttl`. If both options are supplied, the earlier expiry of the two will be used. |\n| `options.ttl` | _Optional number_. The time-to-live value of this cache entry in milliseconds. While cached values may be evicted earlier, they will never remain beyond the the supplied `ttl`.<br><br>_Note:_ This value should not be supplied if a value was also provided for `expires_at`. If both options are supplied, the earlier expiry of the two will be used. |",
    "title": "Actions Triggers: send-phone-message - API Object",
    "description": "Learn about the send-phone-message Action trigger's API object.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook",
    "markdown": "# Delegated Administration: Access Hook\n\nBecause the Filter Hook only applies filtering logic, you'll need a second layer of logic to determine if the current user (or the person acting as the administrator) is allowed to access a specific user.\n\nTo learn more about the Filter Hook, read [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook).\n\nThe **Access Hook** allows you to determine if the current user is allowed to read, delete, block, unblock, or update a specific user.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **payload**: Payload object.\n        \n        *   **action**: Current action (e.g., **delete:user**) that is being executed.\n            \n        *   **user**: User on which the action is being executed.\n            \n*   **callback(error)**: Callback to which you can return an error if access is denied.\n    \n\n## Sample use\n\nKelly manages the Finance department, and she should only be able to access users within her department.\n\n```\nfunction(ctx, callback) {\n  if (ctx.payload.action === 'delete:user') {\n    return callback(new Error('You are not allowed to delete users.'));\n  }\n\n  // Get the department from the current user's metadata.\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!department || !department.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // The IT department can access all users.\n  if (department === 'IT') {\n    return callback();\n  }\n\n  ctx.log('Verifying access:', ctx.payload.user.app_metadata.department, department);\n\n  if (!ctx.payload.user.app_metadata.department || ctx.payload.user.app_metadata.department !== department) {\n    return callback(new Error('You can only access users within your own department.'));\n  }\n\n  return callback();\n}\n```\n\n## Notes\n\nIf this hook is not configured, all users will be accessible to the current user.\n\nThe Hook supports the following action names (which you set using as the value for **ctx.payload.action**):\n\n*   read:user\n    \n*   delete:user\n    \n*   reset:password\n    \n*   change:password\n    \n*   change:username\n    \n*   change:email\n    \n*   read:devices\n    \n*   read:logs\n    \n*   remove:multifactor-provider\n    \n*   block:user\n    \n*   unblock:user\n    \n*   send:verification-email\n    \n\n## Learn more\n\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
    "title": "Delegated Administration: Access Hook",
    "description": "Learn how to use the Access Hook with the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook",
    "markdown": "# Delegated Administration: Filter Hook\n\nBy default, users with the **Delegated Admin - User** role see all users associated with the Auth0 account. However, you can filter the data users see using the **Filter Hook**.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n*   **callback(error, query)**: Callback to which you can return an error or the lucene query used when filtering the users. The extension will send this query to the [**Get Users** endpoint](https://auth0.com/docs/api/management/v2#!/Users/get_users) of the Management API.\n    \n\nTo learn more about the lucene query, review [User Search Query Syntax](https://auth0.com/docs/manage-users/user-search/user-search-query-syntax).\n\n### Sample use\n\nIf Kelly manages the Finance department, she should only see the users that are also part of the Finance department. We'll filter the users with respect to the department of the current user (which, in this case, is the Finance department and Kelly, respectively).\n\n```\nfunction(ctx, callback) {\n  // Get the department from the current user's metadata.\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!department || !department.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // The IT department can see all users.\n  if (department === 'IT') {\n    return callback();\n  }\n\n  // Return the lucene query.\n  return callback(null, 'app_metadata.department:\"' + department + '\"');\n}\n```\n\n### Search engine override\n\nYou can override the default search engine by specifying your choice in the response.\n\n```\n// Return the lucene query.\nreturn callback(null, { query: 'app_metadata.department:\"' + department + '\"', searchEngine: 'v2' });\n```\n\n## Notes\n\nDo not use single quotes, double quotes, or any other special characters (such as **+** or **\\-**) in terms on which you'll want to filter. This may cause issues with the Lucene query.\n\nIf you use multiple operators like OR, NOT, or AND, use wrap those search parameters in parentheses \\[`()`\\] to delineate which operator is in effect where.\n\nIf you do not configure this Hook, the search returns **all users**.\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
    "title": "Delegated Administration: Filter Hook",
    "description": "Learn how to use the Filter Hook with the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook",
    "markdown": "# Delegated Administration: Memberships Query Hook\n\nWhen creating a new user, the User Interface shows a dropdown where you can choose the membership(s) you want assigned to a user. These memberships are then defined using the **Memberships Query Hook**.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n*   **callback(error, { createMemberships: true/false, memberships: })**: Callback to which you can return an error and an object containing the membership configuration.\n    \n\n## Sample use\n\nUsers of the IT department should be able to create users in other departments. Users from other departments should only be able to create users for their departments.\n\n```\nfunction(ctx, callback) {\n  var currentDepartment = ctx.payload.user.app_metadata && ctx.payload.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(null, [ ]);\n  }\n\n  if (currentDepartment === 'IT') {\n    return callback(null, [ 'IT', 'HR', 'Finance', 'Marketing' ]);\n  }\n\n  return callback(null, [ ctx.payload.user.app_metadata.department ]);\n}\n```\n\n## Notes\n\nBecause you can only use this query in the UI, you'll need to assign memberships using the **Write Hook** if you need to enforce rules regarding the assignment of users to specific departments.\n\nIf there is only one membership group possible, the Memberships field will not show in the UI.\n\nYou can allow the end user to enter any value into the **memberships** field by setting **createMemberships** to true:\n\n```\nfunction(ctx, callback) {\n  var currentDepartment = ctx.payload.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(null, [ ]);\n  }\n\n  return callback(null, {\n    createMemberships: ctx.payload.user.app_metadata.department === 'IT' ? true : false,\n    memberships: [ ctx.payload.user.app_metadata.department ]\n  });\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
    "title": "Delegated Administration: Memberships Query Hook",
    "description": "Learn how to use the Memberships Query Hook with the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-role-permissions",
    "markdown": "# View Role Permissions\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/roles/ROLE_ID/permissions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "View Role Permissions",
    "description": "Learn how to view permissions added to a role using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-users-assigned-to-roles",
    "markdown": "# View Users Assigned to Roles\n\nYou can view the users assigned to a [role](https://auth0.com/docs/authorization/concepts/rbac) using the Auth0 Dashboard or the Management API. Roles are used with the API Authorization Core feature set.\n\n## Prerequisites\n\nFor role-based access control (RBAC) to work properly, you must enable it for your API using either the Dashboard or the Management API. The Authorization Core functionality is different from the Authorization Extension. For a comparison, read [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension).\n\n## Dashboard\n\n1.  Go to [Dashboard > User Management > Roles](https://manage.auth0.com/#/users) and click the name of the role to view.\n    \n    ![Dashboard - User Management - Roles List](https://images.ctfassets.net/cdy7uua7fh8z/4tHd5gg5rlYtwfJtwQig3o/c32ad91f1f368565d9940fb8ee1be65c/Screen_Shot_2021-05-20_at_7.29.11_PM.png)\n2.  Click the **Users** tab.\n    \n    ![Dashboard - User Management - Roles - Users](https://images.ctfassets.net/cdy7uua7fh8z/71fXrC53nQD9sWsiDiM1hv/7cc018e64b066f3d46e00f5f165a7542/Screen_Shot_2021-05-20_at_7.35.27_PM.png)\n\nThe following information is displayed for each user:\n\n| Column | Description |\n| --- | --- |\n| Picture | User's picture from the user profile. |\n| Name | User's name from the user profile. |\n| Email address | User's email address from the user profile. |\n\n## Management API\n\nTo retrieve a list of users assigned to a role, see [Get a Role's Users](https://auth0.com/docs/api/management/v2#!/Roles/get_role_user).\n\n## Learn more\n\n*   [Assign Roles to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users)\n*   [Create Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles)\n*   [Delete Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/delete-roles)\n*   [Edit Role Definitions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/edit-role-definitions)\n*   [Remove Permissions from Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/remove-permissions-from-roles)\n*   [Remove Roles from Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users)",
    "title": "View Users Assigned to Roles",
    "description": "Describes how to view users assigned to a role using the Auth0 Dashboard or Management API.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook",
    "markdown": "# Delegated Administration: Settings Query Hook\n\nThe **Settings Query Hook** allows you to customize the look and feel of the Delegated Administration extension.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **request.user**: User currently logged in.\n        \n    *   **locale**: Locale (as inferred from the URL) -- `https://{yourTenant}.us.webtask.io/auth0-delegated-admin/en/users` will set **locale** to `en`.\n        \n*   **callback(error, settings)**: Callback to which you can return an error and a settings object.\n    \n\n## Sample use\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker. If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments',\n      menuName: ctx.request.user.name\n    },\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    // This option allows you to restrict creating new users\n    canCreateUser: (department === 'IT')\n  });\n}\n```\n\n### Properties\n\n*   **connections**: List of the connections this admin is allowed to create and edit users within.\n    \n*   **dict**: Dictionary that allows you to overwrite the title of the dashboard and the **Memberships** label in the Create User dialog.\n    \n    *   **dict.title**: Title to display at the top of the UI.\n        \n    *   **dict.memberships**: Label to set for memberships fields.\n        \n    *   **dict.menuName**: Name to set for the upper right-hand dropdown menu.\n        \n    *   **dict.logoutUrl**: Alternate URL for the logout menu option.\n        \n*   **userFields**: Array of user fields (see \"Custom fields\" below).\n    \n*   **css**: String URL to import CSS.\n    \n*   **altcss**: String URL to import a second set of CSS. You can use this to specify things like accessibility CSS for larger fonts. The user will be presented with a menu item allowing them to toggle this set of CSS on/off.\n    \n*   **languageDictionary**: String URL or Dictionary Object (see \"Localization\"below).\n    \n*   **suppressRawData**: Set to **true** to skip pages that show raw JSON\n    \n*   **errorTranslator**: Function that translates error messages based on localization. Example: `(function (error, languageDictionary) { return languageDictionary.customErrors[error] || error; }).toString()`\n    \n*   **canCreateUser**: Boolean flag. If set to `false`, removes `Create User` button and forbids creating new users, `true` by default.\n    \n\n## Custom fields\n\nBeginning with version 3.0 of the Delegated Admin Extension, you can define custom fields and specify their values. Custom fields can be stored in the **user metadata** and **app metadata** fields accessible during the user creation or update processes.\n\nYou may also customize existing fields defined by Auth0, such as email, username, name, and connection.\n\nTo use custom fields, you must:\n\n*   Add your list of **userFields** to the Settings Query Hook\n    \n*   Implement a Write Hook. Custom fields require the use of the Write Hook to properly update `user_metadata` and `app_metadata`. You must update the user object passed to the callback function with the `user_metadata` and `app_metadata` from the context (`ctx` object) provided to the Hook.\n    \n\nTo learn more about Write Hooks, read [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook).\n\nSample schema for **userFields**:\n\n```\nuserFields: [\n    {\n        \"property\": string, // required\n        \"label\": string,\n        \"sortProperty\": string,\n        \"display\": true || function.toString(),\n        \"search\": false || {\n            \"display\": true || function.toString()\n            \"listOrder\": 1,\n            \"listSize\": string(###%), // e.g. 15%\n            \"filter\": boolean,\n            \"sort\": boolean\n        },\n        \"edit\": false || {\n            \"display\": true || function.toString()\n            \"type\": \"text || select || password || hidden\",\n            \"component\": \"InputText || Input Combo || InputMultiCombo || InputSelectCombo\",\n            \"options\": Array(string) || Array ({ \"value\": string, \"label\": string }),\n            \"disabled\": true || false,\n            \"validationFunction\": function.toString()\n        },\n        \"create\": false || {\n            \"display\": true || function.toString()\n            \"type\": \"text || select || password || hidden\",\n            \"component\": \"InputText || Input Combo || InputMultiCombo || InputSelectCombo\",\n            \"options\": Array(string) || Array ({ \"value\": string, \"label\": string }),\n            \"disabled\": true || false,\n            \"validationFunction\": function.toString()\n        }\n    },\n    ...\n]\n```\n\n*   **property** (**required**): Property name of the **ctx.payload** object for the Write Hook. In the Write Hook, `\"property\": \"app_metadata.dbId\"` sets `ctx.payload.app_metadata.dbId`.\n    \n*   **label**: Label that will be used when adding a label to the field on the user info page, create page, edit profile page, or search page.\n    \n*   **sortProperty**: If sorting by a different field than this for the search table, use this field. Dot notation is allowed.\n    \n*   **display**: true || false || stringified => This is the default display value. If not overridden in search, edit, or create, it will use this value.\n    \n    *   if `true`, will just return `user.<property>`.\n        \n    *   Default: if `false` this value will not be displayed on any page (unless overridden in search, edit, or create).\n        \n    *   if stringified function: Executes function to get the value to display. Example: `(function display(user, value, languageDictionary) { return moment(value).fromNow(); }).toString()`\n        \n*   **search**: false || object => Describes how this field will behave on the search page.\n    \n    *   Default: if `false`, will not show up in the search table.\n        \n    *   **search.display**: Overrides the default display value.\n        \n    *   **search.listOrder**: Specifies the column order for the search display table.\n        \n    *   **search.listSize**: Specifies the default width of the column.\n        \n    *   **search.filter**: Specifies whether to allow this field to be searched in the search dropdown. Default is false.\n        \n    *   **search.sort**: Specifies whether this column is sortable. Use sortProperty if you want to sort by a field other than property. Default is false.\n        \n*   **edit**: false || object => Describes whether the field shows up on the edit dialogs. If not a default field and set to an object, this will show up in the `Change Profile` page on the User Actions dropdown on the user page.\n    \n    *   Default: if `false`, will not show up on any edit/update page.\n        \n    *   **edit.display**: Overrides the default display value.\n        \n    *   **edit.required**: Set to true to fail if it does not have a value. Default is false.\n        \n    *   **edit.type** **required**: text || select || password\n        \n    *   **edit.component**: InputText || Input Combo || InputMultiCombo || InputSelectCombo\n        \n        *   **InputText** (default): Simple text box.\n            \n        *   **InputCombo**: Searchable dropdown, single value only.\n            \n        *   **InputMultiCombo**: Searchable dropdown with multiple values allowed.\n            \n        *   **InputSelectCombo**: Select dropdown of options.\n            \n    *   **edit.options**: If component is one of InputCombo, InputMultiCombo, InputSelectCombo, the option values need to be specified.\n        \n        *   **Array(string)**: Array of values (the label and value fields will be set to the same value).\n            \n        *   **Array({ \"value\": string, \"label\": string })**: Allows you to set separate values for the value and label. This will result in the value in the Write Hook having the same value, but it can be trimmed down to just the value in the Write Hook.\n            \n        *   Server-side validation will ensure that any value specified for this field appears in the options array.\n            \n    *   **edit.disabled**: `true` if the component should be read only; default is false.\n        \n    *   **edit.validateFunction**: Stringified function for validation. Note that this validation function will run on both the server- and client-side. Example: `(function validate(value, values, context, languageDictionary) { if (value...) return 'something went wrong'; return false; }).toString()`.\n        \n*   **create**: false || object => Describes whether the field shows up on the create dialog.\n    \n    *   Default: if `false`, will not show up on the create page.\n        \n    *   **create.placeholder**: Provide placeholder text to show when input is empty.\n        \n    *   **create.required**: Set to true to fail if it does not have a value. Default is false.\n        \n    *   **create.type** **required**: text || select || password\n        \n    *   **create.component**: InputText || Input Combo || InputMultiCombo || InputSelectCombo\n        \n        *   **InputText** (default): Text box. Default for type text and password.\n            \n        *   **InputCombo**: Searchable dropdown, single value only.\n            \n        *   **InputMultiCombo**: Searchable dropdown with multiple values allowed.\n            \n        *   **InputSelectCombo**: Select dropdown of options.\n            \n    *   **create.options**: If component is one of InputCombo, InputMultiCombo, InputSelectCombo, the option values need to be specified.\n        \n        *   **Array(string)**: Simple array of values, label, and value will be set to the same.\n            \n        *   **Array({ \"value\": string, \"label\": string })**: Allows you to set separate values for both the value and label. This will result in the value in the Write Hook having the same value, but it can be trimmed down to just the value in the Write Hook.\n            \n        *   Server-side validation will ensure that any value specified for this field is in the options array.\n            \n    *   **create.disabled**: true if component should be read only, default is false.\n        \n    *   **create.validateFunction**: Stringified function for checking the validation.\n        \n        *   Example: `(function validate(value, values, context, languageDictionary) { if (value...) return 'something went wrong'; return false; }).toString()`\n            \n        *   This validation function will run on both the server- and client-side.\n            \n\n## Predefined fields\n\nThere are a set of pre-defined, searchable fields for default behavior.\n\nYou can override the default behavior by adding the field as a userField and then overriding the behavior you would like to change. This would often be done to suppress a field by setting the display to false.\n\n### Search fields\n\n*   **name**: Constructed field from other fields: default display function: `(function(user, value) { return (value || user.nickname || user.email || user.user_id); }).toString()`\n    \n*   **email**: Email address or N/A\n    \n*   **last\\_login\\_relative**: Last login time\n    \n*   **logins\\_count**: Number of logins\n    \n*   **connection**: Database connection\n    \n\n### User info fields\n\n*   **user\\_id**: User ID\n    \n*   **name**: User's name\n    \n*   **username**: User's username\n    \n*   **email**: User's email\n    \n*   **identity.connection**: Connection value\n    \n*   **isBlocked**: Whether or not the user is blocked\n    \n*   **blocked\\_for**: Whether or not the user has attack protection blocks\n    \n*   **last\\_ip**: Last IP the user used to log in\n    \n*   **logins\\_count**: Number of times the user has logged in\n    \n*   **currentMemberships**: List of memberships for this user\n    \n*   **created\\_at**: Date/time at which the user was created\n    \n*   **updated\\_at**: Date/time at which the user was updated\n    \n*   **last\\_login**: Date/time at which the user last logged in\n    \n\n### Create and edit user fields\n\n*   **connection**: User's database\n    \n*   **password**: New password\n    \n*   **repeatPassword**: Repeat of the user's password\n    \n*   **email**: User's email\n    \n*   **username**: User's username\n    \n\n### Sample use\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: 'https://your-cdn.com/locale/es.json'\n  });\n}\n```\n\n## Localization\n\nBeginning with version 3.0 of the Delegated Admin Extension, you can provide a language dictionary for use with localization. The language dictionary is used only for static page content; for field level content, you must use **userFields** labels.\n\nTo specify the locale, you can use the path. For example: `https://{yourTenant}.us.webtask.io/auth0-delegated-admin/en/users` will set `context.locale` to `en` in the settings query.\n\nThe **languageDictionary** is set as part of the settings query, which allows you to:\n\n*   Explicitly define a **languageDictionary**\n    \n*   Provide a URL to fetch the contents for the **languageDictionary** parameter\n    \n\nFor more information, you can review the [Delegated Administration Extension Language Dictionary file](https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/tests/utils/en.json).\n\n### Example: Provide link to language dictionary file\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: 'https://your-cdn.com/locale/es.json'\n  });\n}\n```\n\n### Example: Provide language dictionary object\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: {\n        loginsCountLabel: 'Cantidad de Logins:',\n        searchBarPlaceholder: 'Busqueda de usuarios usando la sintaxis de Lucene',\n        deviceNameColumnHeader: 'Dispositivo',\n        ...\n    }\n  });\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)",
    "title": "Delegated Administration: Settings Query Hook",
    "description": "Learn how to use the Settings Query Hook with the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook",
    "markdown": "# Delegated Administration: Write Hook\n\nThe Write Hook, which runs anytime you create or update a user, allows you to do things like:\n\n*   Changing the user's password\n    \n*   Changing the user's email address\n    \n*   Updating the user's profile\n    \n\nYou can also use the Write Hook to automatically set default values for newly-created users. For example, you might want to automatically assign a user to the same group, department, or vendor as the ones to which you've been assigned.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **request.originalUser**: Current user's values where the **payload** is the new set of fields. Only available when the method is **update**.\n        \n    *   **payload**: Payload object\n        \n        *   **memberships**: Array of memberships that were selected in the UI when creating the user.\n            \n        *   **email**: Email address of the user.\n            \n        *   **password**: Password of the user.\n            \n        *   **connection**: Name of the database connection.\n            \n        *   **app\\_metadata**: Data that's included if a Custom Field being modified is saved in `app_metadata`.\n            \n        *   **user\\_metadata**: Data that's included if a Custom Field being modified is saved in `user_metadata`.\n            \n    *   **userFields**: User fields array (if specified in the settings query)\n        \n    *   **method**: Either **create** or **update** depending on whether this is being called as a result of a create or an update call.\n        \n*   **callback(error, user)**: Callback to which you can return an error and the user object that should be sent to the Management API.\n    \n\nFor more information about **userFields**, read [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook).\n\n## Sample use\n\nKelly manages the Finance department. When she creates users, these users should be assigned as members of the Finance department.\n\n```\nfunction(ctx, callback) {\n  var newProfile = {\n    email: ctx.payload.email,\n    password: ctx.payload.password,\n    connection: ctx.payload.connection,\n    user_metadata: ctx.payload.user_metadata,\n    app_metadata: {\n      department: ctx.payload.memberships && ctx.payload.memberships[0],\n      ...ctx.payload.app_metadata\n    }\n  };\n\n  if (!ctx.payload.memberships || ctx.payload.memberships.length === 0) {\n    return callback(new Error('The user must be created within a department.'));\n  }\n\n  // Get the department from the current user's metadata.\n  var currentDepartment = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // If you're not in the IT department, you can only create users within your own department.\n  // IT can create users in all departments.\n  if (currentDepartment !== 'IT' && ctx.payload.memberships[0] !== currentDepartment) {\n    return callback(new Error('You can only create users within your own department.'));\n  }\n\n  if (ctx.method === 'update') {\n    // If updating, only set the fields we need to send\n    Object.keys(newProfile).forEach(function(key) {\n      if (newProfile[key] === ctx.request.originalUser[key]) delete newProfile[key];\n    });\n  }\n\n  // This is the payload that will be sent to API v2. You have full control over how the user is created in API v2.\n  return callback(null, newProfile);\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)",
    "title": "Delegated Administration: Write Hook",
    "description": "Learn how to use the Write Hook with the Delegated Administration Extension.",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/remove-permissions-from-roles",
    "markdown": "# Remove Permissions from Roles\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"permissions\": [ { \"resource_server_identifier\": \"API_ID\", \"permission_name\": \"PERMISSION_NAME\" }, { \"resource_server_identifier\": \"API_ID\", \"permission_name\": \"PERMISSION_NAME\" } ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"\n\n\tpayload := strings.NewReader(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID/permissions',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    permissions: [\n      {resource_server_identifier: 'API_ID', permission_name: 'PERMISSION_NAME'},\n      {resource_server_identifier: 'API_ID', permission_name: 'PERMISSION_NAME'}\n    ]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"permissions\": @[ @{ @\"resource_server_identifier\": @\"API_ID\", @\"permission_name\": @\"PERMISSION_NAME\" }, @{ @\"resource_server_identifier\": @\"API_ID\", @\"permission_name\": @\"PERMISSION_NAME\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/roles/ROLE_ID/permissions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"permissions\": [\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ],\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Remove Permissions from Roles",
    "description": "Learn how to remove permissions added to a role using the Auth0 Dashboard or the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/edit-role-definitions",
    "markdown": "# Edit Role Definitions\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"ROLE_NAME\", \"description\": \"ROLE_DESC\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {name: 'ROLE_NAME', description: 'ROLE_DESC'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"ROLE_NAME\",\n                              @\"description\": @\"ROLE_DESC\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/roles/ROLE_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"ROLE_NAME\",\n  \"description\": \"ROLE_DESC\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
    "title": "Edit Role Definitions",
    "description": "Learn how to edit a role definition using the Auth0 Dashboard and the Management API. ",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-5",
    "markdown": "# AWS API Gateway Tutorial Step 5\n\n## Step 5 - Use Identity Tokens to Flow Identity\n\nIn this final step, you will:\n\n*   Flow identity to the service by passing your OpenID JSON Web Token (JWT);\n    \n*   Validate the token;\n    \n*   Extract profile information to assign a buyer for a pet.\n    \n\n## Use an Identity Token\n\nYou can use your Lambda function to process and obtain information about the user. For example, during a purchasing transaction, you retrieved the username from the profile returned with the identity token. However, you can also choose to have the user's information embedded with the identity itself, which is a JSON Web Token (JWT).\n\nThe advantages of using JWTs is that you can:\n\n1.  Verify the authenticity of the JWT;\n    \n2.  Be sure that the calling user is authenticated (instead of relying on a plain-text parameter that could have been tampered with).\n    \n\nIn addition, you can use the JWT for authorization, which allows you to bypass the IAM integration with Amazon API Gateway. Please note, however, that using the API Gateway for authorization allows you to halt the API call prior to invocation of your Lambda function.\n\n### Add Information to the JWT\n\nThere are several ways of adding a user's information to the JWT. The following example adds the user's email address to the JWT, but the concepts are same for other user datapoints.\n\n#### Use Rules\n\nOne way to add a user's email address to the JWT is to use a [rule](https://auth0.com/docs/rules). This is a good approach if you want to make sure that this value is always available in the JWT for an authenticating user.\n\nIn `login.js`, you can see this scope specified in the parameters passed to `auth.signin`:\n\n```\n$scope.login = function() {\n    var params = {\n        authParams: {\n          scope: 'openid email'\n        }\n      };\n\n    auth.signin(params, function(profile, token) {\n      ...\n    }\n  }\n```\n\nWhile you can include the full profile of the user within the JWT, you will want to include only what is necessary since the JWT is typically passed with every request.\n\n## Validate the JWT Token\n\nBecause the AWS Lambda console has access to a limited number of Node modules that can be used when you enter your Node.js code using the browser console, you'll need to include additional modules and upload the Lambda function as a package to process the identity token.\n\nFor additional details, see [Creating Deployment Packages using Node.js](http://docs.aws.amazon.com/lambda/latest/dg/nodejs-create-deployment-pkg.html) and [Uploading Deployment Packages and Testing](http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-s3-events-adminuser-create-test-function-upload-zip-test.html).\n\nThe following seed project contains the code you'll need for your updated AWS Lambda function.\n\n<%= include('../../../\\_includes/\\_package', { org: 'auth0', repo: 'auth0-aws', path: 'examples/api-gateway/lambda' }) %>\n\nYou'll see two custom JavaScript files within the seed project:\n\n*   `index.js`: contains your main code;\n    \n*   `auth0-variables`: contains the code you need to update.\n    \n\nIn addition to the custom files, there is a standard Node.js `package.json` file.\n\nThe code adds functionality to extract information from and validate the JWT. By default, Auth0 uses a symmetric key for signing the JWT, though you may opt to use asymmetric keys (if you need to allow third-party validation of your token, you should use an asymmetric key and share only your public key).\n\nFor more information about token verification, see [Identity Protocols Supported by Auth0](https://auth0.com/docs/authenticate/protocols).\n\nUpdate `auth0-variables.js` with your secret key, which can be found on the Settings tab of your Application in the Auth0 Dashboard:\n\n```\nvar env={};\nenv.AUTH0_SECRET='{yourAuth0Secret}';\nmodule.exports = env;\n```\n\nRun **npm install** from the directory where your files are, zip up the contents (`index.js` must be at the root of the zip), and upload it for use by the `PurchasePet` Lambda function. If you test this, you should see an authorization failure, since the JWT is not in the message body.\n\nTake a look at the logic in `index.js`. You will see logic around line 60 that validates the token and extracts the decoded information that contains the identity information used for the purchase logic:\n\n```\nif(event.authToken) {\n     jwt.verify(event.authToken, secret, function(err, decoded) {\n         if(err) {\n           console.log('failed jwt verify: ', err, 'auth: ', event.authToken);\n           context.done('authorization failure', null);\n         } else if(!decoded.email)\n         {\n           console.log('err, email missing in jwt', 'jwt: ', decoded);\n           context.done('authorization failure', null);\n         } else {\n           userEmail = decoded.email;\n           console.log('authorized, petId', petId, 'userEmail:', userEmail);\n           dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, readcb);\n         }\n     });\n  } else {\n     console.log('invalid authorization token', event.authToken);\n     context.done('authorization failure', null);\n  }\n    ...\n```\n\nThe final step is to pass the JWT to the method used by the browser client.\n\nThe standard method comes with an `Authorization` header as a bearer token, and you can use this method by turning off IAM authorization and relying solely on the OpenID Token for authorization (you will also need to map the Authorization header into the event data passed to the AWS Lambda function).\n\nIf, however, you are using IAM, then the AWS API Gateway uses the `Authorization` header to contain the signature of the message, and you will break the authentication by inserting the JWT into this header. To do this, you can either:\n\n*   Add a custom header for the JWT;\n    \n*   Put the custom header into the body of the message.\n    \n\nIf you choose to use a custom header, you'll also need to do some mapping for the Integration Request of the POST method for `pets/purchase`.\n\nTo keep the validation process simple, pass the JWT in the body of the post to the AWS Lambda function. To do this, update the `buyPet` method in `home.js` by removing the `userName` from the body, and adding `authToken` as follows:\n\n```\nfunction buyPet(user, id) {\n    var apigClient = getSecureApiClient();\n    var body = {\n      petId:id,\n      authToken: store.get('token')\n    };\n\n    apigClient.petsPurchasePost({}, body)\n      .then(function(response) {\n        console.log(response);\n        $scope.pets = response.data;\n        $scope.$apply();\n      }).catch(function (response) {\n        alert('buy pets failed');\n        showError(response);\n    });\n}\n```\n\nUpload your code to your S3 bucket and try to purchase a pet. You will see the email of the purchaser in the resulting message.\n\nIf you have any errors, double check that you have properly set your secret key. One useful tool for checking issues with your token decoding is [jwt.io](http://jwt.io/).\n\n## Summary\n\nIn this tutorial, you have:\n\n*   Created an API using AWS API Gateway that includes methods using AWS Lamdba functions;\n    \n*   Secured access to your API using IAM roles;\n    \n*   Integrated a SAML identity provider with IAM to tie access to the API to your user base;\n    \n*   Provided different levels of access based on whether a user authenticated from the Database or Social Connection;\n    \n*   Used an Auth0 rule to enforce role assignment;\n    \n*   Used a JWT to provide further authorization context and pass identity information into the appropriate Lambda function.",
    "title": "AWS API Gateway Tutorial Step 5",
    "description": "Step 5 of Amazon API Gateway Tutorial",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-4",
    "markdown": "# AWS API Gateway Tutorial Step 4\n\n## Step 4 - Use Multiple Roles with Amazon API Gateway\n\nIn this step, you'll assign different AWS IAM roles to users based on authentication information:\n\n*   Users authenticating with Social Connections will be treated as buyers;\n    \n*   Users authenticating with Database Connections will be treated as admins.\n    \n\nYou will perform this role assignment logic in two different ways:\n\n*   JavaScript;\n    \n*   Auth0 rules.\n    \n\nFor many Auth0 Applications, you'll want different users to have different levels of access, and you'll want additional information about a given identity to use in your service logic. In cases where it's sufficient to lock down access at the API level, you can use different AWS IAM roles (for example, administrators can use the update function to add and remove pets, but social users can only buy pets).\n\nThe following diagram illustrates AWS IAM role assignments for two different user classes: users authenticated via Social Connections and users authenticated via Database Connections. It also illustrates that AWS IAM roles can be assigned to other entities, like AWS Lamdba functions, to control the permissions these entities are assigned for an account. In short, an IAM role is a group of permissions to AWS capabilities that is defined by one or more policies and then assigned to an entity.\n\nFor cases where you want to make decisions within your code (for example, you might want a credit check of a user buying a pet), you will want to flow identity as well. This will be demonstrated below in [Step 5 - Using Identity Tokens to Flow Identity](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-5).\n\n### 1\\. Create the PetPurchase API Resource\n\nUsing the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), select your Pets API. You will be taken to its Resources page.\n\nClick on **Actions** and **Create Resource**. Name the New Child Resource `Purchase`. Click **Create Resource**.\n\nAdd an OPTIONS method for the `purchase` resource as outlined previously for `pets` in the [Set Up Cors and Deploy the API section of Step 2 - Securing and Deploying the Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nCreate a new AWS Lambda function for purchasing a pet called `PetPurchase`, which adds `isSold` and `soldTo` attributes to a pet as follows:\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\n\nexports.handler = function(event, context) {\n   var petId = event.petId;\n   var user = event.userName;\n   var pets = {};\n   console.log('start PetsPurchase, petId', petId, ' userName', user);\n\n   var writecb = function(err, data) {\n      if(!err) {\n          context.done(null, pets);\n      } else {\n          console.log('error on GetPetsInfo: ',err);\n          context.done('failed on update', null);\n      }\n   };\n\n   var readcb = function(err, data) {\n      if(err) {\n          console.log('error on GetPetsInfo: ',err);\n          context.done('failed to retrieve pet information', null);\n      } else {\n          // make sure we have pets\n          if(data.Item && data.Item.pets) {\n              pets = data.Item.pets;\n              var found = false;\n\n              for(var i = 0; i < pets.length && !found; i++) {\n                  if(pets[i].id === petId) {\n                     if(!pets[i].isSold) {\n                        pets[i].isSold = true;\n                        pets[i].soldTo = user;\n                        var item = { username:\"default\",pets: pets};\n                        dynamo.putItem({TableName:\"Pets\", Item:item}, writecb);\n                        found = true;\n                     }\n                  }\n               }\n               if(!found) {\n                 console.log('pet not found');\n                 context.done('That pet is not available.', null);\n               }\n           } else {\n              console.log('pet already sold');\n              context.done('That pet is not available.', null);\n           }\n       }\n   };\n\n   dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, readcb);\n};\n```\n\nOnce you have defined the Lambda function, [add a POST method to the `purchase` resource](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-1#method-post-pet-information) that calls the `PetPurchase` Lambda. Be sure to also add the `Access-Control-Allow-Origin` header with a value of `*` to the POST method using the method response/integration response configuration found in [Set Up Cors and Deploy the API section of Step 2 - Securing and Deploying the Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nTest the API gateway method, providing the following as an input message:\n\n```\n{\n    \"petId\": 1,\n    \"userName\": \"fred flintstone\"\n }\n```\n\nIn the test response, you should see the pet with ID of 1 is now sold to Fred Flintstone:\n\n```\n[\n  {\n    \"id\": 1,\n    \"price\": 249.99,\n    \"type\": \"dog\",\n    \"isSold\": true,\n    \"soldTo\": \"fred flintstone\"\n  },\n\n  ...\n```\n\n### 2\\. Use IAM to Secure the PurchasePet API\n\n#### Update IAM\n\nTo secure your API, follow the same process for adding a new role that you [performed in Part 2](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2) of this tutorial. Call the new role `auth0-api-social-role`.\n\nThe ARN for the method you will secure in the IAM policy should look something like:\n\n```\narn:aws:execute-api:us-east-1:your-accountid:your-api-id/*/pets/purchase\n```\n\nBe sure to update the trust policy as well.\n\nGo to the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), and select the POST method for the `/pets/purchase` resource. Select **Method Request** and change **Authorization Type** to AWS\\_IAM. Click the check to save the setting.\n\nAt this point, you have defined two roles that you can use with the API gateway:\n\n*   `auth0-api-role`: permits updating pets\n    \n*   `auth0-api-social-role`: permits purchasing a pet\n    \n\n#### Configure Login with Amazon and Update Auth0\n\nYou can create a social role using Login with Amazon (LWA).\n\nWhile this tutorial includes instructions for using Login with Amazon, please note that you can use other social providers as well.\n\n1.  Navigate to [Auth0 Dashboard > Authentication > Social](https://manage.auth0.com/#/connections/social), and select **Create Connection**.\n    \n2.  Choose the connection you want to set up, and consent.\n    \n3.  Copy and paste the `Client ID` and `Client Secret` from your social identity provider, select the **Attributes** (and **Permissions**, where applicable), and click **Save**.\n    \n4.  Select the **Applications** view, enable the switch for each of your Auth0 applications that should be able to use this connection, and select **Save**.\n    \n\nOnce you've entered the appropriate information, select **Try Connection** to ensure that everything is set up correctly.\n\nWhen you configure LWA using the Amazon console, be sure to enter into Allowed Return URLs the callback URL to your Auth0 Application, which should look something like `https://johndoe.auth0.com/login/callback`. The Auth0 help page will show you specifically what to enter.\n\nNavigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select your Application to view its settings. Select the **Connections** view, locate the **Social** section, and ensure that **Amazon** is enabled.\n\n#### Deploy the API and Update the Single-Page Application\n\n##### Deploy the API\n\nUsing the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), you will again [deploy the API and generate a new JavaScript SDK](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nAt this point, you have made the necessary configuration changes to enable pet purchases. To make this live, copy your newly downloaded SDK over the previous one in your `pets` folder, as well as your Amazon S3 bucket.\n\n##### Update the Login Controller Logic to Choose Different Roles for Different Types of Users\n\nThe login controller logic uses `getOptionsForRole` to select different roles for different users. When you obtain the delegation token, you can tell Auth0 which role to use (that is, the user is an admin or not).\n\nIn the `pets/login/login.js` file, modify the `role` and `principal` values for the non-admin user for the social user IAM role you just created.\n\nAt this point, you should be able to log in using Amazon credentials **or** the database user you previously created. Notice that the UI lets a social user buy pets, while an admin user can add and remove pets.\n\nTo test this functionality, you can temporarily hide the remove button in the UI by removing `ng-show=\"isAdmin\"` in `/pets/home/home.html`:\n\n```\n<button ng-show=\"isAdmin\" class=\"btn delete-btn\" ng-click=\"removePet(pet.id)\">remove</button>\n```\n\nAfter copying the changes to your S3 bucket, attempt to remove a pet while logged in as a social user.\n\nIn `home.js`, modify the `buyPet` function to enable pet purchases:\n\n```\nfunction buyPet(user, id) {\n    var apigClient = getSecureApiClient();\n\n    apigClient.petsPurchasePost({},{userName:user, petId:id})\n      .then(function(response) {\n        console.log(response);\n        $scope.pets = response.data;\n        $scope.$apply();\n      }).catch(function (response) {\n        alert('buy pets failed');\n        showError(response);\n    });\n}\n…\n```\n\nCopy the code to your S3 bucket, log out, and then log back in in as a social user by clicking on the Amazon icon in the Lock login dialog. You may need to click **SHOW ALL** if your previous login persists in the Lock pane.\n\nNote that, as an Amazon user, you can buy a pet, but not add or remove pets. However, if you log in with a user associated with a Database Connection, you are able to add and remove pets, but not buy pets.\n\n### Enforce Role Assignment with Auth0 Rules\n\nIn some cases, you might determine the appropriate role using the Application (as shown here), but for security reasons (you might want to prevent the user from assuming a more privileged role than necessary), you might want to determine user privileges on the server-side.\n\nWith Auth0, this is done via rules, which are service logic statements you define that are then run during the Auth0 authentication process. For example, you could create rules to:\n\n*   Eliminate the passing of role information from the browser to the Application;\n    \n*   Insert role information into the delegation request based on the authentication source.\n    \n\n#### Enforce Role Assignment\n\nYou will add a rule that will check to see if the role requested by the user is allowed, depending on its association with a Social or Database Connection.\n\n1.  Navigate to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules), and select **Create Rule**.\n    \n2.  Choose the **Empty rule** template\n    \n3.  Name the rule **AWS Pets** (or something similar), then populate the body of the rule with the following JavaScript code:\n    \n    ```\n    function (user, context, callback) {\n      if(context.clientID === '{yourClientId}') {\n        var socialRoleInfo = {\n          role:\"arn:aws:iam::<your account>:role/auth0-api-social-role\",\n          principal: \"arn:aws:iam::your account>:saml-provider/auth0\"\n        };\n    \n        var adminRoleInfo = {\n          role:\"arn:aws:iam::<your account>:role/auth0-api-role\",\n          principal: \"arn:aws:iam::<your account>:saml-provider/auth0\"\n        };\n    \n        var requestRole = context.request.body.role;\n        var requestPrincipal = context.request.body.principal;\n        var allowedRole = null;\n    \n        if(user.identities[0].isSocial === false) {\n          allowedRole = adminRoleInfo;\n        } else {\n          allowedRole = socialRoleInfo;\n        }\n    \n        if((requestRole && requestRole !== allowedRole.role) ||\n           (requestPrincipal && requestPrincipal !== allowedRole.principal)) {\n            console.log('mismatch in requested role:',requestRole, ':', requestPrincipal);\n            console.log('overridding');\n        } else {\n          console.log('valid or no role requested for delegation');\n        }\n    \n        context.addonConfiguration = context.addonConfiguration || {};\n        context.addonConfiguration.aws = context.addonConfiguration.aws || {};\n        context.addonConfiguration.aws.role = allowedRole.role;\n        context.addonConfiguration.aws.principal = allowedRole.principal;\n        callback(null, user, context);\n    \n      } else {\n        callback(null, user, context);\n      }\n    }\n    ```\n    \n    Be sure to adjust the above code with the correct values for your integration. The fields are **Princial ARN**, **Role ARN**, and **Client Secret**.\n4.  **Save** your changes.\n    \n\n#### Caveats\n\n*   Rules run at a global scope for every authentication. You should only run the logic on authentication requests associated with a given application (which is why the script used asks for the clientID. Without this information, the logic runs for every authentication request associated with your Auth0 account.\n    \n*   Information is passed into the rule with the context and the user.\n    \n*   You can extend the objects passed in to the rule. In the code above, the rule checks the body of the request for the role information. The role is set into the context addonConfiguration of the allowed role, which always overrides settings in the request body.\n    \n\n#### Debug Your Rule\n\nYou are ready to debug your rule(s). Select **Try this Rule**, and you will be presented with a script that tries the rule's logic. Select **Try**.\n\nYou will then be presented with the output of running your rule.",
    "title": "AWS API Gateway Tutorial Step 4",
    "description": "Step 4 of Amazon API Gateway Tutorial",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-3",
    "markdown": "# AWS API Gateway Tutorial Step 3\n\n## Step 3 - Build the Application\n\nIn this step, you will build a single-page, serverless application using the AngularJS framework that you will serve out of an AWS S3 bucket configured to act as a static website.\n\n### 1\\. Set Up Your Sample Application\n\nFor a simple starter app, [download a sample project](https://github.com/auth0/auth0-aws/tree/master/examples/api-gateway/client) specific to this tutorial to get started. Log In to have your Auth0 credentials preconfigured.\n\nCopy the contents of this seed project to a local folder called `pets`, which you will be using for the remainder of this tutorial. Within this folder, update `auth0-variables.js` with your Auth0 Application `AUTH0_CLIENT_ID` and `AUTH0_CLIENT_ID` (this information is available in the [Management Dashboard](https://manage.auth0.com/#/applications) for the application in question).\n\n#### AWS S3 bucket\n\nBe sure that you have [created the AWS S3 bucket configured to act as a static website](http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html). During the setup process, copy the contents of the `pets` folder to your S3 bucket to provide content for the website.\n\nIf you are using a pre-existing bucket, you can move the files with the AWS CLI using the following command.\n\n```\naws s3 cp --recursive --acl \"public-read\" ./ s3://{yourBucket}/\n```\n\nPrior to proceeding, please be sure that you have at least one user associated with your Username-Password-Authentication (or the Database Connection associated with the Application you are using) Connection. To fully utilize the functionality of your sample app and its integration with AWS, you will need that user to test authentication and gain access.\n\nLastly, ensure that Auth0 allows authentication from your website by providing the URL in the **Allowed Origins** field in the Settings page of your Application. Your website's URL should look something like this:\n\n`http://your-bucket.s3-website-us-east-1.amazonaws.com`\n\nIf you don't know what your URL is, you can find it listed under the **Properties** tab of your S3 bucket.\n\nBefore going further, test logging into your application. Open `http://your-bucket-domain/index.html` in your browser. After logging in, you should see an alert box pop up that says \"getPets not implemented\":\n\nYou should also see the page for viewing pets.\n\n### Use Delegation to Get an AWS Token\n\nAt this point, you have authentication set up with Auth0, and you have an OpenID JWT. Here is the directory structure for the generated code:\n\n![AWS API Gateway - project directory](https://images.ctfassets.net/cdy7uua7fh8z/5fYL14NE1L9WuzUyA0xTky/35e78ca14e6d0c5b36582b5b74a6fc55/aws-api-gateway-project.png)\n\nYou can use Auth0's delegation capability to obtain an AWS Access Token that is based on the Auth0 identity token. Behind the scenes, Auth0 authenticates your identity token, and then uses SAML based on the addon that you configured.\n\nUpdate `pets/login/login.js` as follows to get an AWS delegation token from the identity token after a successful signin with `auth.signin`. Note that you are treating any user not logged in using a Social Connection as an admin. Later, we'll code a second role and show better ways to enforce role selection.\n\n```\nauth.signin(params, function(profile, token) {\n  //Set user as admin if they did not use a social login.\n  profile.isAdmin = !profile.identities[0].isSocial;\n  store.set('profile', profile);\n  store.set('token', token);\n\n  // get delegation token from identity token.\n  var options = getOptionsForRole(profile.isAdmin, token);\n\n  // TODO: Step 3: Enable this section once you setup AWS delegation.\n  /*\n  auth.getToken(options)\n    .then(\n      function(delegation)  {\n        store.set('awstoken', delegation.Credentials);\n        $location.path(\"/\");\n      },\n    function(err) {\n       console.log('failed to acquire delegation token', err);\n  });\n  */\n  // TODO: Step 3: Remove this redirect after you add the get token API.\n  $location.path(\"/\");\n\n}, function(error) {\n  console.log(\"There was an error logging in\", error);\n});\n```\n\n#### Modify the role and principal Strings\n\nTo modify the `role` and `principal` strings (which are the final two lines of the `if` statement contained in the provided function), specify the appropriate values via [Rules](https://manage.auth0.com/#/rules):\n\n```\nfunction (user, context, callback) {\n  if (context.clientID === 'CLIENT_ID' &&\n      context.protocol === 'delegation') {\n    // set AWS settings\n    context.addonConfiguration = context.addonConfiguration || {};\n    context.addonConfiguration.aws = context.addonConfiguration.aws || {};\n    context.addonConfiguration.aws.principal = 'arn:aws:iam::[omitted]:saml-provider/auth0-provider';\n    context.addonConfiguration.aws.role = 'arn:aws:iam::[omitted]:role/auth0-role';\n  }\n\n  callback(null, user, context);\n}\n```\n\nBe sure to update the `role` and `[principal]` ARN values with the ones for your integration.\n\nCopy the updated files to your S3 bucket for your website.\n\nOptionally, you can set a breakpoint in the browser at `store.set('awstoken', delegation.Credentials);`. When you log out and and log back in, inspect `delegation.Credentials` when you arrive at the breakpoint. You will see a familiar values like AccessKeyId and SecretAccessKey:\n\n```\n{\n    AccessKeyId: \"ASIAJB...BNQ\",\n    SecretAccessKey: \"vS+b6...2Noav\",\n    SessionToken: \"AQoDYBqsivOV...DdQW0gsKr8rgU=\",\n    Expiration: \"2015-08-27T14:48:32.000Z\"\n}\n```\n\nIf you don't see these values, be sure that you have the Amazon Web Services addon enabled in the Addons tab for your Auth0 Application.\n\n### Display Pets with the AWS API Service\n\nThe first thing you will do is show the pets to the end users.\n\n#### Add the API Code to Call Your API\n\nTo add the API code for adding a call to your service, copy the contents of apiGateway-js-sdk.zip you previously downloaded to the `pets` directory. The contents should include:\n\n*   `apiClient.js`;\n    \n*   `lib` folder;\n    \n*   `README.md`.\n    \n\nTo review the download, see [AWS API Gateway Tutorial Part 2](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#deploy-the-api).\n\nThere is already a `README.md` in the `pets` directory, so you will need to rename one of the files to keep both in the directory. The `README.md` for the API gateway explains how to use the API application from your Auth0 Application.\n\nOpen the `index.html` file located in the root of your `pets` folder to add all of the scripts listed at the top of the API readme to `index.html`:\n\n```\n<!-- scripts for aws api gateway include after you create your package from aws for api gateway. -->\n<script type=\"text/javascript\" src=\"/docs/lib/axios/dist/axios.standalone.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/CryptoJS/rollups/hmac-sha256.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/CryptoJS/rollups/sha256.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/CryptoJS/components/hmac.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/CryptoJS/components/enc-base64.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/moment/moment.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/url-template/url-template.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/apiGatewayCore/sigV4Client.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/apiGatewayCore/apiGatewayClient.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/apiGatewayCore/simpleHttpClient.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/lib/apiGatewayCore/utils.js\"></script>\n<script type=\"text/javascript\" src=\"/docs/apigClient.js\"></script>\n```\n\nIf you open `apigClient.js`, you can see that the downloaded library has created wrappers like `petsPost` and `petsGet` for your API methods. You do not need to modify this generated code.\n\n#### Configure the getPets Method\n\nOpen `home.js` in the `home` folder, and update the contents of `getPets` with a method for retrieving pets data (be sure to update the region if you are not running in `us-east-1`):\n\n```\nfunction getPets() {\n    // this is unauthenticated\n    var apigClient = apigClientFactory.newClient({\n        region: 'us-east-1' // The region where the API is deployed\n    });\n\n    apigClient.petsGet({},{})\n      .then(function(response) {\n        console.log(response);\n        $scope.pets = response.data;\n        $scope.$apply();\n      }).catch(function (response) {\n        alert('pets get failed');\n        showError(response);\n    });\n}\n```\n\nCopy the updated code to your S3 bucket. Refresh the page to see two animals listed (if you ran the previously described test on your APIs that created these pets).\n\n### Update Pets with the AWS API Service\n\nNow that you have a working Auth0 Application with the API Gateway, you will add a method for updating the `pets` table.\n\nModify the `putPets` method logic to update pets using your API function. This function will be used for both adding and removing pets.\n\n```\nfunction putPets(updatedPets) {\n    var body = {pets: updatedPets};\n\n    var apigClient = apigClientFactory.newClient({\n        region: 'us-east-1' // set this to the region you are running in.\n    });\n\n    apigClient.petsPost({},body)\n      .then(function(response) {\n        console.log(response);\n       }).catch(function (response) {\n        alert('pets update failed');\n        showError(response);\n      });\n}\n```\n\nCopy the updated code to your S3 bucket. Test the method:\n\n1.  Log out and log back in.\n    \n2.  Enter in values for `Pet Type` and `Pet Price`.\n    \n3.  Click **Save** to post your data.\n    \n\nYou should see a message that says, \"We have a `<Pet Type>` for sale for `<Pet Price>`\" with a red **REMOVE** button to its left.\n\nTo add security, add the `getSecureApiClient` function at the start of the `putPets` method:\n\n```\nfunction putPets(updatedPets) {\n     var apigClient = getSecureApiClient();\n}\n```\n\nCopy the code to your S3 bucket.\n\nThe `getSecureApiClient` function provided for you retrieves the AWS token from local storage acquired using delegation to the API, and uses the access key, secret, and session token:\n\n```\nfunction getSecureApiClient() {\n    var awstoken = store.get('awstoken');\n\n    return apigClientFactory.newClient({\n        accessKey: awstoken.AccessKeyId,\n        secretKey: awstoken.SecretAccessKey,\n        sessionToken: awstoken.SessionToken,\n        region: 'us-east-1' // The region you are working out of.\n    });\n  }\n```",
    "title": "AWS API Gateway Tutorial Step 3",
    "description": "Step 3 of Amazon API Gateway Tutorial",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-1",
    "markdown": "# AWS API Gateway Tutorial Step 1\n\n## Step 1 - Set up the Amazon API Gateway\n\nAfter completing this step, you will have:\n\n*   Set up Amazon API Gateway using AWS Lambda functions to execute your service logic that stores and retrieves pets from an Amazon DynamoDB table;\n    \n*   Created two unauthenticated REST service methods for getting and updating a list of pets.\n    \n\nPrior to beginning, please have [Node.js](https://nodejs.org/) installed.\n\n### 1\\. Create the Amazon DynamoDB Table\n\nIn the [Amazon DynamoDB Console](https://console.aws.amazon.com/dynamodb), click on **Create Table**.\n\n![DynamoDB Console - Create Table](https://images.ctfassets.net/cdy7uua7fh8z/2ZPhi7Ddx4TznSXEEhUSDK/52a06412f7c5e6d0ef0d13c6ffe17611/dynamodb-create-table.png)\n\nConfigure the variables associated with the table:\n\n*   **Table name**: Pets\n    \n*   **Primary key**: username\n    \n*   **Primary key type**: String\n    \n*   **Use default settings**: unchecked\n    \n*   **Read capacity units**: 3\n    \n*   **Write capacity units**: 3\n    \n\n![DynamoDB Console - Configure Newly Created Table](https://images.ctfassets.net/cdy7uua7fh8z/6MYJV97Xa3DxajG8DYj2dx/e428ab2ce137176d7771c61a9c528f7c/configure-newly-created-table.png)\n\nClick **Create** to create the table with your provided settings.\n\nWhile the table is being created, take note of the Amazon Resource Name (ARN) under the Table details section. You will need the table's ARN in the next step.\n\n![DynamoDB Console - Table Details - Amazon Resource Name](https://images.ctfassets.net/cdy7uua7fh8z/4ZFemddtUD8tRi0NUvzXJ2/38abd951974cad385ef7417f48adf359/table-arn.png)\n\n### 2\\. Create the Policy that Grants AWS Lambda Functions Access to the DynamoDB Pets Table\n\nNavigate to the [AWS IAM Console](https://console.aws.amazon.com/iam).\n\nClick on **Roles** in the left menu, and then click the **Create New Role** button.\n\n![IAM Console - Roles - Create New Roles](https://images.ctfassets.net/cdy7uua7fh8z/4mgCTXLpycHLA8RbYoEFim/5d9eb81be979355aa9cd10d476ead515/roles.png)\n\nName the role `APIGatewayLambdaExecRole` and click **Next Step**.\n\nSelect the Role Type. Under AWS Service Roles, select AWS Lambda.\n\n![IAM Console - Select the Role Type - Service Roles - AWS Lambda](https://images.ctfassets.net/cdy7uua7fh8z/326kKGbahlvIwVFTi61Gfw/026d1fc0c8c6e3a489ec4fb840f551da/select-role-type.png)\n\nOn the Attach Policy screen, skip this step by clicking **Next Step**. At this point, review the information you provided. If all looks correct, click **Create Role**. When finished, you should see your role listed on the IAM homepage.\n\nSelect the role you just created, **APIGatewayLambdaExecRole**. Click the down arrow for Inline Policies and click the **Click Here** link.\n\nSelect Custom Policy, and then click **Select**. Name the policy `LogAndDynamoDBAccess` and add the following code as the policy document (be sure to first update the Amazon Resource Name (ARN) for your DynamoDB table). Click **Apply Policy**.\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AccessCloudwatchLogs\",\n      \"Action\": [\"logs:*\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"arn:aws:logs:*:*:*\"\n    },\n    {\n      \"Sid\": \"PetsDynamoDBReadWrite\",\n                  \"Effect\": \"Allow\",\n      \"Action\": [\n                  \"dynamodb:DeleteItem\",\n                  \"dynamodb:GetItem\",\n                  \"dynamodb:PutItem\",\n                  \"dynamodb:UpdateItem\"\n                  ],\n      \"Resource\": [\"DYNAMODB_TABLE_ARN_VALUE_FROM_PREVIOUS_STEP\"]\n    }\n   ]\n}\n```\n\n### 2\\. Create the AWS Lambda Functions\n\nThe next three steps create the AWS Lambda functions for retrieving and updating pet information in the DynamoDB table.\n\n#### Create the Lambda Function for GetPetInfo\n\nIn the [AWS Lambda Console](https://console.aws.amazon.com/lambda), select **Create a Lambda Function** (if you have not created an AWS Lambda function before, you will click **Get Started Now**).\n\nOn the Select blueprint screen, click **Blank Function**.\n\nYou will then be prompted to Configure triggers. Click **Next** to proceed. You do not have to do so at this point.\n\nFinally, you will be asked to Configure function.\n\nPopulate the appropriate fields with the following information:\n\n*   **Name**: `GetPetInfo`\n    \n*   **Runtime**: Node.js 6.10\n    \n\nPaste the following code to read pet information from the DynamoDB table into the **Lambda function code** area.\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\n\nexports.handler = function(event, context) {\n   var cb = function(err, data) {\n      if(err) {\n         console.log('error on GetPetsInfo: ',err);\n         context.done('Unable to retrieve pet information', null);\n      } else {\n         if(data.Item && data.Item.pets) {\n             context.done(null, data.Item.pets);\n         } else {\n              context.done(null, {});\n         }\n      }\n   };\n\n   dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, cb);\n};\n```\n\nFor Role, select **Choose an existing role**. Next, choose **APIGatewayLambdaExecRole** as the Existing Role. Leave all other settings at their default values.\n\nClick **Next** to review the information you provided. If all looks correct, click **Create function**.\n\nClick **Test**, leaving the Input test event at its default (which uses the Hello World template). When the test completes, you should see an empty output (`{}`) in the Execution Result section. The table is empty.\n\n#### Create the Lambda Function for UpdatePetInfo\n\nRepeat the instructions used to create the `GetPetInfo` function, but use the following instead as the function code:\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\nexports.handler = function(event, context) {\n    var item = { username:\"default\",\n                 pets: event.pets || {}\n            };\n\n    var cb = function(err, data) {\n        if(err) {\n            console.log(err);\n            context.fail('unable to update pets at this time');\n        } else {\n            console.log(data);\n                context.done(null, data);\n        }\n    };\n    dynamo.putItem({TableName:\"Pets\", Item:item}, cb);\n};\n```\n\nTest the function by clicking the Actions drop-down and choosing **Configure sample event**. Enter the following for sample data and click **Submit**:\n\n```\n{\n  \"pets\": [{\n    \"id\": 1,\n    \"type\": \"dog\",\n    \"price\": 249.99\n  }]\n}\n```\n\nYou should see an empty return result (`{}`).\n\nReturn to your `GetPetInfo` Lambda function and click **Test** again. You should now see a single pet.\n\n#### Create the Third Lambda Function\n\nYou will create one additional Lambda function. While this function will do nothing, it is required by the OPTIONS method for CORS as described in a later section.\n\nUsing the steps described above, create a Lambda function named `NoOp`. The function's code will be as follows:\n\n```\nexports.handler = function(event, context) {\n    context.succeed('');\n}\n```\n\nInstead of creating this third Lambda function, you may choose to [create an OPTIONS method](#method-options) on the API Gateway.\n\n### 3\\. Create the Amazon API Gateway API\n\nYou will create an API with two methods: one will `GET` pet information, and one will `POST` pet information.\n\n#### Method: GET Pet Information\n\nGo to the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), and click **Create API**. If this is the first time you are creating an API, you will see a screen prompting you to **Get Started** instead.\n\nIf this is the first time you are creating an API, you will be prompted to create an Example API. Click **OK** to exit the pop-up notification, and choose the **New API** radio button instead of the **Example API** button.\n\nName the API `SecurePets` and click **Create API**.\n\nNavigate to the Resources tab of the `SecurePets` API and click the **Create Resource** action.\n\nName the resource `Pets` and click **Create Resource** again.\n\nIn the left pane, select `/pets` and then click the **CreateMethod** button.\n\nIn the drop-down, select GET and click the checkmark button. Provide the following configuration values for the `GET` method:\n\n*   **Integration type**: Lambda Function;\n    \n*   **Lambda Region**: Region you are located in;\n    \n*   **Lambda Function**: GetPetInfo.\n    \n\nClick **Save** and then **OK** when prompted in the popup to grant permissions to the Lambda function.\n\nIn the Method Execution window that appears next, click **Test**.\n\nYou should see the single pet returned in the response body.\n\n#### Method: POST Pet Information\n\nCreating the API used to `POST` pet information is similar to creating the one used to `GET` pet information.\n\nIn the left pane, select `/pets`, and click **CreateMethod**.\n\nIn the drop-down, select POST, and click the checkmark button.\n\nSelect Lambda Function for Integration Type, select the region you are located in, and select UpdatePetInfo for the Lambda function.\n\nClick **Save** and then **OK** when prompted in the popup to grant permissions to the Lambda function.\n\n**Test**, and paste the following for the request body:\n\n```\n{\"pets\": [\n    {\"id\": 1, \"type\": \"dog\", \"price\": 249.99},\n    {\"id\": 2, \"type\": \"cat\", \"price\": 124.99}\n  ]\n}\n```\n\nYou should see an empty return result (`{}`).\n\nReturn to the GET method, and click **Test** again to see that the response body indicates there are two pets listed in the table:\n\n```\n[\n  {\n    \"id\": 1,\n    \"price\": 249.99,\n    \"type\": \"dog\"\n  },\n  {\n    \"id\": 2,\n    \"price\": 124.99,\n    \"type\": \"cat\"\n  }\n]\n```\n\n#### Method: OPTIONS\n\nInstead of creating a lambda function that performs no action, you can create an `OPTIONS` method on the API Gateway.\n\nIn the left pane, select `/pets`, and click **CreateMethod**. In the drop down, select OPTIONS, and click the checkmark button. Select Mock for Integration Type. Click **Save**.\n\nLeaving the Response Body blank, click **Test**. You should receive a Response Body indicating `no data`.\n\nAt this point, the AWS Lambda functions and the Amazon API Gateway methods are defined with no security.",
    "title": "AWS API Gateway Tutorial Step 1",
    "description": "Step 1 of Amazon API Gateway Tutorial",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2",
    "markdown": "# AWS API Gateway Tutorial Step 2\n\n## Step 2 - Secure and Deploy the Amazon API Gateway\n\nNow that you have your API running, you need to add security. In this step, you will:\n\n*   Secure the update API to limit access to authenticated users with a specific AWS IAM role;\n    \n*   Configure Auth0 delegation to use AWS IAM federation capabilities;\n    \n*   Obtain an AWS Access Token that uses the AWS IAM role.\n    \n\nOnce your API is secure, you'll build a serverless, single-page application (SPA). The SPA will rely on federating identity to determine which users are allowed access. By combining AWS IAM Integration for AWS Gateway API, AWS IAM Identity Federation for SAML, and Auth0 Delegation for AWS, you can enable users from many different sources, including Social Providers or enterprise connections, to access your APIs. The following diagram illustrates a sample flow using a SAML-based Identity Provider and Auth0 SAML Federation and Delegation for AWS.\n\nYou will see two ways of implementing this flow:\n\n1.  Using Auth0 Delegation with AWS IAM;\n    \n2.  Adding an identity token to flow identity to the Lambda function.\n    \n\nDelegation makes it easy for you to obtain tokens from AWS to access AWS services in your application.\n\n### Ways to Secure the Amazon API Gateway\n\nAWS API Gateway provides several different methods to secure your APIs:\n\n1.  API keys;\n    \n2.  IAM;\n    \n3.  [Amazon Cognito](https://auth0.com/docs/integrations/aws-api-gateway/secure-api-with-cognito).\n    \n\nUsing API keys is typically appropriate for a service-to-service interaction, as illustrated below. However, there are several downsides to this approach:\n\n*   Placing a secret with a long lifetime on the application is risky (applications are easier to compromise);\n    \n*   Creating a framework to issue and manage API keys requires a secure implementation that can be challenging to develop.\n    \n\nThis section of the tutorial will utilize IAM roles and policies to secure your API in API Gateway, but you can also choose to do so using user pools in Amazon Cognito. To review detailed instructions on securing your AWS API, read [Secure AWS API Gateway Using Cognito](https://auth0.com/docs/integrations/aws-api-gateway/secure-api-with-cognito). For more information on using IAM roles and policies, read the Amazon article, [Control access to an API with IAM permissions](http://docs.aws.amazon.com/apigateway/latest/developerguide/permissions.html). To read more about user pools in Cognito, visit [Amazon Cognit user pool](http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).\n\n### 1\\. Configure IAM and Auth0 for SAML Integration with the API Gateway\n\nYou can specify an AWS IAM role for the SAML token you exchange for an AWS token. Depending on the permissions granted to that IAM role (which are set using your identity provider), the received token possesses those same permissions. By issuing different SAML tokens, each with its own AWS IAM role, you can control the levels of access for your users.\n\nFor example, the IDP could specify the IAM role based on group membership (for example, an administrator in Active Directory) or authentication source (for example, a database connection or a social provider like Facebook). This approach lets you differentiate user access to your Amazon API Gateway methods when secured using AWS IAM.\n\n#### Configure Auth0\n\nLog in to your Auth0 account. You will be brought to the Management Dashboard. Click on **\\+ New Application**, which is located in the top right corner of the page.\n\nName your new application AWS API Gateway, and indicate that this Application is going to be a Single-Page Application. Click **Create**.\n\nNavigate to the Addons tab for your newly-created Application. Using the appropriate slide, enable Amazon Web Services. This turns on AWS Delegation.\n\n#### Configure AWS\n\nFollow the [How to Set Up AWS for Delegated Authentication](https://auth0.com/docs/aws-api-setup) tutorial to configure AWS for delegated access, which uses SAML. Some caveats:\n\n*   Follow the [instructions below](#setting-the-permissions-policy-on-your-iws-iam-role) for attaching the permissions policy to your role instead of the one for the linked tutorial;\n    \n*   Name the SAML provider you create `auth0`;\n    \n*   Name the AWS IAM role `auth0-api-role`.\n    \n\n##### Set the Permissions Policy on Your IWS IAM Role\n\nOnce you have configured the AWS IAM role, you will add a policy to `auth0-api-role` that lets you execute your API Gateway methods. For more information on this process, please see [User Access Permissions for Amazon API Gateway](http://docs.aws.amazon.com/apigateway/latest/developerguide/permissions.html).\n\n#### Getting the Gateway API ARN\n\nBefore you begin, you will need the ARN for your Gateway API:\n\n1.  Navigate to [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway) and log in.\n    \n2.  Select the appropriate API.\n    \n3.  Click on any of the Methods associated with the API to bring up the Method Execution page.\n    \n4.  On the Method Execution page, the Method Request box in the top left corner displays the **ARN** for the API, though it includes the Method name:\n    \n\n`arn:aws:execute-api:us-east-2:484857107747:97i1dwv0j4/*/POST/`\n\nYou'll strip the method name to get the base ARN for the API:\n\n`arn:aws:execute-api:us-east-2:484857107747:97i1dwv0j4/*`\n\nThe wildcard (`*`) in the ARN above enables permissions to your API for all stages, but you can deploy different stages individually (for example, development, then test, then production).\n\nSelect the `auth0-api-role` role you just created to open its Summary page.\n\nExpand **Inline Policies**, and click **click here**.\n\nSelect **Custom Policy** and click **Select**.\n\nEdit your policy document. You can set the **Policy Name** to whatever you would like, but we suggest something like `api-gateway-policy`. To enable access to the API methods for this role, apply the following policy after updating the ARN with the one for your API.\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"execute-api:*\"\n            ],\n            \"Resource\": [\n                \"arn:[{yourArn}]\"\n            ]\n        }\n    ]\n}\n```\n\nClick **Apply Policy**.\n\nSince the API Gateway will assume this role on behalf of the user, the trust policy needs to permit this action. To do so, edit the role's Trust Relationships by navigating to this tab on the role's Summary page.\n\nThe final trust relationship should look similar to the following:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"auth0\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Federated\": \"arn:aws:iam::012345670:saml-provider/auth0-api\"\n      },\n      \"Action\": \"sts:AssumeRoleWithSAML\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"SAML:iss\": \"urn:{yourDomain}\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"gateway\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"apigateway.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\nAt this point, you will need to set the Authorization Settings on the [API Gateway](https://console.aws.amazon.com/apigateway).\n\nIn the **Resources** view, select the POST method under `/pets`.\n\nClick the **Method Request** link.\n\nClick the edit icon beside the **Authorization Type**, and select AWS\\_IAM. Now click the **Check Button** beside the field to save the setting.\n\n### 2\\. Set Up CORS and Deploy the API\n\nOur Single-Page Application (SPA) will access web API methods from a domain different from that of the page. The Cross-Origin Resource Sharing setting needs to explicitly permit this action for the browser to allow access to the AWS API Gateway. Typically, the browser will first issue an `OPTIONS` request to see what actions the site will permit.\n\nSelect `/pets` under Resources, and click **Create Method**. In the drop-down, select **OPTIONS**, and click the **checkmark** to save the setting.\n\nThe Options method is used by the browser to get the necessary HTTP headers, but the function needs further instructions on what to do. Under the `OPTIONS` Setup screen, set the following variables/parameters:\n\n*   **Integration Type**: Lambda Function;\n    \n*   **Use Lambda Proxy Integration**: leave unchecked;\n    \n*   **Lambda Region**: select your region;\n    \n*   **Lambda Function**: NoOp.\n    \n\nClick **Save**. On the next pop-up screen, grant your Lambda function the permissions it needs.\n\nYou will then be auto-directed to the `OPTIONS` Method Execution page. Open the Method Response page.\n\nExpand the **200** section located under the HTTP Status bar and add the following response headers:\n\n*   Access-Control-Allow-Headers;\n    \n*   Access-Control-Allow-Methods;\n    \n*   Access-Control-Allow-Origin.\n    \n\nNext, map the appropriate values to each of the response headers. After returning to the Method Execution page, click on **Integration Response**. After expanding the row associated with the **200** method response status, expand the **Header Mappings**, and apply the following mappings:\n\n*   Access-Control-Allow-Headers: `'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'`;\n    \n*   Access-Control-Allow-Origin: `'*'`\n    \n*   Access-Control-Allow-Methods: `'POST, GET, OPTIONS'`\n    \n\nFinally, repeat the above steps to enable CORS for the POST and GET methods. However, for these two methods, you will add one header, Access-Control-Allow-Origin, and its value should be set to `'*'`.\n\n### Deploy the API\n\nReturn to the **Resources** view for your API. Click on **Actions**, and select **DEPLOY API**.\n\nSelect **New Stage** for Deploy State, and name the stage `Test`. Click the **Deploy** button.\n\nOn the result page, navigate to **SDK Generation**. Select JavaScript as the **Platform**. Click the **Generate SDK** button.\n\nSave the downloaded zip file for later use.",
    "title": "AWS API Gateway Tutorial Step 2",
    "description": "Step 2 of Amazon API Gateway Tutorial",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0",
    "markdown": "# User Migration in Login by Auth0 WordPress Plugin\n\nThe User Migration functionality uses a core Auth0 feature called Custom Databases combined with URL endpoints in the Login by Auth0 plugin to allow users to authenticate with existing WordPress user accounts. To learn more about custom databases, read [Custom Database Connections](https://auth0.com/docs/authenticate/database-connections/custom-db).\n\n## How It Works\n\nWhen you enable data migration, the plugin exposes two secure endpoints that allow Auth0 to authenticate users using WordPress accounts. These endpoints are secured with a secret token and can be set only to allow IP addresses used by Auth0.\n\nThe login flow is as follows:\n\n1.  A user attempts to login with an Auth0 login form (embedded on your site or hosted at Auth0).\n    \n2.  If Auth0 can't find a user associated with the provided credentials in your database connection, it proceeds to call the Migration endpoint on your WordPress site with the user credentials and the migration token.\n    \n3.  The plugin finds a user in your WordPress database with the provided username/email and verifies the password.\n    \n4.  If a user can be successfully authenticated, Auth0 creates the user in the database connection for your site, authenticates the user, and logs them in.\n    \n5.  The next time the user logs in, they will use the Auth0 user, and the Migration endpoint will be skipped.\n    \n\nUser Migration must be set up when the site is first connected to Auth0. Attempting to turn on or off custom database scripts for a database connection that has already had users will fail. See the **Troubleshooting** section for more information about moving between modes.\n\n## Set Up and Configuration\n\nThe easiest way to construct User Migration is to use the Setup Wizard when the plugin is first installed. To learn more about the process, read [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0).\n\nIf the User Migration Setup Wizard could not complete or you want to see the process in more detail, follow the steps below. Again, this is starting from scratch with a database connection that does not have any users. The following process should be completed on a site with no traffic or with maintenance mode turned on.\n\n1.  [Create and correctly configure an Application](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0), and create and activate an empty Database Connection for the Application. These can be the same as the ones created in the standard Setup Wizard process, or you can create these from scratch. To learn more about the Setup Wizard, read [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0).\n    \n2.  In the **Auth0 > Settings** screen in WordPress, make sure the Application's Domain, Client ID and Client Secret are saved in the correct fields in the **Basic** tab.\n    \n3.  In the **Advanced** view, enable the **User Migration Endpoints** setting, and select **Save Changes**. If you are using constant-based settings, set `AUTH0_ENV_MIGRATION_WS` to `true` and `AUTH0_ENV_MIGRATION_TOKEN` to a secure random string at least 16 digits long and without single quotes or backslashes.\n    \n4.  Under the settings, you should now see a **Security Token**. Keep this page open as you will need this value later on in the process.\n    \n5.  In the Auth0 Dashboard, go to the Database Connection you want to use and enable **Requires Username** and **Import Users to Auth0**.\n    \n6.  Select the **Custom Database view**, and enable **Use my own database**.\n    \n7.  There should be two tabs below this setting under **Database Action Scripts**: one for **Login** and one for **Get User**.\n    \n8.  Select the **Login** view, clear out the existing code, [copy the db-login.js code from the GitHub repository](https://raw.githubusercontent.com/auth0/wp-auth0/4.4.0/lib/scripts-js/db-login.js), and paste it into the code editor.\n    \n9.  **This step is for versions 3.10.0 and earlier:** Look for `{THE_WS_URL}` and replace that with your WordPress instance's site URL, followed by `/index.php?a0_action=migration-ws-login`. The site URL can be found in the **Settings > General** screen in wp-admin. You can test this by pasting the complete URL in your browser. You should see `{\"status\":401,\"error\":\"Unauthorized\"}`.\n    \n10.  **This step is for versions 3.10.0 and earlier:** Look for `{THE_WS_TOKEN}` and replace that with the token that appears under the **User Migration Endpoints** setting.\n    \n11.  There should be no errors in the editor. If everything looks good, click **Save** at the top.\n    \n12.  **This step is for 3.11.0 and later:** Scroll down to **Settings** and add the following configuration variables: - `endpointUrl` set to your WordPress instance's site URL (**wp-admin > Settings > General > \"Site URL\" field**), followed by `/index.php?a0_action=`. - `migrationToken` set to the security token value seen in step 4 above. - `userNamespace` set to your Application name in Auth0 or any other value only including letters, numbers, and dashes.\n    \n    ![WordPress Plugin custom database settings](https://images.ctfassets.net/cdy7uua7fh8z/1icr0yX47nODUrzP7B6Xl2/b43621c3b6641f68bcb14ac38b237c11/auth0-custom-database-config.png)\n13.  Click the **Try** button at the top and use a valid WordPress user account in the form that appears. You should see the \"The profile is\" followed by the user's data. If not, please see the **Troubleshooting** section below.\n    \n14.  Select the **Get User** view, clear out the existing code, [copy the db-get-user.js code from the GitHub repository](https://raw.githubusercontent.com/auth0/wp-auth0/4.4.0/lib/scripts-js/db-get-user.js), and paste it into the code editor.\n    \n15.  **This step is for 3.10.0 and earlier:** Look for `{THE_WS_URL}` and replace that with your WordPress instance's site URL, followed by /index.php?a0\\_action=`migration-ws-get-user`. The site URL can be found in the **Settings > General** screen in wp-admin. You can test this by pasting the complete URL in your browser. You should see `{\"status\":401,\"error\":\"Unauthorized\"}`.\n    \n16.  **This step is for 3.10.0 and earlier:** Look for `{THE_WS_TOKEN}` and replace that with the token that appears under the **User Migration Endpoints** setting.\n    \n17.  There should be no errors in the editor. If everything looks good, click **Save**.\n    \n18.  Click the **Try** button at the top and use an email with a valid WordPress user account in the form that appears. You should see the \"The profile is\" followed by the user's data. If not, please see the **Troubleshooting** section below.\n    \n19.  In a new browser session, navigate to a login page on the WordPress site and attempt to log in (the user should not already exist in the database). You'll notice that the login process takes a little longer than usual at first, but it should succeed. Subsequent logins will be faster.\n    \n20.  (OPTIONAL) To turn on additional security for the migration endpoints, go to **Auth0 > Settings** screen in WordPress, turn on, then **Save Changes**. Attempt to log in with a different user to test that Auth0 can still reach the endpoints.\n    \n\nAt this point, the User Migration setup is complete, and existing WordPress users will be trickle-migrated to the Auth0 Database Connection.\n\n## Troubleshooting\n\nIssues with the User Migration typically come from a few places:\n\n*   Incorrect URL or token in the custom database scripts.\n    \n*   IP allow list turned on but with incorrect IP addresses.\n    \n*   Restricted or cached endpoints on your WordPress instance.\n    \n\nThe best way to start troubleshooting the issue is to use the **Try** button for the **Login** script found in the Custom Database view of the Database Connection being used on [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database). The following are the error messages you might see and the steps to take to fix.\n\n### Unexpected token < in JSON at position 0\n\nThis means the custom script is not getting data back in a format it can use. An incorrect endpoint URL likely causes this in the database script.\n\nFirst, copy the URL on line 10 in the script and paste it in your browser. If the endpoint is correct, it should display one of the two messages below:\n\n`{\"status\":401,\"error\":\"Unauthorized\"}`\n\n`// or`\n\n`{\"status\":403,\"error\":\"Forbidden\"}`\n\nIf what you're seeing is the home page or a 404, then the URL is incorrect. Look for your site URL under **Settings > General > Site URL** in the WordPress admin. Add `/index.php?a0_action=migration-ws-login` to the end for the Login script and `/index.php?a0_action=migration-ws-get-user` to the end for the Get User script.\n\n\\- **For versions 3.10.0 and earlier**: The URL value should appear in the script itself as the first parameter in the `request.post` call. - **For versions 3.11.0 and later**: The token value should be saved in a configuration variable. Add the following to the first line of the function and use the **Try** button to see what is stored for `endpointUrl`:\n\n`callback(null, configuration);`\n\nIf you're sure the URLs are correct and are still having this issue, check with your host to make sure those URLs are not cached or restricted in any way.\n\n### Wrong email or password\n\nThis is the default error shown if anything else goes wrong. The easiest way to troubleshoot what's happening is to temporarily output the error that's being sent back (these are opaque by default to avoid displaying anything that might give attackers something to work with).\n\nOn line 30 of the Login script, change:\n\n`callback(null);`\n\nto:\n\n`callback(wpUser.error);`\n\nSave the script, and try the connection again. You should see one of the following messages and be able to pinpoint the issue with the steps below. Once you've solved the issue, change the script back to what it was.\n\n### Forbidden\n\nThis means that the migration endpoints are turned off in your WordPress install. In WordPress, go to **Auth0 > Settings > Advanced** and turn on **User Migration Endpoints**. Make sure the token that appears there is the same as what is used for both custom database scripts:\n\n*   **For versions 3.10.0 and earlier**: The token value should appear in the script itself after `access_token:`\n    \n*   **For versions 3.11.0 and later**: The token value should be saved in a configuration variable. Add the following to the first line of the function and use the **Try** button to see what is stored for `migrationToken`:\n    \n\n`callback(null, configuration);`\n\nThis means that the migration IP allow list is turned on, but the incoming IP address is not on the list. Just below the Login script you should see a list of IP addresses:\n\n![WordPress User Migration - Auth0 IP Addresses](https://images.ctfassets.net/cdy7uua7fh8z/3RnxoRlvXm8FmNfu02fXVn/3672806c9cbf2bfe28503be8b8a63eda/auth0-incoming-ip-addresses.png)\n\nMake sure all of those IP addresses appear in WordPress under **Auth0 > Settings > Advanced** in the plugin:\n\n![WordPress User Migration - IP Whitelist](https://images.ctfassets.net/cdy7uua7fh8z/3w6C1IrsSC9hoivpSY122l/d117857524ef8d7872f364d3a7dbabda/migration-ip-whitelist-setting-field.png)\n\nIf one or more of the IP addresses listed in Auth0 do not appear in WordPress, add the missing ones into the field and save the settings page. Also, [create a post in the Auth0 Community](https://community.auth0.com/tags/wordpress) (and tag it \"wordpress\") that contains the missing IP address(es), so we can address the issue.\n\nThe security token is either missing in the database script (line 16), or your server is not processing the headers correctly. Check the Login script and make sure that the token exists and matches what is in WordPress. If the token is there and correct, then you'll need to talk to your host to enable the `Authorization` header to be parsed. For help with server troubleshooting, read [Apache 2.4 + PHP-FPM and Authorization headers on stackoverflow.com](https://stackoverflow.com/questions/17018586/apache-2-4-php-fpm-and-authorization-headers). To see how the token is retrieved, view the [plugin code in the GitHub repository.](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_Routes.php#L138)\n\n### Invalid token\n\nThe security token in the database script is incorrect. Check the Login script line 16 and make sure that the token matches what is in WordPress.\n\n### Invalid Credentials\n\nThe email address and/or password being used is incorrect. Check to make sure you're entering the correct email address and that the password is correct. You can reset the user password to something else to make sure you have the correct one.\n\n### Cannot Change Email or Incorrect User Data\n\nIf you are using more than one custom database connection in your Auth0 tenant and you're unable to change the email address or are getting user data stored for the wrong user, it's likely that you have overlapping user IDs in Auth0. This problem has been fixed for new sites installing 3.11.0 but, for connections created before then, this will need to be manually fixed by doing one of the following:\n\n*   If you don’t have any user data stored that needs to be kept (if you’re only using the connection to support login and not storing any metadata), you can create a new custom database connection using the steps above (using the 3.11.0 notes) and switch the Application to this new connection (make sure to turn the old connection off). The migration will be restarted, and there will be no impact on the user experience.\n    \n*   If you do have data in Auth0 that needs to be kept, you can [use our User Import/Export Extension](https://auth0.com/docs/manage-users/user-migration/user-import-export-extension) to adjust the user data. 1. Create a new custom database connection using the steps above (using the 3.11.0 notes). 2. Export all users from the existing connection (we recommend putting your site in maintenance mode while doing the switch-over, so no users are missed). 3. Change all user IDs to add the namespace used when creating the new connection. User IDs should go from something like `auth0|123` to `auth0|Your-WP-Site-Name|123`. Adjust all other fields you need to follow the import schema. To learn more, read [Bulk User Import Database Schema and Examples](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples). 4. Turn the new connection on and the old connection off for your application. 5. Import the new user data into the new connection and test.\n    \n*   If you have a paid account, you can contact our support team to run a database update script to change the user IDs to a namespaced version and add the namespace to your database script at the same time (step 12 in **Set Up and Configuration** above).",
    "title": "User Migration in Login by Auth0 WordPress Plugin",
    "description": "Describes the user migration feature of the Login by Auth0 WordPress Plugin",
    "languageCode": null
  },
  {
    "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-wordpress-plugin-invalid-state-errors",
    "markdown": "# Troubleshoot WordPress Plugin Invalid State Errors\n\nWe added state validation to WordPress plugin version 3.6.0, which you can find in the [wp-auth0 GitHub repository](https://github.com/auth0/wp-auth0/releases/tag/3.6.0). This security measure helps mitigate CSRF attacks by ensuring that the response belongs to a request initiated by the same user To learn more, read [Prevent Attacks and Redirect Users with OAuth 2.0 State Parameter](https://auth0.com/docs/secure/attack-protection/state-parameters).\n\n## How state validation works\n\nThe plugin performs state validation by:\n\n1.  Setting an `auth0_state` cookie in the browser via Javascript when the Lock login form is shown (on `wp-login.php` or any other page when using a shortcode or widget).\n    \n2.  Passing that value to the Lock embedded login form so it can be sent with the authentication request.\n    \n3.  Receiving that value back from Auth0 unchanged in a `state` URL parameter if the Auth0 login was successful.\n    \n4.  Validating the that value received matches the value sent and stored in the `auth0_state` cookie. If it's valid, then the login process continues. If not, the process stops and an \"Invalid state\" error message is shown.\n    \n5.  Deleting the cookie, regardless of validity.\n    \n6.  Using values in the base64 decoded object to redirect or perform other login actions, if valid.\n    \n\nThis process should be completely opaque to both the logging-in user and the site admin. The Auth0 server does not validate or require a state value and returns it untouched to the callback URL. If the \"Invalid state\" message is seen, then one of the first 4 steps above is not happening.\n\n## Common causes of the invalid state error\n\nBelow are some common causes of the invalid state error as well troubleshooting steps you can take.\n\n### Cached callback URLs\n\nThe most common cause of the invalid state error is when the callback URL is cached on the server.\n\nExclude caching on your server for all the URLs listed in the **Allowed Callback URLs** field in [Auth0 Dashboard > Applications > Applications > Settings](https://manage.auth0.com/#/applications/{yourClientId}/settings) and test again. In addition, exclude caching the site URL (`/index.php` on a regular install) if it has an Auth0 URL parameter.\n\nCheck to see if your server’s time is not set properly. The `BeforeValidException` error can occur when the token is perceived to have been generated before the current time, which can happen if the server times are off. You can check server time by using `echo current_time( 'c' )`. A temporary workaround may also be to modify the plugin to add a time offset if you cannot modify the server time, but it should be fixed for production.\n\nIf that does not solve the issue, continue with the troubleshooting steps below.\n\n### Cached cookies and URL parameters\n\nIf you're on a managed host like WP-Engine, you may need to contact their support team for additional assistance. We've had reports of issues accessing required cookies on the callback URL, as well as problems with checking authentication on the final page that users see after logging in. Specifically, ask to have cache exclusions added for:\n\n*   **Cookie:** `auth0_state`\n    \n*   **Cookie:** `auth0_nonce`\n    \n*   **Arg/URL parameter:** `auth0`\n    \n*   **Arg/URL parameter:** `code`\n    \n*   **Arg/URL parameter:** `state`\n    \n*   **Arg/URL parameter:** `id_token`\n    \n\n### Page refresh after error message\n\nIf you refresh the page after seeing a different error message (email verification, etc) the invalid state message will appear, as it’s trying to revalidate an already used value. This is expected.\n\n### Cookie names requirement\n\nSome hosts, like Pantheon, require specific cookie names to be used. You can alter the cookie name using the `auth0_state_cookie_name` filter in your theme or a custom plugin. To learn more about the `auth0_state_cookie_name` filter, read [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0). For additional information, [see the related GitHub issue](https://github.com/auth0/wp-auth0/issues/494) and [explore its fix](https://github.com/auth0/wp-auth0/pull/495).\n\n### Universal Login Page and link building\n\nIf your site is using the Universal Login Page and you're building the link yourself in a theme or plugin, you need to:\n\n*   Set a cookie called `auth0_state` with a randomly-generated value\n    \n*   Send that value in a `state` URL parameter.\n    \n\nAlternatively, you can go to Settings > Features tab > Universal Login Page and redirect login requests to the `wp-login.php` page where that cookie and URL parameter will be set automatically. If you want to continue to use a custom-built `/authorize` URL, you can [see the code that runs this process in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_LoginManager.php#L90).\n\n### Visiting the callback URL directly\n\nIf you visit your callback URL (typically `yourdomain.com/index.php?auth0=1`) directly or a second time after the authorization code has been exchanged, the invalid state error might display. This indicates that the state has already been verified and deleted.\n\n## Troubleshoot invalid state errors\n\nNote that some of the steps below will require the login process to be broken during the process (marked as such):\n\n1.  While logged out of WordPress and Auth0, visit the login page being tested.\n    \n2.  Check if the `auth0_state` cookie is being set (in Chrome, View > Developer > JavaScript Console > Application tab > Storage on the left > Cookies > domain being tested, look for an `auth0_state` cookie with a non-empty value).\n    \n    *   If this value is not set, check for errors in the JS console and make sure that your browser can accept cookies (login will not work without cookies). This is set in `/assets/js/lock-init.js`. You can [view this code on GitHub](https://github.com/auth0/wp-auth0/blob/master/assets/js/lock-init.js#L22).\n        \n    *   If the value is set, copy the value and view the source code of the page (in Chrome, **View** > **Developer** > **View Source**). Search for the value, and it should appear as the value associated with parameter `wpAuth0LockGlobal.settings.auth.params.state` ([view sample JSON](https://gist.github.com/joshcanhelp/1b8bb990048325eb7214e2b3d7136b78)). Make a note of this value (you'll need it in a following step).\n        \n3.  If the value appears there and the Lock form is loading normally then steps 1 and 2 from the first list above are functioning properly.\n    \n4.  Before logging in, [add this code snippet to the top of your `wp-config.php`](https://gist.github.com/joshcanhelp/ba98f748747c7fd2ecdf54e73c6110f3), so you can do a test install. **WARNING**: This will break login for the WordPress site being tested, so use it only on a non-production install.\n    \n5.  Log in normally.\n    \n6.  After you're redirected back to your site's callback URL, the process will stop. You should see an output like what's shown in the linked Gist in step #4 above. If you see something like `Array()` with no additional values, then one of two things could be happening:\n    \n    *   The WordPress callback URL is cached. Page caching can happen in many different ways so there are not explicit steps we can provide here. Check any caching plugins you may have installed, they usually have some kind of URL exclusion built-in. Also check with your host as caching may be automatic and require support involvement.\n        \n    *   The server is not reading the Auth0 cookie. For a possible solution, [see the related GitHub issue](https://github.com/auth0/wp-auth0/issues/494) and [explore its fix](https://github.com/auth0/wp-auth0/pull/495).\n        \n7.  If the values are present, check the response headers for the callback URL being loaded (in Chrome, View > Developer > JavaScript Console > Network tab, click the first \"document\" listed with a 500 status and look for \"Response Headers\"). Look for any evidence of caching here, like a `Cache-Control` with a non-zero `max-age`, an `x-cache` of something other than `MISS`, or any other clue that this page is being served from a cache.\n    \n8.  Also in the response headers, check that `set-cookie` includes a directive like `auth0_state=deleted` to confirm the validation process is happening.\n    \n9.  Make sure that the `state` parameter in the URL matches the one recorded from the cookie being set in step #3 above.\n    \n10.  If there is no evidence of caching, remove the debugging snippet from `wp-config.php` and refresh the callback URL. You should see the \"Invalid state\" message again. If any caching changes were made, attempt the login process all the way through (make sure to clear your cookies and browser cache for the site before testing).\n    \n\nThe following troubleshooting steps require plugin changes that will break the login process and need to be rolled back once complete. These steps should be performed on a test or staging server.\n\n11\\. Next, we need to check why the state is coming in but does not match the stored value.\n\n12\\. In `lib/WP_Auth0_LoginManager.php`, output the values of the stored and returned state and stop the process after. Just before [line 148](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_LoginManager.php#L148), add:\n\n```\necho '<h1>$_REQUEST</h1>'; var_dump($_REQUEST); echo '<h1>$_COOKIE</h1>'; var_dump($_COOKIE); die('<h1>Done</h1>');\n```\n\n13\\. Once again, make sure you're logged out and complete the login process.\n\n14\\. You should see values output when redirected back to the WordPress callback URL.\n\n15\\. Check if the `state` value in `$_REQUEST` exists and matches the `auth0_state` value in `$_COOKIE`.\n\n*   If it's different, it should match the original value recorded in step #3 above. This means that the `$_COOKIE` state value has changed somewhere in the process.\n    \n\nIf none of the steps above resolve the issue, please collect the results of the steps above and [contact support](https://support.auth0.com/) or [post on Community](https://community.auth0.com/tags/wordpress) with the tag `wordpress`. Also include:\n\n*   PHP version\n    \n*   WordPress version\n    \n*   Auth0 plugin version\n    \n*   Browser and OS used to test\n    \n*   A HAR file recording the entire process from loading the page with the login form all the way through the \"Invalid state\" message. To learn more about HAR files, read [Generate and Analyze HAR Files](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files).\n    \n\n*   [\"Invalid state\" error during Auth0 WordPress redirect](https://community.auth0.com/t/invalid-state-error-during-auth0-wordpress-redirect/12552/16) in Auth0 Community\n    \n*   [Invalid state when visiting the callback URL directly](https://wordpress.org/support/topic/unable-to-resolve-troubleshooting-with-a-client-grant-for-already-exists/) on wordpress.org",
    "title": "Troubleshoot WordPress Plugin Invalid State Errors",
    "description": "Troubleshooting invalid state errors in the Login by Auth0 WordPress plugin",
    "languageCode": null
  }
]