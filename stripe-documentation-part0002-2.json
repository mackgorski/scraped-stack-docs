ge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Delete a tax ID | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/accounting-integrations",
  "markdown": "# Connect an accounting tool | Stripe DocumentationThe Stripe Docs logo\n\nStripe Connector for NetSuite\n\nConnect Stripe with NetSuite to automate cash reconciliation and accept payments on invoices.",
  "title": "Connect an accounting tool | Stripe Documentation",
  "description": "Learn how to connect your accounting tools with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/options",
  "markdown": "# Report filters and settings | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the settings and controls common across all financial reports.\n\nThis page describes the set of options available on each financial report. These include filters to select the data to view, including [date range](#date-range), [currency](#currency), and [connect accounts](#connect-accounts).\n\n## Date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen loading the page, the reports default to displaying data for the prior month. You can select previous months, current month-to-date, or customize the date range to specific dates. Selected dates are inclusive. For example, if you choose a date range of June 12, 2024–June 19, 2024, it includes data from the beginning of the day on June 12, 2024 (12:00am) through the end of the day on June 19, 2024 (11:59pm) in the selected time zone.\n\n### Time zone customization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view financial reports based on either your Stripe account’s time zone or Coordinated Universal time (UTC). This selection affects both how the date range setting filters the report, and how dates and times contained within the report are presented.\n\n### Data availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe computes all your data on a daily basis beginning at 12:00am UTC. The data for each day is defined as account activity that takes place between 12:00am UTC and 11:59pm UTC.\n\n| Financial reports tab | Processing time |\n| --- | --- |\n| Balance | Within 12 hours |\n| Payout reconciliation | Within 12 hours |\n\n#### Caution\n\nSLAs indicate when the reports are available for download. Webhook notifications might take additional time.\n\nFor example, all account activity on June 12, 2024 (from 12:00 am to 11:59 pm UTC) is available in the **Balance financial reports** tab by June 13, 2024 at 12:00 pm UTC.\n\nUsers who view reports in certain non-UTC timezones might experience an additional day delay. For example, the Balance report for Monday won’t become available until Wednesday morning when viewed in the America/Los\\_Angeles timezone (PST). This is because data is processed by UTC day, and the last few hours of Monday in PST correspond to Tuesday morning in UTC. As such, the report can’t be made available until Tuesday’s data has finished processing, which occurs by Wednesday at 12:00 pm UTC.\n\n## Currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinancial reports are based on your account’s [settlement currency](https://docs.stripe.com/connect/payouts-connected-accounts#supported-settlement), which is the currency Stripe uses to send [payouts](https://docs.stripe.com/payouts \"payout\") to your bank.\n\nIf your account has multiple settlement currencies, you can view reports for each currency separately using the currency selector.\n\n## Connect accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms often need visibility into funds and transactions within their connected accounts in addition to their platform activity. When viewing a report as the platform account, you can toggle between viewing data:\n\n*   For the platform account only\n*   For all of the platform’s connected accounts (summary reports sum the data across all connected accounts, while itemized reports include relevant rows for all connected accounts)\n*   For a single connected account\n\nTo view reporting for a single connected account:\n\n1.  Go to the [Connect Accounts](https://dashboard.stripe.com/connect/accounts/overview) page and search for the account you want.\n2.  Click on the account’s name to go to the account detail page.\n3.  Click the **View financial reports** link under the Reports section.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-statement.e0e6c62683f5ee3367690b9936bf018b.png)\n\n#### Caution\n\nConnect platforms can’t view the financial reports for connected accounts that can access the full Stripe Dashboard and aren’t [controlled by the platform](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts). Holders of such accounts can independently control them if they were created with Stripe directly. Those accounts can contain transactions that originate outside of your platform. Because they have access to the full Stripe Dashboard, they can generate their own financial reports.\n\n## Scheduled reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set up a subscription schedule for reports and get notified of new data, read our [scheduled reports](https://docs.stripe.com/reports/scheduled-reports) docs.",
  "title": "Report filters and settings | Stripe Documentation",
  "description": "Understand the settings and controls common across all financial reports.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/api",
  "markdown": "# Run a report from the API\n\n## Access Stripe's financial reports programmatically to automate your reconciliation workflow.\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or Amazon Redshift in a few clicks with Stripe Data Pipeline. [Learn more](https://stripe.com/data-pipeline).\n\nThe [financial reports](https://dashboard.stripe.com/reports) in the Dashboard provide downloadable reports in CSV format for a variety of accounting and reconciliation tasks. These reports are also available through the API, so you can schedule them to run automatically or run them whenever you need to receive the associated report files for accounting purposes.\n\n## Report types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach financial report in the Dashboard provides several different CSV downloads. All of the available downloads for the following reports are also available from the API:\n\n*   [Balance](https://docs.stripe.com/reports/report-types/balance)\n*   [Payout reconciliation](https://docs.stripe.com/reports/report-types/payout-reconciliation)\n*   [Tax](https://docs.stripe.com/reports/report-types/tax)\n*   [Connect platforms](https://docs.stripe.com/reports/report-types/connect)\n\n#### CSV and API monetary formats differ\n\nThe CSV reports format monetary amounts in _major_ currency units as a decimal number. For example, The CSV formats 10 USD as dollars-and-cents (`10.00`). This differs from the Stripe API, where you specify amounts in the currency’s _minor_ unit (US cents) as an integer. In the API, you format 10 USD as cents (`1000`).\n\n### Run parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach report has both required and optional parameters you provide when creating a report run. Consider the following when running reports:\n\n*   Nearly every report type requires providing the run parameters `interval_start` (inclusive) and `interval_end` (exclusive) as Unix timestamps.\n*   Each corresponding report type resource has `data_available_start` and `data_available_end` fields. The API returns an invalid request error (status code `400`) if your run doesn’t meet the following contraints:\n    *   The `interval_start` and `interval_end` values must be between `data_available_start` and `data_available_end` (inclusive).\n    *   The `interval_start` value must be _before_ (and not equal to) `interval_end`.\n*   You can only download a report in a time zone for a `ReportType` with a `timezone` parameter. To do so, create a `ReportRun` object and supply the desired TZ database time zone name. The `timezone` parameter is optional and defaults to UTC if not supplied. See [IANA Time Zone Database](https://www.iana.org/time-zones) for a list of valid timezone values.\n*   The optional parameters `currency` and `report_category` filter results to just those rows matching the provided values.\n*   Reports return a default set of columns, but most report types allow you to customize the selection and ordering of columns in the output by including the optional `columns` parameter with a list of column names.\n\n## Data availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe prepares data for your reports on a semi-daily basis. [Report options](https://docs.stripe.com/reports/options#data-availability) provides details on expected processing time and data availability for each report.\n\nTo programmatically determine the time range of data available for a given report type, [retrieve](https://docs.stripe.com/api#retrieve_reporting_report_type) the `ReportType` object of interest. For example, the **Balance summary** report has the ID `balance.summary.1`, so you can retrieve the object as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nIn the example response below, the fields `data_available_start` and `data_available_end` reflect the full range of valid times for this report type. However, you’ll most often be running reports for a smaller interval within that range:\n\n`{   \"id\": \"balance.summary.1\",   \"name\": \"Balance summary\",   \"version\": \"1\",   \"object\": \"reporting.report_type\",   \"data_available_start\": 1519862400,   \"data_available_end\": 1517356800,   \"updated\": 1517382720, }`\n\nTimestamps, such as `date_available_start`, are measured in seconds since the Unix epoch. For example, `1519862400` represents the timestamp, `2018-03-01 00:00`.\n\n### New data notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs soon as a report type has new data available, Stripe publishes a `reporting.report_type.updated` event with the updated `ReportType` object. To access these events, you must have a [webhook configured](https://docs.stripe.com/webhooks#register-webhook) that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them. After you receive such an event, you can then run the report. For details, see the [recommended integration pattern](#integration-pattern).\n\n## Creating and accessing report runs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `ReportRun` API object represents an instance of a `ReportType` generated with specific parameters. Review the documentation for the [report type](#report-types) for the list of required and optional parameters for that type. For example, you can [create](https://docs.stripe.com/api/reporting/report_run/create) a **Balance change from activity summary** report for April 2020 as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"report_type\"=\"balance_change_from_activity.itemized.3\" \\   -d \"parameters[interval_start]\"=1577865600 \\   -d \"parameters[interval_end]\"=1580544000 \\   -d \"parameters[timezone]\"=\"America/Los_Angeles\" \\   -d \"parameters[columns][]\"=\"created\" \\   -d \"parameters[columns][]\"=\"reporting_category\" \\   -d \"parameters[columns][]\"=\"net\"  # Timestamps are for 2020-01-01 00:00 PST and 2020-02-01 00:00 PST. # The columns parameter is optional. A default set of columns will be provided if you don't specify a value. # Note that a live-mode API key is required.`\n\nWhen first created, the object appears with `status=\"pending\"`:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"pending\",   \"result\": null }`\n\nWhen the run completes, Stripe updates the object, and it has a `status` of `succeeded`. It also has a nested `result` object, containing a URL that you can use to access the file with your API key. For example, if you were to [retrieve](https://docs.stripe.com/api/reporting/report_run/retrieve) the above report run after it completes, the response would be:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"succeeded\",   \"succeeded_at\": 1580832960,   \"result\": {     \"id\": \"file_xs8vrJzC\",     \"object\": \"file\",     \"url\": \"[https://files.stripe.com/v1/files/file_xs8vrJzC/contents](https://files.stripe.com/v1/files/file_xs8vrJzC/contents)\",     \"created\": 1580832960,     \"purpose\": \"report_run\",     \"size\": 53075,     \"type\": \"csv\"   } }`\n\nTo retrieve the file contents, use your API key to access the file specified by `result.url`:\n\n`curl https://files.stripe.com/v1/files/file_xs8vrJzC/contents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n#### Notification of report run completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost runs complete within a few minutes. However, some runs could take longer—depending on the size of your total data set, and on the time range your report covers.\n\nWhen a requested report run completes, Stripe sends one of two webhooks:\n\n*   A `reporting.report_run.succeeded` webhook will be sent if the run completes successfully.\n*   A `reporting.report_run.failed` webhook will be sent if the run fails. (This should be rare, but we recommend that integrations be prepared to handle this case in the same manner as catching a `500` response.)\n\nIn both cases, the webhook payload includes the updated `ReportRun` object, which includes status `succeeded` or `failed`, respectively.\n\n## Recommended integration pattern for automated reporting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure a webhook that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them.\n\n1.  A `reporting.report_type.updated` webhook is sent as soon as a new day’s data is available for a given report type. The payload includes the updated `ReportType` object. You’ll typically receive 20-30 webhooks each day, two for each report type. (Different users are eligible for different reports.)\n2.  Upon receiving the `reporting.report_type.updated` webhook for the desired report type and range of data availability, [create a report run](https://docs.stripe.com/api/reporting/report_run/create). The response contains a new `ReportRun` object, initialized with `status=pending`.\n3.  When the run completes, a `reporting.report_run.succeeded` webhook is sent. This webhook includes the nested field `result.url`. (As mentioned above, in the rare case of a failure, we’ll send a `reporting.report_run.failed` event instead.)\n4.  Access the file contents at `result.url`, using your API key.",
  "title": "Run a report from the API | Stripe Documentation",
  "description": "Access Stripe's financial reports programmatically to automate your reconciliation workflow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/reporting-categories",
  "markdown": "# Reporting categories and types | Stripe DocumentationThe Stripe Docs logo\n\nLearn more about the `reporting_category` field on `BalanceTransaction` objects, and how it differs from `type` and other categorizations. This topic covers:\n\n*   [Why introduce a new categorization?](#why-new-categorization)\n*   [Reporting categories reference](#reference)\n\n## Why introduce a new categorization? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `BalanceTransaction` object’s `reporting_category` field improves on the `type` field by providing a more-useful grouping for most finance and reporting purposes. The following sections highlight the new field’s advantages.\n\n##### More-granular breakdown of `type=adjustment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `reporting_category` attribute separates balance transactions with `type=adjustment` into several different categories, including disputes, dispute reversals, and failed refunds. Additionally, several types of fees and [Connect](https://docs.stripe.com/connect \"Connect\") platform-fee refunds are now explicitly categorized with `reporting_category=fee`.\n\n#### A separate category for partial-capture reversals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you are [separately authorizing and capturing](https://docs.stripe.com/charges/placing-a-hold) payments, and you capture an amount less than the initial authorization, you will see two balance transactions: one for the full amount of the authorization, and another reversing the uncaptured portion. (Summing the two balance transactions yields the captured portion of the charge.)\n\nThe balance transaction reversing the uncaptured portion has `type=refund`, just as if you had refunded a portion of a sale at some later time. To allow separate handling of these objects—perhaps counting them against the initial sale amount, rather than as a separate refund—we label these with the distinct reporting category `partial_capture_reversal`.\n\n#### Consolidate multiple types into common categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing the `type` field, balance transactions arising from card-based charges are represented with `type=charge`, while those made with [other payment methods](https://docs.stripe.com/payments/payment-methods/overview) are represented with `type=payment`. Similarly, refunds and failures for cards versus alternative payment methods have the distinct types `refund` and `payment_refund`.\n\nWe found that these distinctions made many common reporting tasks unnecessarily awkward, and so `reporting_category` simplifies these (and other) groups of types, as follows:\n\n| Balance transaction types | Reporting category |\n| --- | --- |\n| `charge`, `payment` | `charge` |\n| `refund`, `payment_refund` | `refund` |\n| `payout_cancel`, `payout_failure` | `payout_reversal` |\n| `transfer`, `recipient_transfer` | `transfer` |\n| `transfer_cancel`, `transfer_failure`, `recipient_transfer_cancel`, `recipient_transfer_failure` | `transfer_reversal` |\n\n##### More-descriptive category names![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve renamed several balance transaction types for greater clarity:\n\n| Balance transaction type | Reporting category |\n| --- | --- |\n| `application_fee` | `platform_earning` |\n| `application_fee_refund` | `platform_earning_refund` |\n| `stripe_fee` | `fee` |\n| `reserve_transaction` | `connect_reserved_funds` |\n| `reserved_funds` | `risk_reserved_funds` |\n\n## Reporting categories reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis reference covers four groups of reporting categories:\n\n*   [Payments-related reporting categories](#charge_and_payment_related)\n*   [Balance-related reporting categories](#balance_related)\n*   [Issuing-related reporting categories](#issuing_related)\n*   [Connect-related reporting categories](#connect_related)\n\n### Payments-related reporting categories\n\nThese reporting categories are related to creating and refunding charges as part of processing payments.\n\n### `charge`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `charge`, `payment`, or `validation`\n*   Section(s) in the monthly report: _Payments (cards), Payments (other)_\n\n### `charge_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[ACH, direct debit](https://docs.stripe.com/sources#supported-payment-methods), and other [asynchronous payment methods](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) remain in a pending state until they either succeed or fail. You will see a pending balance transaction with the reporting category `charge` appear when the payment is created in a pending state. A `charge_failure` will appear if the pending payment later fails.\n\n*   Balance transaction type(s): `payment_failure_refund`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `dispute`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer [disputes a charge](https://docs.stripe.com/disputes), Stripe deducts the disputed amount from your balance.\n\n*   Balance transaction type(s): `adjustment`or `adjusted_for_overdraft_transaction`\n*   Section(s) in the monthly report: _Disputes_\n\n### `dispute_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you [win a dispute](https://docs.stripe.com/disputes#responding-to-a-dispute), the disputed amount is returned to your balance.\n\n*   Balance transaction type(s): `adjustment`\n*   Section(s) in the monthly report: _Dispute Reversals_\n\n### `partial_capture_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you are [separately authorizing and capturing](https://docs.stripe.com/charges/placing-a-hold) payments, and you capture an amount less than the initial authorization, you will see a `charge` for the full authorization amount, and a `partial_capture_reversal` for the uncaptured portion.\n\n*   Balance transaction type(s): `refund`\n*   Section(s) in the monthly report: _Payments (cards)_\n\n### `refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments you’ve [refunded](https://docs.stripe.com/refunds) to your customers. (Does not include charge failures or partial capture reversals, which are listed separately.)\n\n*   Balance transaction type(s): `refund`or `payment_refund`\n*   Section(s) in the monthly report: _Refunds (cards), Refunds (other)_\n\n### `refund_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreated when a [credit card charge refund](https://docs.stripe.com/refunds) fails, and Stripe returns the funds to your balance.\n\nThis may occur if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card).\n\n*   Balance transaction type(s): `refund_failure`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are related to changes that affect your Stripe balance, such as payouts, fees, and top-ups.\n\n### `anticipation_repayment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRepayments made to service an anticipation loan in Brazil. These repayments go to the financial institution to whom you have sold your receivables.\n\n*   Balance transaction type(s): `anticipation_repayment`\n*   Section(s) in the monthly report: _Anticipation Repayments_\n\n### `climate_order_purchase`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds used to purchase carbon removal units from Frontier Climate.\n\n*   Balance transaction type(s): `climate_order_purchase`or `climate_reservation_purchase`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `climate_order_refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds refunded to your balance when a Climate Order is canceled.\n\n*   Balance transaction type(s): `climate_order_refund`or `climate_reservation_refund`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `contribution`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds contributed via Stripe to a cause (currently Stripe Climate).\n\n*   Balance transaction type(s): `contribution`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `fee`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `stripe_fee`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `other_adjustment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMiscellaneous adjustments to your Stripe balance.\n\n*   Balance transaction type(s): `adjustment`, `obligation_outbound`, or `obligation_reversal_inbound`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payment_network_reserve_hold`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds that a payment network holds in reserve (e.g. to mitigate risk).\n\n*   Balance transaction type(s): `payment_network_reserve_hold`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payment_network_reserve_release`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds that a payment network releases from a reserve.\n\n*   Balance transaction type(s): `payment_network_reserve_release`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Payouts](https://docs.stripe.com/payouts) from your Stripe balance to your bank account.\n\n*   Balance transaction type(s): `payout`\n*   Section(s) in the monthly report: _Payouts and Transfers_\n\n### `payout_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds returned to your balance if a payout fails after it is initially created (e.g., due to an invalid account number or a cancellation). [Learn more](https://docs.stripe.com/payouts#payout-failures).\n\n*   Balance transaction type(s): `payout_cancel`or `payout_failure`\n*   Section(s) in the monthly report: _Payouts and Transfers: Failures and Refunds_\n\n### `risk_reserved_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe holds your funds in reserve to mitigate risk, two balance transactions are created: one to debit the funds from your balance, and a second to credit the funds back to your balance at the end of the reserve period.\n\n*   Balance transaction type(s): `reserved_funds`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `tax`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTaxes collected by Stripe to be remitted to the appropriate local governments. Typically, this is a tax on Stripe fees.\n\n*   Balance transaction type(s): `tax_fee`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `topup`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds you transferred into your Stripe balance from your bank account. [Learn more](https://docs.stripe.com/connect/top-ups).\n\n*   Balance transaction type(s): `topup`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `topup_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf an initially successful top-up fails or is cancelled, the credit to your Stripe balance is reversed. [Learn more](https://docs.stripe.com/connect/top-ups).\n\n*   Balance transaction type(s): `topup_reversal`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `unreconciled_customer_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer has unreconciled funds within Stripe for more than ninety days, Stripe transfers those funds to your balance.\n\n*   Balance transaction type(s): `transferred_to_balance_transaction`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are created as part of using the [Issuing API](https://docs.stripe.com/issuing).\n\nWhen [an issued card](https://docs.stripe.com/issuing) is used to make a purchase, an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is created. If the authorization is approved, a balance transaction is created with the type `issuing_authorization_hold` to hold the authorized amount in reserve from your account balance, until the authorization is either captured or voided. Some merchants can also update an authorization to request an additional amount (e.g., to extend a hotel booking or add a tip), and this is also represented as a balance transaction with the type `issuing_authorization_hold`.\n\n*   Balance transaction type(s): `issuing_authorization_hold`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_authorization_release`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorized purchase, made with [an issued card](https://docs.stripe.com/issuing), is captured by the merchant, the funds previously held for the authorization (`issuing_authorization_hold`) are released with a `issuing_authorization_release` balance transaction. Simultaneously, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance in another balance transaction with the type `issuing_transaction`.\n\n*   Balance transaction type(s): `issuing_authorization_release`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_disbursement`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredits to your balance for rewards, discounts, and other miscellaneous adjustments.\n\n*   Balance transaction type(s): `issuing_disbursement`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_dispute`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you dispute an [Issuing transaction](https://docs.stripe.com/issuing/transactions) and funds return to your Stripe balance.\n\n*   Balance transaction type(s): `issuing_dispute`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_transaction`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorized purchase, made with an [issued card](https://docs.stripe.com/issuing), has been authorized and captured by the merchant, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance with a `issuing_transaction` balance transaction.\n\n*   Balance transaction type(s): `issuing_transaction`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are related to using the [Connect API](https://docs.stripe.com/connect) and related APIs, such as [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\n### `advance`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIncrementing available funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference.\n\n*   Balance transaction type(s): `advance`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `advance_funding`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDecrementing pending funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference.\n\n*   Balance transaction type(s): `advance_funding`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `connect_collection_transfer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf one of your connected accounts has a negative balance for 180 days, Stripe transfers a portion of your balance, to zero out that account’s balance. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances).\n\n*   Balance transaction type(s): `connect_collection_transfer`\n*   Section(s) in the monthly report: _Reflected in \"Reserve\" section_\n\n### `connect_reserved_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf one of your connected accounts’ balances becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered.\n\nIf one of your connected accounts’ previously negative balance becomes less negative due to activity on account, another `reserve_transaction` is created to release a corresponding portion of the funds held in reserve. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances).\n\n*   Balance transaction type(s): `reserve_transaction`\n*   Section(s) in the monthly report: _Reflected in \"Reserve\" section_\n\n### `platform_earning`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `application_fee`\n*   Section(s) in the monthly report: _Application Revenue_\n\n### `platform_earning_refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) that you have returned to your connected accounts.\n\n*   Balance transaction type(s): `application_fee_refund`\n*   Section(s) in the monthly report: _Application Revenue Returned_\n\n### `transfer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `transfer`or `recipient_transfer`\n*   Section(s) in the monthly report: _Payouts and Transfers_\n\n### `transfer_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransfers to your connected accounts that have been cancelled.\n\n*   Balance transaction type(s): `transfer_cancel`, `transfer_refund`, `recipient_transfer_cancel`, or `recipient_transfer_failure`\n*   Section(s) in the monthly report: _Payouts and Transfers: Failures and Refunds_",
  "title": "Reporting categories and types | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/balance",
  "markdown": "# Balance report | Stripe DocumentationThe Stripe Docs logo\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.",
  "title": "Balance report | Stripe Documentation",
  "description": "Reconcile your Stripe balance and download your categorized transaction history.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/quickbooks",
  "markdown": "# Export account activity to QuickBooks\n\n## Download an export of your Stripe account data suitable for import into your desktop QuickBooks.\n\nIn addition to the CSV-formatted [reports](https://docs.stripe.com/reports) that are available for export in the Dashboard, information about payments, refunds, fees, and [payouts](https://docs.stripe.com/payouts \"payout\") is also available in a [QuickBooks Desktop](http://quickbooks.intuit.com/)\\-compatible IIF file. You can download this within the Dashboard’s [Legacy exports settings](https://dashboard.stripe.com/account/legacy_exports).\n\nYou can also use [Accounting Stripe Apps](https://marketplace.stripe.com/categories/accounting) to automate your bookkeeping, keep your financial data updated, and eliminate the need for manual data entry.\n\n## QuickBooks accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe exported IIF file creates the following nine accounts in QuickBooks, if they don’t already exist. All of the Stripe-created accounts are prefaced by **Stripe** to make them easy to locate and identify.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Stripe Account | Bank | All charges, refunds, and payouts |\n| Stripe Checking Account | Bank | Represents your actual bank account to which Stripe sends payouts |\n| Stripe Payment Processing Fees | Expense | Processing fees for all charges |\n| Stripe Returns | Income | All refunds |\n| Stripe Sales | Income | All charges minus processing fees |\n| Stripe Third-Party Account | Tax-Related Expense | Every transfer to a third-party |\n| Stripe Other Fees | Expense | Adjustments |\n| Stripe Processing Fees Adj | Expense | Adjustments |\n| Stripe Other Income | Income | Adjustments |\n\nIf these accounts already exist but are of a different type than what you see in the exports file, QuickBooks presents an error about being unable to change the account type. If this occurs edit the conflicting accounts to have the same type as the IIF file.\n\n#### Note\n\nAlways back up your QuickBooks data before importing new information.\n\n## Date format and timezones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe IIF file formats the date as MM/DD/YYYY. QuickBooks uses the same date format as your operating system. If this differs from the exported file, you can temporarily change your operating system’s date format:\n\n1.  Set the date format in your operating system to MM/DD/YYYY.\n2.  Import the QuickBooks IIF file.\n3.  Change your operating system’s date format back to your preferred style.\n\nYour account’s [timezone setting](https://dashboard.stripe.com/settings/account) is used for the date range of the IIF export.\n\n## Merging QuickBooks accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou may want to merge one or more of these created accounts with an existing QuickBooks account. In particular, you may want to merge the **Stripe Checking Account**, which represents the bank where your Stripe payouts are sent, with your actual banking account in QuickBooks:\n\n1.  Select **Lists > Chart of Accounts** to view all of your accounts.\n2.  Make sure both accounts being merged are on the same level (that is, both can be sub-accounts or both can be primary level accounts).\n3.  Select the account you are no longer going to use (for example, **Stripe Checking Account**).\n4.  Click **Account > Edit Account** at the bottom of the **Chart of Accounts** window.\n5.  Change the name of this account to exactly match the name of the other account (the one you’ll be keeping).\n6.  Click **Save**.\n\nYou’re then prompted about merging the account with an existing one. Click **Yes** to proceed with the merge, **No** to cancel. The records in the renamed account will be merged into the retained account. Accounts need to be re-merged after each new import.\n\n## Considerations for Connect platforms with Custom accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatform owners with Custom accounts can view the Dashboard of connected Stripe accounts. From the connected account’s Dashboard, export an IIF file in the same way as a normal Stripe account.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms creating charges on behalf of connected accounts that need to generate 1099s for Custom accounts must declare the correct tax-line mapping of the **Stripe Third-Party Account**. This expense account is given an initial tax-line mapping of 1099-MISC: Nonemployee compensation.\n\nFor QuickBooks to use **Stripe Third-Party Account** data for the generation of 1099s, you must first enable this feature within QuickBooks’ preferences.\n\n1.  Select **Preferences > Tax: 1099 > Company Preferences** within QuickBooks.\n2.  Click on the link in **If you want to map your accounts to boxes on Form 1099-MISC, click here**.\n3.  In the resulting QuickBooks 1099 Wizard, select **Stripe Third-Party Account** under **Accounts used for 1099**.\n4.  Under **Apply payments to this 1099 box** for **Stripe Third-Party Account**, select **Box 7: Nonemployee compensation**.",
  "title": "Export account activity to QuickBooks | Stripe Documentation",
  "description": "Download an export of your Stripe account data suitable for import into your desktop QuickBooks.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/payout-reconciliation",
  "markdown": "# Payout reconciliation report | Stripe DocumentationThe Stripe Docs logo\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested time zone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested time zone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested time zone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested time zone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.",
  "title": "Payout reconciliation report | Stripe Documentation",
  "description": "Reconcile each payout with the batch of transactions it settles.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/docs/reports/select-a-report",
  "markdown": "# Select a report | Stripe DocumentationThe Stripe Docs logo\n\n## Find the right report to fit your financial workflow.\n\nStripe has a variety of different reports that provide information about your transactions. Start with the task you’re looking to perform and use the table below to identify the best report.\n\n| Task | Suggested report |\n| --- | --- |\n| *   Download monthly transaction history<br>*   View monthly totals by transaction category<br>*   [Reconcile](https://docs.stripe.com/reports/select-a-report#reconciliation) your Stripe balance like a bank account<br>*   Download a list of your payouts | [Balance](https://docs.stripe.com/reports/balance) |\n| *   Break down the individual transactions included in each payout to your bank account<br>*   Download the detail for multiple payouts at a time | [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) |\n\n## Reconciling your cash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Balance](https://docs.stripe.com/reports/balance) and [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) reports both provide downloadable transaction history including custom metadata, and you can use either to reconcile your cash. The reports group transactions in different ways to facilitate different types of reconciliation.\n\n### The Balance report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Balance report resembles a bank statement and is optimized for users who treat their Stripe account similar to a bank account in their accounting system. The Balance report helps you to record all activity that occurred in Stripe during a date range. Payouts are recorded as simple transfers between your Stripe account and your bank account, which don’t correspond to any specific payments. Like a bank account, the balance is reconciled at the end of the period to confirm that all transactions have been accounted for.\n\n### The Payout reconciliation report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payout reconciliation report is optimized for users on automatic payout plans who model their Stripe balance as a temporary clearing account in their accounting system. This report helps you to reconcile each payout against the transactions included in that batch after it settles.\n\n### Reconciling between the reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost reconciliation workflows don’t require using both reports, but it can be helpful to understand how they fit together.\n\nThe following table shows an account on a [two day rolling schedule](https://docs.stripe.com/payouts#payout-schedule) with 5 days of activity. The account was opened on the 1st of the month and accepted 10 USD in charges from its customers on its first day. Those funds became available on the 3rd, and the account received its first payout to its bank account because of the 2 day payout schedule.\n\n| DAY | TRANSACTIONS | PAYOUTS | BALANCE AT EOD |\n| --- | --- | --- | --- |\n| 1st | 10 USD |     | 10 USD |\n| 2nd | 20 USD |     | 30 USD |\n| 3rd | 30 USD | 10 USD | 50 USD |\n| 4th | 50 USD | 20 USD | 80 USD |\n| 5th | 70 USD | 30 USD | 120 USD |\n\nGiven the above account activity and a [date range](https://docs.stripe.com/reports/options#date-range) of **3rd–5th**, the [Balance summary](https://docs.stripe.com/reports/balance) would include the following data.\n\n| BALANCE SUMMARY |     |\n| --- | --- |\n| Starting balance | 30 USD |\n| Balance change from activity | 150 USD |\n| Total payouts | \\-60 USD |\n| Ending balance | 120 USD |\n\nThe [Balance change from activity](https://docs.stripe.com/reports/balance) section of the Balance report includes all transactions that occurred from the 3rd through the 5th. The total of these transactions matches the **Balance change from activity** line item in the balance summary of 150 USD.\n\nThe [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) report includes transactions from the 1st through the 3rd because these transactions were paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Total Payouts** line item of the balance summary of -60 USD.\n\nThe [Ending balance reconciliation](https://docs.stripe.com/reports/payout-reconciliation) section at the bottom of the Payout reconciliation report includes transactions from the 4th and 5th because these transactions weren’t paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Ending balance** line item in the balance summary of 120 USD.\n\n## Including transactions in a given date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you run a report, you select the reporting period using the controls in the dashboard, or by specifying start and end dates via the API. Each report uses a different type of date to determine which transactions fall within the reporting period.\n\n| Report | Relevant Date | Report Column |\n| --- | --- | --- |\n| [Balance](https://docs.stripe.com/reports/balance) | Date of change in Stripe balance | Balance transaction `created` (\\*) |\n| [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) | Date automatic payout is available | `automatic_payout_effective_at` |\n\n(\\*) except automatic payout transactions, which impact your Stripe balance based on the `available_on` date",
  "title": "Select a report | Stripe Documentation",
  "description": "Find the right report to fit your financial workflow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reconciliation/overview",
  "markdown": "# How reconciliation works | Stripe DocumentationThe Stripe Docs logo\n\n## How reconciliation worksBeta\n\n## Learn how Stripe automates reconciliation across various data sources.\n\nLearn how Stripe helps you reconcile the activity on your Stripe account with your transaction data and bank statement.\n\nStripe uses the following three datasets in the reconciliation process. To match records between two datasets, Stripe relies on a shared reference key present in both datasets.\n\n*   **Your transaction data**: Your internal record of payments, like orders or sales records that reflect the gross amount for every transaction stored in your system. This could be your internal order management system or the list of invoices stored in your ERP for example, which contains information about all receivable expectations. Stripe uses this data to estimate the gross amount expected for each transaction and to create payment expectations. For example, successfully delivered orders create payment expectations. You can use the Stripe Dashboard to manually import this data using CSV files.\n*   **Stripe transaction**: Data produced by Stripe as the confirmation of the money movement. This includes any charges, refunds, or payouts processed by Stripe. This data is fetched into the reconciliation workspace every 12 hours.\n*   **Bank statement**: Bank account statements that confirm the money movement claimed by Stripe in your bank account. Stripe fetches this data directly from your bank account through Financial Connections on a daily basis. Link your bank account through Financial Connections if you haven’t already.\n\nStripe reconciliation enables you set up three types of reconciliations using the above datasets:\n\n[](#bank-reconciliation)\n\nBank reconciliation enables you to reconcile the payouts paid by Stripe with the cash deposited in your bank account. To enable this, Stripe needs access to your bank statement. Stripe can fetch your bank statement directly from your bank account through [Stripe Financial Connections](https://docs.stripe.com/financial-connections). You need to link your bank account through Financial Connections and provide access for Reconciliation to use this information. You could perform this step during the Bank reconciliation sign up process.\n\nAfter you provide access to your bank statement, Stripe automatically reconciles the Stripe payouts with the corresponding deposit in your bank account to determine the amount received and any outstanding balance. You can access the details of each Stripe payout, the bank deposit, and the corresponding reconciliation statuses.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-reconciliation.ce5a68761c0e9f0d507b4e66433bf5cf.png)\n\n[](#transaction-reconciliation)\n\nTransaction reconciliation enables you to reconcile Stripe transactions with your internal records at an individual transaction level. It enables you to track and make sure that your internal records and Stripe transactions match, and identify any gaps between the two on a regular basis and take corrective action.\n\nYou can ingest and map transaction data from your internal records to Stripe and automate the reconciliation between the two datasets. Stripe uses common reference keys present in both data sets to connect and reconcile the data. These references could be Stripe generated references like `charge_id`, or your own references that you pass into Stripe in the form of metadata.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/transaction-reconciliation.3e0dddd720f08c255bd9dcdcb21f03a8.png)\n\n[](#combined-reconciliation)\n\nYou can use a combination of transaction and bank reconciliation to track the complete lifecycle of a transaction from its origin (within your internal records) to Stripe transactions and your bank statement. The transaction data is reconciled with Stripe transactions on a one-to-one basis, and payouts from Stripe are reconciled with your bank statements. With the reconciled data, you can verify if:\n\n*   A transaction that you have initiated has been processed by Stripe accurately.\n*   If the payout against the same transaction has been received in your bank account.\n\nBy setting up this three way reconciliation between your transaction data, Stripe transactions, and your bank statements, you can accurately track information across systems and validate them before updating your books.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/combined-reconciliation.b6e8c8732c7dab08cc7887d2c2efec67.png)",
  "title": "How reconciliation works | Stripe Documentation",
  "description": "With Stripe reconciliation, you can reconcile settlement data, transaction data, and bank statements with Stripe data automatically.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reconciliation/bank-reconciliation",
  "markdown": "# Bank reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reconcile your Stripe payouts with cash in your bank.\n\nThe [Bank reconciliation report](https://dashboard.stripe.com/reconciliation/bank?src=docs) enables you to reconcile payouts generated by Stripe with the cash in your bank account, helping you track the cash from your business as it moves from Stripe to your bank.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-reconciliation-hero-illustration.3e51d76d4896a4684177b02ce3a9ab9b.png)\n\nThe Bank reconciliation report allows you to:\n\n*   Understand the monthly summary of activity on your Stripe account and its impact on payouts and the cash in your bank.\n*   Track the amount of cash realized from Stripe in your bank account.\n*   Track all Stripe payouts and their reconciliation status with bank deposits in a single place.\n*   Make sure you have the data required to accurately close your books.\n\n#### Note\n\nBank reconciliation is currently only available for users with direct US-based Stripe accounts that are on an automated payout schedule. This feature is not yet accessible for Stripe Connect accounts or users based outside the United States.\n\n#### Note\n\nStripe’s reconciliation features aren’t a substitute for professional services or professional advice.\n\n[](#how-bank-reconciliation-works)\n\nBank reconciliation helps you reconcile Stripe payouts with the deposits in your bank account, so you can keep track of all the funds received from Stripe and connect your revenue with cash in your bank. To enable the reconciliation, [link your bank account](#link-bank-account) on Stripe and approve access for reconciliation.\n\nAfter you provide access to your bank statement, Stripe automatically reconciles the Stripe payouts with the corresponding deposit in your bank account to determine the amount received and any outstanding balance. You can then access the details of each Stripe payout, the bank deposit, and the corresponding reconciliation statuses from the Dashboard. We prepare the summaries based on your Stripe account’s timezone and UTC.\n\n### Link bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo link your bank account, follow these steps:\n\n1.  **Initiate the process**: Click the **Link bank account** button on the bank reconciliation page.\n2.  **Provide consent**: Review Stripe’s privacy policy, linked account terms, and the details of the bank account where your Stripe payouts are being deposited.\n3.  **Select your bank**: Select your bank either from the list of the most frequently chosen banks shown in the tiles or by searching for it.\n4.  **Authenticate access**: Sign in to your banking portal.\n5.  **Select the account**: Select the account where your Stripe payouts are being deposited.\n6.  **Confirmation**: You’ll see a success message when the link is successful. This might take a few minutes to complete.\n\nThis process isn’t required if you already have a linked bank account on Stripe. If your bank link is inactive, you’ll need to relink and re-authenticate the access.\n\n[](#bank-reconciliation-summary)\n\nThe Dashboard summary offers an overview of activities affecting your Stripe balance and the related payouts to your bank account. It breaks down your activity by reporting categories, linking it with Stripe’s payouts and the funds received in your bank. It helps you understand the Stripe payment amounts and corresponding cash reconciled with your bank each month. This aids in creating a revenue-to-cash breakdown necessary for your monthly close process.\n\n#### Note\n\nThe activity available in the bank reconciliation summary corresponds to the [Balance change from activity](https://docs.stripe.com/reports/balance) report. This includes all activity that affects your balance, including charges, refunds, disputes, other adjustments, and fees during a month.\n\nConsider the following example of a Stripe account which is on daily automatic payout, and has a payout speed of 2 business days with 8 days of activity. The account accepted payment with a value of 10 USD on January 28. Because the payout speed is 2 business days, these funds became available on January 30 and the first payout was processed to the bank account. For simplicity, assume there are no fees or other debits on these transactions.\n\n| Date | Transaction | Payout | Received in bank |\n| --- | --- | --- | --- |\n| January 28 | 10 USD |     |     |\n| January 29 | 30 USD |     |     |\n| January 30 | 50 USD | 10 USD | 10 USD |\n| January 31 | 70 USD | 30 USD | 30 USD |\n| February 1 | 60 USD | 50 USD | 50 USD |\n| February 2 | 100 USD | 70 USD | 70 USD |\n| February 3 | 120 USD | 60 USD | 60 USD |\n| February 4 |     | 100 USD | \\*  |\n\n\\* This example assumes that payouts aren’t credited into your bank on a Sunday, and therefore no amount is received on February 4 (which we assume to be a Sunday).\n\nGiven the above account activity, the bank reconciliation summary on February 4 would have the following data:\n\n|     |     | January | February |\n| --- | --- | --- | --- |\n| Total payable | Total | 160 USD | 280 USD |\n| Pending | 0 USD | 120 USD |\n| Paid | 160 USD | 160 USD |\n| Reconciled with bank | Total | 160 USD | 60 USD |\n| In same month | 40 USD | 60 USD |\n| In subsequent months | 120 USD | 0 USD |\n| Unreconciled |     | 0 USD | 100 USD |\n\nThe table above indicates that transactions worth 160 USD and 280 USD were available for payout to your bank account in January and February respectively. In January, the entire 160 USD was disbursed from Stripe. Of this amount, which has been fully reconciled with your bank statement, 40 USD was received in your bank account within the same month of the transaction (January), whereas the remaining 120 USD was received in the following months (February, specifically).\n\nIn February, out of a total available payout of 280 USD, Stripe has disbursed 160 USD, with the remaining 120 USD still pending and labeled as `Pending`. From the paid 160 USD, 60 USD has been reconciled with your bank account and was received within the same month of the transaction (February). The remaining 100 USD is yet to be deposited in your bank account and is consequently categorized as `Unreconciled`.\n\n[](#cash-realized)\n\nThe cash realized in bank section shows you the total amount received from Stripe in your bank account during a calendar month. This helps you monitor your monthly cash inflow from Stripe. We capture this information from your bank statement and you can use it to update your cash accounts during the close process for the month.\n\nIn the example of account activity mentioned in the above section, the cash realized in bank section would have the following data:\n\n|     | January | February |\n| --- | --- | --- |\n| Total cash realized in bank | 40 USD | 180 USD |\n\nYou can see that the total amount reconciled with the bank (220 USD) matches the sum of the amounts received in your bank account over the two months. Moreover, the sum of the amount reconciled from January’s subsequent months and the amount reconciled within the same month from February (120 USD + 60 USD = 180 USD) equals the total cash realized from Stripe in February (180 USD).\n\n[](#reconciliation-records)\n\nThis section provides a list of all the payouts made by Stripe, the bank deposits, and their corresponding reconciliation and payout statuses. You can filter and view this data based on payout date, method, payout status, and reconciliation status.\n\nIn the account activity example, the payouts have the following data:\n\n| Payout date | Matching key | Payout status | Payout amount | Received in bank | Bank receipt date | Reconciliation status |\n| --- | --- | --- | --- | --- | --- | --- |\n| February 5 | `ST-1239R12DF` | In transit | 120 USD |     |     |     |\n| February 4 | `ST-1334R12DG` | Paid | 100 USD |     |     | Unreconciled |\n| February 3 | `ST-1436R12DH` | Paid | 60 USD | 60 USD | February 3 | Reconciled |\n| February 2 | `ST-1537R12DI` | Paid | 70 USD | 70 USD | February 2 | Reconciled |\n| February 1 | `ST-1639R12DJ` | Paid | 50 USD | 50 USD | February 1 | Reconciled |\n| January 31 | `ST-1738R12DK` | Paid | 30 USD | 30 USD | January 31 | Reconciled |\n| January 30 | `ST-1839R12DL` | Paid | 10 USD | 10 USD | January 30 | Reconciled |\n\n### Payouts report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `payout_date` | The date that the payout is expected to arrive in the bank. |\n| `matching_key` | The common reference key between Stripe payouts and your bank statements that we use to match records and perform reconciliation. |\n| `payout_status` | The status of the payout paid by Stripe. |\n| `payout_amount` | The net amount paid by Stripe against the payout. |\n| `received_in_bank` | The amount received in your bank account against the payout. |\n| `bank_receipt_date` | The date that the payout is received in your bank account. Stripe fetches this information from your bank deposits. |\n| `reconciliation_status` | The reconciliation status of the payout. We match Stripe payouts with your bank deposits and assign each payout one of the following statuses: ‘Reconciled’ or ‘Unreconciled’. |\n\n[](#how-we-use-your-data)\n\nThe Bank reconciliation report uses your Stripe transactions and Financial Connections accounts to provide you with bank reconciliation services. You can control which Stripe products receive and use your financial accounts data from the [Link external account settings](https://dashboard.stripe.com/settings/linked-accounts) page.\n\n#### Note\n\nThe bank reconciliation services are provided “as-is.” There might be delays in data rendering. You’re responsible for checking the accuracy and completeness of the data.",
  "title": "Bank reconciliation | Stripe Documentation",
  "description": "Reconcile Stripe payouts with the cash in your bank account and verify the monthly summary of your revenue to cash breakdown.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/line_item",
  "markdown": "# Invoice Line Item | Stripe API Reference\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```",
  "title": "Invoice Line Item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/netsuite/overview",
  "markdown": "# Stripe Connector for NetSuite | Stripe DocumentationThe Stripe Docs logo\n\n## Use the connector to reconcile your Stripe activity into NetSuite.\n\nThe Stripe Connector for NetSuite synchronizes your Stripe data to NetSuite, including customers, invoices, payments, refunds, disputes, deposits, and more. The connector eliminates hours of manual work, replacing costly custom integrations with no-code prebuilt solutions, and providing the flexibility to customize the integration to your unique business needs.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to use the Stripe Connector for NetSuite, you must work with an official implementation partner to set up the connector.\n\n1.  [Prepare your Stripe and NetSuite accounts](https://docs.stripe.com/connectors/netsuite/onboarding) for onboarding.\n2.  [Contact us](https://marketplace.stripe.com/apps/netsuite-connector) to get started with your implementation.\n\n## Workflows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector enables multiple workflow automations to reconcile your Stripe data into NetSuite. Every flow includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation).",
  "title": "Stripe Connector for NetSuite | Stripe Documentation",
  "description": "Use the connector to reconcile your Stripe activity into NetSuite.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/google-play",
  "markdown": "# Stripe connector for Google Play Store\\*\n\n## Automate recurring file imports from Google Play Store to Stripe.\n\nTo set up an automated job for importing data and make sure that your Stripe products remain up-to-date, you can import files from the Google Play Store into the Stripe Data Management Platform.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you integrate, make sure that you have:\n\n1.  An active Google Cloud and Play Console account with access to the application files.\n2.  Admin account access to the Stripe Dashboard.\n3.  Enabled the APIs for Google Cloud Storage and Google Play Android Developer.\n4.  A service account on Google Cloud platform. The Data Connector uses this account to access your application’s financial reports.\n5.  The private key of your service account that’s saved securely.\n6.  The service account added under **Users and permissions** in Play Console.\n7.  The application’s package name (the URL below the app name in Play Console) and Google Cloud Storage URI.\n\n#### Disclaimer\n\nNote: By using this Stripe Connector you warrant that you’ve obtained the requisite permissions, and provided the necessary notices and consents required, in order for you to use the Stripe Connector and to enable Stripe to provide you the Services.\n\n[](#enable-apis)\n\nTo enable the necessary APIs:\n\n1.  Sign in to the [Google Cloud Console](https://console.cloud.google.com/), then select your project for the application in the top left corner.\n2.  Click **API and Services** > **Enabled APIs & services** in the left pane.\n3.  If the list on this page contains the **Cloud Storage API** and the **Google Play Android Developer API**, skip this step and [create a service account key](#generate-keys) instead. Otherwise, click **Enable APIs and Service**.\n4.  Search for **Play Store**, then select **Google Play Android Developer API**.\n5.  Click the **Enable** button.\n\n[](#create-service-account)\n\nTo create a service account:\n\n1.  Click **Credentials** under **APIs & Services** in the left pane.\n2.  Click **\\+ Create credentials** > **Service account**.\n3.  Enter a name and description for the service account. The Data Connector uses this account to access your application’s financial reports.\n4.  Add the **Storage Object Viewer** role from the **Role** dropdown, then click **Done**.\n\n[](#generate-keys)\n\nAfter you create the service account, Google Cloud redirects you to the Credentials page. From this page:\n\n1.  Click the service account that you created.\n2.  On the Keys page, click **Add key** > **Create new key**.\n3.  Select **JSON**, then click **Create** to download a private key on your device. Make sure that you secure this private key. If you lose it, you must generate a new one because it’s the only copy of the private key.\n\n[](#add-service-account)\n\nTo integrate the service account on Play Console:\n\n1.  On the [Play Console page](https://play.google.com/console/), click **Users and permissions** in the left pane.\n2.  Click **Invite new user**.\n3.  Enter the email address of the service account you created.\n4.  Under **App permissions**, click **Add app**.\n5.  Select the app that you want to integrate with, then click **Apply**.\n6.  Select **View app information (read-only)**, **View financial data**, and **Manage orders and subscriptions**, then click **Apply**.\n7.  Click **Invite user** > **Send Invite**.\n\n[](#submit-service-account)\n\nTo submit the service account credentials and your app package name:\n\n1.  In the Google Play Store Console Dashboard, click **Copy Cloud Storage URI** to copy your Google Cloud Storage URI. The URI begins with `pubsite_prod_rev` (for example, `pubsite_prod_rev_01234567890987654321`).\n2.  Enter your App Package Name. This is the URL that appears under the app name in the Play Console.\n3.  Use the secure link that we provide to upload the Service Account Credentials JSON file.\n\n[](#upload-api-key)\n\nTo configure the Stripe connector for Google Play Store using Stripe:\n\n1.  Click **\\+ Set up connector** > **Google Play Store** in the [Connectors tab on the Data management page](https://dashboard.stripe.com/data-management/connectors).\n2.  Enter a name, then click **Next**.\n3.  Review the permissions, then click **Next**.\n4.  Upload your private key file to the **Private key** section. Then, enter the **App package name** and **Google Cloud Storage Bucket ID** [that you created for the service account](#generate-keys).\n5.  Click **Authenticate** to establish a connection.\n\n[\n\n## Maintain your Google Play Store connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#maintain-connection)\n\nAfter Stripe establishes your connection, we fetch your data once a day. To monitor the health of your connection:\n\n1.  View the status and the latest sync details of your established connections in the [Data Management Connector Dashboard](https://dashboard.stripe.com/data-management/connectors).\n2.  Click the connector to manage an individual connection. You can edit the name, re-authenticate a broken connection, and delete a connection.\n\n\\*Google Play is a trademark of Google LLC.",
  "title": "Stripe connector for Google Play Store* | Stripe Documentation",
  "description": "Automate recurring file imports from Google Play Store to Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reconciliation/transaction-reconciliation",
  "markdown": "# Transaction Reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Transaction ReconciliationBeta\n\n## Set up the reconciliation between Stripe transactions and your transaction data.\n\nTransaction reconciliation enables you to reconcile between your internal records with Stripe processed charges and refunds at an individual transaction level.\n\nTransaction reconciliation is useful for businesses that have:\n\n*   High transaction volumes, such as thousands of monthly transactions.\n*   Multiple payment methods used in a single transaction, such as gift cards and discounts.\n*   Long transaction life cycles where transactions are spread across multiple periods.\n\nUsing transaction reconciliation, you can:\n\n*   Track the collections against each individual transaction.\n*   Ensure high integrity for your revenue assurance process.\n*   Seamlessly reconcile large volumes of data without the constraints of spreadsheets.\n*   Save time spent on manual reconciliations.\n\n[](#get-started)\n\nTo get started with Stripe reconciliation upload your transaction data. Then you can:\n\n*   Track the reconciliation status.\n*   View analytics.\n*   Download prebuilt reports.\n*   Generate custom reports.\n\n[](#import-data)\n\nTo import transaction data:\n\n1.  Go to the Stripe Dashboard > reconciliation overview page and click **Import data**.\n2.  Click **Browse** and select your file. It must be smaller than 70 MB.\n3.  Click **Import CSV**.\n4.  To track the progress of the import, click **View data management**.\n\n#### Note\n\nYou are responsible for the data you provide to Stripe. By providing us data to use, you acknowledge that you have received permission to share that data with Stripe and to enable Stripe to use it to provide you the services.\n\n### Reconciliation data schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transaction data must have some required fields to convert it to Stripe’s canonical reconciliation schema. Here is the expected schema:\n\n| Field name | Description | Type | Required |\n| --- | --- | --- | --- |\n| `Id` | A unique identifier for the payment expectation. For example - UUID, combination of orderitem and fulfillment status etc. | String | Required |\n| `gross_amount` | The gross amount of the payment expectation. Does not account for any fees or currency conversions. | numeric | Required |\n| `currency` | Currency associated with `gross_amount`. | enum | Required |\n| `type` | Either `inbound` or `outbound`. | enum | Required |\n| `customer_id` | Identifier for the customer involved in the payment expectation. | string | Optional |\n| `created_at` | When the payment expectation was created. | timestamp | Required |\n| `updated_at` | When the payment expectation was updated. | timestamp | Optional |\n| `reconciliation_reference` | Reference used to do a look-up on settlement data (`charge_id`). | string | Required |\n\n[](#reconciliation-statuses)\n\nAfter the data is imported, reconciliation starts automatically, and each transaction gets a reconciliation status. The reconciliation status represents the state of the transaction and helps you understand what action to take. Settlement reconciliation and Transaction reconciliation have different statuses.\n\n### Settlement reconciliation statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor reconciliation between settlement and bank data, each settlement is assigned one of the following statuses:\n\n*   **Completely matched**: Both “amount” and “settlement\\_id” matched with the Bank Statement\n*   **Unmatched**:“Settlement\\_id” not matched/found either in settlement data or Bank data\n*   **Partially matched**: “Settlement\\_id” matched/found in the Bank Statement but difference in “amount” beyond the threshold\n\nYou can configure the settlement reconciliation threshold when you compare settlement data to bank deposit data. If the difference in amounts is within the threshold, the settlement ID gets tagged as completely matched. If the difference in amounts is outside of the threshold, the settlement ID gets tagged as partially matched.\n\nHere is an example of how the settlement reconciliation statuses are computed (in this example, the threshold is 1 USD):\n\n| Settlement reconciliation status | Settlement ID (Stripe data) | Settlement ID (bank data) | Settlement amount expected (Stripe data) | Deposit amount (bank data) |\n| --- | --- | --- | --- | --- |\n| **Completely matched** | ST-123 | ST-123 | 1000 USD | 1000 USD |\n| **Partially matched** | ST-abc | ST-abc | 1000 USD | 900 USD |\n| **Unmatched** | ST-xyz | null | 1000 USD | null |\n\n### Transaction reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction reconciliation (between transaction data and settlement data) has four statuses:\n\n*   **Settled**: The record is present in both datasets and the amount is an exact match. In the case of pay-in reconciliation with three data sets, the settlement reconciliation status needs to be completely matched.\n*   **In process**: The record is present in both datasets but the difference in the amounts is beyond the set threshold.\n*   **Open**: The record is present in the transaction data but missing in the Stripe settlement data. A transaction can be open even if the settlement reconciliation for the corresponding `charge_id` is unmatched.\n*   **Foreign**: The record is present in the Stripe settlement data but missing in transaction data.\n\nConfigure the transaction reconciliation threshold when comparing the amount expected (transaction data) and the amount processed (Stripe records). If the difference in amounts is within the threshold, the charge ID gets tagged as **Settled**. If the difference in amounts is outside of the threshold, the charge ID gets tagged as **In process**.\n\nHere is the sample data showing how the transaction reconciliation statuses are computed (in this example, the threshold is 1 USD):\n\n| Transaction reconciliation status | Charge ID (transaction data) | Charge ID (Stripe records) | Amount expected (transaction data) | Amount processed (Stripe records) |\n| --- | --- | --- | --- | --- |\n| **Settled** | `ch_123` | `ch_123` | 50 USD | 50 USD |\n| **In process** | `ch_abc` | `ch_abc` | 50 USD | 45 USD |\n| **Open** | `ch_xyz` | null | 50 USD | null |\n| **Foreign** | null | `ch_789` | null | 50 USD |\n\n[](#view-analytics)\n\nThe reconciliation analytics page provides high-level details about the overall money movement of your business. It also includes charts for reconciliation status and aging summaries.\n\n### Reconciliation status chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe reconciliation status chart provides a high-level view of the funds received or pending from Stripe. It shows an aggregated view of the amount corresponding to the transactions across four reconciliation statuses: Open, In Process, Foreign, and Settled. The key insight is to understand the amount for each of the reconciliation statuses and take actions based on the insights.\n\n### Aging summary chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe aging summary chart provides a high-level view of the time it takes Stripe to settle processed transactions. It shows an aggregated view of the transaction amount by settlement days. Use the chart to determine whether Stripe is settling the money on time.\n\nThis helps you understand if Stripe is adhering to the agreed-upon SLA (service level agreement). The graph differentiates between the amount settled on or before SLA and after SLA with different colors. Blocks in blue represent the transaction amount settled on or before the SLA. Blocks in red represent the transaction amount settled after SLA.\n\n[](#generate-reports)\n\nHere are the standard reports that you can generate and download from the Stripe Dashboard:\n\n| Report type | Description | Reconciliation type |\n| --- | --- | --- |\n| Reconciliation result | Transaction-level reconciliation report that shows you the reconciliation status of every transaction against their corresponding Stripe charges or refunds. It helps you track whether or not Stripe has processed the right funds against each of your transactions. | *   Transaction reconciliation<br>*   Pay-in reconciliation |\n| Bank settlement | Settlement level report that shows you if you’ve received the money corresponding to each Stripe settlement in your bank account. | *   Settlement reconciliation<br>*   Pay-in reconciliation |\n| Transaction search | Transaction level search report which helps you access all the details of any transaction using a transaction ID or settlement ID. | *   Transaction reconciliation<br>*   Pay-in reconciliation |\n\n### Download a report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo download a report:\n\n1.  Go to the Dashboard **Reconciliation** > **Pay-in reconciliation** page.\n2.  Go to the **Reports** tab.\n3.  Click **New report**.\n4.  Select the report type and filters.\n5.  Click **Generate button**.\n6.  After the report completes generation, click **Download**.\n\n### Reconciliation result report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are the columns in the reconciliation report:\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| `reference_id` | Y   | The common reference key between your transaction data and Stripe settlements data. For example, `charge_id` (starting with `ch_`) for the charges and `refund_id` (starting with `re_`) for refunds. |\n| `recon_party_name` | Y   | Name of the payment provider that has processed the payment. For example, Stripe. |\n| `transaction_type` | Y   | Type of the transaction: Forward (for charges) or reverse (for refunds). |\n| `reconciliation_status` | Y   | The reconciliation status of the transaction. One of the following: Open, In process, Settled, Foreign. |\n| `transaction_date` | Y   | The date when the sale or refund was created per your transaction data (internal records). |\n| `settlement_date` | Y   | The date on which Stripe initiated the settlement or payout. |\n| `bank_date` | Y   | The date on which the settlement or payout was received in your bank. This information is fetched from your bank statements. |\n| `total_transaction_amount` | Y   | The gross amount corresponding to the charge or refund per your transaction data. |\n| `total_settlement_amount` | Y   | The gross amount corresponding to the charge or refund per the Stripe’s settlement data. |\n| `account_name` | Y   | The name of the account that is debited or credited from the chart of accounts to create the journal entry. |\n| `credit_cycle_days` | N   | Number of days it takes for your funds to become available and paid out. |\n| `age` | N   | The difference between the `transaction_date` and `settlement_date`, which represents the time taken for the corresponding payout to be initiated after the transaction is created. |\n| `settlement_currency` | Y   | The currency in which Stripe has settled the charge or refund. |\n| `settlement_id` | N   | The ID of the settlement or payout in which the charge or refund was settled. |\n| `settlement_status` | N   | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following status: Matched, Unmatched, Partially matched |\n\n#### Custom data addition![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add custom metadata from your transaction data to the reconciliation result report as additional columns. For example, if `store_id` is part of the transaction data, it shows up in the custom metadata section.\n\nTo view the available custom metadata, click **Show** under the columns. The metadata is populated in the report by aggregating based on the reconciliation reference, for example the `charge_id`. If multiple rows of metadata are found with the same `charge_id`, they appear as comma-separated values in the report.\n\n### Bank settlement report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `recon_party_name` | Name of the party that has initiated this settlement. For example, Stripe. |\n| `settlement_id` | ID of the settlement or payout. |\n| `settlement_date` | The date on which Stripe initiated the settlement or payout. |\n| `bank_date` | The date on which the settlement or payout was received in your bank. This information is fetched from your bank statements. |\n| `settlement_amount` | The net amount paid by Stripe against the settlement. |\n| `bank_received_amount` | The amount received in your bank account against the settlement. |\n| `outstanding_amount` | The outstanding amount against the settlement. This is the difference between the `settlement_amount` and `bank_received_amount`. |\n| `settlement_match_status` | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following statuses: Matched, Unmatched, Partially matched. |\n\n#### Transaction search report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `reference_id` | The common reference key between your transaction data and Stripe settlements data. For example: `charge_id` (starting with `ch_`) for the charges and `refund_id` (starting with `re_`) for refunds. |\n| `recon_party_name` | Name of the payment provider that has processed the payment. For example, Stripe. |\n| `transaction_type` | Type of transaction: forward (For charges) or reverse (For refunds). |\n| `reconciliation_status` | The reconciliation status of the transaction. One of the following: Open, In process, Settled, Foreign. |\n| `transaction_date` | The date on which the sale or refund was created as per your transaction data (internal records). |\n| `settlement_date` | The date when Stripe initiated the settlement or payout. |\n| `total_transaction_amount` | The gross amount corresponding to the charge or refund as per your transaction data. |\n| `total_settlement_amount` | The gross amount corresponding to the charge or refund as per the Stripe’s settlement data. |\n| `account_name` | The name of the account that is debited or credited from the COA to create the journal entry. |\n| `settlement_currency` | The currency in which Stripe has settled the charge or refund. |\n| `settlement_id` | The ID of the settlement or payout in which the charge or refund was settled. |\n| `settlement_status` | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following status: Matched, Unmatched, Partially matched. |",
  "title": "Transaction Reconciliation | Stripe Documentation",
  "description": "Reconcile your transaction level records with charges and refunds processed on Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior",
  "markdown": "# Specify product tax codes and tax behavior\n\n## Learn how to add tax codes and tax behavior to your products and prices to automatically calculate tax.\n\n#### Note\n\nStripe Tax uses product tax codes (PTCs) to associate products with their applicable tax rates, which might be lower or higher in different cities or countries. [Assign each of your products a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to automatically apply the rate and other taxability rules.\n\nIf a product doesn’t fit any of the specific codes, use one of the codes with “General” in its name to apply the standard rate of the jurisdiction. See our [list of available tax codes](https://docs.stripe.com/tax/tax-codes).\n\n### Preset tax codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen activating Stripe Tax you can set two types of preset tax codes: one for products and one for shipping. You can set both in the [Tax settings](https://dashboard.stripe.com/settings/tax) in the Dashboard.\n\n![The tax settings showing the preset tax codes, and the default shipping tax code.](https://b.stripecdn.com/docs-statics-srv/assets/pp_settings_v2.b1d3f908cebf1292d37b0d2f7c5cf4c0.png)\n\nThe tax settings showing the preset tax codes, and the default shipping tax code.\n\n![Preset tax code setting in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_settings.9b418a4caa814152a80f66c7afffd059.png)\n\n#### Preset product tax code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe preset product tax code represents your product or service in Stripe Tax. We use the preset if you don’t explicitly specify a `tax_code` on your [products](https://docs.stripe.com/api/products \"Products\") or in `product_data` on your transactions. As you process payments, we also use the preset tax code to display the tax thresholds you might be approaching or have exceeded, under the **Monitor tax thresholds** section in your tax settings.\n\nIf you sell multiple different product types (for example, SaaS and e-books), you could use test mode to change your preset tax code and review the impact of different product types on the **Monitor** tab.\n\n#### Preset shipping tax code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe preset shipping tax code represents the tax treatment for shipping fees when charged. We use this if you don’t explicitly specify a `tax_code` on a shipping rate. Stripe Tax allows you to change the default shipping treatment to Nontaxable if you don’t want to charge any tax on shipping fees. We recommend you leave the default as “Shipping” to ensure the correct tax is always charged.\n\nTo charge tax on shipping for recurring payments, you can create a Product or pass `product_data` for a line item called “shipping” and select the shipping `tax_code`.\n\nThe taxability of shipping can vary by US state and country.\n\n![Map of the United States showing states where shipping is taxable, not taxable, or have no sales tax.](https://b.stripecdn.com/docs-statics-srv/assets/pp_shipping_us_taxability.e90be097aec68286cbc6a83a4e5bfc13.png)\n\n## Tax behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must specify a `tax_behavior` on a price, or a default tax behavior in the tax settings in the Dashboard, which determines how tax is presented to the buyer. This allows you to localize your checkout depending on the market. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n\n### Setting a default tax behavior (recommended)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can define a default tax behavior that applies to every price that has no tax behavior defined. You can setup the default tax behavior under the [Stripe Tax settings](https://dashboard.stripe.com/settings/tax).\n\nAfter you set the default tax behavior, all prices that don’t have a `tax_behavior` defined, use this setting and are ready for Stripe Tax. The options for the default tax behavior are:\n\n*   **Inclusive**: Inclusive tax is already included in the price. For example, a product has the price defined as 5.00 USD. The final price the customer pays is 5.00 USD.\n*   **Exclusive**: Exclusive tax is added on top of the price. For example, a product has the price defined as 5.00 USD. The tax charged on this product could be 10% and would result in a final price of 5.50 USD. (Tax rates might differ—this is only an explanatory example.)\n*   **Inferred by currency**: The tax behavior is based on the price that’s chosen for a product. For the currencies `USD` and `CAD` the tax behavior is exclusive. For all other currencies the tax behavior is inclusive. This also works with [multi-currency Prices](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\").\n\nTo override this setting for an individual price, [set a tax behavior on a price](#setting-tax-behavior-on-a-price-(optional)).\n\n## Setting tax behavior on a price (optional)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the tax behavior for a [Price](https://docs.stripe.com/api/prices \"Prices\") when creating it with the Dashboard or the API. When creating a Price in the Dashboard, you can inspect the impact of your pricing model on your revenue.\n\n#### Caution\n\nYou can’t change `tax_behavior` after it’s been set to one of “exclusive” or “inclusive”.\n\n![Tax behavior for a Price object in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_pricing.c4124697874540947a451121f0c73c4d.png)\n\nTo create a Price with `tax_behavior` through the API, it might look like this:\n\n`curl https://api.stripe.com/v1/prices \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d unit_amount=10000 \\  -d currency=usd \\  -d product=prod_q23fxaHasd \\  -d tax_behavior=exclusive \\  -d \"recurring[interval]\"=month`\n\nFor a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency\\_options.<currency>.tax\\_behavior](https://docs.stripe.com/api/prices/create#create_price-currency_options-tax_behavior) parameter to set different tax behaviors for different currencies.\n\nIn some cases, you might want to use a custom price that hasn’t been pre-configured. You can pass in `price_data` instead of a price ID. For example, accepting a one time payment for a custom price might look like this:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"payment_method_types[0]\"=card \\  -d \"line_items[0][price_data][currency]\"=\"usd\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][price_data][tax_behavior]\"=\"exclusive\" \\  -d \"line_items[0][price_data][product]\"=\"prod_Jb3wOhvaIOZZTM\" \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment`\n\n## Setting a tax code on a product (recommended) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating Products in the Dashboard you can set your `tax_code` in the dropdown by searching for any available [tax code](https://docs.stripe.com/tax/tax-codes). If you don’t, Stripe Tax uses the preset tax code defined on the [Dashboard](https://dashboard.stripe.com/settings/tax). If a product could fit multiple codes, for example, a SaaS product used for personal or business use depending on the type of customer, we recommend creating two separate products in Stripe and assigning the appropriate code to each.\n\n![Tax codes for a product in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_product_tax_category.e6ad090b235a41108b8843420db18330.png)\n\nTo create a Product with `tax_code` using the API, it might look like this:\n\n`curl https://api.stripe.com/v1/products \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d name=\"Test Product\" \\  -d tax_code=  txcd_10000000    `\n\nIn some cases, you might want to use a custom product that hasn’t been pre-configured. You can pass in `product_data` instead of a product ID. For example, accepting a one time payment for a custom product might look like this:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"payment_method_types[0]\"=card \\  -d \"line_items[0][price_data][currency]\"=\"usd\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][price_data][tax_behavior]\"=\"exclusive\" \\  -d \"line_items[0][price_data][product_data][name]\"=\"Product name\" \\  -d \"line_items[0][price_data][product_data][tax_code]\"=  txcd_10000000   \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment`\n\n## Creating a shipping rate with tax code (optional) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheckout payment mode allows you to set shipping rates and charge tax on shipping. You can automatically calculate tax on shipping charges by setting the tax code on the shipping rate in the Dashboard or [API](https://docs.stripe.com/api/shipping_rates).\n\n![Shipping rate with a tax code in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_shipping_rate_v3.a204f73ab02310683aace14717d960f4.png)\n\n`curl https://api.stripe.com/v1/shipping_rates \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d display_name=\"Ground shipping\" \\  -d type=\"fixed_amount\" \\  -d \"fixed_amount[amount]\"=500 \\  -d \"fixed_amount[currency]\"=usd \\  -d tax_behavior=\"inclusive\" \\  -d tax_code=\"txcd_92010001\"`",
  "title": "Specify product tax codes and tax behavior | Stripe Documentation",
  "description": "Learn how to add tax codes and tax behavior to your products and prices to automatically calculate tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/import-external-data/data-template",
  "markdown": "# Transform external data using Data Templates\n\n## Transform external data using Data TemplatesBeta\n\n## Define rules in templates to map external data files to Stripe objects.\n\nYou can use Data Templates to upload and transform external data into Destination records to make it compatible with Stripe products. Data Templates are a set of data processing instructions that you can use to transform external data into Destination records.\n\nData template settings include:\n\n*   Specifying the row in the file where the header is present\n*   Data types that the uploaded fields convert to\n*   Conditions to error out certain rows\n*   How the columns of an uploaded file map to the fields of the Destination Records\n\n[](#create-data-template)\n\nTo create your Data Template:\n\n1.  Go to the Stripe Dashboard > [Data Management](https://dashboard.stripe.com/data-management) page.\n2.  Select **Data Template**.\n3.  Click **Add Data Template** and follow the steps in the details drawer to create the Data template.\n4.  In the **Data template details** step, enter a name for your template and upload a CSV file with sample data.\n\n#### Note\n\nThe header names and rows in your sample file must be the same as the CSV files you plan to transform using the Data template.\n\n[](#configure-csv-data)\n\nConfigure how Stripe processes your external data using Stripe data types.\n\n1.  In the **Header location** field, select your file’s header row number.\n2.  Next, in the **Data types** section, verify or choose a data type for each column.\n3.  Click **CSV settings** to verify or adjust how your file is parsed.\n\n[](#select-destination-record-type)\n\nConfigure how Stripe processes your external data using Stripe data types. You can map user-uploaded data to Stripe using predefined destination record types. Choose the appropriate record type and verify the columns in the uploaded sample file to generate the selected destination record type.\n\nIn the **Select destination record type** step, choose how your data uploads and maps to Stripe by selecting a Destination record type.\n\n[\n\n## Clean up and validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#cleanup-and-validation)\n\nIn the **Clean up and validate** step, you can use conditions to ignore or validate records. There are two types of conditions:\n\n*   **Clean up conditions**: Add a clean up condition to ignore any records that meet the condition.\n*   **Validation checks**: Add a validation check to identify errors or issues with records and prevent those records from creating Stripe objects.\n\n[\n\n## Map columns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#map-columns)\n\nAssociate the columns in your file to Stripe object attributes.\n\nMapping options include:\n\n*   Mapping a column from the file directly to the attribute\n*   Manually entering a string value in a text box to assign a hardcoded value to a specific Stripe object attribute\n*   Using custom formulas, such as SUM, CONCAT, and FIND, for data transformation\n\nTo add data mappings:\n\n1.  In the **Mandatory columns** section, add data mappings for each attribute.\n2.  (Optional) In the **Optional columns** section, add a mapping for each data column that maps to an optional Stripe object attribute.\n3.  (Optional) In the **Custom columns** section, add any data columns that don’t map directly to a Stripe object attribute.\n4.  Click **Save and Activate** and view your Data template in the [Data Template](https://dashboard.stripe.com/test/data-management/data-templates) List page.\n5.  Go to the [Import Set](https://dashboard.stripe.com/test/data-management) page, and upload data using your template.",
  "title": "Transform external data using Data Templates | Stripe Documentation",
  "description": "Define rules in templates to map external data files to Stripe objects.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store",
  "markdown": "# Stripe connector for Apple App Store®\\*\n\n## Automate recurring file imports from Apple App Store to Stripe.\n\nTo set up an automated job for importing data and make sure that your Stripe products remain up-to-date, you can import files from the Apple App Store into Stripe’s data management platform.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you integrate, make sure that you have:\n\n1.  An active Apple Developer and App Store Connect account with access to the application files.\n2.  Admin account access to the Stripe Dashboard.\n3.  An App Store Connect API key with at least the access level of Admin, Finance, or Sales.\n4.  The `.p8` key file that’s saved securely. You need to upload this key to Stripe.\n5.  The Issuer ID associated with the API key.\n6.  The Vendor Number located in the App Store Connect under **Payments and Financial Reports**.\n\n#### Disclaimer\n\nNote: By using this Stripe Connector you warrant that you’ve obtained the requisite permissions, and provided the necessary notices and consents required, in order for you to use the Stripe Connector and to enable Stripe to provide you the Services.\n\n[](#generate-an-app-store-connect-api-key)\n\nTo create a new App Store Connect API key:\n\n1.  Navigate to **Users and Access** > **Integrations** in your [App Store Connect Dashboard](https://appstoreconnect.apple.com/access/api).\n2.  Select the **Team Keys** sub-tab.\n3.  Click the plus icon () next to the heading of active keys table.\n4.  Enter a name, then select **Finance role** to create an API Key.\n5.  Hover over the API key to access additional options, then click **Download API Key** to download the key.\n\nLocate the **Key ID** in the third column of the **Active keys** table and identify the **Issuer ID** directly above the same table.\n\nTo locate your **Vendor number**:\n\n*   Navigate to [App Store Connect Dashboard](https://appstoreconnect.apple.com/).\n*   Click **Payments and Financial Reports**, then access the **Vendor number** under **Legal entity name**.\n\n[\n\n## Maintain your Apple App Store connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#maintain-connection)\n\nAfter Stripe establishes your connection, we fetch your data once a day. To monitor the health of your connection:\n\n1.  View the status and the latest sync details of your established connections on the [Data management page](https://dashboard.stripe.com/data-management/connectors).\n2.  Click the connector to manage an individual connection. You can edit the name, re-authenticate a broken connection, and delete a connection.\n\n\\*Apple and App Store are trademarks of Apple Inc., registered in the U.S. and other countries and regions.",
  "title": "Stripe connector for Apple App Store®* | Stripe Documentation",
  "description": "Automate recurring file imports from Apple App Store to Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/charges/placing-a-hold",
  "markdown": "# Placing a hold on a card\n\n#### Legacy API\n\nUse the Charges API to authorize a payment now, capture funds later.\n\nStripe supports two-step card payments so you can first authorize a charge, then wait to settle (capture) it later. When a charge is authorized, the card issuer guarantees the funds and holds the amount on the customer’s card for, usually, up to 7 days, or 2 days for in-person payments using [Terminal](https://docs.stripe.com/terminal). The [payment\\_method\\_details.card.capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) attribute on the charge indicates the time when the authorization expires.\n\nIf the charge isn’t captured within this time, the authorization is canceled and funds released.\n\nTo authorize a payment without capturing it, make a charge request that also includes the `capture` parameter with a value of **false**. This instructs Stripe to only authorize the amount on the customer’s card.\n\n#### Caution\n\n**Only some payment methods support separate authorization and capture.** For example, card payments, Afterpay, and Klarna support separating these steps. With payment methods that don’t support this functionality, like [ACH](https://docs.stripe.com/payments/ach-debit) or [iDEAL](https://docs.stripe.com/payments/ideal), you can’t capture manually. Refer to the [full list of payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability) that support manual capture.\n\nIf you need to cancel an authorization, you can release it by [refunding](https://docs.stripe.com/api#create_refund) the relevant `Charge` object.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"capture\"=\"false\"`\n\n## Capture the funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo settle an authorized charge, make a [capture charge](https://docs.stripe.com/api#capture_charge) request. The total authorized amount is captured by default, and you cannot capture more than this. To capture less than the initial amount (for example, 8 USD of a 10 USD authorization), pass the `amount` parameter. Partially capturing a charge automatically releases the remaining amount.\n\n`curl -X POST https://api.stripe.com/v1/charges/{{CHARGE_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nCard statements from some issuers do not distinguish between authorizations and captured (settled) charges, which can sometimes lead to confusion for your customers. In addition, authorized charges can only be captured once. If you partially capture a charge, you cannot perform another capture for the difference. Depending on your requirements, you may be better served by [saving customer’s card details for later](https://docs.stripe.com/saving-cards) and creating charges as needed.",
  "title": "Placing a hold on a card | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/settings/retrieve",
  "markdown": "# Retrieve settings | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fretrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve settings | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/settings/object",
  "markdown": "# The Tax Setting object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fobject)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   #### \n    \n    head\\_officenullable object\n    \n    The place where your business is located.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.\n    \n*   Information about the status.\n    \n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Update settings](https://docs.stripe.com/api/tax/settings/update)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Tax Setting object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/settings/update",
  "markdown": "# Update settings | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fupdate)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update settings | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax/settings",
  "markdown": "# Tax Settings | Stripe API Reference\n\nYou can use Tax `Settings` to manage configurations used by Stripe Tax calculations.\n\nRelated guide: [Using the Settings API](https://docs.stripe.com/tax/settings-api)\n\n## [The Tax Setting object](https://docs.stripe.com/api/tax/settings/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   #### \n    \n    head\\_officenullable object\n    \n    The place where your business is located.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.\n    \n*   Information about the status.\n    \n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Update settings](https://docs.stripe.com/api/tax/settings/update)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Tax Settings | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/events/types",
  "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
  "title": "Types of events | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/subscriptions/update",
  "markdown": "# Update existing subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update existing subscriptions to Stripe Tax.\n\n[Stripe Tax](https://docs.stripe.com/tax) allows you to calculate the tax to collect on your transactions. It computes the taxes and adds them to the payment automatically, based on the product and the customer location.\n\nWhen you integrate with Stripe Tax, you need to update existing subscriptions to make sure that tax is automatically calculated going forward. This guide assumes that you have existing, active subscriptions. Otherwise, see how to automatically [collect tax on new subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes) or learn more [about subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\nUse the following high-level steps to update your active subscriptions to Stripe Tax:\n\n1.  [Activate Stripe Tax](#activate) if you haven’t already.\n2.  [Check customer locations](#customer-locations). In some cases, you might need to update the locations.\n3.  [Update products and prices](#products-prices) with tax codes and tax behaviors.\n4.  [Update subscriptions](#subs) to automatically calculate taxes on future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n5.  [Confirm](#confirm) that you’ve updated the subscriptions correctly.\n\n#### Interested in using Stripe Tax and currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\n[](#activate)\n\nFirst, you need to activate Stripe Tax. Read the [set up guide](https://docs.stripe.com/tax/set-up) to learn how.\n\n[](#customer-locations)\n\nTo correctly calculate tax, we need to know the customer’s location. After activating Stripe Tax, you can check their tax location status by using the Dashboard, the API, or Dashboard exports.\n\nTo check a customer’s tax location status through the Dashboard, go to the [Customers page](https://dashboard.stripe.com/customers), select the customer, and expand the customer’s details. The tax location status (`automatic_tax`) has four possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| Valid (`supported`) | Automatic tax fully supported. | No further action required. |\n| Unrecognized location (`unrecognized_location`) | The address isn’t valid for determining a tax location. | Ask the customer for an updated address and set [`customer.address`](https://docs.stripe.com/api/customers/update#update_customer-address) to the new value. You can update the value through the API or Dashboard by editing the customer’s details. |\n| Not registered (`not_collecting`) | The address is recognized and resolved to a location that you haven’t set up a collection location for. | The action to take depends on your [tax obligations](https://docs.stripe.com/tax/monitoring). If you proceed, Stripe Tax doesn’t assess any taxes. If you want it to assess tax, [add an active registration](https://docs.stripe.com/tax/registering) for the jurisdiction the customer is based in. |\n| `failed` | An [error](https://docs.stripe.com/error-codes) occurred with Stripe’s servers. This is rare. | Try the request again or contact Stripe support for additional assistance. |\n\nIn case the `status=unrecognized_location` you need to update the customer location with [an address that Stripe Tax can use](https://docs.stripe.com/tax/customer-locations). In the Dashboard, you can go into the [Customers page](https://dashboard.stripe.com/customers), select the customer, and change its billing or shipping address under Details.\n\nFor more information on which customer address is valid, how they’re used, or how to handle errors, see [Collect customer addresses](https://docs.stripe.com/tax/customer-locations).\n\n[](#products-prices)\n\nYour products and prices use the default tax behavior you assigned when activating Stripe Tax. If you’d prefer to update active products and prices to calculate tax independently, set a tax\\_code and tax\\_behavior. See the full list of [available tax codes](https://docs.stripe.com/tax/tax-codes) and the [guide for setting up](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) tax codes and tax behavior for more information. For more information about [products and prices](https://docs.stripe.com/billing/taxes/collect-taxes#product-and-price-setup), including how to decide whether a price should be inclusive or exclusive, see the [Tax Setup FAQ](https://docs.stripe.com/tax/faq#set-up).\n\n### Update products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, update any existing products with a `tax_code`. If you don’t explicitly define a `tax_code` on your product, Stripe Tax uses the preset product tax code from your settings.\n\nHere’s how to update a Product with a `tax_code` using the API:\n\n`curl https://api.stripe.com/v1/products/`\n\n`{{PRODUCT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_code=  txcd_10000000`\n\nTo update a Product with a `tax_code` in the Dashboard, go to the [Products page](https://dashboard.stripe.com/products?active=true), select a product to edit and, in the product information page, choose the tax code from the drop-down menu.\n\n### Update prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, update the tax behavior for your prices.\n\n#### Common mistake\n\nYou can’t change `tax_behavior` after it’s been set to one of `exclusive` or `inclusive`. If you want to change the tax behavior of a price, you need to create a new price with the desired behavior, and archive the old price.\n\nHere’s how to update a price with the API:\n\n`curl https://api.stripe.com/v1/prices/`\n\n`{{PRICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_behavior=exclusive`\n\nTo update a price with the Dashboard, go to the [products page](https://dashboard.stripe.com/products), select the product with the price you want to update, and select additional options in the price information section. In the **Include tax in price** drop-down menu, select the behavior you want to associate with the price.\n\n[](#subs)\n\nWith your customers, products, and prices updated, you’re ready to update existing subscriptions.\n\n#### Caution\n\nGet the list of subscriptions that need to be updated from the [subscriptions page in the Dashboard](https://dashboard.stripe.com/subscriptions). Click **Filter**, check **Automatic tax** and select **Disabled** to display only subscriptions that don’t have automatic tax enabled. Alternatively, you can export all filtered subscriptions to view them as a CSV file. To do this, click **Export** and select **All** as the **Date range**.\n\nHow you update the subscriptions depends on their state:\n\n*   If your subscriptions [don’t have existing tax rates](#no-tax-rates), you only need to enable automatic tax.\n*   If your subscriptions have [existing tax rates](#existing-tax-rates) (at either the subscription or line-item level), you need to clear out any existing tax rates and enable automatic tax. To avoid creating prorated items, you can schedule this update.\n*   If your subscriptions have [subscriptions schedules](#existing-subscription-schedules), you need to remove instances of `automatic_tax[enabled]=false` in the subscription schedule plans.\n\n### Update subscriptions with no existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [update subscriptions](https://docs.stripe.com/api/subscriptions/update) that have no [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) configured, set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"automatic_tax[enabled]\"=true`\n\nSetting `automatic_tax.enabled=true` activates automatic tax calculations for all subsequent invoices created for that subscription.\n\nTo do this through the Dashboard, update the subscription and turn on the **Calculate tax automatically** option.\n\n### Update subscriptions with existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo update subscriptions with [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) set at the [subscription level](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#static-configuration), you need to remove the tax rates before enabling `automatic_tax`. When you make the update:\n\n*   Pass an empty string in the [`default_tax_rates`](https://docs.stripe.com/api/subscriptions/update#update_subscription-default_tax_rates) and [`tax_rates`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-tax_rates) fields for each subscription [`item`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items). Doing this clears out tax rates set at both the subscription (`default_tax_rates`) and line-item (`tax_rates`) levels.\n*   Set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve('{{SUBSCRIPTION_ID}}') Stripe::Subscription.update(   subscription.id,   {     automatic_tax: { enabled: true },     # Removes existing tax_rates for each item in the subscription     items: subscription.items.data.map {|item| {id: item.id, tax_rates: ''}},     default_tax_rates: ''   } )`\n\nTo make this update through the Dashboard, edit the subscription, then enable the **calculate tax automatically** option. The Dashboard automatically calculates tax going forward and removes any existing tax rates. If you haven’t updated your prices to set `tax_behavior`, the Dashboard prompts you to update any missing details before you can update the subscription.\n\n### Update Subscriptions with subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to collect tax and any of your subscriptions include a subscription schedule that sets `automatic_tax[enabled]=false`, you must remove this parameter. To do this, update all phases of the subscription’s schedule by removing `automatic_tax[enabled]=false` and setting `default_settings[automatic_tax][enabled]=true`.\n\nWhen you update a subscription schedule, you need to pass in all current and future phases. To do this, verify the set parameters, then enable Stripe Tax in the subscription schedule.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo update the subscription schedule after you obtain it, remove the `automatic_tax[enabled]=false` parameter, and pass down the other phases and parameters:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1578038400 \\  -d \"phases[1][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][start_date]\"=1578038400 \\  -d \"phases[1][end_date]\"=1580544000 \\  -d \"default_settings[automatic_tax][enabled]\"=true`\n\n#### Schedule the update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to avoid creating a prorated item, you can schedule the update to occur at the start of the next cycle.\n\nYou can currently only schedule subscription updates with the API:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve(   '{{SUBSCRIPTION_ID}}', ) schedule = Stripe::SubscriptionSchedule.create({   from_subscription: subscription.id }) Stripe::SubscriptionSchedule.update(   schedule.id,   {     end_behavior: 'release',     phases: [       # The first phase contains items for the       # latest subscription invoice       {         items: [           # Prices and tax_rates for each item           {             price: '{{PRICE_ID}}',             tax_rates: [               '{{TAX_RATE_ID}}'             ]           }         ],         default_tax_rates: ['{{TAX_RATE_ID}}'],         start_date: subscription.current_period_start,         end_date: subscription.current_period_end       },       # The second phase removes manual tax rates and enables       # automatic tax calculation       {         items: [           # Prices for each item with tax_rates: ''           {             price: '{{PRICE_ID}}',             tax_rates: ''           }         ],         default_tax_rates: '',         automatic_tax: {enabled: true},         iterations: 1       }     ]   } )`\n\n[](#confirm)\n\nTo confirm that you’ve properly updated your subscriptions, retrieve the [upcoming invoice](https://docs.stripe.com/api/invoices/upcoming) of a subscription and inspect the results of its tax calculation.\n\nYou can retrieve the tax amounts from the [`tax`](https://docs.stripe.com/api/invoices/object#invoice_object-tax) and [`total_tax_amounts`](https://docs.stripe.com/api/invoices/object#invoice_object-total_tax_amounts) fields on the upcoming invoice, and from the per-line-item [`tax_amounts`](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-tax_amounts) fields. The invoice has an [`automatic_tax`](https://docs.stripe.com/api/invoices/object#invoice_object-automatic_tax) field showing the status of the calculation, with one of three possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `complete` | Stripe Tax has successfully assessed the taxes on the payment. | You can retrieve the tax amounts from the tax and `total_tax_amounts` fields on the latest invoice, and from the per-line item `tax_amounts` fields. |\n| `requires_location_inputs` | Stripe Tax didn’t have enough information to determine the customer’s location and was unable to assess taxes. | Collect more information from a customer (such as a full street address) and update the [`customer.address`](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address) field. |\n| `failed` | Internal Stripe error. | Try the request again or contact Stripe support for additional assistance. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create new subscriptions with Stripe Tax](https://docs.stripe.com/tax/subscriptions)\n*   [Setting tax codes, products, and prices](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
  "title": "Update existing subscriptions | Stripe Documentation",
  "description": "Learn how to update existing subscriptions to Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements",
  "markdown": "# Build a subscriptions integration | Stripe DocumentationThe Stripe Docs logo\n\n![Fixed-price subscription page with Stripe Checkout](https://b.stripecdn.com/docs-statics-srv/assets/fixed-price-collect-payment-details.ca5aa7a3f81fcc3f24954a39e800cc9d.png)\n\n#### Interested in using Stripe Billing?\n\nWe’re developing a Payment Element integration that helps manage subscription features, including free trials, billing cycle anchors, and proration. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nUse this guide to learn how to sell fixed-price [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). You’ll use the [Payment Element](https://docs.stripe.com/payments/payment-element) to create a custom payment form that you embed in your application.\n\nIf you don’t want to build a custom payment form, you can integrate with Checkout. For an immersive version of that end-to-end integration guide, see the Billing [quickstart](https://docs.stripe.com/billing/quickstart).\n\nIf you aren’t ready to code an integration, you can set up basic subscriptions [manually in the Dashboard](https://docs.stripe.com/no-code/subscriptions). You can also use [Payment Links](https://docs.stripe.com/payment-links) to set up subscriptions without writing any code. Learn more about [designing an integration](https://docs.stripe.com/billing/subscriptions/designing-integration) to understand the decisions you need to make and the resources you need.\n\n## What you’ll build ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis guide shows you how to:\n\n*   Model your business by building a product catalog.\n*   Build a registration process that creates a customer.\n*   Create subscriptions and collect payment information.\n*   Test and monitor payment and subscription status.\n*   Let customers change their plan or cancel the subscription.\n\n## How to model it on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Subscriptions](https://docs.stripe.com/api/subscriptions) simplify your billing by automatically creating [Invoices](https://docs.stripe.com/api/invoices \"invoices\") and [PaymentIntents](https://docs.stripe.com/api/payment_intents) for you. To create and activate a subscription, you need to first create a [Product](https://docs.stripe.com/api/products \"Products\") to model what is being sold, and a [Price](https://docs.stripe.com/api/prices \"Prices\") which determines the interval and amount to charge. You also need a [Customer](https://docs.stripe.com/api/customers) to store [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") used to make each recurring payment.\n\n### API object definitions\n\n[](#install-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nAnd then install the Stripe CLI. The CLI provides webhook testing and you can run it to make API calls to Stripe. This guide shows how to use the CLI to set up a pricing model in a later section.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 USD. The price for the Premium product is 15 USD.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 USD\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\n[](#create-customer)\n\nStripe needs a [customer](https://docs.stripe.com/api/customers \"Customers\") for each subscription. In your application frontend, collect any necessary information from your users and pass it to the backend.\n\nIf you need to collect address details, the Address Element enables you to collect a shipping or billing address for your customers. For more information on the Address Element, visit the [Address Element](https://docs.stripe.com/elements/address-element) page.\n\n`<form id=\"signup-form\">   <label>     Email     <input id=\"email\" type=\"email\" placeholder=\"Email address\" value=\"test@example.com\" required />   </label>    <button type=\"submit\">     Register   </button> </form>`\n\n`const emailInput = document.querySelector('#email');  fetch('/create-customer', {   method: 'post',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     email: emailInput.value,   }), }).then(r => r.json());`\n\nOn the server, create the Stripe customer object.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}} \\   -d name={{CUSTOMER_NAME}} \\   -d \"shipping[address][city]\"=Brothers \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][line1]\"=\"27 Fredrick Ave\" \\  -d \"shipping[address][postal_code]\"=97712 \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[name]\"={{CUSTOMER_NAME}} \\   -d \"address[city]\"=Brothers \\  -d \"address[country]\"=US \\  -d \"address[line1]\"=\"27 Fredrick Ave\" \\  -d \"address[postal_code]\"=97712 \\  -d \"address[state]\"=CA`\n\n[](#create-subscription)\n\n#### Note\n\nLet your new customer choose a plan and then create the subscription—in this guide, they choose between Basic and Premium.\n\nOn the frontend, pass the selected price ID and the ID of the customer record to the backend.\n\n`fetch('/create-subscription', {   method: 'POST',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     priceId: priceId,     customerId: customerId,   }), })`\n\nOn the backend, create the subscription with status `incomplete` using `payment_behavior=default_incomplete`. Then return the `client_secret` from the subscription’s first [payment intent](https://docs.stripe.com/payments/payment-intents) to the frontend to complete payment.\n\nSet [save\\_default\\_payment\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings-save_default_payment_method) to `on_subscription` to save the payment method as the default for a subscription when a payment succeeds. Saving a default payment method increases the success rate of future subscription payments.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-subscription' do   content_type 'application/json'   data = JSON.parse(request.body.read)   customer_id = cookies[:customer]   price_id = data['priceId']    # Create the subscription. Note we're expanding the Subscription's   # latest invoice and that invoice's payment_intent   # so we can pass it to the front end to confirm the payment   subscription = Stripe::Subscription.create(     customer: customer_id,     items: [{       price: price_id,     }],     payment_behavior: 'default_incomplete',     payment_settings: {save_default_payment_method: 'on_subscription'},     expand: ['latest_invoice.payment_intent']   )    { subscriptionId: subscription.id, clientSecret: subscription.latest_invoice.payment_intent.client_secret }.to_json end`\n\n#### Note\n\nIf you’re using a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency](https://docs.stripe.com/api/subscriptions/create#create_subscription-currency) parameter to tell the Subscription which of the Price’s currencies to use. (If you omit the `currency` parameter, then the Subscription uses the Price’s default currency.)\n\nAt this point the Subscription is `inactive` and awaiting payment. Here’s an example response. The minimum fields to store are highlighted, but store whatever your application frequently accesses.\n\n`{   \"id\": \"sub_JgRjFjhKbtD2qz\",   \"object\": \"subscription\",   \"application_fee_percent\": null,   \"automatic_tax\": {     \"enabled\": false   },   \"billing\": \"charge_automatically\",   \"billing_cycle_anchor\": 1623873347,   \"billing_thresholds\": null,`\n\n[](#collect-payment)\n\nUse [Stripe Elements](https://docs.stripe.com/payments/elements) to collect payment details and activate the subscription. You can customize Elements to match the look-and-feel of your application.\n\n#### Note\n\nIf you’re building an integration with Stripe Elements, [Link](https://docs.stripe.com/payments/link) enables you to create frictionless payments for your customers. They can save, change, and manage all their payment details in Link without any impact to your integration. Meanwhile, as Stripe adds support for more payment methods to Link, your integration can automatically accept them, without requiring you to make changes to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nThe [Payment Element](https://docs.stripe.com/payments/payment-element) securely collects all necessary payment details for a wide variety of payments methods. The payment methods currently supported by both the Payment Element and Subscriptions are credit cards, Link, SEPA Direct Debit, and BECS Direct Debit.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n`<head>   <title>Checkout</title>   <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> </head> <body>   <!-- content here --> </body>`\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your payment page. Create an empty DOM node (container) with a unique ID in your payment form.\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Subscribe</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an instance of the Payment Element and mount it to the container DOM node. In the [create the subscription](#create-subscription) step, you passed the `client_secret` value to the frontend. Pass this value as an option when creating an instance of Elements.\n\n`const options = {   clientSecret: '{{CLIENT_SECRET}}',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 5 const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to select a payment method. The form automatically collects all necessary payments details for the payment method that they select.\n\n#### Optional Payment Element configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance) into `options` when creating an instance of Elements.\n*   Configure the Apple Pay interface to return a [merchant token](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) to support recurring, auto reload, and deferred payments.\n\n### Complete payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `stripe.confirmPayment` to complete the payment using details from the Payment Element and activate the subscription. This creates a PaymentMethod and confirms the incomplete Subscription’s first PaymentIntent, causing a charge to be made. If [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) is required for the payment, the Payment Element handles the authentication process before confirming the PaymentIntent.\n\nProvide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe redirects the user after they complete the payment. Your user might first be redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card payments immediately redirect to the `return_url` when a payment is successful.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",     }   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n#### Caution\n\nIf you have tooling that tracks the customer’s browser session, you might need to add the `stripe.com` domain to the referrer exclude list. Redirects cause some tools to create new sessions, which prevents you from tracking the complete session.\n\nUse one of the query parameters to retrieve the PaymentIntent. Inspect the [status of the PaymentIntent](https://docs.stripe.com/payments/paymentintents/lifecycle) to decide what to show your customers. You can also append your own query parameters when providing the `return_url`, which persist through the redirect process.\n\n`// Initialize Stripe.js using your publishable key const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  // Retrieve the \"payment_intent_client_secret\" query parameter appended to // your return_url by Stripe.js const clientSecret = new URLSearchParams(window.location.search).get(   'payment_intent_client_secret' );  // Retrieve the PaymentIntent stripe.retrievePaymentIntent(clientSecret).then(({paymentIntent}) => {   const message = document.querySelector('#message')    // Inspect the PaymentIntent `status` to indicate the status of the payment   // to your customer.   //   // Some payment methods will [immediately succeed or fail][0] upon   // confirmation, while others will first enter a `processing` state.   //   // [0]: [https://stripe.com/docs/payments/payment-methods#payment-notification](https://stripe.com/docs/payments/payment-methods#payment-notification)   switch (paymentIntent.status) {     case 'succeeded':       message.innerText = 'Success! Payment received.';       break;      case 'processing':       message.innerText = \"Payment processing. We'll update you when payment is received.\";       break;      case 'requires_payment_method':       message.innerText = 'Payment failed. Please try another payment method.';       // Redirect your user back to your payment page to attempt collecting       // payment again       break;      default:       message.innerText = 'Something went wrong.';       break;   } });``\n\n[](#webhooks)\n\nTo complete the integration, you need to process [webhooks](https://docs.stripe.com/webhooks \"webhook\") sent by Stripe. These are events triggered whenever state inside of Stripe changes, such as subscriptions creating new invoices. In your application, set up an HTTP handler to accept a POST request containing the webhook event, and verify the signature of the event:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/webhook' do   # You can use webhooks to receive information about asynchronous payment events.   # For more about our webhook events check out [https://stripe.com/docs/webhooks.](https://stripe.com/docs/webhooks)   webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']   payload = request.body.read   if !webhook_secret.empty?`\n\nDuring development, use the Stripe CLI to [observe webhooks and forward them to your application](https://docs.stripe.com/webhooks#test-webhook). Run the following in a new terminal while your development app is running:\n\n`stripe listen --forward-to localhost:4242/webhook`\n\nFor production, set up a webhook endpoint URL in the Dashboard, or use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints).\n\nYou’ll listen to a couple of events to complete the remaining steps in this guide. See [Subscription events](https://docs.stripe.com/billing/subscriptions/overview#subscription-events) for more details about subscription-specific webhooks.\n\n[](#provision-access)\n\nNow that the subscription is active, give your user access to your service. To do this, listen to the `customer.subscription.created`, `customer.subscription.updated`, and `customer.subscription.deleted` events. These events pass a subscription object which contains a `status` field indicating whether the subscription is active, past due, or canceled. See [the subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle) for a complete list of statuses.\n\nIn your webhook handler:\n\n1.  Verify the subscription status. If it’s `active` then your user has paid for your product.\n2.  Check the product the customer subscribed to and grant access to your service. Checking the product instead of the price gives you more flexibility if you need to change the pricing or billing interval.\n3.  Store the `product.id`, `subscription.id` and `subscription.status` in your database along with the `customer.id` you already saved. Check this record when determining which features to enable for the user in your application.\n\nThe state of a subscription might change at any point during its lifetime, even if your application does not directly make any calls to Stripe. For example, a renewal might fail due to an expired credit card, which puts the subscription into a past due state. Or, if you implement the [customer portal](https://docs.stripe.com/customer-management), a user might cancel their subscription without directly visiting your application. Implementing your handler correctly keeps your application state in sync with Stripe.\n\n[](#cancel-subscription)\n\nIt’s common to allow customers to cancel their subscriptions. This example adds a cancellation option to the account settings page.\n\n![Sample subscription cancelation interface.](https://b.stripecdn.com/docs-statics-srv/assets/fixed-price-subscriptions-guide-account-settings.6559626ba4b434826a67abfea165e097.png)\n\nAccount settings with the ability to cancel the subscription\n\n`function cancelSubscription(subscriptionId) {   return fetch('/cancel-subscription', {     method: 'post',     headers: {       'Content-Type': 'application/json',     },     body: JSON.stringify({       subscriptionId: subscriptionId,     }),   })     .then(response => {       return response.json();     })     .then(cancelSubscriptionResponse => {       // Display to the user that the subscription has been canceled.     }); }`\n\nOn the backend, define the endpoint for your frontend to call.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/cancel-subscription' do   content_type 'application/json'   data = JSON.parse request.body.read    deleted_subscription = Stripe::Subscription.cancel(data['subscriptionId'])    deleted_subscription.to_json end`\n\nYour application receives a `customer.subscription.deleted` event.\n\nAfter the subscription is canceled, update your database to remove the Stripe subscription ID you previously stored, and limit access to your service.\n\nWhen a subscription is canceled, it can’t be reactivated. Instead, collect updated billing information from your customer, update their default payment method, and create a new subscription with their existing customer record.\n\n[](#test)\n\n### Test payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following table to test different payment methods and scenarios.\n\n| Payment method | Scenario | How to test |\n| --- | --- | --- |\n| BECS Direct Debit | Your customer successfully pays with BECS Direct Debit. | Fill out the form using the account number `900123456` and BSB `000-000`. The confirmed PaymentIntent initially transitions to `processing`, then transitions to the `succeeded` status three minutes later. |\n| BECS Direct Debit | Your customer’s payment fails with an `account_closed` error code. | Fill out the form using the account number `111111113` and BSB `000-000`. |\n| Credit card | The card payment succeeds and does not require authentication. | Fill out the credit card form using the credit card number `4242 4242 4242 4242` with any expiration, CVC, and postal code. |\n| Credit card | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number `4000 0025 0000 3155` with any expiration, CVC, and postal code. |\n| Credit card | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number `4000 0000 0000 9995` with any expiration, CVC, and postal code. |\n| SEPA Direct Debit | Your customer successfully pays with SEPA Direct Debit. | Fill out the form using the account number `AT321904300235473204`. The confirmed PaymentIntent initially transitions to processing, then transitions to the succeeded status three minutes later. |\n| SEPA Direct Debit | Your customer’s payment intent status transition from `processing` to `requires_payment_method`. | Fill out the form using the account number `AT861904300235473202`. |\n\n### Monitor events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up webhooks to listen to subscription change events like upgrades and cancellations. Read the guide to learn more about [subscription webhooks](https://docs.stripe.com/billing/subscriptions/webhooks). You can view events in the [Dashboard](https://dashboard.stripe.com/test/events)) or with the [Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).\n\nFor more details, see [testing your Billing integration](https://docs.stripe.com/billing/testing).\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
  "title": "Build a subscriptions integration | Stripe Documentation",
  "description": "Create and manage subscriptions to accept recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/registrations-api",
  "markdown": "# Use the Registrations API to manage tax registrations\n\nBusinesses are required to register to collect taxes in locations where they have tax obligations. The [Tax Registration API](https://docs.stripe.com/api/tax/registrations) lets you retrieve and configure tax registrations using an API instead of the Dashboard. Adding your registrations in Stripe turns on tax calculation and collection for your transactions made through Stripe.\n\n## List all tax registrations for your connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get a list of your connected accounts’ tax registrations, make a [list registrations](https://docs.stripe.com/api/tax/registrations) call. You can filter the response by setting the `status` parameter to `active`, `expired`, or `scheduled`.\n\n`curl -G https://api.stripe.com/v1/tax/registrations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d status=active \\  -d limit=3`\n\nIf your connected accounts don’t have access to the Stripe Dashboard, your platform can provide a UI for them to manage their tax registrations. The registrations endpoint helps you implement that functionality.\n\n## Add a tax registration for your connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a tax obligation and registration of the connected account is known to the platform, you can perform a [create registration](https://docs.stripe.com/api/tax/registrations/create) call using the `Stripe-Account` header with a value of the connected account ID to add or schedule the registration for the connected account.\n\n`curl https://api.stripe.com/v1/tax/registrations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d country=IE \\  -d \"country_options[ie][type]\"=oss_union \\  -d active_from=now`\n\nIn this case, a `tax.registration` object is created in the connected account.\n\n`{   \"object\": \"tax.registration\",   \"active_from\": 1669249440,   \"country\": \"IE\",   \"country_options\": {     \"ie\": {       \"type\": \"oss_union\"     }   },   \"livemode\": false,   \"status\": \"active\",   ... }`\n\nAlternatively, for connected accounts with access to the Stripe Dashboard (for example, Standard accounts), you can instruct them to [set up Stripe Tax](https://docs.stripe.com/tax/set-up) using the Dashboard, which includes adding tax registrations.\n\n### Head office address requirement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a tax registration, the connected account must first set up a head office address. Without a defined head office address, an `invalid_request_error` gets triggered with a message about setting your head office address.\n\nUse the [tax settings API](https://docs.stripe.com/tax/settings-api) to add a head office address as a platform:\n\n`curl https://api.stripe.com/v1/tax/settings \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"head_office[address][country]\"=DE`\n\nLocation-specific validation and errors might occur, details of which are found in our [tax settings guide](https://docs.stripe.com/tax/settings-api?tax-integration=connect-platform#validations-and-errors).\n\n## Update and expire a tax registration for your connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t delete a registration after it’s created, but you can end it by setting `expires_at` to a time when the registration is no longer active. Update the registrations with an [update registration](https://docs.stripe.com/api/tax/registrations/update) call using the Stripe-Account header with a value of the connected account ID:\n\n`curl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d expires_at=now`\n\nIn this case, the registration expires immediately. [Tax calculations](https://docs.stripe.com/api/tax/calculations) performed for the connected account after the `expires_at` won’t use this registration.\n\n`{   \"object\": \"tax.registration\",   \"active_from\": 1669248000,   \"created\": 1669219200,   \"expires_at\": 1669334400,   \"livemode\": false,   \"status\": \"active\",   ... }`",
  "title": "Use the Registrations API to manage tax registrations | Stripe Documentation",
  "description": "Learn how to add, schedule, and check active tax registrations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/illinois",
  "markdown": "# Collect tax in Illinois | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Illinois.\n\nIn Illinois, Stripe Tax supports calculation and collection of sales tax.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Illinois. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n### Sales tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers that meet either the sales or transaction number thresholds must register for an Illinois sales tax permit, collect sales tax on sales that ship into Illinois, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2018\n\n### Other taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe also support:\n\n*   [Bloomington Amusement tax](https://www.bloomingtonil.gov/departments/finance/local-tax-information/amusement-tax)—for businesses selling video or audio streaming on a pay-per-use, rental, or subscription basis to customers in Bloomington.\n*   [Chicago Lease Tax (Personal Property Lease Transaction Tax)](https://www.chicago.gov/city/en/depts/fin/supp_info/revenue/tax_list/personal_propertyleasetransactiontax.html)—for businesses selling $100,000 or over of software as a service or other leased products into Chicago.\n*   [Chicago Amusement tax](https://www.chicago.gov/city/en/depts/fin/supp_info/revenue/tax_list/amusement_tax.html)—for businesses selling $100,000 or more of digital entertainment into Chicago, including selling video or audio streaming and online gaming.\n*   [East Dundee Amusement tax](https://eastdundee.net/businesses/streaming_services_amusement_tax.php)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis to customers in East Dundee.\n*   [Evanston Amusement tax](https://www.cityofevanston.org/how-to/home-rule-taxes)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis to customers in Evanston.\n*   [Schiller Park Streaming Surcharge](https://www.villageofschillerpark.com/149/Administration-Department)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis that are delivered to customers in Schiller Park.\n\n**Thresholds**\n\n*   Chicago Lease and Chicago Amusement tax apply to businesses selling specific goods to customers in Chicago, even if you don’t have a physical presence there.\n*   Bloomington, East Dundee, Evanston, and Schiller Park amusement taxes only apply when there’s a physical presence in those locations.\n\nTransactions for these taxes aren’t included in tax threshold monitoring for Illinois.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Illinois at the [tax authority](https://tax.illinois.gov/research/taxinformation/sales/rot.html) or the other taxes we support at the links above. Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Illinois, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-il) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Illinois.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Illinois and your origin address is also in Illinois, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Illinois filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   The location reports don’t include transactions with Bloomington Amusement tax, Chicago Lease Tax, Chicago Amusement tax, East Dundee Amusement tax, Evanston Amusement tax, or Schiller Park Streaming Surcharge as these are filed to the local jurisdiction using a different report. To see transactions with these taxes, you can use the [exports](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Illinois. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Illinois | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Illinois.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/hawaii",
  "markdown": "# Collect tax in Hawaii | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Hawaii.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Hawaii. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Hawaii sales tax permit, collect sales tax on sales that ship into Hawaii, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Hawaii at the [tax authority](https://tax.hawaii.gov/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Hawaii, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-hi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Hawaii.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\nInstead of a traditional sales tax paid by consumers, Hawaii has a tax on businesses called General Excise Tax (GET). Businesses can recover GET by passing it on to their customers. Businesses generally display GET as a separate item on receipts, but they are not required to do so.\n\nBecause a business must pay GET on the entire amount paid by a customer, it also owes GET on any GET reimbursement it collects from customers. To cover that additional tax amount, Hawaii allows businesses to pass GET on to customers at a higher rate than the base GET rate. Stripe Tax only supports the maximum pass-on rate, which fully covers a business’ GET liability.\n\nFor example:\n\nA product sells for 100 USD and is subject to 4% GET, so the seller owes 4 USD GET. If the seller passes that on to the customer and collects 104 USD, the entire amount is subject to 4% GET. As a result, the seller’s GET liability becomes 4.16 USD.\n\nThe seller can recover the entire GET amount from the customer by instead using the maximum pass-on rate, which for a 4% GET rate is 4.166%. That lets the seller charge the customer 4.166%, or 4.16 USD, which covers their entire GET liability. GET rates can vary by county and by business type. To learn more about GET and the maximum pass-on rates, see [Hawaii’s tax facts page](https://files.hawaii.gov/tax/legal/taxfacts/tf2015-37-1.pdf).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Hawaii filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   In Hawaii, wholesalers are required to identify wholesale sales because they’re subject to a lower tax rate instead of being completely exempt. You won’t see a location report for Hawaii if you have any customer-exempt transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Hawaii. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Hawaii | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Hawaii.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/tennessee",
  "markdown": "# Collect tax in Tennessee | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Tennessee.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Tennessee. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales exceeding the threshold must register for a Tennessee sales tax permit, collect sales tax on sales that ship into Tennessee, and remit sales tax back to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Tennessee at the [tax authority](https://www.tn.gov/revenue/taxes/sales-and-use-tax.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Tennessee, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-tn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Tennessee.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Tennessee and your origin address is also in Tennessee, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Tennessee filing requirements. You have the option to report on an annual, fiscal year, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   In most areas of Tennessee, if the price of a single item exceeds the local tax limit for that specific area, the local tax doesn’t apply to that excess amount. You won’t see a location report for Tennessee if you have these transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Tennessee. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Tennessee | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Tennessee.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/kentucky",
  "markdown": "# Collect tax in Kentucky | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kentucky.\n\nIn Kentucky, Stripe Tax supports calculation and collection of [sales tax](https://revenue.ky.gov/Business/Sales-Use-Tax/Pages/default.aspx).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kentucky. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n### Sales tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers that meet either the sales or transaction number thresholds must register for a Kentucky sales tax permit, collect sales tax on sales that ship into Kentucky, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n### Other taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe also support:\n\n*   [Kentucky State and Local Communications Tax](https://revenue.ky.gov/Business/Telecommunications-Tax/Pages/default.aspx)—for businesses selling video streaming to customers in Kentucky. This includes the Multi Channel Video Programming Excise Tax and Utility Gross Receipts License Tax. These taxes only apply when your business has physical presence in Kentucky. This means there isn’t a revenue threshold for when remote sellers need to pay this tax. Transactions for these taxes aren’t included in Stripe monitoring for Kentucky. The linked page is only accesible within the US or via a VPN.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for tax in Kentucky at the [tax authority](https://onestop.ky.gov/start/Pages/statetax.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Kentucky, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ky) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kentucky.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Kentucky filing requirements. You have the option to report on an annual, fiscal year, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   The location reports don’t include transactions with the Kentucky State and Local Communications Tax as these are filed to the state using a different report. To see transactions with these taxes, you can use the [exports](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Kentucky. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Kentucky | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kentucky.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/united-states/washington",
  "markdown": "# Collect tax in Washington | Stripe DocumentationThe Stripe Docs logo\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Washington. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAccording to the state, sellers with sales equal to or exceeding the sales number thresholds must register for a Washington sales tax permit, collect sales tax on sales that ship into Washington, and remit that sales tax to the state.\n\nPrior to March 14, 2019, remote sellers could also have economic nexus if they had 200 or more transactions in the state. And, effective July 1, 2019, [SSB Bill 5581](http://lawfilesext.leg.wa.gov/biennium/2019-20/Pdf/Bills/Session%20Laws/Senate/5581-S.SL.pdf#page=1) eliminated both the notice and reporting requirements established in the state’s 2018 Marketplace Fairness law in addition to the 200 transaction trigger. If you previously registered because you met the 200 transaction threshold, assess your sales to see if you exceed the 100,000 USD threshold. If you do, continue to collect and submit retail sales tax.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Washington at the [tax authority](https://dor.wa.gov/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Washington, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Washington.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Washington filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   Washington requires wholesale sales to be identified because they’re subject to a lower tax rate instead of being completely exempt. When a report contains any customer-exempt transactions, it displays a warning message. For a detailed breakdown of each transaction, [export the transaction data](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Washington. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
  "title": "Collect tax in Washington | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Washington.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration/workflow-transitions",
  "markdown": "# Status transitions and finalization | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about invoice status transitions and finalization.\n\nThe following graphic shows the different ways that an invoice can transition from status to status:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice_states_diagram_simplified.edbc1852633266183562d1235636a6ad.svg)\n\nStatus transitions and finalization\n\n## Transitions and endpoints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table outlines the status transitions and their endpoints. It also lists the [webhooks](https://docs.stripe.com/webhooks \"webhook\") that are emitted by the endpoint, and the resulting status for each:\n\n## Finalize draft invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you enable [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), Stripe automatically finalizes, and begins automatic collection of the [invoice](https://docs.stripe.com/billing/invoices/subscription). We wait an hour after receiving a successful response to the `invoice.created` event before attempting payment. If we don’t receive a successful response within 72 hours, we attempt to finalize and send the invoice.\n\nInvoices are initially created with `status=draft`, and you can only edit them while they’re in this state. When an invoice is ready to be paid, finalize it. Finalizing an invoice sets `status=open` on the invoice. You can manually finalize an invoice in the [Dashboard](https://docs.stripe.com/invoicing/dashboard) or by using the [Finalize](https://docs.stripe.com/api/invoices/finalize) endpoint. If you’ve configured [webhook](https://docs.stripe.com/webhooks) endpoints, you receive an `invoice.finalized` event when an invoice finalizes.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIn live mode, if your webhook endpoint doesn’t [respond properly](https://docs.stripe.com/webhooks), Stripe continues retrying the webhook notification for up to 3 days with an exponential back off. In test mode, we retry three times over a few hours. During that time, we won’t attempt to charge the customer unless we receive a successful response. We also send you an email to notify you that the webhook is failing.\n\nThis behavior applies to all webhook endpoints defined on your account, including cases where a [Connect application](https://stripe.com/works-with) or other third-party service is having trouble handling incoming webhooks.\n\n## Post-finalization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFinalizing an invoice does the following:\n\n*   It allows the invoice to be paid.\n*   It ensures that an invoice number is present.\n*   It makes certain properties [immutable](#immutable) on the invoice.\n*   It creates an incomplete payment intent for the invoice.\n*   It generates a unique URL where someone can pay the invoice, and a link to download a [PDF of the invoice](https://docs.stripe.com/api/invoices/object#invoice_object-invoice_pdf).\n\n#### Caution\n\nIf an invoice isn’t finalized, you can’t collect payment.\n\n### Finalized invoice restrictions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you finalize an invoice, you can’t change certain fields that pertain to the amount and customer. This is to satisfy the common tax-compliance requirement that finalized invoices be retained—as they were finalized—for a legally required minimum time period.\n\nIn some jurisdictions, editing fields that modify the total amount due on an invoice could render the invoice invalid. These are typically fields associated with your account, customer, line items, or taxes. It’s your responsibility to make sure that the invoices you create comply with all applicable laws.\n\nIf you require updates to the invoice amount after it finalizes, use [credit notes](https://docs.stripe.com/invoicing/dashboard/credit-notes). Credit notes allow you to modify the invoice amount by specifying an adjustment in money owed by the customer. You can issue credit notes for any invoice in an `open` or `paid` status. Finalizing the invoice copies the following customer fields to it and makes them immutable:\n\n*   [invoice.customer\\_address](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address)\n*   [invoice.customer\\_email](https://docs.stripe.com/api/invoices/object#invoice_object-customer_email)\n*   [invoice.customer\\_name](https://docs.stripe.com/api/invoices/object#invoice_object-customer_name)\n*   [invoice.customer\\_phone](https://docs.stripe.com/api/invoices/object#invoice_object-customer_phone)\n*   [invoice.customer\\_shipping](https://docs.stripe.com/api/invoices/object#invoice_object-customer_shipping)\n*   [invoice.customer\\_tax\\_exempt](https://docs.stripe.com/api/invoices/object#invoice_object-customer_tax_exempt)\n*   [invoice.customer\\_tax\\_ids](https://docs.stripe.com/api/invoices/object#invoice_object-customer_tax_ids)\n\nIf you want to change a customer-related property on an invoice:\n\n1.  Void the current invoice.\n2.  [Duplicate](https://docs.stripe.com/invoicing/dashboard#modify-invoice) the voided invoice.\n3.  Update the customer information on the new invoice.\n\n### Emails after finalization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Stripe automatically sends invoices when you set [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) to `send_invoice`. Stripe doesn’t email invoices in the following cases:\n\n*   When [charged automatically](https://docs.stripe.com/invoicing/automatic-charging).\n*   When [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) is turned off for the invoice.\n*   When the [Email finalized invoices to customers](https://dashboard.stripe.com/settings/billing/automatic) option is turned off.\n\n#### Note\n\nIf you turn off the **Email finalized invoices to customers** option, automatic or manual finalization doesn’t send an invoice.\n\n## Asynchronous payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods require customer interaction to complete the payment—for example, a European card or bank transfer may require [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA).\n\nUse the invoice’s [payment\\_intent](https://docs.stripe.com/api/invoices/object#invoice_object-payment_intent) parameter to choose how to handle the response from the payment attempt, which may be either `success` or `requires_action`.\n\nWhen the status of the PaymentIntent is `requires_action`, you must have your user complete a [3D Secure authentication](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-4) to complete the payment.\n\nInstead of building this yourself, you can rely on Stripe to handle it for you. [Enable reminder emails](https://dashboard.stripe.com/settings/billing/automatic) in the Dashboard so that Stripe can automatically send emails to your customers whenever `requires_action` occurs. These emails include a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page), where a customer can perform all of the actions required to pay the invoice. To learn more about these emails and how to customize them, see [Sending email reminders](https://docs.stripe.com/invoicing/send-email).",
  "title": "Status transitions and finalization | Stripe Documentation",
  "description": "Learn about invoice status transitions and finalization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_links/payment_links",
  "markdown": "# Payment Link | Stripe API Reference\n\n## [The Payment Link object](https://docs.stripe.com/api/payment_links/payment_links/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    The line items representing what is being sold.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The public URL that can be shared with customers.\n    \n\n### More attributes\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    inactive\\_messagenullable string\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_intent\\_datanullable object\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesnullable array of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    restrictionsnullable object\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscription\\_datanullable object\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Create a payment link](https://docs.stripe.com/api/payment_links/payment_links/create)\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```",
  "title": "Payment Link | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/pay",
  "markdown": "# Pay an invoice | Stripe API Reference\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Pay an invoice | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/void",
  "markdown": "# Void an invoice | Stripe API Reference\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Void an invoice | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/credit_notes/void",
  "markdown": "# Void a credit note | Stripe API Reference\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Void a credit note | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes",
  "markdown": "# Disputes and fraud | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what disputes are, how the process works, and how to prevent them from happening.\n\nA dispute (also known as a chargeback) occurs when a cardholder questions your payment with their card issuer.\n\nTo process a chargeback, the issuer creates a formal dispute on the card network, which immediately reverses the payment, pulling the money for the payment—as well as one or more network dispute fees—from Stripe. After that, Stripe debits your balance for the payment amount and dispute fee.\n\nTo help our users submit the best possible response for each dispute, Stripe provides a guided process within the [Dashboard](https://dashboard.stripe.com/test/disputes). This allows you to provide all of the necessary text and images that are appropriate to the [dispute reason](https://docs.stripe.com/disputes/categories) and your counter argument.\n\n## Managing and preventing disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need help with a dispute, [contact support](https://support.stripe.com/contact).\n\n## Additional resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Disputes and fraud | Stripe Documentation",
  "description": "Learn what disputes are, how the process works, and how to prevent them from happening.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/credit_notes/create",
  "markdown": "# Create a credit note | Stripe API Reference\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note](https://docs.stripe.com/api/credit_notes/retrieve)\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
  "title": "Create a credit note | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/taxes/migration",
  "markdown": "# Migrate to Stripe Tax | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate existing subscriptions to Stripe Tax.\n\n[Stripe Tax](https://docs.stripe.com/tax) allows you to calculate the tax to collect on your transactions. It computes the taxes and adds them to the payment automatically, based on the product and the customer location.\n\nWhen you integrate with Stripe Tax, you need to update existing subscriptions to make sure that tax is automatically calculated going forward. This guide assumes that you have existing, active subscriptions. Otherwise, see how to automatically [collect tax on new subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes) or learn more [about subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\nUse the following high-level steps to update your active subscriptions to Stripe Tax:\n\n1.  [Activate Stripe Tax](#activate) if you haven’t already.\n2.  [Check customer locations](#customer-locations). In some cases, you might need to update the locations.\n3.  [Update products and prices](#products-prices) with tax codes and tax behaviors.\n4.  [Update subscriptions](#subs) to automatically calculate taxes on future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n5.  [Confirm](#confirm) that you’ve updated the subscriptions correctly.\n\n#### Interested in using Stripe Tax and currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\n[](#activate)\n\nFirst, you need to activate Stripe Tax. Read the [set up guide](https://docs.stripe.com/tax/set-up) to learn how.\n\n[](#customer-locations)\n\nTo correctly calculate tax, we need to know the customer’s location. After activating Stripe Tax, you can check their tax location status by using the Dashboard, the API, or Dashboard exports.\n\nTo check a customer’s tax location status through the Dashboard, go to the [Customers page](https://dashboard.stripe.com/customers), select the customer, and expand the customer’s details. The tax location status (`automatic_tax`) has four possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| Valid (`supported`) | Automatic tax fully supported. | No further action required. |\n| Unrecognized location (`unrecognized_location`) | The address isn’t valid for determining a tax location. | Ask the customer for an updated address and set [`customer.address`](https://docs.stripe.com/api/customers/update#update_customer-address) to the new value. You can update the value through the API or Dashboard by editing the customer’s details. |\n| Not registered (`not_collecting`) | The address is recognized and resolved to a location that you haven’t set up a collection location for. | The action to take depends on your [tax obligations](https://docs.stripe.com/tax/monitoring). If you proceed, Stripe Tax doesn’t assess any taxes. If you want it to assess tax, [add an active registration](https://docs.stripe.com/tax/registering) for the jurisdiction the customer is based in. |\n| `failed` | An [error](https://docs.stripe.com/error-codes) occurred with Stripe’s servers. This is rare. | Try the request again or contact Stripe support for additional assistance. |\n\nIn case the `status=unrecognized_location` you need to update the customer location with [an address that Stripe Tax can use](https://docs.stripe.com/tax/customer-locations). In the Dashboard, you can go into the [Customers page](https://dashboard.stripe.com/customers), select the customer, and change its billing or shipping address under Details.\n\nFor more information on which customer address is valid, how they’re used, or how to handle errors, see [Collect customer addresses](https://docs.stripe.com/tax/customer-locations).\n\n[](#products-prices)\n\nYour products and prices use the default tax behavior you assigned when activating Stripe Tax. If you’d prefer to update active products and prices to calculate tax independently, set a tax\\_code and tax\\_behavior. See the full list of [available tax codes](https://docs.stripe.com/tax/tax-codes) and the [guide for setting up](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) tax codes and tax behavior for more information. For more information about [products and prices](https://docs.stripe.com/billing/taxes/collect-taxes#product-and-price-setup), including how to decide whether a price should be inclusive or exclusive, see the [Tax Setup FAQ](https://docs.stripe.com/tax/faq#set-up).\n\n### Update products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, update any existing products with a `tax_code`. If you don’t explicitly define a `tax_code` on your product, Stripe Tax uses the preset product tax code from your settings.\n\nHere’s how to update a Product with a `tax_code` using the API:\n\n`curl https://api.stripe.com/v1/products/`\n\n`{{PRODUCT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_code=  txcd_10000000`\n\nTo update a Product with a `tax_code` in the Dashboard, go to the [Products page](https://dashboard.stripe.com/products?active=true), select a product to edit and, in the product information page, choose the tax code from the drop-down menu.\n\n### Update prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, update the tax behavior for your prices.\n\n#### Common mistake\n\nYou can’t change `tax_behavior` after it’s been set to one of `exclusive` or `inclusive`. If you want to change the tax behavior of a price, you need to create a new price with the desired behavior, and archive the old price.\n\nHere’s how to update a price with the API:\n\n`curl https://api.stripe.com/v1/prices/`\n\n`{{PRICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_behavior=exclusive`\n\nTo update a price with the Dashboard, go to the [products page](https://dashboard.stripe.com/products), select the product with the price you want to update, and select additional options in the price information section. In the **Include tax in price** drop-down menu, select the behavior you want to associate with the price.\n\n[](#subs)\n\nWith your customers, products, and prices updated, you’re ready to update existing subscriptions.\n\n#### Caution\n\nGet the list of subscriptions that need to be updated from the [subscriptions page in the Dashboard](https://dashboard.stripe.com/subscriptions). Click **Filter**, check **Automatic tax** and select **Disabled** to display only subscriptions that don’t have automatic tax enabled. Alternatively, you can export all filtered subscriptions to view them as a CSV file. To do this, click **Export** and select **All** as the **Date range**.\n\nHow you update the subscriptions depends on their state:\n\n*   If your subscriptions [don’t have existing tax rates](#no-tax-rates), you only need to enable automatic tax.\n*   If your subscriptions have [existing tax rates](#existing-tax-rates) (at either the subscription or line-item level), you need to clear out any existing tax rates and enable automatic tax. To avoid creating prorated items, you can schedule this update.\n*   If your subscriptions have [subscriptions schedules](#existing-subscription-schedules), you need to remove instances of `automatic_tax[enabled]=false` in the subscription schedule plans.\n\n### Update subscriptions with no existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [update subscriptions](https://docs.stripe.com/api/subscriptions/update) that have no [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) configured, set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"automatic_tax[enabled]\"=true`\n\nSetting `automatic_tax.enabled=true` activates automatic tax calculations for all subsequent invoices created for that subscription.\n\nTo do this through the Dashboard, update the subscription and turn on the **Calculate tax automatically** option.\n\n### Update subscriptions with existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo update subscriptions with [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) set at the [subscription level](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#static-configuration), you need to remove the tax rates before enabling `automatic_tax`. When you make the update:\n\n*   Pass an empty string in the [`default_tax_rates`](https://docs.stripe.com/api/subscriptions/update#update_subscription-default_tax_rates) and [`tax_rates`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-tax_rates) fields for each subscription [`item`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items). Doing this clears out tax rates set at both the subscription (`default_tax_rates`) and line-item (`tax_rates`) levels.\n*   Set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve('{{SUBSCRIPTION_ID}}') Stripe::Subscription.update(   subscription.id,   {     automatic_tax: { enabled: true },     # Removes existing tax_rates for each item in the subscription     items: subscription.items.data.map {|item| {id: item.id, tax_rates: ''}},     default_tax_rates: ''   } )`\n\nTo make this update through the Dashboard, edit the subscription, then enable the **calculate tax automatically** option. The Dashboard automatically calculates tax going forward and removes any existing tax rates. If you haven’t updated your prices to set `tax_behavior`, the Dashboard prompts you to update any missing details before you can update the subscription.\n\n### Update Subscriptions with subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to collect tax and any of your subscriptions include a subscription schedule that sets `automatic_tax[enabled]=false`, you must remove this parameter. To do this, update all phases of the subscription’s schedule by removing `automatic_tax[enabled]=false` and setting `default_settings[automatic_tax][enabled]=true`.\n\nWhen you update a subscription schedule, you need to pass in all current and future phases. To do this, verify the set parameters, then enable Stripe Tax in the subscription schedule.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo update the subscription schedule after you obtain it, remove the `automatic_tax[enabled]=false` parameter, and pass down the other phases and parameters:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1578038400 \\  -d \"phases[1][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][start_date]\"=1578038400 \\  -d \"phases[1][end_date]\"=1580544000 \\  -d \"default_settings[automatic_tax][enabled]\"=true`\n\n#### Schedule the update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to avoid creating a prorated item, you can schedule the update to occur at the start of the next cycle.\n\nYou can currently only schedule subscription updates with the API:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve(   '{{SUBSCRIPTION_ID}}', ) schedule = Stripe::SubscriptionSchedule.create({   from_subscription: subscription.id }) Stripe::SubscriptionSchedule.update(   schedule.id,   {     end_behavior: 'release',     phases: [       # The first phase contains items for the       # latest subscription invoice       {         items: [           # Prices and tax_rates for each item           {             price: '{{PRICE_ID}}',             tax_rates: [               '{{TAX_RATE_ID}}'             ]           }         ],         default_tax_rates: ['{{TAX_RATE_ID}}'],         start_date: subscription.current_period_start,         end_date: subscription.current_period_end       },       # The second phase removes manual tax rates and enables       # automatic tax calculation       {         items: [           # Prices for each item with tax_rates: ''           {             price: '{{PRICE_ID}}',             tax_rates: ''           }         ],         default_tax_rates: '',         automatic_tax: {enabled: true},         iterations: 1       }     ]   } )`\n\n[](#confirm)\n\nTo confirm that you’ve properly updated your subscriptions, retrieve the [upcoming invoice](https://docs.stripe.com/api/invoices/upcoming) of a subscription and inspect the results of its tax calculation.\n\nYou can retrieve the tax amounts from the [`tax`](https://docs.stripe.com/api/invoices/object#invoice_object-tax) and [`total_tax_amounts`](https://docs.stripe.com/api/invoices/object#invoice_object-total_tax_amounts) fields on the upcoming invoice, and from the per-line-item [`tax_amounts`](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-tax_amounts) fields. The invoice has an [`automatic_tax`](https://docs.stripe.com/api/invoices/object#invoice_object-automatic_tax) field showing the status of the calculation, with one of three possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `complete` | Stripe Tax has successfully assessed the taxes on the payment. | You can retrieve the tax amounts from the tax and `total_tax_amounts` fields on the latest invoice, and from the per-line item `tax_amounts` fields. |\n| `requires_location_inputs` | Stripe Tax didn’t have enough information to determine the customer’s location and was unable to assess taxes. | Collect more information from a customer (such as a full street address) and update the [`customer.address`](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address) field. |\n| `failed` | Internal Stripe error. | Try the request again or contact Stripe support for additional assistance. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect taxes for recurring payments](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=stripe-tax)\n*   [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
  "title": "Migrate to Stripe Tax | Stripe Documentation",
  "description": "Learn how to migrate existing subscriptions to Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_intents/capture",
  "markdown": "# Capture a PaymentIntent | Stripe API Reference\n\nCapture the funds of an existing uncaptured PaymentIntent when its status is `requires_capture`.\n\nUncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.\n\nLearn more about [separate authorization and capture](https://docs.stripe.com/payments/capture-later).\n\n### Parameters\n\n*   The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it’s not provided.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with `status=\"succeeded\"` if the PaymentIntent is capturable. Returns an error if the PaymentIntent isn’t capturable or if an invalid amount to capture is provided.\n\nPOST /v1/payment\\_intents/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MrPBM2eZvKYlo2C1TEMacFD/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 1000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD_secret_9J35eTzWlxVmfbbQhmkNbewuL\",  \"confirmation_method\": \"automatic\",  \"created\": 1524505326,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"One blue fish\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_1EXUPv2eZvKYlo2CStIqOmbY\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1EXUPv2eZvKYlo2CUkqZASBe\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Increment an authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n\nPerform an incremental authorization on an eligible [PaymentIntent](https://docs.stripe.com/api/payment_intents/object). To be eligible, the PaymentIntent’s status must be `requires_capture` and [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) must be `true`.\n\nIncremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher `amount` provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object returns with the updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). If the incremental authorization fails, a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.\n\nLearn more about [incremental authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n### Parameters\n\n*   The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with the updated amount if the incremental authorization succeeds. Returns an error if the incremental authorization failed or the PaymentIntent isn’t eligible for incremental authorizations.\n\nPOST /v1/payment\\_intents/:id/increment\\_authorization\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/increment_authorization \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2099\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 2099,  \"amount_capturable\": 2099,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"manual\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_cWsUkvyTOjhLKh5Wxu61nYc0i\",  \"confirmation_method\": \"automatic\",  \"created\": 1680196960,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MrPBM2eZvKYlo2C1CEBUD4A\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MrPBL2eZvKYlo2CaNa8L11Z\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_capture\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Reconcile a customer\\_balance PaymentIntent](https://docs.stripe.com/api/payment_intents/apply_customer_balance)\n\nManually reconcile the remaining amount for a `customer_balance` PaymentIntent.\n\n### Parameters\n\n*   Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.\n    \n    A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).\n    \n    The maximum amount is the amount of the PaymentIntent.\n    \n    When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/apply\\_customer\\_balance\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_1GszwY2eZvKYlo2CohCEmT6b/apply_customer_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_1GszwY2eZvKYlo2CohCEmT6b\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1GszwY2eZvKYlo2CohCEmT6b_secret_1jQJzqkrQvx4BpwI5hn6WSEO5\",  \"confirmation_method\": \"automatic\",  \"created\": 1591918582,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"Created by stripe.com/docs demo\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Search PaymentIntents](https://docs.stripe.com/api/payment_intents/search)\n\nSearch for PaymentIntents you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/payment\\_intents/search\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"amount>1000\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/payment_intents/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```",
  "title": "Capture a PaymentIntent | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/mark_uncollectible",
  "markdown": "# Mark an invoice as uncollectible\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```\n\n## [Pay an invoice](https://docs.stripe.com/api/invoices/pay)\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
  "title": "Mark an invoice as uncollectible | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/customer/tax-ids",
  "markdown": "# Customer Tax IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to store, validate, and render customer tax ID numbers with Stripe Billing.\n\nDisplaying a customer’s tax ID on [invoice](https://docs.stripe.com/api/invoices \"invoices\") documents is a common requirement that you can satisfy by adding tax IDs to customers. A customer’s tax IDs display in the header of invoice and credit note PDFs.\n\n## Supported Tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe supports the following Tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |\n\n## Validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou’re responsible for the accuracy of customer information including their tax ID number. The invoice includes the customer tax ID whether or not it’s valid.\n\nStripe provides automatic validation to help determine ​​if the formatting is correct when you add the ID to our system. You can see the results of the validation in the Dashboard along with other customer information, including details returned from the government databases, and the registered name and address. However, we don’t continue to validate them over time. ​​If automatic validation isn’t available, you must manually verify these IDs.\n\n### Australian Business Numbers (ABN) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all Australian Business Numbers (ABNs) with the [Australian Business Register (ABR)](https://abr.gov.au/).\n\n### European Value-Added-Tax (EU VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe also automatically validates all European Value-Added-Tax (EU VAT) numbers with the [European Commission’s VAT Information Exchange System (VIES)](http://ec.europa.eu/taxation_customs/vies/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nVIES validation usually takes only a few seconds, but depending on the availability of various government databases, might take longer. Stripe automatically handles VIES downtime and attempts retries.\n\n### United Kingdom Value-Added-Tax (GB VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all UK Value-Added-Tax (GB VAT) numbers with the [United Kingdom’s Revenue & Customs (HMRC)](https://www.gov.uk/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nHMRC validation usually takes only a few seconds, but depending on the availability, might take longer. Stripe automatically handles HMRC downtime and attempts retries.\n\n### Testing customer tax ID verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these magic tax IDs to trigger certain verification conditions in test mode. The tax ID type must be either the EU VAT Number or Australian Business Number (ABN).\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification |\n| `111111111` | Unsuccessful verification |\n| `222222222` | Verification remains pending indefinitely |\n\n### Validation webhooks and Dashboard display ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBecause this validation process happens asynchronously, the [customer.tax\\_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated) webhook notifies you of validation updates.\n\n![Tax validation tooltip in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/validation-tooltip.de17a6f286a786e5643e39f43c02a42e.png)\n\nHover over a customer’s EU VAT number to display their VIES information.\n\nThe Dashboard displays the results of the validation within the customer details, including information returned from the government databases, and the registered name and address.\n\nWhen automatic validation isn’t available, you must manually verify these IDs.\n\n## Managing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage tax IDs in the Dashboard, with the [customer portal](https://docs.stripe.com/customer-management), or the [Tax ID API](https://docs.stripe.com/api/customer_tax_ids).\n\nTo add a tax ID:\n\n1.  Navigate to the [Customers](https://dashboard.stripe.com/customers) page, and select the applicable customer.\n2.  Click the pencil icon next to **Details** on the right.\n3.  Scroll down to **Tax Status** and **Tax ID** fields.\n4.  Click **Add another ID** to add a row to the tax ID list, where you can select the ID type and value.",
  "title": "Customer Tax IDs | Stripe Documentation",
  "description": "Learn how to store, validate, and render customer tax ID numbers with Stripe Billing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/taxes/tax-rates",
  "markdown": "# Tax rates and IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Assign tax rates to draft invoices for automatic tax calculation.\n\nIf you’re looking for automated tax calculation where you don’t need to define the rates, use [Stripe Tax](https://docs.stripe.com/tax).\n\nAfter you [create a tax rate](https://docs.stripe.com/billing/taxes/tax-rates), you can assign it:\n\n*   On individual [invoice](https://docs.stripe.com/api/invoices \"invoices\") items.\n*   On the entire subtotal of the invoice.\n\n#### Note\n\nStripe recommends that you assign a tax rate on individual invoice items.\n\n## Set tax rates on individual items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set tax rates on individual items using the [Dashboard](https://dashboard.stripe.com/invoices/create) or [API](https://docs.stripe.com/api/tax_rates). You can add up to five tax rates to each line item.\n\nIf you’re creating an invoice through the Dashboard, assign tax rates to individual line items.\n\n## Set default tax rates for the entire invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell one type of product, or have simple tax needs, you can set a default tax rate on the invoice. Default tax rates apply to all invoice line items. For more complex use cases, you can also set an item-level tax rate that overrides the default tax rate. You can add up to five default tax rates to each invoice.\n\nIf you’re creating an invoice through the Dashboard, you can assign a default tax rate after you add an item.",
  "title": "Tax rates and IDs | Stripe Documentation",
  "description": "Assign tax rates to draft invoices for automatic tax calculation.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates",
  "markdown": "# Collect taxes for recurring payments\n\n## Learn how to collect and report taxes for recurring payments.\n\nTo calculate tax for recurring payments, Stripe offers Stripe Tax and Tax Rates.\n\n*   **Stripe Tax**—a paid product that automatically calculates the tax on your transactions without the need to define the rates and rules. Fees only apply after you’ve added at least one location where you’re registered to calculate and remit tax. For more information, see [Stripe Tax](https://docs.stripe.com/tax).\n    \n*   **Tax Rates**—a free feature that allows you to define any number of tax rates for [invoices](https://docs.stripe.com/api/invoices \"invoices\"), [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and one-time payments that use Checkout. Stripe won’t create or maintain any tax rates on your behalf. For more information, see [Tax Rates](https://docs.stripe.com/api/tax_rates) and [how to use them](https://docs.stripe.com/billing/taxes/tax-rates).\n    \n\nStripe Tax allows you to calculate the tax to collect on your recurring payments when using Stripe Billing. You can create new subscriptions or add Stripe Tax to existing subscriptions, and examine any potential impact to the amount on your customer’s upcoming invoice. Stripe Tax is natively integrated with Stripe Billing and automatically handles tax calculation with your pricing model (for example, sub-cent, package), prorations, discounts, trials, and more. This guide assumes you’re setting up Stripe Tax and Billing for the first time.\n\nTo update existing subscriptions, reference the [Update existing subscriptions](https://docs.stripe.com/tax/subscriptions/update) guide.\n\n#### Note\n\n[](#get-started)\n\nThis short video shows to how to enable tax collection for recurring payments using hosted integrations like Stripe Checkout.\n\n[\n\n## Update your products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nStripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules to apply when calculating tax. Update the products and prices you use to include:\n\n1.  [Tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior): The tax behavior on a price can be either inclusive or exclusive. This determines how the buyer sees the tax. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n    \n    Setting the tax behavior explicitly on a price is optional, if you [set up the default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) in the [Stripe Tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax). You can override the default tax behavior setting by setting a tax behavior on a price.\n    \n2.  (Optional) [Tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior): A tax code is a classification of your product or service for Stripe Tax that makes sure we apply the correct tax rate to your transactions. Some examples include “Audio book,” “Gift card,” or “Software as a service.” If you don’t set the tax code, Stripe Tax uses the preset [tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax).\n    \n\n#### Caution\n\nYou can’t change `tax_behavior` after you set it to one of “exclusive” or “inclusive.” You can create a new price and archive the current one instead.\n\nIf you don’t want to create your products and prices upfront, you can pass `price_data.tax_behavior` and `product_data.tax_code` when creating subscriptions.\n\nLearn more about [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n\nThis guide uses an e-magazine as an example of a product with a recurring payment.\n\nFirst, create a [Price](https://docs.stripe.com/api/prices) on your server with a monthly charge for a new [Product](https://docs.stripe.com/api/products) named “My Product”. For tax purposes you add two extra fields:\n\n*   `tax_behavior` on the Price object. Set to `inclusive` or `exclusive`. This is a required field if you’re using Stripe Tax with Subscriptions.\n*   `tax_code` on the Product object. A Stripe [tax code](https://docs.stripe.com/api/tax_codes), which maps to a product tax code. Consult our [list of tax codes](https://docs.stripe.com/tax/tax-codes) for more information.\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"My Product\" \\  -d tax_code=  txcd_10000000    `\n\nRecord the product ID for the product. It looks like this:\n\n`{   \"id\": \"prod_H94k5odtwJXMtQ\",`\n\nUse the product ID to create a price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d product=prod_H94k5odtwJXMtQ \\  -d tax_behavior=exclusive`\n\n#### Note\n\nWhen `price_data.tax_behavior` is set to `exclusive`, tax is added onto the subtotal amount you specify. This is common in US markets and for B2B sales. When set to `inclusive`, the amount your buyer pays will never change, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n\nRecord the price ID so you can use it in subsequent steps. It looks like this:\n\n`{   \"id\": \"price_HGd7M3DV3IMXkC\",`\n\n[](#create-a-customer)\n\nWhen a user subscribes to your website, create a [Customer](https://docs.stripe.com/api/customers) on your server.\n\nWhen creating a customer, you can send us a description and the payment method only. However, the more information you send us, the better the tax calculation can identify the location of your customer and tax them accordingly. We recommend populating the `customer.address` field. To make sure the customer address is valid upon creation, pass `tax[validate_location]='immediately'`. You can also [expand](https://docs.stripe.com/api/expanding_objects) the `tax` field to confirm the location Stripe Tax has identified for your customer.\n\nYou can either add a country and a postal code:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, ideally, add a complete billing address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[line1]\"=\"510 Townsend St\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, only an IP address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nThe expanded `tax` field indicates the computed tax location (using the address first, falling back on the given IP address) and if the customer is compatible with automatic tax calculation:\n\n`{   \"id\": \"cus_13729he8947269\",   \"object\": \"customer\",   // ... other fields omitted   \"tax\": {     \"location\": {\"country\": \"US\", \"state\": \"CA\", \"source\": \"billing_address\"},     \"ip_address\": null,     \"automatic_tax\": \"supported\",   } }`\n\nThe value of `automatic_tax` has four possible states:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `supported` | Automatic tax fully supported. | No further action needed. |\n| `unrecognized_location` | The address isn’t valid for determining a tax location. | Ask customer for an updated address and set `customer.address` to the new value. |\n| `not_collecting` | The address is resolvable to a location for which you haven’t set up a registration. | Depending on your tax obligations, you can either proceed and Stripe Tax won’t assess any taxes, or you might want to [add a new registration](https://docs.stripe.com/tax/registering) for the jurisdiction in which the customer is based. |\n| `failed` | An error occurred with Stripe’s servers. This is rare. | Try the request again, or contact Stripe support for additional assistance. |\n\n[](#create-a-subscription)\n\nNow that the Customer is set up for tax calculation, you can create a Subscription on your server with the customer and their selected plan. To enable automatic tax calculation on subscriptions, set the `automatic_tax[enabled]` parameter to `true`:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true \\  -d payment_behavior=default_incomplete \\  -d \"expand[0]\"=latest_invoice`\n\nSetting this parameter causes all subsequent [Invoices](https://docs.stripe.com/api/invoices \"invoices\") to be created with automatic tax calculations activated.\n\nTo inspect the results of the latest tax calculation, retrieve the latest Invoice of a Subscription. You can do this by expanding the `latest_invoice` field on any Subscription request, as in the examples above. You can retrieve the tax amounts from the `tax` and `total_tax_amounts` fields on the latest invoice, and also from the per-line item `tax_amounts` fields.\n\nIf Stripe Tax does not have enough information to determine the customer’s location, a [customer\\_tax\\_location\\_invalid](https://docs.stripe.com/error-codes#customer-tax-location-invalid) error is returned.\n\n[](#collect-payment)\n\nTo complete payment of the first [invoice](https://docs.stripe.com/api/invoices \"invoices\") and activate the subscription, use `stripe.confirmCardPayment` when your customer submits the form.\n\n`const btn = document.querySelector('#submit-payment-btn'); btn.addEventListener('click', async (e) => {   e.preventDefault();   const nameInput = document.getElementById('name');    // Create payment method and confirm payment intent.   stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: cardElement,       billing_details: {         name: nameInput.value,       },     }   }).then((result) => {     if(result.error) {       alert(result.error.message);     } else {       // Successful subscription payment     }   }); });`\n\nThe subscription automatically becomes `active` upon payment. See our [Subscriptions with Elements guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#collect-payment) for more details on setting up your checkout page.\n\n[\n\n## Handling location validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-location-validation)\n\nStripe Tax requires a [recognized customer location](https://docs.stripe.com/tax/customer-locations) to calculate tax.\n\nWe recommend validating a customer’s `automatic_tax` status before attempting to create or update a subscription or one-off draft [invoice](https://docs.stripe.com/api/invoices \"invoices\") with `automatic_tax[enabled]=true`.\n\nCreating or updating a subscription or invoice behaves the following way when the [customer location is unrecognized](https://docs.stripe.com/tax/customer-locations#handling-errors):\n\n*   Creating or updating a subscription that **causes an immediate** invoice and payment attempt errors with an HTTP status 400 response.\n*   Updating a subscription that **does not cause an immediate** invoice or payment attempt returns an HTTP status 200 response. However, the customer location validation happens later asynchronously when the invoice is finalized. If the customer location is invalid during invoice finalization, Stripe sends a `invoice.finalization_failed` webhook. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n*   Creating or updating a draft invoice (either within the short window after a subscription cycle, or for a one-off invoice) updates the invoice’s `automatic_tax.status` to `requires_location_inputs`. You can then either update the customer object to correct the address, and then update or finalize the invoice, or turn off automatic tax calculation. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n\nIf tax calculation fails due to an unrecognized customer location on a recurring Subscription Invoice, Stripe sends a `invoice.finalization_failed` webhook when attempting to finalize the invoice. Keep this in mind when updating the location details of your customer.\n\nWe recommend listening for Subscription-related events (for example, invoice finalization failures) with [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks) because most activity happens asynchronously.\n\n[](#preview-price)\n\nStripe also provides an endpoint for previewing an upcoming [invoice](https://docs.stripe.com/api/invoices \"invoices\") for a subscription. You can use this endpoint to preview the initial invoice for a new subscription:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nIf you haven’t created a Customer yet, but you’ve collected your customer’s billing information, you can use the `customer_details` parameter in the place of a Customer ID:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"customer_details[address][line1]\"=\"510 Townsend St\" \\  -d \"customer_details[address][city]\"=\"San Francisco\" \\  -d \"customer_details[address][state]\"=CA \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address][postal_code]\"=94103 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nWhen previewing the first invoice for a subscription, the subscription ID in the response won’t point to a valid subscription.\n\nYou can also use this endpoint if you have an ongoing subscription without taxes enabled and would like to preview what the upcoming invoice would look like if you were to enable automatic tax.\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d subscription=sub_1JebWO2eZvKYlo2C1WYmWFd3 \\  -d \"automatic_tax[enabled]\"=true`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Determining customer locations](https://docs.stripe.com/tax/customer-locations)\n*   [Customer tax IDs](https://docs.stripe.com/billing/customer/tax-ids)\n*   [Reporting and filing](https://docs.stripe.com/tax/reports)\n*   [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates)\n*   [Tax Rates on Invoices](https://docs.stripe.com/invoicing/taxes/tax-rates)",
  "title": "Collect taxes for recurring payments | Stripe Documentation",
  "description": "Learn how to collect and report taxes for recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_rates",
  "markdown": "# Tax Rate | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax_rates)\n\n## [The Tax Rate object](https://docs.stripe.com/api/tax_rates/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   #### \n    \n    jurisdictionnullable string\n    \n    The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Tax rate percentage out of 100. For tax calculations with automatic\\_tax\\[enabled\\]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.\n    \n\n### More attributes\n\n*   #### \n    \n    effective\\_percentagenullable float\n    \n*   #### \n    \n    jurisdiction\\_levelnullable enum\n    \n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Create a tax rate](https://docs.stripe.com/api/tax_rates/create)\n\nCreates a new tax rate.\n\n### Parameters\n\n*   #### \n    \n    display\\_namestringRequired\n    \n    The display name of the tax rate, which will be shown to users.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   This represents the tax rate percent out of 100.\n    \n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe created tax rate object.\n\n```\ncurl https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=VAT \\  -d description=\"VAT Germany\" \\  -d percentage=16 \\  -d jurisdiction=DE \\  -d inclusive=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Update a tax rate](https://docs.stripe.com/api/tax_rates/update)\n\nUpdates an existing tax rate.\n\n### Parameters\n\n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rate, which will be shown to users.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated tax rate.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d active=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": false,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"effective_percentage\": 16,  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Retrieve a tax rate](https://docs.stripe.com/api/tax_rates/retrieve)\n\nRetrieves a tax rate with the given ID\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an tax rate if a valid tax rate ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```",
  "title": "Tax Rate | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_rates/object",
  "markdown": "# The Tax Rate object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   #### \n    \n    jurisdictionnullable string\n    \n    The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Tax rate percentage out of 100. For tax calculations with automatic\\_tax\\[enabled\\]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.\n    \n\n### More attributes\n\n*   #### \n    \n    effective\\_percentagenullable float\n    \n*   #### \n    \n    jurisdiction\\_levelnullable enum\n    \n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Create a tax rate](https://docs.stripe.com/api/tax_rates/create)\n\nCreates a new tax rate.\n\n### Parameters\n\n*   #### \n    \n    display\\_namestringRequired\n    \n    The display name of the tax rate, which will be shown to users.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   This represents the tax rate percent out of 100.\n    \n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe created tax rate object.\n\n```\ncurl https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=VAT \\  -d description=\"VAT Germany\" \\  -d percentage=16 \\  -d jurisdiction=DE \\  -d inclusive=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Update a tax rate](https://docs.stripe.com/api/tax_rates/update)\n\nUpdates an existing tax rate.\n\n### Parameters\n\n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rate, which will be shown to users.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated tax rate.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d active=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": false,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"effective_percentage\": 16,  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Retrieve a tax rate](https://docs.stripe.com/api/tax_rates/retrieve)\n\nRetrieves a tax rate with the given ID\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an tax rate if a valid tax rate ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [List all tax rates](https://docs.stripe.com/api/tax_rates/list)\n\nReturns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.\n\n### Parameters\n\n*   Optional flag to filter by tax rates that are either active or inactive (archived).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax rates, starting after tax rate `starting_after`. Each entry in the array is a separate tax rate object. If no more tax rates are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_rates\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",      \"object\": \"tax_rate\",      \"active\": true,      \"country\": null,      \"created\": 1682114687,      \"description\": \"VAT Germany\",      \"display_name\": \"VAT\",      \"inclusive\": false,      \"jurisdiction\": \"DE\",      \"livemode\": false,      \"metadata\": {},      \"percentage\": 16,      \"state\": null,      \"tax_type\": null    }    {...}    {...}  ],}\n```",
  "title": "The Tax Rate object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_tax_ids",
  "markdown": "# Tax IDs | Stripe API Reference\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [The Tax ID object](https://docs.stripe.com/api/tax_ids/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Two-letter ISO code representing the country of the tax ID.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer.\n    \n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ad_nrt` |\n    | `ae_trn` |\n    | `ar_cuit` |\n    | `au_abn` |\n    | `au_arn` |\n    | `bg_uic` |\n    | `bh_vat` |\n    | `bo_tin` |\n    | `br_cnpj` |\n    | `br_cpf` |\n    | Show 64 more |\n    \n*   Value of the tax ID.\n    \n\n### More attributes\n\n*   #### \n    \n    verificationnullable object\n    \n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Create a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_create)\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```",
  "title": "Tax IDs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/modify-tax-forms?method=csv",
  "markdown": "# Update and create 1099 tax forms\n\nStripe automatically generates tax forms for all connected accounts that have transactions in a given tax year. Tax forms are available on the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page in the Dashboard. If you need to update or correct a 1099 form, you can do so in one of the following ways:\n\nYou can also create new tax forms by importing CSV files. If your connected account doesn’t already have a tax form, performing Update or Delta imports automatically creates the form.\n\nClick **Create** to create a standalone tax form that isn’t associated with a connected account. You must include all columns except for `form_id` and `stripe_account_id`. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery). If you’re creating a standalone form of a non-default form type, you must include the CSV headers of that form type. If you need assistance getting the correct CSV headers, reach out to support@stripe.com.\n\nYou can export tax forms to verify data at scale against your internal systems or to prepare for a subsequent import. Whatever your rationale, you can export tax forms by clicking the **Export** button, then **Export CSV**. Choose the type of tax form to export, which also defines the CSV file that you download. This choice overrides any tax form type filter, if set. If you have multiple types of 1099 forms (for example, 1099-K for some recipients and 1099-NEC for others), you must export them separately.\n\nYou can also choose whether or not to export the tax identification number (TIN). If you don’t include the TIN, the TIN column shows a masked value (for example, `*********`). If you include the TIN, the value appears masked to the last 4 digits (for example, `*****1234`). If you require the full TIN in the export, contact [Stripe support](https://support.stripe.com/contact/email?topic=tax) to enable this feature.\n\nThe export considers any filters that you apply. You can see any applied filters by hovering over the information icon in the lower left corner of the export dialog.\n\nAfter you initiate an export you can monitor it on the **Exports & imports** tab. An export expires 7 days after initiation.\n\n![Export tax forms to CSV file format](https://b.stripecdn.com/docs-statics-srv/assets/export_tax_form_filters.bb0fa09e61e826c09e55ab528e900f3b.png)\n\n## Import tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides values for payee data and form totals whenever possible. However, you may want to supply your own totals-for example if you provided reimbursements or otherwise altered the totals. Or you may want to import data to correct a filed tax form.\n\n#### Note\n\nThe maximum allowed file size is 75 MB.\n\nWhen it comes to altering form totals specifically, you have 2 options:\n\n*   Overwrite the existing values with your own totals (CSV Import -> Update)\n*   Add to the existing values with your deltas (CSV Import -> Delta).\n\n## Overwriting existing values with Update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms allows you to override most of the values supplied on the initial tax form by Stripe. When you import tax forms, Stripe uses the imported values and files the tax forms in accordance with the information you provide. If you make updates in the Dashboard after importing from CSV, the updates aren’t recorded in the filed tax forms. If you need to return to the Stripe-supplied values, contact [Stripe support](https://support.stripe.com/contact/email?topic=tax).\n\nTo import tax forms:\n\n1.  Click **Import**.\n2.  Choose the type of tax form to import.\n3.  Specify whether or not you’ve already filed it.\n\nYou’re not required to supply a payee’s TIN on import. If you provide a 9-digit number for the TIN, it overrides the Stripe-supplied value. Stripe ignores any other value and retains the Stripe-supplied value.\n\n#### Leading Zeros\n\nTools like Google Spreadsheet and Excel usually delete any leading zeros in a CSV. For example, ‘000001234’ becomes ‘1234’ when exported as a CSV and opened in excel. If you export a form as a CSV that has leading zeros in the TIN, importing that same CSV form will fail if the zeros have been deleted. If this happens, add the leading zeros back in the TINs that had them originally and try again.\n\nAfter you initiate an import you can monitor it on the **Exports & imports** tab.\n\n![Import tax forms page with Update selected.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-import-update.6dbe2b7abeed23b49343cd83a9b2b629.png)\n\n## Adding to existing values with Delta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms using **Delta** allows you to add to (or subtract from) the values on the initial tax form totals by Stripe. This lets platforms report just the totals of transactions that happened outside of Stripe. Without this functionality you would have to download the existing values from Stripe, then sum the values from Stripe with the external values, and then import the final values. Instead, just provide the delta amounts and Stripe does the rest. This is particularly useful if you have multiple payout mechanisms or reimbursements on Stripe connected accounts for activity that happened outside of Stripe.\n\nTo import a form using **Delta**, click **Import**, then choose the type of tax form to import. Select **Delta**, and then choose the file that contains the delta totals data.\n\n![Import tax forms page with Update selected.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-import-upload-csv.ed08ff649cf6c50b7495047f14846774.png)\n\n## Frequently asked questions about Deltas![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section provides answer to common questions about using Deltas for 1099 tax forms in Connect.\n\n### Can there be negative values as deltas (e.g. reimbursements made which needs to reduce the total on 1099)?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes.\n\n### If I send multiple delta amounts, do they get overwritten or are they additive?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThey get overwritten, so if on stripe\\_account\\_id S1 there was a delta added for 10 USD, and then another delta was added for 20 USD, the final delta amount applied is 20 USD and not 30 USD.\n\n### If my calculation method changes or the total changes after I have applied a delta, does the delta still persist?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes. To learn more about calculation methods, see [Choose a calculation method](https://docs.stripe.com/connect/calculation-methods).\n\n### Will I be able to filter to just the forms that had deltas applied?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes\n\n### Can I undo the delta values that I just imported?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, you can use **Revert** to revert to the Stripe-calculated totals in the form. This restores the value in the form to the value calculated by Stripe after you import CSV files with different values using **Update** or **Delta**, or changes you made using the Dashboard.\n\n### If I update a value for a stripe\\_account\\_id using a Delta, can I also overwrite the amount with a CSV update and/or the tax form editor?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, Deltas are applied on top of the stripe calculated total / platform’s overwritten totals. The changes made on the Stripe dashboard UI (Tax form editor) overwrite any other changes. The examples in the following table demonstrate how Stripe determines the final values for a connected account after Deltas and Updates.\n\n| Scenario | Final value | Value after Revert |\n| --- | --- | --- |\n| Stripe calculated (100 USD) | 100 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (update) (150 USD) | 150 USD | 100 USD |\n| Stripe calculated (100 USD) -> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) | 125 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Update) (150 USD)-> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Update) (150 USD)-> CSV Import (Delta) (+25 USD) | 175 USD | 100 USD |\n| Stripe calculated (100 USD) -> Tax form editor Edit (200 USD) -> CSV Import (Delta) (+25 USD) | 225 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) -> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) -> Tax form editor Edit (200 USD) -> CSV Import (update) (150 USD) | 175 USD | 100 USD |\n\n## Improvements to CSV imports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCSV imports no longer require supplying all columns when updating values for your 1099 tax forms. Include only the columns in the CSV for the data that you want to change, along with either `form_id` or `stripe_account_id` values, which uniquely identify forms in Stripe. When you import a CSV for a correction, you must include a `form_id` field value. Columns that don’t exist in the CSV import schema default to the values that are on the corresponding tax form. We might perform validation on fields even if you don’t include them in the import. If we find validation errors, the import fails and the changes aren’t applied.\n\n## Override the tax form status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe calculates a status for each tax form based on the type of form, year-to-date amount, and information completeness. You can override a tax form’s status by setting a value for the `filing_requirement` field on import. This field can have one of the following values:\n\n*   `NOT_REQUIRED` – Don’t file the form, even if it meets the threshold and is complete.\n*   `REQUIRED` – File the form, even if it doesn’t meet the threshold or is incomplete. Conceptually this is the combination of `FILE_EVEN_IF_INCOMPLETE` and `FILE_EVEN_IF_BELOW_THRESHOLD`.\n*   `FILE_EVEN_IF_INCOMPLETE` – File the form if it’s above the threshold, even if it isn’t complete.\n*   `FILE_EVEN_IF_BELOW_THRESHOLD` – File the form if it’s complete, even if it’s below the threshold.\n*   `DEFAULT` – Use federal and state thresholds to decide whether a form should be filed. This is what the initial filing requirement value is for all forms, which can be overridden to one of the other values by platform admins.\n\n## Override the delivery method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses your platform’s tax settings to determine whether to use postal delivery for your forms by `DEFAULT`. You can override a tax form’s delivery method for an account by setting a value for the `postal_delivery` field on import. This field can have one of the following values:\n\n`TRUE` - Postal deliver the form when filed, even if the platform’s tax settings don’t require it or the account holder provided consent to paperless delivery.\n\n`FALSE` - Do not postal deliver the form when filed, even if the platform’s tax settings require it or the account holder chose to decline paperless delivery.\n\n`DEFAULT` - Use the platform’s tax settings to determine whether to postal deliver the form when filed.\n\n## Change the type of 1099 form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can change the type of 1099 form for an account by setting a value for the `form_type` field on import. This field can have one of the following values:\n\n`k` - To swap to a 1099-K form\n\n`misc` - To swap to a 1099-MISC form\n\n`nec` - To swap to a 1099-NEC form\n\n## 1099 CSV schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe schemas for 1099-NEC, 1099-K, and 1099-MISC are similar overall. Most fields in the CSV file map directly to a box on the tax form and are named accordingly. To get the column names for your CSV import, the best approach is to do a CSV export, change the values, delete the columns you aren’t changing, and import that CSV file.\n\nThe following table describes the schema when you use Update or Correct to update values in a 1099 form.\n\n| Field | Description |\n| --- | --- |\n| `form_id` | The ID of the tax form. You can’t change this value. |\n| `email_address` | The payee’s email address. You can’t change this value. To change a connected account’s email address, visit Connect communication settings or the 1099 tax forms dashboard. |\n| `status` | The federal filing status of the tax form. You can’t change this value. To force a tax form into a different status, use `filing_requirements`. |\n| `postal_delivery` | Whether to mail the form. You can use this field to override your postal delivery default in tax form settings. |\n| `delivery_status` | The postal delivery status of the tax form. You can’t change this value. |\n| `stripe_account_id` | The payee’s Stripe account ID. You can’t change this value. |\n| `filing_requirement` | Use this field to override a tax form status. |\n| `payee_name_line_1` | The payee’s name. |\n| `payee_name_line_2` | Overflow for the payee’s name, sometimes used for a _doing business as_ (DBA) name. |\n| `payee_tin` | The payee’s TIN. On export this is masked by default. Masked values are ignored on import. |\n| `payee_tin_type` | The type (business or individual) of a payee’s TIN. This field may be necessary for some state filings. |\n| `payee_address_line 1` | The first line of the payee’s address. |\n| `payee_address_line 2` | The second line of the payee’s address. |\n| `payee_city` | The payee’s city. |\n| `payee_region` | The payee’s state or region. |\n| `payee_postal_code` | The payee’s postal code. |\n| `payee_country` | The payee’s country. |\n| `payee_account_number` | The account number on the tax form. This field defaults to the `stripe_account_id`, but you can override the value on import. |\n| `january_amount` | The total amount paid in January. Other months follow the same format. |\n| `nonemployee_compensation` | The total compensation paid to the non-employee. |\n| `federal_income_tax_withheld` | The total amount withheld from federal income taxes, if any. |\n| `state_tax_withheld` | The total amount withheld from state income taxes, if any. |\n| `other_state_tax_withheld` | The total amount withheld from the other state income taxes, if any. |\n| `state_filer_id` | The payer’s ID for filing in the state. |\n| `other_state_filer_id` | The payer’s ID for filing in the other state. |\n| `state_income` | The payee’s state income. |\n| `other_state_income` | The payee’s other state income. |\n| `fatca_filing` | Whether to check the [Foreign Account Tax Compliance Act](https://www.irs.gov/businesses/corporations/foreign-account-tax-compliance-act-fatca) (FATCA) filing requirement. |\n| `second_tin_notice` | Use this field to specify whether the payer has received a TIN notice for the payee twice in 3 calendar years. |\n| `paperless_delivery_consent` | Use this field to specify whether you have collected paperless delivery consent. Possible values are `NOT_PROVIDED`, `PROVIDED`, and `REVOKED`. `NOT_PROVIDED` means you have not collected consent. `PROVIDED` means you have collected consent. `REVOKED` means that the connected account does not want e-delivery and has explicitly declined to give consent. When importing, leaving the field empty defaults to `NOT_PROVIDED`. |\n\nThe following table describes the schema for CSV export when you update the values in a tax form by adding a Delta to the value calculated by Stripe. Many of the fields are the same as the schema when you use Update or Correct. For fields that are different when using a Delta, the field names includes _\\_delta_ at the end.\n\n| Field | Description |\n| --- | --- |\n| form\\_id | The ID of the tax form. You can’t change this value and either form\\_id or stripe\\_account\\_id are the required values for the import with Delta. |\n| stripe\\_account\\_id | The payee’s Stripe account ID. You can’t change this value. |\n| nonemployee\\_compensation\\_delta | The delta to add on the compensation paid to the non-employee total already in Stripe. |\n| federal\\_income\\_tax\\_withheld\\_delta | The delta to add on the total amount withheld from federal income taxes total already in Stripe. |\n| state\\_tax\\_withheld\\_delta | The delta to add on the amount withheld from state income taxes total already in Stripe. |\n| state\\_income\\_delta | The delta to add on the payee’s state income total already in Stripe. |\n| january\\_amount\\_delta | The delta to add on the january totals already in Stripe. |\n| february\\_amount\\_delta | The delta to add on the february totals already in Stripe. |\n| royalties\\_delta | The delta to add on the royalties total already in Stripe. |\n| rents\\_delta | The delta to add on the _rents_ total already in Stripe. |\n\nIf you signed up for stripe hosted e-delivery, you can have your users update their tax information themselves before their tax form is filed. If users update their information after filing, the tax form page shows an option to correct the filed 1099 form with the updated information. For more information, see [Quick correct: Payee details](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#quick-correct:-payee-details).\n\nUsers can edit their Legal name, Taxpayer Identification Number (TIN), and address. Note that some information can’t be edited after a user’s legal entity is verified, including date of birth, and business type. To edit the information user must contact Stripe Support.",
  "title": "Update and create 1099 tax forms | Stripe Documentation",
  "description": "Update and create 1099 tax forms for connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscriptions/create",
  "markdown": "# Create a subscription | Stripe API Reference\n\nCreates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.\n\nWhen you create a subscription with `collection_method=charge_automatically`, the first invoice is finalized as part of the request. The `payment_behavior` parameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a `draft` status, use [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules#managing) instead. Schedules provide the flexibility to model more complex billing configurations that change over time.\n\n### Parameters\n\n*   The identifier of the customer to subscribe.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   #### \n    \n    itemsarray of objectsRequired\n    \n    A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Only applies to subscriptions with `collection_method=charge_automatically`.\n    \n    Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can’t be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s first invoice can’t be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn’t create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.\n    \n    Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    backdate\\_start\\_datetimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_configobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n*   #### \n    \n    promotion\\_codestringDeprecated\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly created `Subscription` object, if the call succeeded. If the attempted charge fails, the subscription is created in an `incomplete` status.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Na6dX7aXxi11N4 \\  -d \"items[0][price]\"=price_1MowQULkdIwHu7ixraBm864M\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Update a subscription](https://docs.stripe.com/api/subscriptions/update)\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```",
  "title": "Create a subscription | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscriptions/object",
  "markdown": "# The Subscription object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.\n    \n\n*   #### \n    \n    current\\_period\\_endtimestamp\n    \n    End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n    \n*   #### \n    \n    current\\_period\\_starttimestamp\n    \n    Start of the current period that the subscription has been invoiced for.\n    \n*   ID of the customer who owns the subscription.\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   List of subscription items, each with an attached price.\n    \n*   #### \n    \n    latest\\_invoicenullable stringExpandable\n    \n    The most recent invoice this subscription has generated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_setup\\_intentnullable stringExpandable\n    \n    You can use this [SetupIntent](https://docs.stripe.com/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription’s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-2).\n    \n*   #### \n    \n    pending\\_updatenullable object\n    \n    If specified, [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.\n    \n*   Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.\n    \n    For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default\\_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.\n    \n    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.\n    \n    A subscription can only enter a `paused` status [when a trial ends without a payment method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn’t generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://docs.stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription’s status unchanged.\n    \n    If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).\n    \n    If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_confignullable object\n    \n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n*   #### \n    \n    cancel\\_atnullable timestamp\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n*   #### \n    \n    cancellation\\_detailsnullable object\n    \n\n*   #### \n    \n    days\\_until\\_duenullable integer\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    ended\\_atnullable timestamp\n    \n\n*   #### \n    \n    next\\_pending\\_invoice\\_item\\_invoicenullable timestamp\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    pause\\_collectionnullable object\n    \n*   #### \n    \n    payment\\_settingsnullable object\n    \n*   #### \n    \n    pending\\_invoice\\_item\\_intervalnullable object\n    \n*   #### \n    \n    schedulenullable stringExpandable\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    trial\\_endnullable timestamp\n    \n*   #### \n    \n    trial\\_settingsnullable object\n    \n*   #### \n    \n    trial\\_startnullable timestamp\n    \n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Create a subscription](https://docs.stripe.com/api/subscriptions/create)\n\nCreates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.\n\nWhen you create a subscription with `collection_method=charge_automatically`, the first invoice is finalized as part of the request. The `payment_behavior` parameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a `draft` status, use [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules#managing) instead. Schedules provide the flexibility to model more complex billing configurations that change over time.\n\n### Parameters\n\n*   The identifier of the customer to subscribe.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   #### \n    \n    itemsarray of objectsRequired\n    \n    A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Only applies to subscriptions with `collection_method=charge_automatically`.\n    \n    Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can’t be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s first invoice can’t be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn’t create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.\n    \n    Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    backdate\\_start\\_datetimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_configobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n*   #### \n    \n    promotion\\_codestringDeprecated\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly created `Subscription` object, if the call succeeded. If the attempted charge fails, the subscription is created in an `incomplete` status.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Na6dX7aXxi11N4 \\  -d \"items[0][price]\"=price_1MowQULkdIwHu7ixraBm864M\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Update a subscription](https://docs.stripe.com/api/subscriptions/update)\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```",
  "title": "The Subscription object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/finalize",
  "markdown": "# Finalize an invoice | Stripe API Reference\n\nStripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n\n### Returns\n\nReturns an invoice object with `status=open`.\n\nPOST /v1/invoices/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Mark an invoice as uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```\n\n## [Pay an invoice](https://docs.stripe.com/api/invoices/pay)\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```",
  "title": "Finalize an invoice | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices/send",
  "markdown": "# Send an invoice for manual payment\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Send an invoice for manual payment | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscriptions/update",
  "markdown": "# Update a subscription | Stripe API Reference\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```",
  "title": "Update a subscription | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes",
  "markdown": "# Quote | Stripe API Reference\n\n## [The Quote object](https://docs.stripe.com/api/quotes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    A list of items the customer is being quoted for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of stringsExpandable\n    \n*   #### \n    \n    descriptionnullable string\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n\n*   #### \n    \n    from\\_quotenullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n\n*   #### \n    \n    subscription\\_schedulenullable stringExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Create a quote](https://docs.stripe.com/api/quotes/create)\n\nA quote models prices and services for a customer. Default options for `header`, `description`, `footer`, and `expires_at` can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcMfB0SSFHINCV \\  -d \"line_items[0][price]\"=price_1Mr7wULkdIwHu7ixhPkIEN2w \\  -d \"line_items[0][quantity]\"=2\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Update a quote](https://docs.stripe.com/api/quotes/update)\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```",
  "title": "Quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_links/payment_links/create",
  "markdown": "# Create a payment link | Stripe API Reference\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```",
  "title": "Create a payment link | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific",
  "markdown": "# Collect tax in Asia Pacific\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in APAC.\n\nIn the Asia Pacific (APAC) region, Stripe supports tax calculation in the following countries. Click the links below to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/australia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/georgia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/hong-kong)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/indonesia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/japan)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/malaysia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/new-zealand)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/singapore)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/thailand)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/vietnam)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are different rules for when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Indonesia, Malaysia, South Korea, Thailand, and Vietnam, your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) in Indonesia, Malaysia, South Korea, Thailand, and Vietnam sold by remote sellers. For the other countries listed, Stripe can calculate tax for [any of the product tax codes you assign to your products](https://docs.stripe.com/tax/tax-codes) and for domestic and cross-border sales.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe assumes the sale of most goods or services to be taxable unless the tax authority has specifically made them exempt.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Exports are zero rated and Stripe applies the [zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Asia Pacific | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in APAC.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa",
  "markdown": "# Collect tax in Europe, Middle East, and Africa\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in EMEA.\n\nIn the Europe, Middle East and Africa (EMEA) region, Stripe supports tax calculation in the following countries. Stripe also supports tax calculation in all of the countries in the European Union (EU). Learn more about [tax support for the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nClick the links below to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/bahrain)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/egypt)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/iceland)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kazakhstan)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kenya)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/nigeria)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/norway)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/oman)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/saudi-arabia)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/south-africa)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/switzerland)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/turkiye)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-arab-emirates)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-kingdom)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Iceland, Saudi Arabia, South Africa, and Türkiye, your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhat you sell and where you sell impacts how tax is calculated on your sales. There are also different rules that apply when your customer is located in the same country as your business or located somewhere else.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe assumes the sale of most goods or services to be taxable unless the tax authority has specifically made them exempt. In this region, Stripe only supports calculation for domestic transactions in Norway, Switzerland, United Arab Emirates, and the United Kingdom.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Exports are zero rated and Stripe applies the [zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\nIn Saudi Arabia and Türkiye, Stripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) and not physical goods.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Europe, Middle East, and Africa | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in EMEA.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union",
  "markdown": "# Collect tax in the European Union\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the European Union.\n\nBusinesses selling goods and services to customers in the European Union (EU) may need to collect value added tax (VAT). That’s the case even if your business isn’t established (based) in the EU. Although the VAT laws are generally similar across the EU, the tax rates and rules may vary per country.\n\n## When and how to register![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register for VAT, depending on the country your business is located in. After you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions. Learn more about the different registration schemes [in our guide](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss).\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each country in the European Union. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n[](#eu-businesses)\n\n### Domestic registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDomestic registration is the standard VAT registration for businesses selling goods and services within an EU country. Any business can register, regardless of their physical location.\n\nSome EU countries allow businesses to wait to register for VAT until their sales exceed a certain amount (tax registration threshold). However, other EU countries require all businesses to register, regardless of sales volume. Those countries use tax collection thresholds. Businesses below the threshold can apply for special schemes that exempt them from VAT collection obligations. For detailed information, visit the tax administration websites of each country.\n\nStripe monitors your registration obligations in the EU countries other than the country where your business is based. You can add your domestic registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax.\n\nIf you sell digital services or imported low-value goods exclusively through online marketplaces and the marketplace operator is responsible for collecting tax on these sales, you aren’t required to register for VAT in the countries where your customers are located.\n\n#### Smaller sellers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell to customers in other EU countries, you might need to register in those countries too. You don’t need to register in other EU countries if:\n\n*   your total sales are under 10,000 EUR in a calendar year **and**\n*   you sell digital products or physical goods **and**\n*   your sales are to individuals and not businesses in another EU country\n\nThe VAT rate of the EU country your business is based in applies instead. Stripe refers to this simplification rule as the small seller option. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nWhen you select the ‘domestic registration’ option, you’re asked to indicate if your business is a small seller with sales below the 10,000 EUR threshold. You only see this option for the country that you have set as your [origin address](https://docs.stripe.com/tax/set-up#origin-address). If you choose yes, we monitor your cross-border transactions in the EU and notify you when you exceed that threshold.\n\nAfter you exceed the small seller threshold, you’re required to collect tax in the country your customers are located in. You can do so in two ways:\n\n*   Register domestically in the EU countries your customers are located in\n*   Register for the [Union One Stop Shop (OSS) scheme](https://vat-one-stop-shop.ec.europa.eu/one-stop-shop_en) in your home EU country.\n\nThere are three steps to reflect this change in Stripe:\n\n1.  End your domestic small seller registration in Stripe on the [Registrations tab](https://dashboard.stripe.com/tax/registrations).\n2.  Add a new domestic registration for the location your business is based and select **no** when you’re asked if you are a small seller.\n3.  Add any other new domestic or One Stop Shop registrations to start collecting tax in those locations.\n\n### Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell goods or services to individuals (and not to businesses), you can register for the Union One Stop Shop (OSS) scheme in the EU country your business is based in. You won’t have to register with each EU country you sell goods or services to. Instead you’ll be able to register for OSS through your home country VAT website and submit one return for your sales across the EU. You’ll remit all VAT to your local tax authority who will distribute it to the countries where your customers are located.\n\nLearn more about [One-Stop Shop](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss). Select the country your business is based in [from the table](https://docs.stripe.com/tax/supported-countries/european-union#eu-countries) if you need help finding the right links.\n\n### Import One Stop Shop (IOSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell physical goods to individuals in the EU and the goods are imported from outside of the EU in packages (consignments) that are valued at or below 150 EUR, you can register for Import One Stop Shop in the EU country where you’re based. This means your customer pays VAT when they buy the goods and not when the goods arrive at the border in the EU. After you’re registered, you can collect VAT on your sales of these goods to customers across the EU without having to register in every country. You also only submit one return to the country you’re based in for the sales of these goods. Stripe assumes that goods purchased together are shipped together. If a transaction is over 150 EUR, IOSS won’t apply, which means your customers are charged by Customs when the goods arrive at the border in the EU.\n\n[](#outside-eu-businesses)\n\nIf your business is based outside the EU, you may need to register to collect VAT from your first sale in an EU country. There are different VAT registration options for businesses based outside the EU.\n\n### Domestic registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can register to collect VAT in each EU country your customers are based in. You may be required to appoint a tax representative, depending on the country you and your customer are located in.\n\nSelect the country your customer is based in from the list in the sidebar if you need help finding the right links.\n\nIf you sell digital services or goods exclusively through online marketplaces and the marketplace operator is responsible for collecting tax on these sales, you’re not required to register for VAT.\n\n### Non-Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis scheme is for businesses based outside the EU selling services to individuals in the EU. You can choose which EU country you register in. Once you’re registered, you can collect VAT on your sales to customers across the EU without having to register in every country. You’ll also only submit one return for all your EU sales to the country you registered in. You do not need to appoint a tax representative to use the OSS non-Union scheme.\n\n### Import One Stop Shop (IOSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell physical goods to individuals in the EU and the goods are imported in packages (consignments) that are valued at or under 150 EUR, you can register in the EU country of your choice for Import One Stop Shop. This means your customer pays VAT when they buy the goods and not when the goods arrive at the border in the EU. After you register, you can collect VAT on your sales of these goods to customers across the EU without having to register in every country. You’ll also only submit one return for all your EU sales to the country you registered in. Businesses based outside the EU normally need to appoint a local intermediary to register for IOSS. Stripe assumes that goods purchased together are shipped together. If a transaction is over 150 EUR, IOSS won’t apply, which means your customers might have to pay taxes and customs duties when the goods arrive at the border in the EU.\n\n### Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBusinesses based outside of the EU can use this scheme if they sell physical goods that are located in an EU country and shipped to individuals in other EU countries.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT on a transaction using the following pieces of information:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the customer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether or not they’re a VAT-registered business).\n\n[](#services)\n\nWhen your business is located in the same country as your customer, Stripe calculates VAT by applying that country’s tax rates.\n\nWhen you and your customer are in different countries (cross-border sales), there are more complicated rules that apply. These rules determine where the services are considered to be delivered and which country is entitled to collect the tax. Here’s a summary of how Stripe applies tax on sales of services:\n\n*   **Digital goods or electronically supplied services**: Generally taxable in the customer’s country. If you’ve indicated your business is a [small seller](https://docs.stripe.com/tax/supported-countries/european-union#eu-businesses-domestic-registration-small-sellers) the VAT of the country your business is based in applies.\n    \n*   **Services related to immovable property**: Taxable in the country where the property is located. Stripe assumes that the property is located in the customer’s country.\n    \n*   **Services involving work on movable property**: Taxable in the customer’s country as Stripe assumes that the work is performed in the customer’s country.\n    \n*   **Services that can be delivered remotely**: Taxable in the customer’s country when they’re provided to individuals outside the European Union or other businesses. When they’re provided to individuals in other EU countries, they’re taxable in the seller’s country.\n    \n*   **Other services**: Taxable in the country your business is based in when provided to individuals. Taxable in the customer’s country when provided to other businesses. These rules apply if you select a [product tax code](https://docs.stripe.com/tax/tax-codes) `txcd_20030000` General - Services.\n    \n\n### Reverse charge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, when you sell services to a VAT-registered business in another EU country, the customer is responsible for calculating and remitting the VAT. Those transactions are called [reverse charge](https://docs.stripe.com/tax/zero-tax#reverse-charges \"reverse_charge_mechanism\"). Your business must provide an invoice that specifies the reverse charge instead of including a tax amount.\n\nIf your customer is eligible for a reverse charge and provides their VAT ID in Stripe, we treat their transactions as a reverse charge and don’t calculate tax for them. If your customer provides a domestic tax identification number, reverse charge doesn’t apply. The transaction is treated as a business-to-consumer (B2C) sale, and VAT rules for B2C transactions are followed.\n\nYou can also mark a customer as eligible for [reverse charge](https://docs.stripe.com/tax/zero-tax#reverse-charges) in the Dashboard or using the API, even if you haven’t collected a tax ID for that customer. For information about which tax IDs Stripe validates, see [customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids).\n\nStripe doesn’t support the following types of reverse charge:\n\n*   **Domestic reverse charge**: In some EU countries, a reverse charge can apply to the sale of some goods and services between businesses in that country. Stripe supports reverse charge only for cross-border sales, not for sales within the same country.\n*   **Cross-border conditions**: Some EU countries have conditions under which types of services are eligible for reverse charge. For example, a country can require you to have a domestic registration. Stripe assumes that all services sold to customers with a business tax ID are eligible for reverse charge.\n\n[](#physical-goods)\n\nWhen your business is located in the same country as your customer and the goods are shipped within that country, Stripe calculates tax by applying that country’s tax rates.\n\nWhen the goods are shipped to a customer in a different EU country to your business, Stripe calculates the tax based on the type of customer. Different rules apply depending on if your customer is an individual or a VAT registered business.\n\n*   **Sales to an individual**: if the sales are to an individual and your business arranges the delivery (transport) then the goods are taxed using the rules of the country your customer is based in. The exception is if you’re an EU based business and have indicated your business is a [small seller](https://docs.stripe.com/tax/supported-countries/european-union#eu-businesses-domestic-registration-small-sellers) in Stripe. The tax of the country your business is based in will apply instead.\n*   **Sales to a VAT registered business**: the sales are taxable in the country your business is based in. Stripe applies the zero rate if the customer provides their VAT ID number. If you sell to a business in another EU country and your customer doesn’t provide a valid VAT ID number, you should collect VAT from the country your business is based in. However, Stripe processes these sales in the same way it processes a sale to an individual.\n\nWhen the goods are shipped to a customer outside of the EU, Stripe Tax will treat this sale as an export and [apply the zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in the EU. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nThe way you file tax returns and pay (remit) your taxes will depend on which types of registrations you have.\n\n*   **Domestic registration**: you’ll file your tax returns in each country you have a registration. Some EU countries may require you to appoint a local tax representative to do this if you are not based in the EU.\n*   **One Stop Shop**: you’ll file your tax returns for all your eligible sales across the EU with the country you have a One Stop Shop registration in. If you use different OSS schemes, you need to submit a separate return for each scheme. Learn more about [One-Stop Shop](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss#4-file-vat-returns).\n\nSelect the country you need to file in from the list in the sidebar if you need help finding the right links. You are responsible for filing and remitting your taxes in the EU. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe EU uses the term “deemed sellers” to refer to marketplace operators that might have tax collection obligations. To qualify as a deemed seller, the business must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. A business isn’t considered a deemed seller if it only processes payments, lists or advertises goods, or redirects customers to other websites or apps without further involvement in the sale.\n\nThe tax collection obligation for marketplace operators usually applies to:\n\n*   Sales of digital services.\n*   Sales of goods by non-EU sellers to EU individuals if the goods are located in the EU at the point of sale.\n*   Sales of goods to EU individuals where the goods are imported into the EU in packages valued at 150 EUR or less.\n\nMarketplace operators facilitating other types of sales might be required to collect VAT on these sales based on other indicators and contractual arrangements.\n\nA marketplace operator that collects VAT on a sale is treated as if it were buying the product from the merchant and selling it to the customer. This only applies for VAT purposes and doesn’t change the commercial position where the title to the product passes from the seller to the buyer.",
  "title": "Collect tax in the European Union | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the European Union.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/latin-america",
  "markdown": "# Collect tax in Latin America\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in LATAM.\n\nIn the Latin America (LATAM) region, Stripe supports tax calculation in the following countries. Click the following links to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/chile)\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/colombia)\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/mexico)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Chile, Colombia, and Mexico your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) in Chile, Colombia, and Mexico sold by remote sellers.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe doesn’t yet support calculation on domestic transactions in this region.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Stripe doesn’t yet support calculation on exports of physical goods in this region.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Latin America | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in LATAM.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/bahrain",
  "markdown": "# Collect tax in Bahrain | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Bahrain.\n\nIn Bahrain, Stripe only supports collecting VAT for electronic services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Bahrain. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Bahrain have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Bahrain don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Bahrain to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Bahrain on the [government website](https://www.nbr.gov.bh/vat_registration) (Arabic content).\n\nAfter you’ve registered to collect tax in Bahrain, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=bh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Bahrain.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Bahrain. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Bahrain, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Bahrain. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Bahrain | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Bahrain.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/slovenia",
  "markdown": "# Collect tax in Slovenia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Slovenia.\n\nSlovenia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Slovenia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Slovenia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Slovenia.\n\n*   [Domestic VAT registration](https://edavki.durs.si/EdavkiPortal/OpenPortal/CommonPages/Opdynp/PageC.aspx?category=davek_na_dodano_vrednost_podjetja)\n*   [One-Stop Shop registration schemes](https://edavki.durs.si/EdavkiPortal/OpenPortal/CommonPages/Opdynp/PageC.aspx?category=posebna_ureditev_moss_ddv_podjetja)\n\nAfter you’ve registered to collect tax in Slovenia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=si) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Slovenia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSlovenia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Slovenia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Slovenia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Slovenia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/egypt",
  "markdown": "# Collect tax in Egypt | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Egypt.\n\nIn Egypt, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Egypt. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Egypt have a registration threshold of EGP 500,000 for a rolling 12 month period. Sales to business customers in Egypt don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 500,000 EGP\n*   **Time frame**: rolling 12 months\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Egypt to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Egypt on the [government website](https://www.eta.gov.eg/en/digital-services).\n\nAfter you’ve registered to collect tax in Egypt, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=eg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Egypt.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Egypt. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Egypt, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Egypt. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Egypt | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Egypt.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/south-africa",
  "markdown": "# Collect tax in South Africa\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Africa.\n\nIn South Africa, Stripe Tax supports calculation and collection of [VAT](https://www.sars.gov.za/types-of-tax/value-added-tax/) for remote sellers. You must have no physical presence in the country to collect this tax on Stripe.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Africa. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nA non-resident business supplying goods and services in South Africa becomes liable to be registered if the total value of taxable sales is more than 1 million ZAR in a 12-month period, or is expected to exceed this amount. Where a non-resident company is liable to register for VAT purposes, they must appoint a VAT representative. The obligation to appoint a VAT representative doesn’t apply to providers of digital services.\n\nNon-residents supplying digital services from a place outside South Africa to South African customers (both B2B and B2C) must register by the end of any month if they exceed the threshold of 1 million ZAR in any consecutive 12-month period and any two of the following three circumstances apply:\n\n*   The recipient of the services is a resident of South Africa\n*   The payment for the services originates from a bank registered under the Banks Act 94 of 1990 (the Banks Act)\n*   The recipient of the services has a business, residential, or postal address in South Africa\n\nFor example, if you’re based outside of South Africa and sell digital services to consumers in South Africa and cross the threshold during any 12-month period (from February of the past year to January of the current year, for example) you must register by the end of the month that you crossed the threshold in.\n\n**Threshold**: 1 million ZAR\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in South Africa on the government website:\n\n*   [General information about VAT in South Africa](https://www.sars.gov.za/types-of-tax/value-added-tax/)\n*   [How to register](https://www.sars.gov.za/types-of-tax/value-added-tax/register-for-vat/)\n\nAfter you’ve registered to collect tax in South Africa, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=za) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Africa.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in South Africa.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to South Africa. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in South Africa | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Africa.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/georgia",
  "markdown": "# Collect tax in Georgia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia.\n\nIn Georgia, Stripe only supports collecting [VAT](https://nr.rs.ge/home) for electronically supplied services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Georgia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing electronically supplied services (digital products) to individuals in Georgia have no registration threshold. The Georgian tax administration refers to a remote seller as a “foreign taxable person that pays VAT without an obligation of registration.”\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Georgia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Georgia on the [government website](https://nr.rs.ge/home).\n\nAfter you’ve registered to collect tax in Georgia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ge) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Georgia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Georgia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Georgia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Georgia. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Georgia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/spain",
  "markdown": "# Collect tax in Spain | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Spain.\n\nSpain is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Spain. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Spain on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Spain.\n\n*   [General information and domestic VAT registration](https://sede.agenciatributaria.gob.es/Sede/en_gb/iva.html)\n*   [One-Stop Shop registration schemes](https://sede.agenciatributaria.gob.es/Sede/en_gb/iva/iva-comercio-electronico/nuevos-regimenes-especiales-ventanilla-unica.html)\n\nAfter you’ve registered to collect tax in Spain, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=es) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Spain.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpain applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Spain, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Spain. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Canary Islands\n*   Ceuta\n*   Melilla\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Spain. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Spain | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Spain.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kazakhstan",
  "markdown": "# Collect tax in Kazakhstan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kazakhstan.\n\nIn Kazakhstan, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kazakhstan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Kazakhstan have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Kazakhstan don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Kazakhstan to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Kazakhstan on the [government website](https://kgd.gov.kz/en/content/taxation-foreign-companies-engaged-electronic-trade-goods-and-provision-electronic-services).\n\nAfter you’ve registered to collect tax in Kazakhstan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=kz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kazakhstan.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Kazakhstan. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Kazakhstan, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Kazakhstan. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Kazakhstan | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kazakhstan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kenya",
  "markdown": "# Collect tax in Kenya | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kenya.\n\nIn Kenya, Stripe only supports collecting VAT for electronic, internet and digital marketplace supplies. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kenya. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to both businesses and individuals in Kenya have no registration threshold; they must register for VAT within 30 days after the first sale.\n\n**Threshold**: 1 transaction **Included transactions**: Business-to-consumer (B2C) and business-to-business (B2B) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Kenya to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Kenya on the [government website](https://kra.go.ke/individual/filing-paying/types-of-taxes/value-added-tax) and in this [guide for remote sellers](https://www.kra.go.ke/images/publications/USERGUIDE---DST-NON-RESIDENT-REGISTRATION-REVIEWED-FINAL-18.12.2020-1.pdf).\n\nAfter you’ve registered to collect tax in Kenya, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ke) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kenya.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Kenya. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Kenya, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Kenya. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Kenya | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kenya.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/finland",
  "markdown": "# Collect tax in Finland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Finland.\n\nFinland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Finland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Finland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Finland.\n\n*   [VAT information and domestic registration](https://www.vero.fi/en/businesses-and-corporations/taxes-and-charges/vat/)\n*   [One-Stop Shop registration schemes](https://www.vero.fi/en/businesses-and-corporations/taxes-and-charges/vat/international-commerce/arvonlis%C3%A4veron-erityisj%C3%A4rjestelm%C3%A4t-onestopshop/)\n\nAfter you’ve registered to collect tax in Finland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=fi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Finland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Finland, the Åland Islands are outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Finland. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Finland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Finland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Finland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/sweden",
  "markdown": "# Collect tax in Sweden | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Sweden.\n\nSweden is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Sweden. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Sweden on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Sweden.\n\n*   [General information and domestic VAT registration](https://www.skatteverket.se/servicelankar/otherlanguages/inenglishengelska/businessesandemployers/startingandrunningaswedishbusiness/declaringtaxesbusinesses/vat.4.12815e4f14a62bc048f52be.html)\n*   [One-Stop Shop registration schemes](https://www.skatteverket.se/servicelankar/otherlanguages/inenglishengelska/businessesandemployers/startingandrunningaswedishbusiness/declaringtaxesbusinesses/vat/reportvatunderthespecialschemesoss.4.1997e70d1848dabbac92128.html)\n\nAfter you’ve registered to collect tax in Sweden, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=se) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Sweden.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSweden applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Sweden. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Sweden | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Sweden.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/switzerland",
  "markdown": "# Collect tax in Switzerland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Switzerland.\n\nIn Switzerland, Stripe Tax supports calculation and collection of [VAT](https://www.estv.admin.ch/estv/en/home/value-added-tax.html).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Switzerland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf your global taxable turnover exceeds 100,000 CHF in a calendar year and you’re based outside Switzerland, appoint a fiscal representative and register in Switzerland with your first taxable transaction there. You don’t need to register if:\n\n*   You only sell to Swiss businesses (B2B sales) and the sales are subject to reverse charge in Switzerland.\n*   You only provide tax exempt services to customers in Switzerland.\n\nIf you operate outside Switzerland and perform a taxable sale within Switzerland while your global taxable turnover remains below 100,000 CHF, you must register if it’s probable that your global taxable turnover surpasses 100,000 CHF in the next 12 months.\n\n**Threshold**: 100,000 CHF (global)\n\n**Period**: 12 months\n\n**Included transactions**: Taxable transactions perfomed in and outside Switzerland.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nForeign businesses must appoint a fiscal representative to register for VAT purposes in Switzerland and provide cash or bank guarantee for future VAT liabilities.\n\nFind more information on how to register for VAT in Switzerland on the [government website](https://www.estv.admin.ch/estv/en/home/value-added-tax.html).\n\nAfter you’ve registered to collect tax in Switzerland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ch) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Switzerland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Switzerland. Stripe considers most goods or services sales taxable unless explicitly exempted.\n\nMost services provided by foreign businesses that aren’t registered for VAT in Switzerland are subject to reverse charge. Switzerland applies reverse charge to sales of services to both VAT-registered businesses and individuals who acquire services exceed more than 10,000 CHF in a calendar from abroad. However, after foreign sellers register for Swiss VAT, they must charge VAT on all taxable services to Swiss businesses and individuals because the reverse charge no longer applies.\n\nStripe doesn’t support the special rules requiring foreign businesses to charge Swiss VAT on the sale of goods to Swiss customers if their sales of low-value goods exempt from import VAT exceed the annual threshold of 100,000 CHF. Swiss law categorizes low-value goods as those where import VAT would be less than 5 CHF. Depending on the VAT rate, this includes goods valued up to 62 CHF (if taxed at 8.1%) or up to 193 CHF (if taxed at 2.6%).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Switzerland. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in Switzerland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Switzerland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/nigeria",
  "markdown": "# Collect tax in Nigeria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nigeria.\n\nIn Nigeria, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nigeria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to both businesses and individuals in Nigeria have no registration threshold; they must register for VAT purposes from the first sale.\n\n*   **Threshold**: 25,000 USD\n*   **Time frame**: 12 months\n*   **Included transactions**: Business-to-consumer (B2C) and Business-to-business (B2B) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Nigeria to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Nigeria on the [government website](https://taxpromax.firs.gov.ng/nrtpPreregistrationPage).\n\nAfter you’ve registered to collect tax in Nigeria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ng) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nigeria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Nigeria. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Nigeria, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Nigeria. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Nigeria | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nigeria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/france",
  "markdown": "# Collect tax in France | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in France.\n\nFrance is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in France. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in France on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in France.\n\n*   [Domestic VAT registration](https://www.impots.gouv.fr/internationalenbusiness/competent-department)\n*   [One-Stop Shop registration schemes](https://www.impots.gouv.fr/professionnel/jutilise-le-guichet-unique-tva-ioss-oss) (French content)\n\nAfter you’ve registered to collect tax in France, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=fr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in France.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrance applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn France, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for France. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Saint Barthélemy\n*   Saint Martin\n*   Saint Pierre and Miquelon\n*   Wallis and Futuna\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to France. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in France | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in France.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/thailand",
  "markdown": "# Collect tax in Thailand | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Thailand.\n\nIn Thailand, Stripe only supports collecting [VAT](https://eservice.rd.go.th/rd-ves-web/landing) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Thailand. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers supplying digital goods and services to Thai consumers are required to register for VAT purposes if their taxable sales of digital goods and services exceed THB 1.8 million. The threshold period is an accounting period (for corporations) or a calendar year (for individuals). Remote sellers are required to register for VAT within 30 days from the day they have satisfied the registration threshold. As accounting periods vary per company, Stripe uses a calendar year as the threshold period.\n\n**Threshold**: THB 1.8 million\n\n**Time frame**: Calendar year\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Thailand to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Thailand on the [government website](https://eservice.rd.go.th/rd-ves-web/landing).\n\nAfter you’ve registered to collect tax in Thailand, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=th) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Thailand.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Thailand. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Thailand, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Thailand. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Thailand | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Thailand.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/oman",
  "markdown": "# Collect tax in Oman | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Oman.\n\nIn Oman, Stripe only supports collecting VAT for electronically supplied services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Oman. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Oman have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Oman don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Oman to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Oman on the [government website](https://taxoman.gov.om/portal/web/taxportal/e-services).\n\nAfter you’ve registered to collect tax in Oman, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=om) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Oman.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Oman. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Oman, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Oman. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Oman | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Oman.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/turkiye",
  "markdown": "# Collect tax in Türkiye | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Türkiye.\n\nIn Türkiye, Stripe only supports collecting [VAT](https://digitalservice.gib.gov.tr/kdv3_side/main.jsp) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Türkiye. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Türkiye have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Türkiye don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Türkiye to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Türkiye on the [government website](https://digitalservice.gib.gov.tr/kdv3_side/main.jsp).\n\nAfter you’ve registered to collect tax in Türkiye, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=tr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Türkiye.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Türkiye. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Türkiye, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Türkiye. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Türkiye | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Türkiye.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/germany",
  "markdown": "# Collect tax in Germany | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Germany.\n\nGermany is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Germany. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Germany on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Germany.\n\n*   [Domestic VAT registration](https://www.elster.de/bportal/infoseite/unternehmer_bop?locale=en_US)\n*   [One-Stop Shop for EU businesses](https://www.bzst.de/DE/Unternehmen/Umsatzsteuer/One-Stop-Shop_EU/one_stop_shop_eu_node.html)(German content)\n*   [One-Stop Shop for businesses outside the EU](https://www.bzst.de/EN/Businesses/VAT/OSS_non_Union/OSS_non_union_scheme/OSS_non_union_scheme_node.html)\n*   [Import One-Stop Shop registration](https://www.bzst.de/EN/Businesses/VAT/Import_One_Stop_Shop/import_one_stop_shop_node.html)\n\nAfter you’ve registered to collect tax in Germany, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=de) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Germany.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGermany applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Germany. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Germany | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Germany.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/australia",
  "markdown": "# Collect tax in Australia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Australia.\n\nIn Australia, Stripe Tax supports calculation and [collection of GST](https://www.ato.gov.au/business/gst/).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Australia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register in Australia if their sales of services or low-value goods to Australian individuals exceed 75,000 AUD in the past 12 months or are expected to in the next 12 months. Sales to GST-registered Australian businesses that are subject to reverse charge don’t count toward the threshold. Non-profit organizations who sell remotely have a higher 150,000 AUD threshold but the threshold monitoring tool doesn’t track this.\n\n**Threshold**: 75,000 AUD (or 150,000 AUD for non-profit organizations)\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\nStripe supports domestic registration in Australia for both Australian businesses and remote sellers.\n\nIf a remote business sells digital services or low-value goods into Australia exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for GST in Australia. These sales don’t count toward the seller’s registration threshold.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in Australia on the government website:\n\n*   [Registration for businesses with an origin address in Australia](https://www.ato.gov.au/Business/GST/Registering-for-GST/)\n*   [Registration for remote sellers](https://www.ato.gov.au/Business/International-tax-for-business/Non-resident-businesses-and-GST/) (businesses based outside of Australia selling into Australia)\n\nAfter you’ve registered to collect tax in Australia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=au) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Australia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in Australia. Stripe assumes most sales to be taxable unless specifically exempt. If you’re a remote seller and sell services to Australian customers, GST is typically collected on sales to individuals. No tax is charged on sales to business customers who provide their Australian Business Register (ABN) number.\n\nStripe doesn’t calculate GST on sales of imported low-value goods (valued 1,000 AUD or less) to Australian individuals.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Australia. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia defines electronic distribution platform (EDP) operators as marketplace operators that might have tax collection obligations. To qualify as an EDP, a marketplace operator must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. Businesses that only provides payment processing or maintain the technical infrastructure behind an online marketplace don’t qualify as EDPs. EDP operators must collect GST on:\n\n*   Sales of imported low-value goods by remote sellers to private individuals in Australia.\n*   Sales of digital services by remote sellers to private individuals in Australia.",
  "title": "Collect tax in Australia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Australia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/greece",
  "markdown": "# Collect tax in Greece | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Greece.\n\nGreece is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Greece. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Greece on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Greece.\n\n*   [VAT information and domestic registration](https://www.aade.gr/en/epicheireseis/phorologikes-yperesies/phpa)\n*   [One-Stop Shop registration schemes](https://www.aade.gr/oss)\n\nAfter you’ve registered to collect tax in Greece, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=gr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Greece.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGreece applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Greece. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Greece | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Greece.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/austria",
  "markdown": "# Collect tax in Austria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Austria.\n\nAustria is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Austria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Austria on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Austria.\n\n*   [Domestic VAT registration](https://www.bmf.gv.at/en/topics/taxation/vat-assessment-refund.html)\n*   [One-Stop Shop registration](https://www.usp.gv.at/en/steuern-finanzen/umsatzsteuer/Umsatzsteuer-One-Stop-Shop.html)\n*   [Import One-Stop Shop registration](https://www.usp.gv.at/en/steuern-finanzen/umsatzsteuer/Umsatzsteuer-One-Stop-Shop/IOSS/Registrierung-zum-IOSS.html)\n\nAfter you’ve registered to collect tax in Austria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=at) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Austria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustria applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Austria. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Austria | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Austria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/belgium",
  "markdown": "# Collect tax in Belgium | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Belgium.\n\nBelgium is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Belgium. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Belgium on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Belgium.\n\n*   [Domestic VAT registration](https://business.belgium.be/en/setting_up_your_business/registration_with_the_vat_authorities)\n*   [One-Stop Shop registration schemes](https://finance.belgium.be/en/E-services/Intervat/oss)\n\nAfter you’ve registered to collect tax in Belgium, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=be) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Belgium.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBelgium applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Belgium. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Belgium | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Belgium.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-kingdom",
  "markdown": "# Collect tax in the United Kingdom\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the United Kingdom.\n\nIn the United Kingdom, Stripe Tax supports calculation and collection of [VAT](https://www.gov.uk/how-vat-works).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in the United Kingdom. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re based outside the United Kingdom, you must register in the UK within 30 days of performing the first taxable transaction there. You’re also liable to register if you have reasonable grounds to believe that you’ll perform taxable transactions within the next 30 days. A taxable transaction is any sale made in the UK that’s neither exempt from VAT nor subject to reverse charge. Taxable transactions include those that are zero-rated for VAT purposes.\n\nFor example, if you’re based in the US and sell digital services to overseas customers, you must register in the UK as soon as you have reasonable grounds to believe that a UK consumer will purchase your services. If a UK consumer has actually bought your digital services, you must register within 30 days of performing the sale. However, if you only sell to UK businesses, you don’t need to register because such sales are subject to reverse charge and don’t constitute taxable transactions for UK VAT purposes.\n\nThe HMRC VAT Notice 700/1 [Who should register for VAT](https://www.gov.uk/government/publications/vat-notice-7001-should-i-be-registered-for-vat/vat-notice-7001-should-i-be-registered-for-vat#Exempt-supplies) provides more information on registration in the UK.\n\n**Threshold**: 1 transaction in the UK.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\nIf a remote business sells digital services or low-value goods into the UK exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for UK VAT. These sales don’t count towards the seller’s registration threshold.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in the United Kingdom on the government website:\n\n*   [General information about UK VAT](https://www.gov.uk/how-vat-works)\n*   [How to register](https://www.gov.uk/register-for-vat)\n\nAfter you’ve registered to collect tax in the United Kingdom, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=gb) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in the United Kingdom.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in the United Kingdom. Stripe assumes most sales to be taxable unless specifically exempted. If you’re a remote seller providing digital services to UK customers, UK VAT is typically collected on sales to individuals. Tax isn’t charged on sales to business customers who provide their VAT identification number.\n\nStripe doesn’t calculate VAT on imported low-value goods that are shipped into the UK in packages valued at 135 GBP or less.\n\nThe United Kingdom has some territories outside the scope of the standard tax system that have different rules. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for the UK. This applies to the following locations:\n\n*   British Virgin Islands\n*   Channel Islands (Guernsey and Jersey)\n*   Falkland Islands\n*   Gibraltar\n\nLearn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\nNorthern Ireland applies its own special VAT rules. If you sell goods into Northern Ireland, you have to follow the same rules as other European Union countries. But if you sell services, you have to charge taxes based on the laws of the United Kingdom. Stripe Tax doesn’t support sales of goods to Northern Ireland.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to the United Kingdom. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe UK uses the terms “online marketplace operators” and “digital platform operators” to refer to marketplace operators that might have tax collection obligations. To qualify as an online marketplace operator, the business must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. A business isn’t considered an online marketplace if it only processes payments, lists or advertises goods, or redirects customers to other websites or apps without further involvement in the sale.\n\nThe tax collection obligation for marketplace operators typically includes:\n\n*   Sales of digital services\n*   Sales of goods by remote sellers to UK private individuals when the goods are in the UK at the point of sale.\n*   Sales of goods to UK private individuals if the goods are imported into the UK in packages valued at 135 GBP or less.\n\nMarketplace operators facilitating other types of sales might need to collect VAT based on different indicators and contractual arrangements.\n\nA marketplace operator that collects UK VAT on a sale is treated as if it were buying the product from the merchant and selling it to the customer. This applies only for VAT purposes and doesn’t change the commercial position where the title to the product passes from the seller to the buyer.",
  "title": "Collect tax in the United Kingdom | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the United Kingdom.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-arab-emirates",
  "markdown": "# Collect tax in United Arab Emirates\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in United Arab Emirates.\n\nIn United Arab Emirates, Stripe Tax supports calculation and collection of VAT.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in United Arab Emirates. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re located outside the UAE, you must register in the UAE as soon as you perform taxable sales in the UAE and where no other person is obligated to pay the due VAT on these supplies in the UAE (no reverse charge applies). The registration deadline is within 30 days of performing the first taxable sale.\n\nFor example, if you’re based in the US and sell digital services to UAE consumers, you must register within 30 days of performing the first sale. However, if you only sell to UAE businesses, you don’t need to register because such sales are subject to reverse charge.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in United Arab Emirates on the [government website](https://tax.gov.ae/en/taxes/vat.aspx).\n\nAfter you’ve registered to collect tax in United Arab Emirates, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ae) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in United Arab Emirates.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in United Arab Emirates.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to United Arab Emirates. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in United Arab Emirates | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in United Arab Emirates.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/hong-kong",
  "markdown": "# Collect tax from Hong Kong\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Hong Kong.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHong Kong doesn’t impose VAT or sales tax. This means you won’t see an option to add your registration for Hong Kong to Stripe and collect taxes from your customers based in Hong Kong.\n\nHowever Hong Kong does impose other taxes on businesses, including a profits tax. Learn more about the taxes that apply in Hong Kong at the [tax authority](https://www.gov.hk/en/business/taxes/profittax/index.htm).\n\nIf you’re a business based in Hong Kong you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou may need to register to collect tax on your sales in other countries. Learn more in our guides about:\n\n*   [Registering for sales tax in the United States](https://stripe.com/guides/sales-tax-registration-process-us)\n*   [Registering for VAT in the European Union](https://stripe.com/guides/tax-registration-process-europe)\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax from Hong Kong | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Hong Kong.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/bulgaria",
  "markdown": "# Collect tax in Bulgaria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Bulgaria.\n\nBulgaria is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Bulgaria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Bulgaria on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Bulgaria.\n\n*   [Domestic VAT registration](https://old.nra.bg/page?id=605) (Bulgarian content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/bulgaria_en)\n\nAfter you’ve registered to collect tax in Bulgaria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=bg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Bulgaria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBulgaria applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Bulgaria. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Bulgaria | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Bulgaria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/vietnam",
  "markdown": "# Collect tax in Vietnam | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Vietnam.\n\nIn Vietnam, Stripe only supports collecting [VAT](https://etaxvn.gdt.gov.vn/nccnn/Request) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Vietnam. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Vietnam have no registration threshold; they must register for VAT purposes from the first sale.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Vietnam to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Vietnam on the [government website](https://etaxvn.gdt.gov.vn/nccnn/Request).\n\nAfter you’ve registered to collect tax in Vietnam, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=vn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Vietnam.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Vietnam. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Vietnam, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Vietnam. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Vietnam | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Vietnam.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/iceland",
  "markdown": "# Collect tax in Iceland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Iceland.\n\nIn Iceland, Stripe Tax supports calculation and collection of [VAT](https://www.skatturinn.is/english/companies/value-added-tax/) for remote sellers. You must have no physical presence in the country to collect this tax on Stripe.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Iceland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register for VAT if their taxable turnover in Iceland exceeds 2,000,000 ISK within any 12-month period, and it requires fiscal representation. Remote sellers who provide electronically supplied services and subscriptions to physical papers and magazines for Icelandic consumers can use a simplified registration procedure (VOES) that doesn’t require fiscal representation. Sales to VAT-registered businesses where the customer pays for the VAT through the reverse charge mechanism don’t count towards the threshold.\n\n**Threshold**: 2,000,000 ISK\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in Iceland on the government website:\n\n*   [Information about VAT in Iceland](https://www.skatturinn.is/english/companies/value-added-tax/)\n*   [Start to register](https://voes.rsk.is/)\n\nAfter you’ve registered to collect tax in Iceland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=is) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Iceland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Iceland.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Iceland. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in Iceland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Iceland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/latin-america/chile",
  "markdown": "# Collect tax in Chile | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Chile.\n\nIn Chile, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Chile. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Chile have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Chile don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Chile to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Chile on the [government website](https://www.sii.cl/vat/).\n\nAfter you’ve registered to collect tax in Chile, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Chile.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Chile. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Chile, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Chile. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Chile | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Chile.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/hungary",
  "markdown": "# Collect tax in Hungary | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Hungary.\n\nHungary is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Hungary. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Hungary on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Hungary.\n\n*   [VAT information and domestic registration](https://nav.gov.hu/en/taxation)\n*   [One-Stop Shop registration schemes](https://nav.gov.hu/en/main-tiles/e_services/System_for_taxpayers_not_established_in_the_EC/The_Mini_One_Stop_Sho20150929)\n\nAfter you’ve registered to collect tax in Hungary, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hu) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Hungary.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHungary applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Hungary. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Hungary | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Hungary.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/latin-america/colombia",
  "markdown": "# Collect tax in Colombia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Colombia.\n\nIn Colombia, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Colombia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Colombia have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Colombia don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Colombia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Colombia on the [government website](https://www.dian.gov.co/Prensa/Aprendelo-en-un-DIAN-X3/Paginas/Paso-a-Paso-Inscripcion-al-RUT.aspx) (Spanish).\n\nAfter you’ve registered to collect tax in Colombia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=co) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Colombia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Colombia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Colombia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Colombia. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Colombia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Colombia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/indonesia",
  "markdown": "# Collect tax in Indonesia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Indonesia.\n\nIn Indonesia, Stripe only supports collecting [VAT for digital goods and services](https://www.pajak.go.id/en/digitaltax). In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Indonesia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Indonesian customers are appointed as VAT collectors when they meet either of the following thresholds:\n\n*   The total value of digital goods and services provided to customers in Indonesia exceeds IDR 600 million in a period of 12 months or IDR 50 million in one calendar month.\n*   Website traffic in Indonesia exceeds 12,000 users in one year or 1,000 users in one month.\n\nRemote sellers who meet the registration thresholds can ask to be appointed a VAT collector and start collecting VAT voluntarily but aren’t obligated to do so.\n\nStripe only monitors the threshold of 50 million IDR per calendar month.\n\n**Threshold**: 50 million IDR\n\n**Time frame**: Calendar month\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Indonesia to collect this tax on Stripe.\n\nFind more information on how to register for VAT as a remote seller in Indonesia on the [government website](https://www.pajak.go.id/en/digitaltax).\n\nAfter you’ve registered to collect tax in Indonesia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=id) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Indonesia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Indonesia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Indonesia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Indonesia. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Indonesia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Indonesia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/croatia",
  "markdown": "# Collect tax in Croatia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Croatia.\n\nCroatia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Croatia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Croatia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Croatia.\n\n*   [Domestic VAT registration](https://e-porezna.porezna-uprava.hr/Prijava.aspx) (Croatian content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/croatia_en)\n\nAfter you’ve registered to collect tax in Croatia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Croatia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCroatia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Croatia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Croatia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Croatia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/italy",
  "markdown": "# Collect tax in Italy | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Italy.\n\nItaly is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Italy. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Italy on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Italy.\n\n*   [General information about VAT registration](https://www.agenziaentrate.gov.it/portale/web/english/vat-registration-in-italy)\n*   [One-Stop Shop registration schemes](https://www.agenziaentrate.gov.it/portale/web/english/vat-oss/import-scheme)\n\nAfter you’ve registered to collect tax in Italy, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=it) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Italy.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nItaly applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Italy, the Vatican City is outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Italy. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Italy. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Italy | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Italy.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/cyprus",
  "markdown": "# Collect tax in Cyprus | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Cyprus.\n\nCyprus is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Cyprus. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Cyprus on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Cyprus.\n\n*   [Domestic VAT registration](https://www.mof.gov.cy/mof/tax/taxdep.nsf/All/88A7B920B681122AC22582510035432D?OpenDocument)\n*   [One-Stop Shop registration schemes](https://www.mof.gov.cy/mof/TAX/taxdep.nsf/taxOSS_en/taxOSS_en?opendocument)\n\nAfter you’ve registered to collect tax in Cyprus, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cy) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Cyprus.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCyprus applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Cyprus. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Cyprus | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Cyprus.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/czechia",
  "markdown": "# Collect tax in Czechia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Czechia.\n\nCzechia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Czechia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Czechia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Czechia.\n\n*   [Domestic VAT registration](https://adisspr.mfcr.cz/pmd/home) (Czech content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/czech-republic_en)\n\nAfter you’ve registered to collect tax in Czechia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Czechia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCzechia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Czechia. Stripe doesn’t file taxes on your behalf. EFor more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Czechia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Czechia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/japan",
  "markdown": "# Collect tax in Japan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Japan.\n\nIn Japan, Stripe Tax supports calculation and collection of [Consumption Tax (CT)](https://www.nta.go.jp/english/taxes/consumption_tax/index.htm).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Japan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register in Japan if:\n\n*   Their taxable sales in Japan exceed the registration threshold of 10 million JPY in the base period.\n*   Their taxable sales or salaries paid exceed 10 million JPY in the specified period.\n\nThe base period refers to:\n\n*   The calendar year two years prior to the current one (for example, the base period for the year of 2021 is 2019). This applies to sole proprietors.\n*   The business year two years prior to the current one. This applies to corporations.\n\nThe specified period refers to the first 6 months of the previous calendar year (for sole proprietors) or the first 6 months of a fiscal year (for corporations).\n\nRegistered remote sellers must have an office located in Japan or have a tax representative in Japan. Remote sellers that provide electronic services to Japanese consumers can use a simplified registration procedure.\n\n**Threshold**: 10 million JPY\n\n**Time frame**: Japanese base period and specified period as defined above.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect Consumption Tax, any business must either have an office located in Japan or have a tax representative in Japan. This also applies to remote sellers of electronic services, however there is a simplified registration process for these businesses.\n\nFind more information on how to register for CT in Japan on the government website:\n\n*   [General information about Consumption Tax in Japan](https://www.nta.go.jp/english/taxes/consumption_tax/01.htm)\n*   [Registration for remote sellers of electronic services](https://www.nta.go.jp/english/taxes/consumption_tax/04.htm)\n\nAfter you’ve registered to collect tax in Japan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=jp) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Japan.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates CT for your transactions in Japan.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Japan. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in Japan | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Japan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/ireland",
  "markdown": "# Collect tax in Ireland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Ireland.\n\nIreland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Ireland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Ireland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Ireland.\n\n*   [Domestic VAT registration](https://www.revenue.ie/en/vat/vat-registration/index.aspx)\n*   [One-Stop Shop registration schemes for EU businesses](https://www.revenue.ie/en/vat/vat-ecommerce/union-scheme/index.aspx)\n*   [One-Stop Shop registration schemes for businesses based outside the EU](https://www.ros.ie/vatoss-web/vatoss.html?execution=e1s1)\n\nAfter you’ve registered to collect tax in Ireland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ie) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Ireland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIreland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Ireland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Ireland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Ireland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/estonia",
  "markdown": "# Collect tax in Estonia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Estonia.\n\nEstonia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Estonia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Estonia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Estonia.\n\n*   [VAT information and domestic registration](https://www.emta.ee/en/business-client/taxes-and-payment/value-added-tax)\n*   [One-Stop Shop registration schemes](https://emta.ee/en/business-client/taxes-and-payment/value-added-tax/special-schemes-e-commerce-and-services)\n\nAfter you’ve registered to collect tax in Estonia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ee) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Estonia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEstonia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Estonia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Estonia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Estonia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/latvia",
  "markdown": "# Collect tax in Latvia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Latvia.\n\nLatvia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Latvia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Latvia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Latvia.\n\n*   [General information and domestic VAT registration](https://www.vid.gov.lv/lv/pievienotas-vertibas-nodoklis) (Latvian content)\n*   [One-Stop Shop registration schemes](https://www.vid.gov.lv/lv/pvn-ipasais-rezims-ossioss) (Latvian content)\n\nAfter you’ve registered to collect tax in Latvia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Latvia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLatvia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Latvia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Latvia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Latvia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/denmark",
  "markdown": "# Collect tax in Denmark | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Denmark.\n\nDenmark is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Denmark. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Denmark on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Denmark.\n\n*   [General information and domestic VAT registration](https://skat.dk/en-us/businesses/vat)\n*   [One-Stop Shop registration schemes](https://skat.dk/en-us/businesses/vat/vat-on-sales-to-private-consumers-in-the-eu/what-is-vat-one-stop-shop)\n\nAfter you’ve registered to collect tax in Denmark, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=dk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Denmark.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDenmark applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Denmark. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Denmark | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Denmark.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/luxembourg",
  "markdown": "# Collect tax in Luxembourg | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Luxembourg.\n\nLuxembourg is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Luxembourg. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Luxembourg on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Luxembourg.\n\n*   [VAT information and domestic registration](https://guichet.public.lu/en/entreprises/creation-developpement/declarations-initiales/tva-impots/inscription-tva.html)\n*   [One-Stop Shop registration schemes](https://pfi.public.lu/fr/professionnel/tva/oss/ossuk.html)\n\nAfter you’ve registered to collect tax in Luxembourg, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lu) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Luxembourg.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLuxembourg applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Luxembourg. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Luxembourg | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Luxembourg.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/lithuania",
  "markdown": "# Collect tax in Lithuania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Lithuania.\n\nLithuania is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Lithuania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Lithuania on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Lithuania.\n\n*   [General information and domestic VAT registration](https://www.vmi.lt/evmi/en/prid%C4%97tin%C4%97s-vert%C4%97s-mokestis3)\n*   [One-Stop Shop registration schemes](https://www.vmi.lt/oss/Page/Home/Default.xhtml;jsessionid=G0ylIvP_SON3lzNx478FRO_kS0wiprHo8Z8_3zxx.oss-f2) (Lithuanian content)\n\nAfter you’ve registered to collect tax in Lithuania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Lithuania.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLithuania applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Lithuania. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Lithuania | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Lithuania.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/malaysia",
  "markdown": "# Collect tax in Malaysia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Malaysia.\n\nIn Malaysia, Stripe only supports collecting the [Service Tax](https://mystods.customs.gov.my/) on digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Malaysia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Malaysian customers must register for Service Tax purposes if the total value of digital goods and services provided to customers in Malaysia within a period of 12 months exceeds 500,000 MYR.\n\n**Threshold**: 500,000 MYR\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Malaysia to collect this tax on Stripe.\n\nFind more information on how to register for Service Tax as a remote seller in Malaysia on the [government website](https://mystods.customs.gov.my/).\n\nAfter you’ve registered to collect tax in Malaysia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=my) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Malaysia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Malaysia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Malaysia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Malaysia. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Malaysia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Malaysia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/netherlands",
  "markdown": "# Collect tax in Netherlands | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Netherlands.\n\nNetherlands is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Netherlands. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Netherlands on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Netherlands.\n\n*   [VAT information and domestic registration](https://www.belastingdienst.nl/wps/wcm/connect/bldcontenten/belastingdienst/business/vat/vat_in_the_netherlands/)\n*   [One-Stop Shop registration schemes](https://www.belastingdienst.nl/wps/wcm/connect/bldcontenten/belastingdienst/business/vat/vat_in_the_netherlands/how-to-declare-vat-for-e-commerce-and-services/how-to-declare-vat-for-e-commerce-and-services)\n\nAfter you’ve registered to collect tax in Netherlands, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=nl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Netherlands.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNetherlands applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Netherlands. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Netherlands | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Netherlands.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/new-zealand",
  "markdown": "# Collect tax in New Zealand\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New Zealand.\n\nIn New Zealand, Stripe Tax supports calculation and collection of [GST](https://www.ird.govt.nz/gst).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Zealand. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers supplying goods or services in New Zealand must register if their taxable turnover from these transactions exceeded 60,000 NZD within the past 12-month period or will exceed this amount in the next 12 months. These rules apply to businesses supplying remote services such as digital content or low-value goods from outside New Zealand to customers who are resident in New Zealand and aren’t registered for GST. Sales to New Zealand GST-registered businesses that are subject to reverse charge don’t count towards the threshold.\n\n**Threshold**: 60,000 NZD\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in New Zealand on the government website:\n\n*   [Register for GST](https://www.ird.govt.nz/gst/registering-for-gst/register-for-gst)\n*   [How GST works for remote sellers](https://www.ird.govt.nz/gst/gst-for-overseas-businesses)\n\nAfter you’ve registered to collect tax in New Zealand, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=nz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Zealand.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in New Zealand.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to New Zealand. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in New Zealand | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Zealand.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/latin-america/mexico",
  "markdown": "# Collect tax in Mexico | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Mexico.\n\nIn Mexico, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Mexican customers must register for VAT purposes within 30 days of the first sale to a customer located in Mexico. There are no registration thresholds or simplified registration procedures. Non-residents must appoint a legal representative and establish a tax domicile in Mexico.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Sales of digital goods or electronically supplied services (digital products)\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Mexico. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Mexico to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Mexico on the [government website](http://omawww.sat.gob.mx/plataformastecnologicas/Paginas/PlataformasTecnologicas_ServiciosDigitales/pt_sd_inicio.html) (Spanish).\n\nAfter you’ve registered to collect tax in Mexico, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=mx) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Mexico.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Mexico. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Mexico, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Mexico. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Mexico | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Mexico.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/portugal",
  "markdown": "# Collect tax in Portugal | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Portugal.\n\nPortugal is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Portugal. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Portugal on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Portugal.\n\n*   [VAT information and registration](https://info.portaldasfinancas.gov.pt/pt/docs/Conteudos_1pagina/Pages/portuguese-tax-system.aspx)\n*   [One-Stop Shop registration schemes](https://www.portaldasfinancas.gov.pt/oss/) (Portugese content)\n\nAfter you’ve registered to collect tax in Portugal, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=pt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Portugal.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPortugal applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Portugal. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Portugal | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Portugal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration/quickstart",
  "markdown": "# Create and send an invoice\n\nSearch the docs or ask a question",
  "title": "Create and send an invoice | Stripe Documentation",
  "description": "Learn how to create and send an invoice with code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/norway",
  "markdown": "# Collect tax in Norway | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Norway.\n\nIn Norway, Stripe Tax supports calculation and collection of [VAT](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Norway. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re based outside Norway, you must register in Norway as soon as your taxable sales in Norway reach 50,000 NOK during a period of 12 months and no reverse charge applies. Businesses located in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") can register directly with the Norwegian tax administration. Businesses located outside the EEA must appoint a Norwegian VAT representative unless they use the simplified registration procedure (VOEC), which is available for B2C sales of digital services and low-value goods (< ​3,000 NOK).\n\nFor example, if you’re based in the US, sell digital services to Norwegian consumers and exceed the threshold during a period of 12 months (from February of the past year to January of the current year), you must register in Norway. However, if you sell digital services only to Norwegian businesses, you don’t need to register because these services are subject to reverse charge.\n\n**Threshold**: 50,000 NOK\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in Norway on the government website:\n\n*   [General information about VAT in Norway](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/)\n*   [How to register](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/register-change-delete/)\n\nAfter you’ve registered to collect tax in Norway, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=no) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Norway.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Norway.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\nIn Norway, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Norway. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Jan Mayen\n*   Svalbard\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Norway. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in Norway | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Norway.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/poland",
  "markdown": "# Collect tax in Poland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Poland.\n\nPoland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Poland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Poland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Poland.\n\n*   [Domestic VAT registration](https://www.podatki.gov.pl/en/value-added-tax/registering-for-vat/)\n*   [One-Stop Shop registration schemes](https://www.podatki.gov.pl/vat/abc-vat/procedury/punkt-kompleksowej-obslugi-oss-i-ioss/) (Polish content)\n\nAfter you’ve registered to collect tax in Poland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=pl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Poland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPoland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Poland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Poland | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Poland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/quickstart-guide",
  "markdown": "# No-code quickstart guide | Stripe DocumentationThe Stripe Docs logo\n\n## Get started with Stripe Invoicing—no code required.\n\nStripe Invoicing can help you get paid and save time using the Dashboard. Automatically charge your customer’s payment method on file, or email them the [invoice](https://docs.stripe.com/api/invoices \"invoices\") with or without a link to a payment page. You can also send the invoice or payment page link manually.\n\n#### Note\n\nIf you’re interested in managing subscriptions and recurring revenue, see [Subscriptions](https://docs.stripe.com/billing).\n\n![Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-guide.df3cc5a1e4180c338269aacdfa792180.png)\n\nHosted Invoice Page\n\n![Invoice PDF](https://b.stripecdn.com/docs-statics-srv/assets/invoice-pdf-guide.d79c407ca08ee4b14dc0519fb3772309.png)\n\nInvoice PDF\n\n[](#payment-methods)\n\nBy default, customers can pay invoices with any of the payment methods that you enable in your [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). If you’re a first-time user, Stripe automatically enables card, [Link](https://docs.stripe.com/payments/link), bank transfers, Cash App Pay, and WeChat Pay payment methods. To enable additional payment methods, you need to activate them in your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nIn some situations, there might be restrictions that prevent payment methods from being used for an invoice. For instance, a payment method might only operate in one currency, or have limitations on the amount that can be paid. Stripe doesn’t automatically select a payment method when these limitations prevent it from being used. To learn more, see [Payment methods](https://docs.stripe.com/invoicing/payment-methods#supported).\n\n![Choose additional payment methods](https://b.stripecdn.com/docs-statics-srv/assets/supported-payment-methods.194614192ca2c72656bc0587e8e21f46.png)\n\nChoose additional payment methods\n\n[](#get-paid)\n\nYou can [create and send](https://dashboard.stripe.com/invoices/create) an invoice from the Dashboard. Invoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can also use them as a tool to collect payment. Learn more about [using the Dashboard](https://docs.stripe.com/invoicing/dashboard).\n\n![Create and send an invoice](https://b.stripecdn.com/docs-statics-srv/assets/create-send-invoices.985a3078348be3c2591f8d5e2d96e21c.png)\n\nCreate and send an invoice\n\n[](#custom-templates)\n\nYou can use the [Invoice template](https://dashboard.stripe.com/account/billing/invoice) to customize ​​the content of your invoices. Set a default memo, footer, numbering scheme, and determine your default payment terms. Because you know more about your customers and your business than Stripe does, make sure your invoices include all of the required information. See the full invoice customization guide at [Customize invoices](https://docs.stripe.com/invoicing/customize).\n\n![Configure the Invoice template](https://b.stripecdn.com/docs-statics-srv/assets/invoice-template.d50c4ba2210f06442b6adbb7279fe7a4.png)\n\nConfigure the Invoice template\n\n![Manage tax information](https://b.stripecdn.com/docs-statics-srv/assets/manage-tax-information.3bbd3b8425726dc4ac243bb5bfd707a3.png)\n\nManage tax information\n\n[](#track-invoice)\n\nInvoices move through different statuses from the time they’re created to when they’re paid. You can track the status of an invoice on the [Invoices page](https://dashboard.stripe.com/test/invoices). To let your customer know that the due date for an invoice is approaching, [send them an email reminder](https://docs.stripe.com/invoicing/send-email). For more information on tracking your invoices, see [Manage invoices](https://docs.stripe.com/invoicing/dashboard/manage-invoices).\n\n![Track and manage your invoices](https://b.stripecdn.com/docs-statics-srv/assets/track-invoices.647ee840cc77e53c4d8537ec43ba9289.png)\n\nTrack and manage your invoices\n\n[](#invoicing-plus)\n\nInvoicing Plus includes advanced features to automate how you collect and reconcile invoice payments.\n\n#### Note\n\nAre you interested in automatic collection and reconciliation features? Upgrade to [Invoicing Plus](https://stripe.com/invoicing/pricing).\n\n### Automate invoicing and get paid faster ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can automate Stripe Invoicing and get paid faster by choosing to [automatically charge](https://docs.stripe.com/invoicing/automatic-charging) your customer’s payment method on file. If you’re a Plus user, let Stripe handle [invoice recovery](https://docs.stripe.com/invoicing/automatic-collection) issues.\n\n![Automate invoicing](https://b.stripecdn.com/docs-statics-srv/assets/advanced-invoicing-features.70dfe42ac952e7924876201c06e5902d.png)\n\nAutomate invoicing\n\n### Close your books and account for revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing [automatic reconciliation](https://docs.stripe.com/invoicing/automatic-reconciliation) means that you don’t need to expose your sensitive bank account details to users or manually reconcile open invoices with your bank. With auto-reconciliation for invoices, Stripe can:\n\n*   Match incoming payments with invoice amounts.\n*   Manage overpayment or underpayment, when the amount paid doesn’t match the invoice.\n*   Reduce the number of API calls required to transfer funds into Stripe.\n*   Manage payment retries on open invoices.\n\n![Close your books](https://b.stripecdn.com/docs-statics-srv/assets/invoicing-auto-reconciliation.2d4b2648e4b67e8b2a2c7225a22bec69.png)\n\nClose your books\n\n[](#customer-portal)\n\nShare a link to your [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\"), where customers can log in with their email to manage invoices, view invoice history, update payment information, and so on. Learn how to create and share your [customer portal link](https://docs.stripe.com/customer-management/activate-no-code-customer-portal).",
  "title": "No-code quickstart guide | Stripe Documentation",
  "description": "Get started with Stripe Invoicing—no code required.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/saudi-arabia",
  "markdown": "# Collect tax in Saudi Arabia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Saudi Arabia.\n\nIn Saudi Arabia, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Saudi Arabia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Saudi Arabia have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Saudi Arabia don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Saudi Arabia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Saudi Arabia on the [government website](https://zatca.gov.sa/en/eServices/Pages/eServices_001.aspx).\n\nAfter you’ve registered to collect tax in Saudi Arabia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Saudi Arabia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Saudi Arabia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Saudi Arabia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Saudi Arabia. Stripe doesn’t file taxes on your behalf.",
  "title": "Collect tax in Saudi Arabia | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Saudi Arabia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/romania",
  "markdown": "# Collect tax in Romania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Romania.\n\nRomania is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Romania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Romania on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Romania.\n\n*   [Tax information](https://www.anaf.ro/anaf/internet/ANAF/acasa/) (Romanian content)\n*   [One-Stop Shop registration schemes](https://www.anaf.ro/anaf/internet/ANAF/servicii_online/one_stop_shop/) (Romanian content)\n\nAfter you’ve registered to collect tax in Romania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ro) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Romania.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRomania applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Romania. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Romania | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Romania.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/european-union/malta",
  "markdown": "# Collect tax in Malta | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Malta.\n\nMalta is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Malta. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Malta on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Malta.\n\n*   [General information and domestic VAT registration](https://cfr.gov.mt/en/faqs/Pages/VAT/VAT-FAQs.aspx)\n*   [One-Stop Shop registration schemes](https://cfr.gov.mt/en/eServices/Pages/OSS.aspx)\n\nAfter you’ve registered to collect tax in Malta, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=mt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Malta.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMalta applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Malta. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "Collect tax in Malta | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Malta.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/singapore",
  "markdown": "# Collect tax in Singapore | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Singapore.\n\nIn Singapore, Stripe Tax supports calculation and collection of [GST](https://www.iras.gov.sg/taxes/goods-services-tax-(gst)).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Singapore. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register for GST if the Singaporean taxable turnover exceeded 1 million SGD in the past 12 months (retrospective basis) or is likely to exceed 1 million SGD in the next 12 months (prospective basis).\n\nA special registration rule applies to remote sellers of digital services. As of Jan 1, 2020, non-resident suppliers must register under the Overseas Vendor Registration regime if in a calendar year:\n\n1.  They have a global turnover exceeding 1 million SGD.\n2.  They make B2C supplies of digital services to customers in Singapore exceeding 100,000 SGD. Global turnover refers to all supplies made that would be taxable supplies if made in Singapore.\n\nStripe only monitors the 100,000 SGD threshold of the Overseas Vendor Registration.\n\n### Domestic Registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Threshold**: 1 million SGD\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n### Overseas Vendor Registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Threshold**: 100,000 SGD and 1 million SGD (global turnover)\n\n**Time frame**: Calendar year.\n\n**Included transactions**: For the 100,000 SGD threshold, any taxable transactions that:\n\n*   Is either a digital good or an electronically supplied service\n*   Is a B2C transaction\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in Singapore on the government website:\n\n*   [Information about GST](https://www.iras.gov.sg/taxes/goods-services-tax-(gst))\n*   [How to register](https://www.iras.gov.sg/taxes/goods-services-tax-(gst)/gst-registration-deregistration/applying-for-gst-registration)\n\nAfter you’ve registered to collect tax in Singapore, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Singapore.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in Singapore.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Singapore. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
  "title": "Collect tax in Singapore | Stripe Documentation",
  "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Singapore.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration-overview",
  "markdown": "# Integrate with Invoicing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create and send invoices.\n\nNo-code or code\n\nStripe-hosted [invoices](https://docs.stripe.com/api/invoices \"invoices\") are commonly created and sent from the Dashboard with no code required. For more advanced billing setups, or to automate invoicing, use our Invoicing API.\n\n[](https://dashboard.stripe.com/test/invoices)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoicing-hero.096c89608f5466609f9ce07529a4d502.png)\n\n## Use the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Integrate with the Invoicing API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Integrate with Invoicing | Stripe Documentation",
  "description": "Learn how to create and send invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/features",
  "markdown": "# Invoicing features | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register/invoicing)\n\nor\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Finvoicing%2Ffeatures)\n\n[](https://docs.stripe.com/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register/invoicing)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Finvoicing%2Ffeatures)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[\n\nNo-code\n\n\n\n](https://docs.stripe.com/no-code)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[Overview](https://docs.stripe.com/finance-automation)\n\nBilling\n\n[Overview](https://docs.stripe.com/billing)\n\n[About the Billing APIs](https://docs.stripe.com/billing/billing-apis)\n\n[Subscriptions](https://docs.stripe.com/subscriptions)\n\n[Invoicing](https://docs.stripe.com/invoicing \"Create and manage invoices for one-time payments\")\n\n[Overview](https://docs.stripe.com/invoicing/overview \"Learn how Stripe Invoicing works\")\n\n[API quickstart](https://docs.stripe.com/invoicing/integration/quickstart \"Learn how to create and send an invoice with code\")\n\n[Invoicing without code](https://docs.stripe.com/invoicing/quickstart-guide)\n\n[Build your integration](https://docs.stripe.com/invoicing/integration-overview \"Learn how to create and send invoices\")\n\nInvoicing features\n\n[Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Learn about Invoicing workflow transitions\")\n\n[Customize invoices](https://docs.stripe.com/invoicing/customize \"Learn how to customize invoices\")\n\n[Products and prices](https://docs.stripe.com/invoicing/products-prices \"Create and use products and prices\")\n\n[Group invoice line items](https://docs.stripe.com/invoicing/group-line-items \"Organize line items into groups on an invoice\")\n\n[Summarize line items](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items on an invoice\")\n\n[Manage bulk invoice line items](https://docs.stripe.com/invoicing/bulk-update-line-item \"Create, update, and delete multiple line items of an invoice at once\")\n\n[Preview an invoice](https://docs.stripe.com/invoicing/preview \"Create a preview of an invoice.\")\n\n[Edit invoices](https://docs.stripe.com/invoicing/invoice-edits \"Learn how to edit invoices\")\n\n[Send customer emails](https://docs.stripe.com/invoicing/send-email \"Send customer emails with or without code\")\n\n[Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page \"Use the Hosted Invoice Page\")\n\n[Generate credit notes](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Refund finalized invoices with credit notes\")\n\n[Global invoicing](https://docs.stripe.com/invoicing/global-invoicing \"Best practices for setting up invoices in different regions\")\n\n[Taxes](https://docs.stripe.com/invoicing/taxes \"Automatically collect sales tax, VAT, and GST\")\n\nInvoice payments\n\n[Create Invoice Payment Plans](https://docs.stripe.com/invoicing/payment-plans \"Learn how to create Invoice Payment Plans\")\n\n[Payment methods for invoices](https://docs.stripe.com/invoicing/payment-methods \"Supported payment methods for invoices\")\n\n[Automated collections](https://docs.stripe.com/invoicing/automated-collections)\n\nInvoice customers\n\n[Customers](https://docs.stripe.com/invoicing/customer \"Customers and Stripe Invoicing\")\n\n[Customer credit balance](https://docs.stripe.com/invoicing/customer/balance \"Use the customer credit balance\")\n\n[Customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids \"Store, validate, and render customer tax ID numbers\")\n\n[Usage-based Billing](https://docs.stripe.com/billing/subscriptions/usage-based)\n\n[Connect and Billing](https://docs.stripe.com/billing/multi-entity-business)\n\n[Tax and Billing](https://docs.stripe.com/billing/taxes)\n\n[Quotes](https://docs.stripe.com/quotes \"Learn about quotes\")\n\n[Revenue recovery](https://docs.stripe.com/billing/revenue-recovery \"Learn about automated revenue recovery features for subscriptions\")\n\n[Automations](https://docs.stripe.com/billing/automations)\n\n[Revenue recognition](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing \"Use Revenue Recognition with subscriptions\")\n\n[Customer management](https://docs.stripe.com/customer-management \"Learn how to enable self-serve customer management\")\n\n[Entitlements](https://docs.stripe.com/billing/entitlements \"Determine when you can grant your customers access to your product's features and when to revoke access.\")\n\n[Test your integration](https://docs.stripe.com/billing/testing \"Test your billing integration\")\n\nTax\n\nReporting\n\nData\n\nStartup incorporation\n\n[Home](https://docs.stripe.com/ \"Home\")[Finance automation](https://docs.stripe.com/finance-automation \"Finance automation\")[Billing](https://docs.stripe.com/billing \"Billing\")[Invoicing](https://docs.stripe.com/invoicing \"Invoicing\")\n\n## Explore invoicing features in depth.\n\n## Core capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[\n\nLearn about Invoicing workflow transitions\n\n](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[Customize invoices](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[\n\nLearn how to customize invoices\n\n](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[Products and prices](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[\n\nCreate and use products and prices\n\n](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[Group invoice line items](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[\n\nOrganize line items into groups on an invoice\n\n](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[Summarize line items](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[\n\nSummarize line items on an invoice\n\n](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[Manage bulk invoice line items](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[\n\nCreate, update, and delete multiple line items of an invoice at once\n\n](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[Preview an invoice](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[\n\nCreate a preview of an invoice.\n\n](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[Edit invoices](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[\n\nLearn how to edit invoices\n\n](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[Send customer emails](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[\n\nSend customer emails with or without code\n\n](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[\n\nUse the Hosted Invoice Page\n\n](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[Scheduled payments](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[\n\nThe Hosted Invoice Page and scheduled payments\n\n](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n[Generate credit notes](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n[\n\nRefund finalized invoices with credit notes\n\n](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n## Global invoicing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[Global invoicing](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[\n\nBest practices for setting up invoices in different regions\n\n](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[Set up invoices in Europe](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[\n\nLearn the best practices for setting up invoices in Europe\n\n](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[Set up invoices in Japan](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[\n\nLearn the best practices for setting up invoices in Japan\n\n](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[Multi-currency customers](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[\n\nChange the billable currency for any customer\n\n](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[India e-Mandates](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[\n\nLearn how to integrate India e-Mandates\n\n](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n[Customize the IBAN country](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n[\n\nBank transfers and customizing the IBAN country\n\n](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n## Taxes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[Taxes](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[\n\nAutomatically collect sales tax, VAT, and GST\n\n](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[Account tax IDs](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[\n\nStore and render tax ID numbers\n\n](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[Tax rates and IDs](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[\n\nAssign tax rates to draft invoices\n\n](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n[Manual tax amounts](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n[\n\nUse tax amounts calculated outside of Stripe with Stripe Billing\n\n](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n## Invoice payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[Create Invoice Payment Plans](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[\n\nLearn how to create Invoice Payment Plans\n\n](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[Payment methods for invoices](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[\n\nSupported payment methods for invoices\n\n](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[ACH Direct Debit](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[\n\nConfigure, create, and process invoices to use ACH Direct Debit\n\n](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[Bank transfer](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[\n\nPay invoices by transferring funds to a bank account\n\n](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[Automated collections](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[\n\nAutomatic invoice advancement\n\n](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[Automatic invoice advancement](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[\n\nLearn about automatic advancement and collection.\n\n](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[Automatic reconciliation](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[\n\nUnderstand cash reconciliation\n\n](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[Automatic collection](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[\n\nAutomatically collect payment from your customers\n\n](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n[Automatic charging](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n[\n\nStripe’s automatic collection and dunning features.\n\n](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n## Invoice customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[Customers](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[\n\nCustomers and Stripe Invoicing\n\n](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[Customer credit balance](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[\n\nUse the customer credit balance\n\n](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\n[Customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\n[\n\nStore, validate, and render customer tax ID numbers\n\n](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).\n\nOn this page\n\n[Core capabilities](#core-capabilities \"Core capabilities \")\n\n[Global invoicing](#global-invoicing \"Global invoicing \")\n\n[Taxes](#taxes \"Taxes \")\n\n[Invoice payments](#invoice-payments \"Invoice payments \")\n\n[Invoice customers](#invoice-customers \"Invoice customers \")\n\nRelated Guides\n\n[\n\nHow Invoicing Works\n\n\n\n](https://docs.stripe.com/invoicing/overview)\n\n[\n\nUse the Dashboard\n\n\n\n](https://docs.stripe.com/invoicing/dashboard)\n\n[\n\nIntegrate with the API\n\n\n\n](https://docs.stripe.com/invoicing/integration)\n\nProducts Used\n\n[\n\nInvoicing\n\n\n\n](https://docs.stripe.com/invoicing)",
  "title": "Invoicing features | Stripe Documentation",
  "description": "Explore invoicing features in depth.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/line-item-grouping",
  "markdown": "# Invoice summary items | Stripe DocumentationThe Stripe Docs logo\n\nFor an existing draft invoice, create an invoice summary item as described below. The summary item represents a group that you can assign line items to, and the `description` field of the summary item renders as the group header for these line items.\n\nBy default, Stripe renders all the line items assigned to the summary item. You can also hide all line items assigned to the summary item and only display the group header by setting `display_items=none` as a parameter on the summary item. If you set `display_items=none`, it hides all line items assigned to the summary item. It is not possible to selectively hide some line items but not others, except for line items with a value of 0 USD (see **Hide individual $0 line items** section).\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/summary_items \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d description=\"Summary item 1\" \\   -d display_items=\"none\"`\n\nInstead of creating the summary items one-by-one, you can also bulk create with the [create](https://docs.stripe.com/api/invoices/create) or [update](https://docs.stripe.com/api/invoices/update) invoice endpoints. The example code below creates a draft invoice with two empty summary items\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"rendering[summary_items_data][0][description]\"=\"Summary item 1\" \\   -d \"rendering[summary_items_data][0][display_items]\"=\"none\" \\   -d \"rendering[summary_items_data][1][description]\"=\"Summary item 2\" \\   -d \"expand[]\"=\"rendering.summary_items\"`\n\nRemember to expand `rendering.summary_items` so you can see the list of summary items in the response.",
  "title": "Invoice summary items | Stripe Documentation",
  "description": "Learn how to use the Invoicing APIs to summarize and hide invoice line items.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/bulk-update-line-item",
  "markdown": "# Manage bulk invoice line items\n\n## Manage bulk invoice line itemsBeta\n\n## Add, update and remove multiple invoice line items with the Invoices API.\n\nYou can edit multiple line items on an invoice by bulk adding, updating, and removing line items with the [Invoices API](https://docs.stripe.com/api/invoices).\n\n[](#add-line-items)\n\nTo create multiple line items on the same invoice, reference the [invoice ID](https://docs.stripe.com/api/invoices/object#invoice_object-). You can also assign a preexisting unassigned invoice item with the [invoice item ID](https://docs.stripe.com/api/invoiceitems/object#invoiceitem_object-). Here’s how to create two new line items and assign an existing invoice item to this invoice.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/add_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][amount]\"=7500 \\   -d \"lines[0][currency]\"=\"usd\" \\   -d \"lines[1][price]\"={{PRICE_ID}} \\   -d \"lines[1][description]\"=\"New line item\" \\   -d \"lines[2][invoice_item]\"={{INVOICE_ITEM_1}}`\n\n#### Common mistake\n\nEnsure that you are using the invoice item ID, using a line item ID here will result in an error.\n\n[](#update-lines)\n\nFrom here, you can update multiple line items on the same invoice based on the invoice ID and line item IDs like the following:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/update_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][description]\"=\"New description\" \\   -d \"lines[0][metadata][key]\"=\"new value\" \\   -d \"lines[1][id]\"={{LINE_ITEM_2}} \\   -d \"lines[1][price]\"={{PRICE_ID}} \\   -d \"lines[2][id]\"={{LINE_ITEM_3}} \\   -d \"lines[2][discountable]\"=true`\n\nThe example above updates the description and metadata for line item 1, the price for line item 2, and whether it’s discountable for line item 3.\n\n[](#remove-lineitems)\n\nYou can delete or unassign multiple line items on the same invoice by referencing the invoice ID and line item IDs and distinguishing between different removal types with the `behavior` key. Here’s how to permanently delete `LINE_ITEM_1` and unassign `LINE_ITEM_2`. You can reassign `LINE_ITEM_2` to another invoice in another request.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/remove_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][behavior]\"=\"delete\" \\   -d \"lines[1][id]\"={{LINE_ITEM_2}} \\   -d \"lines[1][behavior]\"=\"unassign\"`\n\n[](#restrictions)\n\nThere are some restrictions when using this feature\n\n*   The invoice must still be in a draft state\n*   There are two [types of invoice line items](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type)\n    1.  `type: invoiceitem`: Generated when an [invoice item](https://docs.stripe.com/api/invoiceitems) is added to an invoice.\n    2.  `type: subscription`: Automatically generated for a subscription invoice from each subscription item. This is the [full list of fields that are available](https://docs.stripe.com/api/invoices/update_lines#bulk_update_lines-lines) to update for each line item. While all fields are supported for `invoiceitem` line items, you can only update a small subset for `subscription` line items. Fields that are supported for `subscription` line items are `tax_rates`, or `discounts`.\n*   You can update a maximum of 50 line items in one API call. This limit is subject to change and might increase or decrease.\n\n[](#invoice-metadata)\n\nYou can set invoice metadata in the same request for any of the above endpoints. Here’s an example calling [update\\_lines](https://docs.stripe.com/api/invoices).\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/update_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][description]\"=\"New description\" \\   -d \"lines[1][id]\"={{LINE_ITEM_1}} \\   -d \"lines[2][description]\"=\"Another description\" \\   -d \"invoice_metadata[is_processed]\"=\"true\"`",
  "title": "Manage bulk invoice line items | Stripe Documentation",
  "description": "Add, update and remove multiple invoice line items with the Invoices API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/group-line-items",
  "markdown": "# Group invoice line items | Stripe DocumentationThe Stripe Docs logo\n\n### Create an invoice rendering template![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Go to **Settings > Invoice template** in the Stripe Dashboard.\n2.  In the **Templates** section, click **\\+ Create template**.\n3.  Name your template. You use the template name when you apply the template to a subscription or a one-time invoice.\n\n### Add a policy to the template![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create the template, add a line item grouping policy to it. You write these policies in CEL, which allows Stripe to dynamically filter and group line items.\n\n#### Best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create a template, keep in mind:\n\n*   The order of the policies matter. For example, if the first policy picks up all the line items that satisfy the filter condition, the second policy picks up all the remaining line items that aren’t yet in a group after the first policy.\n*   `expand()` is a Stripe-specific macro to expand fields on the API object. See the Stripe-specific CEL expression macros section.\n\n#### Write a CEL expression![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvoice template CEL expressions take an invoice [line item object](https://docs.stripe.com/api/invoices/line_item) as the input. You can use any of that object’s fields in an expression. For example:\n\n`line_item.field_name line_item.description`\n\nYou can expand ID fields that point to other Stripe objects, like a [subscription](https://docs.stripe.com/api/subscriptions/object) or [subscription\\_item](https://docs.stripe.com/api/subscription_items/object), with the `expand()` function. For example, to access a subscription’s metadata:\n\n`line_item.subscription.expand().metadata`\n\n#### Common mistake\n\nYou can only expand one level deep. For example, you can’t expand a subscription’s payment method and type fields. This is not currently supported: `line_item.subscription.expand().default_payment_method.expand().type`\n\n##### Stripe-specific CEL expression macros![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the list of standard CEL expression macros, we currently support these Stripe-specific functions:\n\n*   `expand()`: Expands publicly user expandable API fields. For example, in a CEL expression, `line_item.invoice_item` returns the invoice item ID. With `line_item.invoice_item.expand()`, it returns the full invoice item object.\n\n#### Line item grouping fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA line item grouping has three fields:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| **Group by** | CEL Expression `<line_item => string>` | Controls the grouping of line items. It’s evaluated against each line item on the invoice that hasn’t been filtered out and returns a string. Line items with the same result string are grouped together under a summary item, where the result string becomes the description of the summary item.<br><br>For example, if you want to group together static line item names, like “PO Number”, the CEL expression would be `PO Number`.<br><br>If you want to dynamically group line items using “PO” from a line item’s metadata, the CEL expression would be:<br><br>`'PO Number' + line_item.invoice_item.expand().metadata['PO']`<br><br>With this expression, a line item with `metadata['PO'] = 123` evaluates to “PO Number: 123”. If multiple line items evaluate to the exact same string, they’re grouped together under a summary item where the description is “PO Number: 123”. |\n| **Filter by** | CEL Expression `<line_item => boolean>` | Filters line items in a policy. This expression is evaluated against each invoice line item on the invoice. If a given invoice line item matches the filter, it’s added to the invoice line item group defined for this policy.<br><br>For example, if you want to group line items that have a PO number, use `has(line_item.invoice_item.expand().metadata.PO)`. If the line item’s invoice item resource has a metadata field of `PO`, the expression returns `true`. Otherwise, it returns `false`. |\n| **Hide line items** | Toggle | Controls whether to collapse or expand the summary items formed from an invoice line item grouping policy. Summary items are expanded by default. |\n\n### Apply the invoice rendering template to a one-time invoice or subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use the invoice line item grouping policy, apply the template to an invoice or a subscription.\n\nUse the [invoice editor](https://dashboard.stripe.com/invoices/create) in the Stripe Dashboard to apply invoice rendering templates to new and draft invoices.\n\nUse the [subscription editor](https://dashboard.stripe.com/subscriptions?create=subscription) in the Stripe Dashboard to apply the invoice rendering template to a subscription. All future invoices generated from that subscription use the invoice line item grouping policies of that rendering template. You can apply the template draft to subscription invoices. You can’t apply the template to finalized invoices.\n\nLearn more about [invoice transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions).",
  "title": "Group invoice line items | Stripe Documentation",
  "description": "Dynamically filter and group invoice line items.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/products-prices",
  "markdown": "# Products and prices | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Invoicing API to manage products and prices.\n\nDefine all your business and product offerings in one place. [Products](https://docs.stripe.com/api/products \"Products\") define what you sell and [Prices](https://docs.stripe.com/api/prices \"Prices\") track how much and how often to charge. This is a core entity within Stripe that works with [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and [Checkout](https://docs.stripe.com/payments/checkout).\n\nPrices enable these use cases:\n\n*   A software provider that charges a one-time setup fee whenever a user creates a new subscription.\n*   An e-commerce store that sends a recurring box of goods for 10 USD per month and wants to allow customers to purchase one-time add-ons.\n*   A professional services firm that can now create a standard list of services and choose from that list per invoice instead of typing out each line item by hand.\n*   A non-profit organization that allows donors to define a custom recurring donation amount per customer.\n\nYou can manage your product catalog with products and prices. Products define what you sell and prices track how much and how often to charge. Manage your products and their prices in the Dashboard or through the API.\n\nIf you used the Dashboard in test mode to set up your business, you can copy each of your products over to live mode by using **Copy to live mode** in the [Product catalog page](https://dashboard.stripe.com/products). Use our official libraries to access the Stripe API from your application.\n\n1.  Navigate to the **Product catalog** page, and click **Add product**.\n    \n2.  Select whether you want to create a **One-time product**, or a **Recurring one-time product**.\n    \n3.  Give your product a name, and assign it a price.",
  "title": "Products and prices | Stripe Documentation",
  "description": "Use the Invoicing API to manage products and prices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/preview",
  "markdown": "# Preview an invoice | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create a preview of an invoice.\n\nYou can create a preview of an invoice for your customer while they’re considering a purchase. [Create a preview](https://docs.stripe.com/api/invoices/create_preview) to calculate the total invoice amount, retrieve each invoice line, and include any relevant taxes or discounts. Creating a preview allows you to show the total payment amount to your customer without the need to create an invoice.\n\nFor example, if you operate a company that provides repair services to businesses, you might present your customers with multiple items that each have different prices and billing schedules:\n\n*   Item 1: 299 USD one-time service fee\n*   Item 2: 29 USD repair material A\n*   Item 3: 99 USD repair material B\n*   Item 4: 49 USD per month support plan\n\nCustomers might want to know how much different combinations of your goods and services cost. If they intend to purchase items 1 and 3 while applying the `WINTERSALE` promo code for 15% off, run the following API call:\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"invoice_items[0][price]\"=price_item_1 \\  -d \"invoice_items[0][quantity]\"=1 \\  -d \"invoice_items[1][price]\"=price_item_3 \\  -d \"invoice_items[1][quantity]\"=1 \\  -d \"discounts[0][promotion_code]\"=promo_WINTERSALE`\n\nStripe returns an [invoice](https://docs.stripe.com/api/invoices/object) preview with each of the lines, with the discount applied, and the total amount:\n\n`{   \"id\": \"upcoming_in_1OujwkClCIKljWvsq5v2ICAN\",   \"object\": \"invoice\",   \"account_country\": \"US\",   \"account_name\": \"Stripe Docs\",   \"account_tax_ids\": null,   \"amount_due\": 39800,   \"amount_paid\": 0,   \"amount_remaining\": 39800,   \"amount_shipping\": 0,`\n\nAdditionally, the resulting invoice preview can be retrieved via the [`/v1/invoices/:id`](https://docs.stripe.com/api/invoices/retrieve) endpoint for the following 72 hours:\n\n`curl https://api.stripe.com/v1/invoices/upcoming_in_1OujwkClCIKljWvsq5v2ICAN \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Include Stripe Tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo preview tax amounts from Stripe Tax, set `automatic_tax[enabled] = true` and pass the customer’s address in `customer_details[address]`:\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\  -d \"customer_details[address][city]\"=Seattle \\  -d \"customer_details[address][state]\"=WA \\  -d \"customer_details[address][postal_code]\"=98104 \\  -d \"customer_details[address][country]\"=US \\  -d \"automatic_tax[enabled]\"=true \\  -d \"invoice_items[0][price]\"=price_item_1 \\  -d \"invoice_items[0][quantity]\"=1 \\  -d \"invoice_items[1][price]\"=price_item_3 \\  -d \"invoice_items[1][quantity]\"=1 \\  -d \"discounts[0][promotion_code]\"=promo_WINTERSALE`\n\n### Preview invoices with subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo preview the first invoice with a recurring price, use the [subscription\\_details.items](https://docs.stripe.com/api/invoices/create_preview#create_create_preview-subscription_details-items) parameter:\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"subscription_details[items][0][price]\"=price_recurring_4 \\  -d \"subscription_details[items][0][quantity]\"=1 \\  -d \"invoice_items[0][price]\"=price_item_1 \\  -d \"invoice_items[0][quantity]\"=1 \\  -d \"invoice_items[1][price]\"=price_item_3 \\  -d \"invoice_items[1][quantity]\"=1 \\  -d \"discounts[0][promotion_code]\"=promo_WINTERSALE`\n\nTo preview changes to an existing subscription, provide the [subscription or subscription schedule ID](https://docs.stripe.com/billing/subscriptions/subscription-schedules#preview-an-invoice).\n\n### Preview the recurring charges only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour customer might want a recurring subscription along with one-time items, or temporary credits or discounts to use with their purchase. If they want to know what the recurring charges are after any adjustments, use the [preview\\_mode](https://docs.stripe.com/api/invoices/create_preview#create_create_preview-preview_mode) parameter to offer them a preview of the total.\n\nFor example, if `WINTERSALE` is a one-time 15% discount and the customer wants to purchase items 1, 3, and 4, you can retrieve the recurring charge amount with this API call:\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d preview_mode=recurring \\  -d \"subscription_details[items][0][price]\"=price_recurring_4 \\  -d \"subscription_details[items][0][quantity]\"=1 \\  -d \"invoice_items[0][price]\"=price_item_1 \\  -d \"invoice_items[0][quantity]\"=1 \\  -d \"invoice_items[1][price]\"=price_item_3 \\  -d \"invoice_items[1][quantity]\"=1 \\  -d \"discounts[0][promotion_code]\"=promo_WINTERSALE`\n\nThe resulting invoice only contains the 49 USD per month support plan with no discounts. Similarly, you can combine `preview_mode` with `subscription` or `subscription_schedule` to display the expected recurring charge, excluding one-off items and discounts.\n\nFor invoices with more than 10 lines, you can [retrieve a paginated view of the lines](https://docs.stripe.com/api/invoices/invoice_lines):\n\n`curl https://api.stripe.com/v1/invoices/upcoming_in_1OujwkClCIKljWvsq5v2ICAN/lines \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`",
  "title": "Preview an invoice | Stripe Documentation",
  "description": "Learn how to create a preview of an invoice.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/invoice-edits",
  "markdown": "# Edit invoices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to edit invoices after finalization.\n\nStripe lets you revise a finalized invoice in `open` or `uncollectible` status. You can’t, however, revise an invoice in `void` or `paid` status. You might want to revise an invoice if you need to:\n\n*   Edit the invoice description.\n*   Edit the customer to update contact information.\n*   Add, remove, or edit a line item.\n*   Add a discount or apply taxes.\n\nYou can also [customize invoices](https://docs.stripe.com/invoicing/customize) if you need to change their content or branding.\n\n#### Note\n\nThe invoice compliance process can vary across countries. For example, if you’re based in the European Union, you might want to void an invoice and issue a credit note instead of revising the original invoice. Learn how to set up invoices in Europe using our [best practices guide](https://docs.stripe.com/invoicing/global-config-guide). Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\nYou can use the [Dashboard](https://dashboard.stripe.com/test/dashboard) to revise invoices after finalization. Learn how to revise an invoice and notify your customer, update their email address, change the payment collection method, and so on.\n\n[](#revision-notification)\n\nTo revise an invoice and notify your customer, complete the following steps:\n\n1.  Go to the **Invoice details** page and click **Edit invoice**. This opens up the **Invoice Editor** and creates a new draft invoice. (If you stop in the middle of a revision, you can come back later to continue editing the draft.) You’ll see a notice at the top of the editor that references the last sent invoice.\n    \n    #### Note\n    \n    You can also go to the [Invoices page](https://dashboard.stripe.com/test/invoices), click the overflow menu (), then **Edit invoice**.\n    \n2.  In the editor, update the field you want to revise. While all of the invoice fields are revisable, you can’t switch the customer or modify the product.\n    \n3.  Click **Review invoice**, and decide whether you want to notify the customer by email.\n    \n    ![Notify your about an updated invoice](https://b.stripecdn.com/docs-statics-srv/assets/invoice-revisions-notify-customer.68b421b920fc5e85f06d8a4acfbcc3ec.png)\n    \n    Notify your customer about an updated invoice\n    \n4.  When you click **Update invoice**, Stripe finalizes the new invoice and voids the old one. The editor closes and redirects you to the details page for the new invoice. The embedded timeline shows all of your revisions.\n    \n\nIn the **Invoice details** page, navigate down to the **History** section to see old and new invoices. When you click an invoice that Stripe voided due to a revision, you’re directed to its details page where you can see the revision timeline.\n\n![See an invoice's revision history](https://b.stripecdn.com/docs-statics-srv/assets/invoice-revisions-history-section.79e3d40e3ae874352d91cb7478250647.png)\n\nSee an invoice’s revision history\n\n[](#update-customer-email)\n\nIf you want to update the email address associated with an invoice:\n\n1.  Click the **Edit** button () under **Customer** in the editor.\n    \n2.  Change the email address using the **Email** field. Previous recipients can still access this invoice through any of the older invoice emails. You can also use the **Update customer** dialog to change your customer’s email address.\n    \n    ![Update your customer's email address](https://b.stripecdn.com/docs-statics-srv/assets/invoice-revisions-update-email-address.abc3f10a991006065c5132fc6e1ec704.png)\n    \n    Update your customer’s email address\n    \n3.  Click **Review invoice**, followed by **Update invoice**. The **Update invoice** dialog displays all of the email addresses associated with the previous invoice including old (and copied) customer emails.\n    \n\n[](#change-collection-method)\n\nIf you want to revise an invoice to automatically charge your customer, click **Automatically charge a payment method on file**, and then review the invoice. Before you proceed to automatically charge the customer, a dialog appears that asks you whether your customer is aware of the change. The dialog also lets you add an internal note for future reference.\n\n[](#edit-draft-invoice)\n\nIf you want to return to a draft invoice that’s associated with a revision, complete the following steps:\n\n1.  Exit the editor.\n    \n2.  When you’re ready to resume editing, click the draft invoice in the **History** section of the **Invoice details** page, or use the **Edit invoice** button. A dialog appears notifying you that Stripe saved previous, unfinalized changes to a draft.\n    \n3.  Choose to continue editing the draft or create a new one.\n    \n\n[](#customer-payment)\n\nWhen you revise an invoice and choose to notify your customer:\n\n1.  Stripe sends them a new email. The subject line of the email indicates that you made an update and also references the old invoice number.\n    \n2.  When your customer clicks into the email, they see a revised invoice with the new invoice number. Within the revised invoice, there’s an **Older versions** section that displays older invoices. Your customer can download PDFs of any of the old invoices for their records.\n    \n    ![Updated invoice email](https://b.stripecdn.com/docs-statics-srv/assets/invoice-revisions-customer-email.929ab2abffa15f996eedd5245543e36c.png)\n    \n    Updated invoice email\n    \n\nStripe lists every invoice version under **Older versions**. Because the latest email contains all of the relevant invoice information, your customer doesn’t have to search their inbox for previous invoices. If your customer clicks **Pay this invoice** in an old email, we automatically redirect them to the latest Hosted Invoice Page.",
  "title": "Edit invoices | Stripe Documentation",
  "description": "Learn how to edit invoices after finalization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration/programmatic-credit-notes",
  "markdown": "# Generate credit notes programmatically | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Invoicing API to adjust or refund finalized invoices with credit notes.\n\nTo adjust the balance of an `open` or `paid` [invoice](https://docs.stripe.com/api/invoices \"invoices\"), generate a [credit note](https://docs.stripe.com/api/credit_notes).\n\n#### Note\n\nFor information about working with credit notes using the Dashboard, see [Issue credit notes](https://docs.stripe.com/invoicing/dashboard/credit-notes).\n\nWhen you create a credit note, you can apply credit amounts in three ways:\n\n*   Discount a fixed amount from an invoice line item.\n*   Discount a quantity from an invoice line item. The total discount is the discount quantity times the unit price of that line item.\n*   Apply a discount to the total invoice amount by adding a custom discount line item with a description, quantity, and unit price. The total discount is the quantity times the unit price.\n\nWe recommend discounting invoice line items when possible, since it associates each credit with a line item. Adding a custom discount line item can make reporting and tracking difficult, because the credit isn’t associated with a real invoice line item.\n\n#### Note\n\nYou can’t combine discount types on an invoice line item. For example, if you discount a line item quantity, then a future credit note can only discount that line item by quantity, not by amount. If you discount a line item amount, then a future credit note can only discount that line item by amount, not by quantity.\n\n## Credit notes for open invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a custom line item on a credit note for an `open` invoice, the `amount_due` on the invoice decreases based on the `custom_line_items` in the credit note. This is in addition to any adjustments you make to existing `invoice_line_items`. For example, if the amount due on an `open` invoice is 100 USD and you create a `custom_line_item` with `quantity=1` and `unit_amount=2000`, the new amount due on the invoice is 80 USD.\n\nOn an invoice, credit notes appear as items after applying discounts and taxes—so they’re a post-tax adjusted amount. We calculate the invoice amount due using the following order:\n\n1.  Sum of invoice line items\n2.  Discounts\n3.  Pre-tax invoice total\n4.  Taxes\n5.  Customer credit balance\n6.  Credit notes applied (to gross amount due)\n7.  New amount due\n\nIf applying a credit note to an invoice changes the amount due to zero, the invoice automatically transitions into the `paid` state. If you want to change the quantity or amount of an existing line item, pass the invoice ID, the line item ID, and the new quantity or amount. When a line item has a quantity and an amount, you can only update the quantity. Otherwise, you can only change the amount. The example below adjusts the quantity to two:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{INVOICE_LINE_ITEM}} \\   -d \"lines[0][quantity]\"=2`\n\nTo create a custom line item on the credit note, pass the invoice ID, description, quantity, and unit amount. You can (optionally) set a tax rate as well. This example creates a custom line item on the credit note for 10 USD:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=custom_line_item \\  -d \"lines[0][description]\"=\"Courtesy credit\" \\  -d \"lines[0][quantity]\"=1 \\  -d \"lines[0][unit_amount]\"=1000`\n\n## Credit notes for paid invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a credit note for a `paid` invoice, the amount due on the invoice doesn’t change. Instead, the user can choose one or more of the following options:\n\n| Action | Description |\n| --- | --- |\n| Create a refund | Refund the invoice’s charge back to the customer’s payment method. |\n| Link a refund | Link an existing refund for the invoice’s charge. |\n| Credit the customer credit balance | Credit the customer credit balance, which is automatically applied to their future invoices. |\n| Credit outside of Stripe | Credit the invoice for an amount made in an adjustment outside of Stripe. |\n\nIn the following example, the credit note creates a refund:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{INVOICE_LINE_ITEM}} \\   -d \"lines[0][quantity]\"=2 \\  -d refund_amount=500`\n\nHere, the credit note creates a credit to the customer credit balance:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{INVOICE_LINE_ITEM}} \\   -d \"lines[0][quantity]\"=2 \\  -d credit_amount=500`\n\nYou can also combine multiple parameters. Funds that are left over after subtracting the refund and credit amounts from the invoice `amount` results in a credit outside of Stripe, usually with cash or a check:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{INVOICE_LINE_ITEM}} \\   -d \"lines[0][quantity]\"=2 \\  -d refund_amount=100 \\  -d credit_amount=200 \\  -d out_of_band_amount=200`\n\n## Voiding credit notes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can void a credit note only if it’s on an open invoice. Voiding a credit note reverses its adjustment, increasing the amount due on the invoice by the amount of the credit note. To void a credit note:\n\n`curl -X POST https://api.stripe.com/v1/credit_notes/{{CREDIT_NOTE_ID}}/void \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n## Crediting negative line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can credit a negative amount to a negative `invoice_line_item` using either the `amount` or `quantity` parameters.\n\nFor example, if you have an `open` invoice with two line items:\n\n*   a positive line item with `quantity=1` and `unit_amount=10000`\n*   and a negative line item with `quantity=1` and `unit_amount=-5000`.\n\nThis example uses the `amount` parameter to credit the full amount of both line items:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{POSITIVE_INVOICE_LINE_ITEM}} \\   -d \"lines[0][amount]\"=10000 \\  -d \"lines[1][type]\"=invoice_line_item \\  -d \"lines[1][invoice_line_item]\"={{NEGATIVE_INVOICE_LINE_ITEM}} \\   -d \"lines[1][amount]\"=-5000`\n\nThis example uses the `quantity` parameter to do the same:\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice={{INVOICE_ID}} \\   -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"={{POSITIVE_INVOICE_LINE_ITEM}} \\   -d \"lines[0][quantity]\"=1 \\  -d \"lines[1][type]\"=invoice_line_item \\  -d \"lines[1][invoice_line_item]\"={{NEGATIVE_INVOICE_LINE_ITEM}} \\   -d \"lines[1][quantity]\"=1`\n\nThe following restrictions apply:\n\n*   The total amount of the credit note must remain positive.\n*   The total amount credited to a negative line item must be negative.\n*   The total amount credited to a negative line item can’t be less than the line item amount.\n\nYou also can’t credit a negative amount on a `custom_line_item`. We only support negative amounts on `invoice_line_items`.",
  "title": "Generate credit notes programmatically | Stripe Documentation",
  "description": "Use the Invoicing API to adjust or refund finalized invoices with credit notes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/payment-plans",
  "markdown": "# Create Invoice Payment Plans | Stripe DocumentationThe Stripe Docs logo\n\n## Create Invoice Payment PlansBeta\n\n## Learn how to create Invoice Payment Plans.\n\nInvoice Payment Plans let you break up an [invoice’s](https://docs.stripe.com/api/invoices) total amount into separate payments with different due dates for your customers. This can expand your billing flexibility. For example, you could first collect a deposit and then the balance amount of a transaction at a later date. Alternatively, you could break up dues into more favorable terms for your customers by splitting them up into multiple, smaller increments over time. Stripe reminds your customers of upcoming payments that they have to make and shows them a history of past payments that they’ve already made. You can use both the Dashboard and the API to generate Payment Plans.\n\n## Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment Plans are currently a beta feature and have a few important limitations. Make sure that the following limitations don’t conflict with your use case:\n\n*   Payment Plans are not supported by Stripe Revenue Recognition or Stripe Connector for Netsuite.\n*   Stripe Tax doesn’t support partial refunds yet and therefore tax liability won’t be reflected accurately. Consult with your tax advisor.\n*   Payment Plans do not auto-charge customers with saved payment details. Customers must return to the payment page to make subsequent payments. They cannot be used with `charge_automatically` invoices.\n*   Stripe automatically emails reminders to your customers to complete subsequent payments. These emails are sent by default one week before payments are due. Sending these emails overrides any email reminder schedules and settings for one-off invoices. You can turn off the email reminders by disabling the setting for [Send finalized invoices and credit notes to customers](https://dashboard.stripe.com/settings/billing/automatic).\n*   For Connect users, application fees cannot be set on Payment Plan-enabled invoices. You can only set fees on PaymentIntents.\n*   Additional fields associated with Payment Plans are not available in Sigma.\n*   Some Billing Analytics charts (Top Subscribers, Collections) only register invoices that are fully paid. Other charts are unaffected.\n*   Subscription invoices cannot have Payment Plans applied.\n\nThis guide shows how to set up and manage payment plans using the [amounts\\_due](https://docs.stripe.com/api/invoices/create#create_invoice-amounts_due) field on the [Invoicing API](https://docs.stripe.com/api/invoices).\n\n[](#create-supporting-objects)\n\nBefore setting up payment plans, make sure to review the concepts in the [integrate with the Invoicing API](https://docs.stripe.com/invoicing/integration) guide. You need an understanding of how to create products, prices, and customers using the Stripe API or Dashboard to use this feature.\n\n[](#create-payment-plan)\n\nThe [amounts\\_due](https://docs.stripe.com/api/invoices/create#create_invoice-amounts_due) field helps you set up payment plans with Stripe Invoices. To use this feature, set the [collection\\_method](https://docs.stripe.com/api/invoices/create#create_invoice-collection_method) for the invoice to `send_invoice`. Payment plans are not supported for `charge_automatically` invoices.\n\nThis section goes through two common use cases for payment plans: flexible payment terms and initial deposit.\n\n### Flexible payment terms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse payment plans when you want to divide the amount due from your customer into smaller increments to make payment easier for them. For example, suppose you have an invoice of 6,000 USD, and you want the customer to pay it in three payments. You can set up the payment plan using the `amounts_due` field as shown below:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d collection_method=send_invoice \\   -d auto_advance=true \\   -d \"amounts_due[][amount]=2000\" \\   -d \"amounts_due[][days_until_due]=30\" \\   -d \"amounts_due[][description]=Payment 1\" \\   -d \"amounts_due[][amount]=2000\" \\   -d \"amounts_due[][days_until_due]=60\" \\   -d \"amounts_due[][description]=Payment 2\" \\   -d \"amounts_due[][amount]=2000\" \\   -d \"amounts_due[][days_until_due]=90\" \\   -d \"amounts_due[][description]=Payment 3\"`\n\n### Initial deposit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some situations, you might want to ask for an initial deposit followed by a payment plan for the remaining amount. For example, suppose you have an invoice of 5,000 USD, and you want the customer to pay a 1,000 USD deposit followed by two equal payments for the remaining amount. You can set up the payment plan as follows:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d collection_method=send_invoice \\   -d auto_advance=true \\   -d \"amounts_due[][amount]=1000\" \\   -d \"amounts_due[][days_until_due]=1\" \\   -d \"amounts_due[][description]=Deposit\" \\   -d \"amounts_due[][amount]=2000\" \\   -d \"amounts_due[][days_until_due]=30\" \\   -d \"amounts_due[][description]=Payment 1\" \\   -d \"amounts_due[][amount]=2000\" \\   -d \"amounts_due[][days_until_due]=60\" \\   -d \"amounts_due[][description]=Payment 2\"`\n\nThe examples above illustrate how to set up payment plans using the `amounts_due` field for invoices with various payment structures. Keep in mind that the total amount from the `amounts_due` field must equal the final [amount\\_due](https://docs.stripe.com/api/invoices/object#invoice_object-amount_due) of the invoice. With these examples, you can begin creating tailored payment plans based on your specific needs.\n\n[](#update-payment-plan)\n\nYou can update the `amounts_due` field for an invoice before finalizing it, letting you modify the payment plan as needed. This allows you to make adjustments, such as changing due dates, altering payment amounts, or adding new payments.\n\nIn addition to setting the number of days until a payment is due with [days\\_until\\_due](https://docs.stripe.com/api/invoices/update#update_invoice-amounts_due-days_until_due), you can also set a specific due date using the [due\\_date](https://docs.stripe.com/api/invoices/update#update_invoice-amounts_due-due_date) field. The `due_date` field lets you specify an exact date for a payment, providing more customization options for your payment plans.\n\nHere’s an example of updating an invoice’s payment plan:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n `\\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"amounts_due[][amount]=1000\" \\   -d \"amounts_due[][due_date]=1677514200\" \\   -d \"amounts_due[][description]=Updated Payment 1\" \\   -d \"amounts_due[][amount]=3000\" \\   -d \"amounts_due[][due_date]=1678132000\" \\   -d \"amounts_due[][description]=Updated Payment 2\"`\n\nIn this example, we update an invoice’s payment plan to use specific due dates instead of `days_until_due`. The `amounts_due` field also adjusts to show new payment amounts, showcasing the flexibility in modifying payment plans before finalizing an invoice.\n\n[](#finalize-invoice)\n\nAfter setting up the payment plan and adding the desired invoice items, it’s time to finalize the invoice. When an invoice is finalized, it can no longer be modified—this includes updating the payment plan, adding or removing invoice items, or making changes to the invoice’s amounts or dates.\n\nBefore finalizing your invoice, make sure you’ve added the required invoice items. Here’s an example of adding an invoice item:\n\n`curl https://api.stripe.com/v1/invoiceitems \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d invoice={{INVOICE_ID}} \\   -d price={{PRICE_ID}} \\   -d currency=usd`\n\nAfter adding the necessary invoice items and making sure your payment plan is set up correctly, proceed with finalizing the invoice. Here’s an example of how to finalize an invoice:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X POST`\n\nAfter finalizing an invoice, it’s ready to be sent to the customer for payment. Any adjustments to the invoice need to be done before finalization, so review the invoice details before doing this step. Learn more about finalization from our [status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions) guide.\n\n## Post-finalization actions on invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can still revise, void, or mark as uncollectible a finalized invoice with a payment plan, only before the first payment is received. Additionally, Payment Plans can only be “marked as paid” outside Stripe for the entire remaining amount due of the invoice, and not for a partial amount.\n\n## Tracking partially paid invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment plan invoices that have been partially paid display a **partially paid** status across the Stripe Dashboard. However, if any invoice payments aren’t made by their due date, the **overdue** status takes precedence. To view invoice status with the API, review the [amounts\\_due](https://docs.stripe.com/api/invoices/object#invoice_object-amounts_due) and [payments](https://docs.stripe.com/api/invoices/object#invoice_object-payments) fields for useful details.",
  "title": "Create Invoice Payment Plans | Stripe Documentation",
  "description": "Learn how to create Invoice Payment Plans.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/customer/balance",
  "markdown": "# Customer credit balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to work with customer credit balances.\n\n#### Customer balance types\n\nThis page is about customer credit balances, which are adjustments you can issue to customers that apply to future [invoices](https://docs.stripe.com/api/invoices \"invoices\"). Credit balances are different from cash balances. Cash balances are connected to the [customer balance payment method](https://docs.stripe.com/payments/bank-transfers). To learn more, see [Bank transfer](https://docs.stripe.com/invoicing/bank-transfer). As explained below, some features work differently for customers with a cash balance.\n\nEvery customer has a credit balance. You can use this to issue a:\n\n*   **Credit adjustment**—You owe the customer money.\n*   **Debit adjustment**—The customer owes you money.\n\nThese adjustments sum up to a credit balance that you can apply to future invoices. Because Stripe computes the credit balance from a ledger—an immutable list of debit and credit transactions—it provides an audit trail of transactions for the customer. The [Customer Balance Transactions](https://docs.stripe.com/api/customer_balance_transactions/object) can refer to the object related to the adjustment, such as a [credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes), invoice, or [metadata](https://docs.stripe.com/api/metadata).\n\nSome common use cases for customer credit balances include:\n\n*   [Issuing a credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes#issuing) to create a credit that reduces the amount due on the next invoice.\n*   Marking an invoice as paid and moving the amount owed to the credit balance as a debit. This happens when the amount due on an invoice is less than the [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). This functionality only occurs for users without a [cash balance](#cash-balances).\n\n## Credit balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep the following in mind when you work with credit balances:\n\n*   The credit balance automatically applies to the next finalized invoice to a customer.\n*   You ​​can’t choose a specific invoice to apply the credit balance to.\n*   The credit balance is in the customer’s currency.\n*   [Customers](https://docs.stripe.com/api/customers \"Customers\") with a [cash balance](https://docs.stripe.com/api/customers/object#customer_object-cash_balance) can’t keep a positive balance. In other words, they can’t increase the amount due on the next invoice.\n\n## Credits and debits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCredits are negative values (a reduction in the amount the customer owes) that you can apply to the next invoice. Debits, on the other hand, are positive values (an increase in the amount the customer owes) that you can apply to the next invoice.\n\n## Transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll modifications to the credit balance are recorded as [Transactions](https://docs.stripe.com/api/customer_balance_transactions/object). After you create a transaction, you can only update its `description` or `metadata` (you can’t edit other properties or delete it).\n\n### Transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll [Transactions](https://docs.stripe.com/api/customer_balance_transactions/object) that you create with the API or in the Dashboard have a [type](https://docs.stripe.com/api/customer_balance_transactions/object#customer_balance_transaction_object-type) value of `adjustment`. A type value of `adjustment` represents a debit or credit that you manually created for the customer. The following table describes each of the `type` values:\n\n| Type | Description |\n| --- | --- |\n| `adjustment` | An explicitly created adjustment transaction to debit or credit the credit balance. This is the only type of transaction that you can create by using API integrations and the Dashboard. |\n| `applied_to_invoice` | Traces the application of credit against a linked invoice. |\n| `credit_note` | Traces the creation of credit to a [credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes) and ​​its associated invoice. |\n| `invoice_too_small` | When the amount due on an invoice is less than Stripe’s [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) and the customer does not have a cash balance, the invoice is debited from the credit balance and added to the amount due on the next invoice. |\n| `invoice_too_large` | When the amount due on an invoice is greater than Stripe’s [maximum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) and the customer does not have a cash balance, the invoice is debited from the credit balance and added to the amount due on the next invoice. |\n| `unapplied_from_invoice` | Traces the reversal of an applied credit balance from a linked invoice. Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n| `unspent_receiver_credit` | When unspent funds in [receiver Sources](https://docs.stripe.com/sources#flow-for-customer-action) attached to a customer without cash balance aren’t fully charged after 60 days, Stripe automatically charges them on your behalf and credits your balance. When this happens, Stripe also creates a corresponding credit transaction. |\n| `initial` | Represents the starting value of the credit balance when a customer is created by using the API with a non-zero credit balance. |\n\n### Undo a transaction ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can only undo a transaction by creating a corresponding, reversing transaction. For example, if you credit the customer ​​10 USD, you’d have to debit them 10 USD in a new transaction, each canceling the other one out.\n\n## Modify the credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can modify a customer’s credit balance through both the Dashboard and API.\n\nYou can modify a customer’s credit balance through the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard by creating a new [Customer Balance Transaction](https://docs.stripe.com/api/customer_balance_transactions/object) adjustment.\n\nIn the **Customers** page, click on the customer and then click **Adjust balance** under **Credit balance**. From here, set the **Adjustment type**, a **Currency** (only available if the customer doesn’t have a currency set), an **Amount**, and an **internal note**.\n\n#### Note\n\nThe **internal note** is only visible to Dashboard users.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/2-Customer-balance.ed7d6df96ba2b8595461e1091e4da7a9.png)\n\nAdd a new customer balance transaction adjustment\n\n## Balance transaction history ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAudit a customer’s balance adjustments in the **Customers** page by scrolling down to the **Credit balance** section. This section displays the current value of the customer credit balance.\n\n## Customer cash balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers using the [bank transfers](https://docs.stripe.com/payments/bank-transfers) payment method have a [cash balance object](https://docs.stripe.com/api/customers/object#customer_object-cash_balance) with one or more currencies in the `available` object. You can use the funds to [make payments](https://docs.stripe.com/payments/customer-balance#make-cash-payment) or pay invoices. Customers with available balances have the following behavior:\n\n*   You can’t create a negative customer cash balance since it represents money sent from the `Customer`.\n    \n*   You can’t finalize a too-small or too-large invoice with the cash balance (for example, creating a subscription for 0.01 USD). Learn more about [minimum and maximum amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts).\n    \n*   You can delete `Customers` that have a cash balance, but only if their cash balance is 0.\n    \n*   You can’t remove a `Customer`’s available balance.",
  "title": "Customer credit balance | Stripe Documentation",
  "description": "Learn how to work with customer credit balances.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/automated-collections",
  "markdown": "# Automated collections for invoices | Stripe DocumentationThe Stripe Docs logo\n\n## Automate your reconciliation, collection, and charging processes.\n\nStripe offers several ways to automate your processes for cash reconciliation, revenue recovery, and automatically charging stored payment methods.",
  "title": "Automated collections for invoices | Stripe Documentation",
  "description": "Automate your reconciliation, collection, and charging processes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/customer",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Customers\n\n## Learn how to use the Customer resource with Stripe Invoicing.\n\nCreate a customer for every new user or business you want to bill. When you create a new customer, set up a [minimal customer profile](#customer-profile) to help generate more useful invoices, and enable Smart Retries (if you’re an [Invoicing Plus](https://stripe.com/invoicing/pricing) user). After you set up your customer, you can issue one-off invoices or create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\").\n\n#### Caution\n\nBefore you create a new customer, make sure that the customer doesn’t already exist in the Dashboard. Creating multiple customer entries for the same customer can cause you problems later on, such as when you need to reconcile transaction history or coordinate saved payment methods.\n\nYou can create and manage customers on the [Customers page](https://dashboard.stripe.com/customers) when you don’t want to use code to create a customer, or if you want to manually bill a customer with a one-off invoice.\n\n#### Note\n\nYou can also create a customer in the Dashboard during invoice creation.\n\n### Create a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a new customer, you can set their account and billing information, such as **Email**, **Name**, and **Country**. You can also set a customer’s preferred language, currency, and other important details.\n\nTo create a customer, complete these steps:\n\n1.  Verify that the customer doesn’t already exist.\n    \n2.  Click **Add customer**, or press **N**, on the **Customers** page.\n    \n3.  At a minimum, enter your customer’s **Name** and **Account email**.\n    \n4.  Click **Add customer** in the dialog.\n    \n\n### Edit a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo edit a customer’s profile, complete these steps:\n\n1.  Find the customer you want to modify and click the name on the **Customers** page.\n    \n2.  In the account information page, select **Actions** > **Edit information**.\n    \n3.  Make your changes to the customer profile.\n    \n4.  Click **Update customer**.\n    \n\n### Delete a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo delete a customer, complete these steps:\n\n1.  Find the customer you want to delete on the **Customers** page.\n    \n2.  Click the checkbox next to your customer’s name followed by **Delete**. You can also click into the customer’s details page and select **Actions** > **Delete customer**.\n    \n\n## Customer profiles ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n​​Use a basic customer profile for invoice and receipt generation or as a lightweight customer relationship management system (CRM) for your application. To create a minimal customer profile, set these properties:\n\n*   Email address.\n*   Customer name.\n*   Metadata with a reference to your application’s internal customer ID.\n\nStripe uses your customer’s [email address](https://docs.stripe.com/api/customers/object#customer_object-email) to notify them of payment failures. Stripe also uses email addresses to notify customers when they need to perform an action to complete a payment.\n\nStore the internal customer ID for your application in the [metadata](https://docs.stripe.com/api/customers/object#customer_object-metadata) attribute. Like most Stripe resources, the `Customer` resource includes a [Metadata](https://docs.stripe.com/api/metadata) object hash to flexibly store contextual key-value information. To aid in auditing and support, store your internal customer ID as a key-value pair on the `Customer` resource. This allows you to search for the customer using your internal reference ID. We recommend storing Stripe customer IDs against the internal customer model of your application.\n\n### Billing and shipping addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [address attributes](https://docs.stripe.com/api/customers/object#customer_object-address) to set a billing address for invoicing and credit notes. For physical good delivery, add a [shipping](https://docs.stripe.com/api/customers/object#customer_object-shipping) address.\n\n#### Note\n\nInvoices, credit notes, and receipts display the billing address—a common requirement for tax compliance.\n\n### Email and PDF language localization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a customer, use the **Language** dropdown to add their preferred language. (You can also add or edit a customer’s preferred language in the **Customer details** page or when creating an invoice.) Stripe uses the chosen language to localize invoice emails and PDFs, receipt emails and PDFs, and credit note PDFs.\n\nTo update the language through the API, use the [preferred\\_locales](https://docs.stripe.com/api/customers/object#customer_object-preferred_locales) parameter. This parameter accepts an ordered list of preferred languages sorted by preference. These preferred locale values are based on [RFC-4646](https://tools.ietf.org/html/rfc4646). Examples include en for English, or fr-CA for Canadian French. To learn more, see [Customer preferred languages](https://docs.stripe.com/invoicing/customize#customer-language).\n\n## Customer properties ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table contains additional customer properties:\n\n| Property | Description |\n| --- | --- |\n| Payment properties | Stripe uses the [payment](https://docs.stripe.com/payments) details associated with a customer to collect payment. A customer can have multiple ways to make a payment, including the [Payment Methods API](https://docs.stripe.com/payments/payment-methods) and [Customer credit balance](https://docs.stripe.com/invoicing/customer/balance). Customers are single-currency, which means that after you assign a currency, invoice the customer, or set a customer credit balance, you can’t change the currency. You can see this locked state in the Dashboard in a disabled **Currency** dropdown. If you need to bill a single entity with multiple currencies, create a new customer for each currency. |\n| Invoicing properties | All [invoicing-related resources](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings) are associated with the billed customer. |\n| Tax properties | To meet tax jurisdiction requirements, you might need to include customer tax ID numbers and other tax-related information on your invoices. ​​It’s your responsibility to make sure your customer’s invoices contain all of the correct information, such as [tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids), [tax exemption status](https://docs.stripe.com/api/customers/create#create_customer-tax_exempt), and [addresses](#addresses). Tax IDs provide a way to store and render one or more tax ID numbers on invoices. The tax exemption status indicates whether the entity is taxable. By default, a customer’s `tax_exempt` status is set to `none`—meaning it’s a taxable billing entity. However, you can set the `tax_exempt` parameter to `reverse` for customers that must pay the invoice’s tax. You can also flag the customer as being tax exempt by setting the status to `exempt`. To learn more about using `tax_exempt` and `reverse`, see [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates#tax-exempt-and-reverse-charge). |\n\n## Common tasks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere are some of the common tasks you can perform with the `Customer` resource:\n\n*   **Send an invoice to a customer**: After you create the customer, you can [send them an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n    \n*   **Store a customer credit balance**: The customer credit balance feature allows you to assign credit and debit adjustments to a specific customer and then apply the resulting balance toward future invoices for them.\n    \n*   **Add and validate tax ID numbers**: Displaying a customer’s tax ID on an invoice is a common requirement, and Stripe allows you to add multiple tax IDs to a customer. Their tax IDs display in the header of invoice and credit note PDFs. See the [Customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids) page for more details.\n    \n*   **Add a coupon to a customer**: A [coupon](https://docs.stripe.com/api/coupons) contains information about a percent-off or amount-off discount, and Stripe Invoicing allows you to associate a coupon with a customer. Coupons apply a discount to the invoice amount due, on a pre-tax basis.\n    \n*   **Set the currency for a customer**: You can set the default currency to charge a customer for invoices using the Dashboard by navigating to the **Customers** page, selecting your customer, and clicking **Edit** next to **Details**. See the [Multi-currency customers](https://docs.stripe.com/invoicing/multi-currency-customers) page for more details on billing the same customer using a different currency than their default currency.\n    \n*   **Create customers in bulk**: Bulk upload Customers using [Productivity Stripe Apps](https://marketplace.stripe.com/categories/productivity).",
  "title": "Customers | Stripe Documentation",
  "description": "Learn how to use the Customer resource with Stripe Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/customer/tax-ids",
  "markdown": "# Customer tax IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Store, validate, and render customer tax ID numbers with Stripe Invoicing.\n\nDisplaying a customer’s tax ID on [invoice](https://docs.stripe.com/api/invoices \"invoices\") documents is a common requirement that you can satisfy by adding tax IDs to customers. A customer’s tax IDs display in the header of invoice and credit note PDFs.\n\n## Supported Tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe supports the following Tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |\n\n## Validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou’re responsible for the accuracy of customer information including their tax ID number. The invoice includes the customer tax ID whether or not it’s valid.\n\nStripe provides automatic validation to help determine ​​if the formatting is correct when you add the ID to our system. You can see the results of the validation in the Dashboard along with other customer information, including details returned from the government databases, and the registered name and address. However, we don’t continue to validate them over time. ​​If automatic validation isn’t available, you must manually verify these IDs.\n\n### Australian Business Numbers (ABN) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all Australian Business Numbers (ABNs) with the [Australian Business Register (ABR)](https://abr.gov.au/).\n\n### European Value-Added-Tax (EU VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe also automatically validates all European Value-Added-Tax (EU VAT) numbers with the [European Commission’s VAT Information Exchange System (VIES)](http://ec.europa.eu/taxation_customs/vies/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nVIES validation usually takes only a few seconds, but depending on the availability of various government databases, might take longer. Stripe automatically handles VIES downtime and attempts retries.\n\n### United Kingdom Value-Added-Tax (GB VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all UK Value-Added-Tax (GB VAT) numbers with the [United Kingdom’s Revenue & Customs (HMRC)](https://www.gov.uk/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nHMRC validation usually takes only a few seconds, but depending on the availability, might take longer. Stripe automatically handles HMRC downtime and attempts retries.\n\n### Testing customer tax ID verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these magic tax IDs to trigger certain verification conditions in test mode. The tax ID type must be either the EU VAT Number or Australian Business Number (ABN).\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification |\n| `111111111` | Unsuccessful verification |\n| `222222222` | Verification remains pending indefinitely |\n\n### Validation webhooks and Dashboard display ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBecause this validation process happens asynchronously, the [customer.tax\\_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated) webhook notifies you of validation updates.\n\n![Tax validation tooltip in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/validation-tooltip.de17a6f286a786e5643e39f43c02a42e.png)\n\nHover over a customer’s EU VAT number to display their VIES information.\n\nThe Dashboard displays the results of the validation within the customer details, including information returned from the government databases, and the registered name and address.\n\nWhen automatic validation isn’t available, you must manually verify these IDs.\n\n## Managing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage tax IDs in the Dashboard, with the [customer portal](https://docs.stripe.com/customer-management), or the [Tax ID API](https://docs.stripe.com/api/customer_tax_ids).\n\nTo add a tax ID:\n\n1.  Navigate to the [Customers](https://dashboard.stripe.com/customers) page, and select the applicable customer.\n2.  Click the pencil icon next to **Details** on the right.\n3.  Scroll down to **Tax Status** and **Tax ID** fields.\n4.  Click **Add another ID** to add a row to the tax ID list, where you can select the ID type and value.",
  "title": "Customer tax IDs | Stripe Documentation",
  "description": "Store, validate, and render customer tax ID numbers with Stripe Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customers/create",
  "markdown": "# Create a customer | Stripe API Reference\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The ID of the PaymentMethod to attach to the customer.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n*   #### \n    \n    tax\\_id\\_dataarray of objects\n    \n\n### Returns\n\nReturns the Customer object after successful customer creation. Raises [an error](#errors) if create parameters are invalid (for example, specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jennyrosen@example.com\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Update a customer](https://docs.stripe.com/api/customers/update)\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [List all customers](https://docs.stripe.com/api/customers/list)\n\nReturns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\n\n### Parameters\n\n*   A case-sensitive filter on the list based on the customer’s `email` field. The value must be a string.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers, starting after customer `starting_after`. Passing an optional `email` will result in filtering to customers with only that exact email address. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NffrFeUfNV2Hib\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680893993,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": \"jennyrosen@example.com\",      \"invoice_prefix\": \"0759376C\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": null,        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a customer](https://docs.stripe.com/api/customers/delete)\n\nPermanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the customer ID does not exist, this call raises [an error](#errors).\n\nUnlike other objects, deleted customers can still be retrieved through the API in order to be able to track their history. Deleting customers removes all credit card details and prevents any further operations to be performed (such as adding a new subscription).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"deleted\": true}\n```",
  "title": "Create a customer | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/pay-what-you-want",
  "markdown": "# Let customers decide what to pay\n\n## Accept tips and donations, or sell pay-what-you-want products and services.\n\nYou can use this feature to collect a tip for a service provided, accept donations for a cause, or give your customers the option to pay what they want for your product or service. Go to Stripe Support to learn more about Stripe’s [requirements for accepting tips or donations](https://support.stripe.com/questions/requirements-for-accepting-tips-or-donations).\n\nPay-what-you-want payments have the following limitations:\n\n*   You can’t add any other line items and the quantity can only be 1.\n*   You can’t use promotion codes or discounts with them.\n*   They don’t support recurring payments or cross-sells.\n\n![Custom amounts](https://b.stripecdn.com/docs-statics-srv/assets/custom-amount.90b3e073081926616cbb75df7f4a145d.png)\n\n[](#product-catalog)\n\nStripe Checkout uses [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") to structure pay-what-you-want payments. In the following example, Togethere is selling tickets to a fundraising dinner and wants to allow their customers to pay what they want for their tickets.\n\nTo create a pay-what-you-want model on Stripe through the Dashboard, complete these steps:\n\n1.  Create the `Fundraising dinner` product.\n    \n    1.  Go to **More** > **Product catalog**.\n    2.  Click **+Add product**.\n    3.  Enter the **Name** of the product (`Fundraising dinner`).\n    4.  _(Optional)_ Add a **Description**. The customer sees the description at checkout.\n2.  Create the price for the `Fundraising dinner` product:\n    \n    1.  Select **Customer chooses price** for the **Pricing model**.\n    2.  _(Optional)_ Add a suggested price.\n    3.  _(Optional)_ Specify limits that the customer can input.\n    4.  Click **Save product**.\n\n[](#create-checkout-session)\n\nTo enable customers to change the amount on the payment page, use the price ID when you create a Checkout Session. If you select **Customer chooses price** as your pricing model, you can’t add any other line items and the quantity can only be 1.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode cancel_url=\"[https://example.com](https://example.com/)\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com](https://example.com/)\"`",
  "title": "Let customers decide what to pay | Stripe Documentation",
  "description": "Accept tips and donations, or sell pay-what-you-want products and services.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/upgrades",
  "markdown": "# API upgrades | Stripe DocumentationThe Stripe Docs logo\n\n## Keep track of changes and upgrades to the Stripe API.\n\nYour API version controls the API and webhook behavior you see (for example, what properties you see in responses, what parameters you’re permitted to send in requests, and so on). Your version gets set the first time you make an API request. When a breaking change is introduced to the Stripe API, a new dated version is released. To avoid breaking your code, we don’t change your version until you’re ready to upgrade.\n\nIf you make requests on behalf of other users using [Connect](https://stripe.com/connect), we’ll use your application’s API version to help you to write code that works for all your users no matter what API versions they’re individually running.\n\n## Backwards-compatible changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe considers the following changes to be backwards-compatible:\n\n*   Adding new API resources.\n*   Adding new optional request parameters to existing API methods.\n*   Adding new properties to existing API responses.\n*   Changing the order of properties in existing API responses.\n*   Changing the length or format of opaque strings, such as object IDs, error messages, and other human-readable strings.\n    *   This includes adding or removing fixed prefixes (such as `ch_` on charge IDs).\n    *   Make sure that your integration can handle Stripe-generated object IDs, which can contain up to 255 characters. For example, if you’re using MySQL, store the IDs in a `VARCHAR(255) COLLATE utf8_bin` column (the `COLLATE` configuration provides case-sensitivity during lookups).\n*   Adding new event types.\n    *   Make sure that your webhook listener gracefully handles unfamiliar event types.\n\n## Upgrade your API version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re running an older version of the API, upgrade to the latest version to take advantage of new functionality or to streamline responses so the API is faster for you.\n\nUpgrading your API version affects:\n\n*   The API calls you make without a `Stripe-Version` header: the parameters you can send and the structure of objects returned.\n*   The structure of objects received with [Stripe.js](https://docs.stripe.com/payments/elements) methods such as [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment).\n*   The structure of objects sent to your webhook endpoints (both Account and [Connect](https://docs.stripe.com/connect/webhooks) ones.) If an endpoint has an explicit version set, it will remain unaffected.\n*   Automated Billing operations performed by Stripe (for example, generating an [invoice](https://docs.stripe.com/api/invoices \"invoices\") for a new subscription period) use your account’s default API version. See the API changelog for details about how your default API version will impact these operations.\n\n### View your API version and the latest upgrade in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo see what version you’re running and the latest upgrade, visit your [Developer Dashboard](https://dashboard.stripe.com/developers).\n\nWhen performing an API upgrade, make sure that you specify the API version that you’re integrating against in your code instead of relying on your account’s default API version. To test a newer version for API calls, set the `Stripe-Version` header (in live or test mode). Learn how to manage versioning in our [server-side libraries](https://docs.stripe.com/libraries#server-side-libraries).\n\n### Upgrade and test your webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead our guide on [how to handle webhook versioning](https://docs.stripe.com/webhooks/versioning).\n\n### Finalize the upgrade![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you’re confident that your code can handle the latest API version, click the **Upgrade version** button in your Dashboard. This switches the version used by API calls that don’t have the Stripe-Version header and also switches the version used to render objects sent to your webhooks.\n\n#### Caution\n\nThe shape of resources inside [events retrieved from the API](https://docs.stripe.com/api/events) is defined by the default API version of your account at the time the event occurred. If your code retrieves events created when your default API version was different your code will need to account for these changes when processing events.\n\n### Roll back your API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor 72 hours after you’ve upgraded your API version, you can safely roll back to the version you were upgrading from in your Dashboard.\n\nAfter you’ve rolled back, webhooks that were sent with the new object structure and failed will be retried with the old structure.\n\n## Stay informed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send information on new additions and changes to Stripe’s API and language libraries in the Stripe Developer Digest. Be sure to subscribe to stay informed.\n\n## API versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nListed below are all the [breaking changes](#breaking-change) to the Stripe API. Each date corresponds with a new version of the Stripe API. If you’re looking for all API additions and updates, see the [API changelog](https://docs.stripe.com/changelog). If you are looking for new product releases, see the [product changelog](https://stripe.com/blog/changelog).\n\n### 2024-06-20![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   New values have been added to the [Issuing Authorization](https://docs.stripe.com/api/issuing/authorizations/object) `request_history.reason` enum:\n    \n    *   `card_canceled`\n    *   `card_expired`\n    *   `cardholder_blocked`\n    *   `insecure_authorization_method`\n    *   `pin_blocked`\n    \n*   On the [Issuing Authorization](https://docs.stripe.com/api/issuing/authorizations/object) resource and related `test_helper` APIs, `fuel.volume_decimal` has been renamed to `fuel.quantity_decimal`.\n    \n*   On the [Issuing Transaction](https://docs.stripe.com/api/issuing/transactions/object) resource and related `test_helper` APIs, `purchase_details.fuel.volume_decimal` has been renamed to `purchase_details.fuel.quantity_decimal`.\n    \n*   The following undocumented fuel fields have been removed from the [Issuing Transaction](https://docs.stripe.com/api/issuing/transactions/object) resource in favor of the `_decimal` equivalents:\n    \n    *   `purchase_details.fuel.unit_cost`\n    *   `purchase_details.fuel.volume`\n    \n*   The following undocumented fleet fields have been removed from the [Issuing Transaction](https://docs.stripe.com/api/issuing/transactions/object) resource in favor of their corresponding `_decimal` equivalents:\n    \n    *   `purchase_details.fleet.reported_breakdown.fuel.gross_amount`\n    *   `purchase_details.fleet.reported_breakdown.non_fuel.gross_amount`\n    *   `purchase_details.fleet.reported_breakdown.tax.local_amount`\n    *   `purchase_details.fleet.reported_breakdown.tax.national_amount`\n    \n*   New values have been added to the [Issuing Transaction](https://docs.stripe.com/api/issuing/transactions/object) `purchase_details.fuel.unit` enum:\n    \n    *   `imperial_gallon`\n    *   `kilogram`\n    *   `pound`\n    *   `charging_minute`\n    *   `kilowatt_hour`\n    \n*   The `fleet.cardholder_prompt_data.alphanumeric_id` property on the [Issuing Authorization](https://docs.stripe.com/api/issuing/authorizations/object) resource has been deprecated and will be removed in a future API version. Depending on the configuration of your card program, use `driver_id`, `vehicle_number`, `unspecified_id` or `user_id` instead.\n    \n*   In the Capabilities API, `paused.inactivity` and `other` have been added as new disabled reasons. See [Capability disabled reasons](https://docs.stripe.com/api/accounts/object#capability_object-requirements-disabled_reason) for more information.\n    \n*   In the Capabilities API, `bank_transfer_payments` capability type is being deprecated in favor of newer capability types per buyer’s location. The newer capability types are:\n    \n    *   `gb_bank_transfer_payments` for UK Bank Transfers (GBP customer balance payments)\n    *   `jp_bank_transfer_payments` for JP Bank Transfers (JPY customer balance payments)\n    *   `mx_bank_transfer_payments` for MX Bank Transfers (MXN customer balance payments)\n    *   `sepa_bank_transfer_payments` for SEPA Bank Transfers (EUR customer balance payments)\n    *   `us_bank_transfer_payments` for US Bank Transfers (USD customer balance payments)\n    \n\n### 2024-04-10![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [PaymentIntents](https://docs.stripe.com/api/payment_intents) now has `automatic_async` as the default capture method when capture method is not specified during PaymentIntents creation. For more information about async capture, view the [asynchronous capture guide](https://docs.stripe.com/payments/payment-intents/asynchronous-capture).\n    \n*   Fields under `rendering_options` for invoices are now migrated under `rendering`.\n    \n*   Product ‘features’ has been renamed to `marketing_features`.\n    \n\n### 2023-10-16![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In the Accounts API, the following error codes have been added as new error codes in the `requirements.errors` array. See [Account requirements errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) for more information.\n    \n    *   `invalid_address_highway_contract_box`\n    *   `invalid_address_private_mailbox`\n    *   `invalid_business_profile_name`\n    *   `invalid_business_profile_name_denylisted`\n    *   `invalid_company_name_denylisted`\n    *   `invalid_dob_age_over_maximum`\n    *   `invalid_dob_age_under_minimum`\n    *   `invalid_product_description_length`\n    *   `invalid_product_description_url_match`\n    *   `invalid_statement_descriptor_business_mismatch`\n    *   `invalid_statement_descriptor_denylisted`\n    *   `invalid_statement_descriptor_length`\n    *   `invalid_statement_descriptor_prefix_denylisted`\n    *   `invalid_statement_descriptor_prefix_mismatch`\n    *   `invalid_tax_id_format`\n    *   `invalid_url_denylisted`\n    *   `invalid_url_format`\n    *   `invalid_url_web_presence_detected`\n    *   `invalid_url_website_business_information_mismatch`\n    *   `invalid_url_website_empty`\n    *   `invalid_url_website_inaccessible`\n    *   `invalid_url_website_inaccessible_geoblocked`\n    *   `invalid_url_website_inaccessible_password_protected`\n    *   `invalid_url_website_incomplete`\n    *   `invalid_url_website_incomplete_cancellation_policy`\n    *   `invalid_url_website_incomplete_customer_service_details`\n    *   `invalid_url_website_incomplete_legal_restrictions`\n    *   `invalid_url_website_incomplete_refund_policy`\n    *   `invalid_url_website_incomplete_return_policy`\n    *   `invalid_url_website_incomplete_terms_and_conditions`\n    *   `invalid_url_website_incomplete_under_construction`\n    *   `invalid_url_website_other`\n    \n*   In the Accounts API, if no `settings.payments.statement_descriptor` is supplied, the statement descriptor is automatically set to the first supplied parameter of (in priority order):\n    \n    *   `business_profile.name`\n    *   `business_profile.url`\n    *   `company.name` or `individual.first_name` + `individual.last_name` (dependent on the `business_type`)\n    \n    The statement descriptor is only set automatically when one of the above fields is provided as a parameter, so existing accounts will not be impacted unless a dependent field is updated. Similarly, `settings.card_payments.statement_descriptor_prefix` will be defaulted to a shortened version of the `settings.payments.statement_descriptor`. This will take place whenever the statement descriptor is updated (either explicitly, or when defaulted).\n    \n\n### 2023-08-16![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    [PaymentIntents](https://docs.stripe.com/api/payment_intents) and [SetupIntents](https://docs.stripe.com/api/setup_intents) now have `automatic_payment_methods` enabled by default, which allows you to configure payment method settings from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods)—no code required. The previous default was to accept only card payments when both `payment_method_types` and `automatic_payment_methods` were not specified. For more information, view the [upgrade guide](https://docs.stripe.com/upgrades/manage-payment-methods).\n    \n    *   When confirming a PaymentIntent, you will be required to provide a `return_url` unless `off_session=true`.\n    *   When confirming a PaymentIntent, you cannot use `error_on_requires_action`. Use `payment_method_types` with `error_on_requires_action` if you wish to fail payment attempts when PaymentIntents transition into `requires_action`.\n    *   When confirming a SetupIntent, you will be required to provide a `return_url`.\n    *   You can bypass the `return_url` requirement using `automatic_payment_methods[allow_redirects]=never`, this will automatically filter payment methods that [require redirect](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability) even if they are enabled in the Dashboard.\n    \n*   [No-cost orders](https://docs.stripe.com/payments/checkout/no-cost-orders) are now enabled for one-time payments in Checkout Sessions. The value of `payment_method_collection` has changed from `always` to `if_required` accordingly.\n    \n*   When being viewed by a platform, PaymentMethod fingerprints of types `us_bank_account`, `acss_debit`, `sepa_debit`, `bacs_debit`, and `au_becs_debit` are rendered in platform scope, not the owning merchant (connected account) scope. This works similarly to the [2018-01-23](#2018-01-23) change for cards and bank accounts.\n    \n*   Added more specific error codes to the [PaymentIntent](https://docs.stripe.com/api/payment_intents) API for when a [Klarna](https://docs.stripe.com/payments/klarna) payment fails:\n    \n    *   `payment_method_customer_decline`\n    *   `payment_method_not_available`\n    *   `payment_method_provider_decline`\n    *   `payment_intent_payment_attempt_expired`\n    \n*   In the Accounts API, `verification_missing_directors`, `verification_directors_mismatch`, `verification_document_directors_mismatch` and `verification_extraneous_directors` has been added as a new error code in the `requirements.errors` array. See [Account requirements errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) for more information.\n    \n\n### 2022-11-15![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Charge](https://docs.stripe.com/api/charges/object) no longer auto-expands refunds by default. You can [expand the list](https://docs.stripe.com/api#expanding_objects) but for performance reasons we recommended against doing so unless needed.\n    \n*   The `charges` property on [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) has been removed. You can use the `latest_charge` property instead.\n    \n*   Added more specific error codes for the following bank redirect payment methods: Bancontact, EPS, Giropay, iDEAL, Przelewy24, and Sofort.\n    \n    *   Added the following error codes to the [PaymentIntent](https://docs.stripe.com/api/payment_intents) and [PaymentMethod](https://docs.stripe.com/api/payment_methods) APIs:\n        \n        *   `payment_intent_payment_attempt_expired`\n        *   `payment_method_customer_decline`\n        *   `payment_method_provider_timeout`\n        *   `payment_method_not_available`\n        *   `payment_method_provider_decline`\n    *   Added the following error codes to the [SetupIntent](https://docs.stripe.com/api/setup_intents) APIs:\n        \n        *   `setup_intent_setup_attempt_expired`\n        *   `payment_method_customer_decline`\n        *   `payment_method_provider_timeout`\n        *   `payment_method_not_available`\n        *   `payment_method_provider_decline`\n    \n*   In the Accounts API, `verification_legal_entity_structure_mismatch` has been added as a new error code in the `requirements.errors` array. See [Account requirements errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) for more information.\n    \n\n### 2022-08-01![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `pending_invoice_items_behavior` parameter on [create Invoice](https://docs.stripe.com/api/invoices/create) no longer supports the `include_and_require` value. When the parameter is omitted the default value of `pending_invoice_items_behavior` is now `exclude`.\n    \n*   When creating a Checkout Session in payment mode, the default value of `customer_creation` has changed from `always` to `if_required`.\n    \n*   A PaymentIntent is no longer created during Checkout Session creation in payment mode. Instead, a PaymentIntent will be created when the Session is confirmed.\n    \n*   Checkout Sessions no longer return the `setup_intent` property in subscription mode.\n    \n*   The following parameters have been removed from [create Checkout Session](https://docs.stripe.com/api/checkout/sessions/create):\n    \n    *   `line_items[amount]`\n    *   `line_items[currency]`\n    *   `line_items[name]`\n    *   `line_items[description]`\n    *   `line_items[images]`\n    \n    You can use the `price` and `price_data` parameters instead.\n    \n*   The `subscription_data[coupon]` parameter has been removed from [create Checkout Session](https://docs.stripe.com/api/checkout/sessions/create). You can use the `discounts` parameter instead.\n    \n*   The `shipping_rates` parameter has been removed from [create Checkout Session](https://docs.stripe.com/api/checkout/sessions/create). You can use the `shipping_options` parameter instead.\n    \n*   On the Checkout Session resource, several shipping properties have changed.\n    \n    *   `shipping_rate` has been moved into the new `shipping_cost` hash.\n    *   `shipping` has been renamed to `shipping_details`.\n    \n*   `exempted` now appears in the `three_d_secure` hash for card Charges. It indicates that a 3D Secure exemption was granted.\n    \n*   In the Accounts API, `invalid_tos_acceptance` has been added as a new error code in the `requirements.errors` array. See [Account requirements errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) for more information.\n    \n*   When creating a `physical` Issuing card in testmode, its shipping [status](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-status) no longer automatically changes from `pending` to `delivered`. This functionality is now accessible via the following new endpoints:\n    \n    *   `/v1/test_helpers/issuing/cards/:card/shipping/ship`\n    *   `/v1/test_helpers/issuing/cards/:card/shipping/deliver`\n    *   `/v1/test_helpers/issuing/cards/:card/shipping/return`\n    *   `/v1/test_helpers/issuing/cards/:card/shipping/fail`\n    \n*   `design_rejected` is now a possible value for the `cancellation_reason` field on the issued card object, indicating that the card’s design was rejected by Stripe.\n    \n*   The `default_currency` field on the Customer API resource has been removed.\n    \n\n### 2020-08-27![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   We have removed `tax_percent` from objects and requests in favor of [tax rates](https://docs.stripe.com/api/tax_rates).\n    \n\n*   On subscription schedules, `phases.plans` has been renamed to `phases.items`. This applies for the [subscription schedule](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases) object as well as [create](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases) and [update](https://docs.stripe.com/api/subscription_schedules/update#update_subscription_schedule-phases) requests.\n    \n*   Deprecate the `payment_method.card_automatically_updated` webhook in favor of `payment_method.automatically_updated`.\n    \n*   Checkout Sessions no longer include the `display_items` property. Use the includable `line_items` property instead.\n    \n*   The `requirements` hash on the Account and Capability objects, and the `verification_fields` hash on the Country Spec object have newly formatted strings for requirements that are related to key persons associated with an account:\n    \n    *   Fields that are required for persons with `representative`, `owner`, `director`, and `executive` roles will be prefixed with `representative`, `owners`, `directors`, and `executives`, respectively. Person requirements will be previewed as follows:\n        *   When the representative’s phone number is required, it will appear as `representative.phone` instead of `relationship.representative`.\n        *   When an owner’s full name is required, it will appear as `owners.first_name` and `owners.last_name` instead of `relationship.owner`.\n        *   When an executive’s ID number is required, it will appear as `executives.id_number` instead of `relationship.executive`.\n        *   When a director’s date of birth is required, it will appear as `directors.dob.day`, `directors.dob.month`, and `directors.dob.year` instead of `relationship.director`.\n    *   The boolean values that indicate the associated owners, executives, or directors have been provided now appear as `company.owners_provided`, `company.executives_provided`, or `company.directors_provided` instead of `relationship.owner`, `relationship.executive`, or `relationship.director`, respectively.\n    \n*   In the Accounts/Persons/Capabilities API, several new error codes have been introduced in the `requirements.errors` array. See [Account requirements errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) for more information. These error codes are:\n    \n    *   `verification_document_issue_or_expiry_date_missing`\n    *   `verification_document_not_signed`\n    *   `verification_failed_tax_id_not_issued`\n    *   `verification_failed_tax_id_match`\n    *   `invalid_address_po_boxes_disallowed`\n    \n*   The `payment_method_details.card.three_d_secure` fields on the Charge object have been updated. The `succeeded` and `authenticated` booleans have been removed; please use the `result` enum instead.\n    \n*   The `subscriptions` property on Customers is no longer included by default. You can [expand the list](https://stripe.com/docs/api#expanding_objects) but for performance reasons we recommended against doing so unless needed.\n    \n*   The `tiers` property on Plan is no longer included by default. You can [expand the list](https://stripe.com/docs/api#expanding_objects) but for performance reasons we recommended against doing so unless needed.\n    \n*   The `sources` property on Customers is no longer included by default. You can [expand the list](https://stripe.com/docs/api#expanding_objects) but for performance reasons we recommended against doing so unless needed.\n    \n*   The `tax_ids` property on Customers is no longer included by default. You can [expand the list](https://stripe.com/docs/api#expanding_objects) but for performance reasons we recommended against doing so unless needed.\n    \n*   The `prorate` and `subscription_prorate` parameters are deprecated in favor of `proration_behavior`.\n    \n\n### 2020-03-02![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    You can now optionally number invoices [sequentially across your account](https://stripe.com/docs/billing/invoices/customizing#invoice-prefix-number) instead of sequentially for each customer. To use this feature, enable [account level numbering](https://dashboard.stripe.com/settings/billing/invoice) in the Stripe Dashboard.\n    \n    *   To ensure invoices are numbered sequentially and without gaps, invoices that can be deleted (drafts) are only assigned numbers when finalized.\n    \n\n### 2019-12-03![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    The [`id`](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-id) field of all invoice line items have changed and are now prefixed with `il_`. The new id has consistent prefixes across all line items, is globally unique, and can be used for pagination. Old prefixes included `sub_`, `su_`, `item_`, `sli_`, and `ii_` and weren’t globally unique.\n    \n    *   You can no longer use the prefix of the id to determine the source of the line item. Instead use the `type` field for this purpose.\n    *   For lines with `type=invoiceitem`, use the `invoice_item` field to reference or update the originating Invoice Item object.\n    *   The Invoice Line Item object on earlier API versions also have a `unique_id` field to be used for migrating internal references before upgrading to this version.\n    *   When [setting a tax rate to individual line items](https://docs.stripe.com/billing/invoices/tax-rates#setting-tax-rates-on-individual-items), use the new `id`. Users on earlier API versions can pass in either a line item `id` or `unique_id`.\n    \n*   When [creating](https://docs.stripe.com/api/credit_notes/create) a post-payment credit note on an invoice:\n    \n    *   [`out_of_band_amount`](https://docs.stripe.com/api/credit_notes/create#create_credit_note-out_of_band_amount) is required if the sum of `credit_amount` and (`refund` or `refund_amount`) is less than the credit note total.\n    *   In previous API versions `out_of_band_amount` is optional and, in the case that the `credit_amount` and refund amounts are less than the credit note total, the difference will automatically be allocated to the `out_of_band_amount`.\n    \n*   Customer balances applied to all invoices are now debited or credited back to the customer when voided. Earlier, applied customer balances were not returned back to the customer and were consumed.\n    \n    *   To achieve this behavior in earlier API versions:\n        *   Set `consume_applied_balance` to `false` when voiding invoices in [`/v1/invoices/:id/void`](https://docs.stripe.com/api/invoices/void).\n        *   Set `invoice_customer_balance_settings[consume_applied_balance_on_void]` to `false` in `/v1/subscriptions` [create](https://docs.stripe.com/api/subscriptions/create) or [update](https://docs.stripe.com/api/subscriptions/update) to force this behavior for Invoices voided by a Subscription.\n        *   Set `subscription_data[invoice_customer_balance_settings][consume_applied_balance_on_void]` to `false` in `/v1/checkout/sessions` [create](https://docs.stripe.com/api/checkout/sessions/create) to force this behavior for Invoices voided by Subscriptions created with Checkout.\n    \n*   Deprecated tax information for Customers have been removed.\n    \n    *   The deprecated `tax_info` and `tax_info_verification` fields on the `Customer` object are now removed in favor of `tax_ids`.\n    *   The deprecated `tax_info` parameter on the `Customer` create and update methods are removed in favor of `tax_id_data`.\n    *   For more information, view the [migration guide](https://docs.stripe.com/billing/taxes/tax-rates#migration).\n    \n\n### 2019-11-05![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In the Accounts API, the `requested_capabilities` property is now required at creation time for Custom accounts in all countries. See [Account capabilities](https://docs.stripe.com/connect/account-capabilities) for more information.\n    \n*   On subscription schedules, `invoice_settings`, `default_payment_method`, `billing_thresholds` and `collection_method` are now nested under `default_settings`.\n    \n\n### 2019-10-17![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   There are changes to subscription schedules.\n    \n    *   Rename `renewal_behavior` to `end_behavior` with values `cancel` and `release`.\n    *   Remove `renewal_interval`.\n    *   A side effect of this change is that if you wrote a `renewal_behavior` of `none` on an old API version, `end_behavior` will be converted to `cancel` when reading the value back.\n    *   In the event that you are upgrading your API and set `renewal_behavior` as `renew`, with this API version enabled you will see `end_behavior` as `renew` however you will not be able to update `renewal_interval`. Additionally you can not set `end_behavior` to `renew`, so it is in a read-only state.\n    \n*   The `start` field on a subscription resource has been removed and is replaced by a `start_date` field which represents when the entire subscription started as opposed to when the current plan configuration started.\n    \n*   The `due_date` property is always null on invoices with `billing=charge_automatically`.\n    \n*   The `billing` attribute on invoices, subscriptions, and subscription schedules is renamed to `collection_method`.\n    \n*   The [customer object](https://stripe.com/docs/api/customers)’s `account_balance` value has been renamed to `balance`. A new [customer balance transactions API](https://stripe.com/docs/api/customer_balance_transactions) is available:\n    \n    *   Update the customer’s `balance` by incrementing or decrementing its current value by a specified `amount` and attaching `metadata` to the change.\n    *   Retrieve history of changes to the customer’s `balance`.\n    \n\n### 2019-10-08![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `relationship[account_opener]` field on a Person object has been renamed to `relationship[representative]`.\n    \n\n### 2019-09-09![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In the Accounts API, the `requested_capabilities` property is now required at creation time for accounts in Australia, Austria, Belgium, Denmark, Finland, France, Germany, Ireland, Italy, Luxembourg, the Netherlands, New Zealand, Norway, Portugal, Spain, Sweden, Switzerland, and the United Kingdom. See [Account capabilities](https://docs.stripe.com/connect/account-capabilities) for more information.\n    \n*   Adds additional `details_code` values to the `verification[document]` hash on a Person object.\n    \n\n### 2019-08-14![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    The `platform_payments` capability has been renamed to `transfers`, to better indicate the Stripe primitives that this capability supports.\n    \n    *   The `card_payments` capability has been updated to no longer imply `transfers`. You’ll now need to additionally request the `transfers` capability when creating an account.\n    \n*   The `relationship[executive]` field on a Person object will no longer be automatically set to `true` when a Person object with `relationship[account_opener]` is created. The `requirements` hash on an Account object may require that you explicitly indicate that the `account_opener` is also an `executive`. If this is the case, you will need to indicate it by setting `relationship[executive]=true`.\n    \n\n### 2019-05-16![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Bank pull payments no longer expose internal system refunds on failure.\n    \n    System refunds can still be accessed via the [list refunds](https://stripe.com/docs/api/refunds/list#list_refunds-charge) endpoint.\n    \n\n### 2019-03-14![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `application_fee` parameter on invoice API methods and the `application_fee` field on the invoice object have both been renamed to `application_fee_amount`.\n    \n*   Major\n    \n    Creating a subscription succeeds even when the first payment fails. The subscription will be created in an incomplete status, where it will remain for up to 23 hours. During that time period, it can be moved into an active state by paying the first invoice. If no successful payment is made, the subscription will move into a final incomplete\\_expired state. Updates to a non-incomplete subscription that require a payment will also succeed regardless of the payment status. Prior to this version, all creations or updates would fail if the corresponding payment failed. For more details see [our guide](https://stripe.com/docs/billing/subscriptions/overview#subscription-lifecycle).\n    \n*   There are a few changes to the [invoice object](https://stripe.com/docs/api/invoices):\n    \n    *   A `status_transitions` hash now contains the timestamps when an invoice was finalized, paid, marked uncollectible, or voided.\n    *   The `date` property has been renamed to `created`.\n    *   The `finalized_at` property has been moved into the `status_transitions` hash.\n    \n\n### 2019-02-19![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Statement descriptor behaviors for card payments [created via `/v1/charges`](https://docs.stripe.com/api/charges/create) have changed. See [our statement descriptor guide](https://docs.stripe.com/payments/charges-api#dynamic-statement-descriptor) for details.\n    \n    *   Instead of using the platform’s statement descriptor, charges created with `on_behalf_of` or `destination` will now use the descriptor of the connected account.\n    *   The full statement descriptor for a card payment may no longer be provided at charge creation. Dynamic descriptors provided at charge time will now be prefixed by the descriptor prefix set in the dashboard or via the new `settings[card_payments][statement_descriptor_prefix]` parameter in the Accounts API.\n    *   If an account has no `statement_descriptor` set, the account’s business or legal name will be used as statement descriptor.\n    *   Statement descriptors may no longer contain `*`, `'`, and `\"`.\n    \n\n*   `legal_entity[business_id_number]` has been renamed `legal_entity[business_registration_number]`.\n    \n\n*   Major\n    \n    Many properties on the Account API object have been reworked. To see a mapping of the old argument names to the new ones, see [Accounts API Argument Changes](https://docs.stripe.com/connect/updated-requirements/accounts-arguments).\n    \n    *   The `legal_entity` property on the Account API resource has been replaced with `individual`, `company`, and `business_type`.\n    *   The `verification` hash has been replaced with a `requirements` hash.\n        *   The `verification[fields_needed]` array has been replaced with three arrays to better represent when info is required: `requirements[eventually_due]`, `requirements[currently_due]`, and `requirements[past_due]`.\n        *   `verification[due_by]` has been renamed to `requirements[current_deadline]`.\n        *   The `disabled_reason` enum value of `fields_needed` has been renamed to `requirements.past_due`.\n    *   Properties on the Account API object that configure behavior within Stripe have been moved into the new `settings` hash.\n        *   The `payout_schedule`, `payout_statement_descriptor` and `debit_negative_balances` fields have been moved to `settings[payouts]` and renamed to `schedule`, `statement_descriptor` and `debit_negative_balances`.\n        *   The `statement_descriptor` field has been moved to `settings[payments][statement_descriptor]`.\n        *   The `decline_charge_on` fields have been moved to `settings[card_payments]` and renamed to `decline_on`.\n        *   The `business_logo`, `business_logo_large` and `business_primary_color` fields have been moved to `settings[branding]` and renamed to `icon`, `logo` and `primary_color`. The `icon` field additionally requires the uploaded image file to be square.\n        *   The `display_name` and `timezone` fields have been moved to `settings[dashboard]`.\n    *   `business_name`, `business_url`, `product_description`, `support_address`, `support_email`, `support_phone` and `support_url` have been moved to the `business_profile` subhash.\n    *   The `legal_entity[verification][document]` property (now located at `individual[verification]` and at `verification` in the Person API object) has been changed to a hash.\n        *   The `front` and `back` fields support uploading both sides of documents.\n        *   The `details_code` field has new error types: `document_corrupt`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_id_country_not_supported`, `document_id_type_not_supported`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, and `document_too_large`.\n    *   The `keys` property on Account creation has been removed. Platforms should now authenticate as their connected accounts with their own key via [the `Stripe-Account` header](https://stripe.com/docs/connect/authentication#stripe-account-header).\n    *   Starting with the 2019-02-19 API, the `requested_capabilities` property is now required at creation time for accounts in the U.S. See [Account capabilities](https://docs.stripe.com/connect/account-capabilities) for more information.\n    \n\n### 2019-02-11![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Some PaymentIntent statuses have been renamed\n    \n    *   `requires_source` is now `requires_payment_method`\n    *   `requires_source_action` is now `requires_action`\n    *   All other statuses are unchanged\n    \n*   `save_source_to_customer` has been renamed to `save_payment_method`.\n    \n*   `allowed_source_types` has been renamed to `payment_method_types`.\n    \n*   The `next_source_action` property on PaymentIntent has been renamed to `next_action`, and the `authorize_with_url` within has been renamed to `redirect_to_url`.\n    \n\n### 2018-11-08![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `closed` property on the [invoice object](https://stripe.com/docs/api/invoices) controls [automatic collection](https://docs.stripe.com/billing/invoices/workflow#auto_advance). `closed` has been deprecated in favor of the more specific `auto_advance` field. Where you might have set `closed=true` on invoices in the past, set `auto_advance=false`.\n    \n*   `auto_advance` now also defaults to false for one-off invoices, allowing you to control how long their [status](https://stripe.com/docs/billing/migration/invoice-states#status) stays a `draft`. A longer explanation of these series of changes is [in the documentation](https://stripe.com/docs/billing/migration/invoice-states#autoadvance).\n    \n*   Instead of checking the `forgiven` field on an invoice, check for the `uncollectible` status.\n    \n    *   Instead of setting the `forgiven` field on an invoice, [mark it as uncollectible.](https://docs.stripe.com/api/invoices/mark_uncollectible)\n    \n*   The `immutable_frozen_invoice` error code was renamed to `invoice_already_finalized`\n    \n*   The following changes only affect users of PaymentIntents as part of the private beta before November 15, 2018. If you did not use PaymentIntents before then, these don’t affect you.\n    \n    *   The `next_source_action` dictionary on PaymentIntents previously contained a key called `value`. This has been replaced with the `authorize_with_url` and `use_stripe_sdk` keys.\n    *   When creating PaymentIntents, the `attempt_confirmation` parameter has been renamed to `confirm`.\n    *   The PaymentIntent confirm endpoint no longer supports the `payment_intent` parameter. To update a PaymentIntent’s source, pass `source` or `source_data` as a top-level parameter.\n    *   The `return_url` parameter is only allowed when confirming a PaymentIntent. Passing `return_url` when updating a PaymentIntent is no longer allowed.\n    *   When creating a PaymentIntent with `transfer_data[destination]`, the `on_behalf_of` parameter must be provided and must match the account provided to `transfer_data[destination]`. This is because when you provide a destination, Stripe will [settle charges in the country of the destination account](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).\n    *   The `next_source_action` dictionary on PaymentIntents no longer contains the `source_type` property. To view the source type when retrieving PaymentIntents, [expand](https://stripe.com/docs/api/expanding_objects) the `source` parameter.\n    \n\n### 2018-10-31![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `description` field on customer endpoints has a maximum character length limit of `350` now. The `name` field on product endpoints has a maximum character length limit of `250` now. The `description` field on invoice line items has a maximum character length limit of `500` now.\n    \n*   The `billing_reason` attribute of the invoice object now can take the value of `subscription_create`, indicating that it is the first invoice of a subscription. For older API versions, `billing_reason=subscription_create` is represented as `subscription_update`.\n    \n\n### 2018-09-24![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `FileUpload` objects have been renamed to `File` objects. Additionally, the `url` attribute now contains an authenticated URL (i.e. you will need to use your secret API key to download the file’s contents.) You can [create a file link](https://docs.stripe.com/api#create_file_link) to obtain a publicly-accessible URL for the file.\n    \n\n### 2018-09-06![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When creating or updating a SKU, its attribute values no longer need to be unique. It is now possible to create multiple SKUs without attributes or with identical attribute values.\n    \n\n### 2018-08-23![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You can no longer set `at_period_end` in the subscription `DELETE` endpoints. The `DELETE` endpoint is reserved for immediate canceling going forward. Use `cancel_at_period_end` on the subscription update endpoints instead.\n    \n*   The [customer object](https://stripe.com/docs/api/customers)’s `business_vat_id` was changed from String to Hash called `tax_info`, consisting of `tax_id` and `type`, in both requests and responses.\n    \n*   The `amount` field field in the `tiers` configuration for `plans` was renamed to `unit_amount`.\n    \n\n### 2018-07-27![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The subscription endpoints no longer support the `source` parameter. If you want to change the default source for a customer, instead use the [source creation API](https://stripe.com/docs/api#create_source) to add the new source and then the [customer update API](https://stripe.com/docs/api#update_customer) to set it as the default.\n    \n*   When ending a trial on a subscription using `trial_end=now` the updated subscription will now receive a `trial_end` timestamp from the time of the request rather than being unset.\n    \n*   The `percent_off` field of coupons was changed from Integer to Float, with a precision of two decimal places.\n    \n*   When creating or updating a customer the `email` parameter must contain an email address of valid shape.\n    \n\n### 2018-05-21![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Products no longer have SKU lists embedded.\n    \n*   Major\n    \n    The `id` field of invoice line items of `type=subscription` no longer can be interpreted as a subscription ID, but instead is a unique invoice line item ID. It can be used for pagination.\n    \n*   Coupon, SKU, customer, product and plan `id`s may only contain alphanumeric and `_-` characters on creation.\n    \n*   Major\n    \n    When creating or updating subscriptions, the default value of `trial_from_plan` is now `false`, meaning that a subscription will not automatically inherit a plan’s `trial_period_days`. If a subscription is already trialing, switching to a new plan without specifying `trial_from_plan` will maintain the trial. We recommend setting an explicit trial per subscription instead of setting trials on plans.\n    \n*   When changing the plan on a subscription to a new plan with a trial (together with `trial_from_plan=true`), the new plan’s full trial period will be added to the subscription, without subtracting already-used time from previous trials.\n    \n\n### 2018-02-28![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updating a subscription set to cancel on a future date no longer clears the cancellation status. In order to clear the cancellation status, specify [`cancel_at_period_end=false`](https://docs.stripe.com/api#update_subscription-cancel_at_period_end) when updating a subscription.\n    \n\n### 2018-02-06![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   For a Source’s `card[three_d_secure]` property, adds `recommended` as a possible value. Previously, the only valid values were `not supported`, `optional`, and `required`.\n    \n\n### 2018-02-05![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Each plan object is now linked to a product object with `type=service`. The plan object `statement_descriptor` and `name` attributes have been [moved to product](https://docs.stripe.com/api#product_object-statement_descriptor) objects, and plan objects now have a `nickname` attribute. Creating a plan now requires passing a [`product` attribute](https://docs.stripe.com/api#create_plan-product) to `POST /v1/plans`. This may be either an existing product ID or a dictionary of product fields, so that you may continue to create plans without separately creating products.\n    \n*   Products now have a required `type`: `good` for products used with Orders SKUs, or `service` for products used with Subscriptions and Plans.\n    \n    *   On API versions older than 2018-02-05, `type` is set to `good` by default, and `GET /v1/products` omits products with `type=service` from the list. (If you want to see products with `type=service` on API versions older than 2018-02-05, you can specify [`type=service`](https://docs.stripe.com/api/products/list#list_products-type) when listing products.)\n    \n*   Major\n    \n    Allows a new subscription’s first full invoice to be on a future date, by specifying `billing_cycle_anchor`, with an optional proration up to that date.`billing_cycle_anchor` on its own is available retroactively to past versions, and starting in this version, `billing_cycle_anchor` can be combined with a trial, enabling a free trial to be followed by a prorated period, followed by a fixed billing cycle.\n    \n*   Prorations on free plans now create $0 invoices. In past versions, these did not create invoices.\n    \n\n### 2018-01-23![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When being viewed by a platform, cards and bank accounts created on behalf of connected accounts will have a fingerprint that is universal across all connected accounts. For accounts that are not connect platforms, there will be no change.\n    \n\n### 2017-12-14![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates invoice payment attempts to return a `card_error` when the charge is declined. This aligns `/v1/invoices/{INVOICE_ID}/pay` with `/v1/charges`.\n    \n*   Updates invoice line items to always have a `description` set, including invoice line items generated from subscription items.\n    \n\n### 2017-08-15![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds `not_required` as a possible `redirect[status]` value on the `Source` object. Previously, optional redirects were marked as `succeeded`.\n    \n\n### 2017-06-05![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds `under_review` as a possible `verification[disabled_reason]` value on the `Account` object. Previously, an under review status used the value `other`.\n    \n\n### 2017-05-25![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `managed` Boolean property on `Account` objects with `type`, whose possible values are: `standard`, `express`, and `custom`. A `type` value is required when creating accounts. The `standard` type replaces `managed: false`, and the `custom` type replaces `managed: true`.\n    \n*   Updates the `previous_attributes` property on `Event` objects to show entire sub-arrays when those arrays have changes. Previously, those sub-arrays only showed the specific fields that changed.\n    \n*   Updates the `request` property on the `Event` object to be a hash containing the request ID and the idempotency key. Previously, `request` was just the ID.\n    \n*   Renames the `user_id` property on Connect-related event objects to `account`.\n    \n\n### 2017-04-06![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Splits the `Transfer` object into `Payout` and `Transfer`. The `Payout` object represents money moving from a Stripe account to an external account (bank or debit card). The `Transfer` object now only represents money moving between Stripe accounts on a Connect platform. For more details, see [https://stripe.com/docs/transfer-payout-split](https://stripe.com/docs/transfer-payout-split).\n    \n\n### 2017-02-14![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `dispute` property on the `Charge` object to contain the ID of an associated dispute. Previously, `dispute` contained the entire `Dispute` object. You can [expand this property](https://stripe.com/docs/api#expanding_objects) when retrieving charges to render the full `Dispute` object as before.\n    \n*   Updates the `outcome[rule]` property on the `Charge` object to contain the ID of the rule that blocked the charge. Previously, `outcome[rule]` contained the entire `Rule` object. You can [expand this property](https://stripe.com/docs/api#expanding_objects) when retrieving charges to render the full `Rule` object as before.\n    \n\n### 2017-01-27![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `sourced_transfers` property from the `Balance Transaction` object.\n    \n\n### 2016-10-19![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Returns the status code 403 when an API request is made with insufficient permission. Previously, the API returned a 401 status code.\n    \n\n### 2016-07-06![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the list all subscriptions call to also return canceled subscriptions. The endpoint now supports fetching only canceled subscriptions by specifying `status=canceled`. You can now retrieve a single canceled subscription by providing its ID.\n    \n\n### 2016-06-15![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `active` property on the `Product` object so that setting `active` to false no longer marks the product’s SKUs as inactive.\n    \n\n### 2016-03-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `currencies_supported` property from the `Account` object. You can find a list of supported currencies by retrieving a `Country Spec` object for the country of the account.\n    \n\n### 2016-02-29![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds postal code validation for legal entity addresses when creating and updating accounts.\n    \n\n### 2016-02-23![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the behavior of orders so that changing an order from `paid` or `fulfilled` to `canceled` or `returned` automatically refunds the associated charge. Previously, attempting to change an order from `paid` or `fulfilled` to `canceled` or `returned` raised an error if the associated charge had not already been refunded.\n    \n\n### 2016-02-22![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Returns an error on attempts to add more than 250 invoice items to an invoice.\n    \n\n### 2016-02-19![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Renames the `name` property on the `Bank Account` object to `account_holder_name`.\n    \n\n### 2016-02-03![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the returned `Account` object to only show sub-properties of `legal_entity` that are applicable to the account’s country, or that were previously provided.\n    \n\n### 2015-10-16![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Returns an error if a `tax_percent` is provided without a `plan` during a customer update or creation.\n    \n\n### 2015-10-12![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Returns an error when invalid parameters are passed in the card or bank account hash during token, source, or external account creation. Changes the error code returned for missing required parameters in the card or bank account hash to 400. Previously, a 402 code was returned.\n    \n\n### 2015-10-01![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `bank_accounts` property on the `Account` object with `external_accounts`. Replaces the `bank_account` value in the `fields_needed` property with `external_account`.\n    \n\n### 2015-09-23![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `charge` property on the `Invoice` object to always show the invoice’s latest charge, regardless of the charge’s source (e.g, a card or a bank account). Removes the `payment` property, which previously reflected a non-card charge.\n    \n*   Major\n    \n    Updates the list all charges call to return all charges, including those made to bank accounts and other non-card sources. Previously, it only returned charges made to cards. Updates the deprecated `offset` parameter to only be supported when filtering by source type.\n    \n\n### 2015-09-08![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates API rate limit errors to return a 429 HTTP status code instead of 400. They also no longer return a `rate_limit` error code.\n    \n\n### 2015-09-03![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Returns an error if a request reuses an idempotency token with different parameters than the original request. Previously, errors were only returned for reusing the same idempotency token across different API endpoints.\n    \n\n### 2015-08-19![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `Balance Transaction` object to provide the refund ID or dispute ID as the `source` value when the balance transaction is associated with a refund or dispute. Previously, the original charge ID was shown.\n    \n\n### 2015-08-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds date validation to the `tos_acceptance[date]` property on the `Account` object. Accepted values are timestamps after 2009 and before the current moment.\n    \n\n### 2015-07-28![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The `balance.available` event is now triggered when immediate transfers are processed.\n    \n\n### 2015-07-13![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `verification[contacted]` Boolean property on the `Account` object with a `verification[disabled_reason]` string that describes why the account is unable to make transfers or charges.\n    \n\n### 2015-07-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `status` property on the `Transfer` object so that transfers not yet submitted to the bank are still `pending` and transfers submitted to the bank that have not yet arrived are `in_transit`. Previously, both states were described as `pending`.\n    \n\n### 2015-06-15![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `payout_schedule[delay_days]` property on the `Account` object to return an error if provided when the `interval` is set to `manual`. Manual payouts always use the minimum `delay_days` value.\n    \n\n### 2015-04-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `period[end]` property on proration invoice line items to reflect the subscription’s `current_period_end` property when the update and proration was made. A proration invoice line item’s `period[start]` and `period[end]` properties now represent the prorated adjustment interval. Previously, `period[end]` marked the time at which the proration was made, and was the same as `period[start]`.\n    \n*   Updates the `Invoice` object to change the order of the `lines` list: first invoice items in reverse chronological order, followed by the subscription, if applicable.\n    \n\n### 2015-03-24![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates coupons so they no longer apply to negative invoice items by default. Previously, coupons applied to all non-proration invoice items. To allow a coupon to apply to a negative invoice item, pass `discountable=true` when creating or updating the invoice item.\n    \n\n### 2015-02-18![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `status` property on the `Charge` object to have a value of `succeeded` for successful charges. Previously, the `status` property would be `paid` for successful charges.\n    \n*   Major\n    \n    Replaces the `card` property on the `Charge` object with `source`. Provide this parameter with a `Card` token, as before, or with a `Source` token that has an `object` value of `card`. Older API versions return both the `card` and `source` properties on `Charge`.\n    \n*   Major\n    \n    Replaces the `cards` and `default_card` properties on the `Customer` object with `sources` and `default_source`. Both properties can represent `Card` objects, as before, and `Source` objects with an `object` value of `card`. Older API versions return both the new and old properties on `Customer`. Replaces the `customer.card.*` and `customer.bank_account.*` events with `customer.source.*`.\n    \n\n### 2015-02-16![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Renames the `transfer.canceled` event to `transfer.reversed`.\n    \n\n### 2015-02-10![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds the value `warning_closed` to the `status` property on the `Dispute` object.\n    \n*   Updates test mode transfers to require sufficient funds in your available test mode balance (for consistency with live mode transfers). Add funds directly to your available test mode balance—bypassing the pending balance—by creating a charge using the special test card number **4000 0000 0000 0077**.\n    \n\n### 2015-01-26![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the presentation of nested hashes in the `previous_attributes` property of events to only show the difference. For example, a change from `{address: {line1: \"Foo\", line2: \"Bar\"}}` to `{address: {line1: \"Foo\", line2: \"Baz\"}}` is represented as `{previous_attributes: {address: {line2: \"Baz\"}}}`. Previously, it was represented as `{previous_attributes: {address: {line1: \"Foo\", line2: \"Baz\"}}}`.\n    \n*   Updates the `canceled_at` property on the `Subscription` object to always be the timestamp from the API call or invoice payment failure that canceled the subscription. Previously, `canceled_at` reflected “at period end” subscription cancellations, too. The `ended_at` property still reflects the time that the subscription actually stopped.\n    \n\n### 2015-01-11![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `mimetype` property from the `File Upload` object. Returns simplified file types in the `type` property and uses simpler naming conventions than mimetypes (e.g., `type` contains **pdf** instead of **application/pdf**).\n    \n\n### 2014-12-22![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `Card` object so a value of `unchecked` for the `address_line1_check`, `address_zip_check`, or `cvc_check` properties means the property has not been checked. Previously, it meant the issuing bank does not support the particular check. That state now shows as `unavailable`. Unchecked properties are checked when a card is charged or added to a `Customer` object.\n    \n*   Removes the `customer` property from the `Card` object that appears on the `Token` object.\n    \n\n### 2014-12-17![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `statement_description` property on the `Charge`, `Invoice`, `Plan`, and `Transfer` objects with `statement_descriptor`. To determine what appears on a customer’s transaction, `statement_description` is appended to your Stripe account’s statement descriptor while `statement_descriptor` sets the full statement value. If not on this API version or newer, providing a `statement_descriptor` still triggers the `statement_description` behavior. Regardless of API version, the `statement_description` behavior does not apply with PaymentIntents.\n    \n*   Updates the Accounts API to require API version 2014-12-17 or newer.\n    \n\n### 2014-12-08![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `Dispute` object so evidence can be provided as a hash of typed fields rather than a single block of text. Replaces the `evidence_due_by` property with the `evidence_details` hash, which includes `due_by` and `submission_count` (for the number of times a dispute has been submitted).\n    \n\n### 2014-11-20![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates disputes that are won to return the status `won` even if the charge was refunded. Previously, a dispute won that had a refunded charge would transition to `charge_refunded`.\n    \n*   Updates the `metadata` property of the `Invoice Item` object with a type of `subscription` to show the subscription’s metadata. Previously, it showed the plan’s metadata.\n    \n\n### 2014-11-05![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Renames the `charge_enabled` and `transfer_enabled` properties on the `Account` object to `charges_enabled` and `transfers_enabled`.\n    \n\n### 2014-10-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Prevents publishable keys from retrieving `Token` objects. When a card or bank account token is created with a publishable key, the `fingerprint` property is not included in the response.\n    \n\n### 2014-09-08![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `disabled`, `validated`, and `verified` properties on the `Bank Account` object with a `status` enum property.\n    \n\n### 2014-08-20![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Adds three values to the `status` property on the `Dispute` object: `warning_needs_response`, `warning_under_review`, and `charge_refunded`. Replaces the `balance_transaction` property of the `Dispute` object with `balance_transactions` (this provides greater detail around funds withdrawn and reinstated as a result of disputes).\n    \n\n### 2014-08-04![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `other_transfers`, `summary`, and `transactions` properties from automatic transfer responses in favor of the balance history endpoint (**/v1/balance/history**). _Update_: As of June 20, 2024, these properties are no longer available in any versions, including those prior to 2014-08-04.\n    \n\n### 2014-07-26![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Changes the `refunds` property on the `Application Fee` object from an array to a sublist object, which contains the `data`, `has_more`, and `url` properties. This makes application fee refunds consistent with charge refunds.\n    \n\n### 2014-07-22![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates proration line items on invoices to include the associated subscription’s plan and quantity.\n    \n\n### 2014-06-17![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Changes the `refunds` property on the `Charge` object from an array to a sublist object, which contains the `data`, `has_more`, and `url` properties.\n    \n\n### 2014-06-13![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Renames the `type` property on the `Card` object to `brand`.\n    \n\n### 2014-05-19![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `account` property on the `Transfer` object with `bank_account`. The `bank_account` property is only included when the transfer is made to a bank account.\n    \n\n### 2014-03-28![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Removes the `count` property from list responses.\n    \n\n### 2014-03-13![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Renames the `statement_descriptor` property on the `Transfer` object to `statement_description`.\n    \n\n### 2014-01-31![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Replaces the `subscription` property on the `Customer` object with the `subscriptions` property, as customers can have multiple subscriptions.\n    \n*   Ignores trial dates on canceled subscriptions when automatically computing trial end dates for new subscriptions.\n    \n\n### 2013-12-03![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `user` and `user_email` properties on the `Application Fee` object with an expandable `account` property.\n    \n*   Updates the refunding of application fees to be proportional to the amount of the charge refunded (when setting `refund_application_fee=true`). Previously, the entire application fee was refunded even when only part of the charge was.\n    \n\n### 2013-10-29![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Changes coupon behavior so that applying an amount-off coupon to an invoice does not increase the `Customer` account balance if the discount is greater than the invoice amount. Coupons are ignored—and not counted as redeemed—when applied to zero-cost invoices. This change does not apply to coupons created on earlier API version.\n    \n\n### 2013-08-13![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `fee` and `fee_details` properties from the `Charge` and `Transfer` objects. Fee information is in the corresponding balance transaction.\n    \n\n### 2013-08-12![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Allows the `description` property on `Customer`, `Charge`, `InvoiceItem`, and `Recipient` objects, and the `email` property on `Customer` and `Recipient` objects, to be set to null by providing empty string values in POST requests.\n    \n\n### 2013-07-05![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Replaces the `active_card` property on the `Customer` object with a `cards` sublist and a `default_card` ID property.\n    \n\n### 2013-02-13![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `Charge` object so disputed charges include another `stripe_fee` object in the `fee_details` array, representing the dispute fees. Includes the dispute fees in the fee total on the `Charge` object.\n    \n\n### 2013-02-11![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Major\n    \n    Updates the pay invoice call to return an error when the charge is not successful. Previously, the API would return a 200 status and set the invoice’s `paid` property to false.\n    \n\n### 2012-11-07![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Replaces the `disputed` property on the `Charge` object with `dispute`.\n    \n\n### 2012-10-26![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the `Invoice` object format. The `lines` property is now a _sublist_, a paginated list of all items that contribute to the invoice.\n    \n\n### 2012-09-24![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the extraneous `id` property from the `Discount` object.\n    \n\n### 2012-07-09![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `uncaptured` property from the `Customer` object.\n    \n\n### 2012-06-28![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   (Changes introduced in this version have since been removed.)\n\n### 2012-06-18![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `amount` and `currency` properties from the `Token` object.\n    \n\n### 2012-03-25![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `next_recurring_charge` property from the `Customer` object. Use the upcoming invoice call instead.\n    \n\n### 2012-02-23![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Shows all response fields, even those with null values. Previously, the API hid fields with null values.\n    \n\n### 2011-11-17![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   (Changes introduced in this version have since been removed.)\n\n### 2011-09-15![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the card validation behavior when creating tokens.\n    \n\n### 2011-08-01![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Updates the list format. New list objects have a `data` property that represents an array of objects (by default, 10) and a `count` property that represents the total count.\n    \n\n### 2011-06-28![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removes the `identifier` property (duplicate of `id`) from the `Plan` object.\n    \n\n### 2011-06-21![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Raises exceptions on unrecognized parameters passed to the API instead of silently allowing and ignoring them.",
  "title": "API upgrades | Stripe Documentation",
  "description": "Keep track of changes and upgrades to the Stripe API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tax_codes/object",
  "markdown": "# The Tax Code object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   A detailed description of which types of products the tax code represents.\n    \n*   A short name for the tax code.\n    \n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [Retrieve a tax code](https://docs.stripe.com/api/tax_codes/retrieve)\n\nRetrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a tax code object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_codes/txcd_99999999 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [List all tax codes](https://docs.stripe.com/api/tax_codes/list)\n\nA list of [all tax codes available](https://stripe.com/docs/tax/tax-categories) to add to Products in order to allow specific tax calculations.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a data property that contains an array of up to limit tax codes, starting after tax code starting\\_after. Each entry in the array is a separate tax code object. If no more tax codes are available, the resulting array will be empty. This request should never return an error.\n\n```\ncurl -G https://api.stripe.com/v1/tax_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txcd_99999999\",      \"object\": \"tax_code\",      \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",      \"name\": \"General - Tangible Goods\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Tax Code object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event",
  "markdown": "# Meter Events | Stripe API Reference\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [The Meter Event object](https://docs.stripe.com/api/billing/meter-event/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   A unique identifier for the event.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The payload of the event. This contains the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Create a billing meter event](https://docs.stripe.com/api/billing/meter-event/create)\n\nCreates a billing meter event\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   The payload of the event. This must contain the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We’ll enforce uniqueness within a rolling 24 hour period.\n    \n*   The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.\n    \n\n### Returns\n\nReturns a billing meter event\n\nPOST /v1/billing/meter\\_events\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d event_name=ai_search_api \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"=cus_NciAYcXfLnqBoz \\  -d identifier=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Meter Events | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/checkout/sessions",
  "markdown": "# Sessions | Stripe API Reference\n\n## [The Session object](https://docs.stripe.com/api/checkout/sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the customer for this Session. For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout will create a new customer object based on information provided during the payment flow unless an existing customer was provided when the Session was created.\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n    If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The line items purchased by the customer.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The mode of the Checkout Session.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `payment`<br><br>Accept one-time payments for cards, iDEAL, and more. |\n    | `setup`<br><br>Save payment details to charge your customers later. |\n    | `subscription`<br><br>Use Stripe Billing to set up fixed-price subscriptions. |\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can’t confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n    \n*   The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer’s order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `no_payment_required`<br><br>The payment is delayed to a future date, or the Checkout Session is in `setup` mode and doesn’t require a payment at this time. |\n    | `paid`<br><br>The payment funds are available in your account. |\n    | `unpaid`<br><br>The payment funds are not yet available in your account. |\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site.\n    \n*   The status of the Checkout Session, one of `open`, `complete`, or `expired`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The checkout session is complete. Payment processing may still be in progress |\n    | `expired`<br><br>The checkout session has expired. No further processing will occur |\n    | `open`<br><br>The checkout session is still in progress. Payment processing has not started |\n    \n*   #### \n    \n    success\\_urlnullable string\n    \n    The URL the customer will be directed to after the payment or subscription creation is successful.\n    \n*   The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://docs.stripe.com/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.` This value is only present when the session is active.\n    \n\n### More attributes\n\n*   #### \n    \n    after\\_expirationnullable object\n    \n*   #### \n    \n    allow\\_promotion\\_codesnullable boolean\n    \n*   #### \n    \n    amount\\_subtotalnullable integer\n    \n*   #### \n    \n    amount\\_totalnullable integer\n    \n\n*   #### \n    \n    billing\\_address\\_collectionnullable enum\n    \n*   #### \n    \n    cancel\\_urlnullable string\n    \n*   #### \n    \n    client\\_secretnullable string\n    \n\n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    currency\\_conversionnullable object\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    customer\\_creationnullable enum\n    \n*   #### \n    \n    customer\\_detailsnullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    payment\\_linknullable stringExpandable\n    \n*   #### \n    \n    payment\\_method\\_collectionnullable enum\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    phone\\_number\\_collectionnullable object\n    \n*   #### \n    \n    recovered\\_fromnullable string\n    \n*   #### \n    \n    redirect\\_on\\_completionnullable enum\n    \n*   #### \n    \n    saved\\_payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    setup\\_intentnullable stringExpandable\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    tax\\_id\\_collectionnullable object\n    \n*   #### \n    \n    total\\_detailsnullable object\n    \n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Create a Session](https://docs.stripe.com/api/checkout/sessions/create)\n\nCreates a Session object.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.\n    \n*   ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recently saved card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://docs.stripe.com/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, otherwise the most recently saved card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer’s card details.\n    \n    If the Customer already has a valid [email](https://docs.stripe.com/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.\n    \n    If blank for Checkout Sessions in `subscription` mode or with `customer_creation` set as `always` in `payment` mode, Checkout will create a new Customer object based on information provided during the payment flow.\n    \n    You can set [`payment_intent_data.setup_future_usage`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.\n    \n*   If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired unless setup mode\n    \n    A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://docs.stripe.com/api/prices).\n    \n    For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.\n    \n    For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `payment`<br><br>Accept one-time payments for cards, iDEAL, and more. |\n    | `setup`<br><br>Save payment details to charge your customers later. |\n    | `subscription`<br><br>Use Stripe Billing to set up fixed-price subscriptions. |\n    \n*   #### \n    \n    return\\_urlstringRequired conditionally\n    \n    The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site. This parameter is required if ui\\_mode is `embedded` and redirect-based payment methods are enabled on the session.\n    \n*   #### \n    \n    success\\_urlstringRequired conditionally\n    \n    The URL to which Stripe should send customers when payment or setup is complete. This parameter is not allowed if ui\\_mode is `embedded`. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://docs.stripe.com/payments/checkout/custom-success-page).\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    currencyenumRequired conditionally\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    redirect\\_on\\_completionenum\n    \n*   #### \n    \n    saved\\_payment\\_method\\_optionsobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n### Returns\n\nReturns a Session object.\n\nPOST /v1/checkout/sessions\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode success_url=\"https://example.com/success\" \\  -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/checkout/sessions/retrieve)\n\nRetrieves a Session object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object.\n\nGET /v1/checkout/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Checkout Session's line items](https://docs.stripe.com/api/checkout/sessions/line_items)\n\nWhen retrieving a Checkout Session, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Session line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1N4BEoLkdIwHu7ixWtXug1yk\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items\"}\n```",
  "title": "Sessions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/manual-currency-prices",
  "markdown": "# Manual currency prices | Stripe DocumentationThe Stripe Docs logo\n\n## Present local currencies to customers with manual currency prices.\n\nStripe supports manually defining prices in different currencies when creating [products](https://docs.stripe.com/products-prices/overview#get-started). However, Stripe recommends leveraging [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) instead of manual currency prices to reduce currency exchange rate fluctuation risk and to automatically enable support for 50+ local currencies.\n\nUse manual currency prices over Adaptive Pricing when:\n\n*   Adaptive Pricing isn’t yet [supported](https://docs.stripe.com/payments/checkout/adaptive-pricing#restrictions) for your business or Checkout configuration (reach out to [adaptive-pricing-beta@stripe.com](mailto:adaptive-pricing-beta@stripe.com) for Beta inquiries).\n*   You’re supporting a region where you’re comfortable taking on fluctuations in the currency’s exchange rate.\n\nManually defined multi-currency prices override Adaptive Pricing for those currencies, even if it’s enabled.\n\n## Add multiple currencies to a price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to a product in the [Dashboard](https://dashboard.stripe.com/products?active=true)\n2.  Click **+Add another price** to create a new price.\n3.  Fill in the price and select a currency. This first currency is the price’s default currency. Make sure all of your prices have the same default currency.\n4.  Click **+Add a price by currency** to search and select from supported currencies, adding them to your price.\n5.  Use the multi-currency price you created by passing its ID into [line items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price) when you create a Checkout Session.\n\n[](#local-payment-methods)\n\nCheckout and Payment Links present customers with popular payment methods compatible with their local currencies.\n\nFor example, for customers located in the Netherlands, Checkout and Payment Links convert prices to Euros and also present popular Dutch payment methods like iDEAL.\n\nYou can configure which payment methods you accept in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#pricing-table)\n\nManual currency prices also work with [pricing tables](https://docs.stripe.com/payments/checkout/pricing-table). To render local currencies to customers viewing your pricing table, all of the pricing table’s Prices must include the customer’s local currency in their `currency_options`. They must also include a `tax_behavior` for the given currency if you’re using Stripe Tax.\n\n[](#supported-integrations)\n\nCheckout automatically presents the local currency to customers if all of the following are true:\n\n*   The Checkout Session’s prices, shipping rates, and discounts have the relevant currency in their `currency_options`.\n*   If a price on the Checkout Session has an upsell, the upsell’s price has the relevant currency in its `currency_options`.\n*   For a Checkout Session using Stripe Tax, the `tax_behavior` on the Checkout Session is specified for the relevant currency for all of the Checkout Session’s prices, shipping rates, and discounts.\n*   You didn’t specify a currency during Checkout Session creation.\n\nIf Checkout can’t localize the currency because the relevant currency option or `tax_behavior` is missing, the Session presents to the customer in the default currency. The default currency must be the same across all prices, shipping rates, and discounts.\n\n[](#restrictions)\n\nPrice localization isn’t available for Checkout Sessions that:\n\n*   Use manual tax rates.\n*   Use `payment_intent_data.application_fee_amount` or `payment_intent_data.transfer_data.amount`.\n\n[](#fees)\n\nOur standard transaction fees apply to automatically converted transactions:\n\n*   Cards or payment methods fee\n*   International cards or payment methods fee (if applicable)\n*   Currency conversion fee\n\nSee our [pricing page](https://stripe.com/pricing) for more details about these fees.\n\n[](#specify-currency)\n\nWhen you use multi-currency Prices in a Session, Checkout automatically handles currency localization for your customers.\n\nHowever, you can override this behavior by specifying a currency during Checkout Session creation.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"={{PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"https://example.com/success\" \\   -d currency=eur`\n\nIn the example above, the Checkout Session’s currency is always EUR (`eur`) regardless of a user’s location.\n\n[](#testing)\n\nTo test local currency presentment for Checkout, Payment Links, and the [pricing table](https://docs.stripe.com/payments/checkout/pricing-table), pass in a location-formatted customer email that includes a suffix in a `+location_XX` format in the local part of the email. `XX` must be a valid [two-letter ISO country code](https://www.nationsonline.org/oneworld/country_code_list.htm).\n\nFor example, to test currency presentment for a customer in France, pass in an email like `test+location_FR@example.com`.\n\nWhen you visit the URL for a Checkout Session, Payment Link, or pricing table created with a location-formatted email, you see the same currency as a customer does in the specified country.\n\n### Testing Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create a Checkout Session, pass the location-formatted email as [customer\\_email](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_email) to simulate Checkout from a particular country.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d success_url=\"https://example.com/success\" \\   --data-urlencode customer_email=\"test+location_FR@example.com\"`\n\nYou can also create a [Customer](https://docs.stripe.com/api/customers/create) and specify their email that contains the `+location_XX` suffix. Stripe test cards work as usual.\n\nWhen it’s possible to present the customer’s local currency in Checkout, the [Checkout Session](https://docs.stripe.com/api/checkout/sessions/object) object changes. Fields like `currency`, `payment_method_types`, and `amount_total` reflect the local currency and price.\n\n### Testing Payment Links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor Payment Links, pass the location-formatted email as the `prefilled_email` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to test currency presentment for customers in different countries.\n\n### Testing Pricing table![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor the pricing table, pass the location-formatted email as the [customer-email](https://docs.stripe.com/payments/checkout/pricing-table#customer-email) attribute to test currency presentment for customers in different countries.",
  "title": "Manual currency prices | Stripe Documentation",
  "description": "Present local currencies to customers with manual currency prices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/products-prices/how-products-and-prices-work",
  "markdown": "# How products and prices work\n\n## Learn how products and prices in Stripe model your business.\n\nProducts and prices are core resources for many Stripe integrations. Products define what your business offers, whether that’s goods or services. Prices define how much and how often to charge for products.\n\nYou can create products and prices in Stripe or [import](https://docs.stripe.com/products-prices/getting-started#import-products-prices) them into Stripe through the [API](https://docs.stripe.com/api/products). After you create products and prices, you can use them with [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions/create), [Payment Links](https://docs.stripe.com/payment-links), [Invoices](https://docs.stripe.com/invoicing), [Quotes](https://docs.stripe.com/quotes/create), or a custom integration to create [Subscriptions](https://docs.stripe.com/billing).\n\n## What is a product?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProducts describe the specific goods or services you offer to your customers.\n\n*   If you’re an e-commerce store selling clothing, one of your products might be a large white t-shirt. In Stripe, you can create a separate product for each size and color combination.\n*   If you’re a SaaS platform, you might have basic and premium pricing tiers. In this case, both basic and premium are separate products because they typically offer unique attributes or features.\n*   If you’re a donation platform that accepts donations for several different causes, each cause is a different product.\n\nEach product has a unique ID. Unlike most Stripe resources, you can choose the ID of the product yourself. We recommend choosing an ID that makes it easy to integrate Stripe with other systems you use. For example, if you’re selling physical goods, you can use the internal ID from your own systems.\n\nWhen you create a product in Stripe, you have to provide a name. You can optionally add other attributes, like a description or image. If you’re using [Stripe Tax](https://docs.stripe.com/tax), you can also define a [tax code](https://docs.stripe.com/tax/tax-codes) for each product, such as pet grooming, e-books, or SaaS. Stripe Tax uses the tax code to automatically calculate and collect sales taxes during purchase.\n\n## What is a price?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn Stripe, price objects are more than a numerical amount to pay. Prices include additional information, such as tax behavior, volume tiers, and recurrence intervals for subscriptions. You don’t need to create new prices for each purchase–if you’re selling a product for one price, you only need to create one price. You can also make this price the [default price](https://docs.stripe.com/products-prices/manage-prices#default-price) for the product.\n\nPrices can either be one-time or recurring. Subscriptions use recurring prices to charge the customer at an interval, such as “once a month.” If you sell the same service at several different subscription intervals, it’s best to create multiple recurring prices for the same product. Learn more about [pricing models](https://docs.stripe.com/products-prices/pricing-models#flat-rate).\n\nA single Price can support multiple currencies. For example, if you sell a product in the USA for 10 USD, Europe for 9 EUR, and Japan for 1300 JPY, the same Price object can cover all three currencies. Each purchase uses one of the Price’s supported currencies, depending on how you use the Price in your integration. Learn more about [multi-currency Prices](https://docs.stripe.com/products-prices/pricing-models#multicurrency).\n\nBecause a product can have multiple prices associated with it, you’ll need to specify which price to use when creating Checkout Sessions, Payment Links, Invoices, Quotes, or Subscriptions.\n\nMost prices define a fixed `unit_amount`, but you can also configure the price to function with different tiers or usage-based models. Learn more about [tiered pricing](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing) and [usage-based pricing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing).\n\nIf you’re using Stripe Tax, you can specify the `tax_behavior` for the price to determine whether the tax is already included in the amount, or if it needs to be added. Learn more about [tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior).\n\n## Working with products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create or import products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe quickest way to get started with products and prices is to create them through the [Stripe Dashboard](https://dashboard.stripe.com/products).\n\nIf you have a large product catalog that you manage using a spreadsheet or other software, you might prefer to import the product catalog programmatically using the [Products](https://docs.stripe.com/api/products) and [Prices](https://docs.stripe.com/api/prices) API. Learn more about [import products and prices](https://docs.stripe.com/products-prices/getting-started#import-products-prices).\n\nIf you need to charge an amount of money that’s different for each transaction (for example, a user-selected donation amount), you can create the product, but not create a price. Instead, you can use the `price_data` parameter when creating Checkout Sessions or Subscriptions to set the particular price.\n\n### Use products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a Checkout Session, specify the price `id` for each line item. The Checkout Session uses the price to compute the order total. It also retrieves the product associated with the price, then uses the product’s name and image to render the Checkout page.\n\n## Manage existing products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update product details through the Dashboard or API. For example, you might change the description of a product, or add new product images to use on the [Checkout](https://docs.stripe.com/payments/checkout) page.\n\nIf you’re no longer selling a product, you can archive both it and the price through the Dashboard by clicking the **Archive** button, or through the API by setting `active` to `false`. We store the archived product and price information indefinitely to maintain records of past transactions.\n\nIn general, you can’t delete products or prices, you can only archive them. In certain cases, you can use the Dashboard to delete a price that has never been used, or to delete a product that doesn’t have any prices set.\n\nTo change the price of a product, create a new price for the new amount, then archive the existing price by setting `active` to false. Instead of changing the `unit_amount` on the existing price, you need to create a new price to make sure that we keep the existing price as an immutable record of past transactions.\n\nYou can set a [default price](https://docs.stripe.com/products-prices/manage-prices#default-price) on a product to specify the most common price to present to customers. You can change the default price to another price later, such as if you increase the price of your product.\n\n## Understand product and price compatibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNot all features of products and prices are compatible with all Stripe APIs. Consult the following table for compatibility information.\n\n| Feature | Checkout | Payment Links | Quotes | Subscriptions | Invoices |\n| --- | --- | --- | --- | --- | --- |\n| Product images |     |     | Ignored\\* | Ignored\\* | Ignored\\* |\n| Product descriptions |     |     |     | Ignored\\* | Ignored\\* |\n| Product tax codes |     |     |     |     |     |\n| Product statement descriptor |     |     | Ignored\\* |     |     |\n| Recurring prices |     |     |     |     |     |\n| Multi-currency prices |     |     | Ignored\\* |     | Ignored\\* |\n| Tiered prices |     | Disallowed\\* |     |     |     |\n| Decimal amounts (for example, charging half-a-cent per unit) |     | Disallowed\\* |     |     |     |\n| Usage-based prices |     | Disallowed\\* |     |     |     |\n| Customer chooses price |     |     | Disallowed\\* | Disallowed\\* | Disallowed\\* |\n\n## Understand limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe don’t limit the number of customers, coupons, products, prices, or most other objects that you can create in your Stripe account.\n\nWhen using recurring prices with Subscriptions:\n\n*   All prices on a Subscription must have the same [`recurring.interval`](https://docs.stripe.com/api/prices/create#create_price-recurring-interval) and [`recurring.interval_count`](https://docs.stripe.com/api/prices/create#create_price-recurring-interval_count)\n*   The maximum interval time period of a price is 3 years",
  "title": "How products and prices work | Stripe Documentation",
  "description": "Learn how products and prices in Stripe model your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/multi-currency-customers",
  "markdown": "# Multi-currency customers | Stripe DocumentationThe Stripe Docs logo\n\nBefore you invoice a customer, create an invoice item by passing in the customer `id`, `amount`, and `currency`. Only add invoice items to a single customer at a time to avoid adding them to the wrong one.\n\nThe maximum number of invoice items is 250. Creating an invoice adds up to 250 pending invoice items with the remainder to be added on the next invoice. To see your customer’s pending invoice items, see the **Customer details** page or set the [pending](https://docs.stripe.com/api/invoiceitems/list#list_invoiceitems-pending) attribute to `true` when you use the API to list all of the invoice items.\n\n#### Note\n\nA CAD invoice doesn’t apply a customer credit balance denominated in USD or any other currency other than CAD. Additionally, any amount-off coupons you applied to the customer that are denominated in non-CAD currency are ignored.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d amount=1000 \\  -d currency=cad`\n\nYou must pass in the `currency` parameter when you issue a multi-currency invoice. The `currency` parameter dictates which invoice items get pulled into the invoice. For example, if you were to create two invoice items—one in USD and the other in CAD—for the same customer, setting the currency to CAD would only pull in the CAD invoice item (ignoring the USD invoice item).\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d collection_method=send_invoice \\  -d days_until_due=30 \\  -d pending_invoice_items_behavior=include \\  -d currency=cad`",
  "title": "Multi-currency customers | Stripe Documentation",
  "description": "Change the billable currency for any customer to accept multiple currencies.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/feature",
  "markdown": "# Feature | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fentitlements%2Ffeature)\n\n## [The Feature object](https://docs.stripe.com/api/entitlements/feature/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More attributes\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {}}\n```\n\n## [Create a feature](https://docs.stripe.com/api/entitlements/feature/create)\n\nCreates a feature\n\n### Parameters\n\n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\nPOST /v1/entitlements/features\n\n```\ncurl https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My super awesome feature\" \\  -d lookup_key=my-super-awesome-feature\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {}}\n```\n\n## [List all features](https://docs.stripe.com/api/entitlements/feature/list)\n\nRetrieve a list of features\n\n### Parameters\n\n*   If set, filter results to only include features with the given archive status.\n    \n*   If set, filter results to only include features with the given lookup\\_key.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of your features\n\nGET /v1/entitlements/features\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"object\": \"entitlements.feature\",      \"livemode\": false,      \"name\": \"My super awesome feature\",      \"lookup_key\": \"my-super-awesome-feature\",      \"active\": true,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Updates a feature](https://docs.stripe.com/api/entitlements/feature/updates)\n\nUpdate a feature’s metadata or permanently deactivate it.\n\n### Parameters\n\n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More parameters\n\n### Returns\n\nThe updated feature.\n\nPOST /v1/entitlements/features/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/features/feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```",
  "title": "Feature | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product-feature",
  "markdown": "# Product Feature | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fproduct-feature)\n\n## [The ProductFeature object](https://docs.stripe.com/api/product-feature/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    entitlement\\_featureobject\n    \n    The [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### More attributes\n\nThe ProductFeature object\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [List all features attached to a product](https://docs.stripe.com/api/product-feature/list)\n\nRetrieve a list of features for a product\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of features for a product\n\nGET /v1/products/:id/features\n\n```\ncurl -G https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products/prod_NWjs8kKbJWmuuc/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prodft_BcMBZUWCIOEgEc\",      \"object\": \"product_feature\",      \"livemode\": false,      \"entitlement_feature\": {        \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",        \"object\": \"entitlements.feature\",        \"livemode\": false,        \"name\": \"My super awesome feature\",        \"lookup_key\": \"my-super-awesome-feature\",        \"metadata\": {}      }    }    {...}    {...}  ],}\n```\n\n## [Attach a feature to a product](https://docs.stripe.com/api/product-feature/attach)\n\nCreates a product\\_feature, which represents a feature attachment to a product\n\n### Parameters\n\n*   #### \n    \n    entitlement\\_featurestringRequired\n    \n    The ID of the [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### Returns\n\nReturns a product\\_feature\n\nPOST /v1/products/:id/features\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d entitlement_feature=feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [Remove a feature from a product](https://docs.stripe.com/api/product-feature/remove)\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```",
  "title": "Product Feature | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/entitlements/active-entitlement",
  "markdown": "# Active Entitlement | Stripe API Reference\n\n## [The Active Entitlement object](https://docs.stripe.com/api/entitlements/active-entitlement/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [Feature](https://docs.stripe.com/api/entitlements/feature) that the customer is entitled to.\n    \n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n\n### More attributes\n\nThe Active Entitlement object\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [Retrieve an active entitlement](https://docs.stripe.com/api/entitlements/active-entitlement/retrieve)\n\nRetrieve an active entitlement\n\n### Parameters\n\n*   The ID of the entitlement.\n    \n\n### Returns\n\nReturns an active entitlement\n\nGET /v1/entitlements/active\\_entitlements/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/active_entitlements/ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [List all active entitlements](https://docs.stripe.com/api/entitlements/active-entitlement/list)\n\nRetrieve a list of active entitlements for a customer\n\n### Parameters\n\n*   The ID of the customer.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of active entitlements for a customer\n\nGET /v1/entitlements/active\\_entitlements\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_9s6XKzkNRiz8i3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/active_entitlements\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",      \"object\": \"entitlements.active_entitlement\",      \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"lookup_key\": \"seats-feature\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Active Entitlement | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/customer",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nThe Customer resource has many useful properties you can set to customize billing. This section explains the properties you can store on the Customer, and the effects of each.\n\n### Customer profile![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA basic customer profile is useful for invoice and receipt generation, and can generally act as a lightweight customer relationship management system (CRM) for your application. You can also use [Affiliate and referral Stripe Apps](https://marketplace.stripe.com/categories/affiliate_and_referrals) to set up and manage referral and affiliate programs with Stripe, get customer information, and automate commission adjustments from the Stripe Dashboard.\n\n#### Minimal customer profile ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a customer, set these properties:\n\n*   Email address\n*   Customer name\n*   Metadata with a reference to the internal customer ID of your application\n\nAn [email address](https://docs.stripe.com/api/customers/object#customer_object-email) lets Stripe notify the customer of failed payments or when completing a payment requires further action, as part of the [Automatic Collection](https://docs.stripe.com/invoicing/automatic-collection) process.\n\nStore the internal customer ID of your application in the [metadata](https://docs.stripe.com/api/customers/object#customer_object-metadata) attribute. Like most Stripe resources, the Customer resource includes a [Metadata](https://docs.stripe.com/api/metadata) object hash to flexibly store contextual key-value information. To aid in auditing and support, store your internal customer ID as a key-value pair on the Customer resource. This allows you to search for the customer using your internal reference ID. Conversely, we recommend storing Stripe customer IDs against the internal customer model of your application.\n\n#### Billing and shipping addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the address properties to set an [address](https://docs.stripe.com/api/customers/object#customer_object-address) for billing (invoicing, credit notes, and so on), and a [shipping](https://docs.stripe.com/api/customers/object#customer_object-shipping) address (for physical goods).\n\nWhile a shipping address is most relevant to businesses delivering physical goods, a billing address is useful because it displays on invoices, credit notes, and receipts—a common requirement for tax compliance.\n\n#### Email and PDF language localization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLocalize Stripe-generated emails and PDFs by setting the `preferred_locales` property. This property accepts an ordered list of preferred languages, sorted by preference. These preferred locale values are based on [RFC-4646](https://tools.ietf.org/html/rfc4646). Examples include “en” for English, or “fr-CA” for Canadian French. See the [Customizing invoices](https://docs.stripe.com/invoicing/customize#customer-language) page for more information.\n\n#### Per-customer invoice settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor further details on customizing invoice contents on a per-customer basis, see the [Customizing invoices](https://docs.stripe.com/invoicing/customize) page. It explains [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields), [invoice footer](https://docs.stripe.com/invoicing/customize#footer-field) content, and how to [customize the invoice number](https://docs.stripe.com/invoicing/customize#invoice-numbering-schemes).\n\n### Payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll payments are collected from [payment](https://docs.stripe.com/payments) details associated with a customer, and a customer can have multiple ways to make a payment, including:\n\n*   [Payment Methods](https://docs.stripe.com/payments/payment-methods)\n*   [Customer Credit Balance](#customer-balance)\n\nCustomers are [single-currency](#currency), meaning after you’ve assigned a currency, invoiced the customer, or [set a customer credit balance](#customer-balance), you can’t change the currency. This locked state is visible in the Dashboard in a disabled **Currency** dropdown.\n\nIf you need to bill a single entity with multiple currencies, create a new customer for each currency.\n\n### Invoicing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll invoicing-related resources are associated with the customer being billed. These resources include:\n\n*   [Pending invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n*   [Invoices](https://docs.stripe.com/invoicing/overview)\n*   [Receipts](https://docs.stripe.com/receipts)\n*   [Invoice settings](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings)\n\n### Tax info ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo meet tax jurisdiction requirements, you might need to include customer tax ID numbers and other information on invoices. It’s ultimately your responsibility to make sure your customer’s invoices contain the correct information. This includes [tax IDs](https://docs.stripe.com/billing/customer/tax-ids), [tax exemption status](https://docs.stripe.com/api/customers/create#create_customer-tax_exempt), and [addresses](#addresses).\n\nTax IDs provide a way to store and render one or more tax ID numbers on invoices. Tax exemption status indicates whether the entity is taxable. By default, a customer’s `tax_exempt` status is set to `none`, meaning it’s a taxable billing entity. However, you can flag a customer as being responsible for paying the tax on an invoice by setting the `tax_exempt` property to `reverse`, or flag them as being tax exempt by setting the status to `exempt`. You can read more about using `tax_exempt` and `reverse` on the [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates#tax-exempt-and-reverse-charge) page.",
  "title": "Customers | Stripe Documentation",
  "description": "Learn how to use the Customer resource with Stripe Billing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/subscriptions",
  "markdown": "# Subscriptions | Stripe API Reference\n\nEndpoints\n\n[POST/v1/subscriptions](https://docs.stripe.com/api/subscriptions/create)[POST/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/update)[GET/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/retrieve)[GET/v1/subscriptions](https://docs.stripe.com/api/subscriptions/list)[DELETE/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/cancel)[POST/v1/subscriptions/:id/resume](https://docs.stripe.com/api/subscriptions/resume)[GET/v1/subscriptions/search](https://docs.stripe.com/api/subscriptions/search)\n\n## [The Subscription object](https://docs.stripe.com/api/subscriptions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.\n    \n\n*   #### \n    \n    current\\_period\\_endtimestamp\n    \n    End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n    \n*   #### \n    \n    current\\_period\\_starttimestamp\n    \n    Start of the current period that the subscription has been invoiced for.\n    \n*   ID of the customer who owns the subscription.\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   List of subscription items, each with an attached price.\n    \n*   #### \n    \n    latest\\_invoicenullable stringExpandable\n    \n    The most recent invoice this subscription has generated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_setup\\_intentnullable stringExpandable\n    \n    You can use this [SetupIntent](https://docs.stripe.com/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription’s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-2).\n    \n*   #### \n    \n    pending\\_updatenullable object\n    \n    If specified, [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.\n    \n*   Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.\n    \n    For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default\\_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.\n    \n    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.\n    \n    A subscription can only enter a `paused` status [when a trial ends without a payment method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn’t generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://docs.stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription’s status unchanged.\n    \n    If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).\n    \n    If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_confignullable object\n    \n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n*   #### \n    \n    cancel\\_atnullable timestamp\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n*   #### \n    \n    cancellation\\_detailsnullable object\n    \n\n*   #### \n    \n    days\\_until\\_duenullable integer\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    ended\\_atnullable timestamp\n    \n\n*   #### \n    \n    next\\_pending\\_invoice\\_item\\_invoicenullable timestamp\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    pause\\_collectionnullable object\n    \n*   #### \n    \n    payment\\_settingsnullable object\n    \n*   #### \n    \n    pending\\_invoice\\_item\\_intervalnullable object\n    \n*   #### \n    \n    schedulenullable stringExpandable\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    trial\\_endnullable timestamp\n    \n*   #### \n    \n    trial\\_settingsnullable object\n    \n*   #### \n    \n    trial\\_startnullable timestamp\n    \n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Create a subscription](https://docs.stripe.com/api/subscriptions/create)\n\nCreates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.\n\nWhen you create a subscription with `collection_method=charge_automatically`, the first invoice is finalized as part of the request. The `payment_behavior` parameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a `draft` status, use [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules#managing) instead. Schedules provide the flexibility to model more complex billing configurations that change over time.\n\n### Parameters\n\n*   The identifier of the customer to subscribe.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   #### \n    \n    itemsarray of objectsRequired\n    \n    A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Only applies to subscriptions with `collection_method=charge_automatically`.\n    \n    Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can’t be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s first invoice can’t be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn’t create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.\n    \n    Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    backdate\\_start\\_datetimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_configobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n*   #### \n    \n    promotion\\_codestringDeprecated\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly created `Subscription` object, if the call succeeded. If the attempted charge fails, the subscription is created in an `incomplete` status.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Na6dX7aXxi11N4 \\  -d \"items[0][price]\"=price_1MowQULkdIwHu7ixraBm864M\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Update a subscription](https://docs.stripe.com/api/subscriptions/update)\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```",
  "title": "Subscriptions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/cancel",
  "markdown": "# Cancel a quote | Stripe API Reference\n\nCancels the quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a canceled quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7ZYLkdIwHu7ixvsdZr97I/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7ZYLkdIwHu7ixvsdZr97I\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129268,  \"currency\": \"usd\",  \"customer\": \"cus_NcMIIkPfQZQEHR\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721268,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-FF4741D9-0001-1\",  \"on_behalf_of\": null,  \"status\": \"canceled\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": 1680129269,    \"finalized_at\": 1680129269  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Download quote PDF](https://docs.stripe.com/api/quotes/pdf)\n\nDownload the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.corp.stripe.com/quotes/overview#quote_pdf)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe PDF file for the quote.\n\n```\ncurl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n## [Finalize a quote](https://docs.stripe.com/api/quotes/finalize)\n\nFinalizes the quote.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns an open quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7SqLkdIwHu7ixpI1ClZ6z/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680128852,  \"currency\": \"usd\",  \"customer\": \"cus_NcMBZUWCIOEgEW\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682720852,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-5B9DA057-0001-1\",  \"on_behalf_of\": null,  \"status\": \"open\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": 1680128853  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Cancel a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/connect",
  "markdown": "# Create an invoice with Connect\n\n## Create invoices for connected accounts and optionally take fees in the process.\n\nYou can create [invoices](https://docs.stripe.com/api/invoices \"invoices\") for connected accounts, which support [several approaches](https://docs.stripe.com/connect/charges) for collecting payments. You can use [direct charges](https://docs.stripe.com/connect/direct-charges) to create them directly on the connected account. Alternatively, you can create invoices on the platform with transfers to the connected account by using [destination charges](https://docs.stripe.com/connect/destination-charges). You can also take an application fee on these invoices.\n\n#### Note\n\n## Create an invoice using direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an invoice that directly charges on a connected account, [create an invoice](https://docs.stripe.com/api#create_invoice) while [authenticated](https://docs.stripe.com/connect/authentication#stripe-account-header) as the connected account. For this to work, the customer must be defined on the connected account.\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nAs with [creating a direct charge](https://docs.stripe.com/connect/direct-charges#collect-fees) on a connected account, you can create a customer on a connected account by using either the platform’s publishable key or the connected account’s publishable key. You can also create a token by using [shared customers](https://docs.stripe.com/connect/cloning-customers-across-accounts). When you use direct charges, the connected account is responsible for the cost of the Stripe fees, refunds, and chargebacks.\n\n## Create an invoice using destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an invoice that charges on the platform and creates automatic transfers to a connected account, [create an invoice](https://docs.stripe.com/api#create_invoice) while providing the connected account ID as the `transfer_data[destination]` [value](https://docs.stripe.com/api/invoices/object#invoice_object-transfer_data).\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nFor this to work, the customer must be defined on the platform account, and you must create the connected account token by using the platform’s publishable key. If charging a customer, the customer must exist within the platform account. When using automatic transfers, the platform is the business of record.\n\n## Display Connected Account Tax IDs and Business Details on your Invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCertain regions have regulatory requirements for merchants to show their tax IDs and other business details on customer-facing documents.\n\nIn some cases, you can fulfill these requirements by displaying information about a connected account instead of information about your platform. The following steps show how to render a connected account’s tax ID and business details on invoice emails, invoice PDFs, Hosted Invoice Pages, and invoice receipts:\n\n1.  Create tax IDs for your connected account.\n2.  Set default tax IDs for your connected account.\n3.  Specify the connected account either using the [`on_behalf_of` parameter](#on-behalf-of) or as the `issuer` on existing or new invoices, subscriptions, and subscription schedules.\n\n### Create tax IDs for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example creates a single tax ID for the connected account. Stripe stores the tax ID on the connected account. To create additional tax IDs, call the endpoint again.\n\n`curl https://api.stripe.com/v1/tax_ids \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d type=eu_vat \\  -d value=DE123456789`\n\n### Set default tax IDs for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically pulls default tax IDs from the invoice `issuer`’s account during finalization unless `account_tax_ids` is already set on the invoices.\n\nYou can set the tax IDs stored on the connected account as the default tax IDs for that account. The following example sets existing tax IDs as default tax IDs:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[invoices][default_account_tax_ids][0]\"=atxi_123 \\  -d \"settings[invoices][default_account_tax_ids][1]\"=atxi_456`\n\n### Set issuer on existing or new invoices, subscriptions, and subscription schedules as the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example sets `issuer` on an existing subscription. During invoice finalization, subscription invoices pull in the issuer’s default tax IDs:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"invoice_settings[issuer][type]\"=account \\  -d \"invoice_settings[issuer][account]\"=  {{CONNECTED_ACCOUNT_ID}}`\n\nThe following example sets `issuer` during invoice creation:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"issuer[type]\"=account \\  -d \"issuer[account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nAlternatively, the `on_behalf_of` parameter also prints a connected account’s details on the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt.\n\n### Set account tax IDs on existing or new invoices, subscriptions, and subscription schedules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify `account_tax_ids` for invoices, subscriptions, and subscription schedules to override the default tax IDs. The following example sets `account_tax_ids` on an existing subscription:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"invoice_settings[issuer][type]\"=account \\  -d \"invoice_settings[issuer][account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"invoice_settings[account_tax_ids][0]\"=txi_123 \\  -d \"invoice_settings[account_tax_ids][1]\"=txi_456`\n\nThe following example sets `account_tax_ids` during invoice creation:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"issuer[type]\"=account \\  -d \"issuer[account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"account_tax_ids[0]\"=txi_123 \\  -d \"account_tax_ids[1]\"=txi_456`\n\n### Create tax IDs stored on the platform for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax ID you create is stored on the platform account instead of the connected account. The following example creates a single tax ID for the connected account without using the `Stripe-Account` header:\n\n`curl https://api.stripe.com/v1/tax_ids \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=eu_vat \\  -d value=DE123456789 \\  -d \"owner[type]\"=account \\  -d \"owner[account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\n## Collect application fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the invoice, you can optionally withhold an application fee. The following example shows an [application\\_fee\\_amount](https://docs.stripe.com/api/subscriptions/object#subscription_object-application_fee_percent) for an invoice with a direct charge on the connected account:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d application_fee_amount=\"10\" \\   -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThis example shows an `application_fee_amount` for an invoice with a destination charge:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d application_fee_amount=\"10\" \\   -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\n## Make the connected account the settlement merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo make the connected account the settlement merchant, charge the customer using the `on_behalf_of` parameter when you create or update the invoice. You must set `on_behalf_of` in the API before finalizing an invoice—the Dashboard doesn’t have an interface for invoices you send on behalf of connected accounts.\n\nSetting the `on_behalf_of` parameter applies the branding, contact information, and account tax ID of the connected account to the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt. However, when you use `on_behalf_of` in test mode, emails aren’t sent—just like standard invoices sent via API. In test mode, you can verify that Stripe created an invoice by checking the [Invoices page](https://dashboard.stripe.com/test/invoices) of the Dashboard.\n\nTo collect payments on behalf of the connected account, the connected account also needs to have [account capabilities](https://docs.stripe.com/connect/account-capabilities) enabled for the relevant payment methods. You can automatically transfer payments for invoices created on behalf of the connected account by using destination charges. For more information about the `on_behalf_of​` parameter, refer to the relevant Connect documentation:\n\n*   For automatic transfers to the connected account, refer to the `on_behalf_of` parameter details in the [Create a charge](https://docs.stripe.com/connect/charges#on_behalf_of) guide.\n*   For information on how to transfer payments manually, refer to [Transfer availability](https://docs.stripe.com/connect/separate-charges-and-transfers#transfer-availability).\n*   For a list of account capabilities that are required to collect payments on behalf of the connected account, refer to [Payment method capabilities](https://docs.stripe.com/connect/account-capabilities#payment-methods).\n\nThe following example shows how to use the `on_behalf_of` parameter for a new invoice by using separate charges and transfers:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d customer=  {{CUSTOMER_ID}}    `\n\nAs with standard destination charges, ​​you can set an `application_fee_amount` on invoices. This example shows how to use `on_behalf_of` with a destination charge and application fee.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d application_fee_amount=10 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d customer=  {{CUSTOMER_ID}}    `\n\nInvoices created on behalf of a connected account ​​don’t support bank transfers payment methods, such as ACH Credit Transfer and paper checks.\n\n## Integrate tax calculation and collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to first determine which entity is liable for tax. The entity that’s liable for tax might be your connected account or the platform, depending on your business model. To learn more, see [Stripe Tax with Connect](https://docs.stripe.com/tax/connect).",
  "title": "Create an invoice with Connect | Stripe Documentation",
  "description": "Create invoices for connected accounts and optionally take fees in the process.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/finalize",
  "markdown": "# Finalize a quote | Stripe API Reference\n\nFinalizes the quote.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns an open quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7SqLkdIwHu7ixpI1ClZ6z/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680128852,  \"currency\": \"usd\",  \"customer\": \"cus_NcMBZUWCIOEgEW\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682720852,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-5B9DA057-0001-1\",  \"on_behalf_of\": null,  \"status\": \"open\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": 1680128853  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Finalize a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/quotes/accept",
  "markdown": "# Accept a quote | Stripe API Reference\n\nAccepts the specified quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an accepted quote and creates an invoice, subscription or subscription schedule. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/accept\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7YsLkdIwHu7ixoRgFs97D/accept \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7YsLkdIwHu7ixoRgFs97D\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129226,  \"currency\": \"usd\",  \"customer\": \"cus_NcMHflMGStIAoB\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721226,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": \"in_1Mr7YtLkdIwHu7ixzgJJpJ3L\",  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-7F68F7D2-0001-1\",  \"on_behalf_of\": null,  \"status\": \"accepted\",  \"status_transitions\": {    \"accepted_at\": 1680129227,    \"canceled_at\": null,    \"finalized_at\": 1680129227  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Cancel a quote](https://docs.stripe.com/api/quotes/cancel)\n\nCancels the quote.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a canceled quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7ZYLkdIwHu7ixvsdZr97I/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7ZYLkdIwHu7ixvsdZr97I\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680129268,  \"currency\": \"usd\",  \"customer\": \"cus_NcMIIkPfQZQEHR\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682721268,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-FF4741D9-0001-1\",  \"on_behalf_of\": null,  \"status\": \"canceled\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": 1680129269,    \"finalized_at\": 1680129269  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Download quote PDF](https://docs.stripe.com/api/quotes/pdf)\n\nDownload the PDF for a finalized quote. Explanation for special handling can be found [here](https://docs.corp.stripe.com/quotes/overview#quote_pdf)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe PDF file for the quote.\n\n```\ncurl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n## [Finalize a quote](https://docs.stripe.com/api/quotes/finalize)\n\nFinalizes the quote.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns an open quote. Raises [an error](#errors) otherwise.\n\nPOST /v1/quotes/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/quotes/qt_1Mr7SqLkdIwHu7ixpI1ClZ6z/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"qt_1Mr7SqLkdIwHu7ixpI1ClZ6z\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680128852,  \"currency\": \"usd\",  \"customer\": \"cus_NcMBZUWCIOEgEW\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682720852,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": \"QT-5B9DA057-0001-1\",  \"on_behalf_of\": null,  \"status\": \"open\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": 1680128853  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Accept a quote | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/standard-accounts",
  "markdown": "# Using Connect with Standard connected accounts\n\nUse the [Create Account](https://docs.stripe.com/api/accounts/create) API to create a connected account with `type` set to `standard`. You can prefill any information, but at a minimum, you must specify the `type`. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding. If you know what [capabilities](https://docs.stripe.com/connect/account-capabilities) the account needs, you can request them when you create it.\n\n#### Note\n\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as `address` and `website_url`, see the [Create Account API reference](https://docs.stripe.com/api/accounts/create).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=standard \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).",
  "title": "Using Connect with Standard connected accounts | Stripe Documentation",
  "description": "Use Standard connected accounts to get started using Connect right away, and let Stripe handle the majority of the connected account experience.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy",
  "markdown": "# Usage-based billing | Stripe DocumentationThe Stripe Docs logo\n\n## Create a product and pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nModel your business on stripe with products and prices.\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their pricing options with the Stripe API or Dashboard. Typographic has three products, each with two tiers:\n\n*   Standard\n    *   Tier one: 10 USD per month for 10,000 requests\n    *   Tier two: An additional $0.10 USD for each request after 10,000\n*   Growth\n    *   Tier one: 25 USD per month for 10,000 requests\n    *   Tier two: An additional $0.10 USD for each request after 10,000\n*   Enterprise\n    *   Tier one: 75 USD per month for 10,000 requests\n    *   Tier two: An additional $0.0075 USD for each request after 10,000\n\nTo achieve this kind of pricing, you charge a flat fee and an additional amount based on how much customers use. With [graduated tiers](https://docs.stripe.com/products-prices/pricing-models#graduated-pricing), customers initially pay the flat fee for the first 10,000 requests. If they make more requests than that, they reach tier two and start paying for each additional request. You could also charge solely based on usage without the flat fee.\n\nDuring each billing period, you create [usage records](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage) for each customer and then Stripe adds them up to determine how much to bill for. This process is explained in a subsequent step but understanding the default behavior might impact how you create prices.\n\nTo create a metered usage pricing model on Stripe through the Dashboard:\n\nFirst, create the `Standard` product. To learn about all the options for creating a product, see the [prices guide](https://docs.stripe.com/products-prices/manage-prices#create-product).\n\n1.  Go to the **Products** [tab](https://dashboard.stripe.com/products).\n2.  Click **\\+ Add product**.\n3.  Enter the **Name** of the product: `Standard`, in this case.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n\nNext, create the monthly price for the `Standard` product. Select **Graduated pricing** for the **Pricing model**, then select **Recurring**.\n\nCreate two graduated pricing tiers:\n\n|     | First unit | Last unit | Per unit | Flat fee |\n| --- | --- | --- | --- | --- |\n| For the first | 0   | 10,000 | 0.00 USD | 10.00 USD |\n| For the next | 10,001 | ∞   | 0.10 USD | 0.00 USD |\n\nThen, select **Monthly** for the **Billing period** and check **Usage is metered**.\n\nRepeat the steps for the `Growth` and `Enterprise` products, filling in the appropriate values as necessary.\n\nRead the docs to learn more about different [pricing models](https://docs.stripe.com/products-prices/pricing-models).",
  "title": "Usage-based billing | Stripe Documentation",
  "description": "SaaS usage-based billing made easy with Stripe Billing",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage-in-bulk",
  "markdown": "# Record usage for billing via Dashboard\n\n## Record usage for billing via DashboardBeta\n\n## Learn how to report usage events in bulk through the Dashboard.\n\nYou can upload meter usage events in bulk using a file upload in the Dashboard. Stripe parses, validates, and transforms the file contents into meter events. After you successfully upload the events from your file, you’ll start to see them on your subscription invoice.\n\n#### Interested in early access?\n\nYou can upload your meter usage events in JSON, JSONLINE, or CSV file formats.\n\nView an example of the **JSON** file format below.\n\n`[   {     \"identifier\": \"26ac9e54-6a13-4b2e-90b0-fedae80bb8f7\",     \"timestamp\": 1692852080,     \"event_name\": \"ai_search_api\",     \"payload\": {       \"value\": 200,       \"stripe_customer_id\": \"cus_123\"     }   },   {     \"timestamp\": 1692852080,     \"event_name\": \"ai_search_api\",     \"extra_key\": \"test\",     \"payload\": {       \"value\": 500,       \"stripe_customer_id\": \"cus_123\"     }   } ]`\n\nView an example of the **JSONLINE** file format below.\n\n`{\"identifier\":\"123456\",\"timestamp\":1692852080,\"event_name\":\"ai_search_api\",\"payload\":{\"value\":200,\"stripe_customer_id\":\"cus_123\"}} {\"timestamp\":1692852080,\"event_name\":\"ai_search_api\",\"extra_key\":\"test\",\"payload\":{\"value\":500,\"stripe_customer_id\":\"cus_123\"}}`\n\nView an example of the **CSV** file format below.\n\n![CSV file format](https://b.stripecdn.com/docs-statics-srv/assets/udap_ubb_csv_format.e5c12ef6a48b407ae9c0cf6c3b873aeb.png)\n\nCSV file format\n\nThe schema of individual objects in the file need to correspond with the [Meter Event](https://docs.stripe.com/api/billing/meter-event/object) schema. Here are the fields:\n\n*   **identifier**: A unique identifier for the event. If not provided, Stripe generates one. We recommend using a globally unique identifier for this.\n*   **timestamp**: The time of the event—measured in seconds since the Unix epoch.\n*   **event\\_name**: The name of the meter event.\n*   **payload columns**: Payload is a set of columns that contains key names to refer to customer and numerical usage values.\n    *   payload\\_stripe\\_customer\\_id: This column contains the [stripe\\_customer\\_id](https://docs.stripe.com/api/customers/object#customer_object-id) that the event gets created against.\n    *   payload\\_value: This column represents the numerical usage value of the meter event. By default, the column name is ‘payload\\_value’, but set it to match the field used when creating the meter event (prepend it by payload\\_).\n\n#### Need support for different file format?\n\nYou can use two methods to upload your usage events data in bulk.\n\n[](#dashboard-ui)\n\n1.  Navigate to the [Data management](https://dashboard.stripe.com/data-management) page.\n2.  Click **Import file**.\n3.  Select **Data Template**.\n    *   For JSON format files, choose the **Billing Meter Event Transaction Template - JSON**.\n    *   For JSONLINE format files, choose the **Billing Meter Event Transaction Template - JSONLINE**.\n    *   For CSV format files, choose the **Billing Meter Event Transaction Template - CSV**.\n4.  Upload your file, then click **Import file**.\n5.  After Stripe successfully processes your file, you can check its status on the [Import set](https://dashboard.stripe.com/data-management) list page.\n\n[](#s3-connector)\n\nTo import files from your Amazon S3 bucket into Stripe Data Management, you need to upload your meter events file to the S3 bucket. The S3 connector automatically polls and processes those files. Learn how to [set up the S3 connector](https://docs.stripe.com/stripe-data/import-external-data/connectors/s3).\n\nWhen configuring your S3 connector, make sure that you use the `Data Template`. For the CSV format, use the `Billing Meter Event Transaction Template - CSV`. For JSONLINE format, use the `Billing Meter Event Transaction Template - JSONLINE`, and for the JSON format, use the `Billing Meter Event Transaction Template - JSON`.",
  "title": "Record usage for billing via Dashboard | Stripe Documentation",
  "description": "Learn how to report usage events in bulk through the Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/customer-management/activate-no-code-customer-portal",
  "markdown": "# Activate the no-code customer portal\n\n## Set up Stripe's customer portal with a no-code configuration.\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register/).\n\nActivate a link that you add to your website or share with your customers, allowing them to self-manage their payment details, invoices, and subscriptions. We’ll also add the link to your customer emails. You can set up the customer portal in a few minutes, without writing any code.\n\nSee how your customers can log in with the portal login link\n\n[](#set-up-customer-portal)\n\n1.  **Activate a customer portal link** On the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page, click **Activate link** in the **Ways to get started** section.\n    \n2.  **Configure the portal** Go to the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page and select your configuration options. Learn more about [configuration options](https://docs.stripe.com/customer-management/configure-portal).\n    \n3.  Make sure your customers have an [`email`](https://docs.stripe.com/api/customers/object#customer_object-email) set. If multiple customers have the same email address, Stripe selects the most recently created customer that has both that email and an active subscription.\n    \n    For security purposes:\n    \n    *   Customers can’t update their email address through this link.\n    *   If a customer doesn’t receive a one-time passcode after clicking the login link, make sure their email address matches the email address of an existing customer. To check, enter the email address in the search bar of your [Stripe dashboard](https://dashboard.stripe.com/).",
  "title": "Activate the no-code customer portal | Stripe Documentation",
  "description": "Set up Stripe's customer portal with a no-code configuration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/customer/balance",
  "markdown": "# Customer credit balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the customer credit balance.\n\nEvery customer in Stripe Billing has a credit balance that you can issue credit and debit adjustments against. Adjustments in the credit balance could be a credit (meaning you owe them money) or a debit (meaning they owe you money). These adjustments sum up to a balance on the customer that you can apply to future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\nBecause the credit balance is computed from a ledger — an immutable list of debit and credit transactions — it provides an audit trail of transactions for the customer. These [Customer Balance Transactions](https://docs.stripe.com/api/customer_balance_transactions/object) can refer to the object related to the adjustment (such as a [Credit Note](https://docs.stripe.com/invoicing/dashboard/credit-notes) or [Customer](https://docs.stripe.com/invoicing/customer)), or even [metadata](https://docs.stripe.com/api/metadata) for your own reference.\n\n## Example use cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome common use cases for customer credit balances include:\n\n*   [Issuing a Credit Note](https://docs.stripe.com/invoicing/dashboard/credit-notes) to create a credit that reduces the amount due on the next invoice.\n*   Prorations from [downgrading a subscription](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade) can indirectly create credits to reduce the amount due on the next invoice.\n*   When the amount due on an invoice is less than the [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) the invoice is marked as paid and the amount owed moved to the credit balance as a debit. This functionality only occurs for customers without a [cash\\_balance](#cash-balances).\n\n## Customer credit balance details ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep the following details in mind when using customer credit balances:\n\n*   The credit balance automatically applies toward the next invoice finalized to a customer.\n*   You can’t choose a specific invoice to apply the credit balance to.\n*   You can’t choose to not apply the credit balance to an invoice.\n*   The credit balance is in the customer’s currency.\n*   Customers with a [cash balance](https://docs.stripe.com/api/customers/object#customer_object-cash_balance) can’t keep a positive balance. In other words, they can’t increase the amount due on the next invoice.\n\n## Debits and credits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Negative values** are treated as a **credit** (a reduction in the amount owed by the customer) that you can apply to the next invoice.\n\n**Positive values** are treated as a **debit** (an increase in the amount owed by the customer to you) that you can apply to the next invoice.\n\n## Transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll modifications to the credit balance are recorded as [Transactions](https://docs.stripe.com/api/customer_balance_transactions/object). After it’s been created, you can only update its `description` or `metadata`—you can’t edit other properties or delete a transaction.\n\n### Undo a transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only undo it by creating a corresponding, reversing transaction. For example, if you credit the customer 10 USD you would have to debit the customer 10 USD in a new transaction, each canceling the other out.\n\n### Transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll [Transactions](https://docs.stripe.com/api/customer_balance_transactions/object) created with the API or in the Dashboard have a [type](https://docs.stripe.com/api/customer_balance_transactions/object#customer_balance_transaction_object-type) value of `adjustment`, representing a debit or credit manually created by you for the customer.\n\nThe `type` property has many more possible values to represent the creation source and reason for the transaction. The following table outlines and describes each of these `type` values:\n\n| Type | Description |\n| --- | --- |\n| `adjustment` | An explicitly created adjustment transaction to debit or credit the credit balance. This is the only type of transaction that you can create using API integrations and the Dashboard. |\n| `applied_to_invoice` | Traces the application of credit against a linked [Invoice](https://docs.stripe.com/invoicing/overview). |\n| `credit_note` | Traces the creation of credit to a [Credit Note](https://docs.stripe.com/invoicing/dashboard/credit-notes) and it’s associated [Invoice](https://docs.stripe.com/invoicing/overview). |\n| `invoice_too_small` | When the amount due on an invoice is less than Stripe’s [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) and the customer does not have a cash balance, the invoice is debited to the credit balance and added to the amount due of the next issued invoice. |\n| `invoice_too_large` | When the amount due on an invoice is greater than Stripe’s [maximum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) and the customer does not have a cash balance, the invoice is debited to the credit balance and added to the amount due of the next issued invoice. |\n| `unapplied_from_invoice` | Traces the reversal of an applied credit balance from a linked [Invoice](https://docs.stripe.com/invoicing). Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n| `unspent_receiver_credit` | When unspent funds in [receiver Sources](https://docs.stripe.com/sources#flow-for-customer-action) attached to a customer without a cash balance aren’t fully charged after 60 days, Stripe automatically charges them on your behalf and credits your balance. When this happens, Stripe also creates a corresponding credit transaction. |\n| `initial` | Represents the starting value of the customer’s credit balance when a customer is created using the API with a non-zero credit balance. |\n\n## Modify the credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can modify a customer’s credit balance through the Dashboard by creating a new [Customer Balance Transaction](https://docs.stripe.com/api/customer_balance_transactions/object) adjustment from the **Customer’s detail page**.\n\nScroll down to find the **Invoice credit balance** panel, and click **Adjust balance** to display the **Credit balance adjustment** modal.\n\nFrom here you can set information about the adjustment, such as the **Adjustment type** (credit or debit), as well as a **Currency** (only available if the customer doesn’t have a currency set), **Amount**, and an **internal note** (visible to Dashboard users, but not the customer).\n\n![How to adjust a customer's subscription balance.](https://b.stripecdn.com/docs-statics-srv/assets/2-Customer-balance.ed7d6df96ba2b8595461e1091e4da7a9.png)\n\n### API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate adjustments using the [Customer Balance API](https://docs.stripe.com/api/customer_balance_transactions/create), as shown in the following code example.\n\n`curl https://api.stripe.com/v1/customers/cus_4fdAW5ftNQow1a/balance_transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=-500 \\  -d currency=usd`\n\n## Credit balance transaction history ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAudit a customer’s credit balance adjustments in the Dashboard by navigating to a **Customer’s detail page** and scrolling to the **Invoice credit balance** panel.\n\nThe **Invoice credit balance** panel displays the current value of the credit balance, and clicking **View details** shows you the transaction history used to calculate that value. Each transaction line displays information relevant to the [transaction type](#types), such as a link to the invoice that applied the credit balance, or the credit note that credited the balance.\n\n![Viewing the credit balance transaction history](https://b.stripecdn.com/docs-statics-srv/assets/3-Balance-history.446845092bb178c7924a9cbee2538f94.png)\n\n### API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Customer Balance List API](https://docs.stripe.com/api/customer_balance_transactions/list) to retrieve a list of all transactions for a Customer.\n\n`curl https://api.stripe.com/v1/customers/cus_4fdAW5ftNQow1a/balance_transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n## Customer cash balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers using the [bank transfers](https://docs.stripe.com/payments/bank-transfers) payment method have a [cash balance object](https://docs.stripe.com/api/customers/object#customer_object-cash_balance) with one or more currencies in the `available` object. You can use the funds to [make payments](https://docs.stripe.com/payments/customer-balance#make-cash-payment) or pay invoices. Customers with available balances have the following behavior:\n\n*   You can’t create a negative customer cash balance since it represents money sent from the `Customer`.\n    \n*   You can’t finalize a too-small or too-large invoice with the cash balance (for example, creating a subscription for 0.01 USD). Learn more about [minimum and maximum amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts).\n    \n*   You can delete `Customers` that have a cash balance, but only if their cash balance is 0.\n    \n*   You can’t remove a `Customer`’s available balance.",
  "title": "Customer credit balance | Stripe Documentation",
  "description": "Learn how to use the customer credit balance.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/customer-management/configure-portal",
  "markdown": "# Configure the customer portal | Stripe DocumentationThe Stripe Docs logo\n\n## Configure settings for the self-serve customer portal in the Dashboard.\n\nAfter setting up your customer portal, configure its settings [in your Dashboard](https://dashboard.stripe.com/test/settings/billing/portal). If you haven’t set up your customer portal, see the [customer portal guide](https://docs.stripe.com/customer-management).\n\n## Configure subscription management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure how to manage subscriptions in your customer portal integration.\n\n| Option | Description | Default |\n| --- | --- | --- |\n| **Switch plan** | Let your customer switch between subscription plans. This option is best when you have a good-better-best pricing model. | Off |\n| **Update quantities** | Let your customer increase or decrease the quantity of a subscription. This functionality is best when you have a seat-based pricing model. | Off |\n\n## Cancellation management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your portal to allow cancellations, collect cancellation reasons, and offer retention coupons.\n\n| Option | Description | Default |\n| --- | --- | --- |\n| **Cancel subscription** | Let your customer cancel their subscription. After canceling, customers can still renew subscriptions until the billing period ends. | On  |\n| **Cancellation reason** | Enable the **Cancel subscription** option to capture a cancellation reason when your customer cancels their subscription on the customer portal. | On  |\n| **Retention coupons** | Offer coupons to customers before they cancel their subscriptions. You can use coupons as part of your churn reduction strategy. | Off |\n\n## Customer billing configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDictate what information your customers can manage.\n\nOptionDescriptionDefault\n\n**Billing information**\n\nCapture critical customer, shipping, and tax information from your customer for payment methods and to display on an invoice.\n\n| Name | Description | Default status |\n| --- | --- | --- |\n| **Name** | Let the customer change their name. | On  |\n| **Email address** | Let the customer change their email address. _Note: This functionality isn’t available in the no-code customer portal_ | On  |\n| **Billing address** | Let the customer update their billing address. | On  |\n| **Phone number** | Let the customer update their phone number | On  |\n| **Shipping address** | Let the customer update their shipping address | Off |\n| **Tax ID** | Let the customer update their tax ID | Off |\n\nOn\n\n**Payment methods**Let your customer update their payment method information.On**Promotion codes**Let your customer enter promotion codes on your customer portal instance when upgrading their plan. Go to the [Coupons](https://docs.stripe.com/billing/subscriptions/coupons) documentation to learn more about coupons, promotion codes, and discounts.Off\n\n## Customize the portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these configuration settings to customize your customer portal instance.\n\n| Name | Description | Required? |\n| --- | --- | --- |\n| **Headline** | Enter an introductory text that the customer portal displays to your customers. You can only add one headline for each customer portal configuration. If you don’t enter anything, the customer portal displays this default text: “{{YOUR\\_BUSINESS\\_NAME}} partners with Stripe for simplified billing.” | Yes |\n| **Terms of service link** | Enter a link to your terms of service. The customer portal shows this to your customers whenever they change a subscription or add a payment method. If you don’t enter anything, the customer portal uses the terms of service set in [public account details](https://dashboard.stripe.com/settings/public) instead. | No  |\n| **Default Redirect link** | Enter a link to redirect customers when they exit the customer portal. If you don’t enter anything, the customer portal doesn’t display “Return to {{YOUR\\_BUSINESS\\_NAME}}”. | No  |\n| **Custom domain** | Set a custom domain from which to serve the customer portal. To learn more, read the [Checkout guide](https://docs.stripe.com/payments/checkout/custom-domains) about custom domains. You can only set one custom domain per account. | No  |\n| **Business name** | Set the name of your business in the [**Public business information**](https://dashboard.stripe.com/settings/public) section of the Stripe Dashboard. The customer portal displays this name to your customer. | Yes |\n\n## Invoice history configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Name | Description | Default status |\n| --- | --- | --- |\n| **Invoice history visible** | Determine whether invoice history is visible to customers using your customer portal. | On  |\n\n## Email settings configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nEmail settings are applied to all emails sent from Stripe to your customers. Make sure that any changes you make are appropriate for all your Stripe use cases.\n\nConfigure which emails Stripe sends to your customers. You can also configure a custom domain to use for the emails. You can configure all of this in the [email settings](https://dashboard.stripe.com/settings/emails) of the Dashboard.\n\n## Customize branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo customize the look and feel of the customer portal, go to the [branding settings](https://dashboard.stripe.com/account/branding) of the Dashboard. You can customize the following items:\n\n*   Your logo and icon\n*   Background color\n*   Button color\n*   Font\n*   Shapes\n\n### Branding with Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you maintain a platform with Connect, the customer portal uses the brand settings of the connected account under these circumstances:\n\n*   The platform uses direct charges\n*   The platform uses destination charges with `on_behalf_of`\n\nFor all other connected accounts, you can configure the brand settings with the [Accounts](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) API.",
  "title": "Configure the customer portal | Stripe Documentation",
  "description": "Configure settings for the self-serve customer portal in the Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/customer-management/cancellation-page",
  "markdown": "# Add a cancellation page to the customer portal\n\n## Allow your customers to cancel their subscriptions in the customer portal.\n\nIn the customer portal, you can let your customers cancel their subscriptions. This option is enabled by default.\n\nYou can also enable other options to:\n\n*   [Collect a cancellation reason](#collect-cancellation-reason)\n*   [Deflect cancellations](#cancellation-deflection)\n\nConfigure these options in the [customer portal settings](https://dashboard.stripe.com/settings/billing/portal) page of the Stripe Dashboard.\n\nYou can also create a [customized deep link workfow](https://docs.stripe.com/customer-management/portal-deep-links) for cancellations.\n\n## Collect a cancellation reason ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a customer cancels their subscription, you can collect a reason for their cancellation. In the customer portal settings, you can select the reasons that your customers see from the following list.\n\n*   It’s too expensive\n*   I need more features\n*   I found an alternative\n*   I no longer need it\n*   Customer service was less than expected\n*   Ease of use was less than expected\n*   Quality was less than expected\n*   Other reason\n\nIf a customer selects **Other reason**, they can optionally enter additional free text.\n\n### Finding cancellation reasons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find the cancellation reasons that users select in the following places:\n\n*   **Billing** > **Subscriptions** > subscription details page\n*   [Stripe Sigma](https://dashboard.stripe.com/sigma/queries)\n    *   Learn how to [get started with Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard) and how to [use templates to query Billing data](https://docs.stripe.com/stripe-data/query-billing-data).\n*   The `subscription.updated` webhook\n    *   Learn more about [subscription webhook events](https://docs.stripe.com/billing/subscriptions/webhooks#events).\n\n## Deflect cancellations in the customer portal ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a customer cancels their subscription in the customer portal, you can attempt to deflect the cancellation by offering a retention coupon.\n\nTo set up a retention coupon to deflect cancellations:\n\n1.  Go to the **Settings** > **customer portal** [page](https://dashboard.stripe.com/settings/billing/portal).\n2.  Expand the Cancellations section.\n3.  Select a coupon in the drop-down under **Retention Coupon**.\n\nIf you don’t have a coupon already, you can build one inline. [Learn more about coupons](https://docs.stripe.com/billing/subscriptions/coupons).",
  "title": "Add a cancellation page to the customer portal | Stripe Documentation",
  "description": "Allow your customers to cancel their subscriptions in the customer portal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/customer-management/portal-deep-links",
  "markdown": "# Deep links in the customer portal\n\nAfter your customer successfully completes the flow, they see a localized confirmation page that shows the details of their completed update. You can customize the confirmation message on this page, redirect to a URL of your choice, or redirect them back to the customer portal homepage where their full account details are visible.\n\nTo customize this behavior, set [`after_completion`](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-flow_data-after_completion) on `flow_data`.\n\nThe following example lets your customer cancel their subscription, and redirect back to your own site afterwards:\n\n`curl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\   --data-urlencode return_url=\"[https://example.com/account/overview](https://example.com/account/overview)\" \\  -d \"flow_data[type]\"=subscription_cancel \\  -d \"flow_data[subscription_cancel][subscription]\"=  {{SUBSCRIPTION_ID}}   \\  -d \"flow_data[after_completion][type]\"=redirect \\   --data-urlencode \"flow_data[after_completion][redirect][return_url]\"=\"[https://example.com/account/subscription_canceled](https://example.com/account/subscription_canceled)\"`\n\n#### Note\n\nThe top level `return_url` is a link back to your website that the customer can click at any time (if they decide not to cancel, for example). The `flow_data[after_completion][redirect][return_url]` is a link back to your website after a customer successfully cancels their subscription.",
  "title": "Deep links in the customer portal | Stripe Documentation",
  "description": "Design streamlined customer flows with the customer portal API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/product",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/paypal/set-up-future-payments",
  "markdown": "# Set up future PayPal payments\n\n## Learn how to save PayPal details and charge your customers later.\n\n## Enable recurring payments support from the Stripe Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can request access to the recurring payments directly from the Stripe Dashboard. To do that, go to the [Payment Methods Settings](https://dashboard.stripe.com/settings/payment_methods) page, find PayPal and click **Enable** next to the Recurring Payments section. You’ll see the **pending** status. It usually takes up to 5 business days to get access to the recurring payments for PayPal. When access is granted, you’ll see recurring payments on your [PayPal settings](https://dashboard.stripe.com/settings/payment_methods) page.\n\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) to collect PayPal payment details in advance, and determine the final amount or payment date later. Use it to:\n\n*   Save payment methods to a wallet to streamline future purchases\n*   Collect surcharges after fulfilling a service\n*   [Start a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials)\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nTo reuse a PayPal payment method for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account on your business. Associating the ID of the Customer object with your own internal representation of a customer will enable you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-checkout-session)\n\nBefore you can accept PayPal payments, your customer must authorize you to use their PayPal account for future payments through Stripe Checkout.\n\nAdd a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer provides their payment method details, they’re redirected to the `success_url`, a page on your website that informs them that their payment method was saved successfully. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without providing their payment method details, Checkout redirects them back to your website by navigating to the `cancel_url`. This is usually the page on your website that the customer viewed prior to redirecting to Stripe Checkout.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#retrieve-payment-method)\n\nAfter a customer submits their payment details, retrieve the [PaymentMethod](https://docs.stripe.com/payments/payment-methods) object. A [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") stores the customer’s PayPal account information for future payments. You can retrieve the PaymentMethod synchronously using the `success_url` or asynchronously using [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\nThe decision to retrieve the PaymentMethod synchronously or asynchronously depends on your tolerance for dropoff, as customers might not always reach the `success_url` after a successful payment (for example, it’s possible for them to close their browser tab before the redirect occurs). Using webhooks prevents your integration from experiencing this form of dropoff.\n\nHandle `checkout.session.completed` webhooks, which contain a Session object. To learn more, see [setting up webhooks](https://docs.stripe.com/webhooks). The following example is a `checkout.session.completed` response.\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"cancel_url\": \"[https://example.com/cancel](https://example.com/cancel)\",       \"client_reference_id\": null,       \"customer\": null,       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the value of the `setup_intent` key, which is the ID for the SetupIntent created with the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s PayPal account information for future payments. [Retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent object with the ID.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Handle post-setup events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-setup-events)\n\nUse a method such as [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the billing agreement was authorized successfully by your customer, instead of relying on your customer to return to the payment status page. When a customer successfully authorizes the billing agreement, the SetupIntent emits the [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event. If a customer doesn’t successfully authorize the billing agreement, the SetupIntent will emit the [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event and returns to a status of `requires_payment_method`. When a customer revokes the billing agreement from their PayPal account, the [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) is emitted.\n\n[](#testing)\n\nTest your PayPal integration with your [test API keys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.\n\n[](#charge-later)\n\nWhen you’re ready to charge your customer off-session, use the [Customer](https://docs.stripe.com/api/customers \"Customers\") and [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") IDs to create a [PaymentIntent](https://docs.stripe.com/api/payment_intents).\n\nTo find a `paypal` instrument to charge, [list](https://docs.stripe.com/api/payment_methods/list) the PaymentMethods associated with your Customer.\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d type=paypal`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment. Set a few other parameters to make the off-session payment:\n\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true` to indicate that the customer is not in your checkout flow during this payment attempt. This causes the PaymentIntent to throw an error if authentication is required.\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod and [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=paypal \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true \\  -d confirm=true`\n\n[](#web-user-initiated-payment-method-cancellation)\n\nA customer can cancel the subscription (Billing Agreement) through their PayPal account. When they do so, Stripe emits a [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) webhook. All subsequent Payment Intents using the saved Payment Method will fail until you change to a Payment Method with active mandates. When payments fail for Subscriptions, the status changes to the Subscription status configured in your [automatic collection settings](https://docs.stripe.com/invoicing/automatic-collection). Notify the customer of failure and [charge them with a different payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).",
  "title": "Set up future PayPal payments | Stripe Documentation",
  "description": "Learn how to save PayPal details and charge your customers later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration",
  "markdown": "# Integrate with the Invoicing API\n\n## Learn how to create and send an invoice with code.\n\nThe [Dashboard](https://dashboard.stripe.com/invoices) is the most common way to [create invoices](https://docs.stripe.com/invoicing/dashboard#create-invoice). If you’d like to automate invoice creation, you can integrate with the API. Build a full, working Invoicing integration using our [sample integration](https://docs.stripe.com/invoicing/integration/quickstart).\n\n#### Note\n\nYou don’t need to integrate with the Payments API to integrate with the Invoicing API.\n\n[](#setup)\n\nUse our official libraries for access to the Stripe API:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-product)\n\nTo create a product, enter its name:\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Gold Special\"`\n\n[](#create-prices)\n\n[Prices](https://docs.stripe.com/api#prices) define how much and how often to charge for products. This includes how much the product costs, what currency to use, and the billing interval (when the price is for a subscription). Like products, if you only have a few prices, it’s preferable to manage them in the Dashboard. Use the unit amount to express prices in the lowest unit of the currency—in this case, cents (10 USD is 1,000 cents, so the unit amount is 1000).\n\n#### Note\n\nAs an alternative, if you don’t need to create a price for your product, you can use the [amount](https://docs.stripe.com/api/invoiceitems/create#create_invoiceitem-amount) parameter during invoice item creation.\n\nTo create a price and assign it to the product, pass the product ID, unit amount, and currency. In the following example, the price for the “Gold Special” product is 10 USD:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=1000 \\  -d currency=usd`\n\n[](#create-customer-code)\n\nThe [Customer](https://docs.stripe.com/api#customer_object) object represents the customer purchasing your product. It’s required for creating an invoice. To create a customer with a `name`, `email`, and `description`, add the following code replacing the values with your own:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d description=\"My first customer\"`\n\nAfter you create the customer, store the customer `id` in your database so that you can use it later. The next step, for example, uses the customer ID to create an invoice.\n\n#### Note\n\n[](#create-invoice-code)\n\nSet the [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) attribute to `send_invoice`. For Stripe to mark an invoice as past due, you must add the [days\\_until\\_due](https://docs.stripe.com/api/invoices/create#create_invoice-days_until_due) parameter. When you send an invoice, Stripe emails the invoice to the customer with payment instructions.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d collection_method=send_invoice \\  -d days_until_due=30`\n\nThen, create an invoice item by passing in the customer `id`, product `price`, and invoice ID `invoice`.\n\nThe maximum number of invoice items is 250.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d price=  {{PRICE_ID}}   \\  -d invoice=  {{INVOICE_ID}}    `\n\nIf you set `auto_advance` to `false`, you can continue to modify the invoice until you [finalize](https://docs.stripe.com/invoicing/integration/workflow-transitions) it. To finalize a draft invoice, use the Dashboard, send it to the customer, or pay it. You can also use the [Finalize](https://docs.stripe.com/api/invoices/finalize) API:\n\n#### Note\n\nIf you created the invoice in error, [void](https://docs.stripe.com/invoicing/overview#void) it. You can also mark an invoice as [uncollectible](https://docs.stripe.com/invoicing/overview#uncollectible).\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n[](#accept-invoice-payment)\n\nSend the invoice to the email address associated with the customer. As soon as the an invoice is sent, Stripe finalizes it. Many jurisdictions consider finalized invoices a legal document making certain fields unalterable. If you send invoices that have already been paid, there’s no reference to the payment in the email.\n\n#### Note\n\nWhen you send invoices that have already been paid, the email doesn’t reference the payment. Stripe sends invoices to the email address associated with the customer.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/send \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment-events)\n\nStripe sends an [`invoice.paid`](https://docs.stripe.com/api/events/types?event_types-invoice.paid) event when an invoice payment completes. Listen for this event to ensure reliable fulfillment. If your integration relies on only a client-side callback, the customer could lose connection before the callback executes, which would result in the customer being charged without your server being notified. Setting up your integration to listen for asynchronous events is also what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\n#### Note\n\nSuccessful invoice payments trigger both an [`invoice.paid`](https://docs.stripe.com/api/events/types?event_types-invoice.paid) and [`invoice.payment_succeeded`](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded) event. Both event types contain the same invoice data, so it’s only necessary to listen to one of them to be notified of successful invoice payments. The difference is that `invoice.payment_succeeded` events are sent for successful invoice payments, but aren’t sent when you mark an invoice as [paid\\_out\\_of\\_band](https://docs.stripe.com/api/invoices/pay#pay_invoice-paid_out_of_band). `invoice.paid` events, on the other hand, are triggered for both successful payments and out of band payments. Because `invoice.paid` covers both scenarios, we typically recommend listening to `invoice.paid` rather than `invoice.payment_succeeded`.\n\nUse the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook quickstart](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nIn addition to handling the `invoice.paid` event, we recommend handling two other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiated a payment, but the payment has yet to complete. This event is most commonly sent when a bank debit is initiated. It’s followed by either a `invoice.paid` or `invoice.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [invoice.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempted a payment on an invoice, but the payment failed. | If a payment transitioned from `processing` to `payment_failed`, offer the customer another attempt to pay. |",
  "title": "Integrate with the Invoicing API | Stripe Documentation",
  "description": "Learn how to create and send an invoice with code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/orgs",
  "markdown": "# Stripe Organizations | Stripe DocumentationThe Stripe Docs logo\n\n## Stripe OrganizationsInvite only\n\n## Unify and manage your business across multiple accounts.\n\nCentralize reporting, operations, and team management across your enterprise\n\nUse Stripe Organizations to set up multiple Stripe accounts for regulatory or financial requirements.\n\n[](#request-access)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-hero.0abaf3821d09ddc0e75aeeed9172f101.png)\n\nBuilding an organization streamlines operations and account management with a centralized view in the Stripe Dashboard to manage all lines of business or subsidiaries across multiple Stripe accounts. You can use Organizations to:\n\n*   Gain a holistic view of your entire business with global customer search\n*   Download unified reports across currencies\n*   Streamline team management and SSO from a centralized location\n*   Perform custom SQL queries with [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard) across all accounts\n\nAdding your accounts to an organization doesn’t require any changes to your payment integration or customer payment flow.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOperating across multiple Stripe accounts is a common practice for many businesses. Consider the following scenarios:\n\n| Scenario | Description |\n| --- | --- |\n| **Global expansion** | Create separate Stripe accounts for each country or region to take advantage of local acquiring. |\n| **Separate business units** | Create separate Stripe accounts for each independent business unit to isolate operations and finances. |\n| **Franchise groups** | Centrally manage franchises locations, represented as connected accounts under a platform. |\n| **Company acquisitions** | Acquire another business that uses Stripe. |\n\n## Centralize and simplify financial reporting for your organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Organizations to gain a comprehensive understanding of your finances and growth across accounts.\n\n[](https://docs.stripe.com/get-started/account/orgs/build \"Organization overview\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-overview.e47782d2bae9c954536ee2bd4f0bda0b.png)](https://docs.stripe.com/get-started/account/orgs/build \"Organization overview\")\n\nView an overview of your balances, payment volume, and payment acceptance across accounts.\n\n[](https://docs.stripe.com/reports/multiple-accounts \"Download consolidated reports\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-reporting.6d04799c173e7ea708802c20865f66a7.png)](https://docs.stripe.com/reports/multiple-accounts \"Download consolidated reports\")\n\n[Download consolidated reports](https://docs.stripe.com/reports/multiple-accounts \"Download consolidated reports\")\n\nDownload consolidated reports across accounts, including balance, activity, and payouts reconcilliation reports.\n\n[](https://docs.stripe.com/stripe-data/sigma-organizations \"Query across accounts\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-sigma.0bdd46e39b160ced474c85e259d5b908.png)](https://docs.stripe.com/stripe-data/sigma-organizations \"Query across accounts\")\n\nRun custom and templated SQL queries to aggregate data across accounts with Sigma for Organizations.\n\n## Reduce operational overhead for your teams ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReduce time spent supporting customers, managing your team, and setting up your business.\n\n[](https://docs.stripe.com/get-started/account/orgs/team \"Centralize team management\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-team-management.0e08773fe0aa076024058bbff6eae187.png)](https://docs.stripe.com/get-started/account/orgs/team \"Centralize team management\")\n\n[Centralize team management](https://docs.stripe.com/get-started/account/orgs/team \"Centralize team management\")\n\nManage all your team members in one place and assign organization roles with access to all accounts.\n\n[](https://docs.stripe.com/get-started/account/orgs/sso \"Centralize Single Sign-On\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-sso.c1919069b0018187e4ece2255f40ef81.png)](https://docs.stripe.com/get-started/account/orgs/sso \"Centralize Single Sign-On\")\n\n[Centralize Single Sign-On](https://docs.stripe.com/get-started/account/orgs/sso \"Centralize Single Sign-On\")\n\nCentrally configure SSO across your entire organization while still maintaining granular access to your accounts.\n\n[](https://docs.stripe.com/dashboard/search#org-search \"Global search\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/orgs-search.0cfceb051b83e982c973f318baab04aa.png)](https://docs.stripe.com/dashboard/search#org-search \"Global search\")\n\nEnable team members to search for information about your business across all accounts they have access to.\n\n## Request an invite ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Stripe Organizations | Stripe Documentation",
  "description": "Unify and manage your business across multiple accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/teams/roles",
  "markdown": "# User roles | Stripe DocumentationThe Stripe Docs logo\n\n## Give team members controlled access to your Stripe account.\n\n##### Administrator![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for anyone who needs similar access as the account owner—they can see and manage almost everything.\n\nThey can't change the default currency, delete the default bank account, or change the account owner.\n\n##### IAM Administrator![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Identity and Access Management (IAM) Admin role is for people who need to invite team members and assign roles. They can also remove any user, including Administrators.\n\nThey can't do anything beyond access management. They also can't assign a user to the Administrator role.\n\nThese roles can invite additional users to your account, and if compromised by an attacker would allow them to invite users under their control.\n\nAccount owner\n\nAn Account Owner is a special type of Administrator that can perform all actions, including closing the account. There can only be one Owner for an account. To change the Account Owner, please refer to [this guide](https://support.stripe.com/questions/change-the-owner-of-a-stripe-account).\n\nThese roles are only available if you use [Connect](https://docs.stripe.com/connect)\n\n##### Connect Onboarding Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to create connected accounts and edit their identity information.\n\nThey can't do anything on the platform account except view and edit connected accounts.\n\nconnect\\_onboarding\\_analyst\n\n##### Transfer Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account must require [two-step authentication](https://support.stripe.com/questions/two-step-authentication-requirement) in order to allow non-Administrators with this role to transfer funds.\n\nThis role is for people who need to transfer funds to connected accounts and view the platform’s balance and historical payouts.\n\nThey can't pay out money to external bank accounts, add or edit bank accounts, or create new connected accounts.\n\n##### Developer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for developers who need to set up a Stripe integration. This role has access to the secret key, which grants access to almost all API resources.\n\nThey can't add or edit bank accounts, invite team members, or change the account owner.\n\nThese roles are only available if you use [Identity](https://docs.stripe.com/identity)\n\n##### Identity Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for Identity users who need to create, review, cancel, or redact verifications.\n\nThis role can’t edit verifications for connected accounts.\n\n##### Identity View Only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for Identity users who need to view verification data.\n\nThis role can’t create, review, cancel, or redact verifications.\n\n##### Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to pay out money, refund payments, and export data.\n\nThey can't edit payout schedules or account settings.\n\n##### Dispute Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need need to view, submit evidence for, and accept disputes.\n\nThey can't do anything that's not related to disputes.\n\n##### Refund Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to refund payments and issue credit notes on invoices.\n\nThey can’t create payments, view balance, or view connected accounts.\n\n##### Data Migration Specialist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to perform data migrations (copy, import, export) for their account.\n\nThey can't create connected accounts, transfer funds, payout money, or edit any account and product settings.\n\ndata\\_migration\\_specialist\n\n##### Support Associate![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to refund payments and resolve disputes, but should not have the ability to edit products. It has administration permissions for connected accounts, where it can edit the payout schedule, update the legal entity, and more.\n\nThey can't create connected accounts, transfer funds, payout money, or edit any account or product settings.\n\n##### Support Communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to authenticate email support cases, use Support Center to view and respond to support cases, or share files securely with Stripe.\n\nThey can’t access financial information, transfer funds, access or edit connected accounts, or edit any account and product settings.\n\n##### Support Specialist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to refund payments, resolve disputes, and may need to update products. It has administration permissions for connected accounts, where it can edit the payout schedule, update the legal entity, and more. This role can add, edit, and delete products.\n\nThey can't create connected accounts, transfer funds, payout money, or edit any account settings.\n\nThese roles are only available if you use [1099s](https://docs.stripe.com/connect/tax-reporting)\n\n##### Tax Analyst![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to configure tax form settings, file tax forms for connected accounts, and export data.\n\nThey can't create connected accounts, transfer funds, payout money, or edit account and non-Tax product settings.\n\n##### View Only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role is for people who need to view payments, balance, and connected accounts, but can’t edit any of them. This role can also export data and download reports.\n\nThey can't create connected accounts, transfer funds, payout money, or edit any account and product settings.\n\n##### Top-up Specialist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role gives access to the Top-ups feature, including creating, viewing, and updating top-ups, as well as viewing balance and payouts. Accountants or Financial employees may find this useful.\n\nThey can't access any other Stripe features.\n\n##### Financial Connections Specialist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis role gives edit access to the Financial Connections settings page and Financial Connections application.\n\nThey can't access any other Stripe features.\n\nfinancial\\_connections\\_specialist",
  "title": "User roles | Stripe Documentation",
  "description": "Give team members controlled access to your Stripe account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/methodology/one-time-payments",
  "markdown": "# Revenue Recognition with one-time payments\n\n## Learn how Revenue Recognition works with one-time payments.\n\nWith one-time payments created in the Dashboard or through the Charges or Payment Intents APIs, Stripe has data on the transaction amount and payment time, but no explicit service period data. By default, Revenue Recognition immediately recognizes the revenue from one-time payments, but you can override this behavior by [importing](https://docs.stripe.com/revenue-recognition/data-import) a custom service period.\n\nThis example is for a one time payment of 10 USD.\n\nThe journal entries generated might look like the following:\n\n| Debit | Credit | Amount |\n| --- | --- | --- |\n| AccountsReceivables | DeferredRevenue | +10.00 |\n| Cash | AccountsReceivables | +10.00 |\n| DeferredRevenue | Revenue | +10.00 |\n\nThis nets out to leave the following end state:\n\n| Account | Amount |\n| --- | --- |\n| Cash | +10.00 |\n| Revenue | +10.00 |\n\n#### Caution\n\nTo incorporate a fulfillment schedule into your revenue recognition reports, you must first [import the data](https://docs.stripe.com/revenue-recognition/data-import).",
  "title": "Revenue Recognition with one-time payments | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with one-time payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/methodology/refunds-and-disputes",
  "markdown": "# Revenue Recognition with refunds and disputes\n\n## Learn how Revenue Recognition works with refunds and disputes.\n\nRefunds and disputes can happen to any transaction on Stripe, which affects your revenue numbers.\n\n## Handling a refund or dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe handles refunds and disputes in a similar manner, but the contra revenue generated go to the refunds and disputes accounts respectively.\n\nWhen a refund or dispute is made,\n\n*   Cash is returned to the customer.\n*   Prior recognized revenue is offset by contra revenue in the refund or dispute account.\n*   Deferred revenue that hasn’t been recognized is cleared.\n\nThis next example is a one-time payment refund.\n\n*   On January 1, a customer made a one-time payment for 90 USD.\n*   On February 1, the transaction was refunded.\n\nIn this situation, the full amount of 90 USD is recognized as revenue, and subsequently the full amount of 90 USD is added to the refunds contra revenue account.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +90.00 |     |\n| Refunds |     | +90.00 |\n\nIn this example, the [invoice](https://docs.stripe.com/api/invoices \"invoices\") for a subscription was disputed.\n\n*   On January 1, a customer starts a three month subscription for 90 USD, which generates and finalizes an invoice.\n*   The customer pays 90 USD.\n*   On February 1, the customer disputes the transaction.\n\nIn this case, the customer received 31 days worth of service, so 31 USD is placed in the disputes account. The dispute also reduces the cash by 90 USD, and the remaining 59 USD of deferred revenue is cleared. At the end of February, the account balances looks like the following:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +31.00 |     |\n| DeferredRevenue | +59.00 | \\-59.00 |\n| Cash | +90.00 | \\-90.00 |\n| Disputes |     | +31.00 |\n\n## Winning a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisputes are different from refunds in one way—you can win disputes.\n\nWhen you win a dispute,\n\n*   Cash is returned to you.\n*   Recognized and deferred revenue don’t change.\n*   Cash is offset by an increase in the recoverables account.\n\nIn the previous example, assume that you win the dispute on March 1. If you then looked at the account balances at the end of March, you’d see that cash increased by 90 USD, which is offset by recoverables.\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| Revenue | +31.00 |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |\n| Cash | +90.00 | \\-90.00 | +90.00 |\n| Disputes |     | +31.00 |     |\n| Recoverables |     |     | +90.00 |",
  "title": "Revenue Recognition with refunds and disputes | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with refunds and disputes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/bank-transfer",
  "markdown": "# Bank transfer | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to pay invoices by transferring funds to a bank account.\n\nBank transfer payments are often used for large enterprise deals or new business relationships. They can come with a lot of manual work for your team. Stripe can accept bank transfers from your customers using Stripe-provided, customer-specific bank account details.\n\nThe advantages of this approach are:\n\n*   You keep your bank account details confidential from your customers.\n*   You can automatically reconcile payments with open [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe first time you accept a bank transfer payment from a customer, Stripe generates a virtual bank account for them, which you can then share with them directly. All future bank transfer payments from this customer get sent to this bank account. In some countries, Stripe also provides you with a unique transfer reference number that your customer should include with each transfer to make it easier to match the transfer against outstanding payments. Some countries have limits on the number of virtual bank account numbers that you can create for free.\n\nYou can find an overview of the common steps when accepting a bank transfer payment in the following sequence diagram:\n\n## Handling under- and over-payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith bank transfer payments, it’s possible that the customer sends you more or less than the expected payment amount. If the customer sends too little, Stripe partially funds an open payment intent. Invoices won’t be partially funded and remain open until incoming funds cover the full invoice amount.\n\nIf the customer sends more than the expected amount, Stripe attempts to reconcile the incoming funds against an open payment and keep the remaining excess amount in the customer cash balance. You can find more details on how Stripe handles reconciliation in the [reconciliation section](https://docs.stripe.com/payments/customer-balance/reconciliation) of our documentation.\n\nWhen a customer underpays:\n\nWhen a customer overpays:\n\n## Receive bank transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make an API call to create an invoice with bank transfers as a payment method.\n\nFirst, you create an invoice.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_settings[payment_method_types][]\"=customer_balance \\  -d collection_method=send_invoice \\  -d days_until_due=30`\n\nThen you can add one or more invoice items to the invoice.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1234 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\  -d description=\"Professional services\" \\  -d invoice=  {{INVOICE_ID}}    `\n\nThen you can finalize the invoice.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAfter the invoice is finalized, your customer can view their payment instructions on the hosted invoice page. The URL for the hosted invoice page is included in the API response as `hosted_invoice_url`.\n\n### Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor USD invoices, you can enable **Bank transfer** by default in the [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice).\n\nFor all other currencies, you can’t enable **Bank transfer** by default, but you can still add it to individual invoices. To create an invoice that supports a bank transfer payment, add `customer_balance` to an invoice over the [API](https://docs.stripe.com/invoicing/payment-methods?dashboard-or-api=api#configure-payment-methods) or configure payment methods on invoices in the [Dashboard](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n\n## Payment instructions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor each customer, Stripe generates a unique, virtual bank account number that can accept transfers in the currency of the invoice. The transfer instructions for this virtual bank account are visible to your customer on invoices.\n\nThe payment details Stripe creates are:\n\n*   **Unique**—No two customers have the same account number.\n*   **Consistent**—A single customer consistently receives the same funding instructions across multiple invoices.\n*   **Currency-appropriate**—In countries where bank transfers are supported, Stripe generates local bank account information (for example, a UK account for customers in the UK).\n*   **Customer-localized**—Payment instructions shown on invoices respect [Customer preferred languages](https://docs.stripe.com/invoicing/customize#customer-language), so you can localize instructions for each customer.\n\n​​After a virtual bank account in Stripe receives a transfer, Stripe automatically reconciles the funds to open invoices and creates a charge to pay the invoice.\n\n## Automatic transfer reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpon receiving an inbound transfer, Stripe uses the transfer’s reference code, amount, and date when determining the invoices for reconciliation.\n\n### Reference codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n​​Transfers commonly include a memo such as:\n\n*   _INVOICE-0011_\n*   _Payment for INVOICE-0001_\n*   _This is for 001. I’ll send the check for 002 next week._\n\nIf the memo contains an invoice number, Stripe first attempts to reconcile the transfer to the referenced invoice. Reference code reconciliation requires that:\n\n*   the invoice number refers to an `open` or `past due` invoice.\n*   if the invoice is `past due`, it has become past due within the past thirty days.\n*   the amount transferred is enough to pay the invoice.\n\n### Exact amount ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter considering reference codes, Stripe looks for the oldest open invoice where the amount precisely matches the amount transferred. If we find one, we reconcile the transfer to the invoice.\n\n### Multiple invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf any balance remains, it’s possible that your customer tried to pay multiple invoices with one transfer. Stripe looks for a group of invoices (five or fewer) where the payment received matches the total expected. In the case where there are multiple possible combinations, Stripe picks the smallest combination. If there are multiple options for the smallest combination, Stripe selects the combination that contains the oldest invoice.\n\n### Oldest payable invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf more balance remains, it’s possible that your customer tried to pay multiple invoices with one transfer, or transferred extra funds. Stripe progressively pays open invoices by date (finalized until the balance runs out) or until no invoices remain to pay.\n\n### Reconciliation failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen funds transferred into Stripe aren’t reconciled to any open [PaymentIntents](https://docs.stripe.com/api/payment_intents) or invoices, the funds are placed in the customer balance and the `cash_balance.funds_available` [webhook](https://docs.stripe.com/webhooks \"webhook\") is sent.\n\n## Manual reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn certain circumstances, you might want to [override Stripe’s automatic reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation) behavior on a per-customer basis.\n\nIn manual reconciliation mode, Stripe doesn’t attempt to automatically reconcile any funds received, so all payments must be reconciled manually.\n\n## Underpayments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOccasionally, customers might make a payment below the amount you requested. In these cases, you can treat the underpaid amount as an expense, and consider the invoice as fully paid.\n\nTo allow automatic reconciliation of partial payments, you can configure a minimum payment amount and Stripe credits the difference to the customer. Navigate to the Dashboard’s [Automatic collection settings](https://dashboard.stripe.com/settings/billing/automatic) section to specify rules for underpayment.\n\n## Refunding transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund completed payments through a refund or credit note back to the customer balance. ​​If any `PaymentIntents` or invoices are awaiting payment, the [funds added to the customer balance](https://docs.stripe.com/payments/bank-transfers) are reconciled against them.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test an inbound transfer of funds in the Dashboard or with the Stripe CLI, see [Test your integration](https://docs.stripe.com/payments/bank-transfers/accept-a-payment?payment-ui=direct-api#test-your-integration).",
  "title": "Bank transfer | Stripe Documentation",
  "description": "Allow customers to pay invoices by transferring funds to a bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources/customers",
  "markdown": "# Sources and customers | Stripe DocumentationThe Stripe Docs logo\n\n## Sources and customersDeprecated\n\n## Learn how to attach and manage sources with Customer objects.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nA [Source](https://docs.stripe.com/api#sources) object can be either [single-use or reusable](https://docs.stripe.com/sources#single-use-or-reusable), as indicated by its `usage` parameter. While sources can be charged directly, _reusable_ sources should always be attached to a [Customer](https://docs.stripe.com/api#customers) object for later reuse. Attaching reusable sources to `Customer` objects allows you to present your customers with a list of reusable payment methods that they have previously used with your app or website.\n\n## Reusable sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain payment methods (for example, [SEPA Direct Debit](https://docs.stripe.com/sources/sepa-debit)) support reusable sources, so that you can create additional payments without your customer’s needing to complete the payment process again. A source that you can reuse has its `usage` parameter set to `reusable`.\n\nYou must [attach](https://docs.stripe.com/api#attach_source) a reusable source to a `Customer` object before making a charge request. If you charge a reusable source without first attaching it, the source is consumed (its status changes from `chargeable` to `consumed`). Consumed sources cannot be used for further payments.\n\n### Attaching a source to a new Customer object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create a `Customer` object and attach a source in one API call. This is useful if this is the first time you’re seeing this customer.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode email=\"paying.user@example.com\" \\  -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nThe source becomes the `Customer` object’s [default source](https://docs.stripe.com/api#customer_object-default_source), since this is the customer’s first and only payment method. The default source is automatically selected if you make a charge request using the `customer` parameter without specifying a `source`.\n\n### Attaching a Source to an existing Customer object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you [update](https://docs.stripe.com/api#update_customer) a `Customer` object that has a default source, this automatically detaches the existing source, and adds the provided source as the new default. To add a source without replacing the existing default, use the [attach](https://docs.stripe.com/api#attach_source) method, as shown below.\n\n`curl https://api.stripe.com/v1/customers/cus_AFGbOSiITuJVDs/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"src_18eYalAHEMiOZZp1l9ZTjSU0\"`\n\nHere, because a default source might already exist for the `Customer` object, the newly attached source does not become the default source. However, you can change the default source by updating the `Customer` object and specifying the source as a value for `default_source`.\n\n`curl https://api.stripe.com/v1/customers/cus_AFGbOSiITuJVDs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d default_source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\n### Charging an attached source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must specify both the `Customer` object and the source when making a charge request.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d customer=cus_AFGbOSiITuJVDs \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nIf you attempt to charge a `Customer` object without specifying a source, Stripe uses the customer’s default source.\n\n### Detaching a source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need to remove a source from a particular `Customer` object, you can [detach the source](https://docs.stripe.com/api#detach_source). Doing so changes the source’s status to `consumed`, so it cannot be used once detached.\n\n## Single-use sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSingle-use sources must be created each time a customer makes a payment, and cannot be reused. For that reason, we do not recommend that you permanently attach them to customers.\n\nIf you want to associate a payment with a particular `Customer` object, you can include a `customer` parameter when making a charge request with a source, even if the source is not attached.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d customer=cus_AFGbOSiITuJVDs \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nThe resulting `Charge` object references both the `Customer` and `Source` objects, even if they are not directly related to one another.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Supported payment methods on Sources](https://docs.stripe.com/sources)\n*   [Best practices for using Sources](https://docs.stripe.com/sources/best-practices)\n*   [Cloning saved payment methods](https://docs.stripe.com/connect/cloning-customers-across-accounts)\n*   [Sources API reference](https://docs.stripe.com/api#sources)",
  "title": "Sources and customers | Stripe Documentation",
  "description": "Learn how to attach and manage sources with Customer objects.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/rules/create-a-rule",
  "markdown": "# Create a rule | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create a rule.\n\nYou can create and manage Revenue Recognition rules from the Stripe Dashboard. To create a rule, click **Add rule** from the [Rules page](https://dashboard.stripe.com/revenue-recognition/rules).\n\nA rule consists of the following key components:\n\n*   Name\n*   Apply to\n*   Revenue treatment and allocation\n*   Effective period\n\n![Create a rule](https://b.stripecdn.com/docs-statics-srv/assets/add-rule.26297e9f9ea8ffc213a94784cba9ea27.png)\n\n## Conditions (“Apply to”)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA set of conditions specifies which transactions (for example, charges, [invoice](https://docs.stripe.com/api/invoices \"invoices\") line items) that a rule applies to.\n\n#### Caution\n\nA transaction fulfills the condition requirement when all the conditions are true.\n\n## Effective period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn effective period specifies the time period that a rule applies to.\n\nFor an invoice line item, if the finalization time for the invoice falls within the specified effective period, the invoice line item fulfills the effective period requirement.\n\nFor a charge, if the balance transaction that it corresponds to has a creation time that falls within the specified effective period, the charge fulfills the effective period requirement.\n\n#### Caution\n\nFor a rule to apply to a transaction, the transaction must fulfill both the effective period and condition requirements. By default, rules don’t retroactively apply to past dates in their effective periods. If you want rules to apply to past dates, [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page.\n\n## Treatments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a transaction fulfills both the effective period and condition requirement, a set of defined treatments are applied.\n\nA treatment consists of its type and the allocation percentage.\n\nThe allocation percentage specifies how much of the amount the type of treatment applies to.\n\nThe type of treatment specifies how to treat the amount. Here are the treatment types that we support:\n\n*   Defer and recognize revenue at a specified time (applicable to charges only)\n*   Categorize the amount as passthrough fees\n*   Categorize the amount as tax\n*   Exclude the amount\n*   Amortize the amount over a specified period (applicable to charges only)\n*   Amortize the amount over the service period for an invoice line item (applicable to invoice line items only)",
  "title": "Create a rule | Stripe Documentation",
  "description": "Learn how to create a rule.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/connect/destination-charges",
  "markdown": "# Revenue Recognition for destination charges\n\n## Learn how Revenue Recognition works with destination charges.\n\n## Revenue collected with application\\_fee\\_amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the destination charges [collects fees](https://docs.stripe.com/connect/destination-charges?fee-type=application-fee#collect-fees) with `application_fee_amount`, the charge and transfer happen immediately, and the `application_fee_amount` is immediately recognized as the revenue.\n\nIn this example, the `application_fee_amount=\"200\"` is set on the charge.\n\n*   On January 15, the full charge amount of 10 USD is added to your platform account.\n    *   10 USD is transferred to the connected account.\n    *   The 2 USD application fee is transferred back to your platform.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +2.00 |\n| Cash | +2.00 |\n\n## Revenue collected with transfer\\_data\\[amount\\]![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the destination charges [collect fees](https://docs.stripe.com/connect/destination-charges?fee-type=transfer-amount#collect-fees) with `transfer_data[amount]`, the charge and transfer happen immediately, where you subtract your platform’s fees from the charge amount, then pass the result of this calculation as the `transfer_data[amount]`. The platform’s fees are immediately recognized as revenue.\n\nIn this example, the `transfer_data[amount]=\"800\"` is set on the charge.\n\n*   On January 15, the full charge amount 10 USD is added to your platform account.\n    *   8 USD is transferred to the connected account.\n    *   The 2 USD is recognized as the revenue.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +2.00 |\n| Cash | +2.00 |\n\n## Loss and contra revenue with issuing refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**When collecting fees with application\\_fee\\_amount**\n\nIf the destination charges [issue refunds](https://docs.stripe.com/connect/destination-charges#issue-refunds), by default the destination account keeps the funds that were transferred to it, leaving the platform account to cover the negative balance from the refund. The refund amount is booked as the ConnectTransferLoss.\n\nIn this example, the charge collects fees with `application_fee_amount`, and it is fully refunded in February.\n\n*   On January 15, the full charge amount of 10 USD is added to your platform account.\n    *   10 USD is transferred to the connected account.\n    *   The 2 USD application fee is transferred back to your platform.\n*   On February 21, the full charge amount 10 USD is refunded.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +2.00 |     |\n| Cash | +2.00 | \\-10.00 |\n| ConnectTransferLoss |     | +10.00 |\n\nIf the platform account sets `reverse_transfer=true` and `refund_application_fee=true` when calling the refund API:\n\n*   If the transfer reversal succeeded, the ConnectTransferLoss is canceled out by the transfer reversal.\n*   The refunded application fee is booked as contra revenue.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +2.00 |     |\n| Cash | +2.00 | \\-2.00 |\n| Refunds |     | +2.00 |\n\n**When collecting fees with transfer\\_data\\[amount\\]**\n\nIn this example, the charge collects fees with transfer\\_data\\[_amount_\\], and it’s partially refunded in February and March.\n\n*   On January 15, the full charge amount of 10 USD is added to your platform account.\n    *   8 USD is transferred to the connected account.\n    *   The 2 USD is recognized as the revenue.\n*   On February 21, the partial charge amount 4 USD is refunded, and a proportional amount of the transfer 3.20 USD is reversed.\n*   On March 10, the partial charge amount 6 USD is refunded, and a proportional amount of the transfer 4.80 USD is reversed.\n\n| Account | Jan | Feb | Mar | Total |\n| --- | --- | --- | --- | --- |\n| Revenue | +2.00 |     |     | +2.00 |\n| Cash | +2.00 | \\-0.80 | \\-1.20 |     |\n| Refunds |     | +0.80 | +1.20 | +2.00 |\n\n## Best practices for effectively accessing the feature![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Audit the destination charges journal entries**\n\nYou can select the **platform fee ID**, **platform fee refund ID**, **transfer ID**, **transfer refund ID**, and **charge destination ID** columns when downloading the CSV reports format by invoice or line item.\n\n![Revenue recognition report columns for the destination charges](https://b.stripecdn.com/docs-statics-srv/assets/connect-destination-charges-report-columns.503bbea8698306dc3a1282676b1e0d2c.png)\n\nThe month summary reports contain new items `Revenue from platform fees` and `Less refunds from platform fees`—you can find the details in the [month summary section](https://docs.stripe.com/revenue-recognition/reports/monthly-summary).\n\n![Revenue recognition month summary items for the destination charges](https://b.stripecdn.com/docs-statics-srv/assets/connect-destination-charges-month-summary.6ac0f42f9d596630e5ffb95f7d84a451.png)\n\n**Check if your accounting period is open or closed when you’re added to the beta**\n\nIt generates corrections if the beta is retroactively applied to transactions from past (closed) accounting periods. If you want to avoid this, reopen your books by [opening your accounting periods](https://docs.stripe.com/revenue-recognition/accounting-period-control) prior to gating into the beta.\n\n**Destination charges exclusion rule**\n\nIf you’re on destination charges exclusion rule, you can either delete the exclusion rules or set an effective period end date to apply the feature.\n\n![Revenue recognition exclusion rule for the destination payments](https://b.stripecdn.com/docs-statics-srv/assets/connect-destination-charges-exclusion-rule.d002006b2460151217a08cdcbbef344d.png)",
  "title": "Revenue Recognition for destination charges | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with destination charges.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/connect/direct-charges",
  "markdown": "# Revenue Recognition for direct charges\n\n## Revenue Recognition for direct chargesBeta\n\n## Learn how Revenue Recognition works with direct charges.\n\n## Revenue collected with application fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Connect, your platform can make charges directly on the connected account and take application fees in the process. To add an application fee on a [direct charge](https://docs.stripe.com/connect/direct-charges), pass an optional `application_fee_amount` value. Stripe recognizes the revenue immediately.\n\nIn this example, the `application_fee_amount=\"200\"` is set on the direct charge.\n\n*   On January 15, you make a direct charge of 10 USD with a 2 USD application fee.\n    *   The 2 USD application fee transfers to your platform.\n    *   8 USD is netted in the connected account.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +2.00 |\n| Cash | +2.00 |\n\n## Contra revenue with issuing refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo refund an application fee, pass a `refund_application_fee` value of `true` in the refund request or provide a `refund_application_fee` value of `false` to refund the application fee separately through the API. In both cases, Stripe books the refunded application fee as contra revenue.\n\nIn this example, the `application_fee_amount=\"200\"` is set on the charge.\n\n*   On January 15, you make a direct charge of 10 USD with a 2 USD application fee.\n    *   The 2 USD application fee transfers to your platform.\n    *   8 USD is netted in the connected account.\n*   On February 21, Stripe refunds the full charge amount of 10 USD and the full application fee amount of 2 USD.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +2.00 |     |\n| Cash | +2.00 | \\-2.00 |\n| Refunds |     | +2.00 |",
  "title": "Revenue Recognition for direct charges | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with direct charges.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports/income-statement",
  "markdown": "# Income statement | Stripe DocumentationThe Stripe Docs logo\n\n`select \"accounting_period\", \"presentment_currency\", \"transaction_model_id\", \"account_type\", \"account\", \"booked_date\", \"presentment_net_income\", \"invoice_id\", \"line_item_id\", \"invoice_item_id\", \"charge_description\", \"invoice_line_item_description\" from (   select   original.*     , charges.description as charge_description     , invoice_line_items.description as invoice_line_item_description FROM   (     with unbilled_ar_accounts as (       values 'UnbilledAccountsReceivable'     )   , formatted_changes as (   select     livemode,     invoice_id,     line_item_id,     invoice_item_id,     subscription_item_id,     customer_balance_transaction_id,     charge_id,     refund_id,     debit,     credit,     debit_account_type,     credit_account_type,     debit_gl_code,     credit_gl_code,     accounting_period_date,     presentment_amount,     presentment_currency,     date_format(accounting_period_date, '%Y-%m-%d') as accounting_period,     date_format(booked_date, '%Y-%m-%d') as booked_date,     coalesce(       invoice_id,       invoice_item_id,       charge_id,       refund_id,       subscription_item_id,       customer_balance_transaction_id,       customer_id     ) as linked_invoice_id,     coalesce(       invoice_item_id,       line_item_id,       invoice_id,       charge_id,       refund_id,       subscription_item_id,       customer_balance_transaction_id,       customer_id     ) as linked_invoice_line_item_id   ,     if(lower(presentment_currency) in ('bif', 'clp', 'djf', 'gnf', 'jpy', 'kmf', 'krw', 'mga', 'pyg', 'rwf', 'vnd', 'vuv', 'xaf', 'xof', 'xpf'), cast(presentment_amount as decimal(18, 0)), cast(0.01 * presentment_amount as decimal(18, 2))) as decimalized_amount,     case when debit in (select * from unbilled_ar_accounts) OR credit in (select * from unbilled_ar_accounts) then true else false end AS is_unbilled   from revenue_recognition_debits_and_credits )  , raw_net_changes as (   select     debit as account,     debit_gl_code as gl_code,     debit_account_type as account_type,     decimalized_amount as presentment_raw_net_change,     *   from formatted_changes   union all   select     credit as account,     credit_gl_code as gl_code,     credit_account_type as account_type,     -decimalized_amount as presentment_raw_net_change,     *   from formatted_changes )  , net_changes as (   select     (case when account_type in ('Assets', 'ContraRevenue', 'Expenses', 'Losses')       then presentment_raw_net_change else -presentment_raw_net_change end) as presentment_net_change,     *   from raw_net_changes )  , ungrouped_results as (   select     presentment_currency,   \taccounting_period,     linked_invoice_line_item_id as transaction_model_id,     account_type,     account,     gl_code,     booked_date,     invoice_id,     line_item_id,     invoice_item_id,     charge_id,     presentment_net_change   from net_changes   where     account_type in ('Revenue', 'ContraRevenue', 'Expenses', 'Gains', 'Losses')     and accounting_period >= date_format(timestamp '2024-02-01 00:00:00', '%Y-%m-%d')     and accounting_period <= date_format(date_add('second', -1, timestamp '2024-03-01 00:00:00'), '%Y-%m-%d') ), results as (   select     presentment_currency,     accounting_period,     transaction_model_id,     account_type,     account,     gl_code,     booked_date,     arbitrary(invoice_id) as invoice_id,     arbitrary(line_item_id) as invoice_line_item_id,     arbitrary(invoice_item_id) as invoice_item_id,     max(charge_id) as charge_id,     sum(presentment_net_change * (case when account_type in ('Revenue', 'Gains') then 1 else -1 end)) as presentment_net_income   from ungrouped_results   group by presentment_currency, accounting_period, transaction_model_id, account_type, account, gl_code, booked_date )  select   accounting_period,   presentment_currency,   transaction_model_id,   account_type,   account,   gl_code,   booked_date,   invoice_id,   invoice_line_item_id as line_item_id,   invoice_item_id,   charge_id,   presentment_net_income from results where   presentment_net_income != 0  order by accounting_period, presentment_currency, transaction_model_id, account_type, account, gl_code, booked_date    ) original     left join charges on charges.id = original.charge_id     left join invoices on original.invoice_id = invoices.id     left join invoice_line_items on invoice_line_items.id = original.line_item_id  )`",
  "title": "Income statement | Stripe Documentation",
  "description": "Learn about the income statement report.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/connect/charges-transfers",
  "markdown": "# Revenue Recognition for separate charges and transfers\n\n## Learn how Revenue Recognition works with separate charges and transfers.\n\nWith Connect, you can make charges on your platform account on behalf of connected accounts, perform transfers separately, and retain funds in the process.\n\nStripe Revenue Recognition manages separate charges on the platform account in the same manner we handle charges and invoices. Stripe books separate transfers as contra revenue, and transfer reversals cancel out the contra revenue. Revenue Recognition doesn’t automatically link [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) because they might not always have a direct connection.\n\nIn this example, `amount=\"1000\"` is set on the separate transfer.\n\n*   On January 1, you create a charge of 15 USD.\n*   On January 2, you create a transfer of 10 USD.\n*   On February 1, you create a refund of 15 USD.\n*   On February 2, you create a transfer reversal of 10 USD.\n\nIf you view the summary after February ends, your data might resemble the following:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +15.00 |     |\n| Refund |     | +15.00 |\n| Transfer | +10.00 | \\-10.00 |\n| Cash | +5.00 | \\-5.00 |",
  "title": "Revenue Recognition for separate charges and transfers | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with separate charges and transfers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports/sigma-and-sdp",
  "markdown": "# Custom reports by Sigma and SDP\n\n## Learn how to build your own Revenue Recognition reports using Sigma and SDP.\n\nYou can build your customized reports using `revenue_recognition_debits_and_credits` and other tables in [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard).\n\n## Recognized revenue from unpaid invoices example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis sample query generates a report for revenue recognized from the unpaid open invoices and groups the invoices by invoice ID. You can add your desired time frames and adjust the grouping parameters.\n\n#### Note\n\nIf you’re using our [chart of accounts](https://docs.stripe.com/revenue-recognition/chart-of-accounts) beta feature, be sure to update the `debit` and `credit` mappings in the query below to reflect the accounts in your general ledger.\n\n`with revrec as (   select     *   from     revenue_recognition_debits_and_credits   where     debit = 'DeferredRevenue' and credit = 'Revenue' ), sigmainv as (   select     *   from     invoices   where     status = 'open' ) select   revrec.invoice_id,   SUM(revrec.presentment_amount) AS recognized_revenue from   sigmainv   left join revrec on revrec.invoice_id = sigmainv.id group by revrec.invoice_id`",
  "title": "Custom reports by Sigma and SDP | Stripe Documentation",
  "description": "Learn how to build your own Revenue Recognition reports using Sigma and SDP.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-reconciliation",
  "markdown": "# Data reconciliation with Stripe reports\n\n## Learn how to reconcile Revenue Recognition data with other financial reports.\n\nYou can reconcile the cash account from Revenue Recognition and the **Balance change from activity** report within the same month. Because Revenue Recognition focuses on revenue-generating activities, you must exclude fees, network costs, contributions, and financing paydowns from the **Balance change from activity** report before reconciling. To get the cash amount in Revenue Recognition, download the balance sheet report in the summary format.\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs an example, the report might look like the following, with a 100 USD amount:\n\n| account | currency | net change |\n| --- | --- | --- |\n| Cash | usd | +100.00 |\n| Cash | eur | +15.00 |\n\nTo get the cash amount in the **Balance change from activity** report, set the currency to USD, and the report timezone to UTC.\n\nAfter downloading the report in the summary format, it might look like the following:\n\n| reporting category | currency | gross |\n| --- | --- | --- |\n| `charge` | usd | +140.00 |\n| `refund` | usd | \\-40.00 |\n| `refund_failure` | usd | +20.00 |\n| `partial_capture_reversal` | usd | \\-20.00 |\n| `fee` | usd | \\-10.00 |\n| `network_cost` | usd | \\-10.00 |\n| `contribution` | usd | \\-10.00 |\n| `financing_paydown` | usd | \\-10.00 |\n| `total` | usd | +60.00 |\n\nThe total gross amount excludes some Stripe fees. After deducting rows for additional Stripe fees, network costs, contributions, and financing paydowns, the calculated cash amount is 100 USD.\n\n## Journal entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe journal entries in the **Debits and credits** report don’t consider fees, network costs, contributions, and financing paydowns. However, you can use Stripe fees in your Revenue Recognition reporting to create journal entries for these items.\n\n#### Note\n\nTo enable Stripe fees support in Revenue Recognition, [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page. When you enable this feature, the journal entries in the **Debits and credits** report automatically incorporate fees, network costs, and contributions.\n\nWith Stripe fees enabled, you can do the following to reconcile Revenue Recognition fees with the [Balance change from activity](https://docs.stripe.com/reports/balance) report:\n\n1.  Download the **Balance change from activity** report in the summary format. Make sure you select these columns: **Reporting Category**, **Gross**, and **Fee**.\n2.  Calculate the total fee by summing the values in these columns:\n    *   **Gross** column: fee, network cost, and contribution\n    *   **Fee** column: total\n\nIn the following example, you calculate the total fees: `-1000.00 + -0.50 + -0.40 + -1.00` to get the sum: `-1001.90`.\n\n| reporting category | gross | fee |\n| --- | --- | --- |\n| `charge` | 100.00 | \\-4.00 |\n| `refund` | \\-100.00 | 3.00 |\n| `platform earning refund` | \\-0.10 | 0.00 |\n| `fee` | **\\-1000.00** | 0.00 |\n| `network cost` | **\\-0.50** | 0.00 |\n| `contribution` | **\\-0.40** | 0.00 |\n| `total` | \\-1001.00 | **\\-1.00** |\n\nIf you download the **Debits and credits** report in the summary format, you can see `1001.90` debited from the Fees expense account and credited to the Cash account.\n\n| debit | credit | amount |\n| --- | --- | --- |\n| Fees | Cash | 1001.90 |",
  "title": "Data reconciliation with Stripe reports | Stripe Documentation",
  "description": "Learn how to reconcile Revenue Recognition data with other financial reports.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/products-prices/overview",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Overview\n\n## Model your business on Stripe with products and prices.\n\nSign up for developer updates:",
  "title": "Overview | Stripe Documentation",
  "description": "Model your business on Stripe with products and prices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-cpq/overview",
  "markdown": "# Stripe Billing Connector for Salesforce CPQ\n\n## Enable your sales team to create and manage subscriptions on Stripe without leaving Salesforce.\n\nThe Stripe Billing Connector for Salesforce CPQ enables you to automatically:\n\n*   Create a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules) on Stripe when your sales team activates a Salesforce CPQ order.\n*   Update a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules) on Stripe when your sales team amends a Salesforce CPQ order.\n*   Send [invoices](https://docs.stripe.com/billing/invoices/subscription) to customers for both recurring and one-time items when you configure subscriptions on Stripe.\n*   Populate Salesforce CPQ orders with links in the [Stripe Dashboard](https://docs.stripe.com/dashboard/basics) for reviewing and managing customers, subscriptions, and invoices in Stripe.\n\nThis example shows the connector creating a Stripe subscription schedule from an activated Salesforce CPQ order.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector assumes the following about your Salesforce account configuration:\n\n*   You use Salesforce CPQ.\n*   You use Stripe Billing.\n*   Collections activity won’t occur in other billing or accounting systems.\n*   A Salesforce order is sent to Stripe for billing and collections upon activation. Inactive orders in Salesforce won’t be sent to Stripe for billing or collections, by default.\n*   All order quantities are integers and not fractional values.\n*   All order amendments must co-terminate with the original order’s end date.\n*   Any invoices in Stripe generated as a result of activating a Salesforce CPQ order won’t exist in Salesforce, by either creation or syncing. For Stripe to Salesforce syncing, see the [Stripe Connector for Salesforce](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/overview).\n\n## Install the connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector is a managed package that you install from the [Salesforce AppExchange](https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000FOm4xUAD) onto your Salesforce account.",
  "title": "Stripe Billing Connector for Salesforce CPQ | Stripe Documentation",
  "description": "Enable your sales team to create and manage subscriptions on Stripe without leaving Salesforce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/rules/examples",
  "markdown": "# Rules examples | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use rules through examples.\n\n## Tax treatment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo categorize a tax line item (for example, created by Avalara), you can set one rule like the one in this example:\n\n| Components | Value |\n| --- | --- |\n| Apply to | Invoices > Line item description contains all of the following: AvaTax |\n| Effective period | Start: All past dates - End: Indefinite |\n| Treatments | Tax (100%) |\n\nIf you have a 10 USD [invoice](https://docs.stripe.com/api/invoices \"invoices\") line item with the description “Sales Tax calculated by AvaTax,\" and the invoice finalizes in April, you’d see the account balances as in the following example:\n\n| Account | April |\n| --- | --- |\n| AccountsReceivable | 10 USD |\n| TaxLiability | 10 USD |\n\n## Passthrough fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo categorize 10% of an amount as a passthrough fee, you can set one rule like the following example:\n\n| Components | Value |\n| --- | --- |\n| Apply to | Invoices > All line items |\n| Effective period | Start: All past dates—End: Indefinite |\n| Treatments | Amortization over line item service period (90%) and Passthrough fee (10%) |\n\nIf you have a 100 USD invoice line item (without a service period) that finalizes in April, you’d see the account balances like the following example:\n\n| Account | April |\n| --- | --- |\n| AccountsReceivable | 100 USD |\n| Revenue | 90 USD |\n| PassthroughFees | 10 USD |\n\n## Exclude transactions from a test customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo exclude all the standalone payments from a test customer, you can set one rule like the following example:\n\n| Components | Value |\n| --- | --- |\n| Apply to | Customers > Customer email contains all of the following: test@stripe.com<br><br>Other payments > All other payments |\n| Effective period | Start: All past dates—End: Indefinite |\n| Treatments | Exclude revenue (100%) |\n\nOther payments from the customer, whose email is test@stripe.com, would be excluded from the report completely.\n\n## Exclude standalone payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo exclude all standalone payments from the report, set a rule like the following:\n\n| Components | Value |\n| --- | --- |\n| Apply to | Other payments > All other payments |\n| Effective period | Start: All past dates—End: Indefinite |\n| Treatments | Exclude revenue (100%) |\n\nThis rule restricts Revenue Recognition to only include recurring payments and one-time invoice payments in your revenue accounting reports. Standalone payments are excluded from the report.\n\n## Amortize revenue over custom time period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this example, we want to (1) amortize other payments from a small set of customers (for example, `cus_AAA` and `cus_BBB`) over one year and (2) amortize the remaining other payments over one month.\n\nWe can make two rules and use the order of the rules as shown in the following example:\n\n**Rule 1:** Amortize other payments over one year\n\n| Components | Value |\n| --- | --- |\n| Apply to | Customers > Customer ID matches any of the following: cus\\_AAA, cus\\_BBB<br><br>Other payments > All other payments |\n| Effective period | Start: All past dates - End: Indefinite |\n| Treatments | Amortization over custom service period (100%) > Amortization starting 0 days from paid time over 1 year |\n\n**Rule 2:** Amortize other payments over one month\n\n| Components | Value |\n| --- | --- |\n| Apply to | Other payments > All other payments |\n| Effective period | Start: All past dates - End: Indefinite |\n| Treatments | Amortization over custom service period (100%) > Amortization starting 0 days from paid time over 1 month |\n\nOther payments from `cus_AAA` or `cus_BBB` would match Rule 1, and the revenue would be amortized over one year. Other payments from any other customer would match Rule 2, and the revenue would be amortized over one month.",
  "title": "Rules examples | Stripe Documentation",
  "description": "Learn how to use rules through examples.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/pricing-table",
  "markdown": "# Create an embeddable pricing table\n\nWhen a customer purchases a subscription, you’ll see it on the [subscriptions page](https://dashboard.stripe.com/subscriptions) in the Dashboard.\n\n### Handle fulfillment with the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe pricing table component uses Stripe Checkout to render a prebuilt, hosted payment page. When a payment is completed using Checkout, Stripe sends the [`checkout.session.completed`](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") that you can use for fulfillment and reconciliation. See the [Checkout fulfillment guide](https://docs.stripe.com/checkout/fulfillment) for more details.\n\nThe `<stripe-pricing-table>` web component supports setting the `client-reference-id` property. When the property is set, the pricing table passes it to the Checkout Session’s [`client_reference_id`](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_reference_id) attribute to help you reconcile the Checkout Session with your internal system. This can be an authenticated user ID or a similar string. `client-reference-id` can be composed of alphanumeric characters, dashes, or underscores, and be any value up to 200 characters. Invalid values are silently dropped and your pricing table will continue to work as expected.\n\n#### Caution\n\nSince the pricing table is embedded on your website and is accessible to anyone, check that `client-reference-id` does not include sensitive information or secrets, such as passwords or API keys.\n\n`<body>   <h1>We offer plans that help any business!</h1>   <!-- Paste your embed code script here. -->   <script     async     src=\"[https://js.stripe.com/v3/pricing-table.js](https://js.stripe.com/v3/pricing-table.js)\">   </script>   <stripe-pricing-table     pricing-table-id=`\n\n`'{{PRICING_TABLE_ID}}'`\n\n    `publishable-key=  \"pk_test_TYooMQauvdEDq54NiTphI7jx\"      client-reference-id=\"{{CLIENT_REFERENCE_ID}}\"   >   </stripe-pricing-table> </body>`",
  "title": "Create an embeddable pricing table | Stripe Documentation",
  "description": "Display a pricing table on your website and take customers directly to Stripe Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/revenue-controls/examples",
  "markdown": "# Revenue Recognition controls examples | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about revenue controls through examples.\n\n## Amortization granularity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 25th, at 00:00:00 UTC, 2022, a customer starts a 4-month subscription that costs 120 USD.\n*   The subscription generates an [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n*   The invoice finalizes and the customer pays 120 USD.\n\nIn this example, the invoice and revenue periods are from Jan 25, 2022 to May 25, 2022. The 120 USD is recognized across 7 days in January, 28 days in February, 31 days in March, 30 days in April, and 24 days in May. We can use this example to demonstrate the differences between our supported amortization methods:\n\nIf you looked at the summary after May ends, amortization by millisecond applied, you might see something like:\n\n| Account | Jan | Feb | Mar | Apr | May |\n| --- | --- | --- | --- | --- | --- |\n| Revenue | +7.00 | +28.00 | +31.00 | +30.00 | +24.00 |\n| DeferredRevenue | +113.00 | \\-28.00 | \\-31.00 | \\-30.00 | \\-24.00 |\n\nIf you looked at the summary after May ends, amortization by month evenly applied, you might see something like:\n\n| Account | Jan | Feb | Mar | Apr |\n| --- | --- | --- | --- | --- |\n| Revenue | +30.00 | +30.00 | +30.00 | +30.00 |\n| DeferredRevenue | +90.00 | \\-30.00 | \\-30.00 | \\-30.00 |\n\nIf you looked at the summary after May ends, amortization by month evenly, first and last month prorated applied, you might see something like:\n\n| Account | Jan | Feb | Mar | Apr | May |\n| --- | --- | --- | --- | --- | --- |\n| Revenue | +7.00 | +29.66 | +29.66 | +29.68 | +24.00 |\n| DeferredRevenue | +113.00 | \\-29.66 | \\-29.66 | \\-29.68 | \\-24.00 |\n\n## Catch-up revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On November 1st, 2022, at 00:00:00 UTC, a customer is billed for an [invoice](https://docs.stripe.com/api/invoices \"invoices\") that costs 92 USD.\n*   The invoice has service periods from Oct 1, 2022 to Jan 1, 2023 for all of its line items.\n*   The invoice finalizes and the customer pays 92 USD.\n\nIn this example, the service period for the transaction begins prior to the invoice finalization, triggering the catch-up revenue effect. We can use this example to demonstrate the differences between enabling and disabling catch-up revenue.\n\nAfter December ends, with catch-up revenue enabled, the summary might look like:\n\n| Account | Nov | Dec |\n| --- | --- | --- |\n| Revenue | +61.00 | +31.00 |\n| DeferredRevenue | +31.00 | \\-31.00 |\n\nAfter December ends, with catch-up revenue disabled, the summary might look like:\n\n| Account | Oct | Nov | Dec |\n| --- | --- | --- | --- |\n| Revenue | +31.00 | +30.00 | +31.00 |\n| DeferredRevenue |     | +31.00 (= +61.00 + -30.00) | \\-31.00 |\n| UnbilledAccountsReceivable | +31.00 | \\-31.00 |     |\n| AccountsReceivable |     | +92.00 |     |",
  "title": "Revenue Recognition controls examples | Stripe Documentation",
  "description": "Learn about revenue controls through examples.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data",
  "markdown": "# Manage imported data | Stripe DocumentationThe Stripe Docs logo\n\n## Search for and manage existing imported data.\n\nAfter you import data, you can manage it through the [Dashboard](https://dashboard.stripe.com/revenue-recognition/data-import).\n\n## CSV imports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you upload a CSV, you can refresh this tab to see the status of the import. To help you identify the import type, a **Transaction** (for general import) or **Exclusion** (for exclusion import) tag appears before each import.\n\nSuccessful imports show the number of lines imported. Click **View transactions** or **View exclusions** to navigate to the list of imported transactions or exclusions. Unsuccessful imports show the errors that occurred and each line that the error occurred on.\n\n![Data import CSV import list](https://b.stripecdn.com/docs-statics-srv/assets/data-import-csv-import-list.897afffbbe75c6ae284aab92deb87eb3.png)\n\n## Transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the list view, you can see a paginated view of all transactions that you’ve imported. For Stripe transactions, we provide a link to the main transaction page in the Dashboard.\n\n![Data import transaction list](https://b.stripecdn.com/docs-statics-srv/assets/data-import-transaction-list.c1a3c2b2e2e9238500d5836767260cf7.png)\n\nThe column format follows the CSV format, with the addition of a status column. An **Active** status indicates that the Revenue Recognition reports include the imported data. A **Processing** status indicates that our system has recorded the imported data, but revenue recognition reports don’t yet include this data.\n\nTransactions that have been split into multiple components have a caret icon that you can click to reveal the applicable split transactions.\n\n![Data import transaction list with split transactions expanded](https://b.stripecdn.com/docs-statics-srv/assets/data-import-transaction-list-expanded-split-transactions.44a4f3a52c496de09d7b90e27dee887b.png)\n\n### Filtering ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe transaction list supports filtering on all of the dates associated with the imported data. Additionally, you can filter on **Source**, **Transaction ID** and **Split transaction ID**, but these values must be exact matches.\n\n### Deletion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can delete transactions by selecting them with the checkbox and then clicking **Delete**. Deletions take 48-72 hours to reflect in Revenue Recognition reports.\n\n## Exclusions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the list view, you can see a paginated view of all excluded transactions that you imported. For transactions other than invoice items, we provide a link to the main transaction page in the Dashboard.\n\n![Data import exclusion list](https://b.stripecdn.com/docs-statics-srv/assets/data-import-exclusion-list.601b3ad27aae399df66edfcfc36dfe94.png)\n\nThe column follows the exclusion CSV format, with the addition of a status column. An **Active** status indicates that the transaction is excluded from your Revenue Recognition reports. A **Processing** status indicates that our system has recorded the transaction to be excluded, but Revenue Recognition reports don’t yet exclude this data.\n\n### Filtering![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe exclusion list supports filtering on the ID of the excluded transactions on exactly matched values.\n\n### Deletion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can reverse the exclusions by selecting the transaction checkbox and then clicking **Delete**. Deletions can take 48 to 72 hours to reflect in your Revenue Recognition reports.",
  "title": "Manage imported data | Stripe Documentation",
  "description": "Search for and manage existing imported data.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import/error-handling",
  "markdown": "# Error handling for data import\n\n## Learn how to handle and recover from errors received when importing revenue recognition data.\n\nYou might encounter errors when importing revenue recognition data. The following list describes data import errors and how to resolve them. In most cases, you need to reimport the data to recover from the error.\n\n## General imports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following list contains errors you might encounter with general imports and how you can resolve them.\n\n### CSV file errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to the CSV file and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Empty file | The CSV file doesn’t contain any lines (rows) or a header. It’s a zero-length file. | [Download the CSV template](https://dashboard.stripe.com/revenue-recognition/data-import) from the Stripe Dashboard and add your transaction data. See [Importing data](https://docs.stripe.com/revenue-recognition/data-import#general-import) for data format details. |\n| Invalid data | A line in the CSV file contains invalid data. | Make sure each line includes:<br><br>*   a `transaction_id`<br>*   a date in the YYYY-MM-DD format<br>*   a valid amount<br>*   the currency’s three-letter ISO format<br><br>If you’re managing your data with Microsoft Excel, check that it didn’t automatically change the date format before you import the data. The date must be in the YYYY-MM-DD format.<br><br>See [Importing data](https://docs.stripe.com/revenue-recognition/data-import#general-import) for data format details. |\n| Invalid file | Couldn’t read the CSV file. | [Download the CSV template](https://dashboard.stripe.com/revenue-recognition/data-import) from the Stripe Dashboard and add your transaction data. See [Importing data](https://docs.stripe.com/revenue-recognition/data-import#general-import) for data format details. |\n| Unknown failure | The CSV file failed to import due to unknown reasons. Some transactions might not have been imported. | Please [contact Stripe support](https://support.stripe.com/contact) for help. |\n\n### Transaction ID errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to transaction IDs when doing general imports and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Invalid transaction ID | The transaction ID doesn’t refer to any Stripe transaction. | Make sure the ID is correct.<br><br>If you’re importing third-party transactions, you must change the source to a different identifier than `Stripe`. See [Importing data](https://docs.stripe.com/revenue-recognition/data-import#general-import) for data format details. |\n| Overriding a charge linked to an invoice | A charge is linked to an invoice. | A charge that’s linked to an invoice can’t be overridden. Instead, override the invoice. |\n| Transaction doesn’t exist | The transaction ID couldn’t be found in test or live mode. | Make sure the ID is correct. If it does exist, switch to the appropriate mode ([test or live](https://docs.stripe.com/keys#test-live-modes)) and reimport the transaction. |\n| Unsupported character | The tilde (`~`) character is reserved for Stripe internal usage only. | Use another character in the transaction ID. |\n\n### Split transaction ID errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to split transaction IDs and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Duplicate split transaction IDs | There are duplicate split transaction IDs. | If you’re overriding the service period for an invoice line item, make sure the invoice line item IDs are correct.<br><br>If you’re splitting a transaction, use unique identifiers for each split transaction. |\n| Missing split transaction ID | A split transaction ID is missing. | If you’re overriding the service period for an invoice line item, use the invoice line item ID.<br><br>If you’re splitting a charge, use unique identifiers for each split transaction. |\n| Split transaction doesn’t exist | The split transaction ID couldn’t be found in test or live mode. | Make sure the ID is correct. If it does exist, switch to the appropriate mode ([test or live](https://docs.stripe.com/keys#test-live-modes)) and reimport the transaction. |\n| Split transaction mismatch | There’s a split transaction mismatch. | Check the split transaction ID and see that it matches what was imported.<br><br>If you want to resplit the transaction, delete the existing transactions and reimport it. |\n| Unsupported character | The tilde (`~`) character is reserved for Stripe internal usage only. | Use another character in the split transaction ID. |\n\n### Booked date errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to booked dates and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Missing booked date | A booked date is missing from a third-party transaction. | Check and see if there’s a booked date for the transaction. |\n| Nonempty booked date | There is a booked date for a Stripe invoice when none is expected. | The booked date of a Stripe invoice can’t be overridden. The field must be empty. |\n\n### Recognition date errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to recognition start and end dates and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Missing recognition end date | A recognition end date is missing from a third-party transaction. | Check and see if there’s a recognition end date for the transaction. If you’re overriding a Stripe transaction, you must provide both the recognition start date and end date. |\n| Missing recognition start date | A recognition start date is missing from a third-party transaction. | Check and see if there’s a recognition start date for the transaction. If you’re overriding a Stripe transaction, you must provide both the recognition start date and end date. |\n| Recognition end date is earlier than start date | The recognition end date can’t be earlier than the start date. | Make sure the start and end dates are correct. |\n\n### Amount errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to transaction amounts and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Amount mismatch | The amount doesn’t match the actual amount of the transaction. | The amount of a Stripe transaction can’t be overridden. The field must be empty. |\n| Missing amount | An amount is missing from a third-party transaction. | Check and see if there’s an amount for the transaction. |\n| Total amount mismatch | The amounts of all split transactions don’t sum up to the total amount of the split charge. | Check that all amounts match. |\n\n### Currency errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below describes the errors related to currency and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Currency mismatch | The currency doesn’t match the actual currency of the transaction. | The currency of a Stripe transaction can’t be overridden. The field must be empty. |\n| Missing currency | Currency is missing from a third-party transaction. | Check and see if there’s currency for the transaction. Make sure to use the currency’s three-letter ISO format. |\n| Unsupported currency | The currency you provided is not supported for your account. | Convert it to one of the currencies listed in the error message. See [Supported currencies](https://docs.stripe.com/currencies) for more details. |\n\n## Exclusion imports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following list contains errors you might encounter with exclusion imports and how you can resolve them.\n\n## Transaction ID errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below describes the errors related to transaction IDs when doing exclusion imports and how to handle them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Invalid transaction ID | The transaction ID doesn’t refer to a Stripe transaction. | Make sure the ID is correct, according to the [data format requirements](https://docs.stripe.com/revenue-recognition/data-import#general-import). |\n| Unsupported exclusion for charge or payment with an invoice | You can’t exclude a charge or payment that’s linked to an invoice. Instead, exclude the invoice. | Find the invoice ID for the charge or payment and exclude the invoice ID. |",
  "title": "Error handling for data import | Stripe Documentation",
  "description": "Learn how to handle and recover from errors received when importing revenue recognition data.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import/examples",
  "markdown": "# Data import examples | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to apply data import to common use cases.\n\n## Adding a service period to a Stripe payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this example, you use Stripe as a payment processor, but have your own recurring payment solution. You have payments in Stripe, but your separate system keeps the service period for these payments.\n\nSuppose you have a payment in Stripe with the ID `py_1234` of 120 USD on January 1, 2020 that represents a yearly [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") from February 1, 2020 to January 31, 2021. To add this data to Stripe, you can import a CSV with the following fields:\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Stripe | py\\_1234 |     |     | 2020-02-01 | 2021-01-31 |     |     |     |\n\nStripe already has data on the booked date, amount, and currency, so you can leave these fields blank.\n\n## Adding or overriding a service period on an invoice line item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this example, you use [Stripe Invoicing](https://docs.stripe.com/invoicing), but you have your own recurring payment solution. You may have missing or incorrect service periods on your [invoice](https://docs.stripe.com/api/invoices \"invoices\") line items.\n\nSuppose you manually generated an invoice for a large enterprise customer and finalized this invoice on April 1, 2020. The invoice has the ID `in_1234` and has several line items, some of which are physical goods, and some of which are subscriptions for other products. In your [Revenue Recognition report by line item](https://docs.stripe.com/revenue-recognition/reports#csv-reports), you notice:\n\n*   An unexpected increase in April revenue in your report. The line item for one subscription (`il_5678`) has no service period, and so all of the revenue for that line item books into April.\n*   Another line item for another subscription (`il_7890`) has an incorrect service period of April 1, 2020 to April 15, 2020, resulting in revenue recognized in April.\n\nYou want to recognize revenue for `il_5678` from May 1, 2020 to June 1, 2020, and recognize the revenue for `il_7890` from June 1, 2020 to September 1, 2020.\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Stripe | in\\_1234 | il\\_5678 |     | 2020-05-01 | 2021-06-01 |     |     |     |\n| Stripe | in\\_1234 | il\\_7890 |     | 2020-06-01 | 2021-09-01 |     |     |     |\n\nStripe already has data on the booked date from the invoice finalization date, amount, and currency, so you can leave these fields blank.\n\n## Splitting Stripe payments with additional data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this example, you use Stripe as your payment processor. You have payments in Stripe, but these payments may represent multiple different goods and services that you want to have custom revenue recognition schedules for.\n\nSuppose you have a payment in Stripe of 100 USD with the ID `py_1234` that represents two separate goods and services:\n\n*   A 74.99 USD subscription recognized from February 1, 2020 to May 31, 2020.\n*   A 25.01 USD shipment of materials recognized immediately on a shipment date of January 1, 2020.\n\nTo split this Stripe payment, you could provide the following data:\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Stripe | py\\_1234 | subscription |     | 2020-02-01 | 2021-05-31 | 74.99 | USD | The subscription part of the payment |\n| Stripe | py\\_1234 | shipment |     | 2020-01-01 | 2021-01-01 | 25.01 | USD | The material shipment part of the payment |\n\nYou must specify a unique **Split transaction ID** for each part of the transactions. This helps us differentiate different parts of a payment with the same ID. The only requirement is that each **Split transaction ID** is unique.\n\nStripe already has data on the booked date and currency, so you can leave these fields blank, or fill them in with the correct values. We’ll check that the amounts of each component of the payment add up to the original payment amount, and that the currencies (if specified) stay the same. The descriptions are optional.\n\n## Importing external transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this example, you’re migrating to Stripe from a different payment processor or have a multiple payment processor solution.\n\nSuppose you’re migrating your subscriptions to Stripe, and all of them have already been paid for. One of these subscriptions is a yearly subscription from January 1, 2020 to December 31, 2020 paid for in advance on December 15, 2019 for a price of 100 USD. To import this data into Stripe for revenue recognition purposes, you can provide the following data:\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| My previous system | Transaction 1234 |     | 2019-12-15 | 2020-01-01 | 2020-12-31 | 100 | USD | A yearly subscription |\n\nBecause Stripe doesn’t have any data on this transaction, you must provide every field except **Split transaction ID** and the always optional **Description**. You can also provide a **Split transaction ID** if that best represents your data.\n\nThe currency must be a [currency supported on your account](https://docs.stripe.com/currencies) in Stripe, but otherwise the data in any of the other fields has no restrictions.\n\n## Correcting imported data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you make a mistake when importing data, you can [delete the transaction in the Dashboard](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion), and re-import the correct data to correct the errors. Alternatively, you can upload a new CSV, and any rows with the corresponding **Source**, **Transaction ID**, and **Split transaction ID** to replace the old imported data.\n\nSuppose you have an import like the one below, but want to remove the recognition start and end dates and change the booked date to March 1, 2022.\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Stripe | py\\_1234 |     |     | 2020-02-01 | 2021-01-31 |     |     |     |\n\nYou can import another CSV with the following format, and it completely replaces the previous row:\n\n| source | transaction\\_id | split\\_transaction\\_id | booked\\_date | recognition\\_start\\_date | recognition\\_end\\_date | amount | currency | description |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Stripe | py\\_1234 |     | 2022-03-01 |     |     |     |     |     |\n\nThe blank fields for **Recognition start date** and **Recognition end date** signal that we use the recognition start and end dates for the existing payment, `py_1234`. The previous incorrect recognition start and end date for the import are no longer used.\n\n## Excluding transactions from revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou might want to exclude certain transactions from your revenue recognition process because they were erroneously generated due to incorrect settings or are test transactions.\n\nFor example, you have five transactions to exclude from your revenue:\n\n*   in\\_1234 – test invoice\n*   ii\\_1234 – invoice item incorrectly generated from a subscription update\n*   in\\_5678 – invoice that includes multiple line items, of which il\\_1234 was mistakenly added\n*   py\\_1234 – standalone payment created by a problematic integration\n*   ch\\_1234 – test standalone charge\n\nTo exclude these transactions, [download the CSV template for Exclusion Import](https://dashboard.stripe.com/revenue-recognition/data-import) and fill in the IDs as follows:\n\n| transaction\\_id |\n| --- |\n| in\\_1234 |\n| ii\\_1234 |\n| il\\_1234 |\n| py\\_1234 |\n| ch\\_1234 |",
  "title": "Data import examples | Stripe Documentation",
  "description": "Learn how to apply data import to common use cases.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import/google-play",
  "markdown": "# Stripe Connector for Google Play\n\n## Manage your revenue recognition in Stripe by importing data from Google Play.\n\n[Stripe’s Connector for Google Play](https://docs.stripe.com/stripe-data/import-external-data/connectors/google-play) lets you import subscription purchases from Google Play into Stripe Revenue Recognition automatically.\n\nSome benefits of using Revenue Recognition for Google Play include:\n\n*   **Near real-time availability**: Set up daily, automated imports from Google Play. This minimizes manual work and reduces corrections at month-end.\n*   **Improved refund treatment**: Link refunds to original purchases, and generate more accurate refund journal entries that adjust deferred revenue instead of treating refunds as negative line items.\n*   **Audit by order**: Break down numbers on a transactional basis for easier audits.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo import data from Google Play, set up Stripe’s Connector for Google Play using [these instructions](https://docs.stripe.com/stripe-data/import-external-data/connectors/google-play). Stripe populates the data in your Revenue Recognition reports within 72 hours.\n\n### Backfill historical data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you onboard, the Connector backfills up to 1 year of historical data.\n\n### Handle Google transactions previously imported through manual data import ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you previously imported data from Google Play using Revenue Recognition’s [data import](https://docs.stripe.com/revenue-recognition/data-import#general-import) feature, you want to avoid double-counting Google revenue upon switching to the automated Connector.\n\nTo migrate from manual data imports to the Google Play Connector, [delete](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion) all Google transactions from the past year that you uploaded manually through data import CSVs. The Connector import then replaces these deleted entries.\n\n#### Limit deletions to 1 year of history\n\nDon’t delete data import CSV uploads for Google transactions that occurred more than 1 year ago because the Connector only backfills up to 1 year of historical data.\n\n## Examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following examples show how the Google Play Connector might record revenue in different scenarios.\n\n### Subscription purchase ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn December 3, a subscriber purchases 1 unit of a “News Plan Monthly” subscription.\n\n*   The subscription is valid for a month, which means the service period is from Dec 3 to Jan 3.\n*   The customer pays 31 USD.\n\nAt the end of January, the summary might show:\n\n| Account | December | January |\n| --- | --- | --- |\n| External Asset | +31 |     |\n| Revenue | +28 | +3  |\n| Deferred Revenue | +3  | \\-3 |\n\n*   Revenue gets billed and paid in full on December 3.\n*   The bulk of the revenue is recognized in December, with a smaller part recognized in January.\n\n### Subscription refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn January 2, a subscriber purchases a three-month subscription that costs 90 USD.\n\n*   The service period is Jan 2 - April 2.\n*   On February 1, the customer receives a full refund, meaning:\n    *   The customer gets their money back.\n    *   Recognized revenue is offset by the refund in a contra revenue account.\n    *   The unused part of the subscription revenue gets cleared from the deferred revenue.\n\nIn this case, the refund reduces the external assets balance by 90 USD. The customer received 30 days of service, so you must add 30 USD back to the external refunds balance. The remainder of the deferred revenue, 60 USD in this case, is also cleared. At the end of April, the summary might show:\n\n| Account | December | January |\n| --- | --- | --- |\n| Revenue | +30 |     |\n| Deferred Revenue | +60 | \\-60 |\n| External Asset | +90 | \\-90 |\n| External Refunds |     | +30 |\n\n### Free trial ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t generate journal entries for free trials.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue Recognition doesn’t support withholding taxes or commission fees reported by Google.",
  "title": "Stripe Connector for Google Play | Stripe Documentation",
  "description": "Manage your revenue recognition in Stripe by importing data from Google Play.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_run/create",
  "markdown": "# Create a Report Run | Stripe API Reference\n\nCreates a new object and begin running the report. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\n*   #### \n    \n    report\\_typestringRequired\n    \n    The ID of the [report type](https://docs.stripe.com/reporting/statements/api#report-types) to run, such as `\"balance.summary.1\"`.\n    \n*   Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://docs.stripe.com/reporting/statements/api) documentation.\n    \n\n### Returns\n\nReturns the new `ReportRun` object.\n\nPOST /v1/reporting/report\\_runs\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d report_type=\"balance.summary.1\" \\  -d \"parameters[interval_start]\"=1680000000 \\  -d \"parameters[interval_end]\"=1680100000\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [Retrieve a Report Run](https://docs.stripe.com/api/reporting/report_run/retrieve)\n\nRetrieves the details of an existing Report Run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportRun` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs/frr_1MrQwrLkdIwHu7ixUov4x2b3 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [List all Report Runs](https://docs.stripe.com/api/reporting/report_run/list)\n\nReturns a list of Report Runs, with the most recent appearing first.\n\n### Parameters\n\n*   Only return Report Runs that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Report Runs, starting after the argument `starting_after` if it is provided. Each entry in the array is a separate `ReportRun` object. If no more Report Runs are available, the resulting array will be empty.\n\nGET /v1/reporting/report\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",      \"object\": \"reporting.report_run\",      \"created\": 1680203749,      \"error\": null,      \"livemode\": false,      \"parameters\": {        \"interval_end\": 1680100000,        \"interval_start\": 1680000000      },      \"report_type\": \"balance.summary.1\",      \"result\": null,      \"status\": \"pending\",      \"succeeded_at\": null    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a Report Run | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/reporting/report_run/object",
  "markdown": "# The Report Run object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Parameters of this report run.\n    \n*   The ID of the [report type](https://docs.stripe.com/reports/report-types) to run, such as `\"balance.summary.1\"`.\n    \n*   The file object representing the result of the report run (populated when `status=succeeded`).\n    \n*   Status of this report run. This will be `pending` when the run is initially created. When the run finishes, this will be set to `succeeded` and the `result` field will be populated. Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.\n    \n\n### More attributes\n\n*   #### \n    \n    succeeded\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [Create a Report Run](https://docs.stripe.com/api/reporting/report_run/create)\n\nCreates a new object and begin running the report. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\n*   #### \n    \n    report\\_typestringRequired\n    \n    The ID of the [report type](https://docs.stripe.com/reporting/statements/api#report-types) to run, such as `\"balance.summary.1\"`.\n    \n*   Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://docs.stripe.com/reporting/statements/api) documentation.\n    \n\n### Returns\n\nReturns the new `ReportRun` object.\n\nPOST /v1/reporting/report\\_runs\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d report_type=\"balance.summary.1\" \\  -d \"parameters[interval_start]\"=1680000000 \\  -d \"parameters[interval_end]\"=1680100000\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [Retrieve a Report Run](https://docs.stripe.com/api/reporting/report_run/retrieve)\n\nRetrieves the details of an existing Report Run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportRun` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_runs/frr_1MrQwrLkdIwHu7ixUov4x2b3 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",  \"object\": \"reporting.report_run\",  \"created\": 1680203749,  \"error\": null,  \"livemode\": false,  \"parameters\": {    \"interval_end\": 1680100000,    \"interval_start\": 1680000000  },  \"report_type\": \"balance.summary.1\",  \"result\": null,  \"status\": \"pending\",  \"succeeded_at\": null}\n```\n\n## [List all Report Runs](https://docs.stripe.com/api/reporting/report_run/list)\n\nReturns a list of Report Runs, with the most recent appearing first.\n\n### Parameters\n\n*   Only return Report Runs that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Report Runs, starting after the argument `starting_after` if it is provided. Each entry in the array is a separate `ReportRun` object. If no more Report Runs are available, the resulting array will be empty.\n\nGET /v1/reporting/report\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",      \"object\": \"reporting.report_run\",      \"created\": 1680203749,      \"error\": null,      \"livemode\": false,      \"parameters\": {        \"interval_end\": 1680100000,        \"interval_start\": 1680000000      },      \"report_type\": \"balance.summary.1\",      \"result\": null,      \"status\": \"pending\",      \"succeeded_at\": null    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Report Run object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/testing-verification",
  "markdown": "# Testing account verification during API onboarding\n\n## A walk-through of testing different verification states for connected accounts during API onboarding using your test API key.\n\nThis document assumes you’re familiar with [API onboarding](https://docs.stripe.com/connect/api-onboarding), how to [update accounts](https://docs.stripe.com/connect/updating-service-agreements), and [identity verification](https://docs.stripe.com/connect/identity-verification).\n\nTest your verification flows to make sure they can handle changes in account state (for example, when you enable or disable charges). Account states generally change after fulfilling requirements or when reaching processing or time thresholds. The sections below describe these changes and how to test your verification flows.\n\n## Testing initial requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStart by creating a new connected account in test mode, adding a bank account, and showing that the account holder accepted the Stripe Services Agreement. Stripe requires that the connected account explicitly accepts [Stripe’s service agreement](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance) before making payouts. For this example, the `business_type` is set to `company` to illustrate a more complex scenario, and the `external_account` uses a tokenized Stripe test account as a reminder to avoid exposing sensitive information in API calls.\n\n#### Note\n\nYou must provide a test API key from a Stripe account which has begun Connect platform onboarding. The auto-filled Stripe test API key causes these sample requests to fail.\n\nYou can create a connected account using either controller properties or by setting the account type. In either case, you must set country and request the `card_payments` and `transfers` capabilities.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[requirement_collection]\"=application \\  -d business_type=company \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d external_account=btok_us \\  -d \"tos_acceptance[date]\"=1547923073 \\  -d \"tos_acceptance[ip]\"=\"172.18.80.19\"`\n\nAt this point, the account is created but charges and [payouts](https://docs.stripe.com/payouts \"payout\") are still disabled. In the response, check the `requirements.currently_due` array to determine what information you need to collect:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {     \"currently_due\": [       \"business_profile.mcc\",       \"business_profile.url\",       \"company.address.city\",       \"company.address.line1\",       \"company.address.postal_code\",       \"company.address.state\",       \"company.name\",       \"company.phone\",       \"company.tax_id\",       \"relationship.representative\",       \"relationship.owner\"     ],     ...   },   ... }`\n\nThen, use the external account `id` returned in the response to update the account with the additional required information about the account:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"business_profile[mcc]\"=5045 \\   --data-urlencode \"business_profile[url]\"=\"[https://bestcookieco.com](https://bestcookieco.com/)\" \\  -d \"company[address][city]\"=Schenectady \\  -d \"company[address][line1]\"=\"123 State St\" \\  -d \"company[address][postal_code]\"=12345 \\  -d \"company[address][state]\"=NY \\  -d \"company[tax_id]\"=000000000 \\  -d \"company[name]\"=\"The Best Cookie Co\" \\  -d \"company[phone]\"=8888675309`\n\nAfter successfully updating the company details, checking `requirements.currently_due` shows the `relationship` requirements are still required:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {     \"currently_due\": [       \"relationship.representative\",       \"relationship.owner\",     ],     ...   },   ... }`\n\nUse the [Persons](https://docs.stripe.com/api/persons) API to create a profile for the person representing the relationship to the account. For this example, we create a profile for Jenny Rosen, and identify her as the `representative`. For this example, we also populate the optional `title` attribute.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d first_name=Jenny \\  -d last_name=Rosen \\  -d \"relationship[representative]\"=true \\  -d \"relationship[title]\"=CEO`\n\n#### Note\n\nFor accounts with [business\\_type](https://docs.stripe.com/api/accounts/object#account_object-business_type) set to `individual`, provide at least one `individual` property (for example, `individual.first_name`) and a [Person](https://docs.stripe.com/api/persons/object) object is created automatically. If you don’t, or for accounts with the `business_type` set to `company`, you need to [create each Person](https://docs.stripe.com/api/persons/create) for the account.\n\nWhen you create a `Person`, the response includes a `requirements` hash listing the required verification information for that person.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {     \"currently_due\": [       \"address.city\",       \"address.line1\",       \"address.postal_code\",       \"address.state\",       \"dob.day\",       \"dob.month\",       \"dob.year\",       \"phone\",       \"email\",       \"relationship.executive\",       \"ssn_last_4\"     ],     ...   },   ... }`\n\nAfter you create a `Person` for your external account, checking the `Account` object shows that the required verification information for the newly created `Person` has been added to the `requirements.currently_due` list:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {     \"currently_due\": [       \"person.person_xxx.address.city\",       \"person.person_xxx.address.line1\",       \"person.person_xxx.address.postal_code\",       \"person.person_xxx.address.state\",       \"person.person_xxx.dob.day\",       \"person.person_xxx.dob.month\",       \"person.person_xxx.dob.year\",       \"person.person_xxx.phone\",       \"person.person_xxx.email\",       \"person.person_xxx.relationship.executive\",       \"person.person_xxx.ssn_last_4\",       \"relationship.owner\"     ],     ...   },   ... }`\n\nUse the [Update a Person](https://docs.stripe.com/api/persons/update) API to provide the requested verification information for Jenny Rosen:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"address[city]\"=Schenectady \\  -d \"address[line1]\"=\"123 State St\" \\  -d \"address[postal_code]\"=12345 \\  -d \"address[state]\"=NY \\  -d \"dob[day]\"=10 \\  -d \"dob[month]\"=11 \\  -d \"dob[year]\"=1980 \\  -d ssn_last_4=0000 \\  -d phone=8888675309 \\   --data-urlencode email=\"jenny@bestcookieco.com\" \\  -d \"relationship[executive]\"=true`\n\nSetting `relationship[executive]=true` confirms to Stripe that the representative is someone with significant control in the organization. [US required verification information](https://docs.stripe.com/connect/required-verification-information#additional-company-card-representative-us) has more information about company representative verification details for US businesses.\n\nAfter providing the `representative` information, we still need to identify the `owner` for the account. In this example, Kathleen Banks owns 80% of The Best Cookie Co.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d first_name=Kathleen \\  -d last_name=Banks \\   --data-urlencode email=\"kathleen@bestcookieco.com\" \\  -d \"relationship[owner]\"=true \\  -d \"relationship[percent_ownership]\"=80`\n\nIn our example, Kathleen Banks owns less than 100% of The Best Cookie Co. Since you haven’t defined another owner to make the ownership total 100%, Stripe requires you to confirm that you’ve provided information on all required owners.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"company[owners_provided]\"=true`\n\nSuccessful completion of your connected account at this stage means:\n\n*   You’ve completed all required information (`requirements.currently_due=null`).\n*   Charges are enabled for the account (`charges_enabled=true`).\n*   You received an `account.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") from Stripe.\n\n## Testing thresholds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhether you use upfront onboarding or incremental onboarding, Stripe might request more information about connected accounts as different thresholds are reached. Sometimes these thresholds are triggered by verification failures or [OFAC](https://www.treasury.gov/about/organizational-structure/offices/Pages/Office-of-Foreign-Assets-Control.aspx) checks. Other times, they’re triggered by a processing or time component. For example, more information might be required after 1,500 USD in charges or 30 days after an account is created (whichever comes first). To find out what information is required and by when, you can check the `requirements.eventually_due` array and the `requirements.current_deadline` timestamp.\n\nIn some cases, if the you don’t collect new information by a certain date, charges and payouts might be disabled until you collect it. You can trigger these scenarios so that you can test these thresholds, and then collect the required information.\n\n### Triggering thresholds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a charge with the [verification](https://docs.stripe.com/connect/testing#trigger-cards) token (`tok_visa_triggerVerification`) to trigger a generic verification threshold. This doesn’t block charges or payouts, but it does trigger the request for additional information. If you’re listening to the `account.updated` webhook, you can check:\n\n*   `requirements.currently_due` to find out what information is needed.\n*   `requirements.current_deadline` to find out when the information is needed.\n\nIf the information isn’t collected by the `current_deadline`, charges and payouts might be disabled. To test scenarios like this, see the blocking [charges](#blocked-charges) and [payouts](#blocked-payouts) sections below.\n\nYou can also trigger more specific verification thresholds, like when there’s an [identity mismatch](https://docs.stripe.com/connect/testing#test-personal-id-numbers) or when an [OFAC threshold](https://docs.stripe.com/connect/testing#test-dobs) is reached. Testing these thresholds is beneficial because they often happen when verification fails.\n\n### Testing blocked charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can block charges by creating a test charge with the [charge block](https://docs.stripe.com/connect/testing#trigger-cards) token (`tok_visa_triggerChargeBlock`). After doing this, you should receive an `account.updated` webhook that shows:\n\n*   `charges_enabled=false`.\n*   The required information in the `requirements.currently_due` array.\n*   An empty `requirements.eventually_due` array.\n\nYou can then [update the account](https://docs.stripe.com/api/accounts/update) with the new information. That triggers another webhook, which indicates that charges are enabled and that the `requirements.currently_due` and `requirements.eventually_due` arrays are both empty.\n\n### Testing blocked payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can block payouts by creating a test charge with the [block transfer](https://docs.stripe.com/connect/testing#trigger-cards) token (`tok_visa_triggerTransferBlock`). After doing this, you should receive an `account.updated` webhook that shows:\n\n*   `payouts_enabled=false`.\n*   The required information in the `requirements.currently_due` array.\n*   An empty `requirements.eventually_due` array.\n\nYou can then [update the account](https://docs.stripe.com/api/accounts/update) with the new information. That triggers another webhook, which indicates that payouts are enabled and that the `requirements.currently_due` and `requirements.eventually_due` arrays are both empty.",
  "title": "Testing account verification during API onboarding | Stripe Documentation",
  "description": "A walk-through of testing different verification states for connected accounts during API onboarding using your test API key.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts/update",
  "markdown": "# Update an account | Stripe API Reference\n\nUpdates a [connected account](https://docs.stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, you can update any information on the account.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, you can update all information until you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions) to start Connect onboarding, after which some properties can no longer be updated.\n\nTo update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our [Connect](https://docs.stripe.com/connect/updating-accounts) documentation to learn more about updating accounts.\n\n### Parameters\n\n*   Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist or another issue occurs, this call raises [an error](#errors). Some validations will not raise an error but will instead populate the [`requirements.errors`](#account_object-requirements-errors) array.\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Retrieve account](https://docs.stripe.com/api/accounts/retrieve)\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```\n\n## [Reject an account](https://docs.stripe.com/api/account/reject)\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```",
  "title": "Update an account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/identity-verification",
  "markdown": "# Identity verification for connected accounts\n\n## Use identity verification to reduce risk on your platform when using Connect.\n\nEvery country has its own requirements that accounts must meet for Stripe to be able to pay out funds to individuals and companies. These are typically known as [Know Your Customer](https://support.stripe.com/questions/know-your-customer-obligations) (KYC) requirements. Regardless of the country, broadly speaking, the requirements Stripe must meet are:\n\n*   Collecting information about the individual or company receiving funds\n*   Verifying information to establish that we know who our customers are\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms collect the required information from users and provide it to Stripe. This may include information about the legal entity and personal information about the representative of the business, as well as those who own or control the business. Stripe then attempts verification. In some cases, Stripe may be able to verify an account by confirming some or all of the keyed-in data provided. In other cases, Stripe may require additional information, including, for example, a scan of a valid government-issued ID, a proof of address document, or both.\n\nThis page explains the verification flow options to meet Stripe KYC requirements, but the easiest way to manage verification is to integrate [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding), which lets Stripe take care of the complexity around the basic KYC obligations associated with an account’s capabilities. Handling the details of account verification is initially complex and requires vigilance to keep up with the constantly evolving regulatory changes around the world.\n\nStripe recommends using Connect Onboarding. If you decide to handle account verification yourself, continue reading to learn about the verification flow options, how API fields translate to companies and individuals, and how to localize information requests. Also, read [Handling Identity Verification with the API](https://docs.stripe.com/connect/handling-api-verification) to learn how to programmatically provide information and handle requests.\n\nEven after Stripe verifies a connected account, platforms still must [monitor for and prevent fraud](https://docs.stripe.com/connect/risk-management/best-practices#fraud). Don’t rely on Stripe’s verification to meet any independent legal KYC or verification requirements.\n\n## Verification requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVerification requirements for connected accounts vary by account, depending on:\n\n*   Country\n*   Capabilities\n*   Business type (for example, individual, company)\n*   Business structure (for example, public corporation, private partnership)\n*   The service agreement type between Stripe and the connected account\n*   The risk level\n\nYou must collect and verify specific information to enable charges and [payouts](https://docs.stripe.com/payouts \"payout\"). For example, for a company in the US, you might need to collect:\n\n*   Information about the business (for example, name, address, tax ID number).\n*   Information about the person opening the Stripe account (for example, name, date of birth).\n*   Information about [beneficial owners](https://support.stripe.com/questions/beneficial-owner-and-director-definitions) (for example, name, email).\n\nAt certain variable thresholds—usually when a specified amount of time has passed or volume of charges have been made—you may need to collect and verify additional information. Stripe temporarily pauses charges or payouts if the information isn’t provided or verified according to the thresholds for [required information](https://docs.stripe.com/connect/required-verification-information). For example, additional information might include verification of the company tax ID number.\n\n## Onboarding flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding only collects the `currently_due` requirements.\n\n|     | Upfront onboarding | Incremental onboarding |\n| --- | --- | --- |\n| **Advantages** | *   Entails a single request for information (normally)<br>*   Creates fewer problems in receiving payouts and maintaining processing ability<br>*   Exposes potential fraudsters or connected accounts who refuse to provide required information later | *   Onboards connected accounts quickly<br>*   Results in higher onboarding rates |\n| **Disadvantages** | *   Onboarding connected accounts can take longer<br>*   Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | *   Creates a higher likelihood of disrupting business of an ongoing connected account |\n\nTo determine whether to use upfront or incremental onboarding, review the [required information](https://docs.stripe.com/connect/required-verification-information) for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\n\n## Business type ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe specific KYC information depends on the [type of business entity](https://docs.stripe.com/api/accounts/object#account_object-business_type). They are:\n\n*   `individual`—Collect information about the person.\n*   `company`—Collect information about the company. Depending on the countries your connected accounts are in, you might also have to collect information about [beneficial owners](https://support.stripe.com/questions/beneficial-owner-and-director-definitions).\n*   `non_profit`—Collect information about the non-profit organization.\n*   `government_entity` (available for US connected accounts only)—Collect information about the government entity.\n\nIf you or your users are unsure of their entity type, the information might be in the business formation documents or tax documents for that entity.\n\nSee the [list of requirements](https://docs.stripe.com/connect/required-verification-information) for different business types by country. When you know what information to collect, you can read more about [handling identity verification with the API](https://docs.stripe.com/connect/handling-api-verification).\n\n## Business structure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor all business types other than `individual`, you can further classify your user’s business by identifying its legal (business) structure. A business structure describes the details of a business entity such as day-to-day operations, tax burdens, liability, and organizational schema. You can classify it by using [company\\[structure\\]](https://docs.stripe.com/api/accounts/create#create_account-company-structure) in the `Account` object.\n\nProviding this information to Stripe gets you the most accurate business classification for compliance purposes. While it isn’t required, it can reduce onboarding requirements. For example, owner information is required for private companies, but not required for public companies. By default, a `company` is considered private if information on the `company.structure` isn’t provided.\n\n### Companies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee the table below for descriptions of the different business structures that you can use to classify a `company`. Refer to the [US required verification information](https://docs.stripe.com/connect/required-verification-information#minimum-verification-requirements-for-united-states) section for more details on requirements.\n\nIf you or your users think the entity type should be `company` but are unsure, the information might be in the business formation documents or tax documents for that entity.\n\n| Business structure | Description |\n| --- | --- |\n| `multi_member_llc` | A business with multiple owners or members that’s registered in a US state as a Limited Liability Company (LLC). |\n| `private_corporation` | A business incorporated in a US state that’s privately owned. It doesn’t have shares that are traded on a public stock exchange. It’s also called a closely-held corporation. If you’re a single-member LLC that has elected to be treated as a corporation for tax purposes, use this classification. |\n| `private_partnership` | A business jointly owned by two or more people that’s created through a partnership agreement. |\n| `public_corporation` | A business incorporated under the laws of a US state. Ownership shares of this corporation are traded on a public stock exchange. |\n| `public_partnership` | A business formed by a partnership agreement with one or more people, but has shares that are publicly traded on a stock exchange. |\n| `single_member_llc` | A business entity registered with a US state as a limited liability company (LLC) and that has only one member or owner. |\n| `sole_proprietorship` | A business that isn’t a separate legal entity from its individual owner. |\n| `unincorporated_association` | A business venture of two or more people that doesn’t have a formal corporate or entity structure. |\n\n### Non-profits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee the table below for descriptions of the different business structures that you can use to classify a `non_profit` with. Refer to the [US required verification information](https://docs.stripe.com/connect/required-verification-information#minimum-verification-requirements-for-united-states) section for more details on requirements.\n\n| Business structure | Description |\n| --- | --- |\n| `incorporated_non_profit` | An organization incorporated under the laws of a US state that has obtained tax-exempt status as a non-profit entity under either state or federal law (for example, 501(c)(3)). |\n| `unincorporated_non_profit` | An organization that’s pursuing an objective other than profits, such as a social cause, and has obtained tax-exempt status in the US under either state or federal law (for example, 501(c)(3)) but hasn’t formally incorporated. |\n\n### Government entities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee the table below for descriptions of the different business structures that you can use to classify a `government_entity` with. Refer to the [US required verification information](https://docs.stripe.com/connect/required-verification-information#minimum-verification-requirements-for-united-states) section for more details on requirements.\n\n| Business structure | Description |\n| --- | --- |\n| `government_instrumentality` | An organization formed by a government statute or body based in the US to perform a certain function, but not the actual government body itself. |\n| `governmental_unit` | A branch of the state, local, or federal government of the US |\n| `tax_exempt_government_instrumentality` | An organization created by or pursuant to government statute and operated for public purposes. It has obtained federal tax-exempt status under state or federal law (for example, 501(c)(3)). |\n\n## Internationalization and localization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you support users in multiple countries, consider internationalization and localization when asking for information. Creating an interface that uses not only the user’s preferred language but also the proper localized terminology results in a smoother onboarding experience.\n\nFor example, instead of requesting a business tax ID from your users, regardless of country, request:\n\n*   EIN, US\n*   Business Number, Canada\n*   Company Number, UK\n\nYou can find recommended country-specific labels along with the other [required verification information](https://docs.stripe.com/connect/required-verification-information).\n\n*   [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding)\n*   [Updating Accounts](https://docs.stripe.com/connect/updating-service-agreements)\n*   [Handling additional verifications with the API](https://docs.stripe.com/connect/handling-api-verification)\n*   [Account tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Testing verification](https://docs.stripe.com/connect/testing-verification)",
  "title": "Identity verification for connected accounts | Stripe Documentation",
  "description": "Use identity verification to reduce risk on your platform when using Connect.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account_links/create",
  "markdown": "# Create an account link | Stripe API Reference\n\nCreates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.\n\n### Parameters\n\n*   The identifier of the account to create an account link for.\n    \n*   The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_onboarding`<br><br>Provides a form for inputting outstanding requirements. Send the user to the form in this mode to just collect the new information you need. |\n    | `account_update`<br><br>Displays the fields that are already populated on the account object, and allows your user to edit previously provided information. Consider framing this as “edit my profile” or “update my verification information”. |\n    \n*   #### \n    \n    refresh\\_urlstringRequired\n    \n    The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link’s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.\n    \n*   The URL that the user will be redirected to upon leaving or completing the linked flow.\n    \n\n### More parameters\n\n### Returns\n\nReturns an account link object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/account_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1Mt0CORHFI4mz9Rw \\  --data-urlencode refresh_url=\"https://example.com/reauth\" \\  --data-urlencode return_url=\"https://example.com/return\" \\  -d type=account_onboarding\n```\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create an account link | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities/retrieve",
  "markdown": "# Retrieve an Account Capability | Stripe API Reference\n\nRetrieves information about the specified Account Capability.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Account Capability object.\n\nGET /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [List all account capabilities](https://docs.stripe.com/api/capabilities/list)\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an Account Capability | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts",
  "markdown": "# Accounts | Stripe API Reference\n\n## [The Account object](https://docs.stripe.com/api/accounts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    business\\_typenullable enum\n    \n*   #### \n    \n    capabilitiesnullable object\n    \n    A hash containing the set of capabilities that was requested for this account and their associated states. Keys are names of capabilities. You can see the full list [here](https://docs.stripe.com/api/capabilities/list). Values may be `active`, `inactive`, or `pending`.\n    \n\n*   The account’s country.\n    \n*   An email address associated with the account. It’s not used for authentication and Stripe doesn’t market to this field without explicit approval from the platform.\n    \n*   #### \n    \n    individualnullable object\n    \n    Information about the person represented by the account. This property is null unless `business_type` is set to `individual`. After you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property is only returned for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for the account, including what information needs to be collected, and by when. You can resolve most requirements programmatically. For some, you must complete a form or challenge through a Stripe interface. [Learn more about handling requirements](https://docs.stripe.com/connect/handling-api-verification).\n    \n\n*   The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom` |\n    | `express` |\n    | `none`<br><br>Indicates that the account was created with [controller](https://docs.stripe.com/api/accounts/object#account_object-controller) attributes that don’t map to a type of `standard`, `express`, or `custom`. |\n    | `standard` |\n    \n\n### More attributes\n\n*   #### \n    \n    business\\_profilenullable object\n    \n\n*   #### \n    \n    controllernullable object\n    \n\n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Create an account](https://docs.stripe.com/api/accounts/create)\n\nWith [Connect](https://docs.stripe.com/connect), you can create Stripe accounts for your users. To do this, you’ll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).\n\nIf you’ve already collected information for your connected accounts, you [can prefill that information](https://docs.stripe.com/connect/best-practices#onboarding) when creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding. You can prefill any information on the account.\n\n### Parameters\n\n*   #### \n    \n    capabilitiesobjectRequired conditionally\n    \n    Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   A hash of configuration describing the account controller’s attributes.\n    \n*   #### \n    \n    countrystringdefault is your own country\n    \n    The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you’re creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe’s global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.\n    \n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The type of Stripe account to create. May be one of `custom`, `express` or `standard`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds.\n\n```\ncurl https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Update an account](https://docs.stripe.com/api/accounts/update)\n\nUpdates a [connected account](https://docs.stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, you can update any information on the account.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, you can update all information until you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions) to start Connect onboarding, after which some properties can no longer be updated.\n\nTo update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our [Connect](https://docs.stripe.com/connect/updating-accounts) documentation to learn more about updating accounts.\n\n### Parameters\n\n*   Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist or another issue occurs, this call raises [an error](#errors). Some validations will not raise an error but will instead populate the [`requirements.errors`](#account_object-requirements-errors) array.\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Retrieve account](https://docs.stripe.com/api/accounts/retrieve)\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```",
  "title": "Accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices?issuing-notices-sender=stripe",
  "markdown": "# Issuing regulated customer notices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about sending regulatory notifications to your customers.\n\nTo comply with applicable laws, Issuing platforms must send customer communications upon certain trigger events. This guide shows you how Stripe helps you stay compliant by sending properly formatted notices when required.\n\nStripe offers a no-code solution to [send regulated emails on your behalf](https://dashboard.stripe.com/settings/connect/emails). We recommend this option because it helps you stay compliant automatically.\n\nStripe monitors [events requiring a customer notice](#notice-events), and sends an email on your behalf to the connected account.\n\n[\n\n## Preview and send test emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#preview-and-send-test-emails)\n\nYou can preview our email templates and send test emails to make sure your branding and email addresses are working as expected.\n\nFrom [Emails](https://dashboard.stripe.com/settings/connect/emails), click **Preview and customize** to view the Issuing notice email templates, then click **Send test email**. Issuing notices only appear on this page for US Issuing platforms.\n\n[\n\n## Confirm your branding settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#confirm-branding-settings)\n\nAll connected accounts that receive Issuing notices see your business name, icon, and branding colors in the notice emails. To manage these brand settings, go to your [Emails](https://dashboard.stripe.com/settings/connect/emails), click **Customize branding**, and verify the information is correct.\n\n[\n\n## Confirm your support email and set up your email domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#confirm-support-email-and-set-up-email-domain)\n\nWhen Stripe sends an email on your behalf, we use your support email for the **reply-to** address. You can configure this in your [Public details settings](https://dashboard.stripe.com/settings/public).\n\nBy default, Stripe sends Issuing notices from **card-issuing-notices@stripe.com**, using your [business name](https://dashboard.stripe.com/settings/connect#branding) as the display name (for example, **“Rocket Rides”** card-issuing-notices@stripe.com). You can send emails from [your own email domain](https://docs.stripe.com/get-started/account/email-domain), but you can’t change the local address (for example, card-issuing-notices@yourcustomdomain.com).\n\n[](#review-connected-account-details)\n\nStripe sends notices to the connected account’s email saved with Stripe. If the connected account has a primary user with log-in access to the Stripe Dashboard, we’ll email that individual. If not, we send it to the [account email address](https://docs.stripe.com/api/accounts/object#account_object-email) (if available) and if that’s not available, we send it to the [representative’s email address](https://docs.stripe.com/api/persons/object#person_object-email).\n\nTo view notices sent by Stripe to a connected account, go to the account’s Activity page in your Dashboard and look for the section **Emails to this account**.\n\n## Events that require a customer notice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe trigger events outlined below require a customer notice.\n\nStripe monitors for most events requiring a notice. We either send a notice to the customer on your behalf, or (for platforms sending their own notices) require you to email your customers when we inform you of the event through the Account Notice API.\n\n### Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must send regulated notices when you [submit a dispute](https://docs.stripe.com/issuing/purchases/disputes), and again when the result of the dispute is determined by the network (the dispute is either won or lost).\n\n### Involuntary account closures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly Stripe can disable [inactive connected accounts](https://support.stripe.com/questions/issuing-managing-inactive-connect-accounts) and disable accounts that violate our [terms of service](https://stripe.com/legal/restricted-businesses). Stripe sends emails on your behalf for both of these events. If you’re sending emails yourself, Stripe informs you of both events. We recommend that you send a notice for inactivity closures, and we require that you send a notice for terms of service closures.\n\nIf the customer requests an account closure, you don’t need to send a notice (and Stripe won’t send one on your behalf).\n\n### Issuing applications rejected for failure to verify identity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must notify a connected account when it [remains unverified within 29 days of completing an application for the card\\_issuing capability](https://docs.stripe.com/issuing/connect#failure-to-verify-rejection). Stripe monitors completed applications (once the account has submitted all required information for Issuing and accepted the Issuing terms of service) and generates a notice if the capability remains `inactive` after 29 days. In test mode, Stripe generates the notice 1 hour after completion to help you reproduce this scenario.\n\n### Charge Card credit underwriting decisions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe monitors Charge Card underwriting decisions, and you must send regulated notices for any negative impact to the user’s credit account. This includes rejected applications, rejected requests for a credit limit increase, reductions in a credit limit, or the closure of a credit line. If your platform hasn’t been approved to use Stripe’s Charge Card product, these templates don’t apply.\n\n[](#issuing-notice-email-templates)\n\nStripe uses the templates below to send emails to your users relevant to events that trigger them. You can preview each template from [Communication Settings](https://dashboard.stripe.com/settings/connect/emails) by clicking **Preview and customize**. Customize your platform name and logo by clicking **Customize branding**.\n\nIf you’ve configured your [custom email domain](https://docs.stripe.com/get-started/account/email-domain), Stripe automatically removes the _italicized_ text in each template. This text is included when the email is sent from card-issuing-notices@stripe.com.\n\n### Dispute submitted![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Dispute lost![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Dispute won![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Account closed by Stripe for Inactivity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Account closed by Stripe for Terms of Service violation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Spend Card application rejected for failure to verify identity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Additional templates for Charge Card platforms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Equal Credit Opportunity Act disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the templates above, <Bank specific ECOA footer> is replaced with the appropriate equal credit opportunity act disclosure for your platform’s bank sponsor.\n\nOn behalf of Celtic Bank\n\nNotice: The federal Equal Credit Opportunity Act prohibits creditors from discriminating against credit applicants on the basis of race, color, religion, national origin, sex, marital status, age (provided the applicant has the capacity to enter into a binding contract); because all or part of the applicant’s income derives from any public assistance program; or because the applicant has in good faith exercised any right under the Consumer Credit Protection Act.\n\nThe Federal agency that administers compliance with this law concerning Celtic Bank is Division of Depositor and Consumer Protection, National Center for Consumer and Depositor Assistance, Federal Deposit Insurance Corporation, 1100 Walnut Street, Box #11, Kansas City, MO 64106\n\n<Your platform name> is located at <[Your platform address](https://dashboard.stripe.com/settings/account)\\>\n\nIf an account has cards provided by multiple banks (not common), then account closure templates will show the <Bank specific ECOA footer> for all applicable bank sponsors.",
  "title": "Issuing regulated customer notices | Stripe Documentation",
  "description": "Learn about sending regulatory notifications to your customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts/object",
  "markdown": "# The Account object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    business\\_typenullable enum\n    \n*   #### \n    \n    capabilitiesnullable object\n    \n    A hash containing the set of capabilities that was requested for this account and their associated states. Keys are names of capabilities. You can see the full list [here](https://docs.stripe.com/api/capabilities/list). Values may be `active`, `inactive`, or `pending`.\n    \n\n*   The account’s country.\n    \n*   An email address associated with the account. It’s not used for authentication and Stripe doesn’t market to this field without explicit approval from the platform.\n    \n*   #### \n    \n    individualnullable object\n    \n    Information about the person represented by the account. This property is null unless `business_type` is set to `individual`. After you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property is only returned for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for the account, including what information needs to be collected, and by when. You can resolve most requirements programmatically. For some, you must complete a form or challenge through a Stripe interface. [Learn more about handling requirements](https://docs.stripe.com/connect/handling-api-verification).\n    \n\n*   The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.\n    \n    Possible enum values\n    \n    `custom`\n    \n    `express`\n    \n    `none`\n    \n    Indicates that the account was created with [controller](https://docs.stripe.com/api/accounts/object#account_object-controller) attributes that don’t map to a type of `standard`, `express`, or `custom`.\n    \n    `standard`\n    \n\n### More attributes\n\n*   #### \n    \n    business\\_profilenullable object\n    \n\n*   #### \n    \n    controllernullable object\n    \n\n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Create an account](https://docs.stripe.com/api/accounts/create)\n\nWith [Connect](https://docs.stripe.com/connect), you can create Stripe accounts for your users. To do this, you’ll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).\n\nIf you’ve already collected information for your connected accounts, you [can prefill that information](https://docs.stripe.com/connect/best-practices#onboarding) when creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding. You can prefill any information on the account.\n\n### Parameters\n\n*   #### \n    \n    capabilitiesobjectRequired conditionally\n    \n    Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   A hash of configuration describing the account controller’s attributes.\n    \n*   #### \n    \n    countrystringdefault is your own country\n    \n    The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you’re creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe’s global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.\n    \n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The type of Stripe account to create. May be one of `custom`, `express` or `standard`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds.\n\n```\ncurl https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Update an account](https://docs.stripe.com/api/accounts/update)\n\nUpdates a [connected account](https://docs.stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, you can update any information on the account.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, you can update all information until you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions) to start Connect onboarding, after which some properties can no longer be updated.\n\nTo update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our [Connect](https://docs.stripe.com/connect/updating-accounts) documentation to learn more about updating accounts.\n\n### Parameters\n\n*   Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist or another issue occurs, this call raises [an error](#errors). Some validations will not raise an error but will instead populate the [`requirements.errors`](#account_object-requirements-errors) array.\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Retrieve account](https://docs.stripe.com/api/accounts/retrieve)\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```",
  "title": "The Account object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/retrieve",
  "markdown": "# Retrieve a card | Stripe API Reference\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [List all cards](https://docs.stripe.com/api/issuing/cards/list)\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```\n\n## [Deliver a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `delivered`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/deliver\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"delivered\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Fail a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_fail)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `failure`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"failed\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Return a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_return)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `returned`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"returned\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
  "title": "Retrieve a card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/standard",
  "markdown": "# Create standard cards | Stripe DocumentationThe Stripe Docs logo\n\n## Create standard cards with Issuing.\n\nStandard cards are a quick way to launch your card program, allowing you to showcase your business branding without any lead times.\n\nFor our custom card product, see [how custom cards work](https://docs.stripe.com/issuing/cards/physical/custom).\n\n### Legacy card branding settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Introduction to personalization designs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery physical card that you create is linked to a specific personalization design, which governs the aesthetic features of your physical cards. Stripe recommends you create a personalization design to set up your card branding before creating physical cards. Personalization designs are composed of:\n\n*   **Card bundle**: Specifies the card’s tangible aspects, including its color and the type of chip embedded. For standard cards you can select between black and white card bundles.\n*   **Card logo**: Your brand’s logo displayed on the card that you can upload. If you don’t upload any branding, your physical cards have your business name printed on them. If you’re a platform user issuing on behalf of your connected accounts, their physical cards have your platform’s business name printed on them.\n\n![Standard design front and back](https://b.stripecdn.com/docs-statics-srv/assets/card_design-usd.93a25604bb8bbbf8ef2bef3de7bcb1f8.png)\n\nA standard card design with the “Rocket Rides” card logo\n\n*   **Carrier letter text**: Custom text on the card’s carrier material. Cards created with the `individual` shipping option are attached to a tri-fold carrier, which provides a space to include essential information for cardholders and to further showcase your brand identity.\n\n![Standard card carrier](https://b.stripecdn.com/docs-statics-srv/assets/carrier_design-usd.84039bdc36bdfea523a7677d2ff3268c.png)\n\nA standard carrier letter with custom carrier text\n\n## Create a personalization design![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can manage personalization designs with the Stripe Dashboard or through the [Personalization Design API](https://docs.stripe.com/api/issuing/personalization_designs). For more detailed guidance on managing personalization designs, see [managing personalization designs](https://docs.stripe.com/issuing/cards/physical/personalization-designs).\n\n1.  Visit the [Designs](https://dashboard.stripe.com/issuing/personalization-designs) tab in the Issuing Dashboard.\n\n![Personalization designs](https://b.stripecdn.com/docs-statics-srv/assets/issuing_personalization_designs_tab.8005cf6843cfad8a17067f2cb7eef4e3.png)\n\n1.  Click **New design** on the upper right and select the **Standard** physical bundle type along with your bundle selection.\n\n![Personalization design create](https://b.stripecdn.com/docs-statics-srv/assets/personalization_design_create.b72ce7b9da304477e2c8ef84993a5599.png)\n\n1.  Follow the steps to upload your **card logo** and set your **carrier text**.\n2.  Review your personalization design. You can also optionally set this design as your account [default](https://docs.stripe.com/issuing/cards/physical/personalization-designs#set-a-default-personalization-design) here.\n3.  Click **Submit** to send your design for review.\n\n## Design review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe reviews all personalization designs to make sure they comply with the guidelines set by our partner networks.\n\nWe approve almost all designs, but we might reject yours if it contains:\n\n*   The name of another legal entity\n*   A reference to a different network (for example, MasterCard, if you’re issuing on Visa)\n*   The name of a geographic location\n*   A reference to non-fiat currency (for example, cryptocurrency)\n*   Advertising or promotional language\n*   Inappropriate text or imagery\n\nYou can still create cards with an unapproved personalization design, but such cards aren’t fulfilled until the design has been approved.\n\nSee [personalization design review](https://docs.stripe.com/issuing/cards/physical/personalization-designs#personalization-design-review) to learn more.\n\n## Create a card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you have a personalization design, you can start creating physical cards with that design. Include the ID of the `personalization_design` you want to use when [creating the card](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-personalization_design). If the design has already been approved, cards you create with it are fulfilled right away. If the design is in review, the cards are fulfilled when the design is approved.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d currency=usd \\  -d type=physical \\  -d personalization_design=ipcd_OhggKRta0zu2Te \\  -d \"shipping[address][line1]\"=\"510 Townsend Street\" \\  -d \"shipping[address][city]\"=\"San Francsico\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address][country]\"=US`\n\nIf you have any design set as the default, any card you create without specifying a design uses that default. See [default personalization designs](https://docs.stripe.com/issuing/cards/physical/personalization-designs#set-a-default-personalization-design) to learn more. Any physical cards you create without specifying any branding will have your business logo printed on them. If you’re a platform user issuing on behalf of your connected accounts, their physical cards have your platform’s business name printed on them.\n\nSome physical bundles support printing a second line. This is typically used for a business name.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d currency=usd \\  -d type=physical \\  -d second_line=\"My Business Name\" \\  -d \"shipping[address][line1]\"=\"510 Townsend Street\" \\  -d \"shipping[address][city]\"=\"San Francsico\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address][country]\"=US`\n\nThe full set of valid characters for the second line are alphanumeric characters and `/ -&:().'`. There’s a 24 character limit.\n\n## Shipping your cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following shipping options and pricing apply to shipments originating from the US:\n\n*   Use the shipping `service` parameter to set the delivery service.\n*   Use the shipping `type` parameter to set your shipment packaging.\n    *   **Individual**: Each card is affixed to a letter and is shipped in a standard sized envelope addressed to the recipient.\n    *   **Bulk**: All cards ordered to the same shipping address and shipment recipient name on a given day are batched together into a single box and are shipped without letters or envelopes. There is a maximum of 2000 cards per box. The costs listed below are per shipment (that is, per tracking number).\n*   Use the `require_signature` shipping parameter to set the signature preference. Not all shipping methods support signature on delivery.\n*   Use the shipping `phone_number` to specify a phone number our courier partners can use to contact the shipping recipient in the event of a card delivery issue. For individual shipments to the EU/UK, if a phone number isn’t provided, we’ll provide the carrier with the phone number provided when the cardholder was initially created.\n\nCard orders have [tracking numbers](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-tracking_number) where indicated. You can ship card orders to [any non-restricted country](https://docs.stripe.com/issuing/cards/physical/standard#shipping_country_restrictions). You can only send shipments without tracking numbers to addresses in the US or Canada. Cards shipped from the US to Puerto Rico follow the details listed under International destinations.\n\nAfter your card order ships, we deduct associated card fees directly from your Stripe balance. You can see all of your account’s card fees in the [Dashboard](https://dashboard.stripe.com/balance).\n\n| Destination | Service | Estimated arrival time | Tracking | Individual cost | Bulk cost | Signature on delivery1 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Domestic | Standard (USPS) | 5-8 business days |     | 0.63 USD2 |     |     |\n| Express | 4-5 business days |     | 13 USD | 27 USD | +3 USD |\n| Priority | 2-3 business days |     | 27 USD | 45 USD | +3 USD |\n| International | Standard (Canada only) | 8-12 business days |     | 1.50 USD3 |     |     |\n| Express | 4-12 business days |     | 30 USD | 50 USD | +4 USD |\n| Priority | 2-7 business days |     | 40 USD | 60 USD | +4 USD |\n\n### Best practices for physical card orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo ensure successful delivery of your cards, follow these recommendations:\n\n*   **Business name inclusion:** For business addresses, include the business name as part of address line 1 or line 2. The business name is especially important when there are multiple businesses in the same building.\n*   **Apartment numbers:** For residential addresses, always provide apartment numbers when applicable.\n*   **Consignee phone number:** When placing Express and Priority card orders, provide a local phone number. In the event of any delivery issues, the courier will contact you at that number. Use the card object’s [shipping.phone\\_number field](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-phone_number).\n*   **Shipping to an APO, FPO, or PO Box:** Shipments to an army post office, fleet post office, or PO Box have to be sent standard via USPS.\n*   **EORI numbers for UK and EU shipments:** To expedite customs when shipping to the UK or European Union, provide an EORI (Economic Operators Registration and Identification) reference number. The format is typically a 2-letter country code followed by 12-15 numbers (for example: `GB123456789123456`). For bulk shipments, the EORI reference number is mandatory. For more information, see the card object’s [shipping.customs.eori\\_number field documentation](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-customs-eori_number).\n*   **Canadian postal codes:** Don’t include a space. For example, enter M5V 3L9 as `M5V3L9`.\n\n### Shipping country restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Updating card shipments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update your card’s [shipment](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-shipping) even after creating your card, including the shipping service and address, through the [Dashboard](https://dashboard.stripe.com/issuing/cards) and [Update Card API](https://docs.stripe.com/api/issuing/cards/update). Similar to card creation, you can use [address validation features](https://docs.stripe.com/issuing/cards/physical/address-validation) if you update your card’s shipping address.\n\nAfter the card is submitted to the third-party printer for fulfillment, you can no longer update your shipment.\n\n## Cancelling cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can cancel a card at any time to make it inactive and unusable—but we still ship and bill for canceled cards.",
  "title": "Create standard cards | Stripe Documentation",
  "description": "Create standard cards with Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/custom",
  "markdown": "# How custom physical cards work\n\nThe following table describes the different stages needed to get a card from the design file to live and in your hands. This is what you should expect at every step of the process:\n\n| Step | Timeline | What to expect |\n| --- | --- | --- |\n| **1: Design** | 2 weeks | Upload artwork on the card design template and choose desired features. Stripe reviews and provides feedback as needed. |\n| **2: Proofing** | 1 week | The card printer generates a proof with the card artwork, colors, quantity, and material details that are provided for your approval prior to finalizing the order. Simultaneously, the printer submits the card artwork to Visa or MasterCard to make sure it meets compliance requirements. |\n| **3: Manufacturing** | 12+ weeks | Cards are manufactured using specialized machinery at the card printer. The artwork is printed on plastic, collated with all required card layers, laminated with desired finish, and cut into cards. Due to material supply challenges, card lead times are currently a few months longer compared to the standard timeline. |\n| **4: Testing** | 2 weeks | After cards are manufactured, they’re shipped to the personalization site to conduct testing to ensure that the cards are functional and set up correctly. |\n| **5: Go live** | 2 business days after testing completes | Cards are made live in your Stripe account. At this point, they’re ready to start issuing. |\n\n### Use your custom bundle to create a personalization design![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your custom bundle is ready for use, Stripe creates a physical bundle object on your behalf. You can also [list all of your physical bundles](https://docs.stripe.com/api/issuing/physical_bundles/list).\n\nA personalization design is how you control the appearance of your physical cards in the API. It consists of a physical bundle, and a logo and carrier text if your bundle supports it.\n\n`curl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d physical_bundle=ics_Kc3MX9PPsUFFMp`\n\nWe also provide a number of features to help manage personalization designs, including:\n\n*   Setting default designs to use when you issue a card\n*   Using lookup keys to use many designs without having to change code\n*   Using Connect to manage personalization designs across many accounts\n\nSee [managing personalization designs](https://docs.stripe.com/issuing/cards/physical/personalization-designs) to learn more.\n\n### Create a card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you have a personalization design, you can start creating physical cards with that design. Include the ID of the `personalization_design` you want to use when [creating the card](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-personalization_design). If the design has already been approved, cards you create with it are fulfilled right away. If the design is in review, the cards are fulfilled when the design is approved.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d currency=usd \\  -d type=physical \\  -d personalization_design=ipcd_OhggKRta0zu2Te`\n\nIf you have any design set as default, any card you create without specifying a design uses that default. See [default personalization designs](https://docs.stripe.com/issuing/cards/physical/personalization-designs#set-a-default-personalization-design) to learn more.",
  "title": "How custom physical cards work | Stripe Documentation",
  "description": "You can customize most elements of a card.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/bulk",
  "markdown": "# Bulk order physical cards | Stripe DocumentationThe Stripe Docs logo\n\n## Order a large quantity of cards and ship them to one destination.\n\nStripe supports bulk ordering: you can order a large number of physical cards and have them shipped to a single destination.\n\nThis guide describes how bulk card ordering works and how to place a bulk order for physical cards.\n\n## Order types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below provides an overview of the order types.\n\n| Order | Cards per order | Use case | What ships | Shipping | Fastest fulfillment |\n| --- | --- | --- | --- | --- | --- |\n| **Individual** | 1 card only | Ship a single card directly to a cardholder. | The physical card is attached to a carrier which is then put into an envelope. | [Normal shipping options](https://docs.stripe.com/issuing/cards/physical/standard#shipping-your-cards) | 2 to 3 business days |\n| **Bulk** | Unlimited | Ship fewer than 10,000 cards to a single recipient. | Only the physical cards. No carriers or envelopes. | [Normal shipping options](https://docs.stripe.com/issuing/cards/physical/standard#shipping-your-cards) | 2 to 3 business days |\n\n## PCI compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore placing a bulk order, you must verify PCI compliance throughout the supply chain.\n\nThe recipient of a bulk order must meet all applicable PCI certification requirements. For certain specific issuing use cases, Stripe can grant an exception to allow your company to receive your own bulk shipments.\n\nConfirm with your account team that your bulk order recipient adheres to the appropriate PCI standards required to take possession of the cards.\n\n## Bulk card orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe groups all cards with the same shipping destination that are ordered on the same day into one bulk order and ships them out together.\n\n### Create a bulk-issued card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo indicate that a card is part of a bulk order, set the [shipping.type](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-shipping-type) property to `bulk` in your [create card API call](https://docs.stripe.com/api/issuing/cards/create).\n\nThere’s no limit to the quantity of cards in a bulk order. If the quantity exceeds a few thousand, the shipment is split across multiple boxes. Each box has its own tracking number.\n\n### Track bulk orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpon shipment of each box, Stripe updates the tracking number on the corresponding [`Card`](https://docs.stripe.com/api/issuing/cards/object) object. You can listen for the [`issuing_card.updated`](https://docs.stripe.com/api/events/types#event_types-issuing_card.updated) webhook to receive notifications when the tracking numbers are assigned.",
  "title": "Bulk order physical cards | Stripe Documentation",
  "description": "Order a large quantity of cards and ship them to one destination.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/sources/create",
  "markdown": "# Create a source | Stripe API Reference\n\nCreates a new source object.\n\n### Parameters\n\n*   The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://docs.stripe.com/sources/connect#cloning-card-sources) guide)\n    \n*   Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Information about the owner of the payment instrument that may be used or required by particular source types.\n    \n*   Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    An arbitrary string to be displayed on your customer’s statement. As an example, if your website is `RunClub` and the item you’re charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a newly created source.\n\n```\ncurl https://api.stripe.com/v1/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=ach_credit_transfer \\  -d currency=usd \\  --data-urlencode \"owner[email]\"=\"jenny.rosen@example.com\"\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Update a source](https://docs.stripe.com/api/sources/update)\n\nUpdates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts the `metadata` and `owner` as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our [payment method guides](https://docs.stripe.com/sources) for more detail.\n\n### Parameters\n\n*   Amount associated with the source.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Information about the owner of the payment instrument that may be used or required by particular source types.\n    \n\n### More parameters\n\n### Returns\n\nReturns the source object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/sources/src_1N3lxdLkdIwHu7ixPHXy8UcI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Retrieve a source](https://docs.stripe.com/api/sources/retrieve)\n\nRetrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a source if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/sources/src_1N3lxdLkdIwHu7ixPHXy8UcI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"src_1N3lxdLkdIwHu7ixPHXy8UcI\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_eb829353ed79\",    \"bank_name\": \"TEST BANK\",    \"fingerprint\": \"kBQsBk9KtfCgjEYK\",    \"refund_account_holder_name\": null,    \"refund_account_holder_type\": null,    \"refund_routing_number\": null,    \"routing_number\": \"110000000\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": null,  \"client_secret\": \"src_client_secret_ZaOIRUD8a9uGmQobLxGvqKSr\",  \"created\": 1683144457,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"110000000-test_eb829353ed79\",    \"amount_charged\": 0,    \"amount_received\": 0,    \"amount_returned\": 0,    \"refund_attributes_method\": \"email\",    \"refund_attributes_status\": \"missing\"  },  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Attach a source](https://docs.stripe.com/api/sources/attach)\n\nAttaches a Source object to a Customer. The source must be in a chargeable or pending state.\n\n### Parameters\n\n*   The identifier of the source to be attached.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the attached Source object.\n\nPOST /v1/customers/:id/sources\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d source=src_1NfRGv2eZvKYlo2Cv7NAImBL\n```\n\n```\n{  \"id\": \"src_1NfRGv2eZvKYlo2Cv7NAImBL\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_52796e3294dc\",    \"routing_number\": \"110000000\",    \"fingerprint\": \"ecpwEzmBOSMOqQTL\",    \"bank_name\": \"TEST BANK\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": 1000,  \"client_secret\": \"src_client_secret_sBqfX18eq6GPfGxGvVfMByCp\",  \"created\": 1692121393,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"121042882-38381234567890123\",    \"amount_received\": 1000,    \"amount_charged\": 0,    \"amount_returned\": 0,    \"refund_attributes_status\": \"missing\",    \"refund_attributes_method\": \"email\"  },  \"redaction\": null,  \"statement_descriptor\": null,  \"status\": \"chargeable\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\"}\n```\n\n## [Detach a source](https://docs.stripe.com/api/sources/detach)\n\nDetaches a Source object from a Customer. The status of a source is changed to `consumed` when it is detached and it can no longer be used to create a charge.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the detached Source object.\n\nDELETE /v1/customers/:id/sources/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/sources/src_1Nlghd2eZvKYlo2C6RFLJcv4 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"src_1Nlghd2eZvKYlo2C6RFLJcv4\",  \"object\": \"source\",  \"ach_credit_transfer\": {    \"account_number\": \"test_52796e3294dc\",    \"routing_number\": \"110000000\",    \"fingerprint\": \"ecpwEzmBOSMOqQTL\",    \"bank_name\": \"TEST BANK\",    \"swift_code\": \"TSTEZ122\"  },  \"amount\": 0,  \"client_secret\": \"src_client_secret_smKYWLhbzxzgLfvhKt1QeQOn\",  \"created\": 1693610677,  \"currency\": \"usd\",  \"flow\": \"receiver\",  \"livemode\": false,  \"metadata\": {},  \"owner\": {    \"address\": null,    \"email\": \"jenny.rosen@example.com\",    \"name\": null,    \"phone\": null,    \"verified_address\": null,    \"verified_email\": null,    \"verified_name\": null,    \"verified_phone\": null  },  \"receiver\": {    \"address\": \"121042882-38381234567890123\",    \"amount_received\": 1000,    \"amount_charged\": 1000,    \"amount_returned\": 0,    \"refund_attributes_status\": \"missing\",    \"refund_attributes_method\": \"email\"  },  \"redaction\": null,  \"statement_descriptor\": null,  \"status\": \"consumed\",  \"type\": \"ach_credit_transfer\",  \"usage\": \"reusable\",  \"customer\": \"cus_9s6XKzkNRiz8i3\"}\n```",
  "title": "Create a source | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tokens/create_bank_account",
  "markdown": "# Create a bank account token\n\nCreates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a [connected account](#accounts) where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n\n### Parameters\n\n*   The bank account this token will represent.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringConnect only\n    \n\n### Returns\n\nReturns the created bank account token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bank_account[country]\"=US \\  -d \"bank_account[currency]\"=usd \\  -d \"bank_account[account_holder_name]\"=\"Jenny Rosen\" \\  -d \"bank_account[account_holder_type]\"=individual \\  -d \"bank_account[routing_number]\"=110000000 \\  -d \"bank_account[account_number]\"=000123456789\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"bank_account\": {    \"id\": \"ba_1NWScr2eZvKYlo2C8MgV5Cwn\",    \"object\": \"bank_account\",    \"account_holder_name\": \"Jenny Rosen\",    \"account_holder_type\": \"individual\",    \"account_type\": null,    \"bank_name\": \"STRIPE TEST BANK\",    \"country\": \"US\",    \"currency\": \"usd\",    \"fingerprint\": \"1JWtPxqbdX5Gamtz\",    \"last4\": \"6789\",    \"routing_number\": \"110000000\",    \"status\": \"new\"  },  \"client_ip\": null,  \"created\": 1689981645,  \"livemode\": false,  \"redaction\": null,  \"type\": \"bank_account\",  \"used\": false}\n```\n\n## [Create a card token](https://docs.stripe.com/api/tokens/create_card)\n\nCreates a single-use token that represents a credit card’s details. You can use this token in place of a credit card dictionary with any API method. You can only use these tokens once by [creating a new Charge object](#create_charge) or by attaching them to a [Customer object](#create_customer).\n\nIn most cases, you can use our recommended [payments integrations](https://docs.stripe.com/payments) instead of using the API.\n\n### Parameters\n\n*   The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass in a customer, this is a dictionary containing a user’s credit card details, with the options described below.\n    \n\n### Returns\n\nReturns the created card token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=5 \\  -d \"card[exp_year]\"=2024 \\  -d \"card[cvc]\"=314\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"card\": {    \"id\": \"card_1N3T00LkdIwHu7ixRdxpVI1Q\",    \"object\": \"card\",    \"address_city\": null,    \"address_country\": null,    \"address_line1\": null,    \"address_line1_check\": null,    \"address_line2\": null,    \"address_state\": null,    \"address_zip\": null,    \"address_zip_check\": null,    \"brand\": \"Visa\",    \"country\": \"US\",    \"cvc_check\": \"unchecked\",    \"dynamic_last4\": null,    \"exp_month\": 5,    \"exp_year\": 2024,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"last4\": \"4242\",    \"metadata\": {},    \"name\": null,    \"tokenization_method\": null,    \"wallet\": null  },  \"client_ip\": \"52.35.78.6\",  \"created\": 1683071568,  \"livemode\": false,  \"type\": \"card\",  \"used\": false}\n```\n\n## [Create a CVC update token](https://docs.stripe.com/api/tokens/create_cvc_update)\n\nCreates a single-use token that represents an updated CVC value that you can use for [CVC re-collection](https://docs.stripe.com/payments/accept-a-payment-synchronously#web-recollect-cvc). Use this token when [you confirm a card payment](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-cvc_token) or use a saved card on a `PaymentIntent` with `confirmation_method: manual`.\n\nFor most cases, use our [JavaScript library](https://docs.stripe.com/js/tokens/create_token?type=cvc_update) instead of using the API. For a `PaymentIntent` with `confirmation_method: automatic`, use our recommended [payments integration](https://docs.stripe.com/payments/save-during-payment#web-recollect-cvc) without tokenizing the CVC value.\n\n### Parameters\n\n*   The updated CVC value this token represents.\n    \n\n### Returns\n\nReturns the created CVC update token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"cvc_update[cvc]\"=123\n```\n\n```\n{  \"id\": \"cvctok_1NkWsu2eZvKYlo2CFDm6ab7X\",  \"object\": \"token\",  \"client_ip\": null,  \"created\": 1693334608,  \"livemode\": false,  \"redaction\": null,  \"type\": \"cvc_update\",  \"used\": false}\n```\n\n## [Create a person token](https://docs.stripe.com/api/tokens/create_person)\n\nCreates a single-use token that represents the details for a person. Use this when you create or update persons associated with a Connect account. Learn more about [account tokens](https://docs.stripe.com/connect/account-tokens).\n\nYou can only create person tokens with your application’s publishable key and in live mode. You can use your application’s secret key to create person tokens only in test mode.\n\n### Parameters\n\n*   Information for the person this token represents.\n    \n\n### Returns\n\nReturns the created person token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"person[first_name]\"=Jane \\  -d \"person[last_name]\"=Doe \\  -d \"person[relationship][owner]\"=true\n```\n\n```\n{  \"id\": \"cpt_1EDww82eZvKYlo2CsdelTHFu\",  \"object\": \"token\",  \"client_ip\": \"8.21.168.117\",  \"created\": 1552582904,  \"livemode\": false,  \"redaction\": null,  \"type\": \"person\",  \"used\": false}\n```\n\n## [Create a PII token](https://docs.stripe.com/api/tokens/create_pii)\n\nCreates a single-use token that represents the details of personally identifiable information (PII). You can use this token in place of an [id\\_number](#update_account-individual-id_number) or [id\\_number\\_secondary](#update_account-individual-id_number_secondary) in Account or Person Update API methods. You can only use a PII token once.\n\n### Parameters\n\n*   The PII this token represents.\n    \n\n### Returns\n\nReturns the created PII token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"pii[id_number]\"=000000000\n```\n\n```\n{  \"id\": \"pii_18PwbX2eZvKYlo2CzRXgwN3J\",  \"object\": \"token\",  \"client_ip\": \"124.123.76.134\",  \"created\": 1466783547,  \"livemode\": false,  \"redaction\": null,  \"type\": \"pii\",  \"used\": false}\n```",
  "title": "Create a bank account token | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/balance/balance_retrieve",
  "markdown": "# Retrieve balance | Stripe API Reference\n\nRetrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see [Accounting for negative balances](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a balance object for the account that was authenticated in the request.\n\n```\ncurl https://api.stripe.com/v1/balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"balance\",  \"available\": [    {      \"amount\": 666670,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 666670      }    }  ],  \"connect_reserved\": [    {      \"amount\": 0,      \"currency\": \"usd\"    }  ],  \"livemode\": false,  \"pending\": [    {      \"amount\": 61414,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 61414      }    }  ]}\n```\n\n## [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve balance | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_accounts",
  "markdown": "# External Bank Accounts | Stripe API Reference\n\n## [The External Bank Account object](https://docs.stripe.com/api/external_account_bank_accounts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandable\n    \n    The ID of the account that the bank account is associated with.\n    \n*   Name of the bank associated with the routing number (e.g., `WELLS FARGO`).\n    \n*   Two-letter ISO code representing the country the bank account is located in.\n    \n\n*   #### \n    \n    default\\_for\\_currencynullable boolean\n    \n    Whether this bank account is the default external account for its currency.\n    \n*   The last four digits of the bank account number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    routing\\_numbernullable string\n    \n    The routing transit number for the bank account.\n    \n*   For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn’t had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we’ll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.\n    \n    For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can’t [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we’ll set the status to `verification_failed`. Other validations aren’t run against external accounts because they’re only used for payouts. This means the other statuses don’t apply.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_holder\\_namenullable string\n    \n*   #### \n    \n    account\\_holder\\_typenullable string\n    \n*   #### \n    \n    account\\_typenullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    fingerprintnullable string\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n*   #### \n    \n    requirementsnullable object\n    \n\nThe External Bank Account object\n\n```\n{  \"id\": \"ba_1N9DrD2eZvKYlo2C58f4DaIa\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"individual\",  \"account_type\": null,  \"available_payout_methods\": [    \"standard\"  ],  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtz\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Create a bank account](https://docs.stripe.com/api/external_account_bank_accounts/create)\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=btok_1NAiJy2eZvKYlo2Cnh6bIs9c\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```",
  "title": "External Bank Accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/balance/balance_object",
  "markdown": "# The Balance object | Stripe API Reference\n\n### Attributes\n\n*   #### \n    \n    availablearray of objects\n    \n    Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](#transfers) or [Payouts API](#payouts). You can find the available balance for each currency and payment type in the `source_types` property.\n    \n*   Funds that aren’t available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.\n    \n\n### More attributes\n\n*   #### \n    \n    connect\\_reservednullable array of objectsConnect only\n    \n*   #### \n    \n    instant\\_availablenullable array of objects\n    \n\n```\n{  \"object\": \"balance\",  \"available\": [    {      \"amount\": 666670,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 666670      }    }  ],  \"connect_reserved\": [    {      \"amount\": 0,      \"currency\": \"usd\"    }  ],  \"livemode\": false,  \"pending\": [    {      \"amount\": 61414,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 61414      }    }  ]}\n```\n\n## [Retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve)\n\nRetrieves the current account balance, based on the authentication that was used to make the request. For a sample request, see [Accounting for negative balances](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a balance object for the account that was authenticated in the request.\n\n```\ncurl https://api.stripe.com/v1/balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"balance\",  \"available\": [    {      \"amount\": 666670,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 666670      }    }  ],  \"connect_reserved\": [    {      \"amount\": 0,      \"currency\": \"usd\"    }  ],  \"livemode\": false,  \"pending\": [    {      \"amount\": 61414,      \"currency\": \"usd\",      \"source_types\": {        \"card\": 61414      }    }  ]}\n```\n\n## [Balance Transactions](https://docs.stripe.com/api/balance_transactions)\n\nBalance transactions represent funds moving through your Stripe account. Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.\n\nRelated guide: [Balance transaction types](https://docs.stripe.com/reports/balance-transaction-types)\n\n## [Customer Session](https://docs.stripe.com/api/customer_sessions)\n\nA Customer Session allows you to grant Stripe’s frontend SDKs (like Stripe.js) client-side access control over a Customer.\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Balance object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders/object",
  "markdown": "# The Cardholder object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The cardholder’s billing information.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The cardholder’s name. This will be printed on cards issued to them.\n    \n*   #### \n    \n    phone\\_numbernullable string\n    \n    The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure#when-is-3d-secure-applied) for more details.\n    \n\n### More attributes\n\n*   #### \n    \n    individualnullable object\n    \n\n*   #### \n    \n    preferred\\_localesnullable array of enums\n    \n\n*   #### \n    \n    spending\\_controlsnullable object\n    \n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Create a cardholder](https://docs.stripe.com/api/issuing/cardholders/create)\n\nCreates a new Issuing `Cardholder` object that can be issued cards.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure#when-is-3d-secure-applied) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an Issuing `Cardholder` object if creation succeeds.\n\nPOST /v1/issuing/cardholders\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=individual \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  --data-urlencode phone_number=\"+18888675309\" \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][country]\"=US \\  -d \"billing[address][postal_code]\"=94111\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Update a cardholder](https://docs.stripe.com/api/issuing/cardholders/update)\n\nUpdates the specified Issuing `Cardholder` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an updated Issuing `Cardholder` object if a valid identifier was provided.\n\nPOST /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Retrieve a cardholder](https://docs.stripe.com/api/issuing/cardholders/retrieve)\n\nRetrieves an Issuing `Cardholder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Cardholder` object if a valid identifier was provided.\n\nGET /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [List all cardholders](https://docs.stripe.com/api/issuing/cardholders/list)\n\nReturns a list of Issuing `Cardholder` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cardholders, starting after cardholder `starting_after`. Each entry in the array is a separate Issuing `Cardholder` object. If no more cardholders are available, the resulting array will be empty.\n\nGET /v1/issuing/cardholders\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cardholders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"line1\": \"1234 Main Street\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"country\": \"US\",          \"postal_code\": \"94111\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18888675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    }    {...}    {...}  ],}\n```",
  "title": "The Cardholder object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders/create",
  "markdown": "# Create a cardholder | Stripe API Reference\n\nCreates a new Issuing `Cardholder` object that can be issued cards.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure#when-is-3d-secure-applied) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an Issuing `Cardholder` object if creation succeeds.\n\nPOST /v1/issuing/cardholders\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=individual \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  --data-urlencode phone_number=\"+18888675309\" \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][country]\"=US \\  -d \"billing[address][postal_code]\"=94111\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Update a cardholder](https://docs.stripe.com/api/issuing/cardholders/update)\n\nUpdates the specified Issuing `Cardholder` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an updated Issuing `Cardholder` object if a valid identifier was provided.\n\nPOST /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Retrieve a cardholder](https://docs.stripe.com/api/issuing/cardholders/retrieve)\n\nRetrieves an Issuing `Cardholder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Cardholder` object if a valid identifier was provided.\n\nGET /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [List all cardholders](https://docs.stripe.com/api/issuing/cardholders/list)\n\nReturns a list of Issuing `Cardholder` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cardholders, starting after cardholder `starting_after`. Each entry in the array is a separate Issuing `Cardholder` object. If no more cardholders are available, the resulting array will be empty.\n\nGET /v1/issuing/cardholders\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cardholders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"line1\": \"1234 Main Street\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"country\": \"US\",          \"postal_code\": \"94111\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18888675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    }    {...}    {...}  ],}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a cardholder | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/create",
  "markdown": "# Create a card | Stripe API Reference\n\nCreates an Issuing `Card` object.\n\n### Parameters\n\n*   The currency for the card.\n    \n*   The type of card to issue. Possible values are `physical` or `virtual`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n*   The [Cardholder](https://docs.stripe.com/api#issuing_cardholder_object) object with which the card will be associated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    personalization\\_designstring\n    \n\n### Returns\n\nReturns an Issuing `Card` object if creation succeeds.\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d cardholder=ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -d currency=usd \\  -d type=virtual\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Update a card](https://docs.stripe.com/api/issuing/cards/update)\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [List all cards](https://docs.stripe.com/api/issuing/cards/list)\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```\n\n## [Deliver a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `delivered`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/deliver\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"delivered\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
  "title": "Create a card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholders/update",
  "markdown": "# Update a cardholder | Stripe API Reference\n\nUpdates the specified Issuing `Cardholder` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The cardholder’s billing address.\n    \n*   The cardholder’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The cardholder’s phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://docs.stripe.com/issuing/3d-secure) for more details.\n    \n\n### More parameters\n\n*   #### \n    \n    preferred\\_localesarray of enums\n    \n\n### Returns\n\nReturns an updated Issuing `Cardholder` object if a valid identifier was provided.\n\nPOST /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [Retrieve a cardholder](https://docs.stripe.com/api/issuing/cardholders/retrieve)\n\nRetrieves an Issuing `Cardholder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Cardholder` object if a valid identifier was provided.\n\nGET /v1/issuing/cardholders/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cardholders/ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",  \"object\": \"issuing.cardholder\",  \"billing\": {    \"address\": {      \"line1\": \"1234 Main Street\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"country\": \"US\",      \"postal_code\": \"94111\"    }  },  \"company\": null,  \"created\": 1680415995,  \"email\": \"jenny.rosen@example.com\",  \"individual\": null,  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"phone_number\": \"+18888675309\",  \"redaction\": null,  \"requirements\": {    \"disabled_reason\": \"requirements.past_due\",    \"past_due\": [      \"individual.card_issuing.user_terms_acceptance.ip\",      \"individual.card_issuing.user_terms_acceptance.date\",      \"individual.first_name\",      \"individual.last_name\"    ]  },  \"spending_controls\": {    \"allowed_categories\": [],    \"blocked_categories\": [],    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"individual\"}\n```\n\n## [List all cardholders](https://docs.stripe.com/api/issuing/cardholders/list)\n\nReturns a list of Issuing `Cardholder` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cardholders, starting after cardholder `starting_after`. Each entry in the array is a separate Issuing `Cardholder` object. If no more cardholders are available, the resulting array will be empty.\n\nGET /v1/issuing/cardholders\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cardholders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cardholders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"line1\": \"1234 Main Street\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"country\": \"US\",          \"postal_code\": \"94111\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18888675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    }    {...}    {...}  ],}\n```\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a cardholder | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/update",
  "markdown": "# Update a card | Stripe API Reference\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [List all cards](https://docs.stripe.com/api/issuing/cards/list)\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```\n\n## [Deliver a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `delivered`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/deliver\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"delivered\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Fail a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_fail)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `failure`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"failed\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
  "title": "Update a card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/list",
  "markdown": "# List all cards | Stripe API Reference\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```\n\n## [Deliver a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `delivered`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/deliver\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/deliver \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"delivered\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Fail a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_fail)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `failure`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/fail\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/fail \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"failed\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Return a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_return)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `returned`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/return\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/return \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"returned\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Ship a testmode card](https://docs.stripe.com/api/issuing/cards/test_mode_ship)Test helper\n\nUpdates the shipping status of the specified Issuing `Card` object to `shipped`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an updated Issuing `Card` object.\n\nPOST /v1/test\\_helpers/issuing/cards/:id/shipping/ship\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu/shipping/ship \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"carrier\": \"usps\",    \"eta\": 1655362799,    \"name\": \"Jenny Rosen\",    \"service\": \"standard\",    \"status\": \"shipped\",    \"type\": \"individual\"  },  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"physical\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
  "title": "List all cards | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/list",
  "markdown": "# List all transactions | Stripe API Reference\n\nReturns a list of Issuing `Transaction` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return transactions that belong to the given card.\n    \n*   Only return transactions that belong to the given cardholder.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transactions, starting after transaction `starting_after`. Each entry in the array is a separate Issuing `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/issuing/transactions\n\n```\ncurl -G https://api.stripe.com/v1/issuing/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipi_1MzFN1K8F4fqH0lBmFq8CjbU\",      \"object\": \"issuing.transaction\",      \"amount\": -100,      \"amount_details\": {        \"atm_fee\": null      },      \"authorization\": \"iauth_1MzFMzK8F4fqH0lBc9VdaZUp\",      \"balance_transaction\": \"txn_1MzFN1K8F4fqH0lBQPtqUmJN\",      \"card\": \"ic_1MzFMxK8F4fqH0lBjIUITRYi\",      \"cardholder\": \"ich_1MzFMxK8F4fqH0lBXnFW0ROG\",      \"created\": 1682065867,      \"currency\": \"usd\",      \"dispute\": null,      \"livemode\": false,      \"merchant_amount\": -100,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"WWWW.BROWSEBUG.BIZ\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {},      \"type\": \"capture\",      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Create a test-mode force capture](https://docs.stripe.com/api/issuing/transactions/test_mode_create_force_capture)Test helper\n\nAllows the user to capture an arbitrary amount, also known as a forced capture.\n\n### Parameters\n\n*   The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this transaction.\n    \n*   The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_force\\_capture\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_force_capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/topups/retrieve",
  "markdown": "# Retrieve a top-up | Stripe API Reference\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [List all top-ups](https://docs.stripe.com/api/topups/list)\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a top-up](https://docs.stripe.com/api/topups/cancel)\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a top-up | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/handling-complaints",
  "markdown": "# Handling complaints | Stripe DocumentationThe Stripe Docs logo\n\nComplaints are any expression of dissatisfaction with a product, service, policy, or employee related to Stripe Treasury and/or Issuing, except those expressions made by employees of your company. Proper handling of complaints is mandatory when offering financial services products.\n\nYou must provide your customers with an easily identifiable and accessible way to submit complaints. Include instructions on how to efficiently submit complaints close to your customer support contact information or an equally obvious location. You’re ultimately responsible for resolving complaints, but Stripe can provide guidance and support when needed.\n\nStripe expects you to acknowledge all operational (standard) complaints within 5 business days and resolve them within 15 business days from the complaint submission date. You must maintain records of all complaints and resolutions in accordance with applicable law. Upon request, you must provide Stripe with reasonable access to all pending and resolved complaints.\n\nWhen you or someone representing your platform becomes aware of an executive complaint regarding Treasury or Issuing products, promptly notify Stripe within 1 business day of the complaint submission date. Executive complaints include any threats of litigation or complaints from regulators and complaints that allege Unfair or Deceptive Acts and Practices (UDAP), discrimination, consumer harm, or legal concerns. Upon receipt of an executive complaint, please refrain from further interaction with the customer until Stripe reviews the complaint. Stripe works closely with you to resolve all executive complaints.\n\nIn addition, you must report an aggregated list of complaints to Stripe on a monthly basis. Stripe uses the list to make sure that the product is adhering to regulatory requirements. Facilitate easy complaint submission by providing clear and obvious options on your support site or other relevant customer service product area.\n\n| Complaint type | Notification to Stripe | Acknowledgement to customer | Resolution | Aggregated reporting |\n| --- | --- | --- | --- | --- |\n| Executive | Within 1-2 business days | Within 5 business days | Within 15 business days | Monthly by the tenth of the month |\n| Operational | Reasonable access, upon request | Within 5 business days | Within 15 business days | Monthly by the tenth of the month |\n\nTo demonstrate your adherence to these complaint handling requirements, Stripe asks that you keep thorough records of all complaints. This includes email interactions and any documentation developed in the course of resolving complaints.\n\nGiven that you’re responsible for managing customer support, as well as resolving most complaints, it’s important to distinguish between a regular customer service inquiry and a complaint. The following guidelines help you distinguish between general customer service inquiries and complaints. If you’re uncertain, forward the customer inquiry to Stripe to help determine whether the communication constitutes a complaint.\n\n## Complaint channels![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform can receive complaints through various means, including by telephone, in person, social media, email, a regulatory agency, direct written communication, and so on. You must forward complaints to Stripe in email. If you permit your customers to raise complaints through means other than email, either direct your customer to resend the complaint in an email, or summarize the user’s complaint and email the complaint to Stripe. You must address all complaints, regardless of how you receive them.\n\n## Complaint types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table provides guidelines to determine the type of complaint you might receive.\n\n| Executive | Operational |\n| --- | --- |\n| Legal/regulatory complaints, which include:<br><br>*   A private practice attorney or lawyer acting on behalf of their client<br>*   A federal or state attorney general acting in response to a person who has filed a complaint with a regulatory agency<br>*   A federal or state government agency acting in response to a person who has filed a complaint with a regulatory agency<br>*   A person threatening to bring a legal action against your platform, Stripe, or a banking partner<br>*   Complaints that allege Unfair or Deceptive Acts and Practices (UDAP), discrimination, or consumer harm | *   Product or service complaints, which are complaints about customer service or product functionality and might include complaints related, but not limited to, the following:<br>    <br>    *   Fees or premiums<br>    *   Disclosures or notices<br>    *   Servicing<br>    *   Application form<br>    *   Transactions<br>    *   Account management<br>    *   Third-party service providers<br>    *   Advertising or marketing<br>*   Privacy or security complaints, which are complaints related, but not limited to:<br>    <br>    *   Fraud<br>    *   Identity theft<br>    *   Criminal activity, such as robbery or theft<br>    *   Unauthorized access to a customer’s information<br>    *   Honoring opt-in, opt-out, and do-not-call requests<br>    *   Unauthorized product enrollment, account openings, or upgrades (including the addition of unauthorized ancillary add-on products), or other improper sales practices |\n\n## Differentiating between complaints and customer service inquiry![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA customer service inquiry can be verbal or written, and includes a request to you for information and assistance related to a Treasury or Issuing program element. This could include address changes; account inquiries; questions about a product’s availability in certain jurisdictions; technical inquiries related to your platform, Stripe’s platform, or a third-party platform that’s integrated with Stripe’s platform; or a request for refund of fees.\n\nThe key distinguishing factor that differentiates an inquiry from a complaint is the customer’s expression of dissatisfaction, which might be transparent either in the use of specific phrasing (“trigger words”) or in the customer’s general tone in communicating.\n\nThe following trigger words differentiate a complaint from a customer service inquiry:\n\n*   Abuse or abusive \\*\\*\n*   Marital status (married, single, or divorced)\n*   Angry or mad\n*   Military or service member\n*   Annoyed\n*   National origin \\*\\*\n*   Attorney or lawyer\n*   Opt in or opt out\n*   Bait and switch \\*\\*\n*   Predatory \\*\\*\n*   Bias or prejudice \\*\\*\n*   Privacy\n*   Deceived \\*\\*\n*   Problem\n*   Disclosure or disclose\n*   Race, minority, or color \\*\\*\n*   Discrimination or discriminate \\*\\*\n*   Redlining or redline \\*\\*\n*   Disgraceful \\*\\*\n*   Regulator or regulatory\n*   Exploit or manipulate \\*\\*\n*   Religion, age, or disability \\*\\*\n*   Fairness or unfair \\*\\*\n*   Ridiculous\n*   Financial injury\n*   Sex or gender \\*\\*\n*   Foul language\n*   Sexual orientation \\*\\*\n*   Fraud or ID theft\n*   Sue\n*   Hide or hidden\n*   Unauthorized\n*   Lawsuit\n*   Unbelievable \\*\\*\n*   Litigation\n*   Unfair \\*\\*\n*   Low income or poor\n*   Unhappy or not happy\n*   Ludicrous\n\n\\*\\* Complaints containing these trigger words or synonyms might allege unfair or deceptive acts and practices (UDAP) or discrimination. This list isn’t exhaustive and Stripe might add other trigger words to this list.\n\nIn addition to the preceding trigger words, consider the tone of the communication and reference the examples below when making a determination and consider similar circumstances for complaint identification.\n\n*   A customer expresses dissatisfaction with you, your Stripe-run products or services, Stripe, or a bank partner.\n*   A customer states that they wish to file a complaint.\n*   A customer states that a business practice or employee interaction is misleading, unfair, deceptive, abusive, or a combination of these.\n*   A customer alleges discrimination.\n*   A customer threatens to file suit against you, Stripe, or a bank partner.\n*   Customer alleges that you, your Stripe-run products or services, Stripe, or a bank partner violate a specific law or regulation or questions the legality of a practice.\n*   A customer notes multiple or repeated attempts to obtain information or resolve a concern (use of words like “still,” “repeated,” and so on).\n*   An attorney sends a complaint letter on behalf of a customer.\n*   A regulatory or government agency initiates a complaint.\n\nExamples of what isn’t a complaint:\n\n*   A customer address correction or change.\n*   Account inquiries or requests for assistance.\n*   Inquiries regarding technical assistance (for example, error messages) or problems interacting with the Stripe platform, its integration with third-party services, or both.\n\n## Complaints tracking![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe requires all Issuing and Treasury platforms to regularly share complaints received from their connected accounts. You must complete reporting each month before the tenth calendar day of the following month.\n\nEach platform receives a unique and secure form after onboarding to record complaints. If your platform can’t locate your complaints form, contact [complaints-issuing-treasury@stripe.com](mailto:complaints-issuing-treasury@stripe.com).\n\nIf you don’t receive any complaints in a month, you must still let Stripe know by following the steps in the **No complaints attestation** tab in your platform’s unique complaints form.\n\n### Required information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA standard set of fields is required for each complaint received. All fields are required except where noted. You can also find this table in the **Definitions** tab of your complaints form.\n\n| Complaint Field | Stripe’s Definition |\n| --- | --- |\n| `date_input` | The date the complaint information was first added to this tracker. |\n| `date_received` | The date of ticket or case creation for the complaint. |\n| `user_name` | Business name (Business’s DBA). |\n| `received_by` | Servicer or personnel managing complaint intake. |\n| `account_ID` | Business unique identifier or token. |\n| `complaint_classification` | Classify whether it’s an operational or executive complaint. |\n| `stripe_product` | The Stripe product that the complaint pertains to. If related to a card, select **Issuing**. |\n| `complaint_category` | Classify the category of complaint as: Privacy or Security, Legal or Regulatory, or Product or Service. |\n| `complaint_sub_category` | The type of activity the complaint is about. |\n| `complaint_channel` | The intake channel for the complaint. |\n| `complaint_description` | Brief description of the user’s complaint. |\n| `alleges_UDAP_or_discrimination` | Classify whether the complainant alleges a UDAP (unfair or deceptive acts and practices) or discriminatory acts. Ultimately, whether a complaint alleges a UDAP or discriminatory practice hinges on the language used (see list of “trigger words” above) and the general sentiment of the business’s complaint. |\n| `user_stage` | Classify the stage for the user in the customer lifecycle. |\n| `systemic_issue_identified` | Disclosure of whether the complaint revealed a systemic issue that needs rectifying. |\n| `date_resolved` | The date a resolution was communicated to the customer and executed to close the ticket.<br><br>**Required only after complaint is resolved** |\n| `redress_reqd` | Disclosure of whether a rectifying action (e.g., reimbursement) was necessary to resolve the ticket.<br><br>**Required only after complaint is resolved** |\n| `description_of_corrective_action` | Description of resolution steps undertaken to close the ticket.<br><br>**Required only after complaint is resolved** |\n| `internal_links` | Internal links of items such as documents and correspondence that were used to resolve the ticket.<br><br>**Optional** |\n| `user_correspondence_links` | Links to user correspondence that allows an auditor or a regulator to review the ticket history and resolution.<br><br>**Required if applicable to the case, but not required if there is no source of user correspondence** |\n| `reason_exceeded_15_days` | The reason that the resolution took longer than 15 business days.<br><br>**Required only after complaint is resolved and resolution exceeded 15 business days** |",
  "title": "Handling complaints | Stripe Documentation",
  "description": "Learn how to properly handle complaints about Stripe Treasury or Stripe Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_account_features",
  "markdown": "# Financial Account Features | Stripe API Reference\n\n## [The FinancialAccount Feature object](https://docs.stripe.com/api/treasury/financial_account_features/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    card\\_issuingnullable object\n    \n    Contains a Feature encoding the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from.\n    \n*   #### \n    \n    deposit\\_insurancenullable object\n    \n    Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesnullable object\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   #### \n    \n    inbound\\_transfersnullable object\n    \n    Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   #### \n    \n    intra\\_stripe\\_flowsnullable object\n    \n    Represents the ability for this FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   #### \n    \n    outbound\\_paymentsnullable object\n    \n    Contains Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   #### \n    \n    outbound\\_transfersnullable object\n    \n    Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\nThe FinancialAccount Feature object\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Update FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/update)\n\nUpdates the Features associated with a FinancialAccount.\n\n### Parameters\n\n*   Encodes the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.\n    \n*   Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesobject\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   Includes Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which may contain child Features.\n\nPOST /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card_issuing[requested]\"=false\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Retrieve FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/retrieve)\n\nRetrieves Features information associated with the FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which might contain child Features.\n\nGET /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Financial Account Features | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers/object",
  "markdown": "# The OutboundTransfer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod used as the payment instrument for an OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod for an OutboundTransfer\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundTransfer. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Information about the OutboundTransfer to be sent to the recipient account.\n    \n*   Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe OutboundTransfer object\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Create an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/create)\n\nCreates an OutboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Hash describing payment method configuration details.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is “transfer”.\n    \n\n### Returns\n\nReturns an OutboundTransfer object if there were no issues with OutboundTransfer creation. The status of the created OutboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/outbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1 \\  -d destination_payment_method=pm_1234567890 \\  -d amount=500 \\  -d currency=usd \\  -d description=\"OutboundTransfer to my external bank account\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Retrieve an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/retrieve)\n\nRetrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [List all OutboundTransfers](https://docs.stripe.com/api/treasury/outbound_transfers/list)\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/cancel)\n\nAn OutboundTransfer can be canceled if the funds have not yet been paid out.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundTransfer object if the cancellation succeeded. Returns an error if the object has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1Mtaaz2eZvKYlo2C235TqrIn\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgbFx5vTNec6NpPKphE93zYcPDgqrHcZhLW_fmKqG9Mu9HUNa_164u93bqkgnPNnYtd3_5Rv_F3YISrR2qg3FQ\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680717489,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```",
  "title": "The OutboundTransfer object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments/object",
  "markdown": "# The Outbound Payment object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   ID of the [customer](https://docs.stripe.com/api/customers) to whom an OutboundPayment is sent.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an OutboundPayment.\n    \n*   #### \n    \n    end\\_user\\_detailsnullable object\n    \n    Details about the end user.\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundPayment. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).\n    \n*   Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe Outbound Payment object\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Create an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/create)\n\nCreates an OutboundPayment.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_dataobject\n    \n    Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Payment method-specific configuration for this OutboundPayment.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is “payment”.\n    \n\n### Returns\n\nReturns an OutboundPayment object if there were no issues with OutboundPayment creation.\n\nPOST /v1/treasury/outbound\\_payments\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d customer=cus_4QFOF3xrvBT2nU \\  -d destination_payment_method=pm_1MtaD82eZvKYlo2Cn1XtS23o \\  -d description=\"OutboundPayment to a 3rd party\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Retrieve an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/retrieve)\n\nRetrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundPayment object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [List all OutboundPayments](https://docs.stripe.com/api/treasury/outbound_payments/list)\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/cancel)\n\nCancel an OutboundPayment.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the OutboundPayment object if the cancellation succeeded. Returns an error if the OutboundPayment has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/outbound\\_payments/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": null,  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null    },    \"financial_account\": {      \"id\": \"fa_1LpyM72eZvKYlo2CiUmr2kuV\",      \"network\": \"stripe\"    },    \"type\": \"financial_account\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgakyczTzCY6NZMi6lMnZXTYms--WBYQzUXzaEJ_JwErEK5FXXW8F9Qy7fEzKvsHEOzyjS9AtIuK8sUjgWdU\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716010,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```",
  "title": "The Outbound Payment object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/physical/personalization_designs",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals",
  "markdown": "# Moving money with Treasury using CreditReversal objects\n\n## Learn how you can return funds from received credits that add money to your Treasury financial account.\n\nReversing a [`ReceivedCredit`](https://docs.stripe.com/api/treasury/received_credits) creates a [`CreditReversal`](https://docs.stripe.com/api/treasury/credit_reversals). You can reverse `ReceivedCredits` only in some scenarios (detailed in the following table). Whether you can reverse a `ReceivedCredit` depends on the network and source flow.\n\nThe `reversal_details` sub-hash on the `ReceivedCredit` object can have the following combination of values, which determines if you can reverse the `ReceivedCredit`.\n\n| RESTRICTED REASON | DEADLINE (EPOCH TIMESTAMP) | EXAMPLE SCENARIO |\n| --- | --- | --- |\n| `source_flow_restricted` | `null` | A Stripe network `ReceivedCredit` that’s the result of a flow other than an `OutboundPayment`. Stripe restricts users from reversing such `ReceivedCredits`. |\n| `network_restricted` | `null` | Network constraints prevent Stripe from allowing reversal on some `ReceivedCredits`, such as a `ReceivedCredit` from a wire transfer. |\n| `null` | `{{TIMESTAMP}}` | A `ReceivedCredit`, which is reversible, but only until the timestamp in `deadline`. ACH `ReceivedCredits` have a deadline that determines how long you have to reverse them. |\n| `deadline_passed` | `{{TIMESTAMP}}` | A `ReceivedCredit` that’s reversible before the timestamp in `deadline`, but is no longer reversible because the `deadline` has passed. ACH `ReceivedCredits` have a limited time of when they’re reversible after they’re created. |\n| `already_reversed` | `null` | A `ReceivedCredit` that’s already reversed has this `restricted_reason`. It might have a non-null `deadline` value. |\n| `null` | `null` | You can reverse `ReceivedCredits` anytime if they have `null` for both `restricted_reason` and `deadline`. |\n\n[](#createrc)\n\nUse `POST /v1/treasury/credit_reversals` to create a `CreditReversal`. Set the `received_credit` parameter in the body of the request to the value of the `ReceivedCredit` ID to reverse.\n\n#### Note\n\nYou can’t update `CreditReversals`, so you must set any optional [metadata](https://docs.stripe.com/api/treasury/credit_reversals/create#create_credit_reversal-metadata) on creation.\n\nThe following request creates a `CreditReversal` based on the `ReceivedCredit` ID value on the required `received_credit` parameter. The request also sets an optional metadata value.\n\n`curl https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d received_credit={{RECEIVED_CREDIT_ID}} \\   -d \"metadata[reason]\"=Because`\n\nIf successful, the response returns the new `CreditReversal` object.\n\n`{     \"id\": \"{{CREDIT_REVERSAL_ID}}\",     \"object\": \"credit_reversal\",     \"amount\": 1000,     \"currency\": \"usd\",     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{URL_ID}}\",     \"livemode\": false,     \"metadata\": {         \"csr_id\": \"CSR-12\"`\n\n[](#retrievecr)\n\nUse `GET /v1/treasury/credit_reversals/{{CREDIT_REVERSAL_ID}}` to retrieve the `CreditReversal` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/credit_reversals/{{CREDIT_REVERSAL_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe response returns the specific `CreditReversal` object.\n\n`{   \"id\": \"{{CREDIT_REVERSAL_ID}}\",   \"object\": \"credit_reversal\",   \"livemode\": \"{{Boolean}}\",   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"amount\": 1000,   \"currency\": \"usd\",   // The ReceivedCredit that was reversed   \"received_credit\": \"{{RECEIVED_CREDIT_ID}}\",   // The rails used to reversed. Always the same as that of the ReceivedCredit   \"network\": \"ach\",   \"status\": \"processing\" | \"posted\",   \"status_transitions\": {     \"posted_at\": null | \"{{Timestamp}}\",   },   // Transaction representing balance impact of the CreditReversal   \"transaction\": \"{{TRANSACTION_ID}}\",   // A unique, Stripe-hosted direct link to the regulatory receipt for the CreditReversal   \"hosted_regulatory_receipt_url\": \"{{Url}}\",   // A map of String-String intended for users to use custom data   \"metadata\": {}, }`\n\n[](#listcr)\n\nUse `GET /v1/treasury/credit_reversals` to retrieve a list of `CreditReversals` for the financial account with the ID provided in the required `financial_account` parameter. You can filter the list by standard list parameters, `status`, or by `ReceivedCredit` ID using the `received_credit` parameter.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"posted\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by ReceivedCredit   \"received_credit\": \"{{RECEIVED_CREDIT_ID}}\" }`\n\nThe following request returns the three most recent credit reversals with a status of `posted` for the specified financial account.\n\n`curl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d limit=3 \\  -d status=posted \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}    `\n\nIf successful, the response returns the relevant list of [CreditReversal objects](https://docs.stripe.com/api/treasury/credit_reversals).\n\n[](#testcr)\n\nTo test CreditReversals, you must first create [test mode ReceivedCredits](#testingrc). Then use `POST /v1/treasury/credit_reversals` and specify the test mode `ReceivedCredit` ID in the `received_credit` parameter to create a test mode `CreditReversal`.\n\n[](#webhookcr)\n\nStripe emits the following `CreditReversal` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.credit_reversal.created` on `CreditReversal` creation.\n*   `treasury.credit_reversal.posted` when the `CreditReversal` posts.",
  "title": "Moving money with Treasury using CreditReversal objects | Stripe Documentation",
  "description": "Learn how you can return funds from received credits that add money to your Treasury financial account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards/physical/physical_bundles",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals",
  "markdown": "# Moving money with Treasury using DebitReversal objects\n\n## Learn how you can retrieve funds taken out of a Treasury financial account from an external account holder.\n\nReturning the funds from a [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits) creates a [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals). You can get the funds back from a `ReceivedDebit` in only some scenarios (detailed in the following table). Whether you can return the funds of a `ReceivedDebit` depends on the network and source flow.\n\nThe `reversal_details` sub-hash on the `ReceivedDebit` resource can have the following combination of values, which determines whether you can return the `ReceivedDebit` funds.\n\n| RESTRICTED REASON | DEADLINE (EPOCH TIMESTAMP) | EXAMPLE SCENARIO |\n| --- | --- | --- |\n| `null` | 7940828047 | A `ReceivedDebit` that you can return funds from, but only until the timestamp in `deadline`. ACH `ReceivedDebits` have a deadline that determines how long you have to return them. |\n| `deadline_passed` | 1629480538 | A `ReceivedDebit` whose funds were returnable before the timestamp in `deadline`, but is no longer returnable using the API because the `deadline` has passed. ACH `ReceivedDebits` have a limited time of when they’re returnable using the API after they’re created. |\n| `already_reversed` | null | A `ReceivedDebit` that’s already been returned. It might have a non-null `deadline` value. |\n| `source_flow_restricted` | null | A `ReceivedDebit` that can’t be returned because its `source_flow` isn’t reversible. |\n\n### Return deadlines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have approximately 1 business day to return ACH debits using the API after receipt. After this time, ACH debit funds might still be returnable but funds return isn’t guaranteed. Contact support to request a return of funds if the reversal deadline has passed.\n\nTo create returns of `ReceivedDebit` funds produced by activity on `Issuing` cards, see the [Issuing disputes](https://docs.stripe.com/issuing/purchases/disputes) guide.\n\n[](#createdebrev)\n\nUse `POST /v1/treasury/debit_reversals` to create a `DebitReversal`. Specify the ID of the `ReceivedDebit` to reverse with the `received_debit` parameter in the body of the request.\n\n#### Note\n\nYou can’t update `DebitReversals`, so you must set any optional [metadata](https://docs.stripe.com/api/treasury/debit_reversals/object#debit_reversal_object-metadata) on creation.\n\nThe following request creates a `DebitReversal` based on the `ReceivedDebit` ID value on the required `received_debit` parameter. The request also sets an optional metadata value.\n\n`curl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d received_debit={{RECEIVED_DEBIT_ID}} \\   -d \"metadata[reason]\"=Because`\n\nIf successful, the response returns the new `DebitReversal` object.\n\n`{   \"id\": \"{{DEBIT_REVERSAL_ID}}\",   \"object\": \"debit_reversal\",   \"amount\": 1000,   \"currency\": \"usd\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{URL_ID}}\",   \"linked_flows\": null,   \"livemode\": false,   \"metadata\": {},   \"network\": \"ach\",   \"received_debit\": \"{{RECEIVED_DEBIT_ID}}\",   \"resolution\": null,   \"status\": \"processing\",   \"status_transitions\": {     \"completed_at\": null   },   \"transaction\": \"{{TRANSACTION_ID}}\" }`\n\n[](#retrievedebrev)\n\nUse `GET /v1/treasury/debit_reversals/{{DEBIT_REVERSAL_ID}}` to retrieve the `DebitReversal` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/debit_reversals/{{DEBIT_REVERSAL_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the identified `DebitReversal`.\n\n`{   \"id\": \"{{DEBIT_REVERSAL_ID}}\",   \"object\": \"debit_reversal\",   \"livemode\": true | false,   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"amount\": 1000,   \"currency\": \"usd\",   // the ReceivedDebit being returned   \"received_debit\": \"{{RECEIVED_DEBIT_ID}}\",`\n\n[](#listdebrev)\n\nUse `GET /v1/treasury/debit_reversals` to retrieve a list of `DebitReversals` for the financial account with the ID provided in the required `financial_account` parameter. You can filter the list by standard list parameters, `status`, or by `ReceivedDebit` ID using the `received_debit` parameter.\n\n``{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by financial account (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by `status`   \"status\": \"processing\" | \"canceled\" | \"completed\"   // Filter by ReceivedDebit   \"received_debit\": \"{{RECEIVED_DEBIT_ID}}\", }``\n\nThe following request retrieves the last three [DebitReversal objects](https://docs.stripe.com/api/treasury/debit_reversals/object) for the identified financial account.\n\n`curl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=3`\n\n[](#testdebrev)\n\nTo test `DebitReversals`, you must first create a [test mode ReceivedDebit](#test-received-debit). Afterwards, use `POST /v1/treasury/debit_reversals` and specify the test mode `ReceivedDebit` ID in the `received_debit` parameter to create a test mode `DebitReversal`.\n\n[](#webhooksdebrev)\n\nStripe emits the following `DebitReversal` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.debit_reversal.created` on `DebitReversal` creation.\n*   `treasury.debit_reversal.completed` when the `DebitReversal` completes.",
  "title": "Moving money with Treasury using DebitReversal objects | Stripe Documentation",
  "description": "Learn how you can retrieve funds taken out of a Treasury financial account from an external account holder.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/physical_bundles/list",
  "markdown": "# List all physical bundles | Stripe API Reference\n\nReturns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return physical bundles with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Only return physical bundles with the given type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate physical bundle object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/physical\\_bundles\n\n```\ncurl -G https://api.stripe.com/v1/issuing/physical_bundles \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/physical_bundles\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ics_NLuXJPDYSTjFON\",      \"object\": \"issuing.physical_bundle\",      \"livemode\": false,      \"name\": \"US Visa Credit White\",      \"features\": {        \"card_logo\": \"required\",        \"carrier_text\": \"optional\"      },      \"status\": \"active\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all physical bundles | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/update",
  "markdown": "# Update a personalization design | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Fpersonalization_designs%2Fupdate)\n\nUpdates a card personalization object.\n\n### Parameters\n\n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name. Providing an empty string will set the field to null.\n    \n*   The physical bundle object belonging to this personalization design.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Retrieve a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/retrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [List all personalization designs](https://docs.stripe.com/api/issuing/personalization_designs/list)\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```",
  "title": "Update a personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/files/create",
  "markdown": "# Create a file | Stripe API Reference\n\nTo upload a file to Stripe, you need to send a request of type `multipart/form-data`. Include the file you want to upload in the request, and the parameters for creating a file.\n\nAll of Stripe’s officially supported Client libraries support sending `multipart/form-data`.\n\n### Parameters\n\n*   A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | `tax_document_user_upload`<br><br>A user-uploaded tax document. |\n    | `terminal_reader_splashscreen`<br><br>Splashscreen to be displayed on Terminal readers. |\n    \n\n### More parameters\n\n### Returns\n\nReturns the file object.\n\n```\ncurl https://files.stripe.com/v1/files \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -F purpose=dispute_evidence \\  -F file=\"@/path/to/a/file.jpg\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Retrieve a file](https://docs.stripe.com/api/files/retrieve)\n\nRetrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to [access file contents](https://docs.stripe.com/file-upload#download-file-contents).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/files/@/path/to/a/file.png \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [List all files](https://docs.stripe.com/api/files/list)\n\nReturns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.\n\n### Parameters\n\n*   Filter queries by the file purpose. If you don’t provide a purpose, the queries return unfiltered files.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` files, starting after the `starting_after` file. Each entry in the array is a separate file object. If there aren’t additional available files, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/files \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/files\",  \"has_more\": false,  \"data\": [    {      \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",      \"object\": \"file\",      \"created\": 1680116847,      \"expires_at\": 1703444847,      \"filename\": \"file.png\",      \"links\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"      },      \"purpose\": \"dispute_evidence\",      \"size\": 8429,      \"title\": null,      \"type\": \"png\",      \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"    }    {...}    {...}  ],}\n```\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a file | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode",
  "markdown": "# Activate a testmode personalization design\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Activate a testmode personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode",
  "markdown": "# Reject a testmode personalization design\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Reject a testmode personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode",
  "markdown": "# Deactivate a testmode personalization design\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Deactivate a testmode personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/create",
  "markdown": "# Create a personalization design | Stripe API Reference\n\nCreates a personalization design object.\n\n### Parameters\n\n*   #### \n    \n    physical\\_bundlestringRequired\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the created personalization design object.\n\nPOST /v1/issuing/personalization\\_designs\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My personalization design name\" \\  -d \"preferences[is_default]\"=false \\  -d card_logo=file_1LzR9L2eZvKYlo2CelTpcvKu \\  -d physical_bundle=ics_Oiw9ahglMfql0U\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Update a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/update)\n\nUpdates a card personalization object.\n\n### Parameters\n\n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name. Providing an empty string will set the field to null.\n    \n*   The physical bundle object belonging to this personalization design.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Retrieve a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/retrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [List all personalization designs](https://docs.stripe.com/api/issuing/personalization_designs/list)\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```",
  "title": "Create a personalization design | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/personalization_designs/list",
  "markdown": "# List all personalization designs | Stripe API Reference\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```\n\n## [Activate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `active`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/activate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/activate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"active\"}\n```\n\n## [Deactivate a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `inactive`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/deactivate\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/deactivate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"inactive\"}\n```\n\n## [Reject a testmode personalization design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)Test helper\n\nUpdates the `status` of the specified testmode personalization design object to `rejected`.\n\n### Parameters\n\n*   #### \n    \n    rejection\\_reasonsobjectRequired\n    \n    The reason(s) the personalization design was rejected.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/test\\_helpers/issuing/personalization\\_designs/:id/reject\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"rejection_reasons[card_logo][]\"=network_name \\  -d \"rejection_reasons[card_logo][]\"=inappropriate \\  -d \"rejection_reasons[carrier_text][]\"=other\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": false,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [      \"network_name\",      \"inappropriate\"    ],    \"carrier_text\": [      \"other\"    ]  },  \"status\": \"rejected\"}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all personalization designs | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cards",
  "markdown": "# Cards | Stripe API Reference\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [The Card object](https://docs.stripe.com/api/issuing/cards/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    The reason why the card was canceled.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `design_rejected`<br><br>The design of this card was rejected by Stripe for violating our [partner guidelines](https://docs.stripe.com/issuing/cards/physical#design-review). |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n\n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.\n    \n*   The expiration month of the card.\n    \n*   The expiration year of the card.\n    \n*   The last 4 digits of the card number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n*   The type of the card.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More attributes\n\n*   #### \n    \n    cvcnullable stringExpandable\n    \n\n*   #### \n    \n    numbernullable stringExpandable\n    \n*   #### \n    \n    personalization\\_designnullable stringExpandable\n    \n*   #### \n    \n    replaced\\_bynullable stringExpandable\n    \n*   #### \n    \n    replacement\\_fornullable stringExpandable\n    \n*   #### \n    \n    replacement\\_reasonnullable enum\n    \n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Create a card](https://docs.stripe.com/api/issuing/cards/create)\n\nCreates an Issuing `Card` object.\n\n### Parameters\n\n*   The currency for the card.\n    \n*   The type of card to issue. Possible values are `physical` or `virtual`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n*   The [Cardholder](https://docs.stripe.com/api#issuing_cardholder_object) object with which the card will be associated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    personalization\\_designstring\n    \n\n### Returns\n\nReturns an Issuing `Card` object if creation succeeds.\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d cardholder=ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -d currency=usd \\  -d type=virtual\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Update a card](https://docs.stripe.com/api/issuing/cards/update)\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled bec