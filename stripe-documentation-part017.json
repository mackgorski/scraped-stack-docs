[
  {
    "url": "https://docs.stripe.com/api/customer_portal/session?lang=curl",
    "markdown": "# The Customer Portal Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Customer Portal Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/scheduled-reports",
    "markdown": "# Scheduled reports | Stripe DocumentationThe Stripe Docs logo\n\n## Set up report subscriptions to get notified when new data is ready.\n\nIf you frequently download the same report, you can schedule report downloads to occur on a daily, weekly, or monthly basis. To manage the schedules of reports on a financial reports page, click **Schedule…** and select the schedule (frequency), columns, and currency for each report. When a scheduled report is ready to be downloaded, you receive an email notification.\n\nTo stop running a scheduled report, set its schedule to `None`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scheduled_reports.9f06b8883e7b500b0210d9065de87264.png)",
    "title": "Scheduled reports | Stripe Documentation",
    "description": "Set up report subscriptions to get notified when new data is ready.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_card_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/invoicing/taxes/manual-tax-amounts",
    "markdown": "# Use tax amounts calculated outside of Stripe with Stripe Billing\n\n## Use taxes calculated from an external system with Stripe Invoices.\n\nTo accommodate a wide range of billing scenarios, Stripe allows tax amounts to be set directly on invoices, which helps you to integrate with other tax calculation systems (such as a third-party tax tool such as Avalara or your own tax engine). This guide goes through various billing scenarios to show how to use the [`tax_amounts`](https://docs.stripe.com/api/invoices/update_line#update_lines-tax_amounts) field.\n\n## Create an invoice with manual tax amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis section describes adding manual tax amounts to invoice line items.\n\n### Create an invoice with an invoice item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe first step is to create an invoice. We assume you already have a customer created, but if you don’t, please reference the [customers](https://docs.stripe.com/invoicing/customer) guide.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nManual tax amounts can only be added to invoice line items, so add an invoice item to the invoice.\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d invoice=  {{INVOICE_ID}}   \\  -d amount=100 \\  -d currency=usd`\n\n### Update the invoice line item with `tax_amounts` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [update invoice line item endpoint](https://docs.stripe.com/api/invoices/update_line) accepts the [`tax_amounts`](https://docs.stripe.com/api/invoices/update_line#update_lines-tax_amounts) parameter. This field gives merchants the ability to directly set the tax amounts on invoice line items. The field also requires tax rate data to make sure relevant information is displayed to the customer. The example below updates an invoice line item with the `tax_amounts` field.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/lines/il_0O4tNe589O8KAxCGYD7OyXPP \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tax_amounts[0][amount]\"=10 \\  -d \"tax_amounts[0][taxable_amount]\"=100 \\  -d \"tax_amounts[0][tax_rate_data][percentage]\"=10 \\  -d \"tax_amounts[0][tax_rate_data][inclusive]\"=false \\  -d \"tax_amounts[0][tax_rate_data][tax_type]\"=sales_tax \\  -d \"tax_amounts[0][tax_rate_data][display_name]\"=\"Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][description]\"=\"Texas Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][jurisdiction]\"=Texas \\  -d \"tax_amounts[0][tax_rate_data][country]\"=US \\  -d \"tax_amounts[0][tax_rate_data][state]\"=TX`\n\nAll of the fields under `tax_amounts` are required except for `description`, `jurisdiction`, `country`, `state`, and `tax_type`. The [invoice line item object](https://docs.stripe.com/api/invoices/line_item) returns a `tax_amounts` field.\n\n`{   id: \"il_0O4tNe589O8KAxCGYD7OyXPP\",   object: \"line_item\",   amount: 100,   amount_excluding_tax: 100,   currency: \"usd\",   ...   tax_amounts: [     {       amount: 10,       inclusive: false,       tax_rate: \"txr_0Ns7kW589O8KAxCGXoi7EAuS\",       taxability_reason: null,       taxable_amount: 100     }   ],   tax_rates: [],   ... }`\n\n#### Note\n\nStripe automatically creates or reuses an existing tax rate based on `tax_rate_data`. However, Stripe calculates tax amounts on the invoice based only on the amount parameter. Other values, such as tax rate, are only used for rendering purposes to be shown on the invoice. No validations are run on these fields to make sure they’re consistent with the tax amounts specified.\n\n### Finalize the invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter all of the invoice line items are updated with tax amounts, you need to finalize the invoice. Tax amounts can’t change after the invoice is finalized. Refer to the [edit invoice](https://docs.stripe.com/invoicing/invoice-edits) guide if you need to modify the invoice after finalization.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Stripe automatically creates tax-rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor manual tax amounts, Stripe requires information about the corresponding tax rate. The tax rate is only used to display information to customers. It isn’t used in any calculations.\n\nStripe automatically creates tax rate objects in the background based on `tax_rate_data`. If the same tax rate data is passed in multiple times, Stripe references the existing tax rate object instead of creating another one. The following fields are used to deduplicate the tax rate: `percentage`, `inclusive`, `display_name`, `jurisdiction`, `country`, `state`, and `tax_type`. In this example, assume a second invoice line item was updated on the invoice from the previous section with the same `tax_rate_data`.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/lines/il_0P6nbg589O8KAxCGRWBJAdNV \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tax_amounts[0][amount]\"=50 \\  -d \"tax_amounts[0][taxable_amount]\"=500 \\  -d \"tax_amounts[0][tax_rate_data][percentage]\"=10 \\  -d \"tax_amounts[0][tax_rate_data][inclusive]\"=false \\  -d \"tax_amounts[0][tax_rate_data][tax_type]\"=sales_tax \\  -d \"tax_amounts[0][tax_rate_data][display_name]\"=\"Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][description]\"=\"Texas Sales Tax\" \\  -d \"tax_amounts[0][tax_rate_data][jurisdiction]\"=Texas \\  -d \"tax_amounts[0][tax_rate_data][country]\"=US \\  -d \"tax_amounts[0][tax_rate_data][state]\"=TX`\n\n`{   id: \"il_0P6nbg589O8KAxCGRWBJAdNV\",   object: \"line_item\",   amount: 100,   amount_excluding_tax: 100,   currency: \"usd\",   ...   tax_amounts: [     {       amount: 10,       inclusive: false,       tax_rate: \"txr_0Ny6QR589O8KAxCGo6MKGPxM\",       taxability_reason: null,       taxable_amount: 100     }   ],   tax_rates: [],   ... }`\n\nBoth invoice line items have the same `tax_rate` ID under the `tax_amount`. Stripe handles the tax rate creation and deduplication to minimize the burden on merchants. While the `tax_rate` ID maps to a valid tax rate object, the IDs mapped to automatically created tax rates can’t be passed into the `tax_rates` field on the API. The only exception to that rule is the create credit notes endpoint.\n\n## Issue a credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCredit notes allow for adjustments on invoices without needing to void an invoice. When issuing a credit note for an invoice line item with manual tax amounts, the API requires additional information to accurately create it.\n\n### Create credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe create credit note endpoint also accepts the `tax_amounts` parameter. The field is required when the corresponding invoice line item has manual tax amounts. This ensures accurate accounting of the credit note and maintains consistency with your invoices.\n\n`curl https://api.stripe.com/v1/credit_notes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d invoice=  {{INVOICE_ID}}   \\  -d reason=duplicate \\  -d \"lines[0][type]\"=invoice_line_item \\  -d \"lines[0][invoice_line_item]\"=il_0O4tNe589O8KAxCGYD7OyXPP \\  -d \"lines[0][tax_amounts][0][amount]\"=10 \\  -d \"lines[0][tax_amounts][0][taxable_amount]\"=100 \\  -d \"lines[0][tax_amounts][0][tax_rate]\"=txr_0Ns7kW589O8KAxCGXoi7EAuS`\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep in mind the following constraints when working with manual tax amounts.\n\n### Invoice items don’t have tax amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManual tax amounts can only be added to invoice line items.\n\n### `taxable_amount` and `tax_rates` are not validated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe taxable amount and tax rate data passed in the request are only used for rendering purposes. They’re not validated against the tax amount in the request.\n\n### Can’t mix `tax_amounts` and `tax_rates`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice line item can’t have manual tax amounts if it also has a tax rate, and vice versa. Invoice line items also can’t have manual tax amounts if the invoice has a default tax rate or if any of the other invoice line items on the invoice has a tax rate.\n\n### `tax_amounts` can grow stale when updating other fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExisting manual tax amounts persist on the invoice line item unless directly edited. This can lead to stale tax amounts when [updating the invoice item](https://docs.stripe.com/api/invoiceitems/update) with fields relating to its amount, such as `amount`, `discounts`, or `price`.\n\n### Automatically created tax rates can’t be directly used![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically creates tax rate objects for manual tax amounts. These tax rates can’t be directly referenced on invoice or payment-related endpoints, except the credit note endpoint. They also can’t be directly updated and won’t be included on the all tax rates endpoint. However, the tax rate’s data is accessible by calling the retrieve tax rate endpoint with its token.",
    "title": "Use tax amounts calculated outside of Stripe with Stripe Billing | Stripe Documentation",
    "description": "Use taxes calculated from an external system with Stripe Invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/upcoming",
    "markdown": "# Retrieve an upcoming invoice | Stripe API Reference\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an invoice's line items](https://docs.stripe.com/api/invoices/invoice_lines)\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```\n\n## [Retrieve an upcoming invoice's line items](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)\n\nWhen retrieving an upcoming invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/upcoming/lines\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_OgeRVYRv3sHroi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/upcoming/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NtH5qBHO5VeT9SUzhbifVXt\",      \"object\": \"line_item\",      \"amount\": 1000,      \"amount_excluding_tax\": 1000,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NtH5qBHO5VeT9SUzhbifVXt\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1695418858,        \"start\": 1695418858      },      \"price\": {        \"id\": \"price_1NrpbEBHO5VeT9SUHp6xMwKA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1695074844,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_Of9vdHHGRaGOio\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [List all invoices](https://docs.stripe.com/api/invoices/list)\n\nYou can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.\n\n### Parameters\n\n*   Only return invoices for the customer specified by this customer ID.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   Only return invoices for the subscription specified by this subscription ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array invoice attachments,\n\n```\ncurl -G https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Delete a draft invoice](https://docs.stripe.com/api/invoices/delete)\n\nPermanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be [voided](#void_invoice).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA successfully deleted invoice. Otherwise, this call raises [an error](#errors), such as if the invoice has already been deleted.\n\n```\ncurl -X DELETE https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"deleted\": true}\n```",
    "title": "Retrieve an upcoming invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/report-types/balance",
    "markdown": "# Balance report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Balance report schema and parameters.\n\nThe Balance report returns your complete transaction history to help with reconciliation. Run this report to use the returned data in your API calls. You can also download the CSV from the [Balance report](https://dashboard.stripe.com/reports/balance) in the Dashboard.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\n| Report type | Required run parameters | Optional run parameters |\n| --- | --- | --- |\n| `balance_change_from_activity.itemized.1`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.2`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-2) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.3`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-3) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.4`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-4) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.itemized.5`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-itemized-5) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `balance_change_from_activity.summary.1`[<br><br>Columns<br><br><br><br>](#schema-balance-change-from-activity-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `timezone`<br>*   `columns` |\n| `payouts.itemized.1`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.itemized.2`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-2) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.itemized.3`[<br><br>Columns<br><br><br><br>](#schema-payouts-itemized-3) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `reporting_category`<br>*   `decimal_separator`<br>*   `columns` |\n| `payouts.summary.1`[<br><br>Columns<br><br><br><br>](#schema-payouts-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `currency`<br>*   `timezone`<br>*   `columns` |\n| `balance.summary.1`[<br><br>Columns<br><br><br><br>](#schema-balance-summary-1) | *   `interval_start`<br>*   `interval_end` | *   `timezone`<br>*   `currency`<br>*   `columns` |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.2`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Unique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.3`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| created |     | Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| available\\_on |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at\\_utc |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| charge\\_created |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.4`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| created |     | Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| available\\_on |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee\\_tax |     | Tax on Stripe fees. Expressed in major units of the currency (e.g dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at\\_utc |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| charge\\_created |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.itemized.5`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| created\\_utc |     | Time at which the balance transaction was created. Dates in UTC. |\n| available\\_on\\_utc |     | The date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee\\_tax |     | Tax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| source\\_id |     | The Stripe object to which this transaction is related. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| customer\\_facing\\_amount |     | For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer. |\n| customer\\_facing\\_currency |     | For transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n| automatic\\_payout\\_id |     | ID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)). |\n| automatic\\_payout\\_effective\\_at |     | The date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance. |\n| customer\\_id |     | The unique ID of the related customer, if any. |\n| customer\\_email |     | Email address of the customer, if any, associated with this balance transaction. |\n| customer\\_name |     | Name of the customer, if any, associated with this balance transaction. |\n| customer\\_description |     | Description provided when creating the customer, often used to store the customer name. |\n| customer\\_shipping\\_address\\_line1 |     | First line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_line2 |     | Second line of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_city |     | City of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_state |     | State of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_postal\\_code |     | Postal code of the customer shipping address associated with this charge, if any |\n| customer\\_shipping\\_address\\_country |     | Country of the customer shipping address associated with this charge, if any |\n| customer\\_address\\_line1 |     | First line of the customer address associated with this charge, if any |\n| customer\\_address\\_line2 |     | Second line of the customer address associated with this charge, if any |\n| customer\\_address\\_city |     | City of the customer address associated with this charge, if any |\n| customer\\_address\\_state |     | State of the customer address associated with this charge, if any |\n| customer\\_address\\_postal\\_code |     | Postal code of the customer address associated with this charge, if any |\n| customer\\_address\\_country |     | Country of the customer address associated with this charge, if any |\n| shipping\\_address\\_line1 |     | First line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_line2 |     | Second line of the shipping address associated with this charge, if any |\n| shipping\\_address\\_city |     | City of the shipping address associated with this charge, if any |\n| shipping\\_address\\_state |     | State of the shipping address associated with this charge, if any |\n| shipping\\_address\\_postal\\_code |     | Postal code of the shipping address associated with this charge, if any |\n| shipping\\_address\\_country |     | Country of the shipping address associated with this charge, if any |\n| card\\_address\\_line1 |     | First line of the card address associated with this charge, if any |\n| card\\_address\\_line2 |     | Second line of the card address associated with this charge, if any |\n| card\\_address\\_city |     | City of the card address associated with this charge, if any |\n| card\\_address\\_state |     | State of the card address associated with this charge, if any |\n| card\\_address\\_postal\\_code |     | Postal code of the card address associated with this charge, if any |\n| card\\_address\\_country |     | Country of the card address associated with this charge, if any |\n| charge\\_id |     | Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes. |\n| payment\\_intent\\_id |     | The unique ID of the related Payment Intent, if any. |\n| charge\\_created\\_utc |     | Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC. |\n| invoice\\_id |     | Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| invoice\\_number |     | Unique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice. |\n| subscription\\_id |     | Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription. |\n| payment\\_method\\_type |     | The type of payment method used in the related payment. |\n| is\\_link |     | Whether or not the payment was made using Link. |\n| card\\_brand |     | [Card brand](https://stripe.com/docs/api#card_object-brand), if applicable. |\n| card\\_funding |     | Card [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable. |\n| card\\_country |     | Two-letter ISO code representing the country of the card. |\n| statement\\_descriptor |     | The dynamic statement descriptor or suffix specified when the related charge was created. |\n| dispute\\_reason |     | Reason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). |\n| connected\\_account\\_id |     | For Stripe Connect activity related to a connected account, the unique ID for the account. |\n| connected\\_account\\_name |     | For Stripe Connect activity related to a connected account, the name of the account. |\n| connected\\_account\\_country |     | For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account. |\n| connected\\_account\\_direct\\_charge\\_id |     | (Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account. |\n| payment\\_metadata\\[key\\] |     | Metadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| refund\\_metadata\\[key\\] |     | Metadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n| transfer\\_metadata\\[key\\] |     | Metadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys. |\n\n### Balance change from activity summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance_change_from_activity.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| count |     | The number of transactions associated with the `reporting_category`. |\n| gross |     | Sum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Sum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Sum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.2`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n\n### Itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.itemized.3`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| payout\\_id |     | The Stripe object to which this transaction is related. |\n| effective\\_at\\_utc |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC. |\n| effective\\_at |     | For [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in the requested timezone, or UTC if not provided. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| gross |     | Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| balance\\_transaction\\_id |     | Unique identifier for the balance transaction. |\n| description |     | An arbitrary string attached to the balance transaction. Often useful for displaying to users. |\n| payout\\_expected\\_arrival\\_date |     | Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. |\n| payout\\_status |     | Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`. |\n| payout\\_reversed\\_at\\_utc |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in UTC. |\n| payout\\_reversed\\_at |     | Typically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in the requested timezone, or UTC if not provided. |\n| payout\\_type |     | Can be `bank_account` or `card`. |\n| payout\\_description |     | An arbitrary string attached to the payout. Often useful for displaying to users. |\n| payout\\_destination\\_id |     | ID of the bank account or card the payout was sent to. |\n| regulatory\\_tag |     | ​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts. |\n\n### Payouts summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payouts.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| reporting\\_category |     | [Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field. |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined. |\n| count |     | The number of transactions associated with the `reporting_category`. |\n| gross |     | Sum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| fee |     | Sum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| net |     | Sum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n\n### Balance summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `balance.summary.1`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| category |     | One of `starting_balance`, `ending_balance`, `activity` or `payouts`. |\n| description |     | One of `Starting balance (YYYY-MM-DD)` - the balance at the start of the period, `Activity` - the net amount of all transactions that affected your balance except for payouts, `Total payouts` - the amount of payouts to your bank account, or `Ending balance (YYYY-MM-DD)` - the balance left over at the end of the period after subtracting payouts from the `Starting balance` and `Activity`. |\n| net\\_amount |     | Net amount for the transactions associated with `category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY). |\n| currency |     | Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `net_amount` is defined. |",
    "title": "Balance report type | Stripe Documentation",
    "description": "Review the Balance report schema and parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/report-types/tax",
    "markdown": "# Tax report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Tax report schema and parameters.\n\nCurrently, this report type is available for our private beta users. To participate in this private beta, submit your information below.\n\nFirst, you need a Stripe account. [Register or Login now](https://dashboard.stripe.com/register?redirect=https%3A%2F%2Fstripe.com%2Fdocs%2Ftax%2Fconnect).",
    "title": "Tax report type | Stripe Documentation",
    "description": "Review the Tax report schema and parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/onboarding",
    "markdown": "# Prepare for onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to prepare your Stripe and NetSuite accounts for onboarding.\n\nIf you want to use the Stripe Connector for NetSuite, you must work with an official implementation partner to set up the connector.\n\nBefore you begin, make sure to prepare your Stripe and NetSuite accounts for onboarding using the guidance below.\n\n### Prepare for onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Activate your Stripe account](https://docs.stripe.com/connectors/netsuite/onboarding#stripe-account)\n2.  [Set up a NetSuite test account](https://docs.stripe.com/connectors/netsuite/onboarding#netsuite-sandbox)\n3.  [Create a dedicated NetSuite user to operate the connector](https://docs.stripe.com/connectors/netsuite/onboarding#netsuite-user)\n4.  [Provide temporary admin access for the implementation partner](https://docs.stripe.com/connectors/netsuite/onboarding#admin-access)\n5.  (Optional) [Set up Stripe Billing](https://docs.stripe.com/connectors/netsuite/onboarding#stripe-billing)\n\n## Activate your Stripe account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you haven’t already, [activate your Stripe account](https://docs.stripe.com/get-started/account/activate).\n\n## Set up a NetSuite sandbox ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe recommend setting up a NetSuite sandbox environment to test the connector. You can set up the connector to sync Stripe test data to your NetSuite production account, but you must remember to manually delete the test data from the production instance.\n\n## Create a dedicated NetSuite user ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo prevent any settings changes from inadvertently affecting the connector’s ability to operate, we recommend creating a dedicated NetSuite user to operate the connector. With a dedicated user, you can also identify actions taken or changes made by that user in the NetSuite system log.\n\nIf you can’t provide a dedicated user, you can provide a shared user that isn’t used for other integrations. Any changes to that user can negatively impact the connector. For example, if you use an existing user login and that employee leaves the company, deleting their NetSuite user can break the connector and stop record syncing.\n\n## Prepare to grant admin access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe implementation partner requires temporary admin access during onboarding for the following:\n\n*   Testing in the sandbox environment\n*   Implementing the connector live in production\n*   Troubleshooting issues specific to your NetSuite account\n\nIf you must restrict access, we recommend providing admin and GUI access in the sandbox environment, and then removing permissions before you move to production.\n\nYour implementation partner can provide further instructions for granting access.\n\n## (Optional) Set up Stripe Billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use Stripe Billing and have existing Stripe prices and NetSuite items, you need to do the following to prepare for onboarding:\n\n*   Prepare a data sheet to map IDs for existing Stripe and NetSuite customers.\n*   Prepare a data sheet to map IDs for existing Stripe prices and NetSuite items.\n*   Determine the rule for the connector to use for NetSuite revenue recognition.\n*   Determine the start date to sync records.",
    "title": "Prepare for onboarding | Stripe Documentation",
    "description": "Learn how to prepare your Stripe and NetSuite accounts for onboarding.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/treasury-fees-reporting",
    "markdown": "# Treasury fees report | Stripe DocumentationThe Stripe Docs logo\n\n## Treasury fees reportBeta\n\n## Analyze Treasury fees at an itemized level.\n\nUse Treasury fee reports to understand Stripe’s approach to the calculation, application, and reporting of fees. You can create and download detailed reports in the Dashboard.\n\n## How Stripe assesses Treasury fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Administrative Facilitation Fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe pays Treasury users the Administrative Facilitation Fee (“AFF”) on a monthly basis. We compound the fee on a daily basis and use the minimum available balance across all your Treasury financial accounts for that particular day. Financial Accounts with a negative balance don’t accrue any fees. The balance is multiplied by: the 50th percentile Effective Federal Funds Rate (EFFR) published for that day by the [Federal Bank of New York](https://www.newyorkfed.org/markets/reference-rates/effr) and your negotiated Administrative Facilitation Fee Rate Multiplier. For non-business days, we use the previous business day’s EFFR value.\n\nThis methodology is as described in the latest Stripe Treasury standardized fee schedule. Your actual methodology might differ based on your negotiated terms with Stripe.\n\nView an example calculation below.\n\n| Day | EOD Available Balance | EFFR | Rate Multiplier | Calculation | Daily Yield for one FA |\n| --- | --- | --- | --- | --- | --- |\n| 1   | $20,000 | 4.33 | 92% | 20000 \\* (0.0433 \\* .92)/360 \\* .5 | $1.11 |\n| 2   | $22,000 | 3.8 | 92% | 22000 \\* (0.038 \\* .92)/360 \\* .5 | $1.07 |\n| 3   | $15,000 | 3.8 | 92% | 22000 \\* (0.038 \\* .92)/360 \\* .5 | $0.73 |\n\nThe total yield for the 3 days is 1.11 + 1.07 + 0.73 = $2.91.\n\n## Available columns ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can customize the columns that appear in the reports when you download them in the Dashboard. The available columns in each type of report are described below.\n\n*   [Treasury Administrative Facilitation Fee](#schema-treasury-fees-administrative-facilitation-fee)\n\n### Treasury Administrative Facilitation Fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `treasury_fees.administrative_facilitation_fee`\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| merchant |     | Unique identifier of financial account associated with. |\n| financial\\_account |     | Unique identifier of financial account for which Administrative Facilitation Fee was incurred. |\n| date |     | Date associated with Administrative Facilitation Fee earned… |\n| balance\\_amount |     | The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. |\n| balance\\_currency |     | Designated currency of financial accounts balance. Currently, FinancialAccounts can only carry balances in USD. |\n| effr\\_value |     | Effective federal funds rate value (50th percentile) used to calculate fee. Gathered from the [NY FED](https://www.newyorkfed.org/markets/reference-rates/effr). |\n| fee |     | Amount of Administrative Facilitation fee paid out in user’s currency. |",
    "title": "Treasury fees report | Stripe Documentation",
    "description": "Analyze Treasury fees at an itemized level.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/report-types/payout-reconciliation",
    "markdown": "# Payout reconciliation report type | Stripe DocumentationThe Stripe Docs logo\n\n## Review the Payout reconciliation report schema and parameters.\n\nThe Payout reconciliation report returns data related to the payouts your receive in your bank account to help you match them to the transactions they relate to. Run this report to use the returned data in your API calls. You can also download the CSV from the [Payment fees report](https://dashboard.stripe.com/reports/reconciliation) in the Dashboard.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\nReport type\n\nRequired run parameters\n\nOptional run parameters\n\n`ending_balance_reconciliation.itemized.1`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-1)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.2`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-2)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.3`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-3)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `timezone`\n*   `columns`\n\n`ending_balance_reconciliation.itemized.4`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-itemized-4)\n\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `timezone`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.5`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-5)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `timezone`\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-1)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.2`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-2)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.3`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-3)\n\n*   `payout`\n\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.itemized.4`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-itemized-4)\n\n*   `payout`\n\n*   `reporting_category`\n*   `timezone`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.by_id.summary.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-by-id-summary-1)\n\n*   `payout`\n\n*   `columns`\n\n`ending_balance_reconciliation.summary.1`[\n\nColumns\n\n\n\n](#schema-ending-balance-reconciliation-summary-1)\n\n*   `interval_end`\n\n*   `currency`\n*   `timezone`\n*   `columns`\n\n`payout_reconciliation.itemized.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-1)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.2`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-2)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.3`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-3)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.itemized.4`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-itemized-4)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `timezone`\n*   `currency`\n*   `reporting_category`\n*   `decimal_separator`\n*   `columns`\n\n`payout_reconciliation.summary.1`[\n\nColumns\n\n\n\n](#schema-payout-reconciliation-summary-1)\n\n*   `interval_start`\n*   `interval_end`\n\n*   `currency`\n*   `timezone`\n*   `columns`\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\n### Itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested time zone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested time zone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested time zone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested time zone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized reconciliation for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Payouts reconciliation summary for a single payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.by_id.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Ending balance reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `ending_balance_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Itemized payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Payouts reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `payout_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).",
    "title": "Payout reconciliation report type | Stripe Documentation",
    "description": "Review the Payout reconciliation report schema and parameters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/report-types/connect",
    "markdown": "# Connect report type | Stripe DocumentationThe Stripe Docs logo\n\n## Retrieve financial reports for your connected accounts using the API.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms can use most financial reports to view the activity in their platform account, or in one or more of their connected accounts. In the Dashboard, the [report setting](https://docs.stripe.com/reports/options) controls which account’s data the report displays. By default, the API returns report data for your platform account activity. To view data for your connected accounts, use the Connect-specific report types listed below.\n\nThe following tables define the required and optional parameters to run the report, as well as the schema of the CSV output.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\\_tax\n\nTax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized balance change from activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\\_tax\n\nTax on Stripe fees. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account balance change from activity summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance_change_from_activity.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays. Dates in UTC.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\npayout\\_id\n\nThe Stripe object to which this transaction is related.\n\neffective\\_at\\_utc\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in UTC.\n\neffective\\_at\n\nFor [automatic payouts](https://stripe.com/docs/payouts#payout-schedule), this is the date we expect funds to arrive in your bank account. For [manual payouts](https://stripe.com/docs/payouts#manual-payouts), this is the date the payout was initiated. In both cases, it’s the date the paid-out funds are deducted from your Stripe balance. All dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\npayout\\_expected\\_arrival\\_date\n\nDate the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays.\n\npayout\\_status\n\nCurrent status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.\n\npayout\\_reversed\\_at\\_utc\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in UTC.\n\npayout\\_reversed\\_at\n\nTypically this field will be empty. However, if the payout’s status is `canceled` or `failed`, this field will reflect the time at which it entered that status. Times in the requested timezone, or UTC if not provided.\n\npayout\\_type\n\nCan be `bank_account` or `card`.\n\npayout\\_description\n\nAn arbitrary string attached to the payout. Often useful for displaying to users.\n\npayout\\_destination\\_id\n\nID of the bank account or card the payout was sent to.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account payouts summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payouts.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account balance summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_balance.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\ncategory\n\nOne of `starting_balance`, `ending_balance`, `activity` or `payouts`.\n\ndescription\n\nOne of `Starting balance (YYYY-MM-DD)` - the balance at the start of the period, `Activity` - the net amount of all transactions that affected your balance except for payouts, `Total payouts` - the amount of payouts to your bank account, or `Ending balance (YYYY-MM-DD)` - the balance left over at the end of the period after subtracting payouts from the `Starting balance` and `Activity`.\n\nnet\\_amount\n\nNet amount for the transactions associated with `category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `net_amount` is defined.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account ending balance reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\n### Connected account itemized single payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account single payout reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.by_id.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.1`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.2`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.3`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\n### Connected account date-ranged payouts reconciliation summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.summary.1`\n\nColumn name\n\nDefault\n\nDescription\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ncount\n\nThe number of transactions associated with the `reporting_category`.\n\ngross\n\nSum of the gross amounts of the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nSum of the fees paid for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nSum of the net amounts for the transactions associated with the `reporting_category`. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\n### Connected account itemized ending balance reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_ending_balance_reconciliation.itemized.4`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected account itemized date-ranged payout reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connected_account_payout_reconciliation.itemized.5`\n\nColumn name\n\nDefault\n\nDescription\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\n\nUnique identifier for the Stripe account associated with this line.\n\nsource\\_transaction\\_id\n\nThe source transaction id in case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\n### Connected accounts with negative balances disputes and refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `connect.negative_balance_refunds_disputes_overview.1`\n\nColumn name\n\nDefault\n\nDescription\n\naccount\\_id\n\nThe ID of the connected account.\n\nbusiness\\_name\n\nThe business name of the connected account.\n\ncountry\n\nTwo-letter ISO code representing the account’s country.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which the balance, refunded amount, and disputed amount are defined.\n\nbalance\n\nThe balance of the connected account, including both available and pending funds.\n\npending\\_debits\n\nThe sum of [debits](https://stripe.com/docs/connect/account-balances#accounting-for-negative-balances) that are currently pending or in transit on the connected account.\n\nbalance\\_excluding\\_pending\\_debits\n\nThe balance, excluding [pending debits](https://stripe.com/docs/connect/account-balances#accounting-for-negative-balances).\n\nbalance\\_24hr\\_net\\_change\n\nThe 24 hour net change in balance for the connected account.\n\nrefunded\\_amount\\_7d\n\nThe total amount refunded in the past 7 days related to the connected account.\n\nrefunded\\_amount\\_7d\\_prev\n\nThe total amount refunded in the past 7 days prior to the most recent 7 days related to the connected account.\n\nrefund\\_pct\\_change\n\nThe percent change in refunds in the past 7 days compared to the preceding period.\n\ndisputed\\_amount\\_7d\n\nThe total amount disputed in the past 7 days related to the connected account.\n\ndisputed\\_amount\\_7d\\_prev\n\nThe total amount disputed in the past 7 days prior to the most recent 7 days related to the connected account.\n\ndispute\\_pct\\_change\n\nThe percent change in disputes in the past 7 days compared to the preceding period.\n\nhas\\_24hr\\_negative\\_balance\\_change\n\nWhether the account has had their balance go negative in the past 24 hours.\n\nhas\\_high\\_disputes\n\nWhether the account has been tagged as having high disputes.\n\nhas\\_high\\_refunds\n\nWhether the account has been tagged as having high refunds.",
    "title": "Connect report type | Stripe Documentation",
    "description": "Retrieve financial reports for your connected accounts using the API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/deposit-automation",
    "markdown": "# Deposit automation | Stripe DocumentationThe Stripe Docs logo\n\n## Use the connector to automate the bank reconciliation process.\n\nThe Stripe Connector for NetSuite automates the bank reconciliation process by creating bank deposits in NetSuite for all of your [Stripe payouts](https://support.stripe.com/topics/payouts). The connector also automates fee calculation, the refund life cycle, the dispute life cycle, and handling of multiple currencies and subsidiaries. This means you only need to match the bank deposit record to the Stripe deposits on your bank statement, reducing the amount of manual work required each month. Every automated payment workflow that the connector supports includes deposit automation.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you use the connector, the automated bank reconciliation process occurs daily as follows:\n\n1.  The connector creates payments and refunds for each Stripe transaction, and posts these transactions in the Undeposited Funds account in NetSuite.\n2.  Stripe notifies the connector that a bank transfer (Stripe payout) has successfully arrived at your bank.\n3.  The connector creates a bank deposit record in NetSuite that contains all of the payments, refunds, and disputes from that day’s bank deposit.\n4.  The connector calculates any fees for processing, currency conversion, disputes, and refunds, and includes these as separate line items that post to your specified expense accounts.\n5.  The connector ensures that the deposit total and deposit date match your bank statement.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Billing and Invoicing automation](https://docs.stripe.com/connectors/netsuite/invoice-automation)\n*   [Invoice payment page](https://docs.stripe.com/connectors/netsuite/invoice-payment-page)\n*   [Customer payment page](https://docs.stripe.com/connectors/netsuite/customer-payment-page)",
    "title": "Deposit automation | Stripe Documentation",
    "description": "Use the connector to automate the bank reconciliation process.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/invoice-payment-page",
    "markdown": "# NetSuite invoice payment page | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to use a Stripe payment flow to pay NetSuite invoices.\n\nThe Stripe Connector for NetSuite creates a payment page for each of your NetSuite invoices. Customers can pay invoices using a Stripe payment flow, and pay with any of the [payment methods](https://dashboard.stripe.com/test/settings/payment_methods) that you enable. Every accepted payment includes automated payment processing, cash application, deposit automation, and fee calculation.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Save payment methods for future use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the payment page to save payment methods for future use. For example, a connector add-on (such as Auto-Pay) might use the saved payment method to charge a customer for future invoices. Stripe saves the payment method to a new or existing [Customer](https://docs.stripe.com/api/customers) object.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, if you want to save a customer’s payment method for future use, you need their agreement to be billed outside of the connector’s payment flow. Getting that agreement up front allows you to save the payment details, and to charge the customer for future invoices if needed.\n\nIf you plan to charge the customer while they’re offline, make sure that your terms also cover the following, at minimum:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n## Customize the payment page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the look and feel of the payment page to match the design of your site. Modify the payment page color and design on the [Branding settings](https://dashboard.stripe.com/settings/branding) page in the Stripe Dashboard. Modify your name and statement descriptor on the [Public details](https://dashboard.stripe.com/settings/public) page.\n\n## Add the payment page to your communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can integrate the payment page into your customer communications in NetSuite. For example, you might choose to map the payment page’s unique link to a **Pay Now** button in your NetSuite email templates, invoice PDF templates, or manual outreach.\n\n## Send email receipts for payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have two options for sending email receipts to your customers:\n\n*   Use Stripe to automatically send email receipts. The connector provides the invoice ID and NetSuite customer email. To use this option, enable **Successful payments** on the [Customer emails settings](https://dashboard.stripe.com/settings/emails) page in the Stripe Dashboard. You can also [customize your receipts](https://docs.stripe.com/receipts?payment-ui=payment-links#customizing-receipts).\n    \n*   Use NetSuite to send email receipts for payments. You must disable email receipts in the Stripe Dashboard and then set up a workflow to send customized email receipts from NetSuite.\n    \n\n## Support multiple currencies and payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept payments in the [supported presentment currencies](https://docs.stripe.com/currencies#presentment-currencies) in your region. The payment page displays the currency that’s specified on the NetSuite invoice. Stripe then creates a payment based on that currency.\n\nYou can enable the payment methods you want to accept on the [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. Stripe supports many categories of [payment methods](https://docs.stripe.com/payments/payment-methods/overview) based on your region and business needs.\n\n## Automate bank reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment page includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), which automates the bank reconciliation process for all payments, refunds, and disputes from a Stripe payout to a NetSuite bank deposit.",
    "title": "NetSuite invoice payment page | Stripe Documentation",
    "description": "Allow customers to use a Stripe payment flow to pay NetSuite invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/customer-payment-page",
    "markdown": "# NetSuite customer payment page | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to make payments toward their NetSuite balance using Stripe.\n\nUse the customer payment page to collect payments that you can then apply to multiple invoices as partial payments, or to support other payment applications beyond single invoices. The Stripe Connector for NetSuite automatically sets the amount due on your NetSuite customer payment page to the NetSuite customer balance total. But the connector allows customers to modify the amount they pay to any amount, up to the outstanding balance amount. Every accepted payment includes automated payment processing, deposit automation, and fee calculation.\n\nYou can enable the [payment methods](https://dashboard.stripe.com/test/settings/payment_methods) available to your customers in your Stripe account.\n\nA customer payment gets created and associated with the NetSuite customer. You can also designate how you want to apply payments, based on your business needs. For example, you can automate the payment application to specific invoices using native NetSuite settings, a custom workflow, or a custom SuiteScript.\n\n## Save payment methods for future use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the payment page to save a payment method for future use if needed. For example, a connector add-on (such as Auto-Pay) might use the saved payment method to charge a customer for future invoices. Stripe saves the payment method to a new or existing [Customer](https://docs.stripe.com/api/customers) object.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, if you want to save a payment method for future use, you need their agreement to be billed outside of the connector’s payment flow. Getting that agreement up front allows you to save their payment details, and potentially charge them for future invoices if needed.\n\nIf you plan to charge the customer while they’re offline, make sure that your terms also cover the following, at minimum:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n## Customize the payment page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the look and feel of the payment page to match the design of your site. Modify the payment page color and design on the [Branding settings](https://dashboard.stripe.com/settings/branding) page in the Stripe Dashboard. Modify your name and statement descriptor on the [Public details](https://dashboard.stripe.com/settings/public) page.\n\n## Add the payment page to your communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can integrate the payment page into your customer communications in NetSuite. For example, you might want to map the payment page’s unique link to a **Pay Now** button in your NetSuite email templates, invoice PDF templates, or manual outreach.\n\n## Send email receipts for payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have two options for sending email receipts to your customers:\n\n*   Use Stripe to automatically send email receipts. The connector provides the invoice ID and NetSuite customer email. To use this option, enable **Successful payments** on the [Customer emails settings](https://dashboard.stripe.com/settings/emails) page in the Stripe Dashboard. You can also [customize your receipts](https://docs.stripe.com/receipts?payment-ui=payment-links#customizing-receipts).\n    \n*   Use NetSuite to send email receipts for payments. You must disable email receipts in the Stripe Dashboard and then set up a workflow to send customized email receipts from NetSuite.\n    \n\n## Support multiple currencies and payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept payments in the [supported presentment currencies](https://docs.stripe.com/currencies#presentment-currencies) in your region. The payment page displays the currency that’s specified on the NetSuite invoice. Stripe then creates a payment based on that currency.\n\nYou can enable the payment methods you want to accept on the [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. Stripe supports many categories of [payment methods](https://docs.stripe.com/payments/payment-methods/overview) based on your region and business needs.\n\n## Automate bank reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment page includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), which automates the bank reconciliation process for all payments, refunds, and disputes from a Stripe payout to a NetSuite bank deposit.",
    "title": "NetSuite customer payment page | Stripe Documentation",
    "description": "Allow customers to make payments toward their NetSuite balance using Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/error-resolution",
    "markdown": "# Error resolution | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to handle errors with the Stripe Connector for NetSuite.\n\nIf you encounter any issues when syncing records from Stripe to NetSuite, you can use the list below to identify and resolve the errors. You might need to modify NetSuite, Stripe, or the connector and then manually sync the record.\n\nYou can view all errors in the connector app’s sync records window.\n\n## Data errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below contains errors you might encounter when syncing records to NetSuite.\n\n| Error | Source | Description | Resolution |\n| --- | --- | --- | --- |\n| _NetSuite System Error: Unable to find a matching line for sub-list apply with key: \\[doc,line\\] and value: \\[12345,null\\]._ | NetSuite | The connector can’t create a record as a payment (sub-list) entry on an existing NetSuite record. For example, the connector can’t create and apply a payment to an existing invoice that’s already paid in full. This error can also occur if the credit memo amount is less than the refund amount, which might happen if tax or another amount modifies the automation setup in NetSuite. | Inspect the NetSuite record in the error to see why the payment entry wasn’t successful. If the reason is still unclear, you can manually create the payment entry to help identify the root cause. |\n| _Please enter value(s) for: \\[Field Name\\]._ | NetSuite | The connector can’t create or update a NetSuite record due to a missing required field on that record. For example, if the connector tries to create an invoice where the `Department` field is required, NetSuite won’t allow the connector to complete the action until there’s a value for `Department` in the create invoice request. | Add a default value for the field. To do so, navigate to the **App settings** > **Field mapping** > **Field defaults** page in the connector. The connector uses the default value when creating records of that type. Field defaults use the JSON format.<br><br>For example, to add a default value of 2 for `Department` on your invoices, you add the following:<br><br>`invoice: {    \"department_id\": 2 }` |\n| _You have entered an Invalid Field Value \\[value\\] for the following field: \\[field\\]._ | NetSuite | The connector can’t create or update a NetSuite record due to one or more invalid field values. This might happen if a field default uses a value that was deleted or made unavailable for any reason.<br><br>For example, you might have `Class` as a required field for deposits. During onboarding, you add a field default of Corporate with an internal ID of 5 to satisfy the requirement. After some time, the value for Corporate (ID: 5) is deleted. When the connector attempts to create another bank deposit, it fails with the following error message: `You have entered an Invalid Field Value 'Corporate' for the following field: Class` | Modify the default value to use a valid field ID. To do so, navigate to the **App settings** > **Field mappings** > **Field defaults** page in the connector. |\n| _Invalid record referenced in metadata key `netsuite_metadata_id` (012345)._ | Connector | The connector can’t sync the record because of a deleted NetSuite record that you previously synced or linked. For example, if you link a Stripe refund to a credit memo and then delete the credit memo, you must update the Stripe refund’s metadata key (`netsuite_credit_memo_id`) to point to the correct NetSuite credit memo internal ID. | Update the refund metadata key `netsuite_credit_memo_id` to point to the new credit memo internal ID. |\n| _Charge amount 100.0 is different than the amount due on the corresponding invoice. Transaction ID:INV12345 (ID 1234567) amount due: 99.0._ | Connector | The invoice payment exceeds the amount due on the NetSuite invoice. This might happen if the connector incorrectly syncs the Stripe invoice to NetSuite and you haven’t yet set up tax handling. This can also occur if you modify the total on the NetSuite invoice during the period of time between when you sent the invoice and when the customer submitted payment. | If your connector account isn’t set up to handle taxes, contact your implementation partner for setup. If you manually modified a NetSuite invoice created by the connector, you must update the invoice to use the original amount. |\n\n## Duplicate payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and NetSuite handle duplicate payments differently. While Stripe allows overpayment of an invoice, NetSuite returns an error if a customer attempts to make a payment on a fully paid invoice. By default, if a duplicate payment occurs in Stripe, the connector won’t sync the payment because NetSuite doesn’t allow a second payment.\n\nIf a duplicate payment causes an error when the connector attempts to reconcile the payout during [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation), you can fix the issue by manually removing the first payment from the invoice to allow the second payment.\n\nYou can also allow the connector to handle duplicate payments for you. If you have a NetSuite invoice that’s fully paid, the connector brings over duplicate payments as unapplied payments in NetSuite. The unapplied payment includes the following memo: `Stripe Payment Error: could not apply to invoice XYZ.` You can then use these unapplied payments on another invoice, or refund the payments manually in Stripe. To search for duplicate payments in NetSuite, create a saved search using the memo as your criteria.\n\nYou can enable the connector to handle duplicate payments in the following ways:\n\n*   Allow all duplicate payments in the connector by default. To do so, go to your connector settings and enable **Allow duplicate invoice payments** in your Stripe app settings. Contact your implementation partner to understand all accounting and technical implementations before they enable this feature for you.\n    \n*   Using the Stripe API, add the `netsuite_allow_duplicate: true` field in the metadata of a duplicate Stripe charge.",
    "title": "Error resolution | Stripe Documentation",
    "description": "Learn how to handle errors with the Stripe Connector for NetSuite.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment-charges",
    "markdown": "# Accept a payment using Stripe Elements and the Charges API\n\nUse Stripe Elements, our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data. The card details are then converted to a representative [Token](https://docs.stripe.com/api#tokens) that you can safely send to your servers. Your server can use that token to create a charge.\n\n[](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-form)\n\nTo securely collect card details from your customers, Stripe Elements creates UI components for you that are hosted by Stripe. They are then placed into your payment form, rather than you creating them directly.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo have Elements available in your webpage, add this script tag in the `head` of your HTML page:\n\nThat script should always be loaded directly from **https://js.stripe.com**.\n\nCreate an instance of Elements with the following JavaScript on your payment page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\nOnce Elements is loaded, you can create an empty DOM container with a unique ID within your payment form wherever you want Elements to add its input field. We recommend placing that container within a `<label>` or next to a `<label>` with a `for` attribute that matches the unique `id` of the Element container. By doing so, the Element automatically gains focus when the customer clicks on the corresponding label.\n\nFor example:\n\n`<form action=\"/charge\" method=\"post\" id=\"payment-form\">   <div class=\"form-row\">     <label for=\"card-element\">       Credit or debit card     </label>     <div id=\"card-element\">       <!-- A Stripe Element will be inserted here. -->     </div>      <!-- Used to display Element errors. -->     <div id=\"card-errors\" role=\"alert\"></div>   </div>    <button>Submit Payment</button> </form>`\n\nWhen the form above has loaded, [create an instance](https://docs.stripe.com/js#elements-create) of a `card` Element and mount it to the Element container created above:\n\n``// Custom styling can be passed to options when creating an Element. const style = {   base: {     // Add your base input styles here. For example:     fontSize: '16px',     color: '#32325d',   }, };  // Create an instance of the card Element. const card = elements.create('card', {style});  // Add an instance of the card Element into the `card-element` <div>. card.mount('#card-element');``\n\nThe `card` Element simplifies the form and minimizes the number of required fields by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\nRefer to our [Stripe.js reference](https://docs.stripe.com/js#elements_create) documentation for a full list of supported Element types.\n\n[](#web-create-token)\n\nAdd an event listener for when your customer submits their card information and use `stripe.createToken(card)` to tokenize that information:\n\n`// Create a token or display an error when the form is submitted. const form = document.getElementById('payment-form'); form.addEventListener('submit', async (event) => {   event.preventDefault();    const {token, error} = await stripe.createToken(card);    if (error) {     // Inform the customer that there was an error.     const errorElement = document.getElementById('card-errors');     errorElement.textContent = error.message;   } else {     // Send the token to your server.     stripeTokenHandler(token);   } });`\n\n[createToken](https://docs.stripe.com/js/tokens/create_token?type=cardElement) also accepts an optional second parameter containing additional card information collected from the customer, which is not used in this example. The function returns a `Promise` which resolves with a `result` object. This object has either:\n\n*   `result.token`: a [Token](https://docs.stripe.com/api#tokens) was created successfully.\n*   `result.error`: there was an error. This includes client-side validation errors. Refer to the [API reference](https://docs.stripe.com/api#errors) for all possible errors.\n\nIf the object contains a `result.token`, send it to your server. Otherwise, show the customer an error.\n\n[](#web-submit-payment)\n\nSend the token to your server along with any additional information that has been collected:\n\n`const stripeTokenHandler = (token) => {   // Insert the token ID into the form so it gets submitted to the server   const form = document.getElementById('payment-form');   const hiddenInput = document.createElement('input');   hiddenInput.setAttribute('type', 'hidden');   hiddenInput.setAttribute('name', 'stripeToken');   hiddenInput.setAttribute('value', token.id);   form.appendChild(hiddenInput);    // Submit the form   form.submit(); }`\n\n[](#web-create-charge)\n\nAfter the client posts the token to your server, you can use it to create a charge. On your server, grab the Stripe token in the POST parameters submitted by your form. From there, it’s one API call to charge the card:\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\"`\n\nThe response from creating a charge will either be a [charge](https://docs.stripe.com/api/charges/object) or an [error](https://docs.stripe.com/api/errors) with an [error code](https://docs.stripe.com/error-codes). If the response succeeds, fulfill the customer’s order and show them a success page. Otherwise, show them an error page.\n\n* * *\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you can reliably enter a test card in your HTML form, submit it to the server, and see that your server created the charge, then your integration is finished.\n\nCongratulations! You completed a basic payments integration with the Charges API. This API doesn’t support scaling businesses or customers outside of the US and Canada. For more robust and global payments, learn to accept a payment with the [Payment Intents API](https://docs.stripe.com/payments/accept-a-payment).",
    "title": "Accept a payment using Stripe Elements and the Charges API | Stripe Documentation",
    "description": "Accept online payments from US and Canadian customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/charges-api/connect",
    "markdown": "# Stripe Connect and the Charges API\n\n#### Legacy API\n\nLearn how [Connect](https://docs.stripe.com/connect \"Connect\") lets you make charges and issue transfers for [connected accounts](https://docs.stripe.com/connect/accounts). How you configure these options determines your Stripe fees.\n\nConnect supports [three approaches to creating payments for a connected account](https://docs.stripe.com/connect/charges). For more information about the different types of Connect charges, see [the documentation on choosing an approach](https://docs.stripe.com/connect/charges#types). Stripe fees are determined by how you configure these options.\n\nThis page explains only how to make calls to the Charges API for connected accounts. Check the linked pages for more information about calls to other APIs for related operations.\n\n## Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a direct charge on the connected account, create a Charge object and add the `Stripe-Account` header with a value of the connected account ID:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa`\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more details.\n\n### Collect application fees on direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Connect, your platform can take an application fee on direct charges. To assess an application fee on a charge, pass an optional `application_fee_amount` value as a positive integer:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d application_fee_amount=123`\n\nSee [Direct charges](https://docs.stripe.com/connect/direct-charges) for information on transfer availability, refunds, and so on.\n\n## Destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a destination charge, pass the connected account’s ID in the `transfer_data[destination]` attribute:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more details.\n\n### Collect fees on destination charges with `application_fee_amount` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating destination charges with an `application_fee_amount`, the full charge amount is immediately transferred from the platform to the `transfer_data[destination]` account after the charge is captured. The `application_fee_amount` (capped at the full amount of the charge) is then transferred back to the platform.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d application_fee_amount=123 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nTo provide a better reporting experience, an application fee object is created after the application fee is collected. Use the `amount` property on the application fee object for reporting. You can then access these objects with the [Application Fees](https://docs.stripe.com/api/application_fees/list) endpoint.\n\n### Collect fees on destination charges with `transfer_data[amount]` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also take a fee by using [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/charges/object#charge_object-transfer_data-amount).\n\nThe `transfer_data[amount]` is a positive integer reflecting the amount of the charge that’s transferred to the `transfer_data[destination]`. You subtract your platform’s fees from the charge amount, then pass the result of this calculation as the `transfer_data[amount]`:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d \"transfer_data[amount]\"=877 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nSee [Destination charges](https://docs.stripe.com/connect/destination-charges) for information on transfer availability, refunds, and so on.\n\n## Separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nYou can only use separate charges and transfers if both your platform and the connected account are in the same region. For example, if your platform account is in Europe, the connected needs to be in Europe too.\n\nTo create a charge and set up the associated transfer, create a `transfer_group` and assign the charge to the `transfer_group`.\n\n`# Create a Charge: curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=10000 \\   -d \"currency\"=\"usd\" \\   -d \"source\"=\"tok_visa\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\n`# Create a Transfer to a connected account (later): curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=7000 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"{{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\n`# Create a second Transfer to another connected account (later): curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=2000 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"{{OTHER_CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"transfer_group\"=\"{ORDER10}\"`\n\nThis example uses a [test token](https://docs.stripe.com/testing#cards)—**tok\\_visa**—but you could tokenize a test card using [Stripe.js and Elements](https://docs.stripe.com/payments/elements) instead.\n\nSee [Accept a payment](https://docs.stripe.com/payments/accept-a-payment-charges) for more information.\n\n### Using on\\_behalf\\_of with separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith separate charges and transfers, by default:\n\n*   Charges are settled in the platform’s country\n*   The fee structure for the platform’s country is used\n*   The platform’s information is displayed on the customer’s credit card statement\n\nTo use the connected account’s country and to display their information instead, use the `on_behalf_of` argument.\n\n#### Caution\n\nYou can only use `on_behalf_of` with separate charges and transfers for connected accounts with the [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments) capability.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d source=tok_visa \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}    `\n\nSee [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) for information on transfer availability, refunds, and so on.",
    "title": "Stripe Connect and the Charges API | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment-deferred?type=subscription",
    "markdown": "# Collect payment details before creating an Intent\n\n[Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") is a pricing model where users make recurring payments to access a product. In this integration guide, learn how to build a custom payment flow that enables you to render the Payment Element, create a Subscription, and confirm the payment from the customer’s browser.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\nFor Subscriptions, configure your [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) and supported payment methods. To prevent mismatches and errors, your invoice settings must match your Payment Element settings.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n#### Note\n\nThe `amount` passed to the Payment Element should reflect what a customer will be charged immediately. This could either be the first installment of the subscription or `0` if the subscription has a [trial period](https://docs.stripe.com/billing/subscriptions/trials).\n\n`const options = {   mode: 'subscription',   amount: 1099,   currency: 'usd',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 USD. The price for the Premium product is 15 USD.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 USD\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\n[](#create-customer)\n\nStripe needs a [customer](https://docs.stripe.com/api/customers \"Customers\") for each subscription. In your application frontend, collect any necessary customer information and pass it to the backend.\n\nIf you need to collect address details, the Address Element enables you to collect a shipping or billing address for your customers. To learn more, see [Address Element](https://docs.stripe.com/elements/address-element).\n\n`<form id=\"signup-form\">   <label>     Email     <input id=\"email\" type=\"text\" placeholder=\"Email address\" value=\"test@example.com\" required />   </label>    <button type=\"submit\">     Register   </button> </form>`\n\n`const emailInput = document.querySelector('#email');  fetch('/create-customer', {   method: 'post',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     email: emailInput.value,   }), }).then(r => r.json());`\n\nOn the server, create the Stripe customer object.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}} \\   -d name={{CUSTOMER_NAME}} \\   -d \"shipping[address][city]\"=Brothers \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][line1]\"=\"27 Fredrick Ave\" \\  -d \"shipping[address][postal_code]\"=97712 \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[name]\"={{CUSTOMER_NAME}} \\   -d \"address[city]\"=Brothers \\  -d \"address[country]\"=US \\  -d \"address[line1]\"=\"27 Fredrick Ave\" \\  -d \"address[postal_code]\"=97712 \\  -d \"address[state]\"=CA`\n\n[](#create-intent)\n\nWhen the customer submits your payment form, use a [Subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") to facilitate the confirmation and payment process. To create a subscription, you need a [Customer](https://docs.stripe.com/api/customers \"Customers\") and a [Price](https://docs.stripe.com/api/prices \"Prices\").\n\n#### Note\n\nIf you’re using a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency](https://docs.stripe.com/api/subscriptions/create#create_subscription-currency) parameter to tell the Subscription which of the Price’s currencies to use. (If you omit the `currency` parameter, then the Subscription uses the Price’s default currency.)\n\nIncluded on a Subscription is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"). Return this value to your client for Stripe.js to use to securely complete the payment process. For subscriptions that don’t collect a payment up front (for example, subscriptions with a free trial period), use the client secret from the `pending_setup_intent`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-subscription' do   content_type 'application/json'   data = JSON.parse(request.body.read)   customer_id = cookies[:customer]   price_id = data['priceId']    subscription = Stripe::Subscription.create(     customer: customer_id,     items: [{       price: price_id,     }],     payment_behavior: 'default_incomplete',     payment_settings: {save_default_payment_method: 'on_subscription'},     expand: ['latest_invoice.payment_intent', 'pending_setup_intent']   )    if subscription.pending_setup_intent != null     { type: 'setup', clientSecret: subscription.pending_setup_intent.client_secret }.to_json   else     { type: 'payment', clientSecret: subscription.latest_invoice.payment_intent.client_secret }.to_json   end end`\n\n[](#confirm-the-subscription)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) or [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to confirm the subscription using details from the Payment Element. Indicate where Stripe should redirect the customer after confirmation by providing a `return_url` to the confirm function. With some payment methods, the customer is redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. You can also set `redirect` to `if_required` to only redirect customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the subscription   const res = await fetch('/create-subscription', {     method: \"POST\",   });   const {type, clientSecret} = await res.json();   const confirmIntent = type === \"setup\" ? stripe.confirmSetup : stripe.confirmPayment;    // Confirm the Intent using the details collected by the Payment Element   const {error} = await confirmIntent({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point is only reached if there's an immediate error when confirming the Intent.     // Show the error to your customer (for example, \"payment details incomplete\").     handleError(error);   } else {     // Your customer is redirected to your `return_url`. For some payment     // methods like iDEAL, your customer is redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n[](#manage-the-subscription)\n\nTo complete the integration, you may want to:\n\n*   listen for webhooks\n*   provision access to your service\n*   allow customers to cancel their subscriptions\n\nTo learn more, see [Build a subscription integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).",
    "title": "Collect payment details before creating an Intent | Stripe Documentation",
    "description": "Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/alabama",
    "markdown": "# Collect tax in Alabama | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Alabama.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Alabama. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 250,000 USD sales threshold must register for an Alabama sales tax permit, collect sales tax on sales that ship to Alabama, and remit that sales tax to the state.\n\n**Threshold**: 250,000 USD\n\n**Period**: Previous year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2016\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Alabama at the [tax authority](https://www.revenue.alabama.gov/sales-use/sales-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRemote sellers with no physical presence in Alabama can register for the [Simplified Sellers Use Tax](https://www.revenue.alabama.gov/sales-use/simplified-sellers-use-tax-ssut/). The program allows you to collect a single tax rate on all sales into the state, instead of collecting local taxes. You can collect this tax after enrolling on the [My Alabama Taxes website](https://myalabamataxes.alabama.gov/_/).\n\nAfter you’ve registered to collect tax in Alabama, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-al) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions there. You’ll be able to indicate which tax program you’re registered for in Alabama as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\nIf you selected the Simplified Sellers Use Tax program in Stripe then we will calculate and collect the simplified rate. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Alabama filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Alabama. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Alabama | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Alabama.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/invoice-automation",
    "markdown": "# Stripe Billing and Invoicing automation\n\n## Use the connector to sync your Stripe invoices into NetSuite.\n\nThe Stripe Connector for NetSuite automatically syncs the invoices that you create from Stripe Billing [subscriptions](https://docs.stripe.com/billing/subscriptions/overview) or [Stripe Invoicing](https://docs.stripe.com/invoicing/overview) into NetSuite. The sync includes details such as [credit notes](https://docs.stripe.com/invoicing/dashboard/credit-notes), [discounts](https://docs.stripe.com/billing/subscriptions/coupons), [uncollectible invoices](https://docs.stripe.com/revenue-recognition/examples#uncollectible), [taxes](https://docs.stripe.com/billing/taxes/collect-taxes), and [prorations](https://docs.stripe.com/billing/subscriptions/prorations).\n\nYou can complete your accounting workflows entirely in Stripe using the automated process, which means you don’t need to manually reconcile activity. Stripe transaction data syncs at the transaction level in NetSuite, allowing you to use advanced reporting on Stripe data in NetSuite.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you use the connector with [Stripe Billing](https://docs.stripe.com/billing) or [Stripe Invoicing](https://docs.stripe.com/invoicing/overview), the invoice automation process is as follows:\n\n1.  A customer provides their payment information through a Stripe payment flow on your website. This action creates a Stripe `Customer` object.\n2.  Stripe creates an invoice at the beginning of each billing period, which prompts the connector to create an invoice in NetSuite. The connector also creates a new customer or links to an existing NetSuite customer.\n3.  If you enabled NetSuite revenue recognition, the connector splits revenue over the correct period on the line item level.\n4.  When a customer successfully pays the Stripe invoice, the connector creates a NetSuite `Customer Payment` and applies it to the corresponding invoice in NetSuite. If payment fails, resulting in a canceled subscription, the connector can automatically close the NetSuite invoice with a credit memo, or whatever action you configure for failed payments.\n5.  The connector automatically syncs refunds and disputes from Stripe to NetSuite, and creates credit memos and customer refunds.\n6.  The connector [automatically reconciles](https://docs.stripe.com/connectors/netsuite/deposit-automation) Stripe payments against a bank deposit in NetSuite. This includes calculating and recording any processing fees or currency conversion fees.\n\n## Customer flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Invoice flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Payment flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Refund or chargeback flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Stripe Billing and Invoicing automation | Stripe Documentation",
    "description": "Use the connector to sync your Stripe invoices into NetSuite.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/arkansas",
    "markdown": "# Collect tax in Arkansas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Arkansas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Arkansas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales or transaction number must register for an Arkansas sales tax permit, collect sales tax on sales that ship to Arkansas, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Arkansas at the [tax authority](https://www.dfa.arkansas.gov/excise-tax/sales-and-use-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Arkansas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ar) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Arkansas.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Arkansas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Arkansas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Arkansas | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Arkansas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/california",
    "markdown": "# Collect tax in California | Stripe DocumentationThe Stripe Docs logo\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in California. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers in California who exceed the 500,000 USD gross sales must register for a California sales tax permit with the CDTFA, collect sales tax on sales that ship to California, and remit the sales tax to the state.\n\n**Threshold**: 500,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales of tangible personal property\n\n**Effective date**: April 26, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in California at the tax authority:\n\n*   [General information about Sales and Use tax in California](https://www.cdtfa.ca.gov/taxes-and-fees/sutprograms.htm)\n*   [How to register](https://www.cdtfa.ca.gov/services/#Register-Renewals)\n\nAfter you’ve registered to collect tax in California, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ca) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in California.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in California and your origin address is also in California, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with California filing requirements. You have the option to report on an annual, fiscal year, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to California. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in California | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in California.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/connecticut",
    "markdown": "# Collect tax in Connecticut | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Connecticut.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Connecticut. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales and transaction number must register for a Connecticut sales tax permit, collect sales tax on sales that ship to Connecticut, and remit the sales tax to the state.\n\nStripe considers that you crossed the threshold if both of the specified conditions are met (total revenue or and number of transactions).\n\n**Threshold**: 100,000 USD and 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: December 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Connecticut at the [tax authority](https://portal.ct.gov/DRS/Sales-Tax/Tax-Information). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Connecticut, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ct) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Connecticut.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Connecticut filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Connecticut. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Connecticut | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Connecticut.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/colorado",
    "markdown": "# Collect tax in Colorado | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Colorado.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Colorado. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales must register for a Colorado sales tax permit, collect sales tax on sales that ship to Colorado, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: December 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Colorado at the tax authority:\n\n*   [General information about Sales and Use tax in Colorado](https://tax.colorado.gov/sales-use-tax)\n*   [How to register](https://tax.colorado.gov/how-to-apply-for-a-colorado-sales-tax-license)\n\nAfter you’ve registered to collect tax in Colorado, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-co) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Colorado.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Colorado filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Colorado. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Colorado | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Colorado.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/custom-payment-application",
    "markdown": "# Custom payment application | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to customize the way payments are recorded and applied using the Stripe Connector for NetSuite.\n\nThe Stripe Connector for NetSuite provides a way for you to reconcile Stripe payment activity from your custom or prebuilt, third-party integration to NetSuite. Using the following tools, you can customize how the connector records and reconciles payments in NetSuite:\n\n*   [Stripe metadata](https://docs.stripe.com/connectors/netsuite/custom-payment-application#stripe-metadata)\n*   [Invoices for payments](https://docs.stripe.com/connectors/netsuite/custom-payment-application#invoices-payments)\n*   [Connector add-ons](https://docs.stripe.com/connectors/netsuite/custom-payment-application#connector-addons)\n\nYou can use Stripe metadata to make sure your Stripe activity is properly represented in NetSuite.\n\n### Relate a Stripe object to a NetSuite record![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdd metadata to Stripe objects to relate them to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing.\n\nYou can relate records in the following ways:\n\n*   Add `netsuite_invoice_id: 12345` to a Stripe charge so that the connector applies the customer payment to NetSuite invoice with internal ID `12345`.\n*   Add `netsuite_credit_memo_id: 67890` to a Stripe refund so that the connector applies the customer refund to NetSuite credit memo with internal ID `67890`.\n*   Add `netsuite_customer_id: 101010` to a Stripe charge so that the connector creates the customer payment under NetSuite customer with internal ID `101010`.\n\n### Override sync timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can choose to override the default sync timing by programmatically controlling when a record syncs to NetSuite. There are two ways to override record sync timing: add records to a denylist or add records to an allowlist.\n\n#### Add records to a denylist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add metadata to temporarily stop the connector from syncing a record to NetSuite. This is helpful if your backend integration with Stripe requires adding data to a record before syncing to NetSuite.\n\nUse a denylist to control the timing of a customer sync to NetSuite:\n\n1.  Ask your implementation partner to enable the **Denylist payments and refunds** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add `netsuite_block_integration: true` to the metadata of any Stripe object.\n3.  To allow record syncing again, replace `true` with `nil`.\n\nYou can’t permanently add a payment or payment-related record to the denylist. After two days, the connector automatically attempts to create a bank deposit for the Stripe payout. Until you remove the payment or record from the denylist, the deposit automation fails and the payment or record can’t sync to NetSuite.\n\n#### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are examples of when you might want to use a denylist:\n\n**Example 1**: You might have a customer record that your system created when a Stripe customer started the signup process and made a prepayment. Later you collect address data for that customer. The connector typically syncs the customer and payment data to NetSuite right away; however, you can delay syncing to NetSuite until you finish collecting all data for a customer.\n\n**Example 2**: Your Stripe account includes Stripe Billing and an e-commerce app. You want to associate the payments from the e-commerce app with your NetSuite orders, and to automatically sync the subscription invoices and payments. To do so, add metadata to the payments from the e-commerce system. The connector syncs the Stripe Billing invoices and payments to NetSuite. The e-commerce payments without a Netsuite order or invoice ID won’t sync until the associated order or invoice is imported into your NetSuite account. After the order detail is added, you can remove the denylist metadata and add the NetSuite invoice ID to associate the records.\n\n#### Add records to an allowlist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add metadata to stop the connector from syncing a record to NetSuite until it is granted permission. This is helpful if you have an e-commerce system that uses Stripe to process payments before the invoice is created in NetSuite.\n\nUse an allowlist to control the syncing of a record to NetSuite:\n\n1.  Ask your implementation partner to enable the **Allowlist payments** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add `netsuite_allow_integration: true` to the metadata of a record.\n\nDon’t use an allowlist if either of the following applies:\n\n*   You use Stripe Billing. In most cases, Stripe automatically generates invoices, which can create challenges with making sure invoices are added to the allowlist. Instead, you can use a denylist for payments that aren’t related to Stripe Billing.\n*   You don’t have a fully comprehensive custom system that accounts for every payment in your Stripe account. If a payment in your Stripe account isn’t synced to NetSuite, the deposit automation fails until the payment is synced.\n\n#### Override NetSuite record creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOverride any part of the connector’s record syncing process by adding metadata to Stripe objects to relate them to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing. This prevents the connector from creating that record in NetSuite.\n\nFor example, you have an existing system that creates customers that you want to use alongside the connector. You can pass the NetSuite customer’s internal ID to the Stripe customer to allow the connector to create a link between the two, rather than creating a new customer. You can also use the same process to link Stripe prices to existing NetSuite items.\n\nSee below for the list of [metadata keys](https://docs.stripe.com/connectors/netsuite/custom-payment-application#metadata-keys) to link records and override record creation.\n\n#### Warning\n\nOverriding any part of the connector’s record syncing process that affects accounts receivable might introduce accounting inaccuracies. Our system guarantees that the created records are accurate, but can’t guarantee the accuracy of records created by another system.\n\n### Connector metadata keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector uses metadata keys to link Stripe objects to existing NetSuite records. You can add this metadata at the time of syncing, before the Stripe object syncs to NetSuite, or in conjunction with controls that modify the sync timing.\n\n| Stripe record | Stripe metadata key | NetSuite record |\n| --- | --- | --- |\n| Customer | `netsuite_customer_id` | Customer |\n| Invoice | `netsuite_invoice_id` | Invoice |\n| Price | `netsuite_service_sale_item_id` | Service Sale Item<br><br>If unspecified, this is the default item type that the connector uses to create new items. |\n| Price | `netsuite_service_resale_item_id` | Service Resale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_non_inventory_sale_item_id` | Non Inventory Sale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_non_inventory_resale_item_id` | Non Inventory Resale Item<br><br>You can use this item type in place of a Service Sale Item. |\n| Price | `netsuite_discount_item_id` | Discount Item<br><br>Only applicable if the line item amount is negative. |\n| Invoice Line Item | `netsuite_discount_item_id` | Discount Item<br><br>Only applicable if the line item amount is negative. |\n| Coupon | `netsuite_discount_item_id` | Discount Item |\n| Charge | `netsuite_customer_payment_id` | Customer Payment |\n| Refund | `netsuite_customer_refund_id` | Customer Refund |\n| Refund | `netsuite_credit_memo_id` | Credit Memo<br><br>Only applicable if the refund’s charge is linked to a Stripe-created invoice. |\n| Dispute (chargeback) | `netsuite_customer_refund_id` | Customer Refund |\n| Payout | `netsuite_deposit_id` | Deposit |\n\n## Invoices for payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your system uses Stripe to process payments and it creates a payment in Stripe that isn’t associated with an invoice, you can choose to allow the connector to create an invoice using information from the charge. You must enable this feature to use it. The connector then applies a customer payment to represent revenue and cash for that transaction.\n\nThis workflow doesn’t support discounts, multiple line items, and other complex integrations.\n\n### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The connector creates a NetSuite invoice for each charge in Stripe and includes the charge description in a memo on the invoice. You can choose to add data from the Stripe metadata fields to the invoice by using field mappings.\n2.  The invoice uses a single line item to represent the revenue earned by the entire Stripe charge. By default, all payments on the Stripe account use the same NetSuite item. You can customize this.\n3.  The connector creates a payment and applies it to the invoice. The payment is automatically reconciled to a bank deposit and fees are recorded.\n4.  Refunds and disputes automatically represent as a credit memo and refund.\n\n### Customize the NetSuite line item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll invoices generated from charges use the same NetSuite item (Stripe Generic Line Item), by default. If charges are used to purchase multiple types of products in your app, you need to record the revenue for the different products against unique NetSuite items. This allows you to have detailed reports in NetSuite based on revenue by item, quantity of items sold, and more.\n\nYou can’t have multiple line items on an invoice from charges. The connector can’t distribute the revenue across separate items from the metadata information on the Stripe charge. If you need to use multiple line items on your NetSuite invoice, you can use a Stripe invoice to sync line-item details.\n\nYou can use metadata or a standard field on the Stripe charge to select a NetSuite item. The connector uses the Stripe metadata or field to search for a field on the NetSuite item. If the connector doesn’t find a match, it uses the Stripe Generic Line Item. Matches aren’t case sensitive.\n\nFor example, you create a Stripe charge and add the `product_name` metadata that includes the name of a NetSuite item. The connector searches for an item in NetSuite that matches the `product_name` in Stripe. If the connector finds a match, it uses that item on the invoice created for that charge.\n\nUse invoices for payments flow:\n\n1.  Ask your implementation partner to enable the **Create invoices for payments** feature in your Stripe app settings. Consult with your implementation partner to understand all accounting and technical implications.\n2.  Add the following for the connector to use for matching:\n    *   Add a NetSuite field on the item record\n    *   Add the corresponding Stripe field on the `Charge` object\n\nFor example, you can add a metadata key on a Stripe charge and `itemid` or `displayName` on the NetSuite item.\n\n## Connector add-ons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector provides NetSuite add-ons (bundles) to support common use cases and allow seamless operation with core workflows. You can work with an official implementation partner to customize your integration with these add-ons, which live exclusively in NetSuite.\n\nYou can customize the add-ons by developing new workflows on top of them, or modifying existing workflows to support your business needs. For example, you might want to align the payment and reconciliation processes with your unique NetSuite setup, while still using core connector automations.\n\n### Autopay add-on![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Autopay add-on to automatically bill your customer’s saved payment method and pay open invoices in NetSuite. You can modify the billing details, such as cadence and parameters, to make sure the correct invoices are billed.",
    "title": "Custom payment application | Stripe Documentation",
    "description": "Learn how to customize the way payments are recorded and applied using the Stripe Connector for NetSuite.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/delaware",
    "markdown": "# Collect tax from Delaware | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Delaware.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDelaware doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for Delaware to Stripe and collect taxes from your customers based in Delaware.\n\nHowever Delaware does impose other taxes on businesses, including a gross reciepts tax. Learn more about the taxes that apply in Delaware at the [tax authority](https://revenue.delaware.gov/services-for-the-business-taxpayer/).\n\nIf you’re a business based in Delaware you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-de) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your origin address is in the US and in the same state as your customer’s state, Stripe generally calculates sales tax based on your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax from Delaware | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Delaware.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/district-of-columbia",
    "markdown": "# Collect tax in the District of Columbia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the District of Columbia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in the District of Columbia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers in the District of Columbia who exceed the 100,000 USD gross sales or the 200 transactions number must register for a DC sales tax permit, collect sales tax on orders that ship to DC, and remit the sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in the District of Columbia at the [tax authority](https://otr.cfo.dc.gov/page/new-business-registration). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in the District of Columbia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-dc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in the District of Columbia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with District of Columbia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to the District of Columbia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in the District of Columbia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the District of Columbia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/idaho",
    "markdown": "# Collect tax in Idaho | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Idaho.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Idaho. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for an Idaho sales tax permit, collect sales tax on sales that ship into Idaho, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: June 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Idaho at the [tax authority](https://tax.idaho.gov/taxes/sales-use/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Idaho, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-id) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Idaho.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Idaho filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Idaho. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Idaho | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Idaho.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/georgia",
    "markdown": "# Collect tax in Georgia (US)\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia (US).\n\nStripe support calculation and collection of sales tax in the US state of Georgia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Georgia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Georgia sales tax permit, collect sales tax on sales that ship into Georgia, and remit that sales tax to the state.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales of tangible personal property delivered electronically or physically (taxable or not)\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Georgia at the [tax authority](https://dor.georgia.gov/taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Georgia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ga) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Georgia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Georgia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Georgia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Georgia (US) | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia (US).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/kansas",
    "markdown": "# Collect tax in Kansas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kansas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kansas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nE-commerce sellers, or marketplaces, who meet their new criteria register for a Kansas sales tax permit and begin collecting sales tax when making sales to buyers in the state of Kansas.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2021\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Kansas at the [tax authority](https://www.ksrevenue.gov/bustaxtypessales.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Kansas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ks) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kansas.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Kansas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Kansas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Kansas | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kansas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/indiana",
    "markdown": "# Collect tax in Indiana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Indiana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Indiana. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed either the gross sales or transaction number threshold must register for an Indiana sales tax permit, collect sales tax on sales that ship to Indiana, and remit that sales tax to the state.\n\nBefore January 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in Indiana. That requirement was removed on March 13, 2024, retroactively.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Indiana at the tax authority:\n\n*   [General information about Sales tax in Indiana](https://www.in.gov/dor/business-tax/sales-tax/)\n*   [How to register](https://www.in.gov/dor/business-tax/)\n\nAfter you’ve registered to collect tax in Indiana, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-in) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Indiana.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Indiana filing requirements. You have the option to report on an annual, fiscal year, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Indiana. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Indiana | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Indiana.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/iowa",
    "markdown": "# Collect tax in Iowa | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Iowa.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Iowa. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales thresholds must register for an Iowa sales tax permit, collect sales tax on sales that ship into Iowa, and remit that sales tax to the state. For those under the threshold, it’s voluntary, but you can register for an Iowa Retailer’s Use Tax (RUT) permit (also voluntary). If you’ve already registered for the RUT and go over the economic threshold, you’ll need to cancel your RUT and register for an Iowa sales tax permit.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Iowa at the [tax authority](https://tax.iowa.gov/iowa-sales-and-use-tax-guide). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Iowa, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ia) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Iowa.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Iowa filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Iowa. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Iowa | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Iowa.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/louisiana",
    "markdown": "# Collect tax in Louisiana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Louisiana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Louisiana. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales threshold must register for a Louisiana sales tax permit, collect sales tax on sales that ship to Louisiana addresses, and remit that sales tax to the state.\n\nPrior to August 1, 2023, remote sellers also had economic nexus if they had 200 or more transactions in Louisiana. That requirement has been removed.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2020\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRegister for sales tax in Louisiana at the tax authority:\n\n*   [General information about Sales and Use tax in Louisiana](https://revenue.louisiana.gov/SalesTax/GeneralSalesAndUseTax)\n*   [How to register](https://revenue.louisiana.gov/EServices/LouisianaFileOnlineLinks)\n\nAfter you’ve registered to collect tax in Louisiana, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-la) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Louisiana.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Louisiana filing requirements. You have the option to report on a quarterly or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Louisiana. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Louisiana | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Louisiana.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/maine",
    "markdown": "# Collect tax in Maine | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Maine.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Maine. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales threshold must register for a Maine sales tax permit, collect sales tax on sales shipped to Maine, and remit that sales tax to the state.\n\nMaine dropped its transaction threshold, effective January 1, 2022.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Maine at the [tax authority](https://www.maine.gov/revenue/taxes/sales-use-service-provider-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Maine, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-me) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Maine.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Maine filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Maine. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Maine | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Maine.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/west-virginia",
    "markdown": "# Collect tax in West Virginia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in West Virginia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in West Virginia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a West Virginia sales tax permit, collect sales tax on sales that ship into West Virginia, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in West Virginia at the [tax authority](https://tax.wv.gov/Business/SalesAndUseTax/Pages/SalesAndUseTax.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in West Virginia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in West Virginia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with West Virginia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to West Virginia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in West Virginia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in West Virginia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/virginia",
    "markdown": "# Collect tax in Virginia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Virginia.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Virginia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Virginia sales tax permit, collect sales tax on sales that ship into Virginia, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Virginia at the [tax authority](https://www.tax.virginia.gov/retail-sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Virginia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-va) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Virginia.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Virginia and your origin address is also in Virginia, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Virginia filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Virginia. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Virginia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Virginia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/wyoming",
    "markdown": "# Collect tax in Wyoming | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Wyoming.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Wyoming. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Wyoming sales tax permit, collect sales tax on sales that ship into Wyoming, and remit that sales tax to the state.\n\nBefore July 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in Wyoming.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: February 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Wyoming at the [tax authority](https://revenue.wyo.gov/divisions/excise-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Wyoming, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wy) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Wyoming.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Wyoming filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Wyoming. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Wyoming | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Wyoming.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/wisconsin",
    "markdown": "# Collect tax in Wisconsin | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Wisconsin.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Wisconsin. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Wisconsin sales tax permit, collect sales tax on sales that ship into Wisconsin, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Wisconsin at the [tax authority](https://www.revenue.wi.gov/Pages/SalesAndUse/Home.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Wisconsin, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Wisconsin.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Wisconsin filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Wisconsin. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Wisconsin | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Wisconsin.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/maryland",
    "markdown": "# Collect tax in Maryland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Maryland.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Maryland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Maryland sales tax permit, collect sales tax on sales that ship into Maryland, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Maryland at the [tax authority](https://www.marylandtaxes.gov/business/sales-use/index.php). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Maryland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-md) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Maryland.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Maryland filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Maryland. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Maryland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Maryland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/massachusetts",
    "markdown": "# Collect tax in Massachusetts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Massachusetts.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Massachusetts. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales threshold must register for a Massachusetts sales tax permit, collect sales tax on sales that ship to Massachusetts, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Massachusetts at the [tax authority](https://www.mass.gov/guides/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Massachusetts, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ma) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Massachusetts.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Massachusetts filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Massachusetts. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Massachusetts | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Massachusetts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/michigan",
    "markdown": "# Collect tax in Michigan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Michigan.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Michigan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 100,000 USD threshold and the transaction number threshold must register for a Michigan sales tax permit, collect sales tax on sales that ship to Michigan, and remit that sales tax to the state.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Michigan at the [tax authority](https://www.michigan.gov/taxes/business-taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Michigan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Michigan.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Michigan filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Michigan. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Michigan | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Michigan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/minnesota",
    "markdown": "# Collect tax in Minnesota | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Minnesota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Minnesota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed either the 100,000 USD threshold or the transaction number threshold must register for a Minnesota sales tax permit, collect sales tax on sales that ship to Minnesota, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Minnesota at the [tax authority](https://www.revenue.state.mn.us/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Minnesota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Minnesota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Minnesota filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Minnesota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Minnesota | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Minnesota.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/mississippi",
    "markdown": "# Collect tax in Mississippi | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Mississippi.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Mississippi. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the 250,000 USD threshold must register for a Mississippi sales tax permit, collect sales tax on sales that ship to Mississippi, and remit that sales tax to the state.\n\n**Threshold**: 250,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: December 1, 2017\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Mississippi at the [tax authority](https://www.dor.ms.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Mississippi, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ms) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Mississippi.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Mississippi and your origin address is also in Mississippi, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Mississippi filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Mississippi. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Mississippi | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Mississippi.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/missouri",
    "markdown": "# Collect tax in Missouri | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Missouri.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Missouri. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with at least 100,000 USD sales must register for a Missouri sales tax permit, collect sales tax on sales that ship to Missouri, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous 12 month period\n\n**Included transactions**: Gross receipts of tangible personal property\n\n**Effective date**: January 1, 2023\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Missouri at the [tax authority](https://dor.mo.gov/taxation/business/tax-types/sales-use/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Missouri, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mo) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Missouri.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Missouri and your origin address is also in Missouri, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Missouri filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Missouri. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Missouri | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Missouri.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/montana",
    "markdown": "# Collect tax from Montana | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Montana.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMontana doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for Montana to Stripe and collect taxes from your customers based in Montana.\n\nHowever Montana does impose other taxes on businesses, including corporate income tax and a local resort tax. Learn more about the taxes that apply in Montana at the [tax authority](https://mtrevenue.gov/taxes/).\n\nIf you’re a business based in Montana you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-mt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax from Montana | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Montana.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/nevada",
    "markdown": "# Collect tax in Nevada | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nevada.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nevada. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Nevada sales tax permit, collect sales tax on sales that ship into Nevada, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Nevada at the [tax authority](https://www.nvsilverflume.gov/home). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Nevada, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nevada.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Nevada filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Nevada. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Nevada | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nevada.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-hampshire",
    "markdown": "# Collect tax from New Hampshire\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from New Hampshire.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew Hampshire doesn’t have a general state or local sales tax. This means you won’t see an option to add your registration for New Hampshire to Stripe and collect taxes from your customers based in New Hampshire.\n\nHowever New Hampshire does impose other taxes on businesses, including a business profits tax. Learn more about the taxes that apply in New Hampshire at the [tax authority](https://www.revenue.nh.gov/assistance/tax-overview.htm).\n\nIf you’re a business based in New Hampshire you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax from New Hampshire | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from New Hampshire.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/nebraska",
    "markdown": "# Collect tax in Nebraska | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nebraska.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nebraska. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the sales threshold or transaction number must register for a Nebraska sales tax permit, collect sales tax on sales that ship into Nebraska, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Nebraska at the [tax authority](https://revenue.nebraska.gov/businesses/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Nebraska, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ne) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nebraska.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Nebraska filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Nebraska. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Nebraska | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nebraska.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-mexico",
    "markdown": "# Collect tax in New Mexico\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New Mexico.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Mexico. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers and marketplace facilitators must register for a New Mexico gross receipts tax permit, collect, and remit gross receipts tax to the state if they meet the sales thresholds.\n\n**Threshold**: 100,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Taxable sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New Mexico at the [tax authority](https://www.tax.newmexico.gov/businesses/gross-receipts-overview/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New Mexico, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nm) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Mexico.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New Mexico filing requirements. You have the option to report on a semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New Mexico. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in New Mexico | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Mexico.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-jersey",
    "markdown": "# Collect tax in New Jersey\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Jersey. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a New Jersey sales tax permit, collect sales tax on sales that ship into New Jersey, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New Jersey at the [tax authority](https://business.nj.gov/pages/register-for-taxes). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New Jersey, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nj) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Jersey.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New Jersey filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New Jersey. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in New Jersey | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Jersey.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/ohio",
    "markdown": "# Collect tax in Ohio | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Ohio.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Ohio. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for an Ohio sales tax permit, collect sales tax on sales that ship into Ohio, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Retail sales\n\n**Effective date**: August 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Ohio at the [tax authority](https://tax.ohio.gov/sales_and_use.aspx) (this link is accessible with the US or with a VPN). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Ohio, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-oh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Ohio.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Ohio and your origin address is also in Ohio, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Ohio filing requirements. You have the option to report on an annual, semiannual, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Ohio. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Ohio | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Ohio.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/new-york",
    "markdown": "# Collect tax in New York\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New York.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New York. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet both the sales and transaction number thresholds must register for a New York sales tax permit, collect sales tax on sales that ship into New York, and remit that sales tax to the state. The increase from the prior threshold of 300,000 USD for businesses that have no physical presence in New York is effective retroactively to June 21, 2018. The increase for marketplace providers is effective retroactively to June 1, 2019.\n\nStripe considers that you crossed the threshold if either one of the specified conditions are met (total revenue or number of transactions).\n\n**Threshold**: 500,000 USD and more than 100 transactions\n\n**Period**: Last four quarters\n\n**Included transactions**: Gross receipts from sales of tangible personal property\n\n**Effective date**: July 21, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in New York at the [tax authority](https://www.tax.ny.gov/bus/st/stidx.htm). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in New York, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ny) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New York.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with New York filing requirements. You have the option to report on an annual, quarterly, or monthly basis with each new year starting in March.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to New York. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in New York | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New York.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/north-dakota",
    "markdown": "# Collect tax in North Dakota\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in North Dakota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in North Dakota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the sales threshold must register for a North Dakota sales tax permit, collect sales tax on sales that ship into North Dakota, and remit that sales tax to the state.\n\nNorth Dakota law includes an exception for small sellers which requires sales tax collection by remote sellers only if their taxable sales into the state exceed 100,000 USD in the current or previous calendar year.\n\nPrior to July 1, 2019, North Dakota’s small seller exception also included a sales threshold of 200 or more separate transactions in the prior or current year. The transactions threshold was repealed, effective July 1, 2019. Remote sellers who only met the transactions threshold in 2018 or 2019 must continue to collect North Dakota sales tax through June 30, 2019. After June 30, 2019, those remote sellers can cancel their North Dakota sales and use tax permit and discontinue collecting North Dakota sales tax.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in North Dakota at the [tax authority](https://www.tax.nd.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in North Dakota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nd) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in North Dakota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with North Dakota filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to North Dakota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in North Dakota | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in North Dakota.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/north-carolina",
    "markdown": "# Collect tax in North Carolina\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in North Carolina.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in North Carolina. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a North Carolina sales tax permit, collect sales tax on sales that ship into North Carolina, and remit that sales tax to the state.\n\nBefore July 1, 2024, remote sellers also had economic nexus if they had 200 or more transactions in North Carolina.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in North Carolina at the [tax authority](https://www.ncdor.gov/taxes-forms/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in North Carolina, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-nc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in North Carolina.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with North Carolina filing requirements. You have the option to report on an quarterly or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to North Carolina. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in North Carolina | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in North Carolina.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/oklahoma",
    "markdown": "# Collect tax in Oklahoma | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Oklahoma.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Oklahoma. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who meet the threshold must do one of the following on or before June 1 of each calendar year:\n\n1.  Register for an Oklahoma sales tax permit and collect sales tax on Oklahoma sales\n2.  Comply with Oklahoma’s notice and reporting requirements\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: November 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Oklahoma at the [tax authority](https://oklahoma.gov/tax/businesses/sales-use-tax.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Oklahoma, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ok) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Oklahoma.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Oklahoma filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Oklahoma. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Oklahoma | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Oklahoma.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/oregon",
    "markdown": "# Collect tax from Oregon | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Oregon.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOregon doesn’t have a general state or sales tax. This means you won’t see an option to add your registration for Oregon to Stripe and collect taxes from your customers based in Oregon.\n\nHowever Oregon does impose other taxes on businesses, including corporate income tax. Learn more about the taxes that apply in Oregon at the [tax authority](https://www.oregon.gov/dor/programs/businesses/Pages/default.aspx).\n\nIf you’re a business based in Oregon you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us). You may need to register to collect tax on your sales in other states or countries.\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-or) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in locations where you have collected tax. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard and find the location you want to view your tax reports for. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax from Oregon | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Oregon.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/pennsylvania",
    "markdown": "# Collect tax in Pennsylvania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Pennsylvania.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Pennsylvania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who meet the nexus threshold must register for a Pennsylvania sales tax permit, collect sales tax on sales that ship into Pennsylvania, and remit that sales tax to the state.\n\nThose who don’t meet the economic threshold must make an election by March 1 of every year and do one of two things:\n\n*   Register for a Pennsylvania sales tax permit, collect sales tax on sales that ship into Pennsylvania, and remit that sales tax to the state.\n*   Comply with the state’s notice and reporting requirements.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Pennsylvania at the [tax authority](https://www.revenue.pa.gov/TaxTypes/SUT/Pages/default.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Pennsylvania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-pa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Pennsylvania.\n\nCustomers in the city of Philadelphia or Allegheny county owe use tax on purchases from remote sellers outside those locations. If you are a remote seller you can voluntarily collect and remit these local taxes on their behalf. You’ll be able to indicate whether you want to collect these local taxes as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Pennsylvania and your origin address is also in Pennsylvania, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\nSellers based in Philadelphia city or Allengheny county will have the local tax calculated automatically. If you are a remote seller and selected the local taxes for Philadelphia city and Allengheny county in Stripe then we will calculate and collect that additional tax. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Pennsylvania filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   You’ll only see amounts under Allegheny county and Philadelphia city sections if you chose to voluntarily collect local taxes or have an origin address in these jurisdictions.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Pennsylvania. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Pennsylvania | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Pennsylvania.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/south-dakota",
    "markdown": "# Collect tax in South Dakota\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Dakota.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Dakota. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet the sales threshold must register for a South Dakota sales tax permit, collect sales tax on sales that ship into South Dakota, and remit that sales tax to the state.\n\nPrior to July 1, 2023, remote sellers could also have economic nexus if they had 200 or more transactions in the state. South Dakota dropped its transaction threshold, effective July 1, 2023.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in South Dakota at the [tax authority](https://dor.sd.gov/businesses/taxes/sales-use-tax/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in South Dakota, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-sd) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Dakota.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with South Dakota filing requirements. You have the option to report on an annual, semiannual, quarterly, bimonthly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to South Dakota. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in South Dakota | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Dakota.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/rhode-island",
    "markdown": "# Collect tax in Rhode Island\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Rhode Island.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Rhode Island. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Rhode Island sales tax permit, collect sales tax on sales that ship into Rhode Island, and remit that sales tax to the state.\n\nIt’s worth noting that Rhode Island isn’t repealing, nor eliminating the use tax notice and reporting requirements for non-collecting sellers. Remote sellers who meet the thresholds no longer have the option to comply with the existing use tax notice and report; however, remote sellers who don’t satisfy the economic nexus threshold have the choice to register to collect sales tax in Rhode Island or comply with the notice and report for non-collecting sellers.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Rhode Island at the [tax authority](https://tax.ri.gov/tax-sections/sales-excise-taxes/sales-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Rhode Island, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ri) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Rhode Island.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Rhode Island filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Rhode Island. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Rhode Island | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Rhode Island.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/south-carolina",
    "markdown": "# Collect tax in South Carolina\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Carolina.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Carolina. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a South Carolina sales tax permit, collect sales tax on sales that ship into South Carolina, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: November 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in South Carolina at the [tax authority](https://dor.sc.gov/tax/sales). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in South Carolina, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-sc) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Carolina.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with South Carolina filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to South Carolina. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in South Carolina | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Carolina.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/texas",
    "markdown": "# Collect tax in Texas | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Texas.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Texas. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers with Texas revenues above 500,000 USD must register for a Texas sales tax permit, collect sales tax on sales that ship to Texas, and remit the sales tax to the state.\n\n**Threshold**: 500,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Texas at the [tax authority](https://comptroller.texas.gov/taxes/sales/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nRemote sellers with no physical presence in Texas can register for the [Single Local Use Tax rate](https://comptroller.texas.gov/taxes/sales/remote-sellers.php). This election (the process of making your choice known to the state) allows you to collect a single local use tax rate in the state. You can collect this tax rate after notifying the [Texas Comptroller](https://comptroller.texas.gov/taxes/sales/forms/index.php).\n\nAfter you’ve registered to collect tax in Texas, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-tx) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Texas. You’ll be able to indicate which tax election you made in Texas as part of adding your registration to Stripe.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Texas and your origin address is also in Texas, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\nStripe calculates the appropriate tax rate for your registration. If you selected the Single Local Use Tax rate in Stripe then we will calculate and collect the simplified rate. You can change this by [editing the tax registration](https://docs.stripe.com/tax/registering#edit-a-registration) on the **Dashboard**.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Texas filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   If you chose to collect the Single Local Use Tax, you’ll see ‘Single Local Tax’ on your report instead of any local jurisdictions.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Texas. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Texas | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Texas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/utah",
    "markdown": "# Collect tax in Utah | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Utah.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Utah. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAccording to the state, sellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Utah sales tax permit, collect sales tax on sales that ship into Utah, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: 12 months\n\n**Included transactions**: Gross sales\n\n**Effective date**: January 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Utah at the [tax authority](https://tax.utah.gov/sales). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Utah, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ut) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Utah.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Utah and your origin address is also in Utah, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Utah filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Utah. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Utah | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Utah.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/capture-later",
    "markdown": "# Place a hold on a payment method\n\n## Separate payment authorization and capture to create a charge now, but capture funds later.\n\nWhen you create a payment, you can place a hold on an eligible payment method to reserve funds that you can capture later. For example, hotels often authorize a payment in full before a guest arrives, then capture the money when the guest checks out.\n\nAuthorizing a payment guarantees the amount by holding it on the customer’s payment method. If you’re using the API, the [payment\\_method\\_details.card.capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) attribute on the charge indicates when the authorization expires.\n\nYou need to capture the funds before the authorization expires. If the authorization expires before you capture the funds, the funds are released and the payment status changes to `canceled`. [Learn more about statuses for asynchronous payments](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\n#### Note\n\nAs of April 14, 2024, Visa has shortened the authorization window for online [Merchant-Initiated Transactions](https://docs.stripe.com/payments/cits-and-mits) from 7 days to 5 days, and they have lengthened the authorization window for in-person (Terminal) transactions from 2 days to 5 days.\n\n\\* The exact authorization window is 4 days and 18 hours, to allow time for clearing processes.\n\n#### Authorization validity windows for card-present transactions (Terminal)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Card brand | Authorization validity window |\n| --- | --- |\n| **Visa** | 5 days\\* |\n| **Mastercard** | 2 days |\n| **American Express** | 2 days |\n| **Discover** | 2 days |\n\n\\* The exact authorization window is 4 days and 18 hours, to allow time for clearing processes.\n\nBefore implementing, understand the following limitations for authorizing and capturing separately.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#use-dashboard)\n\nYou can authorize a payment and capture funds separately without writing code.\n\n1.  In the Dashboard, [create a new payment](https://dashboard.stripe.com/test/payments/new). Select **One-time**.\n2.  When you enter or select the payment method, select **More options** then **Capture funds later**.\n\nThe payment appears in your [payments page](https://dashboard.stripe.com/test/payments) as **Uncaptured**.\n\nTo capture the funds, go to the payment details page and click **Capture**.\n\n[](#authorize-only)\n\nTo indicate that you want separate authorization and capture, specify [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. This parameter instructs Stripe to authorize the amount but not capture it on the customer’s payment method.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d capture_method=manual`\n\nWith the above approach, you tell Stripe that you can only use “capture after” for a PaymentIntent with eligible payment methods. For example, you can’t accept card payments and Giropay (which doesn’t support capture after) for a single PaymentIntent. To accept payment methods that might not all support capture after, you can configure capture-after-per-payment-method by configuring `capture_method=manual` on the `payment_method_options[<payment_method_type>]` object. For example, by configuring `payment_method_options[card][capture_method]=manual`, you’re placing only card payments on hold. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d \"payment_method_options[card][capture_method]\"=manual`\n\nAlternatively, you can list `card` and `giropay` using [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) like in the example below.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=giropay \\  -d \"payment_method_options[card][capture_method]\"=manual`\n\nBefore continuing to capture, attach a payment method with card details to the PaymentIntent, and authorize the card by confirming the PaymentIntent. You can do this by setting the `payment_method` and `confirm` fields on the PaymentIntent.\n\n#### Extended Authorizations\n\n[](#capture-funds)\n\nAfter the payment method is authorized, the PaymentIntent [status](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) transitions to `requires_capture`. To capture the authorized funds, make a PaymentIntent [capture](https://docs.stripe.com/api/payment_intents/capture) request. This captures the total authorized amount by default. To capture less or (for certain online card payments) more than the initial amount, pass the [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) option. A partial capture automatically releases the remaining amount. If attempting to capture more than the initial amount for an online card payment, refer to the [overcapture documentation](https://docs.stripe.com/payments/overcapture).\n\nThe following example demonstrates how to capture 7.50 USD of the authorized 10.99 USD payment:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_ANipwO3zNfjeWODtRPIg/capture \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount_to_capture=750`\n\nWhile some card payments are eligible for [multicapture](https://docs.stripe.com/payments/multicapture), you can only perform one capture on an authorized payment for most payments. If you partially capture a payment, you can’t perform another capture for the difference. (Instead, consider [saving the customer’s payment method details for later](https://docs.stripe.com/payments/save-during-payment#save-payment-details-for-future-use) and creating future payments as needed.)\n\nCard statements from some issuers and interfaces from payment methods don’t always distinguish between authorizations and captured (settled) payments, which can sometimes confuse customers.\n\nAdditionally, when a customer completes the payment process on a PaymentIntent with manual capture, it triggers the `payment_intent.amount_capturable_updated` event. You can inspect the PaymentIntent’s [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) property to see the total amount that you can capture from the PaymentIntent.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Separate authorization and capture with Checkout](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#auth-and-capture)\n*   [Place an extended hold on an online card payment](https://docs.stripe.com/payments/extended-authorization)",
    "title": "Place a hold on a payment method | Stripe Documentation",
    "description": "Separate payment authorization and capture to create a charge now, but capture funds later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customers/update",
    "markdown": "# Update a customer | Stripe API Reference\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [List all customers](https://docs.stripe.com/api/customers/list)\n\nReturns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\n\n### Parameters\n\n*   A case-sensitive filter on the list based on the customer’s `email` field. The value must be a string.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers, starting after customer `starting_after`. Passing an optional `email` will result in filtering to customers with only that exact email address. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NffrFeUfNV2Hib\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680893993,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": \"jennyrosen@example.com\",      \"invoice_prefix\": \"0759376C\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": null,        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a customer](https://docs.stripe.com/api/customers/delete)\n\nPermanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the customer ID does not exist, this call raises [an error](#errors).\n\nUnlike other objects, deleted customers can still be retrieved through the API in order to be able to track their history. Deleting customers removes all credit card details and prevents any further operations to be performed (such as adding a new subscription).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"deleted\": true}\n```\n\n## [Search customers](https://docs.stripe.com/api/customers/search)\n\nSearch for customers you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/customers/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"name:'Jane Doe' AND metadata['foo']:'bar'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/customers/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NeGfPRiPKxeBi1\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680569616,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": null,      \"invoice_prefix\": \"47D37F8F\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": \"pm_1Msy7wLkdIwHu7ixsxmFvcz7\",        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {        \"foo\": \"bar\"      },      \"name\": \"Jane Doe\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```",
    "title": "Update a customer | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_ids/object",
    "markdown": "# The Tax ID object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Two-letter ISO code representing the country of the tax ID.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer.\n    \n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ad_nrt` |\n    | `ae_trn` |\n    | `ar_cuit` |\n    | `au_abn` |\n    | `au_arn` |\n    | `bg_uic` |\n    | `bh_vat` |\n    | `bo_tin` |\n    | `br_cnpj` |\n    | `br_cpf` |\n    | Show 64 more |\n    \n*   Value of the tax ID.\n    \n\n### More attributes\n\n*   #### \n    \n    verificationnullable object\n    \n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Create a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_create)\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```",
    "title": "The Tax ID object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/create",
    "markdown": "# Create an invoice | Stripe API Reference\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Retrieve an invoice](https://docs.stripe.com/api/invoices/retrieve)\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
    "title": "Create an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/vermont",
    "markdown": "# Collect tax in Vermont | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Vermont.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Vermont. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales equal to or exceeding the sales or transaction number thresholds must register for a Vermont sales tax permit, collect sales tax on sales that ship into Vermont, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Vermont at the [tax authority](https://tax.vermont.gov/business/sales-and-use-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Vermont, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-vt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Vermont.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Vermont filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Vermont. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Vermont | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Vermont.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/object",
    "markdown": "# The Invoice object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.\n    \n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the latest charge generated for this invoice, if any.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    Attempt payment using the default source attached to the customer.\n    \n    `send_invoice`\n    \n    Email payment instructions to the customer.\n    \n\n*   The ID of the customer who will be billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   #### \n    \n    hosted\\_invoice\\_urlnullable string\n    \n    The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.\n    \n*   The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.\n    \n*   End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    The subscription that this invoice was prepared for, if any.\n    \n*   Total after discounts and taxes.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_countrynullable string\n    \n*   #### \n    \n    account\\_namenullable string\n    \n*   #### \n    \n    account\\_tax\\_idsnullable array of stringsExpandable\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    billing\\_reasonnullable enum\n    \n\n*   #### \n    \n    custom\\_fieldsnullable array of objects\n    \n*   #### \n    \n    customer\\_addressnullable object\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n*   #### \n    \n    customer\\_namenullable string\n    \n*   #### \n    \n    customer\\_phonenullable string\n    \n*   #### \n    \n    customer\\_shippingnullable object\n    \n*   #### \n    \n    customer\\_tax\\_exemptnullable enum\n    \n*   #### \n    \n    customer\\_tax\\_idsnullable array of objects\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    due\\_datenullable timestamp\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n*   #### \n    \n    ending\\_balancenullable integer\n    \n\n*   #### \n    \n    from\\_invoicenullable object\n    \n*   #### \n    \n    invoice\\_pdfnullable string\n    \n\n*   #### \n    \n    last\\_finalization\\_errornullable object\n    \n*   #### \n    \n    latest\\_revisionnullable stringExpandable\n    \n\n*   #### \n    \n    next\\_payment\\_attemptnullable timestamp\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    post\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    pre\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    quotenullable stringExpandable\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n\n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n\n*   #### \n    \n    statement\\_descriptornullable string\n    \n\n*   #### \n    \n    subscription\\_detailsnullable object\n    \n*   #### \n    \n    subscription\\_proration\\_datenullable integer\n    \n\n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    threshold\\_reasonnullable object\n    \n*   #### \n    \n    total\\_discount\\_amountsnullable array of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    webhooks\\_delivered\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    `send_invoice`\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    `charge_automatically`\n    \n    `send_invoice`\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
    "title": "The Invoice object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea",
    "markdown": "# Collect tax in South Korea\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Korea.\n\nIn South Korea, Stripe only supports collecting [VAT](https://www.nts.go.kr/english/na/ntt/selectNttList.do?mi=11210&bbsId=30699) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Korea. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in South Korea must register for VAT purposes as from the first sale. There are no registration thresholds for non-resident service providers. Sales to business customers in South Korea do not trigger any tax registration obligations as remote sellers are not required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in South Korea to collect this tax on Stripe.\n\nFind more information on how to register for VAT in South Korea on the [government website](https://www.nts.go.kr/english/main.do).\n\nAfter you’ve registered to collect tax in South Korea, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=kr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Korea.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in South Korea. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in South Korea, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to South Korea. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in South Korea | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Korea.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states",
    "markdown": "# Collect tax in the United States\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the US.\n\nBusinesses selling goods and services to customers in the United States (US) might need to collect sales tax. That’s the case even if your business isn’t established (based) in the US. Tax rates and rules vary by state.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the state. States can choose which level and type of activity in the state means a business needs to collect tax there. This is called _nexus_. A business can have nexus in a state if they have:\n\n*   Physical activity, such as having remote employees based there or storing inventory in a warehouse.\n*   Economic activity, such as an amount or total value of transactions within a time period.\n\nIf you have nexus in a state, you need to register for a license to collect tax on sales to customers in that state.\n\nTo understand the economic nexus thresholds in each state use the [links above](https://docs.stripe.com/tax/supported-countries/united-states#us-states). Stripe only monitors if you have reached an economic nexus tax threshold for sales outside of the state your business is based in. Learn more about [economic nexus](https://stripe.com/guides/introduction-to-us-sales-tax-and-economic-nexus).\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach state has its own sales tax authority. You need to individually register to collect sales tax in each state where you have met the registration requirements. Start by going to the state tax authority website. If you need help finding the right links to register for tax, select a state from the [list above](https://docs.stripe.com/tax/supported-countries/united-states#us-states).\n\nLearn more about [the sales tax registration process in the United States](https://stripe.com/guides/sales-tax-registration-process-us).\n\n### Streamlined Sales and Use Tax Agreement (SSUTA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Streamlined Sales and Use Tax Agreement (SSUTA) was created by a coalition of states to help businesses manage their sales and use tax obligations across the United States. Twenty-four US states are members of the SSUTA agreement. However, individual states can still decide which products and services are taxable in their state. You can learn more and register for sales and use tax permits in all SSUTA member states on the [streamlined sales tax registration website](https://www.streamlinedsalestax.org/).\n\nAfter you’ve registered with a state, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhat you sell and where you sell impacts how tax is calculated on your sales. Different rules apply when your customer is located in the same state as your business or located somewhere else.\n\nStripe calculates tax on a transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\nAs part of the tax calculation process, Stripe collects addresses for both your business and customers. We verify these addresses, convert them into geographical coordinates, and match them to the relevant tax jurisdiction boundaries. We then use these jurisdictions as input for the tax calculation process.\n\n### Sales to a customer located outside the state your business is based in![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and is different from the state your customer is located in, Stripe always calculates tax based on your customer’s location.\n\n### Sales to a customer located within the same state as your business![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and in the same state as your customer’s state, Stripe generally calculates sales tax based on your customer’s location.\n\nHowever some states use your origin address instead of the customers location depending on the type of product or service you sell:\n\n*   In Arizona, Illinois, Missouri,Pennsylvania, Tennessee, and Virginia, Stripe applies tax based on your business location.\n*   In California, state, county, and city taxes are based on the origin address, while district taxes are based on the customer’s location.\n*   In Mississippi, Ohio, Texas, and Utah, Stripe applies tax based on the origin address for physical and digital goods. Sales of services are taxed at the destination address.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes in the US. Stripe doesn’t file taxes on your behalf. You can find where to file your return for each state in [our tax returns guide](https://stripe.com/guides/how-to-file-sales-tax-us).\n\nFor automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA marketplace facilitator is an entity that contracts with third parties to promote their sales of property, digital goods and services by performing various functions to initiate and complete transactions. In the US, marketplace facilitator laws now exist in every state with a sales tax. These laws generally require the marketplace facilitator to collect and remit sales tax on behalf of the third-party sellers conducting business on the marketplace. As a marketplace facilitator, your compliance obligations, from registration requirements to reporting and filing, are determined by the specific laws of each state.",
    "title": "Collect tax in the United States | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the US.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/canada",
    "markdown": "# Collect tax in Canada | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Canada.\n\nThe Canadian tax system consists of a combination of federal and provincial taxes. The goods and services tax (GST) applies nationally. The different provinces handle taxes in a variety of ways. Learn more in our [guide to tax in Canada](https://stripe.com/guides/tax-registration-process-canada).\n\nProvincial sales taxes in New Brunswick, Newfoundland and Labrador, Nova Scotia, Ontario, and Prince Edward Island are combined with the GST to implement the harmonized sales tax (HST), which operates in the same way as the GST.\n\nSeparate taxes are collected in:\n\n*   British Columbia—provincial sales tax (PST)\n*   Manitoba—retail sales tax (RST)\n*   Quebec—Quebec sales tax (QST)\n*   Saskatchewan—provincial sales tax (PST)\n\nAlberta, Northwest Territories, Nunavut, and Yukon don’t apply any provincial sales tax.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Canadian federal government and the four provinces that levy a separate provincial sales tax define their own tax registration thresholds and procedures.\n\n*   If you’re a non-Canadian business, Stripe monitors your tax registration thresholds separately for the federal level and every province with separate provincial taxes.\n*   If your business is based in Canada, Stripe monitors your tax registration thresholds for provinces with separate provincial taxes where your business isn’t established.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Canada. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAfter you’ve registered to collect tax in a province or with the government, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations=location=ca) in the Dashboard to start collecting tax on your transactions in that location.\n\n### Federal tax threshold![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanada applies different regulations to remote businesses selling to Canadian consumers, depending on the product type and origin.\n\n*   Digital products or services qualify for simplified GST/HST registration when sales exceed 30,000 CAD over any 12-month period.\n*   Goods shipped from a warehouse in Canada to Canadian consumers require normal GST/HST registration when sales exceed 30,000 CAD over any 12-month period.\n\n**Threshold**: 30,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital products and services to Canadian individuals, and sales of goods shipped from a warehouse in Canada to Canadian individuals.\n\nFind more information on how to register for GST/HST on the [federal government website](https://www.canada.ca/en/revenue-agency/services/tax/businesses/topics/gst-hst-businesses.html).\n\nIf a remote business sells digital services or goods into Canada exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for GST/HST. These sales don’t count toward the seller’s registration threshold.\n\n### British Columbia![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses based outside British Columbia (BC) must register to collect PST if their taxable sales in BC exceed 10,000 CAD in the past 12 months or are expected to exceed that amount in the next 12 months.\n\n**Threshold**: 10,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for PST on the [British Columbia government website](https://www2.gov.bc.ca/gov/content/taxes/sales-taxes/pst).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for PST. These sales don’t count toward the seller’s registration threshold.\n\n### Manitoba![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses located outside Manitoba that perform taxable sales of goods and services in Manitoba must register to collect RST. Manitoba doesn’t apply any monetary registration thresholds to remote sellers.\n\n**Threshold**: 1 transaction\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for RST on the [Manitoba government website](https://www.gov.mb.ca/finance/taxation/forms.html#retail).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for RST. These sales don’t count towards the seller’s registration threshold.\n\n### Quebec![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRemote businesses selling digital products or services to individuals in Quebec must register under the specified QST regime if their sales exceed 30,000 CAD in any 12-month period. Remote businesses selling goods to individuals in Quebec must register under the general QST regime if their sales exceed 30,000 CAD in any 12-month period—this applies to goods shipped from a warehouse in Quebec or from outside Quebec by means other than mail or courier. The specified QST regime doesn’t apply in this situation.\n\n**Threshold**: 30,000 CAD\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital products and services and certain sales of goods to individuals in Quebec.\n\nFind more information on how to register for QST on the [Quebec government website](https://www.revenuquebec.ca/en/businesses/consumption-taxes/gsthst-and-qst/).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for QST. These sales don’t count toward the seller’s registration threshold.\n\n### Saskatchewan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses located outside Saskatchewan that sell taxable goods and services in Saskatchewan must register to collect PST. Saskatchewan doesn’t apply any monetary registration thresholds to remote sellers.\n\n**Threshold**: 1 transaction\n\n**Time frame**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\nFind more information on how to register for PST on the [Saskatchewan government website](https://www.saskatchewan.ca/business/taxes-licensing-and-reporting/provincial-taxes-policies-and-bulletins/provincial-sales-tax).\n\nIf a remote business sells digital services or goods exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for PST. These sales don’t count toward the seller’s registration threshold.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe determines whether federal tax (GST or HST), provincial tax (PST, QST, or RST) or a combination of both types of taxes apply to the specific transaction.\n\nSales of goods and services within Canada are generally taxed based on the customer’s location. Goods shipped from Canada to customers abroad are zero-rated exports for Canadian tax purposes. While these transactions might incur taxes and customs duties in the destination country, Stripe doesn’t calculate them. Remote sellers don’t need to collect GST or HST on goods sold into Canada from abroad, but they must collect tax if the goods are shipped from a warehouse in Canada.\n\nSales of services provided from Canada to customers in other countries are generally not taxable in Canada but the tax of the customer country might apply. Sales of services provided to Canadian customers by sellers established in other countries are generally taxable in Canada:\n\n*   Remote sellers must collect GST/HST for sales to individuals, but not for sales to business customers who provide their GST/HST registration number.\n*   Remote sellers must collect QST on sales to individuals in Quebec, but not on sales to business customers who provide their QST registration number.\n*   Remote sellers must collect provincial sales taxes for sales in Manitoba, Saskatchewan, and British Columbia regardless of individual or business customers. To treat sales to customers in these provinces as exempt from provincial sales taxes, set the [customer tax status](https://docs.stripe.com/tax/zero-tax) to `exempt`.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about the different types of reports.\n\nYou’re responsible for filing and remitting your taxes in Canada. Stripe doesn’t file taxes on your behalf.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanada defines “digital platform operators” as marketplace operators that might have tax collection obligations because they control a transaction between a seller and a buyer (for example, by handling payments and passing them to the seller). This definition excludes businesses solely listing goods or processing payments. Digital platform operators must collect GST/HST on:\n\n*   Sales of digital products and services to Canadian individuals by remote sellers not registered under the normal GST/HST regime.\n*   Sales of goods by non-registered sellers to Canadian customers if the goods are in Canada at the time of sale.\n*   Provision of short-term accommodation if the property owner isn’t GST/HST registered. This typically includes renting residential units for less than one month. Stripe Tax doesn’t support accommodation services.\n\nCanadian provinces with separate provincial taxes have similar rules on platform tax collection obligations.",
    "title": "Collect tax in Canada | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Canada.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/slovakia",
    "markdown": "# Collect tax in Slovakia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Slovakia.\n\nSlovakia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Slovakia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Slovakia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Slovakia.\n\n*   [Domestic VAT registration](https://www.financnasprava.sk/en/businesses/taxes-businesses#ZahranicnaOsobaDPH)\n*   [One-Stop Shop registration schemes](https://www.financnasprava.sk/en/businesses/taxes-businesses/value-added-tax/registration-oss)\n\nAfter you’ve registered to collect tax in Slovakia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Slovakia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSlovakia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Slovakia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Slovakia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Slovakia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/india-emandate-guide",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/customer_balance_transactions/object",
    "markdown": "# The Customer Balance Transaction object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount of the transaction. A negative value is a credit for the customer’s balance, and a positive value is a debit to the customer’s `balance`.\n    \n\n*   The ID of the customer the transaction belongs to.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s `balance` after the transaction was applied. A negative value decreases the amount due on the customer’s next invoice. A positive value increases the amount due on the customer’s next invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://docs.stripe.com/billing/customer/balance#types) to learn more about transaction types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjustment`<br><br>An explicitly created adjustment transaction to debit or credit the credit balance. |\n    | `applied_to_invoice`<br><br>Traces the application of credit against a linked Invoice. |\n    | `credit_note`<br><br>Traces the creation of credit to a Credit Note and its associated Invoice. |\n    | `initial`<br><br>The starting value of the customer’s credit balance. |\n    | `invoice_overpaid`<br><br>Credits to the credit balance when an invoice receives payments exceeding the amount due. |\n    | `invoice_too_large`<br><br>Debits to the credit balance when the amount due on an invoice is greater than Stripe’s maximum chargeable amount and the customer does not have a cash balance. |\n    | `invoice_too_small`<br><br>Debits to the credit balance when the amount due on an invoice is less than Stripe’s minimum chargeable amount and the customer does not have a cash balance. |\n    | `migration`<br><br>Funds migrated from the legacy customer credit balance. |\n    | `unapplied_from_invoice`<br><br>Traces the reversal of an applied credit balance from a linked Invoice. Paired with an earlier ‘applied\\_to\\_invoice’ transaction. |\n    | `unspent_receiver_credit`<br><br>Unspent funds in receiver Sources that got automatically charged and credited to the balance. |\n    | Show 1 more |\n    \n\n### More attributes\n\n*   #### \n    \n    credit\\_notenullable stringExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\nThe Customer Balance Transaction object\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Create a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/create)\n\nCreates an immutable transaction that updates the customer’s credit [balance](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\n*   The integer amount in **cents** to apply to the customer’s credit balance.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=-500 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [Update a customer credit balance transaction](https://docs.stripe.com/api/customer_balance_transactions/update)\n\nMost credit balance transaction fields are immutable, but you may update its `description` and `metadata`.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a customer balance transaction object if the call succeeded.\n\nPOST /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"adjustment\"}\n```\n\n## [Retrieve a customer balance transaction](https://docs.stripe.com/api/customer_balance_transactions/retrieve)\n\nRetrieves a specific customer balance transaction that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a customer balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions/cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",  \"object\": \"customer_balance_transaction\",  \"amount\": -500,  \"created\": 1680216086,  \"credit_note\": null,  \"currency\": \"usd\",  \"customer\": \"cus_NcjdgdwZyI9Rj7\",  \"description\": null,  \"ending_balance\": -500,  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"adjustment\"}\n```\n\n## [List customer balance transactions](https://docs.stripe.com/api/customer_balance_transactions/list)\n\nReturns a list of transactions that updated the customer’s [balances](https://docs.stripe.com/billing/customer/balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customer balance transactions, starting after item `starting_after`. Each entry in the array is a separate customer balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NcjdgdwZyI9Rj7/balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cbtxn_1MrU9qLkdIwHu7ixhdjxGBgI\",      \"object\": \"customer_balance_transaction\",      \"amount\": -500,      \"created\": 1680216086,      \"credit_note\": null,      \"currency\": \"usd\",      \"customer\": \"cus_NcjdgdwZyI9Rj7\",      \"description\": null,      \"ending_balance\": -500,      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"type\": \"adjustment\"    }    {...}    {...}  ],}\n```",
    "title": "The Customer Balance Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/quotes/object",
    "markdown": "# The Quote object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    A list of items the customer is being quoted for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of stringsExpandable\n    \n*   #### \n    \n    descriptionnullable string\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n\n*   #### \n    \n    from\\_quotenullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n\n*   #### \n    \n    subscription\\_schedulenullable stringExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Create a quote](https://docs.stripe.com/api/quotes/create)\n\nA quote models prices and services for a customer. Default options for `header`, `description`, `footer`, and `expires_at` can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcMfB0SSFHINCV \\  -d \"line_items[0][price]\"=price_1Mr7wULkdIwHu7ixhPkIEN2w \\  -d \"line_items[0][quantity]\"=2\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Update a quote](https://docs.stripe.com/api/quotes/update)\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```\n\n## [Retrieve a quote's upfront line items](https://docs.stripe.com/api/quotes/line_items/upfront/list)\n\nWhen retrieving a quote, there is an includable [**computed.upfront.line\\_items**](https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items) property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` upfront line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more upfront line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/computed\\_upfront\\_line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixMMjVsIUH\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/computed_upfront_line_items\"}\n```",
    "title": "The Quote object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/upgrades/manage-payment-methods",
    "markdown": "# Manage payment methods in the Dashboard by default\n\nIf your integration uses Card Element or individual payment method Elements, we recommend migrating to the [Payment Element](https://docs.stripe.com/payments/payment-element/migration). This single, unified integration allows you to accept over 25 different payment methods.\n\n### Create the PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this version of the API, specifying the [automatic\\_payment\\_methods.enabled](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods-enabled) parameter is optional. If you don’t specify it, Stripe assumes a value of `true`, which enables its functionality by default.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd`\n\n### Client-side confirmations with Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your integration uses Stripe.js to confirm payments with [confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) or by [payment method](https://docs.stripe.com/js/payment_intents/payment_method), your existing processes remains the same and requires no further changes.\n\nWhen you confirm payments, we recommend that you provide the [return\\_url](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-return_url) parameter. This allows you to accept payment methods that [require redirect](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability).\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: '[https://example.com/return_url](https://example.com/return_url)',     },   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n### Server-side confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use server-side confirmation, you must use the [return\\_url](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-return_url) parameter in your integration.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\"`\n\nAlternatively, you can create the PaymentIntent or SetupIntent with the [automatic\\_payment\\_methods.allow\\_redirects](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods-allow_redirects) parameter set to `never`. This disables the `return_url` requirement on confirmation. You can still manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods), but the payment methods that require redirects won’t be eligible.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d \"automatic_payment_methods[allow_redirects]\"=never`\n\nLastly, you can create the PaymentIntent or SetupIntent with the [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) parameter. This also disables the `return_url` requirement on confirmation. With this option, you can’t manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d confirm=true \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_types[]\"=card`",
    "title": "Manage payment methods in the Dashboard by default | Stripe Documentation",
    "description": "Upgrade your API to manage payment methods in the Dashboard by default.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/updated-requirements/accounts-arguments",
    "markdown": "# Accounts API Argument Changes | Stripe DocumentationThe Stripe Docs logo\n\n## This page maps old Accounts API arguments to the new argument names.\n\nIndividuals and companies used to share many of the same arguments. With the new [Persons API](https://docs.stripe.com/api/persons) and other changes, many of these arguments now have new names specific to individuals and companies. Existing [Account](https://docs.stripe.com/api/accounts) arguments that have not changed are not listed on this page.\n\n## Individuals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | `business_type` |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `individual.address`<br><br>`individual.address_kana` (Japan) `individual.address_kanji` (Japan) |\n| `legal_entity.dob` | `individual.dob` |\n| `legal_entity.first_name` | `individual.first_name` |\n| `legal_entity.last_name` | `individual.last_name` |\n| `legal_entity.personal_address` | `individual.address` |\n| `legal_entity.personal_phone_number` | `individual.phone` |\n| `legal_entity.personal_id_number` | `individual.id_number` |\n| `legal_entity.personal_id_number_provided` | `individual.id_number_provided` |\n| `legal_entity.ssn_last_4` | `individual.ssn_last_4` |\n| `legal_entity.ssn_last_4_provided` | `individual.ssn_last_4_provided` |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | `individual.verification` |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |\n\n## Companies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Old argument | New argument |\n| --- | --- |\n| `business_name` | `business_profile.name` |\n| `business_url` | `business_profile.url` |\n| `debit_negative_balances` | `settings.payouts.debit_negative_balances` |\n| `decline_charge_on` | `settings.card_payments.decline_on` |\n| `keys` | Authenticate using the [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header). |\n| `legal_entity` | Argument removed and replaced with `company`. |\n| `legal_entity.additional_owners` | Argument removed. |\n| `legal_entity.address` | `company.address`<br><br>`company.address_kana` (Japan) `company.address_kanji` (Japan) |\n| `legal_entity.business_name` | `company.name`<br><br>`company.name_kana` (Japan)<br><br>`company.name_kanji` (Japan) |\n| `legal_entity.business_tax_id` | `company.tax_id` |\n| `legal_entity.business_tax_id_provided` | `company.tax_id_provided` |\n| `legal_entity.dob` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-dob) object. |\n| `legal_entity.first_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-first_name) object. |\n| `legal_entity.last_name` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-last_name) object. |\n| `legal_entity.personal_address` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-address) object. |\n| `legal_entity.phone_number` | `company.phone` |\n| `legal_entity.personal_id_number` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-personal_id_number) object. |\n| `legal_entity.personal_id_number_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-personal_id_number_provided) object. |\n| `legal_entity.ssn_last_4` | Now managed with the [Persons](https://docs.stripe.com/api/persons/create#create_person-ssn_last_4) object. |\n| `legal_entity.ssn_last_4_provided` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-ssn_last_4_provided) object. |\n| `legal_entity.type` | `business_type` |\n| `legal_entity.verification` | Now managed with the [Persons](https://docs.stripe.com/api/persons/object#person_object-requirements) object. |\n| `mcc` | `business_profile.mcc` |\n| `payout_schedule` | `settings.payouts.schedule` |\n| `payout_statement_descriptor` | `settings.payouts.statement_descriptor` |\n| `product_description` | `business_profile.product_description` |\n| `statement_descriptor` | `settings.payments.statement_descriptor` |\n| `support_email` | `business_profile.support_email` |\n| `support_phone` | `business_profile.support_phone` |\n| `support_address` | `business_profile.support_address` |\n| `verification.disabled_reason` | `requirements.disabled_reason` |\n| `verification.due_by` | `requirements.current_deadline` |\n| `verification.fields_needed` | `requirements.past_due, requirements.currently_due, requirements.eventually_due` |",
    "title": "Accounts API Argument Changes | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoiceitems/object",
    "markdown": "# The Invoice Item object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.\n    \n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n*   The price of the invoice item.\n    \n*   Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.\n    \n\n### More attributes\n\n*   #### \n    \n    discountsnullable array of stringsExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable string\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Create an invoice item](https://docs.stripe.com/api/invoiceitems/create)\n\nCreates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.\n\n### Parameters\n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.\n    \n\n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe created invoice item object is returned if successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZei8imSbMVvi \\  -d price=price_1MtGUsLkdIwHu7ix1be5Ljaj\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Update an invoice item](https://docs.stripe.com/api/invoiceitems/update)\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [List all invoice items](https://docs.stripe.com/api/invoiceitems/list)\n\nReturns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.\n\n### Parameters\n\n*   The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoice items, starting after invoice item `starting_after`. Each entry in the array is a separate invoice item object. If no more invoice items are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoiceitems\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",      \"object\": \"invoiceitem\",      \"amount\": 1099,      \"currency\": \"usd\",      \"customer\": \"cus_NeZei8imSbMVvi\",      \"date\": 1680640231,      \"description\": \"T-shirt\",      \"discountable\": true,      \"discounts\": [],      \"invoice\": null,      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1680640231,        \"start\": 1680640231      },      \"plan\": null,      \"price\": {        \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680640229,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NeZe7xbBdJT8EN\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"proration\": false,      \"quantity\": 1,      \"subscription\": null,      \"tax_rates\": [],      \"test_clock\": null,      \"unit_amount\": 1099,      \"unit_amount_decimal\": \"1099\"    }    {...}    {...}  ],}\n```",
    "title": "The Invoice Item object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event/object",
    "markdown": "# The Meter Event object | Stripe API Reference\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   A unique identifier for the event.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The payload of the event. This contains the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Create a billing meter event](https://docs.stripe.com/api/billing/meter-event/create)\n\nCreates a billing meter event\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   The payload of the event. This must contain the fields corresponding to a meter’s `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).\n    \n*   A unique identifier for the event. If not provided, one will be generated. We recommend using a globally unique identifier for this. We’ll enforce uniqueness within a rolling 24 hour period.\n    \n*   The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.\n    \n\n### Returns\n\nReturns a billing meter event\n\nPOST /v1/billing/meter\\_events\n\n```\ncurl https://api.stripe.com/v1/billing/meter_events \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d event_name=ai_search_api \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"=cus_NciAYcXfLnqBoz \\  -d identifier=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event\",  \"created\": 1704824589,  \"event_name\": \"ai_search_api\",  \"identifier\": \"identifier_123\",  \"livemode\": true,  \"payload\": {    \"value\": \"25\",    \"stripe_customer_id\": \"cus_NciAYcXfLnqBoz\"  },  \"timestamp\": 1680210639}\n```\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Meter Event object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/currencies",
    "markdown": "# Supported currencies | Stripe DocumentationThe Stripe Docs logo\n\n## See what currencies you can use for making charges and for paying out to your bank account.\n\nYou can charge customers in one of more than [135 native currencies](#presentment-currencies) and [receive funds in your currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies). Businesses that have a global presence find this helpful because charging in a customer’s native currency can increase sales.\n\n## Currency presentment and settlement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrency comes into play in three places:\n\n*   The customer’s credit card currency\n*   The currency of the charge, called the _presentment_ currency\n*   The currency accepted by your destination bank account or debit card, called the _settlement_ currency\n\nIf the charge currency differs from the customer’s credit card currency, the _customer_ may be charged a foreign exchange fee by their credit card company. The customer may also be charged a fee by their credit card company if the credit card and your business are in different countries, regardless of the currency used.\n\nIf the charge currency differs from your settlement currency, Stripe [converts the charge](https://docs.stripe.com/currencies/conversions) to your settlement currency. Refer to our [payouts](https://docs.stripe.com/payouts#multiple-bank-accounts) documentation to learn about the different bank account currencies that we support. For information on pricing, see the [pricing guide](https://www.stripe.com/pricing).\n\n## Supported presentment currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Zero-decimal currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll API requests expect amounts to be provided in a currency’s smallest unit. For example, to charge 10 USD, provide an `amount` value of **1000** (that is, 1000 cents).\n\nFor zero-decimal currencies, still provide amounts as an integer but without multiplying by 100. For example, to charge ¥500, provide an `amount` value of **500**.\n\nZero-decimal currencies:\n\n*   BIF\n*   CLP\n*   DJF\n*   GNF\n*   JPY\n*   KMF\n*   KRW\n*   MGA\n*   PYG\n*   RWF\n*   UGX\n*   VND\n*   VUV\n*   XAF\n*   XOF\n*   XPF\n\n## Three-decimal currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe API supports three-decimal currencies for the standard payment flows, including Payment Intents, Refunds, and Disputes. However, to ensure compatibility with Stripe’s payments partners, these API calls require the least-significant (last) digit to be 0. Your integration must round amounts to the nearest ten. For example, 5.124 KWD must be rounded to **5120** or **5130**.\n\nThree-decimal currencies:\n\n*   BHD\n*   JOD\n*   KWD\n*   OMR\n*   TND\n\n## Special cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following currencies have special conditions that you need to consider when creating payouts or charges.\n\n| Currency | Description |\n| --- | --- |\n| Icelandic Króna (ISK) | Effective 0:00 UTC on 2023-04-14, ISK becomes a zero-decimal currency. To maintain backwards compatibility, you must pass in amounts with two decimals. For example, to charge 5 ISK, provide an `amount` value of `500`. The `amount` value must be evenly divisible by 100: `100`, `200`, `300`, and so on. You can’t charge fractions of ISK. |\n| Hungarian Forint (HUF) | Stripe treats HUF as a zero-decimal currency for payouts, even though you can charge two-decimal amounts. When you create a manual payout in HUF, only integer amounts that are evenly divisible by 100 are allowed. For example, if you have an available balance of HUF 10.45, you can pay out HUF 10 by submitting `1000` for the `amount` value. You can’t submit a payout for the full balance, HUF 10.45, because the `amount` value of `1045` is not evenly divisible by 100. |\n| New Taiwan Dollar (TWD) | Stripe treats TWD as a zero-decimal currency for payouts, even though you can charge two-decimal amounts. When you create a manual payout in TWD, only integer amounts that are evenly divisible by 100 are allowed. For example, if you have an available balance of TWD 800.45, you can pay out TWD 800 by submitting `80000` for the `amount` value. You can’t submit a payout for the full balance, TWD 800.45, because the `amount` value of `80045` is not evenly divisible by 100. |\n| Ugandan Shilling (UGX) | UGX was a decimal-based currency, but is now effectively a zero-decimal currency. To maintain backwards compatibility, you must pass in amounts with two decimals. For example, to charge 5 UGX, provide an `amount` value of `500`. The `amount` value must be evenly divisible by 100: `100`, `200`, `300`, and so on. In other words, you can’t charge fractions of UGX. For invoices where the `amount` is fractional after prorations, coupons, or taxes, Stripe automatically rounds that amount to the nearest number evenly divisible by 100. Any difference from rounding is credited or debited to the customer balance. |\n\n## Minimum and maximum charge amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe’s processing fee combines a small fixed amount and a percentage, we enforce a minimum amount when creating a charge. This ensures you don’t lose money on a charge. The minimum amount you can charge depends on which [bank account settlement currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies) the payment would be paid out to.\n\n| Settlement Currency | Minimum Charge Amount |\n| --- | --- |\n| USD | $0.50 |\n| AED | 2.00 د.إ |\n| AUD | $0.50 |\n| BGN | лв1.00 |\n| BRL | R$0.50 |\n| CAD | $0.50 |\n| CHF | 0.50 Fr |\n| CZK | 15.00Kč |\n| DKK | 2.50-kr. |\n| EUR | €0.50 |\n| GBP | £0.30 |\n| HKD | $4.00 |\n| HUF | 175.00 Ft |\n| INR | ₹0.50 |\n| JPY | ¥50 |\n| MXN | $10 |\n| MYR | RM 2 |\n| NOK | 3.00-kr. |\n| NZD | $0.50 |\n| PLN | 2.00 zł |\n| RON | lei2.00 |\n| SEK | 3.00-kr. |\n| SGD | $0.50 |\n| THB | ฿10 |\n\nIf you only have one bank account in use and you create charges in the same currency as it, the minimum amount is simply what is listed for your currency. Charges that must be [converted](https://docs.stripe.com/currencies/conversions) into your account’s [default settlement currency](https://docs.stripe.com/payouts#multiple-bank-accounts) must meet the equivalent minimum of the settlement currency. For example, if you have GBP and USD bank accounts, with GBP set as your default currency, any non-USD charges you create are converted to GBP. These charges must meet the minimum amount required for GBP (£0.30) after conversion.\n\nThere are some exceptions to the minimum charge amount limit (`amount` values as low as 1 is allowed) when you are creating payments with certain payment methods, such as [iDEAL](https://docs.stripe.com/payments/ideal).\n\nThe only limit to the maximum amount you can charge a customer is a technical one. The `amount` value supports up to twelve digits for IDR (for example, a value of **999999999999** for a charge of 9,999,999,999.99 IDR), up to nine digits for INR (for example, a value of **999999999** for a charge of 9,999,999.99 INR) and up to eight digits for all other currencies (for example, a value of **99999999** for a charge of 999,999.99 USD).\n\nCard networks can impose charge amount limits that are more restrictive than twelve digits.\n\n## European credit cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are some factors, like pricing, in which credit cards from Europe are treated distinctly from credit cards from other regions. Stripe defines European cards as cards issued in the following countries:\n\n| Country Code | Country |\n| --- | --- |\n| AD  | Andorra |\n| AT  | Austria |\n| BE  | Belgium |\n| BG  | Bulgaria |\n| HR  | Croatia |\n| CY  | Cyprus |\n| CZ  | Czech Republic |\n| DK  | Denmark |\n| EE  | Estonia |\n| FO  | Faroe Islands |\n| FI  | Finland |\n| FR  | France |\n| DE  | Germany |\n| GI  | Gibraltar |\n| GR  | Greece |\n| GL  | Greenland |\n| GG  | Guernsey |\n| VA  | Holy See (Vatican City State) |\n| HU  | Hungary |\n| IS  | Iceland |\n| IE  | Ireland |\n| IM  | Isle of Man |\n| IL  | Israel |\n| IT  | Italy |\n| JE  | Jersey |\n| LV  | Latvia |\n| LI  | Liechtenstein |\n| LT  | Lithuania |\n| LU  | Luxembourg |\n| MT  | Malta |\n| MC  | Monaco |\n| NL  | Netherlands |\n| NO  | Norway |\n| PL  | Poland |\n| PT  | Portugal |\n| RO  | Romania |\n| PM  | Saint Pierre and Miquelon |\n| SM  | San Marino |\n| SK  | Slovakia |\n| SI  | Slovenia |\n| ES  | Spain |\n| SE  | Sweden |\n| TR  | Türkiye |\n| GB  | United Kingdom |",
    "title": "Supported currencies | Stripe Documentation",
    "description": "See what currencies you can use for making charges and for paying out to your bank account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/refunds/object",
    "markdown": "# The Refund object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the charge that’s refunded.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s refunded.\n    \n*   Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).\n    \n*   Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://docs.stripe.com/refunds#failed-refunds).\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_detailsnullable object\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_reasonnullable string\n    \n*   #### \n    \n    instructions\\_emailnullable string\n    \n*   #### \n    \n    next\\_actionnullable object\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n*   #### \n    \n    source\\_transfer\\_reversalnullable stringExpandableConnect only\n    \n*   #### \n    \n    transfer\\_reversalnullable stringExpandableConnect only\n    \n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Create a refund](https://docs.stripe.com/api/refunds/create)\n\nWhen you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.\n\nYou can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.\n\nOnce entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.\n\n### Parameters\n\n*   A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.\n    \n*   The identifier of the charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The identifier of the PaymentIntent to refund.\n    \n*   String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://docs.stripe.com/radar/lists), and will also help us improve our fraud detection algorithms.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n\n### Returns\n\nReturns the `Refund` object if the refund succeeded. Raises [an error](#errors) if the Charge/PaymentIntent has already been refunded, or if an invalid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d charge=ch_1NirD82eZvKYlo2CIvbtLWuY\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Update a refund](https://docs.stripe.com/api/refunds/update)\n\nUpdates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.\n\nThis request only accepts `metadata` as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the refund object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Retrieve a refund](https://docs.stripe.com/api/refunds/retrieve)\n\nRetrieves the details of an existing refund.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a refund if you provide a valid ID. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [List all refunds](https://docs.stripe.com/api/refunds/list)\n\nReturns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.\n\n### Parameters\n\n*   Only return refunds for the charge specified by this charge ID.\n    \n*   Only return refunds for the PaymentIntent specified by this ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after the `starting_after` refund. Each entry in the array is a separate Refund object. If no other refunds are available, the resulting array is empty. If you provide a non-existent charge ID, this call raises [an error](#errors).\n\n```\ncurl -G https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",      \"object\": \"refund\",      \"amount\": 1000,      \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",      \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",      \"created\": 1692942318,      \"currency\": \"usd\",      \"destination_details\": {        \"card\": {          \"reference\": \"123456789012\",          \"reference_status\": \"available\",          \"reference_type\": \"acquirer_reference_number\",          \"type\": \"refund\"        },        \"type\": \"card\"      },      \"metadata\": {},      \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",      \"reason\": null,      \"receipt_number\": null,      \"source_transfer_reversal\": null,      \"status\": \"succeeded\",      \"transfer_reversal\": null    }    {...}    {...}  ],}\n```",
    "title": "The Refund object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/product-feature/object",
    "markdown": "# The ProductFeature object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    entitlement\\_featureobject\n    \n    The [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### More attributes\n\nThe ProductFeature object\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [List all features attached to a product](https://docs.stripe.com/api/product-feature/list)\n\nRetrieve a list of features for a product\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of features for a product\n\nGET /v1/products/:id/features\n\n```\ncurl -G https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products/prod_NWjs8kKbJWmuuc/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prodft_BcMBZUWCIOEgEc\",      \"object\": \"product_feature\",      \"livemode\": false,      \"entitlement_feature\": {        \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",        \"object\": \"entitlements.feature\",        \"livemode\": false,        \"name\": \"My super awesome feature\",        \"lookup_key\": \"my-super-awesome-feature\",        \"metadata\": {}      }    }    {...}    {...}  ],}\n```\n\n## [Attach a feature to a product](https://docs.stripe.com/api/product-feature/attach)\n\nCreates a product\\_feature, which represents a feature attachment to a product\n\n### Parameters\n\n*   #### \n    \n    entitlement\\_featurestringRequired\n    \n    The ID of the [Feature](https://docs.stripe.com/api/entitlements/feature) object attached to this product.\n    \n\n### Returns\n\nReturns a product\\_feature\n\nPOST /v1/products/:id/features\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d entitlement_feature=feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"livemode\": false,  \"entitlement_feature\": {    \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",    \"object\": \"entitlements.feature\",    \"livemode\": false,    \"name\": \"My super awesome feature\",    \"lookup_key\": \"my-super-awesome-feature\",    \"metadata\": {}  }}\n```\n\n## [Remove a feature from a product](https://docs.stripe.com/api/product-feature/remove)\n\nDeletes the feature attachment to a product\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the product feature ID does not exist, this call raises [an error](#errors).\n\nDELETE /v1/products/:id/features/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc/features/prodft_BcMBZUWCIOEgEc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prodft_BcMBZUWCIOEgEc\",  \"object\": \"product_feature\",  \"deleted\": true}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The ProductFeature object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_codes",
    "markdown": "# Tax Code | Stripe API Reference\n\n[Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.\n\n## [The Tax Code object](https://docs.stripe.com/api/tax_codes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   A detailed description of which types of products the tax code represents.\n    \n*   A short name for the tax code.\n    \n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [Retrieve a tax code](https://docs.stripe.com/api/tax_codes/retrieve)\n\nRetrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a tax code object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_codes/txcd_99999999 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txcd_99999999\",  \"object\": \"tax_code\",  \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",  \"name\": \"General - Tangible Goods\"}\n```\n\n## [List all tax codes](https://docs.stripe.com/api/tax_codes/list)\n\nA list of [all tax codes available](https://stripe.com/docs/tax/tax-categories) to add to Products in order to allow specific tax calculations.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a data property that contains an array of up to limit tax codes, starting after tax code starting\\_after. Each entry in the array is a separate tax code object. If no more tax codes are available, the resulting array will be empty. This request should never return an error.\n\n```\ncurl -G https://api.stripe.com/v1/tax_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txcd_99999999\",      \"object\": \"tax_code\",      \"description\": \"Any tangible or physical good. For jurisdictions that impose a tax, the standard rate is applied.\",      \"name\": \"General - Tangible Goods\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Tax Code | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/entitlements/active-entitlement/object",
    "markdown": "# The Active Entitlement object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [Feature](https://docs.stripe.com/api/entitlements/feature) that the customer is entitled to.\n    \n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n\n### More attributes\n\nThe Active Entitlement object\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [Retrieve an active entitlement](https://docs.stripe.com/api/entitlements/active-entitlement/retrieve)\n\nRetrieve an active entitlement\n\n### Parameters\n\n*   The ID of the entitlement.\n    \n\n### Returns\n\nReturns an active entitlement\n\nGET /v1/entitlements/active\\_entitlements/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/active_entitlements/ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",  \"object\": \"entitlements.active_entitlement\",  \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"lookup_key\": \"seats-feature\",  \"livemode\": false}\n```\n\n## [List all active entitlements](https://docs.stripe.com/api/entitlements/active-entitlement/list)\n\nRetrieve a list of active entitlements for a customer\n\n### Parameters\n\n*   The ID of the customer.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of active entitlements for a customer\n\nGET /v1/entitlements/active\\_entitlements\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_9s6XKzkNRiz8i3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/active_entitlements\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ent_test_61QG5x2cU1GluFTYs41JqiESbLiX8C8O\",      \"object\": \"entitlements.active_entitlement\",      \"feature\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"lookup_key\": \"seats-feature\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Active Entitlement object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customers/object",
    "markdown": "# The Customer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   Mailing and shipping address for the customer. Appears on invoices emailed to this customer.\n    \n\n### More attributes\n\n*   #### \n    \n    cash\\_balancenullable objectExpandable\n    \n\n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    delinquentnullable boolean\n    \n\n*   #### \n    \n    invoice\\_credit\\_balanceobjectExpandable\n    \n*   #### \n    \n    invoice\\_prefixnullable string\n    \n\n*   #### \n    \n    next\\_invoice\\_sequencenullable integer\n    \n*   #### \n    \n    preferred\\_localesnullable array of strings\n    \n*   #### \n    \n    sourcesnullable objectExpandable\n    \n*   #### \n    \n    subscriptionsnullable objectExpandable\n    \n\n*   #### \n    \n    tax\\_idsnullable objectExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Create a customer](https://docs.stripe.com/api/customers/create)\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The ID of the PaymentMethod to attach to the customer.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n*   #### \n    \n    tax\\_id\\_dataarray of objects\n    \n\n### Returns\n\nReturns the Customer object after successful customer creation. Raises [an error](#errors) if create parameters are invalid (for example, specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\" \\  --data-urlencode email=\"jennyrosen@example.com\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Update a customer](https://docs.stripe.com/api/customers/update)\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Raises [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NffrFeUfNV2Hib \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [List all customers](https://docs.stripe.com/api/customers/list)\n\nReturns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\n\n### Parameters\n\n*   A case-sensitive filter on the list based on the customer’s `email` field. The value must be a string.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` customers, starting after customer `starting_after`. Passing an optional `email` will result in filtering to customers with only that exact email address. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/customers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cus_NffrFeUfNV2Hib\",      \"object\": \"customer\",      \"address\": null,      \"balance\": 0,      \"created\": 1680893993,      \"currency\": null,      \"default_source\": null,      \"delinquent\": false,      \"description\": null,      \"discount\": null,      \"email\": \"jennyrosen@example.com\",      \"invoice_prefix\": \"0759376C\",      \"invoice_settings\": {        \"custom_fields\": null,        \"default_payment_method\": null,        \"footer\": null,        \"rendering_options\": null      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"next_invoice_sequence\": 1,      \"phone\": null,      \"preferred_locales\": [],      \"shipping\": null,      \"tax_exempt\": \"none\",      \"test_clock\": null    }    {...}    {...}  ],}\n```",
    "title": "The Customer object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/migration-guide",
    "markdown": "# Migrate to billing meters | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate from usage records to billing meters.\n\nStripe is deprecating usage-records billing. Moving forward, you can migrate to billing meters, our only solution for usage-based billing. Billing meters provide the following advantages:\n\n*   High-throughput usage reporting\n*   One-hour reporting [grace period](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#grace-periods) for generating invoices\n*   [Collect usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#recording-usage) before creating a subscription\n\nHowever, we don’t support the following features:\n\n*   `max`, `last_ever`, and `last_during_period` [aggregation](https://docs.stripe.com/api/prices/object#price_object-recurring)\n*   Reporting usage in the Dashboard\n\nYou can continue to use usage records as you adopt billing meters.\n\n## Billing meter overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBilling meters allow you to track usage of a particular event. It supports high-throughput event ingestion and aggregation.\n\nUnlike usage records, billing meters don’t require customers to have subscriptions before reporting usage and a single meter can track usage across multiple customers.\n\nLearn more about billing meters in our [implementation guide](https://docs.stripe.com/billing/subscriptions/usage-based/implementation-guide).\n\n[\n\n## Create a meter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-meter)\n\nCreate a [billing meter](https://docs.stripe.com/api/billing/meter). Learn more about [configuring meters](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#configuring-meter).\n\n`curl https://api.stripe.com/v1/billing/meters \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=\"Alpaca AI\" \\  -d event_name=api_request \\  -d \"default_aggregation[formula]\"=sum`\n\n[\n\n## Create a new price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-price)\n\nCreate a new price associated with the billing meter. Make sure that the new price is on the same product as your old price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product={{PRODUCT_ID}} \\   -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d \"recurring[meter]\"={{METER_ID}} \\   -d currency=usd \\  -d unit_amount=100`\n\n[\n\n## Start recording usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#start-recording-usage)\n\n#### Note\n\nYou must continue to send [usage records](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage) to Stripe until the migration is completed.\n\nStart reporting usage to the Billing Meter API. Stripe doesn’t reflect this usage on customer invoices until they’re subscribed to the new price.\n\n`curl https://api.stripe.com/v1/billing/meter_events \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d event_name=api_request \\  -d timestamp=1712096183 \\  -d identifier={{IDEMPOTENCY_KEY}} \\   -d \"payload[stripe_customer_id]\"={{CUSTOMER_ID}} \\   -d \"payload[value]\"=1`\n\nLearn more about [recording usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#recording-usage).\n\n[\n\n## Plan subscription schedules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#plan-subscription-schedules)\n\nUse subscription schedules to automatically migrate to the new price at the end of the billing cycle. Learn more about [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n\nList the subscriptions associated with the old price.\n\n`curl -G https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d price={{OLD_PRICE_ID}} \\   -d \"expand[]\"=\"data.schedule\"`\n\nStripe returns a list of subscriptions associated with the old price. For example:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\":` \n\n`\"sub_1P1Y6gDxxK6kAaV0rS7ojBjh\"`\n\n`,       \"object\": \"subscription\",       ...       \"items\": {         \"object\": \"list\",         \"data\": [           {             \"id\":   \"si_PrGdqMmuM1DGbQ\"  ,             \"object\": \"subscription_item\",             ...             \"price\": {               \"id\": \"{{OLD_PRICE_ID}}\",               \"object\": \"price\",               ...               \"recurring\": {                 \"aggregate_usage\": \"sum\",                 \"interval\": \"month\",                 \"interval_count\": 1,                 \"trial_period_days\": null,                 \"usage_type\": \"metered\"               },               ...             },             ...           }         ],         ...       },       ...       \"schedule\": {         \"id\":   \"sub_sched_1P1XxjDxxK6kAaV0YygN4tf7\"  ,         \"object\": \"subscription_schedule\",         ...         \"current_phase\": {           \"end_date\": 1714759200,           \"start_date\": 1712167200         },         ...         \"phases\": [           {             ...             \"end_date\": 1714759200,             ...             \"items\": [               {                 ...                 \"price\": \"{{OLD_PRICE_ID}}\",                 ...               }             ],             ...             \"start_date\": 1712167200,             ...             \"trial_end\": 1712772000           }         ],         ...       },       ...     },     ...   ],   \"has_more\": false,   \"url\": \"/v1/subscriptions\" }`\n\nIf a subscription has a [schedule](https://docs.stripe.com/api/subscriptions/object#subscription_object-schedule), you must update the existing [subscription schedule](https://docs.stripe.com/api/subscription_schedules) to migrate to the new price at the end of a billing cycle. If no schedule exists for a subscription, create a new one.\n\nCreate a subscription schedule for each subscription associated with the old price.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=  {{SUBSCRIPTION_ID}}    `\n\nStripe returns a new subscription schedule object:\n\n`{   \"id\":` \n\n`\"sub_sched_1P1H37DxxK6kAaV0Iggc537m\"`\n\n`,   \"object\": \"subscription_schedule\",   ...   \"current_phase\": {     \"end_date\": 1714693634,     \"start_date\": 1712101634   },   ...   \"phases\": [     {       ...       \"end_date\": 1714693634,       ...       \"items\": [         {           ...           \"price\": \"{{OLD_PRICE_ID}}\",           ...         }       ],       ...       \"start_date\": 1712101634,       ...     }   ],   ...   \"status\": \"active\",   ... }`\n\nUpdate the subscription schedule to add a `phase` with the new price.\n\n`curl https://api.stripe.com/v1/subscription_schedules/sub_sched_1P1H37DxxK6kAaV0Iggc537m \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"phases[0][start_date]\"=1712101634 \\  -d \"phases[0][end_date]\"=1714693634 \\  -d \"phases[0][items][0][price]\"={{OLD_PRICE_ID}} \\   -d \"phases[1][items][0][price]\"={{NEW_PRICE_ID}}`\n\n## Test the migration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a test customer with a subscription associated with the old price.\n\n1.  Navigate to the [Customers tab](https://dashboard.stripe.com/test/customers).\n2.  Click **\\+ Add customer**.\n3.  Enter the name of the customer.\n4.  Navigate to the new customer.\n5.  Next to the Subscriptions header, click **+** to open the subscription drawer.\n6.  Select the old price.\n7.  Click **Create test subscription**.\n\nCreate a subscription schedule from the subscription.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=  {{SUBSCRIPTION_ID}}    `\n\nAdd a `phase` to the subscription schedule to migrate to the new price.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][start_date]\"=1710952582 \\  -d \"phases[0][end_date]\"=1713630982 \\  -d \"phases[0][items][0][price]\"={{OLD_PRICE_ID}} \\   -d \"phases[1][items][0][price]\"={{NEW_PRICE_ID}}`\n\n[Simulate the subscription change](https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions) with a test clock.\n\nLearn more about [testing subscriptions integrations](https://docs.stripe.com/billing/testing). You can use test clocks to test different scenarios, including mock usage reporting. Learn more about [test clocks](https://docs.stripe.com/billing/testing/test-clocks).",
    "title": "Migrate to billing meters | Stripe Documentation",
    "description": "Learn how to migrate from usage records to billing meters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/pricing-models",
    "markdown": "# Model usage-based pricing | Stripe DocumentationThe Stripe Docs logo\n\n## Model usage-based pricingLegacy\n\n## Learn about different pricing models for usage-based billing on Stripe.\n\n#### Note\n\nWith usage-based pricing models, you charge your customers based on how much of your service they use during the billing cycle, instead of explicitly setting quantities, as in the [per-seat](https://docs.stripe.com/products-prices/pricing-models#per-seat) and [flat rate](https://docs.stripe.com/products-prices/pricing-models#flat-rate) pricing models. (Another difference is that in the per-seat and flat-rate models, you could optionally collect payment for the billing cycle up front. With metered billing, you have to collect payment in arrears.) You must also [record and report usage](https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage).\n\nTogethere wants to charge on a per-minute basis for usage of their new conferencing service, where more usage drives the per-minute price lower for the customer.\n\nHere’s what that model looks like on Stripe:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pricing_model-metered-usage.43b16d41d299829bc3fd34ddc2d14b15.png)\n\nUsage-based pricing model\n\n### Usage types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor recurring purchases, you define how much to charge customers through `usage_types`\\-either licensed or metered.\n\n### Licensed usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Metered usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Package and standard pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Dashboard, you can select **Standard pricing** or **Package pricing** as pricing models. Both of these models map to the [licensed](https://docs.stripe.com/api/prices/create#create_price-recurring-usage_type) (`recurring[usage_type]='licensed'`) usage type. With both models, you specify the number of units when you create or update a subscription. Here’s how they differ:\n\n*   With **Standard pricing**, the quantity defaults to 1.\n*   With **Package pricing**, you set the unit amount to values of 2 or more.\n\n### Model usage-based pricing on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example shows how to create a metered usage pricing model. In this case, Togethere charges .07 USD per minute.\n\nTo create a metered usage pricing model on Stripe through the Dashboard:\n\nFirst, create the `Per-minute pricing` product. To learn about all the options for creating a product, see the [prices guide](https://docs.stripe.com/products-prices/manage-prices#create-product).\n\n1.  Go to the [Product catalog](https://dashboard.stripe.com/products).\n2.  Click **\\+ Add product**.\n3.  Enter the **Name** of the product: `Per-minute pricing`, in this case.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n\nNext, create the monthly price for the `Per-minute pricing` product.\n\nClick **Advanced pricing options**. Select **Usage-based**, **Per tier**, and **Graduated** for the **Pricing model**.\n\nCreate three graduated pricing tiers:\n\n|     | First unit | Last unit | Per unit | Flat fee |\n| --- | --- | --- | --- | --- |\n| For the first | 0   | 60  | 0.25 USD | 0.00 USD |\n| For the next | 61  | 120 | 0.20 USD | 0.00 USD |\n| For the next | 121 | ∞   | 0.15 USD | 0.00 USD |\n\nTo create a subscription using that price:\n\n1.  Go to the **Payments** > **Subscriptions** [page](https://dashboard.stripe.com/subscriptions).\n2.  Click **\\+ Create subscription**.\n3.  Find or add a customer.\n4.  Search for the `Per-minute pricing` product you created and select the price you want to use.\n5.  _(Optional)_ Select **Collect tax automatically** to use Stripe Tax.\n6.  Click **Start subscription** to start it immmediately or **Schedule subscription** to choose when to start it.\n\nThe subscription integration guide explains how to fit pricing models into a full integration.\n\n*   If you’re using Stripe Checkout, the next step is to [create a Checkout session](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted#create-session) for your site. Make sure you set up Stripe.\n*   If you’re using Stripe Elements, the next step is to [create a Customer](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#create-customer). Make sure you set up Stripe and the sample application.\n\nFor other versions of usage-based pricing, see the [advanced](#advanced) models section. Also learn how to set up [free trials](https://docs.stripe.com/billing/subscriptions/usage-based-legacy#trials) and other optional features for a usage-based billing integration.\n\n[\n\n## Advanced pricing models![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#advanced)\n\n### Flat rate and per-seat ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can subscribe the customer to two separate products to model a pricing structure that includes both a base fee and additional per-seat pricing. One product serves as the flat base price and the other product represents the variable per-seat pricing.\n\nTogethere charges a flat monthly rate for their service plus a tiered price for more than 50 users.\n\n#### Model flat rate and per-seat on Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo model this structure on Stripe, Togethere creates a **Product** and **Price** for the base fee:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Monthly Base Fee\" \\  -d product={{BASE_FEE_PRODUCT_ID}} \\   -d unit_amount=500 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=licensed`\n\nThen they create a monthly price that charges 15 USD per user:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Per-seat price\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=1500 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=licensed`\n\nHere’s how they subscribe a customer with three users to the base fee price and the per-user price:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"={{BASE_FEE_PRICE_ID}} \\   -d \"items[0][quantity]\"=1 \\  -d \"items[1][price]\"={{PER_SEAT_PRICE_ID}} \\   -d \"items[1][quantity]\"=3`\n\nThis results in a 50 USD charge every month: the 5 USD base monthly rate, plus 15 USD each for 3 users.\n\n### Flat rate with metered usage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also combine flat fees with usage-based pricing to charge a flat monthly rate in addition to charging for usage over the billing cycle.\n\nTo create a flat rate with a metered usage pricing model on Stripe through the [Products](https://docs.stripe.com/api/products) and [Prices](https://docs.stripe.com/api/prices) APIs:\n\n1.  Create the `Flat monthly fee` product.\n    \n    `curl https://api.stripe.com/v1/products \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d name=Per-seat`\n    \n2.  Create a price for the `Flat monthly fee` product.\n    \n    `curl https://api.stripe.com/v1/prices \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month`\n    \n3.  Create the `Meeting per minute usage` price.\n    \n    `curl https://api.stripe.com/v1/prices \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d nickname=\"Metered Monthly Plan\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=700 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered`\n    \n\nWhen you create subscriptions, specify both price IDs:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"={{FLAT_MONTHLY_FEE_PRICE_ID}} \\   -d \"items[0][quantity]\"=1 \\  -d \"items[1][price]\"={{METERED_USAGE_PRICE_ID}} \\   -d \"items[1][quantity]\"=1`\n\n### Decimal amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDecimal pricing is useful if you need to create pricing amounts that aren’t whole numbers. For example, if you’re running a cloud storage SaaS business, you can create a price that charges 0.05 cents for each MB used per month. Based on usage, the quantity of MB is then multiplied by 0.05 cents and rounded to the nearest whole cent.\n\n#### Creating objects with decimal amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [create prices](https://docs.stripe.com/api#create_price) with decimal amounts, specify `unit_amount_decimal` instead of `unit_amount`. `unit_amount_decimal` allows you to set the amount in the minor unit of the currency that you charge in. For example, you can set `unit_amount_decimal = 105.5` in USD to represent 105.5 cents, or 1.055 USD. `unit_amount_decimal` accepts decimals up to 12 decimal places.\n\nIf you plan to use [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing), you can specify `unit_amount_decimal` instead of `unit_amount`. You can also [create invoice items](https://docs.stripe.com/api/invoiceitems/create) with `unit_amount_decimal` instead of `unit_amount`.\n\nIn API responses, the integer `unit_amount` field isn’t populated if the object is created with a decimal value. For example, if you create a price with `unit_amount_decimal = 0.05`, the response contains `unit_amount = null` and `unit_amount_decimal = 0.05`. You can still pass integer values into `unit_amount_decimal`, in which case `unit_amount` is populated in the response. For instance, if you create a price with `unit_amount_decimal = 5`, the response contains `unit_amount = 5` and `unit_amount_decimal = 5.0`.\n\n#### Note\n\nIf your integration has event handling that uses `unit_amount` values and you begin using decimal amounts, you need to use `unit_amount_decimal` instead. This is important because `unit_amount` will be returned as `null` if the decimal amounts can’t be converted into integers, which could cause errors in your integration.",
    "title": "Model usage-based pricing | Stripe Documentation",
    "description": "Create your usage-based pricing model with Stripe Billing",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/usage-based-legacy/recording-usage",
    "markdown": "# Record usage for billing | Stripe DocumentationThe Stripe Docs logo\n\n## Record usage for billingLegacy\n\n## Learn how to record and report usage for your customers.\n\n#### Note\n\nThroughout each billing period, you need to report usage to Stripe so that customers are billed the correct amounts. You can maintain your own system for recording customer usage and provide usage information for subscriptions to Stripe.\n\nYou can share usage information with Stripe by creating [usage records](https://docs.stripe.com/api#usage_record_create) with a subscription item, quantity used, and a timestamp. How often you report usage is up to you. For example, you can run the code on an interval (for example, every 24 hours) for each active metered subscription. At the end of the billing period, Stripe automatically calculates the total price and [invoices](https://docs.stripe.com/billing/invoices/subscription) for all usage during the billing period.\n\n`curl https://api.stripe.com/v1/subscription_items/{{SUBSCRIPTION_ITEM_ID}}/usage_records \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X POST \\   -d quantity=100 \\   -d timestamp=1720792530 \\   -d action=increment`\n\n## Best practices for recording usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You need to write some of your own business logic before creating the usage record. Pull a record of a customer from your database and extract the customer’s Stripe subscription item ID and usage for the day. If you aren’t storing subscription item IDs, retrieve the subscription and check for [subscription items](https://docs.stripe.com/api/subscriptions/object#subscription_object-items).\n*   Use [idempotency keys](https://docs.stripe.com/api/idempotent_requests) to ensure usage isn’t reported more than once in case of latency or other issues.\n*   The `timestamp` has to be within the current billing period, otherwise the call fails.\n*   The default value for the `action` parameter is `increment`. This value assumes that the price is configured with `aggregate_usage=sum` and that you write usage as it occurs, passing it to Stripe with the current `timestamp`.\n*   A `set` value for the `action` parameter supports the case where you aggregate usage yourself, and configure the price with `aggregate_usage=last_during_period` or `aggregate_usage=last_ever`.\n*   The usage reporting endpoint is rate-limited, so you might need to exercise caution and avoid making too many separate usage records. It’s important to note that Stripe’s API rate limit is 100 calls per second per account. We can increase this to 200 calls per second per account on request. If you have a service that you expect to burst above this limit, consider “bundling” your product into amounts. For example, if you charge per 1000 requests, consider basing your product on “per 1k transactions” and send 1 usage record per 1000.\n\n### Clock drift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReporting usage outside of the current billing period results in an error. To account for clock drift between your server and Stripe’s systems, we provide a short grace period in the default aggregation mode (`aggregate_usage` = `sum`). For all other aggregation modes, the `timestamp` must be within the current period.\n\nDuring the first few minutes of each billing period, you can report usage that occurred within the last few minutes of the previous period. If the invoice for the previous period isn’t finalized, we add that usage to it. Otherwise, we bill that usage in the current period. After the grace period, you can’t report usage from the previous billing period.\n\nDon’t rely on the grace period for reporting usage outside of a billing period. It’s intended only to account for possible clock drift, and we don’t guarantee it.\n\n## Retrieve current usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve total usage for the current period, you can [retrieve the upcoming invoice](https://docs.stripe.com/api#upcoming_invoice) for the subscription. The usage is reflected as the `quantity` of the [invoice item](https://docs.stripe.com/api#invoiceitems) for a `subscription_item`. The total usage value may not be the most up-to-date quantity because slight processing delays can occur.\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d subscription={{SUBSCRIPTION_ID}}`",
    "title": "Record usage for billing | Stripe Documentation",
    "description": "Learn how to record and report usage for your customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/disputed-payments",
    "markdown": "# Disputed PayPal payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how dispute management works for PayPal, a digital wallet popular with businesses in Europe.\n\nThe risk of fraud or unrecognized PayPal payments is low because the customer must authenticate the payment with their PayPal account.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate any payment with their PayPal account to decrease the risk of fraud. However, customers can dispute PayPal payments if for example:\n\n*   They don’t receive the goods they paid for\n*   The received goods don’t match their description\n\nNote that your settlement choice when activating PayPal affects the funds flow for PayPal disputes. See [Choose settlement preference](https://docs.stripe.com/payments/paypal/choose-settlement-preference#refunds-and-disputes) for more context.\n\n## Dispute process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers can file a dispute on PayPal up to 180 calendar days from the date of purchase. They can also file a dispute through the payment instrument they used to complete the PayPal purchase (such as their bank).\n\nAfter the customer initiates a dispute, Stripe notifies you through:\n\n*   Email\n*   The [Stripe Dashboard](https://dashboard.stripe.com/disputes)\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n*   Push notification (if you’ve subscribed)\n\nDepending on the type of dispute and where it was filed, PayPal might offer the ability for you to communicate directly with the customer in an attempt to resolve the dispute before countering it. Currently, Stripe doesn’t offer this functionality and requests that you turn to PayPal to contact the customer.\n\nIf no agreement is reached, you can either accept or counter the dispute. If you choose to counter, Stripe requests that you [submit evidence](https://docs.stripe.com/disputes/responding#respond) that you fulfilled the purchase order in the [Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence helps PayPal determine if a dispute is valid or if they should reject it. The evidence you provide must contain as much detail as possible from what the customer provided at checkout. You must submit the requested information within 19 calendar days. PayPal aims to make a decision within 30 calendar days of evidence submission.\n\nIf you prefer to handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\n## Dispute resolution![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf PayPal resolves the dispute with you winning, the disputed amount will be returned to your balance.\n\nIf PayPal rules in favor of the customer, the dispute is lost and the balance charge becomes permanent.\n\nIn some cases, PayPal will allow a lost dispute to be appealed. Currently, Stripe does not support appeals and requests that you turn to PayPal to file an appeal. In these cases, the dispute will remain open on Stripe until a final resolution has been reached by PayPal. Please refer to PayPal to be notified on when a dispute becomes appealable.\n\nRead more about disputes on [how disputes work](https://docs.stripe.com/disputes/how-disputes-work) and [best practices for responding to disputes](https://docs.stripe.com/disputes/best-practices).\n\n## Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal might charge fees for disputes. The terms and amount of PayPal dispute fees are set by PayPal. Stripe does not charge any additional fees for PayPal disputes.\n\n## Testing your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe allows you to simulate a [disputed transaction](https://docs.stripe.com/disputes) by specifying `email` values that match the patterns described in [test scenarios](#scenarios) when you create a PaymentIntent (as part of the [billing details](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_data-billing_details)). You can choose from the different test scenarios to simulate disputes of all relevant categories.\n\nFor example, creating the PaymentIntent server-side and simulating a disputed transaction where the buyer claims they didn’t receive the product looks like:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_data[type]\"=paypal \\   --data-urlencode \"payment_method_data[billing_details][email]\"=\"dispute_not_received@example.com\"`\n\nIf using [Checkout](https://docs.stripe.com/payments/checkout) or [Payment Links](https://docs.stripe.com/no-code/payment-links), you can enter the email in the checkout form. Shortly after the payment has been completed, it will be disputed as `product_not_received`.\n\n### Test scenarios ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below displays the scenarios available to test. Each scenario produces a dispute shortly after a payment has been completed.\n\n`.*` represents any valid character in an email. For example, the pattern `.*dispute_duplicate@.*` is matched by an email such as `my_dispute_duplicate@mycompany.com`.\n\n| Email pattern | Scenario |\n| --- | --- |\n| `.*dispute_credit_not_processed@.*` | Tests a dispute for a payment where the customer claims they’re entitled to a full or partial refund because they returned the purchased product or didn’t fully use it, or the transaction was otherwise canceled or not fully fulfilled, but you haven’t yet provided a refund or credit. |\n| `.*dispute_duplicate@.*` | The customer claims they were charged multiple times for the same product or service. |\n| `.*dispute_fraudulent@.*` | The customer claims that the transaction is fraudulent and they did not authorize the transaction. |\n| `.*dispute_general@.*` | Tests a dispute for a payment where an uncategorized dispute has been opened. |\n| `.*dispute_not_received@.*` | The customer claims that they have not received the product or service they purchased. |\n| `.*dispute_product_unacceptable@.*` | The customer claims that the product or service they purchased was unacceptable or otherwise not as described. |\n| `.*dispute_subscription_cancelled@.*` | The customer claims that they were charged for a subscription after it was canceled. |\n\n### Evidence ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\n*   If you [respond using the API](https://docs.stripe.com/disputes/api), pass the value from the table as [uncategorized\\_text](https://docs.stripe.com/api/disputes/update#update_dispute-evidence-uncategorized_text).\n*   If you [respond in the Dashboard](https://docs.stripe.com/disputes/responding), enter the value from the table in the **Additional information** field. Then, click **Submit evidence**.\n\n| Evidence | Description |\n| --- | --- |\n| `winning_evidence` | The dispute is closed and marked as won. Your account is credited the amount of the charge. |\n| `losing_evidence` | The dispute is closed and marked as lost. Your account isn’t credited. |",
    "title": "Disputed PayPal payments | Stripe Documentation",
    "description": "Learn how dispute management works for PayPal, a digital wallet popular with businesses in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/s3",
    "markdown": "# Stripe connector for Amazon S3\n\n## Automate recurring file imports from your Amazon S3 bucket to Stripe.\n\nThis guide explains how to import files from Amazon S3 into the Stripe Data Management Platform. By following these steps, you set up an automated job for importing data to keep your Stripe products up-to-date.\n\n[\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#prerequisites)\n\nBefore starting the integration, make sure you have the following:\n\n1.  An active AWS account and S3 bucket with access to the relevant files.\n2.  Admin account access to the Stripe Dashboard.\n\n[\n\n## Prepare your Files in Amazon S3![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-2)\n\nTo validate your connection configuration, use well-formatted data in your S3 bucket. The configuration process shows you available files, and runs an initial sync when the connection is configured.\n\n1.  Visit your [Amazon S3 console](https://s3.console.aws.amazon.com/)\n2.  Make sure that your files are stored in a designated S3 bucket and organized according to your import preferences.\n    *   If you don’t currently have an S3 bucket, you can follow the [AWS guidelines for creating your first bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html).\n    *   Stripe has the following file requirements for successful retrieval:\n        *   File names must adhere to [S3 Object naming conventions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html).\n        *   The maximum file size is 1 GB.\n3.  Remember the bucket name and region because you need them for future steps.\n4.  Keep your AWS Console open to configure an IAM role in future steps.\n\n### Supported file formats![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   CSV\n*   TSV\n*   JSON\n*   JSONLINE\n*   For more formats, please [contact support](https://support.stripe.com/)\n\n[\n\n## Configure the Stripe Amazon S3 Connector to import files from your S3 Bucket![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-3)\n\n1.  Sign in to the [Stripe Data Management Connector Dashboard](https://dashboard.stripe.com/data-management/connectors)\n2.  Click **\\+ Set up connector** > **Amazon S3**.\n3.  Provide a unique connector name for this Connection. Consider using details about the data source, objects in the file, and product destination to create a strong unique name.\n4.  In your Amazon console, navigate to the [IAM console](https://console.aws.amazon.com/iam/).\n5.  The next step of the Stripe Amazon S3 Connector setup provides details to Create an IAM Role using a Custom trust policy.\n    *   In the navigation pane of the console, click **Policies** > **Create policy**.\n    *   To create your permission policy, select **JSON** and replace the existing policy text by copying and pasting the provided code block. In the Resource section of the **Policy editor** code block, replace `USER_TARGET_BUCKET` with your intended bucket name. Click **Next**. Under **Policy details**, add a policy name, along with any tags (optional), then click **Create policy**.\n    *   Return to the navigation pane of the console, then click **Roles** > **Create role**.\n    *   Choose the **Custom trust policy** role type, copy and paste the provided code block, then click **Next**.\n    *   To select your permission policy, locate the newly created permission policy in the list. Enable the checkbox to select the policy, scroll down, then click **Next**.\n    *   To create a role name, copy and paste the provided role name, then click **Create role**.\n6.  The following step of the Stripe Amazon S3 Connector setup establishes the connection between your Amazon S3 bucket and Stripe.\n    *   From the AWS Console, [find and provide your AWS Account ID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html#FindAccountId).\n    *   Provide the Bucket Name and Region saved from your AWS Console during Step 2.3.\n    *   If you use folders to organize your files in your Amazon S3 bucket, specify a folder within the above bucket.\n        *   If you specify a folder within the above bucket, we only fetch data from this folder, not the entire bucket.\n7.  After successfully setting up a new connector, Stripe fetches all data from the Amazon S3 bucket that was modified in the last 90 days.\n    *   We fetch data after every five minutes.\n    *   Only objects with a LastModified date later than the last sync are imported for recurring imports.\n8.  Step 4 previews the files available in the connected Amazon S3 bucket and allows you to associate them with a data template.\n    *   The file preview validates that your credentials connect Stripe with the expected Amazon S3 bucket and folder.\n    *   The data template associates this connection with an expected file format for initial and recurring imports.\n9.  Click **Done** to create an Active Data Connection and initiate the initial Data Import.\n    *   Stripe fetches all data from the Amazon S3 bucket that was modified in the last 90 days.\n    *   We fetch data once per day.\n\n[\n\n## Maintaining your Amazon S3 connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#section-4)\n\nAfter your connection is established, we fetch your data every 5 minutes. To monitor the health of your connection, you can perform the following actions:\n\n1.  Visit the [Stripe Data Management Connector dashboard](https://dashboard.stripe.com/data-management/connectors) for the status and last sync details of your established connections.\n2.  Manage a single Connection by clicking on a connector.\n    *   You can edit the connector name or data template, re-authenticate a broken connection, and delete a connection.\n3.  We recommend setting up an automated job to regularly deliver new files to your S3 bucket.\n4.  The Amazon List Object API doesn’t allow for filtering objects by LastModified. As a result, you must list all the contents of your bucket for each import. Make sure that you only allow the associated IAM role access to data that you intend to import to Stripe. We recommend limiting the number of files in your bucket below 50000. To achieve this, make sure that you set the expiry time for your objects accordingly.\n\n#### Interested in the Stripe Connector for S3?\n\nPlease provide your email address below and our team will be in touch.",
    "title": "Stripe connector for Amazon S3 | Stripe Documentation",
    "description": "Automate recurring file imports from your Amazon S3 bucket to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/payout-reconciliation",
    "markdown": "# PayPal payout reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reconcile payments made through PayPal, a common payment method in Europe.\n\nReconciliation is the process of matching and verifying payments that have been received and processed with the corresponding PayPal orders. It only applies to customers receiving their funds on PayPal, and not on Stripe. Stripe automatically [reconciles](https://docs.stripe.com/reports/payout-reconciliation) PayPal transactions before the payout, whereas this can’t be done if transactions settle outside of Stripe’s platform. When transactions settle outside of Stripe’s platform, you’ll use PayPal reporting available on your PayPal account or with sFTP for reconciliation.\n\nStripe provides two ways of supporting PayPal transaction reconciliation:\n\n*   (Recommended) Using the [reference](#use-reference) field. This is the preferred option if you have a businesses-generated order or invoice ID, which you can put in the reference field. After the payment is made and processed, `my_order_id` appears as `Invoice ID` in the PayPal settlement report.\n*   Using the [transaction\\_id](#use-transaction-id) from the [Charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal-transaction_id) object. When the payment is processed, `paypal_capture_id` appears as `Transaction ID` in the PayPal settlement report. This is recommended only if you don’t have a business-generated order ID.\n\n## Use Reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [reference](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_options-paypal-reference) field to populate your own reference for an order on a PayPal payment. One example of this is an Order ID from PayPal. This reference is visible to the buyer and also in the [settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/) on your PayPal account. To reconcile funds using a `reference`, you can include it as part of the [payment\\_method\\_options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-paypal) parameter when creating a PaymentIntent. You can use this `reference` to match payments made through Stripe with corresponding transactions in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/). Any subsequent transactions derived from the original Payment transaction, such as refunds and disputes, are associated with the given `reference`.\n\nThe following code sample shows the creation of a PaymentIntent with the `reference` set in `payment_method_options`:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_options[paypal][reference]\"=my_order_id`\n\nAfter the payment is made and processed, `my_order_id` is reflected as Invoice ID in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\n## Use the Charge object’s transaction ID ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [transaction\\_id](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal-transaction_id) field contains the ID used by PayPal to identify a transaction. To reconcile funds using a `transaction_id`, retrieve the `transaction_id` from the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-paypal) field in the Charge object. The `transaction_id` is present only if the payment has been captured. It’s used to match payments made through Stripe with corresponding transactions in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\nFor example, here’s how you can retrieve the `transaction_id` from the Charge object:\n\n`{   \"amount\": 1099,   \"amount_captured\": 1099,   \"payment_method_details\": {     \"paypal\": {       \"transaction_id\": \"paypal_capture_id\",       \"payer_id\": \"ZA889USQQDD37\",       \"payer_email\": \"jenny@example.com\",       \"payer_name\": \"Jenny Rosen\"     },     \"type\": \"paypal\"   },   \"balance_transaction\": \"txn_3MrOPxGsnWT9WMaQ19vg30v3\",   \"billing_details\": {     \"address\": {       \"city\": \"Co. Kerry\",       \"country\": \"IE\",       \"line1\": \"Skellig Michael\",       \"line2\": \"Great Skellig\",       \"postal_code\": \"12345\",`\n\nWhen the payment is processed, `paypal_capture_id` is appears as `Transaction ID` in the [PayPal settlement report](https://developer.paypal.com/docs/reports/sftp-reports/settlement-report/).\n\n## Access your PayPal reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can download your PayPal Settlement Report and other reports from paypal.com, or you can enable sFTP reporting by contacting PayPal.\n\nThe Settlement Report provides an end-to-end view of all balance-impacting transactions within a 24-hour period. This report is used to reconcile money moving events in a PayPal account with monies that are moved to a linked bank account.\n\nTo access the Settlement report:\n\n1.  [Log in](https://www.paypal.com/signin) to your PayPal business account.\n2.  Under **Activity**, select **All Reports**.\n3.  Select **Transactions > Settlement**.\n\nRead more about [PayPal reports and how to download them](https://www.paypal.com/us/cshelp/article/how-do-i-view-and-download-statements-and-reports-help145).",
    "title": "PayPal payout reconciliation | Stripe Documentation",
    "description": "Learn how to reconcile payments made through PayPal, a common payment method in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/supported-locales",
    "markdown": "# Supported locales | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the locale of the PayPal authorization page for your customer.\n\n### Supported locales![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the PayPal authorization page to your customer’s preferred locale via the [preferred\\_locale](https://docs.stripe.com/payments/paypal/accept-a-payment#customize-the-preferred-locale) property. See the table below for supported locales.\n\n| Value | Locale |\n| --- | --- |\n| cs-CZ | Czech - The Czech Republic |\n| da-DK | Danish - Denmark |\n| de-AT | German - Austria |\n| de-DE | German - Germany |\n| de-LU | German - Luxembourg |\n| el-GR | Greek - Greece |\n| en-GB | English - United Kingdom |\n| en-US | English - United States of America |\n| es-ES | Spanish - Spain |\n| fr-BE | French - Belgium |\n| fi-FI | Finnish - Finland |\n| fr-FR | French - France |\n| fr-LU | French - Luxembourg |\n| hu-HU | Hungarian - Hungary |\n| it-IT | Italian - Italy |\n| nl-BE | Dutch - Belgium |\n| nl-NL | Dutch - Netherlands |\n| pl-PL | Polish - Poland |\n| pt-PT | Portuguese - Portugal |\n| sk-SK | Slovak - Slovakia |\n| sv-SE | Swedish - Sweden |",
    "title": "Supported locales | Stripe Documentation",
    "description": "Customize the locale of the PayPal authorization page for your customer.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/session",
    "markdown": "# The Customer Portal Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Customer Portal Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/connect-your-paypal-account",
    "markdown": "# Connect Your PayPal Account | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to activate PayPal payments when you're ready to go live.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Caution\n\nIf you use [Connect](https://docs.stripe.com/connect), first check whether your setup is supported under [Connect support](https://docs.stripe.com/payments/paypal#connect). If you think your use case is supported, submit an onboarding request from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to get access to PayPal. Stripe sends email updates about the progress of all requests, and the current status is also reflected in your [Payment Methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nIf you’re not using [Connect](https://docs.stripe.com/connect), you can activate the PayPal payment method directly from the Stripe Dashboard.\n\n1.  Go to the [Payment Methods settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  Locate PayPal in the **Wallets** section.\n3.  Click **Turn on**.\n4.  Select your **settlement preference**. If you select **Add PayPal funds to your Stripe balance**, PayPal money flow is similar to other payment methods at Stripe. If you select **Keep PayPal funds in PayPal balance**, you’ll need to manage payouts on PayPal with the option to automate the frequency of payouts. Find more information about [settlement modes](https://docs.stripe.com/payments/paypal/choose-settlement-preference).\n5.  Click **Continue to PayPal** to complete the integration and connect your Stripe and PayPal accounts. You can connect an existing PayPal account or create a new one as part of the process.\n6.  After clicking **Continue to PayPal**, PayPal redirects you back to Stripe where you can check the status of your integration on the **Payment Methods settings** page.\n\n#### Note\n\nIn some cases, you might see your integration appear in a **pending** state after connecting your Stripe and PayPal accounts, which can happen for the following reasons:\n\n*   You haven’t confirmed the email address to activate your PayPal account.\n*   PayPal needs to perform additional verifications on your account. If you’ve verified all of these possibilities and think they don’t apply to your PayPal account, please [contact Stripe Support](https://support.stripe.com/) and we’ll help you resolve the issue.\n\n\\* Currently, only PayPal business accounts in the European Economic Area (excluding Hungary), the UK, and Switzerland are supported.\n\n## Switch to a different PayPal account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can switch to a different PayPal account in your Dashboard. It can be an existing account, or you can create a new one.\n\n#### Caution\n\nIf you have recurring payments enabled, switching PayPal accounts disables them. After switching accounts, you must re-enable recurring payments and collect mandates from buyers again.\n\n1.  Go to the [Payment Methods settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  In the **Wallets** section, find **Paypal**.\n3.  Expand the **PayPal** section.\n4.  Click **Switch account**.\n5.  Read the information dialog.\n6.  Click **Switch PayPal account**.\n\nSwitching accounts doesn’t take effect immediately. Payments continue to flow through your previous account until the new account is successfully connected.\n\nAfter switching PayPal accounts, payments processed with your previous account are still eligible for refunds and disputes.\n\nIn some cases, you might see your new PayPal account appear in a pending state on the Stripe dashboard. That can happen for the following reasons:\n\n*   You haven’t confirmed the email address to activate the new PayPal account.\n*   PayPal needs to perform additional verifications on the new account. If you believe that you’ve fulfilled all of the PayPal requirements, contact Stripe Support.\n\n## Start accepting PayPal payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee how to [accept PayPal payments](https://docs.stripe.com/payments/paypal/accept-a-payment) at Stripe.",
    "title": "Connect Your PayPal Account | Stripe Documentation",
    "description": "Learn how to activate PayPal payments when you're ready to go live.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/choose-settlement-preference",
    "markdown": "# Choose settlement preference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about settlement modes for PayPal payments.\n\nSettlement choice determines how you access and manage funds, use the Dashboard, perform reconciliation, and so on.\n\n## Getting started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a Connect user, your funds always settle on Stripe, similar to other payment methods. If you operate as a direct business, when you [connect your PayPal and Stripe accounts](https://docs.stripe.com/payments/paypal/connect-your-paypal-account) you can set the funds settlement preference for your PayPal payments. Read this guide to learn more about differences between PayPal and Stripe settlement options.\n\nIf you already use PayPal through Stripe, you can check your current settlement preference on the [Payment Methods Settings](https://dashboard.stripe.com/settings/payment_methods) page in the Stripe Dashboard.\n\n## Money flow and payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you settle funds from the PayPal payments on Stripe, you can access the money from your Stripe balance according to your [payouts](https://docs.stripe.com/payouts) schedule, similar to other payment methods at Stripe. The funds from the payments you receive are immediately transferred from PayPal to your Stripe balance, without the need for you to take any action.\n\nIf you settle PayPal payments to PayPal, you’ll need to manage payouts on PayPal.\n\n## Refunds and disputes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSettlement on Stripe uses the funds available in your Stripe account if you want to refund a payment or need to cover the funds from a dispute, similarly to other payment methods on Stripe. If PayPal charges a fee when a dispute closes, it’s withdrawn from your Stripe balance through a [Balance Transaction](https://docs.stripe.com/reports/balance-transaction-types) of type `adjustment`.\n\nFor settlement on PayPal, you can still manage refunds and disputes from your Stripe Dashboard, but the relevant funds are the funds on your PayPal account. If settle on PayPal, Stripe doesn’t transfer any funds from your PayPal account to your Stripe account or vice-versa. For that reason, make sure that you always have a positive balance in both accounts to cover expected refund amounts or disputes, and fees that PayPal might charge when the dispute closes.\n\n## Dashboard experience ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you settle your funds from PayPal payments on Stripe, the Stripe Dashboard is the same as with other payment methods on Stripe.\n\nIf you settle your PayPal funds on a PayPal account, the [balance transaction](https://docs.stripe.com/api#balance_transaction_object) linked to the corresponding payment has a zero amount regardless of the payment, because funds settle in your PayPal balance, and no money goes to your Stripe balance.\n\nAdditionally, the Gross and Net volume charts won’t reflect your sales volume from PayPal if you settle your funds on a PayPal account. In this case, we recommend using the Payment methods report to track the volume from PayPal sales.\n\nThe payment details view is also different if you settle your PayPal funds to your PayPal account. The **Net** value reflects the change on the net volume of your Stripe balance. This is a negative value of the fee amount that Stripe takes for the payment.\n\n## Reconciliation impact ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReconciliation is the process of matching and verifying payments that have been received and processed with the corresponding PayPal orders.\n\nWhen settling your funds on Stripe, you get automatic transactions reconciliation.\n\nIf you settle on PayPal, you need to manually reconcile the transactions. Learn about how Stripe provides support for PayPal [transaction reconciliation](https://docs.stripe.com/payments/paypal/payout-reconciliation).\n\n## Changing your settlement preference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf for any reason you need to change your current settlement mode, you can initiate the process from the Stripe Dashboard.\n\n1.  Go to the [Payment Methods Settings page](https://dashboard.stripe.com/settings/payment_methods).\n2.  Find PayPal settings.\n3.  Click **Contact Support to change**. You’ll be redirected to the FAQ page where you can file a support ticket.\n4.  File a support ticket to request a change.\n\nThe change shows up in the PayPal settings accordingly.\n\n## Currency conversions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA currency conversion occurs when the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\") differs from the settlement currency. See [currency conversions](https://docs.stripe.com/connect/currencies#currency-conversions) for additional detail. Prevent currency conversions by adding a [settlement currency](https://docs.stripe.com/payouts/alternative-currencies#setting-up-your-bank-account-for-alternative-currency-payouts) for every currency you present to your customers.",
    "title": "Choose settlement preference | Stripe Documentation",
    "description": "Learn about settlement modes for PayPal payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/orgs/setup",
    "markdown": "# Supported Organization setups | Stripe DocumentationThe Stripe Docs logo\n\n## Supported Organization setupsInvite only\n\n## Learn about different account setups that you can add to an organization.\n\nOrganizations support the following account setups: multiple standalone accounts, platforms, and connected accounts.\n\n## Multiple standalone accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s common to manage multiple Stripe accounts that represent different business lines, countries of operation, legal entities, and acquisitions.\n\n![Multiple standalone accounts](https://b.stripecdn.com/docs-statics-srv/assets/structure_1_before.c8b529f41e4ff0dbe8beea36e1dca3b6.png)\n\nMultiple standalone accounts representing different business lines.\n\nAfter you [add these accounts to an organization](https://docs.stripe.com/get-started/account/orgs/build), you can search and download consolidated reports across your accounts without any changes to your Stripe integration. After you create an organization, you can add new business lines or add existing accounts.\n\n![Organization with multiple standalone accounts](https://b.stripecdn.com/docs-statics-srv/assets/structure_1.fccd75f80ce664be76a7f5dc6f51008b.png)\n\nOrganization with multiple accounts representing different business lines.\n\n## Multiple platform accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have several platform accounts that correspond to different countries of operation or business lines, you can add them to an organization.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_2_before.fba9132b399f3a6155b36fdb092493b2.png)\n\nMultiple standalone platform accounts representing different business lines, each with connected accounts.\n\nAfter you add your platforms to an organization, you can search for connected accounts under all your platforms, as well as data within each platform account.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_2.7a6b0bd2eb1da064944eb16f21e047d0.png)\n\nOrganization with multiple platform accounts representing different business lines, each with connected accounts.\n\n## Multiple connected accounts under a Connect platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn certain cases, you might own multiple connected accounts under a platform. This commonly occurs in franchise groups where several franchises are under common ownership.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_3_before.702c4fa894523d6e1a66e1111b9d3bac.png)\n\nMultiple connected accounts (Acme Dealer of Seattle and Acme Dealer of Tacoma) that belong to the same owner and under a platform.\n\nEven though your connected accounts are under a platform, you can still add them to an organization. This allows you to use the unified search and reporting across your accounts.\n\n![Organization with multiple Connect platforms](https://b.stripecdn.com/docs-statics-srv/assets/structure_3.e8675ca3654841a4397bc2e2eacc4771.png)\n\nOrganization (Acme Dealer Group) with multiple connected accounts (Acme Dealer of Seattle and Acme Dealer of Tacoma) under common ownership.\n\n## Multiple business lines represented as connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you might have represented different business lines as connected accounts under one platform account, even though your business isn’t a traditional platform or marketplace. This is common if you want to consolidate payment integrations or clone payment methods stored in the platform to connected accounts.\n\n![Organization with multiple accounts setup using Connect](https://b.stripecdn.com/docs-statics-srv/assets/structure_4_before.e35e09f6d8127fb01f240a30834b99b7.png)\n\nA platform account and multiple connected accounts, each representing different business lines.\n\nYou can create an organization that encompasses the platform account and connected accounts so that your team can benefit from unified search and reporting across all the accounts, without impacting your payment integrations.\n\n![Organization with multiple accounts setup using Connect](https://b.stripecdn.com/docs-statics-srv/assets/structure_4.29084c115c8f08dc82468dfc03005096.png)\n\nOrganization with a platform account and multiple connected accounts, representing different business lines.",
    "title": "Supported Organization setups | Stripe Documentation",
    "description": "Learn about different account setups that you can add to an organization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/orgs/build",
    "markdown": "# Build an Organization | Stripe DocumentationThe Stripe Docs logo\n\n## Build an OrganizationInvite only\n\n## Select accounts to combine into an organization.\n\nCreate an organization and manage your accounts and your teams from a single location in the Stripe Dashboard.\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must complete the following prerequisites before you can create an organization:\n\n1.  The individual responsible for creating the organization must be assigned to the [Super Administrator role](https://docs.stripe.com/get-started/account/teams/roles) in each account that’s added to the organization. Stripe automatically assigns the Super Administrator role to the owner of the account.\n2.  If you configure single sign-on (SSO) for your accounts, make sure that all your accounts share the same SSO integration. If two accounts have different SSO configurations, you must update one of the their SSO configurations to match, or leave one of the accounts out of the organization.\n\n## Create an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an organization from one of your Stripe accounts:\n\n1.  Open the account picker dropdown from anywhere in the Dashboard, then select **Create new organization**.\n2.  Enter your **Organization name**.\n3.  Select the accounts you want to add to the organization.\n4.  Agree to the [Terms of Service](https://stripe.com/legal/organizations).\n5.  Click **Create**.\n\nAfter you choose the account from which to create the organization, the organization and its data is colocated in the data region associated with the account used to establish the organization.\n\n## Add an existing account to an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you create an organization, you can add an existing account. To do this, you must possess the Super Administrator role in both the account and the organization.\n\n1.  Click **Add account** above the list of accounts in the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Select **Choose from existing accounts**.\n3.  Select the accounts you want to add to the organization. If you don’t have a Super Administrator role assigned in an account, the Super Administrator of the account receives an invitation to join the organization.\n4.  Click **Add**.\n\n## Add a new account to an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Click **Add account** above the list of accounts in the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Select **Create a new account in your organization**.\n3.  Enter your **Account name**, then select the country of operation and type of business.\n4.  _(Optional)_ Select any legal entity, public details, or payout bank account information you want to copy from existing accounts within your organization.\n5.  Click **Create account**.\n\n## Add a new account outside of an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Open the account picker dropdown from anywhere in the Dashboard, then select **Create new account**.\n2.  Select **Create an account outside of your organization**.\n3.  Enter your **Account name**, then select the country of operation.\n4.  Click **Create**.\n\n## Remove an account from an organization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf an account no longer belongs to your business, you can remove it from your organization.\n\n1.  Click the name of your organization in the account picker to open the [Organization Dashboard](https://dashboard.stripe.com/org/overview).\n2.  Next to the name of the account you want to remove, click the overflow menu ().\n3.  Click **Remove from org**.\n4.  After you remove every account from the organization, we permanently close the organization.\n\n## Centralize your team management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you create an organization, you can invite additional users to access your organization. To access your [organization team management settings](https://docs.stripe.com/get-started/account/orgs/team):\n\n1.  Open the [Organization Dashboard](https://dashboard.stripe.com/org/overview) by clicking your organization’s name in the account picker.\n2.  Click **Settings**.\n3.  Click **Team management**.",
    "title": "Build an Organization | Stripe Documentation",
    "description": "Select accounts to combine into an organization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/orgs/sso",
    "markdown": "# Organization-level SSO | Stripe DocumentationThe Stripe Docs logo\n\n## Organization-level SSOInvite only\n\n## Manage single sign-on (SSO) for all accounts within your organization.\n\nIf your business operates across multiple Stripe accounts and uses single sign-on (SSO) to authenticate users, you can centrally configure SSO with Stripe Organizations. You can add accounts that already have SSO configured to an organization, or configure SSO for all your accounts after you create an organization.\n\n## Add accounts that you configured with SSO to an organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have already configured SSO across multiple accounts, your accounts must share the same SSO settings before you can add them to an organization. To do this, you must consolidate separate identity provider (IdP) apps and SSO integrations for each Stripe account into a single integration per IdP. Learn how to [consolidate SSO integrations for your existing Stripe accounts](https://docs.stripe.com/get-started/account/orgs/sso-consolidation).\n\nWhen you create your organization, Stripe consolidates the SSO settings of your accounts under your organization’s [user authentication](https://dashboard.stripe.com/org/settings/security/authentication) settings. This action changes the SSO settings in each individual account read-only. Users of the account can still sign into their accounts without using SSO. However, you can only edit specific settings, such as settings related to verified domains and enforcement, at the organization level.\n\n## Configure SSO throughout an organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstead of setting up SSO separately in each account, you can centrally configure SSO throughout all accounts in your organization. Any organization-level verified domains or SSO configurations apply to all accounts within the organization.\n\n### SSO settings for each domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can configure separate SSO settings for each verified domain or reuse the same SSO settings for multiple domains. For example, within the same organization, you can require SSO for one domain, set SSO to **Optional** for another, or disable it entirely to enable email and password logins.\n\n### Multiple Identity Providers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe allows you to have multiple IdPs when each verified domain has only one IdP. For example, you can configure users with a `rocketrides.com` email address to authenticate with Okta and configure users with a `rocketdelivery.com` email address to authenticate with AzureAD.\n\n## Assign account-level and organization-level roles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOrganization-level SSO operates similarly to SSO in a single account. When Stripe receives a SAML assertion from an IdP, we examine the accounts and roles specified within that SAML assertion. Based on this information, Stripe assigns roles to the user. You can assign a single account-level role, a single organization-level role, or a combination of both account-level and organization-level roles.\n\nWhen you assign these roles, use the `Stripe-Role-{accountID}` or `Stripe-Role-{org-id}` prefixes for the account and organization IDs respectively. We assign claims that include an account ID at the account-level, and claims that include organization IDs at the organization-level. Learn more about [account-level and organization-level roles](https://docs.stripe.com/get-started/account/orgs/team).\n\nThe snippet of the SAML assertion below has three claims being made for the user:\n\n1.  In `acct_ONE` the user is being assigned the `developer` role\n2.  In `acct_TWO` the user is being assigned the `developer` role\n3.  In `org_ALPHA` the user is being assigned the `view-only` role\n\nAs a result of these assertions, Stripe grants this user a session with the `developer` role in the `acct_ONE` and `acct_TWO` accounts. Additionally, we assign the `view-only` role in the `org-ALPHA` Organization and all accounts within that Organization:\n\n      `<saml2:Attribute Name=\"Stripe-Role-acct_ONE\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">developer</saml2:AttributeValue>       </saml2:Attribute>       <saml2:Attribute Name=\"Stripe-Role-acct_TWO\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">developer</saml2:AttributeValue>       <saml2:Attribute Name=\"Stripe-Role-org_ALPHA\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">         <saml2:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">view_only</saml2:AttributeValue>`",
    "title": "Organization-level SSO | Stripe Documentation",
    "description": "Manage single sign-on (SSO) for all accounts within your organization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/orgs/team",
    "markdown": "# Manage your team | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your teamInvite only\n\n## Learn how to invite and interact with team members in your organization.\n\nYou can manage your team from the [Team](https://dashboard.stripe.com/settings/team) page. Administrators can update the team by adding or removing members, and changing the roles assigned to members. You can view all team members, and filter their activity in the security history. You can also manage two-factor authentication settings for an individual or the whole team.\n\n## Two-factor authentication controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports two-factor authentication (2FA) through TouchID, security key, SMS, and authenticator apps, such as Google Authenticator. As an additional security measure, we recommend that all users register for 2FA.\n\n### Require 2FA for all users in an Organization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo require 2FA for Organization users, you must be assigned to the Administrator or Super Administrator roles:\n\n1.  Navigate to the [User Authentication](https://dashboard.stripe.com/org/settings/security/authentication) page.\n2.  Enable **Require two-step authentication for all team members**.\n\nAfter you enable this option, all users must register a 2FA device during their next login, which requires them to complete a 2FA challenge during all subsequent login attempts.\n\n### Reset 2FA for a single user![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a single user loses access to their 2FA devices, an Administrator or Super Administrator must reset the compromised user’s 2FA settings:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the compromised user’s name.\n3.  Click **Reset two-factor authentication**.\n\nStripe sends an email to the compromised user’s registered email address with instructions on how they can reset their 2FA devices.\n\n## View and filter your security history![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view your security-related events, navigate to the [Security history](https://dashboard.stripe.com/settings/security_history) page. You can filter your security filter by date, user, action type, and so on. Your user-based security history filters include:\n\n*   IP Address\n*   User\n*   API Key\n*   Device\n\n**Action filters** categorize hundreds of different actions based on product areas (for example, Billing, Radar, or Checkout). You can export your security history as a **CSV** file.\n\n## Team management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Organization-level and account-level roles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor every account you have access to, you must assign users either an organization-level or account-level role. Organization-level roles grant users access to all accounts within the Organization, including the Organization itself. Account-level roles allow users to access a specific assigned account with the assigned role.\n\nLet’s say that your organization contains three accounts: Banking, Finance, and Consulting. In this scenario, you can assign the following roles:\n\n*   **Organization-level role**: If you assign a user the ‘IAM Administrator’ role, they possess that role in all three accounts, as well as within the Organization itself. This grants them access to team management for all three accounts, in addition to Organization-level team management.\n*   **Account-level role**: If you assign a user the ‘IAM Administrator’ role in the Banking account, their access is limited solely to the IAM role within the Banking account. They can manage account-level teams exclusively within that account. However, this role doesn’t grant access to other accounts or Organization-level team management.\n\n## Differences in team management with Organizations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Organizations to manage your team either at the organization-level _or_ at the account-level.\n\n*   **Manage your team for an account**: Add, remove, and edit team members of an account, as well as update the roles of users associated with that account, in the [Team and security](https://dashboard.stripe.com/settings/team) page.\n    \n*   **Manage your team for an organization**: Manage user access and roles for specific accounts in the [Team](https://dashboard.stripe.com/org/settings/team) page. From here, you can also manage team members by granting access to multiple accounts simultaneously or providing access to the entire organization. You can only access this page if you have an Organization-level role.\n    \n\nYou can view all of the team members within your organization in the [Team](https://dashboard.stripe.com/org/settings/team) page. Additionally, you can:\n\n*   Invite new members directly.\n*   Edit members.\n*   Grant members access to additional accounts.\n*   Select the specific accounts that you want to grant access to.\n*   Remove members from your organization.\n\n### Add a team member![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a new team member:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/org/settings/team) page.\n2.  Click **Add Member**.\n3.  Add the email address of the user you want to invite. To invite multiple team members with the same role and access, enter the first email address, follow it with a space or a comma, then enter the next email, and continue this pattern for all required email addresses.\n4.  Select the [User Roles](https://docs.stripe.com/get-started/account/teams/roles) that you want to give to this team member. You can give multiple roles to a single user within the same account.\n5.  Select the account(s) that you want to give this user access to. You can select individual accounts, or grant access to the entire organization. Org-level access will give users access to all accounts within the organization, as well as access to the organization itself.\n6.  Click **Send Invites** to send the email with the steps for creating their Stripe Account.\n\n### Remove a team member![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remove an existing team member:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the user’s profile from the list of team members.\n3.  Click the overflow menu ().\n4.  Click **Remove member** to cancel this users’ access to this Stripe account immediately. This won’t cancel this user’s access to other accounts they have access to.\n\n### Edit a team member’s access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo edit an existing team member’s access:\n\n1.  Navigate to the [Team](https://dashboard.stripe.com/settings/team) page.\n2.  Click the user’s profile from the list of team members.\n3.  Click **Manage roles**.\n4.  Choose at least one role that you want to assign to this user.\n5.  _(Optional)_ To remove the user, click **Remove member**.\n6.  Choose the accounts you want to assign roles in. You can add new accounts, remove accounts, or grant organization-level access.\n\n### View all users in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view all team members within an organization, navigate to the [Team](https://dashboard.stripe.com/org/settings/team) page. You can filter by:\n\n*   Role\n*   Name\n*   Email\n*   Status\n\nYou can export this information as a **CSV** file.",
    "title": "Manage your team | Stripe Documentation",
    "description": "Learn how to invite and interact with team members in your organization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded",
    "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "Types of events | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events/types?event_types-invoice.paid",
    "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "Types of events | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/connect",
    "markdown": "# Connect platforms using the Sources API\n\n## Connect platforms using the Sources APIDeprecated\n\n## Considerations for Stripe Connect platforms adding support for new payment methods using the Sources API.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platform owners can make use of additional payment methods supported with Sources. To learn more about creating payments for connected users, and which approach is best for you, refer to our Connect [payments and fees documentation](https://docs.stripe.com/connect/charges).\n\n## Creating destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you opt for [destination charges](https://docs.stripe.com/connect/destination-charges), you should create Sources on your platform directly and create Charges using the appropriate destination parameter. [Customers](https://docs.stripe.com/api/customers \"Customers\") are charged by your platform, which then transfers the necessary amount to the destination account.\n\nWith destination charges that use cards, your platform name appears on statement descriptors and the charge is attributed to the connected account. With destination charges that use alternative payment methods (APMs), your platform name appears on statement descriptors but the charge is attributed to your platform.\n\n## Creating direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you opt for direct charges, you will need to make sure that the connected account is onboarded on the payment method you intend to use (see below). Direct charges require creating sources on connected accounts. You can do so by passing `source.stripeAccount` with a value of a connected account’s ID when using Stripe.js.\n\n`// Set the connected Stripe Account on which the source should be created var stripe = Stripe(`\n  \n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {stripeAccount: \"{{CONNECTED_STRIPE_ACCOUNT_ID}}\"}, );  stripe.createSource({   type: 'ideal',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: 'https://shop.example.com/crtA6B28E1',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nIf you’re creating sources server-side, you can make use of [authentication using the Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) with any of our supported libraries.\n\n### Cloning card Sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCard Sources (because they are not intrinsically tied to your platform as they do not require any authentication [flow](https://docs.stripe.com/sources#flow-for-customer-action)) can be created on your platform and then cloned to a connected account to create direct charges there.\n\nOnce you created a card Source and attached it to a Customer (see [Sources and Customers](https://docs.stripe.com/sources/customers) for more details on how these two objects interact), you can clone that card Source on a connected account using the connected account’s ID as the `Stripe-Account` header:\n\n`curl https://api.stripe.com/v1/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"cus_AFGbOSiITuJVDs\" \\   -d \"original_source\"=\"src_19YP2AAHEMiOZZp1Di4rt1K6\" \\   -d \"usage\"=\"reusable\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nCard Sources are generally `reusable`. However, when cloning them, you can override the usage to constrain how the connected account uses them. You do so by specifying the `usage` as `single_use` when cloning the Source.\n\nIf you are creating reusable card Sources on your connected account, you should make sure to attach them to Customers before charging them. Please refer to [Sources and Customers](https://docs.stripe.com/sources/customers) for more details on how to attach and manage Sources on Customers.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Supported Payment Methods](https://docs.stripe.com/sources)\n*   [Sources API reference](https://docs.stripe.com/api#sources)\n*   [Best Practices Using Sources](https://docs.stripe.com/sources/best-practices)",
    "title": "Connect platforms using the Sources API | Stripe Documentation",
    "description": "Considerations for Stripe Connect platforms adding support for new payment methods using the Sources API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/mobile/ios/sources",
    "markdown": "# Getting started with Sources in the iOS SDK\n\n## Learn how to use Sources in your iOS application.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nCreating a payment using [Sources](https://docs.stripe.com/sources) with the iOS SDK is a multi-step process:\n\n1.  [Create an STPSource object](#create-an-stpsource-object) that represents your customer’s payment method.\n2.  [Check if further action is required](#check-if-further-action-is-required) from your customer.\n\nIf no further action is required:\n\n*   Confirm the source is ready to use.\n*   Create a charge request on your backend using the source.\n\nIf further action is required:\n\n*   Present the user with any information they may need to authorize the charge.\n*   On your backend, listen to Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to create a charge with the source.\n*   In your app, display the appropriate confirmation to your customer based on the source’s status.\n\n[](#create-an-stpsource-object)\n\nOnce you’ve collected your customer’s payment details, you can use the `STPAPIClient` class to create a source. First, assemble an `STPSourceParams` object with the payment information you’ve collected. Then, pass this object to `STPAPIClient`’s `createSourceWithParams:` method.\n\nTo create an `STPSourceParams` object, use one of the helper constructors we provide, which specify the information needed for each [payment method](https://docs.stripe.com/sources).\n\n[](#check-if-further-action-is-required)\n\nTo determine whether further action is required from your customer, check the `flow` property on the newly created `STPSource` object. If `flow` is `STPSourceFlowNone`, no further action is required. For example, if you create a source for a card payment, its status is immediately set to `STPSourceStatusChargeable`. No additional customer action is needed, so you can tell your backend to create a charge with the source right away.\n\n`let cardParams = STPCardParams() cardParams.name = \"Jenny Rosen\" cardParams.number = \"4242424242424242\" cardParams.expMonth = 12 cardParams.expYear = 18 cardParams.cvc = \"424\"  let sourceParams = STPSourceParams.cardParams(withCard: cardParams) STPAPIClient.shared.createSource(with: sourceParams) { (source, error) in     if let s = source, s.flow == .none && s.status == .chargeable {         self.createBackendChargeWithSourceID(s.stripeID)     } }`\n\nIf the source’s flow is not `STPSourceFlowNone`, then your customer needs to complete an action before the source can be used in a charge request.\n\n| Flow | Description |\n| --- | --- |\n| `STPSourceFlowRedirect` | Your customer must be redirected to the [payment method](https://docs.stripe.com/sources)’s website or app to confirm the charge. See the section below for more information. |\n| `STPSourceFlowReceiver` | Your customer must push funds to the account information provided in the Source object. See the documentation for the specific [payment method](https://docs.stripe.com/sources) you are using for more information. |\n| `STPSourceFlowVerification` | Your customer must verify ownership of their account by providing a code that you post to the Stripe API for authentication. See the documentation for the specific [payment method](https://docs.stripe.com/sources) you are using for more information. |\n\nIf the source requires further action from your customer, your iOS app should _not_ tell your backend to create a charge request. Instead, your backend should listen for the `source.chargeable` webhook event to charge the source. This ensures that the source is charged even if the user never returns to your app after taking the required action. See [best practices](https://docs.stripe.com/sources/best-practices) for more information on supporting different payment methods using webhooks.\n\n## Redirect your customer to authorize a source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor sources that require redirecting your customer to authorize the payment, you need to specify a return URL when you create the source. This allows your customer to be redirected back to your app after they authorize the payment. For this return URL, you can either use a custom URL scheme or a universal link supported by your app. For more information on registering and handling URLs in your app, refer to the Apple documentation:\n\n*   [Implementing custom URL schemes](https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW10)\n*   [Supporting universal links](https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html)\n\nTo handle redirecting your customer to the URL in the source object’s `redirect.url` parameter, we recommend using `STPRedirectContext`, which you can use to open the URL in `SFSafariViewController`, if available, or mobile Safari otherwise. To use `STPRedirectContext`, you’ll need to first set up your app delegate to forward URLs to the Stripe SDK.\n\n`// This method handles opening native URLs (for example, \"your-app://stripe-redirect\") func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {     let stripeHandled = StripeAPI.handleURLCallback(with: url)     if (stripeHandled) {         return true     } else {         // This was not a stripe url – do whatever url handling your app         // normally does, if any.     }     return false }  // This method handles opening universal link URLs (for example, \"[https://example.com/stripe_ios_callback](https://example.com/stripe_ios_callback)\") func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {     if userActivity.activityType == NSUserActivityTypeBrowsingWeb {         if let url = userActivity.webpageURL {             let stripeHandled = StripeAPI.handleURLCallback(with: url)             if (stripeHandled) {                 return true             } else {                 // This was not a stripe url – do whatever url handling your app                 // normally does, if any.             }         }     }     return false }`\n\n`STPRedirectContext`’s completion block is called after your customer returns to your app. At this point, the user may or may not have completed the authorization process. You can use webhooks on your own server to receive notification of a change in status of the source’s chargeable state. See [best practices](https://docs.stripe.com/sources/best-practices) for more information on how to build a confirmation screen when using sources.\n\nIf you’d like more help, check out the [example app](https://github.com/stripe/stripe-ios/tree/master/Example/Non-Card%20Payment%20Examples) that demonstrates creating a payment using several different payment methods.",
    "title": "Getting started with Sources in the iOS SDK | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/mobile/android/sources",
    "markdown": "# Getting started with Sources in the Android SDK\n\n## Learn how to use Sources in your Android application.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nCreating a payment using [Sources](https://docs.stripe.com/sources) with the Android SDK is a multi-step process:\n\n1.  [Create a Source object](#create-source-object) that represents your customer’s payment method.\n2.  [Check if further action is required](#check-if-further-action-is-required) from your customer.\n\nIf no further action is required:\n\n1.  Confirm the source is ready to use.\n2.  Create a charge request on your backend using the source.\n\nIf further action is required:\n\n1.  Present the user with any information they may need to authorize the charge.\n2.  On your backend, listen to Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to create a charge with the source.\n3.  In your app, display the appropriate confirmation to your customer based on the source’s status.\n\n[](#check-if-further-action-is-required)\n\nSome payment methods require your customer to complete a certain action before the source can be used in a charge request. For instance, customers using [giropay](https://docs.stripe.com/sources/giropay) must be [redirected](#redirecting-your-customer) to their online banking service to authorize the payment.\n\n`SourceParams giropayParams = SourceParams.createGiropayParams(         100,         \"Customer Name\",         \"yourapp://post-authentication-return-url\",         \"a purchase description\"); // Note: this is a synchronous method -- you should not run it on the UI thread Source giropaySource = stripe.createSourceSynchronous(giropayParams); if (Source.REDIRECT.equals(giropaySource.getFlow())) {     String redirectUrl = giropaySource.getRedirect().getUrl();     // then go to this URL, as shown below. }`\n\nFor sources that require redirecting your customer, you must specify a return URL when creating the source. This redirect URL should be unique and used consistently for your application. Do not use the same redirect URL in other applications, as it can result in a payment attempt that opens the wrong application after the redirect.\n\n## Redirect your customer to authorize a source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor sources that require your customer to complete an action (for example, verify using 3D Secure), redirect the customer out of your application to complete this step.\n\n`String externalUrl = mThreeDSource.getRedirect().getUrl(); // We suggest popping up a dialog asking the user // to tap to go to their browser so they are not // surprised when they leave your application. Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(externalUrl)); startActivity(browserIntent);`\n\nOnce the customer has completed the required action, they are redirected to the URL that was provided when creating the source.\n\nWhen declaring your activity that creates redirect-based sources, list an `intent-filter` item in your `AndroidManifest.xml` file. This allows you to accept links into your application. Your activity must include `android:launchMode=\"singleTask\"` or else a new copy of it is opened when your customer comes back from the browser.\n\n`<activity     android:name=\".activity.PollingActivity\"     android:launchMode=\"singleTask\"     android:theme=\"@style/SampleTheme\">     <intent-filter>         <action android:name=\"android.intent.action.VIEW\"/>         <category android:name=\"android.intent.category.DEFAULT\"/>         <category android:name=\"android.intent.category.BROWSABLE\"/>         <data             android:scheme=\"yourapp\"             android:host=\"post-authentication-return-url\"/>     </intent-filter> </activity>`\n\nTo receive information from this event, listen for your activity getting started back up with a new Intent using the `onNewIntent` lifecycle method.\n\n`@Override protected void onNewIntent(Intent intent) {     super.onNewIntent(intent);     if (intent.getData() != null && intent.getData().getQuery() != null) {         // The client secret and source ID found here is identical to         // that of the source used to get the redirect URL.          String host = intent.getData().getHost();         // Note: you don't have to get the client secret         // and source ID here. They are the same as the         // values already in your source.         String clientSecret = intent.getData().getQueryParameter(QUERY_CLIENT_SECRET);         String sourceId = intent.getData().getQueryParameter(QUERY_SOURCE_ID);         if (clientSecret != null                 && sourceId != null                 && clientSecret.equals(redirectSource.getClientSecret())                 && sourceId.equals(redirectSource.getId())) {             // Then this is a redirect back for the original source.             // You should poll your own backend to update based on             // source status change webhook events it may receive, and display the results             // of that here.         }         // If you had a dialog open when your user went elsewhere, remember to close it here.         mRedirectDialogController.dismissDialog();     } }`\n\nIf you’d like more help, check out the [example app](https://github.com/stripe/stripe-android/tree/master/example) on Github that demonstrates creating a payment using several different payment methods.",
    "title": "Getting started with Sources in the Android SDK | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  }
]