[
  {
    "url": "https://docs.stripe.com/connect/tax-form-settings",
    "markdown": "# Configure tax form settings | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the settings you can configure for the 1099 forms you send to connected accounts.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nUse the [Stripe dashboard](https://dashboard.stripe.com/connect/taxes/forms) to configure the settings for the 1099 forms you send to connected accounts. You can change almost all tax settings for forms that you haven’t filed. For example, if you initially set your tax form to report non-employee compensation (using 1099-NEC) and later determine you need to report payment transactions (using 1099-K), you can change the default form type and automatically update all forms.\n\nIf a user with the administrator role configured the tax form default settings in the onboarding flow for 1099 tax reporting, you can assign the [Tax Analyst](https://docs.stripe.com/get-started/account/teams) role to a team member on your account to allow that person full access to features in the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view.\n\n## Common settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese settings apply to all tax forms.\n\n|     |     |\n| --- | --- |\n| Default form type | Sets the default type of 1099 form to use to report compensation or payment transactions. If you need to deliver multiple form types, you can [change the type of 1099 form](https://docs.stripe.com/connect/modify-tax-forms?method=csv#change-the-type-of-1099-form) for an account. |\n| Payer tax identity | Uses the platform account’s information (legal business name and tax identification number) by default. You can change your payer tax identity if, for example, you want the legal entity on the 1099 form to differ from the legal entity associated with your Stripe account. |\n| Payer address | Uses the platform account’s information by default. This address displays on the 1099-NEC or 1099-MISC form as the Payer’s address and on the 1099-K form as the Filer’s address. |\n| Payer phone number | Uses the platform account’s information by default. This phone number displays on tax forms as the Payer’s or Filer’s phone number. |\n| Payer state registrations | Add corresponding state tax registration or withholding ID when it is required for the states in which you’ll file. |\n\n## Delivery method settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure settings for how to deliver your 1099 forms to payees. These settings apply to all 1099 form types.\n\n|     |     |\n| --- | --- |\n| Delivery strategy | Configures the default delivery strategy to use, either smart delivery settings or customize delivery settings. |\n| E-delivery | Specifies whether to e-deliver forms using the [Stripe Express Dashboard](https://docs.stripe.com/connect/express-dashboard). If enabled, all accounts with a viable email address receive an email when their 1099 form is available, except in [some rare situations](https://docs.stripe.com/connect/express-dashboard-taxes#which-accounts-get-access-to-e-delivery). If an account has given e-delivery consent, they can access their form immediately. If not, they still receive a notice email, but must claim their Stripe Express account before they can access their form. |\n| Postal delivery | Specifies whether to deliver printed copies of 1099 forms via postal mail using the platform’s US return mailing address. |\n\n**Postal Delivery Options**\n\n|     |     |\n| --- | --- |\n| Disable Postal Delivery | Connected accounts don’t receive tax forms by postal mail. |\n| Optional Postal Delivery | Stripe sends printed tax forms through postal mail to every connected account that hasn’t consented to e-delivery at the time of filing, or is ineligible to receive e-delivery. If e-delivery with the Stripe Express Dashboard is enabled, connected accounts can also request a paper copy of their tax form through the Stripe Express Dashboard. |\n| Postal delivery | All connected accounts receive tax forms by postal mail. |\n\n## 1099-K settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure these settings for the [1099-K](https://support.stripe.com/questions/intro-to-1099-k-tax-forms-for-platforms-and-marketplaces) forms you send to connected accounts.\n\n|     |     |\n| --- | --- |\n| Default calculation method | Configures the default [calculation method](https://docs.stripe.com/connect/calculation-methods) to use, either payments that include fees or payments that exclude fees. |\n| Filer type | Specifies if the platform account is a payment settlement entity (PSE) or an electronic payment facilitator (EPF). |\n| Payment settlement entity | Appears if the filer type is EPF. If so, you must specify the name and phone number for the PSE. |\n| Transactions reported | Configures the type of transaction that’s processed. |\n\n## 1099-MISC settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure these settings for the [1099-MISC](https://support.stripe.com/questions/intro-to-1099-misc-tax-forms-for-platforms-and-marketplaces) forms you send to connected accounts.\n\n|     |     |\n| --- | --- |\n| Payments box | Payment amounts are reported in the specified box on the 1099-MISC form. For example, choose **3 Other income** to display the amount in box number 3. You can use CSV import to override this box for specific tax forms. |\n| Default calculation method | Configures the default [calculation method](https://docs.stripe.com/connect/calculation-methods) to use. You can choose between payments that include fees, payments that exclude fees, or payouts only. |\n\n## 1099-NEC settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure these settings for your [1099-NEC](https://support.stripe.com/questions/intro-to-1099-nec-tax-forms-for-platforms-and-marketplaces) forms.\n\n|     |     |\n| --- | --- |\n| Default calculation method | Configures the default [calculation method](https://docs.stripe.com/connect/calculation-methods) to use. You can choose between payments that include fees, payments that exclude fees, or payouts only. |",
    "title": "Configure tax form settings | Stripe Documentation",
    "description": "Learn about the settings you can configure for the 1099 forms you send to connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/invoices",
    "markdown": "# Create invoices with Connect | Stripe DocumentationThe Stripe Docs logo\n\n## With Connect, you can create invoices for connected accounts, optionally taking fees in the process.\n\nYou can create [invoices](https://docs.stripe.com/api/invoices \"invoices\") for connected accounts, which support [several approaches](https://docs.stripe.com/connect/charges) for collecting payments. You can use [direct charges](https://docs.stripe.com/connect/direct-charges) to create them directly on the connected account. Alternatively, you can create invoices on the platform with transfers to the connected account by using [destination charges](https://docs.stripe.com/connect/destination-charges). You can also take an application fee on these invoices.\n\n#### Note\n\n## Create an invoice using direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an invoice that directly charges on a connected account, [create an invoice](https://docs.stripe.com/api#create_invoice) while [authenticated](https://docs.stripe.com/connect/authentication#stripe-account-header) as the connected account. For this to work, the customer must be defined on the connected account.\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nAs with [creating a direct charge](https://docs.stripe.com/connect/direct-charges#collect-fees) on a connected account, you can create a customer on a connected account by using either the platform’s publishable key or the connected account’s publishable key. You can also create a token by using [shared customers](https://docs.stripe.com/connect/cloning-customers-across-accounts). When you use direct charges, the connected account is responsible for the cost of the Stripe fees, refunds, and chargebacks.\n\n## Create an invoice using destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create an invoice that charges on the platform and creates automatic transfers to a connected account, [create an invoice](https://docs.stripe.com/api#create_invoice) while providing the connected account ID as the `transfer_data[destination]` [value](https://docs.stripe.com/api/invoices/object#invoice_object-transfer_data).\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nFor this to work, the customer must be defined on the platform account, and you must create the connected account token by using the platform’s publishable key. If charging a customer, the customer must exist within the platform account. When using automatic transfers, the platform is the business of record.\n\n## Display Connected Account Tax IDs and Business Details on your Invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCertain regions have regulatory requirements for merchants to show their tax IDs and other business details on customer-facing documents.\n\nIn some cases, you can fulfill these requirements by displaying information about a connected account instead of information about your platform. The following steps show how to render a connected account’s tax ID and business details on invoice emails, invoice PDFs, Hosted Invoice Pages, and invoice receipts:\n\n1.  Create tax IDs for your connected account.\n2.  Set default tax IDs for your connected account.\n3.  Specify the connected account either using the [`on_behalf_of` parameter](#on-behalf-of) or as the `issuer` on existing or new invoices, subscriptions, and subscription schedules.\n\n### Create tax IDs for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example creates a single tax ID for the connected account. Stripe stores the tax ID on the connected account. To create additional tax IDs, call the endpoint again.\n\n`curl https://api.stripe.com/v1/tax_ids \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d type=eu_vat \\  -d value=DE123456789`\n\n### Set default tax IDs for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically pulls default tax IDs from the invoice `issuer`’s account during finalization unless `account_tax_ids` is already set on the invoices.\n\nYou can set the tax IDs stored on the connected account as the default tax IDs for that account. The following example sets existing tax IDs as default tax IDs:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[invoices][default_account_tax_ids][0]\"=atxi_123 \\  -d \"settings[invoices][default_account_tax_ids][1]\"=atxi_456`\n\n### Set issuer on existing or new invoices, subscriptions, and subscription schedules as the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example sets `issuer` on an existing subscription. During invoice finalization, subscription invoices pull in the issuer’s default tax IDs:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"invoice_settings[issuer][type]\"=account \\  -d \"invoice_settings[issuer][account]\"=  {{CONNECTED_ACCOUNT_ID}}`\n\nThe following example sets `issuer` during invoice creation:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"issuer[type]\"=account \\  -d \"issuer[account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nAlternatively, the `on_behalf_of` parameter also prints a connected account’s details on the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt.\n\n### Set account tax IDs on existing or new invoices, subscriptions, and subscription schedules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify `account_tax_ids` for invoices, subscriptions, and subscription schedules to override the default tax IDs. The following example sets `account_tax_ids` on an existing subscription:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"invoice_settings[issuer][type]\"=account \\  -d \"invoice_settings[issuer][account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"invoice_settings[account_tax_ids][0]\"=txi_123 \\  -d \"invoice_settings[account_tax_ids][1]\"=txi_456`\n\nThe following example sets `account_tax_ids` during invoice creation:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"issuer[type]\"=account \\  -d \"issuer[account]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"account_tax_ids[0]\"=txi_123 \\  -d \"account_tax_ids[1]\"=txi_456`\n\n### Create tax IDs stored on the platform for your connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax ID you create is stored on the platform account instead of the connected account. The following example creates a single tax ID for the connected account without using the `Stripe-Account` header:\n\n`curl https://api.stripe.com/v1/tax_ids \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=eu_vat \\  -d value=DE123456789 \\  -d \"owner[type]\"=account \\  -d \"owner[account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\n## Collect application fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the invoice, you can optionally withhold an application fee. The following example shows an [application\\_fee\\_amount](https://docs.stripe.com/api/subscriptions/object#subscription_object-application_fee_percent) for an invoice with a direct charge on the connected account:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d application_fee_amount=\"10\" \\   -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThis example shows an `application_fee_amount` for an invoice with a destination charge:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d customer={{CUSTOMER_ID}} \\   -d application_fee_amount=\"10\" \\   -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\n## Make the connected account the settlement merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo make the connected account the settlement merchant, charge the customer using the `on_behalf_of` parameter when you create or update the invoice. You must set `on_behalf_of` in the API before finalizing an invoice—the Dashboard doesn’t have an interface for invoices you send on behalf of connected accounts.\n\nSetting the `on_behalf_of` parameter applies the branding, contact information, and account tax ID of the connected account to the invoice email, invoice PDF, Hosted Invoice Page, and invoice receipt. However, when you use `on_behalf_of` in test mode, emails aren’t sent—just like standard invoices sent via API. In test mode, you can verify that Stripe created an invoice by checking the [Invoices page](https://dashboard.stripe.com/test/invoices) of the Dashboard.\n\nTo collect payments on behalf of the connected account, the connected account also needs to have [account capabilities](https://docs.stripe.com/connect/account-capabilities) enabled for the relevant payment methods. You can automatically transfer payments for invoices created on behalf of the connected account by using destination charges. For more information about the `on_behalf_of​` parameter, refer to the relevant Connect documentation:\n\n*   For automatic transfers to the connected account, refer to the `on_behalf_of` parameter details in the [Create a charge](https://docs.stripe.com/connect/charges#on_behalf_of) guide.\n*   For information on how to transfer payments manually, refer to [Transfer availability](https://docs.stripe.com/connect/separate-charges-and-transfers#transfer-availability).\n*   For a list of account capabilities that are required to collect payments on behalf of the connected account, refer to [Payment method capabilities](https://docs.stripe.com/connect/account-capabilities#payment-methods).\n\nThe following example shows how to use the `on_behalf_of` parameter for a new invoice by using separate charges and transfers:\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d customer=  {{CUSTOMER_ID}}    `\n\nAs with standard destination charges, ​​you can set an `application_fee_amount` on invoices. This example shows how to use `on_behalf_of` with a destination charge and application fee.\n\n`curl https://api.stripe.com/v1/invoices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d on_behalf_of=  {{CONNECTED_ACCOUNT_ID}}   \\  -d application_fee_amount=10 \\  -d \"transfer_data[destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d customer=  {{CUSTOMER_ID}}    `\n\nInvoices created on behalf of a connected account ​​don’t support bank transfers payment methods, such as ACH Credit Transfer and paper checks.\n\n## Integrate tax calculation and collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to first determine which entity is liable for tax. The entity that’s liable for tax might be your connected account or the platform, depending on your business model. To learn more, see [Stripe Tax with Connect](https://docs.stripe.com/tax/connect).",
    "title": "Create invoices with Connect | Stripe Documentation",
    "description": "With Connect, you can create invoices for connected accounts, optionally taking fees in the process.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/multiple-payment-method-configurations",
    "markdown": "# Multiple configurations for your Connect accounts\n\nConnected accounts with access to the full Stripe Dashboard can turn payment methods on or off if the payment method has been set to either `On by default` or `Off by default`. Your connected accounts see the newly created child configuration in their **Payment methods** settings. Your connected accounts can use the dropdown menu at the top of the page to choose a configuration to edit.\n\nIf you want your connected accounts to customize their **Payment methods** settings from your platform dashboard instead of the Stripe Dashboard, or if you have connected accounts who don’t have Stripe Dashboard access, you can integrate with the Payment Method Configurations API.\n\nUse the Payment Method Configurations API with the connected account ID and child configuration ID to read the current state of a payment method for a specific connected account on that configuration.\n\n`curl https://api.stripe.com/v1/payment_method_configurations/`\n\n`{{PAYMENT_METHOD_CONFIGURATION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\":` \n\n`\"{{PAYMENT_METHOD_CONFIGURATION_ID}}\"`\n\n`,       \"object\": \"payment_method_configuration\",       \"name\": \"My Custom Configuration\",       \"active\": true,       \"is_default\": true,       \"livemode\": false,       \"parent\":   \"{{PAYMENT_METHOD_CONFIGURATION_ID}}\"  ,       \"acss_debit\": {         \"available\": false,         \"display_preference\": {           \"overridable\": true,           \"preference\": \"off\",           \"value\": \"off\"         }       },       \"affirm\": {         \"available\": false,         \"display_preference\": {           \"overridable\": true,           \"preference\": \"off\",           \"value\": \"off\"         }       },       \"afterpay_clearpay\": {         \"available\": false,         \"display_preference\": {           \"overridable\": true,           \"preference\": \"off\",           \"value\": \"off\"         }       },       ... additional payment methods     }   ],   \"has_more\": false,   \"url\": \"/v1/payment_method_configurations\" }`\n\nIf successful, the return list displays each payment method and includes two parameters outlining availability and display preference.\n\n*   `available` is the combination of [capability](https://docs.stripe.com/api/capabilities/object) value (`active`, `inactive`, `pending`, or `unrequested`) and `display_preference` value.\n    \n    You can use the `available` field to know whether or not a buyer sees this payment method at checkout time. If `available` is `true`, that payment method’s capability is active and `display_preference` is on. If `available` is `false`, the payment method either doesn’t have an active capability or the `display_preference` value is off, and buyers won’t see it at checkout time. To simplify your integration and take advantage of other features, use payment methods that you manage from the Dashboard at checkout, which automatically reads this parameter and shows the right payment methods to buyers.\n    \n*   `display_preference` has three components: `overridable`, `preference`, and `value`.\n    \n    *   `overridable` is read-only, and indicates whether the connected account’s preference can override the default set above.\n    *   `preference` is writable, and stores the connected account’s preference.\n    *   `value` is read-only, and reflects the effective `display_preference` value.\n\n#### Note\n\nOnly payment methods that are relevant in the connected account’s country are shown in the API response and are configurable. [Check country support](https://docs.stripe.com/payments/payment-methods/integration-options).\n\nWhen a connected account owner takes action to turn on or off a payment method, you can update the `display_preference` `preference` attribute. This stores the connected account owner’s preference for that payment method and is used to determine whether buyers see the payment method.\n\n`curl https://api.stripe.com/v1/payment_method_configurations/`\n\n`{{PAYMENT_METHOD_CONFIGURATION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"affirm[display_preference][preference]\"=on`\n\n`{   \"id\":` \n\n`\"{{PAYMENT_METHOD_CONFIGURATION_ID}}\"`\n\n`,   \"object\": \"payment_method_configuration\",   \"name\": \"My Custom Configuration\",   \"active\": true,   \"is_default\": true,   \"livemode\": false,   \"acss_debit\": {     \"available\": false,     \"display_preference\": {       \"overridable\": true,       \"preference\": \"off\",       \"value\": \"off\"     }   },   \"affirm\": {     \"available\": true,     \"display_preference\": {       \"overridable\": true,       \"preference\": \"on\",       \"value\": \"on\"     }   },   \"afterpay_clearpay\": {     \"available\": false,     \"display_preference\": {       \"overridable\": true,       \"preference\": \"off\",       \"value\": \"off\"     }   },   ... additional payment methods }`\n\nWhen your connected accounts turn on payment methods with the API, Stripe intelligently ranks the payment methods based on the buyer’s location, order size, and other factors to always show the highest converting payment methods first.",
    "title": "Multiple configurations for your Connect accounts | Stripe Documentation",
    "description": "Learn how to allow your connected accounts to display different sets of payment methods to their buyers in different scenarios.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/required-verification-information-taxes",
    "markdown": "# Required Verification Information for Taxes\n\n## Learn what account information you need to provide for your Connect accounts if you want Stripe to help you with US federal 1099 tax reporting.\n\n#### Note\n\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n\n## Required information (1099-K, 1099-MISC, 1099-NEC) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table lists the requirements for connected accounts with any of the [1099 capabilities](https://docs.stripe.com/connect/account-capabilities#tax-reporting). Stripe requires the business tax details except when the account is set up as a _Single Person Entity_ (SPE) with a US-based representative, in which case we’ll use the representative’s personal tax details.\n\nStripe defines a Single Person Entity as follows:\n\n*   Individual: [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) is `individual`\n*   Sole Proprietorship: [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) is `sole_prop`, or [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) is `company` and [business structure](https://docs.stripe.com/api/accounts/create#create_account-company-structure) is `sole_proprietorship`\n*   Single Member LLC: [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) is `company` and [business structure](https://docs.stripe.com/api/accounts/create#create_account-company-structure) is `single_member_llc`\n\nEven if you don’t add the 1099 capabilities and want to update the information directly in Stripe to file your 1099 forms, these are the fields to populate.\n\nIf you have any of the 1099 capabilities turned on, [Payouts](https://docs.stripe.com/payouts \"payout\") become disabled if the required information isn’t collected and verified by 600 USD in charges.",
    "title": "Required Verification Information for Taxes | Stripe Documentation",
    "description": "Learn what account information you need to provide for your Connect accounts if you want Stripe to help you with US federal 1099 tax reporting.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embed-payment-method-settings",
    "markdown": "# Embed the payment methods settings component\n\nYour connected accounts can use the component to enable payment methods and provide compliance information without the need to access the Stripe Dashboard. If a connected account needs to provide additional compliance information to use a payment method, the component prompts them for the information and collects it up-front.\n\n#### Note\n\nWe support the following payment methods in the embedded component:\n\nAffirm, Afterpay Clearpay, Apple Pay, Bancontact, BLIK, Cards, EPS, giropay, Google Pay, iDEAL, Klarna, Link, P24, Sofort, and Zip.",
    "title": "Embed the payment methods settings component | Stripe Documentation",
    "description": "Embed a payment methods settings component into your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/account-balances",
    "markdown": "# Understanding Connect account balances | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe account balances work when using Connect.\n\nBoth your platform account and a connected account are still just Stripe accounts, each with their own, separate account balance.\n\nAll Stripe accounts can have balances in two states:\n\n*   `pending`, meaning the funds are not yet available to pay out\n*   `available`, meaning the funds can be paid out now\n\nWith non-Connect accounts, processing charges increases the Stripe account balance. The charged amount, less any Stripe fees, is initially reflected on the pending balance, and becomes available on a 2\\-day rolling basis. (This timing can vary by country and account.) Available funds can be paid out to a bank account or debit card. [Payouts](https://docs.stripe.com/payouts \"payout\") reduce the Stripe account balance accordingly.\n\nWith [Connect](https://docs.stripe.com/connect \"Connect\"), your platform account and each connected account has its own `pending` and `available` balances. The allocation of funds between them depends on [the type of charges](https://docs.stripe.com/connect/charges) that you use.\n\nFurther, a platform account can also have a `connect_reserved` balance, used to offset negative balances on connected accounts.\n\n## Check a connected account’s balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo check the balance of a connected account, perform a [retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve) call authenticated as the connected account. The returned [Balance object](https://docs.stripe.com/api#balance_object) reflects the `pending` and `available` balances.\n\n`curl https://api.stripe.com/v1/balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\n## Accounting for negative balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome actions, such as refunds and chargebacks, create negative transactions in a Stripe account. Stripe handles negative transactions to optimize for keeping a positive Stripe balance for related accounts:\n\n*   If at all possible, Stripe automatically offsets negative transactions against future payments\n*   Stripe first assigns negative transactions to the account on which the associated charge was made. For example, when charging on a connected account, a refund or chargeback comes from the connected account. When charging on your platform, a refund or chargeback comes from your platform account.\n\nDespite these measures, if a connected account balance becomes negative, ultimate responsibility depends on the account type.\n\n*   A connected Standard account is always responsible to cover its negative balances\n*   For Express and Custom accounts, the platform is responsible to cover negative balances\n\nIf a connected account balance is negative, Stripe debits their external account on file up to the maximum number of attempts allowed. If all attempts fail, Stripe pauses payouts to and debits from the external account until the external account on file is updated.\n\nWhile an account’s balance is negative, you can’t send payouts to the account’s bank or debit card on their behalf. Stripe will resume sending payouts to the connected account when the account’s Stripe balance is again positive.\n\n### Automatically debit connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf Stripe hasn’t already attempted to debit a connected account’s external account for a negative balance, you can set [debit\\_negative\\_balances](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-debit_negative_balances) to `true` to allow Stripe to automatically do so.\n\n#### Caution\n\nStripe can’t correct a negative Stripe account balance using a debit card.\n\nAuto debit for negative balances is supported for banks in the following countries:\n\n*   Australia\n*   Canada\n*   Europe (SEPA countries, which includes the UK)\n*   New Zealand\n*   United States\n\nSee the [Auto Debit FAQ](https://support.stripe.com/questions/auto-debit-faq) for a detailed breakdown of which countries and account types are supported.\n\nEnabling `debit_negative_balances` triggers debits as needed, even when the connected account is on manual payouts. For more details, see [Impact from chargebacks and negative balances](https://docs.stripe.com/connect/risk-management/best-practices#impact-from-chargebacks-and-negative-balances).\n\n## Understanding connected reserve balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo ensure funds can be covered, Stripe holds a reserve on your platform account’s `available` balance to cover any negative `available` balances across your Custom and Express accounts. Depending on the country that the Custom or Express account is in, Stripe initiates a bank withdrawal on the account’s bank account to cover the [negative balance](https://support.stripe.com/questions/negative-balances-in-stripe-handling-by-country). Although the `available` balance for the account zeroes out as soon as the withdrawal is posted, the platform reserve for that account is held for an additional 3 business days. You’ll see this reserve reflected in the [Dashboard](https://dashboard.stripe.com/test/balance/overview) and exported reports (as a **reserve transaction**).\n\nThere are three kinds of balance activities related to reserves:\n\n*   Funds reserved to cover a negative balance on a connected account. When a connected account’s balance becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered by creating a balance transaction with the type `reserve_transaction`.\n*   Funds released after a positive balance change on a connected account. When a connected account’s previously negative balance becomes less negative due to activity on that account (for example, through new charges), a corresponding portion of your platform’s reserve balance is released through a balance transaction with the type `reserve_transaction`.\n*   Funds collected due to a long-standing negative balance on a connected account. When a connected account holds a negative balance amount for 180 days, Stripe transfers a portion of your balance to zero out that account’s balance by creating a balance transaction with the type `connect_collection_transfer`.\n\nTo see the current reserves held on your account, perform a retrieve balance API call but for your own account (that is, not authorized as another user as in the above).\n\nTo clear a connected account’s negative balance, and thereby remove the reserve on your account, send a [transfer](https://docs.stripe.com/connect/separate-charges-and-transfers) to the applicable account. If a connected account has a negative balance for more than 180 days, Stripe will automatically transfer your reserves to the connected account to zero out the balance. Dashboard pages and reports show these transfers as Connect collection transfers.\n\n#### Caution\n\nAfter a connected account’s balance is cleared through a collection transfer, we recommend that you [reject](https://docs.stripe.com/api#reject_account) the account to prevent future losses.\n\n## Holding funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform needs more granular control over your payout schedule, you can take one of the following approaches:\n\n*   Hold funds in the platform balance before [sending them to Express or Custom accounts](https://docs.stripe.com/connect/separate-charges-and-transfers)\n*   Keep funds in an Express or Custom account’s balance before proceeding to [pay out the funds](https://docs.stripe.com/connect/manual-payouts) to a bank account or debit card\n\nWe recommend platforms hold funds only if you have a clear purpose for holding them and a commitment to complete the payment when an event occurs or a precondition is satisfied. The typical use case for holding funds is on-demand services platforms, where the marketplace usually waits for the service to be completed and confirmed before paying out to the service provider (for example, rentals, delivery services, and ride-sharing).\n\nPlatforms should refrain from holding funds arbitrarily, and instead pay out to their connected accounts as soon as they are identified. This is usually when the charge is made. If you aren’t sure about holding funds, speak with your legal advisor.\n\nFor compliance reasons, we can hold funds in reserve for a period of time that’s based on the merchant’s country, as shown below:\n\n| Country | Holding Period |\n| --- | --- |\n| Thailand | 10 days |\n| United States | 2 years |\n| All other countries | 90 days |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Creating Direct Charges](https://docs.stripe.com/connect/direct-charges)\n*   [Creating Destination Charges on Your Platform](https://docs.stripe.com/connect/destination-charges)\n*   [Creating Separate Charges and Transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)",
    "title": "Understanding Connect account balances | Stripe Documentation",
    "description": "Learn how Stripe account balances work when using Connect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/rules",
    "markdown": "# Fraud prevention rules | Stripe DocumentationThe Stripe Docs logo\n\n## Use fraud prevention rules to guard your business.\n\nFraud prevention rules allow you to take action whenever a payment matches certain criteria.\n\nStripe Radar provides built-in rules to help detect and guard against fraud risk for all Stripe users.\n\n[Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\") users can use the [Dashboard](https://dashboard.stripe.com/test/radar/rules) to create custom rules based on the unique business logic specific to your business. For example, you can:\n\n*   **Request 3D Secure** (3DS) for all payments that support it and are made by a new customer\n*   **Allow** all payments from your call center’s IP address\n*   **Block** payments made from a location or card issued outside your country\n*   **Review** all payments greater than 1,000 USD that have been made with a prepaid card\n\n#### Caution\n\nEU merchants might be affected by the [Geo-blocking Regulation](https://support.stripe.com/questions/eu-geo-blocking-regulation-changes) and its prohibitions on blocking payments from customers based in EU member states.\n\n## Built-in rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following rules are available by default for all Radar users.\n\n### Machine learning risk checks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Radar and Stripe Radar for Fraud Teams provide a set of default rules based on the judgments of our machine learning models, which are:\n\n`` **Block** if :risk_level: = `'highest'` ``\n\nThe rule blocks and won’t process payments with a high risk of fraud. This rule is enabled by default for users of Radar or Radar for Fraud Teams.\n\n`` **Review** if :risk_level: = `'elevated'` ``\n\nThe default behavior for Stripe Radar for Fraud Teams is to place payments into review that we suspect have an elevated risk of fraud.\n\n### Traditional card checks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA payment can still be successful even if the [CVC](https://docs.stripe.com/disputes/prevention/verification \"Card verification code check (CVC)\") or address ([AVS](https://docs.stripe.com/disputes/prevention/verification \"Address verification System (AVS)\")) check fails, because card issuers take many signals into account when making a decision about whether to approve or decline a payment. In some cases, a card issuer might still approve a payment they consider legitimate, even if the CVC or postal code verification check fails.\n\nStripe has built-in rules so you can block payments even if they’ve been approved by the card issuer. You can enable or disable these rules using the [Stripe Dashboard](https://dashboard.stripe.com/test/radar/rules).\n\nThese rules also apply to the card validation process that occurs when attaching a card to a customer. In cases where you create the card and customer together, CVC or postal code validation failure prevents the successful creation of the customer record. This rule might not be enabled for your account by default. You can enable or disable it any time in the [Dashboard](https://dashboard.stripe.com/test/radar/rules).\n\n`**Block** if CVC verification fails`\n\nStripe blocks payments that fail a card issuer’s CVC verification check. If the customer doesn’t provide the CVC number, for example because they use a [wallet](https://docs.stripe.com/payments/payment-methods \"digital wallet\"), or their card issuer doesn’t support its verification, the rule can’t block the payment.\n\n`**Block** if postal code verification fails`\n\nIf this rule is enabled, Radar blocks payments when they fail a card issuer’s postal code verification check. If the customer doesn’t provide the postal code, or their card issuer doesn’t support its verification, the rule can’t block the payment. This rule might not be enabled for your account by default. You can enable or disable it any time in the [Dashboard](https://dashboard.stripe.com/test/radar/rules).\n\n### Built-in rules to request 3D Secure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing [3DS](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") prompts customers to complete an additional authentication step before they can complete the purchase flow. If 3DS authenticates a payment, the [liability](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) for any fraud-related disputes for that payment typically shift from the seller to the issuer. This means that in most cases, the seller isn’t responsible for fraud costs on 3DS authenticated payments.\n\nStripe automatically handles soft decline codes indicating that 3DS is required by issuers. We also trigger 3DS when necessary, adhering to regulations such as the [Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) (SCA) mandated by the PSD2. Disabling Radar doesn’t prevent 3DS from being triggered in cases where it’s necessary.\n\nStripe provides three default disabled rules you can enable to dynamically request 3DS when using Radar with [Payment Intents](https://docs.stripe.com/payments/accept-a-payment) or [Setup Intents](https://docs.stripe.com/payments/save-and-reuse):\n\n1.  `**Request 3D Secure** if 3D Secure is required for card`\n    *   Disabled by default. Enabling this rule prompts the customer for 3DS authentication if historically the card [required 3DS](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards).\n    *   Stripe automatically handles soft decline codes indicating that 3DS is required by issuers. Furthermore, we also trigger 3DS when necessary, adhering to regulations such as the [Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) mandated by the PSD2.\n2.  `**Request 3D Secure** if 3D Secure is supported for card`\n    *   Disabled by default but similar to the previous rule. Enabling this rule prompts the customer for 3DS authentication as long as their card supports it.\n    *   Use this rule instead of the previous one if you want to maximize the number of payments that have liability shift. Be aware that this additional requirement might decrease conversion rates.\n3.  `**Request 3D Secure** if 3D Secure is recommended for card`\n    *   Disabled by default. Enabling this rule prompts the customer for 3DS authentication when Stripe believes that 3DS authentication can take place with minimal impact on conversion rates.\n    *   Enable this if you want to maximize the number of payments that have liability shift.\n\nBecause 3DS requires your customer to go through an additional layer of authentication, indiscriminate use of 3DS might lower conversion rates. Stripe recommends that you enable default Request 3DS rules only if you need to send all payments from supported cards through 3DS.\n\nRequesting 3DS doesn’t necessarily mean the issuer actually performs 3DS. For more details about possible outcomes, refer to the [3D Secure documentation](https://docs.stripe.com/payments/3d-secure).\n\n#### Custom rules to request 3D Secure and act on specific outcomes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter attempting 3DS authentication, if you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you can evaluate the result in allow, block, or review rules.\n\nThe most important attributes for custom Radar rules are:\n\n*   `is_3d_secure` which is true if the card is supported, 3DS was attempted by the issuer and the user didn’t fail authentication. We generally recommend using this in block rules.\n*   `is_3d_secure_authenticated` which is true if 3DS was attempted by the issuer and the user successfully went through a full authentication. Using this attribute in a block rule excludes legitimate transactions that might have an SCA exemption or don’t fall into a clear failure or successful authentication such as processing errors.\n*   `has_liability_shift` which is true if Stripe expects the payment to be covered under the liability shift rule. This might [not always be the same as 3DS](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments), for example Apple Pay in certain regions.\n\nFor custom rules, we recommend keeping `Request 3DS` and `Block` rules aligned depending on your [risk appetite](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data). However, don’t block transactions where 3DS isn’t supported, such as some wallets.\n\nHere are some examples that show how to achieve this for different use cases:\n\n#### Request 3D Secure based on Radar risk level![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level and above a certain amount.\n\n| Radar rule | Description |\n| --- | --- |\n| ``Request 3D Secure if :risk_level: != `'normal'` and :amount_in_usd: > 25`` | This rule checks for Radar’s risk level then requests 3DS on all charges with an elevated or high risk level above a certain amount. |\n\nIn this case, without a block rule, cards or wallets that don’t support 3DS aren’t blocked. 3DS attempts with failed authentication don’t continue to charge authorization.\n\n#### Always require 3D Secure based on Radar risk level![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level of elevated or high, and above a certain amount. If cards don’t support 3DS, you don’t want to accept them.\n\n| Radar rule | Description |\n| --- | --- |\n| ``Request 3D Secure if :risk_level: != `'normal'` and :amount_in_usd: > 25`` | This rule checks for Radar’s risk level then requests 3DS on all charges with an elevated or high risk level above a certain amount. |\n| ``Block if not :is_3d_secure: and :risk_level: != `'normal'` and :amount_in_usd: > 25 and not :is_off_session: and :digital_wallet: != `'apple_pay'` and not (:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule blocks payments without a 3DS flow for charges with an elevated or high risk level above a certain amount. However, it accepts legitimate transactions that might have an SCA exemption or don’t have a clear failure or successful authentication such as `attempt_acknowledged`. It accepts off-session payments such as recurring subscription charges and wallets such as Apple Pay or Google Pay to succeed. |\n\n#### Only accept fully 3D Secure authenticated transactions if 3D Secure is supported![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou rely on Stripe triggering 3DS when necessary in cases such as [Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) (SCA), but don’t want to accept [edge cases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result) such as processing errors.\n\n| Radar rule | Description |\n| --- | --- |\n| `Block if :is_3d_secure: and not :is_3d_secure_authenticated:` | This rule blocks payments where the card is enrolled in 3DS and 3DS was attempted but the user didn’t successfully authenticate. Cards that don’t support 3DS, SCA exemptions, off-session payments (such as recurring subscription charges), and wallets (such as Apple Pay or Google Pay) are accepted. |\n\n#### Request 3D Secure based on Metadata![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges with a custom metadata attribute.\n\n| Radar rule | Description |\n| --- | --- |\n| `` Request 3D Secure if ::foo:: = `'bar'` `` | This rule checks for a metadata condition and then requests 3DS. To check Customer metadata, replace `::foo:: = 'bar'` with a value like `::customer:trusted:: = 'false'`. |\n\nIn this case, without a block rule, cards or wallets that don’t support 3DS aren’t blocked. 3DS attempts with failed authentication don’t continue to charge authorization.\n\n#### Always require 3D Secure based on Metadata![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges with a custom metadata attribute and block cards that don’t support it.\n\n| Radar rule | Description |\n| --- | --- |\n| `` Request 3D Secure if ::foo:: = `'bar'` `` | This rule checks for a metadata condition and then requests 3DS. To check Customer metadata, replace `::foo:: = 'bar'` with a value like `::customer:trusted:: = 'false'`. |\n| ``Block if ::foo:: = `'bar'` and not :is_3d_secure and not :is_off_session: and :digital_wallet: != `'apple_pay'` and not(:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule blocks payments without a 3DS flow for charges with a custom metadata attribute. However, it accepts legitimate transactions that might have an SCA exemption or don’t have a clear failure or successful authentication such as `attempt_acknowledged`. It accepts off-session payments (such as recurring subscription charges), and wallets (such as Apple Pay or Google Pay) to succeed. |\n\n#### Request 3D Secure for all new cards and review if 3D Secure wasn’t supported![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all new cards and manually review charges from cards that don’t support 3DS.\n\n| Radar rule | Description |\n| --- | --- |\n| `Request 3D Secure if is_missing(:seconds_since_card_first_seen:)` | This rule requests 3DS on all cards that haven’t been used on your account. To reduce user friction, you can add an additional condition to only request 3DS if `` :risk_level: != `'normal'` ``. |\n| `Request 3D Secure if :is_new_card_on_customer:` | As an alternative to the rule above, this rule requests 3DS on all cards that are newly used on a [Customer](https://docs.stripe.com/api/customers). To reduce user friction, you can add an additional condition to only request 3DS if `` :risk_level: != `'normal'` ``. |\n| ``Review if not :is_3d_secure and not:is_off_session: and :digital_wallet: != `'apple_pay'` and not(:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule marks payments where 3DS is expected but isn’t supported for manual review. It ignores off-session payments (such as recurring subscription charges) and wallets (such as Apple Pay or Google Pay). Payments marked for review continue to authorization and can give additional signals, such as issuer CVC checks. |\n\nIn this case, without a block rule, cards or wallets that don’t support 3DS aren’t blocked. 3DS attempts with failed authentication don’t continue to charge authorization.\n\n#### Always require 3D Secure for certain issuer countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges from card issuers originating from countries on a [custom list](https://docs.stripe.com/radar/lists) and block cards that don’t support it.\n\n| Radar rule | Description |\n| --- | --- |\n| `Request 3D Secure if :card_country: in @enforce_3ds_list` | This rule checks for a condition based on card issuers originating from countries and compares them to a [custom list](https://docs.stripe.com/radar/lists). If they match, it requests 3DS. |\n| ``Block if :card_country: in @enforce_3ds_list and not :is_3d_secure and not :is_off_session: and :digital_wallet: != `'apple_pay'` and not(:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule blocks payments without a 3DS flow for charges originating from countries on the custom list. However, it accepts legitimate transactions that might have an SCA exemption or don’t have a clear failure or successful authentication, such as `attempt_acknowledged`. It accepts off-session payments (such as recurring subscription charges) and wallets (such as Apple Pay or Google Pay) to succeed. |\n\n#### Always require 3D Secure based on Radar risk level and review edge cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou want to use Radar to request 3DS on all charges based on Radar risk level and block cards that don’t support 3DS, but manually review edge cases.\n\n| Radar rule | Description |\n| --- | --- |\n| `` Request 3D Secure if :risk_level: != `'normal'` `` | This rule checks for Radar’s risk level then requests 3DS on all charges with an elevated or high risk level above a certain amount. |\n| ``Block if not :is_3d_secure: and :risk_level: != `'normal'` and not :is_off_session: and :digital_wallet: != `'apple_pay'` and not (:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule blocks payments without a 3DS flow for charges with an elevated or high risk level above a certain amount. However, it accepts legitimate transactions that might have an SCA exemption. It accepts off-session payments (such as recurring subscription charges) and wallets (such as Apple Pay or Google Pay) to succeed. |\n| ``Review if not :is_3d_secure_authenticated: and :risk_level: != `'normal'` and not :is_off_session: and :digital_wallet: != `'apple_pay'` and not (:digital_wallet: = `'android_pay'` and :has_cryptogram:)`` | This rule marks payments for manual review that were using 3DS, but didn’t result in a fully authenticated flow. This would review [edge cases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result) such as `attempt_acknowledged` and would also mark legitimate payments despite SCA exemptions. Because review rules are evaluated after block rules, cards that don’t support 3DS are blocked. |\n\n## When to create rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s default rules can block a substantial number of fraudulent payments. Businesses that need more control over which payments they want to review, allow, or block can write custom rules through Radar for Fraud Teams.\n\nConsider the following when deciding whether to enable custom rules:\n\n*   Whether you see certain features or user behaviors as more risky (for example, use of a disposable email).\n*   Whether you want to implement rules based on payment amounts or perceived risk level (for example, automatically review if the payment is over 500 USD, automatically allow if the payment is under 5 USD).\n*   Whether your existing disputed and refunded payments share any common patterns (for example, similar amounts, card types, or countries).\n*   Whether you have existing rules you want to migrate to Stripe—many of these rules might already be covered by Stripe’s machine learning models, and you can check how our system performs for your business before customizing it.\n\n### How to create effective rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile rules can help you automate your existing workflows, they can also negatively affect your business if used incorrectly. For example, a rule can automatically allow a large number of payments that are fraudulent or block a large number of legitimate payments if it’s not set up properly.\n\nKeep the following in mind while setting up rules:\n\n*   Rules only apply to future payments and don’t apply to any that you’ve already processed.\n*   Request 3DS rules only apply when using [Stripe Checkout](https://docs.stripe.com/payments/checkout), [Payment Intents](https://docs.stripe.com/payments/accept-a-payment), or [Setup Intents](https://docs.stripe.com/payments/save-and-reuse), and are evaluated before review, block, and allow rules.\n*   Before implementing any block rule to block all payments that meet its criteria, consider whether you’d rather review such payments first.\n*   Implement allow rules minimally, because they override Stripe’s default rules along with any other custom rules that match the same criteria.\n*   You can create a maximum of 200 rules across all rule types per account.\n\n## Construct rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add and manage rules from the [Rules tab of the Radar page](https://dashboard.stripe.com/test/radar/rules) in the Dashboard.\n\nTo add a new rule:\n\n1.  Click **\\+ Add rule**.\n2.  Choose the type rule type from the sub-menu.\n3.  In the rule editor, construct a rule using the syntax `{action} if {attribute} {operator} {value}` where:\n    *   `{action}`: How Radar responds when the rule criteria is met. This value is pre-populated based on the rule type selection you chose.\n    *   `{attribute}`: The element of the transaction to evaluate, such as the amount or card type. Begin typing with `:` to open a list of valid attributes. You can also evaluate your custom metadata by enclosing it in double colons, for example, `::product_sku::`.\n    *   `{operator}`: How to compare the attribute to the value, such as `=`, `>`, `!=`, and so on.\n    *   `{value}`: The value of the attribute to evaluate.\n4.  Click **Test rule**.\n5.  Correct any detected validation errors, if necessary.\n6.  On the **Review new rule** page, review how this rule performs against your recent transactions to confirm whether you want to enable it.\n7.  Click **Add rule** to begin applying this rule to all future transactions.\n\n### Use Radar Assistant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s rule editor has a built-in LLM assistant that constructs a Radar rule from a natural language prompt.\n\nTo use Radar Assistant:\n\n1.  From the [Rules tab of the Radar page](https://dashboard.stripe.com/test/radar/rules) in the Dashboard, click **\\+ Add rule**.\n2.  Choose rule type from the sub-menu.\n3.  In the rule editor, click **Radar Assistant**.\n\n![Manual rule writing](https://b.stripecdn.com/docs-statics-srv/assets/manual-rule-writing-view.598ac04a039b6222f5f7b46e14a74204.png)\n\nManual rule writing\n\n![Radar assistant](https://b.stripecdn.com/docs-statics-srv/assets/radar-assistant-view.4b7580fb9a503ae6df62990b4dea0a68.png)\n\nRadar Assistant\n\n1.  In the message field, enter your rule request. You might ask to:\n    *   _Review payments where the card and IP countries are different._\n    *   _Block Discover card payments of more than $1000._\n    *   _Allow payments from stripe.com email addresses._\n2.  When the Assistant returns its suggestion, you can either enter an additional command to make adjustments to the rule or you can click **Test rule** to see how the rule performs against your recent transaction history.\n3.  When you’re satisfied with the rule, click **Add rule** to enable it for all future transactions.\n\n**Training data consent:** By using Radar Assistant you agree that Stripe can log and use your chat entries to train and improve the Radar Assistant capabilities. If you don’t want to have your chat entries used for this purpose, write rules manually.\n\nLearn more about [Stripe AI services](https://support.stripe.com/questions/use-of-artificial-intelligence-(ai)-in-stripe-services).\n\n### Review rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe still processes payments normally when they meet a review rule’s criteria. But we place them into your [review queue](https://dashboard.stripe.com/test/radar) so your team can look at them more closely. Setting up a rule that’s too broad can result in too many payments being placed into your review queue, slowing down your customers and burdening your review team.\n\nStripe’s rule testing interface runs a simulation on the last 6 months of charges to determine how many legitimate, fraudulent, and blocked payments would have been affected by the rule, had it been implemented. While testing a rule and examining the last 6 months, make sure that:\n\n*   **Overall volume of payments is low**. Reviewing these payments shouldn’t create a burden to your team.\n*   **Human reviewers add value**. A human reviewer can generally identify if a payment was fraudulent with greater confidence than the automated system.\n*   **The rule results in a mix of successful and refunded or disputed payments**. This means that additional inspection on these types of payments can help separate legitimate payments from those that are fraudulent.\n\nThe following is an example of how to improve a review rule created by a business that wants to review pre-paid credit cards.\n\n| Original rule | Improved rule |\n| --- | --- |\n| `` **Review** if :card_funding: = `'prepaid'` `` | `` **Review** if :is_disposable_email: and :card_funding: = `'prepaid'` `` |\n| Too broad—results in too many reviews | More focused—results in a smaller number of reviews |\n\n### Block rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use block rules to block payments that you’re confident are fraudulent, or based on any restrictions your business has in place (such as blocking payments from prepaid cards). If you’re not sure how to apply block rules, we recommend placing payments in review using a review rule. After spending some time reviewing these payments for potential false positives, you can confirm whether you want to create a block rule instead.\n\nBlock rules only impact fraudulent and successful payments, because already-blocked payments are unaffected. While testing a rule, make sure that you:\n\n*   **Keep false positives as low as possible**. During testing, Stripe identifies the number of successful and disputed payments that would’ve been matched by the rule. A good block rule results in significantly more fraudulent payments blocked than legitimate payments.\n*   **Minimize unnecessary rules**. If your rule appears to perform very well but is already covered by an existing rule, your newer rule might not be necessary. Similarly, if the results during testing appear to be mixed, consider setting up a review rule instead so you can gather more information about those types of payments.\n\nThe following is an example of how to improve a block rule created by a business that’s suffering from a high level of fraud from payments outside the US:\n\n| Original rule | Improved rule |\n| --- | --- |\n| `` **Block** if :card_country: != `'US'` `` | `` **Block** if :card_country: != `'US'` and :risk_level: = `'elevated'` `` |\n| Too broad—high number of legitimate payments blocked | More focused—results in a smaller number of reviews |\n\n### Allow rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAllow rules override all other rules, including Stripe’s machine learning models, so use them with caution. Many businesses might not need to implement allow rules. If you have concerns that an allow rule could let through even a small number of fraudulent payments, consider adjustments to further restrict these rules before implementing them. Because allow rules override all other rules, including Stripe’s machine learning judgments, create allow rules that continue to block any payments we believe are likely to be fraudulent.\n\nAllow rules apply to all new payments as soon as you create the rule. This includes any payments that are similar to previously blocked payments. While testing a rule, make sure that you:\n\n*   **Examine the number of previously blocked payments that would have been allowed**. Allow rules override all other rules and Stripe’s risk assessment. When testing a new allow rule, all of the payments shown would have been allowed if this rule were active. This can include payments that had been blocked or disputed, impacting your future dispute rates.\n*   **Continue to block any high-risk payments**. You can do this by adding the following to any allow rule: `` and :risk_level: != `'highest'` ``\n*   **Evaluate a history of legitimate transactions at your business**. You can analyze connections between your own customers to allow a higher volume of transactions based on a history of legitimate purchases. This helps you block fewer payments from customers that have a proven history at your business. To do this, review the [attributes list](https://docs.stripe.com/radar/rules/reference#supported-attributes) and look for attributes that include the word “customer.”\n\nThe following is an example of how to improve an allow rule for a business that generally (but not always) sees good payments coming from customers in the United Kingdom:\n\n| Original rule | Improved rule |\n| --- | --- |\n| `` **Allow** if :ip_country: = `'GB'` `` | `` **Allow** if :ip_country: = `'GB'` and :risk_level: != `'highest'` `` |\n| Too broad—some fraudulent payments are allowed | More focused—a smaller number of fraudulent payments are allowed |\n\n## Maintaining your rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs your business continues to grow, you want to be sure that your rules continue to reflect the types of customers that you want to do business with. The following are some best practices to keep rules current for the state of your business.\n\n### Regularly monitor rules to ensure they’re still effective![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Rule metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud patterns constantly change, so we provide [metrics](https://dashboard.stripe.com/settings/radar/rules) to show how these rules are performing. These metrics vary depending on the type of rule, because the rule types perform different actions.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/rule-performance.8d495f28c352641ff7b710df3c3df2ed.png)\n\nUse the **rule performance chart** to understand the behavior of your Radar rules. Look for unexpected spikes or declines in the number of payments matching your rules, such as allow rules letting too many payments through or block rules blocking too many. These spikes may indicate a change in the types of payments your business is receiving or that might warrant updates to the rules themselves. Updates made to rules are displayed as triangles on the graph and can help you compare the impact of the change before and after you make it.\n\n**Color-coded lines** track the number of payments that match [3DS](https://docs.stripe.com/issuing/3d-secure) rules, allow rules, block rules, and review rules. **Triangular symbols** on these graph lines represent updates to rules of the corresponding type.\n\nYou can find information about the effectiveness of your rules and see how many payments each one has taken action against. You can also view and download a filtered list of every payment that a rule has been applied to. Evaluate this information to help you decide if you need to make changes to any rules or remove them entirely.\n\nTo view additional commands, click the overflow menu () menu. Additional commands include: **Disable**, **Enable**, **Edit** or **Delete** for any rule.\n\nYou can also use our reporting products Sigma and Data Pipelines to [query disputes and fraud data](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data), including rule decisions and attributes for each individual payment.\n\n#### Evaluate rule effectiveness![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find information about the effectiveness of your rules and see how many payments each one has affected. You can also view and download a filtered list of every payment that a rule has been applied to. Review the sample questions in the following table to help you decide if you need to make changes to any rules or remove them entirely.\n\n| Rule Type | Evaluate | Actions to consider |\n| --- | --- | --- |\n| General | If this rule no longer match any payments at all | Remove the rule. |\n|     | If this rule has anomalous behavior, such as allowing more payments than in previous time periods. | Manually review payments that matched this rule to determine if this is the behavior that you want. |\n| 3DS | If 3DS completion rate is high, but the number of disputes or EFWs is low. | Remove the rule since you may be issuing friction to good users. |\n|     | If fraud is high for transactions that pass 3DS. | Consider modifying your 3DS rule into a block rule to prevent these users from passing frictionless flow (controlled by issuers) or committing first party fraud. |\n|     | If the conversion rate for 3DS is low. | This might be a good rule since it might be mostly blocking fraudsters, but consider manually investigating matched payments to make sure your good users aren’t abandoning due to additional friction. |\n| Allow | If the number of disputes, EFWs, Refunds, or Failed payments are high. | Remove the rule that allows bad payments through. |\n| Block | Is the number of blocks going down, but your fraud is still steady or is increasing? | Modify your rule because it might no longer be effective. |\n|     | If the number of blocks is going up, but your fraud is still steady or increasing. | Modify your rule since it might be blocking good users. |\n|     | If the number of blocks is going up and your fraud is going down. | This suggests that your rule is effective, but consider manually reviewing a few transactions to make sure that you’re not blocking too many good users. |\n| Manual Review | If the percentage of payments that get reviewed is low. | Make the rule more restrictive since it might be too broad. |\n|     | If the number of successful or approved payments is high. | Remove the manual review rule entirely or write an allow rule to target those payments. |\n|     | If the number of refunds or disputes and Early Fraud Warnings are high. | Convert to a block rule. |\n\n**Request 3DS rules**\n\nFor request 3DS rules, we display:\n\n*   **3DS Requested**—the number of times a rule triggered a 3DS request.\n\nClick a 3DS rule to see the following metrics:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/request-credentials-rule-details.c22b65bc432aafec9e5bcb6079c53528.png)\n\n**Allow rules**\n\nFor allow rules, Radar for Fraud Teams users can view:\n\n*   **Allowed payments**—The total number of payments allowed by your rules.\n*   **Volume, allowed payments**—The total amount, in your local currency, associated with payments allowed by your rules.\n*   **Risk score**—The corresponding [risk outcomes](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes) assigned by Stripe machine learning models to the set of payments allowed by your rules.\n*   **Disputes from overrides**—The total number of allowed payments that were disputed.\n*   **Volume, disputes from overrides**—The total amount, in your local currency, associated with disputes from allowed payments.\n\nClick an Allow rule to see the following metrics:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/allow-rule-details.e8da078613fdbca5592d2f9330c0f6d4.png)\n\n**Block rules**\n\nFor block rules, we display:\n\n*   **Blocked payments**—The total number of payments blocked by your rules.\n*   **Volume, blocked payments**—The total amount, in your local currency, associated with payments blocked by your rules.\n\nRadar for Fraud Teams users can also view:\n\n*   **Risk score**—The corresponding [risk outcomes](https://docs.stripe.com/radar/risk-evaluation#risk-outcomes) assigned by Stripe machine learning models to the set of payments allowed by your rules.\n*   **Est. false positive rate**—The estimated percentage of non-fraudulent payments that were blocked for both your block rules as a set and by individual rules. (These estimates are made using the estimated false positive rates of the corresponding machine learning risk scores, which we calculate with experiments across the Stripe network.)\n*   **Est. fraudulent payments prevented**—The estimated number of fraudulent payments that your block rules prevented. Stripe uses machine learning risk scores, calculated by analyzing millions of transactions across the Stripe network, to predict payments with a high probability of being disputed or declined due to fraud and estimate which of those payments were successfully blocked by your rules.\n\nClick a Block rule to see the following metrics:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/block-rule-details.5df9a2e8652f228cf61b525a32ef56da.png)\n\n**Review rules**\n\nFor review rules, Radar for Fraud Teams users can view:\n\n*   **Payments sent to review**—The total number of payments that were sent to manual review by your rules.\n*   **Volume, approved reviews**—The total amount, in your local currency, associated with approved payment reviews.\n*   **Refund rate**—The percentage of reviews that were refunded.\n*   **Disputes from approved reviews**—The total number of payments that were approved in your review, but were ultimately disputed.\n*   **Volume, disputes from approved reviews**—The total amount, in your local currency, associated with disputes from approved payment reviews.\n\nClick a Review rule to see the following metrics:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/review-rule-details.10851302ef65dee05ffce64f7989528f.png)\n\n### Regularly monitor your manual review queue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your review queue is getting too large to manage, check to see if you have the right rules in place. If most reviews end up being refunded as fraudulent, consider some additional rules to block payments. Likewise, if most payments are approved, consider making your review rules more focused.\n\n### Analyze your disputed and refunded payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Disputes](https://docs.stripe.com/disputes) are inherently linked to fraud, so the more you do to reduce fraud, the lower your dispute rate. Check to see if disputed payments share any similar characteristics (for example, from the same locations or of similar amounts). You can also perform this type of investigation by looking at payments that have been refunded during a review. If you see trends, you can test and create the appropriate rules. If any payments appear to be fraudulent, refund and report them as fraud to avoid potential disputes.\n\nYou can also use our reporting products, Sigma and Data Pipeline, to [query disputes and fraud data](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data).\n\nYou can respond to any incoming disputes using the Dashboard or through the API, and our [dispute documentation](https://docs.stripe.com/disputes) includes some suggestions on how to present a well documented case.\n\n### Anticipate large changes to your business that might impact your fraud rate![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re planning any major product releases or changes to your service (for example, a new, high-value product or expanding your service into new countries), you might want to monitor these payments in the beginning. For these kinds of changes, it’s a good practice to set up some review rules so you can examine any new payments. Reviewing these payments and identifying patterns can help you set up new rules to protect your business from fraud.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [3DS Rule Examples](https://docs.stripe.com/radar/rules#request-3d-secure)\n*   [Continuous Fraud Management Guide](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data)\n*   [Query Disputes and Fraud Data](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data)\n*   [Rules Reference](https://docs.stripe.com/radar/rules/reference)\n*   [Supported Attributes](https://docs.stripe.com/radar/rules/supported-attributes)",
    "title": "Fraud prevention rules | Stripe Documentation",
    "description": "Stripe Radar uses machine learning technology to evaluate risk across millions of transactions and create rules that help you prevent fraud. Radar for Fraud Teams supports custom rule writing based on your specific business.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/build-full-embedded-integration",
    "markdown": "# Fully embedded Connect platform integration\n\n## Provide Connect features to your connected accounts through your own website.\n\nConnect embedded components let you add Stripe-managed functionality to a custom interface that you provide to your connected accounts. They can perform payment-related activities there instead of through the Stripe Dashboard. In a fully embedded integration:\n\n*   Connected accounts access Stripe-related data, forms, and notifications through embedded components in your platform’s application. They don’t have access to a Stripe Dashboard.\n*   Stripe manages credit and fraud risk on your connected accounts. For any risk or compliance actions, we communicate directly with connected accounts and they respond by interacting with embedded components.\n*   Stripe email notifications direct your connected accounts to embedded components on your website to review information or take required action. You must provide Stripe with the URLs for those components.\n\n## View the demo site![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve built a complete [demo site for our fictitious business, Furever](http://furever.dev/). Furever is a platform providing software for pet-groomers that allows their users to collect payments. In this demo, you can interact with many embedded components, including account onboarding and account management.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you can build an embedded integration, complete the following prerequisites:\n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\nYou must also decide whether your platform will own pricing, in which case Stripe collects payment fees from your platform and you bill your connected accounts. Otherwise, Stripe owns pricing and collects payment fees directly from your connected accounts.\n\n[](#create-a-connected-account)\n\nThe following example creates an account where Stripe [manages risk](https://docs.stripe.com/connect/risk-management), controls pricing, and assumes responsibility for account onboarding requirements. Your platform uses embedded components and isn’t liable for negative balances. Your connected accounts don’t have access to Stripe-hosted dashboards.\n\n#### Note\n\nBecause Stripe controls pricing in this example, you must integrate the Documents embedded component. In addition, Stripe notifies connected accounts by email when their tax invoices or 1099s are ready for download. If you create accounts where your platform controls pricing, the Documents component isn’t required, and Stripe doesn’t send notifications to connected accounts about tax invoices or 1099s.\n\nYou can request additional capabilities, such as specific payment methods, after the account onboards.\n\nCall [/v1/accounts](https://docs.stripe.com/api/accounts/create) with the following parameters:\n\n*   `country` of the account\n*   `controller.stripe_dashboard.type` = `none`\n*   request the `card_payments` and `transfers` capabilities\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"controller\": {     \"type\": \"application\",     \"is_controller\": true,     \"losses\": {\"payments\": \"stripe\"},     \"fees\": {\"payer\": \"account\"},     \"requirement_collection\": \"stripe\",     \"stripe_dashboard\": {       \"type\": \"none\",     },   },   \"type\": \"none\",   ... }`\n\n[](#setup-embedded-components)\n\nConnected accounts access their accounts, as well as core payments functionality, directly in your platform and don’t have access to a Stripe-hosted Dashboard, so you must provide access through your site.\n\nYour integration must include the following embedded components:\n\n*   Account onboarding component\n*   Account management component\n*   Notification banner component\n*   Documents component (when Stripe collects Stripe fees directly from connected accounts)\n\nFor any other [optional components](https://docs.stripe.com/connect/supported-embedded-components), you can use our embedded components or build your own UI.\n\nMake sure you [set up embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) before onboarding connected accounts.\n\n[](#onboard-connected-accounts)\n\nStripe uses an [Account Session](https://docs.stripe.com/api/account_sessions) to express your intent to provide embedded component access to the connected account. Using an Account Session, the embedded account onboarding component collects all required information based on your requested capabilities.\n\n### Prefill the account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe embedded account onboarding component collects all required information based on your requested capabilities.\n\nYou can streamline the onboarding flow for your users by prefilling account fields with known information before you create an Account Session. Prefill as much account information as possible, including company, individual, and external account information, following these steps:\n\n1.  Review the [required verification information](https://docs.stripe.com/connect/required-verification-information) docs to learn more about how the combination of countries and capabilities you select for connected accounts affects their requirements.\n2.  To determine the information that Stripe requires from a connected account, retrieve the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) property.\n3.  Collect prefillable information.\n4.  Record the information on the account by calling [Update Account](https://docs.stripe.com/api/accounts/update).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d business_type=individual \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"individual[first_name]\"=Jenny \\  -d \"individual[last_name]\"=Rosen \\   --data-urlencode \"individual[email]\"=\"jenny.rosen@example.com\" \\  -d \"individual[address][line1]\"=\"354 Oyster Point Blvd\" \\  -d \"individual[address][city]\"=\"South San Francisco\" \\  -d \"individual[address][state]\"=CA \\  -d \"individual[address][postal_code]\"=94080 \\  -d external_account=  {{BANK_ACCOUNT_TOKEN_ID}}`\n\nAfter the connected account completes onboarding through the Account Onboarding embedded component, your platform can no longer update certain information such as payout accounts or legal entity information. The connected account must make any updates to that information because the platform isn’t responsible for negative balances.\n\n### Onboard users through the embedded onboarding component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts must go through onboarding and provide required information to enable charges and payouts. To onboard a connected account, host the [onboarding embedded component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) on your site and direct new accounts there.\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/connect/get-started-connect-embedded-components), enable account management by specifying `account_onboarding` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[account_onboarding][features][external_account_collection]\"=true`\n\nAfter creating the Account Session and initializing ConnectJS, you can render the Account onboarding component in the front end:\n\n`// Include this element in your HTML const accountOnboarding = stripeConnectInstance.create('account-onboarding'); accountOnboarding.setOnExit(() => {   console.log('User exited the onboarding flow'); }); container.appendChild(accountOnboarding);`\n\nPresent the onboarding flow to the account’s primary owner. The primary owner sets up authentication with Stripe, and is the user who can edit the account details and respond to risk interventions. The connected account has only a single set of authentication credentials with Stripe. The user with authentication credentials can authenticate using one-time SMS codes to perform more sensitive actions like updating bank accounts for payout destinations or providing updated legal entity information.\n\n### Listen for onboarding events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the account proceeds through onboarding, [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) events are also sent to your configured [Connect webhooks](https://docs.stripe.com/connect/webhooks). When the account finishes submitting their details, the `details_submitted` field on the Account changes to true. Check the status by looking for `details_submitted: true` in the `account.updated` event body in your webhook handler or by [retrieving the Account](https://docs.stripe.com/api/account/retrieve). If `details_submitted` is false, show the embedded onboarding component again. If the account submitted some information, the embedded onboarding component skips it and only collects the unsubmitted requirements.\n\nWhen a connected account submits their details and completes the onboarding flow, the embedded onboarding component calls the `onExit` handler that you [set when you render the component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). Use the callback to direct the account to their next action. If you don’t set an exit handler, or take action inside of the handler, the account sees a completion message without a clear next step.\n\n### Request additional capabilities (optional)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform can continue to request additional [capabilities](https://docs.stripe.com/connect/account-capabilities) after onboarding a connected account. For example, you must request the capabilities for any payment methods you want to enable for an account.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"capabilities[bancontact_payments][requested]\"=true \\  -d \"capabilities[eps_payments][requested]\"=true \\  -d \"capabilities[giropay_payments][requested]\"=true \\  -d \"capabilities[ideal_payments][requested]\"=true \\  -d \"capabilities[p24_payments][requested]\"=true \\  -d \"capabilities[sofort_payments][requested]\"=true \\  -d \"capabilities[sepa_debit_payments][requested]\"=true`\n\nIf any requested capabilities require additional information, the connected account receives a notification through the [embedded notification banner](#embed-the-notification-banner).\n\n[\n\n## Handle ongoing compliance and risk updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-compliance-and-risk-updates)\n\nBecause Stripe manages credit and fraud risk for your connected accounts, your accounts must be able to see and respond to alerts from Stripe. To facilitate that, your platform must integrate the notification banner and account management embedded components. For more information about how Stripe supports your connected accounts through these components, see [Embedded Connect support](https://docs.stripe.com/connect/embedded-support).\n\nStripe uses the [notification banner embedded component](https://docs.stripe.com/connect/supported-embedded-components/notification-banner) to notify connected accounts of outstanding compliance requirements and other [risk-related requests](https://docs.stripe.com/connect/embedded-risk). Responding to these notifications allows an account to remain compliant so it can process payments and receive payouts. If there are no outstanding notifications, the embedded notification banner doesn’t render.\n\nIntegrate the notification banner in a highly visible and easily accessible location on your website. For example, you can integrate it at the top of your payments page.\n\n### Create an Account Session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable notification banner by specifying `notification_banner` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[notification_banner][enabled]\"=true \\  -d \"components[notification_banner][features][external_account_collection]\"=true`\n\n`// Include this element in your HTML const notificationBanner = stripeConnectInstance.create('notification-banner'); container.appendChild(notificationBanner);  // Optional: // notificationBanner.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\nTo respond to a banner notification, the account can click a button in the notification. You don’t need to redirect them to the account management embedded component.\n\n## Embed account management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe requires the [account management embedded component](https://docs.stripe.com/connect/supported-embedded-components/account-management) when managing risk. Integrate the component in your website where an account updates their settings or profile.\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account management by specifying `account_management` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_management][enabled]\"=true \\  -d \"components[account_management][features][external_account_collection]\"=true`\n\n### Render the account management component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`// Include this element in your HTML const accountManagement = stripeConnectInstance.create('account-management'); container.appendChild(accountManagement);  // Optional: // accountManagement.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\nThis component allows an account to update their account details, respond to compliance requirements that are due, and update their authentication credentials.\n\n[](#integrate-payments)\n\nSet up the payments integration after integrating required embedded components. You can add the payments and payout embedded components to your platform or build your own workflows.\n\nConfigure [Connect webhooks](https://docs.stripe.com/connect/webhooks) and listen for the `account.updated` event. A connected account is ready to receive payments when its `charges_enabled` property is true.\n\n## Integrate embedded payments and payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdd the [payments](https://docs.stripe.com/connect/supported-embedded-components/payments) and [payouts](https://docs.stripe.com/connect/supported-embedded-components/payouts) embedded components to your platform _before_ building your payments integration. That way, an account can easily access and manage their core payment workflows.\n\nThe payments component shows a list of the connected account’s payments, and includes filtering and individual payment detail views. An account can issue refunds and respond to disputes with evidence on individual payments through this component.\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payments embedded component by specifying `payments` in the `components` parameter. You can turn on or off an individual feature of the payments component by specifying the `features` parameter under `payments`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payments][features][refund_management]\"=true \\  -d \"components[payments][features][dispute_management]\"=true \\  -d \"components[payments][features][capture_payments]\"=true \\  -d \"components[payments][features][destination_on_behalf_of_charge_management]\"=false`\n\nYour connected accounts can view the complete set of information about direct charges. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n\n### Render the payments component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payments component in the front end:\n\n`// Include this element in your HTML const payments = stripeConnectInstance.create('payments'); container.appendChild(payments);`\n\nThe payouts component shows the connected account’s recent payouts, current balance, and when funds will become available.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payouts embedded component by specifying `payouts` in the `components` parameter. You can enable or disable individual features of the payouts component by specifying the `features` parameter under `payouts`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[payouts][features][instant_payouts]\"=true \\  -d \"components[payouts][features][standard_payouts]\"=true \\  -d \"components[payouts][features][edit_payout_schedule]\"=true \\  -d \"components[payouts][features][external_account_collection]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payouts component in the front end:\n\n`// Include this element in your HTML const payouts = stripeConnectInstance.create('payouts'); container.appendChild(payouts);`\n\nFor an immersive guide to implementing embedded components, follow the [Connect embedded components integration quickstart](https://docs.stripe.com/connect/connect-embedded-components/quickstart).\n\n## Accept a payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your connected accounts transact directly with customers, Stripe strongly recommends using [direct charges](https://docs.stripe.com/connect/direct-charges).\n\nStripe assesses payment transaction fees to your platform when `controller.fees.payer` is not set to `account` for the [Account](https://docs.stripe.com/api/accounts/object). In turn, you’re responsible for charging payment processing fees on your connected accounts. You can specify a value for the [application fee](https://docs.stripe.com/connect/direct-charges#collect-fees) on each payment to automatically take fees from connected accounts without having to build it into your integration.\n\nWe recommend using [Stripe Checkout](https://docs.stripe.com/payments/checkout), a prebuilt Stripe-hosted page, to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer.\n\nYou can also use the [Payment Element](https://docs.stripe.com/payments/payment-element), a prebuilt UI component you can embed to accept additional payment methods with a single integration.\n\n### Create a Checkout Session Client-side Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Checkout Session controls what a customer sees in the Stripe-hosted payment page such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. For more information, see [Customize branding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding).\n\nUnlike destination charges or separate charges and transfers, connected accounts are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.\n\nTo create a Checkout Session, add a checkout button to your website that calls a server-side endpoint.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Pay</button>     </form>   </body> </html>`\n\nOn your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n*   `line_items`—Represents items that your customer is purchasing and that show up in the hosted user interface.\n*   `success_url`—This argument redirects a customer after they complete a payment.\n*   `cancel_url`—This argument redirects a customer after they click **cancel**.\n*   `Stripe-Account`—This header indicates a [direct charge](https://docs.stripe.com/connect/direct-charges) for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. Checkout uses the connected account’s branding, which allows their customers to feel like they’re interacting directly with the connected account instead of your platform.\n*   _(Optional)_ `payment_intent_data[application_fee_amount]`—This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the `application_fee_amount` is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.\n\n### Handle post-payment events Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend handling two other events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\n[](#setup-email-communications)\n\nStripe communicates with your connected accounts on your behalf to manage risk and ensure ongoing compliance. You can customize and brand these email communications with your own email domain and platform branding.\n\nWe send the following emails to your connected accounts:\n\n*   **Account emails** verify an account’s information, such as additions or changes to an email address, phone number, or bank account.\n*   **Compliance emails** notify accounts to provide required information. Stripe often needs to collect further information to maintain compliance with our financial partners.\n*   **Risk emails** notify accounts when they are under a risk review. These emails often provide instructions on how to submit information to resolve a risk action; for example, to remove a pause on payouts.\n*   **Tax emails** (only when Stripe collects Stripe fees directly from connected accounts) notify users when their tax invoices or 1099s are ready to download.\n\nIf you want to send any other payments-related emails to your connected accounts, you must send them yourself. For example, to send emails for new disputes, [listen for](https://docs.stripe.com/webhooks) the `charge.dispute.created` event on a connected account. When that event occurs, use [the Disputes API](https://docs.stripe.com/api/disputes) to get the details and email them to the account.\n\nYou must [update your Connect settings with the URLs](https://dashboard.stripe.com/settings/connect/site-links) of your payments and account workflows so Stripe’s email communications can include links for your accounts to respond.\n\n## Handle redirects from email links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmails sent by Stripe that contain a call to action need to include a link to that action. For example, if we send an email directing action on a connected account, it must include a link to your Account management component.\n\nBefore you can create a live mode Account Session, you must provide the URLs where you have integrated the embedded components into your website. Configure the sending email domain and embedded component URLs in the **Site links** section of [your platform’s Connect settings](https://dashboard.stripe.com/settings/connect/embedded_ui).\n\n#### Note\n\nTest mode environments use the same URLs as live mode.\n\nFor embedded components integrated in your site, select **Yes** and enter the URL of the page that hosts the component. For any actions not handled by an embedded component, select **No** and enter the URL of the page on your site where the account can perform the action. After entering the URLs, test them to verify that they open the right pages.\n\nYou must set URLs for the following:\n\n*   Notification banner\n*   Account management\n*   Payments\n*   Payouts\n*   Balances\n*   Documents (when Stripe collects Stripe fees directly from connected accounts)\n\nWhen sending an email, Stripe automatically appends the connected account ID to the redirect URL as the `stripe_account_id` parameter. Use that parameter to identify the account and verify that they’re authenticated. Set up the route on your server to read the parameters and display the correct embedded component.\n\nFor more information about configuring Stripe emails to your connected accounts, see [Email communications in embedded Connect integrations](https://docs.stripe.com/connect/embedded-comms)\n\n## Configure email branding and settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can send emails reflecting your platform’s brand settings from your own email domain to your connected accounts. To configure Stripe emails to your connected accounts, visit [Emails](https://dashboard.stripe.com/settings/connect/emails) in your platform Dashboard.\n\n[](#go-live)\n\nAt this point, you’ve configured your platform integration by doing the following:\n\n*   Created connected accounts in the correct configuration\n*   Integrated embedded components to allow connected accounts to onboard, manage their account, and respond to risk actions through your website\n*   Set up payments using Direct charges with an application fee\n*   Set up branded email communications to enable Stripe to communicate with your users for compliance, risk actions, and necessary documents\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest your account creation flow by using the embedded account onboarding integrated in your platform. Test the settings of your payment methods for your connected accounts by logging into one of your test accounts and navigating to the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). Test your checkout flow with your test keys and a test account. You can use our [test cards](https://docs.stripe.com/testing) to test your payments flow and simulate various payment outcomes.",
    "title": "Fully embedded Connect platform integration | Stripe Documentation",
    "description": "Provide Connect features to your connected accounts through your own website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/identify-forms-missing-information",
    "markdown": "# Identify forms with missing information\n\n## Learn how to find and correct forms with missing information.\n\nStripe automatically identifies forms that are above the IRS or state filing thresholds. In addition to the totals, a 1099 form also needs to have the name, address, and TIN of the connected account on the form to be ready for filing.\n\nIf a form is above the threshold (has a filing obligation) and has the **name**, **address**, and **TIN** on the form, Stripe labels the form `Ready`:\n\n![Ready label.](https://b.stripecdn.com/docs-statics-srv/assets/identity_1.7c55d26b4ecfd38740e2de9acd0ff5b3.png)\n\nIf you need to file a form but the form is missing this key information, Stripe labels the form `Needs attention`:\n\n![Needs attention label.](https://b.stripecdn.com/docs-statics-srv/assets/identity_2.c7b46cd05ee19f79cc1f7a4c19a205f5.png)\n\nRefer to the [Get started with tax reporting](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status) guide to learn more about tax form statuses.\n\nThe following information describes how to track what forms have `Needs attention` status, why they have that status, and what to do to get their status to `Ready`.\n\n## Identity forms in `Needs attention` state![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Needs attention** tab lists all forms with a `Needs attention` status.\n\n![Needs attention tab.](https://b.stripecdn.com/docs-statics-srv/assets/identity_3.0ec06ddc52465f44465ff9c5a22057b0.png)\n\n#### Note\n\nSome forms that appear to be below the federal filing threshold can also appear as `Ready` or `Needs attention` due to Grouped TINs or state filing thresholds. [Learn more](https://docs.stripe.com/connect/file-tax-forms#below-threshold-forms)\n\nThe **Payee details** section lists the missing data that causes the form to have a `Needs attention` status:\n\n![Payee details section.](https://b.stripecdn.com/docs-statics-srv/assets/identity_4.bd8c5d5254cb44977f15b2f84d494a14.png)\n\nRefer to the [Required verification information for taxes](https://docs.stripe.com/connect/required-verification-information-taxes) guide for information on what information is needed for each form.\n\nThe reasons a form might have a `Needs attention` status include:\n\n*   **Missing address:** The _line1_, _city_, _state,_ or _postal code_ is missing.\n*   **Missing TIN:** The TIN is missing.\n*   **Mismatched TIN:** The name and TIN are present on the form, but failed Stripe’s TIN verification with the IRS as they didn’t match IRS records. [Learn more about Tax form TIN status](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-tin-status).\n*   **Missing name:** The name is missing from the account. This reason is rare.\n\nUse the filter to retrieve forms based on the reason for the `Needs attention` status:\n\n![Filter forms by status](https://b.stripecdn.com/docs-statics-srv/assets/identity_5.9cd7b0b5fff7639007ae9e507504d00f.png)\n\nThere are several ways to fix forms that need attention.\n\n[](#scenario-a)\n\nThese are your options if you already have this data or able to retrieve it outside of Stripe.\n\n*   **Option 1 Recommended:** If you already have this data in your internal systems, or have a way to reach out to your connected account owners to collect this information directly, use the [Accounts API](https://docs.stripe.com/api/accounts/update) to send that data to Stripe. Make sure these required [fields](https://docs.stripe.com/connect/required-verification-information-taxes) are present on the Accounts API. After you send the data to Stripe, it appears in the tax form within 24-36 hours, and the form automatically transitions from `Needs attention` to `Ready`.\n*   **Option 2:** Use [CSV imports](https://docs.stripe.com/connect/modify-tax-forms?method=csv) to get this data into the current year’s tax forms. If the CSV process imports all of the required information, the tax form automatically transitions from `Needs attention` to `Ready`. Importing these details using CSV only updates this information on the tax form, and doesn’t update the source of truth within Stripe. As a result, the connected account details view doesn’t show these updates.\n*   **Option 3**: If you need to update only a few forms, you can choose to directly modify the forms in the Dashboard using the [Tax Form Editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard).\n\n[](#scenario-b)\n\nThese are your options if you don’t have the required information and you want Stripe to help you obtain this data. Stripe recommends using both options to for the best chance of collecting all the information for filing.\n\n*   **Option 1:** If you enable e-delivery through Stripe Express, connected account owners eligible for IRS filing receive emails from Stripe requesting confirmation of their tax information and to update their delivery preferences through Stripe Express. Connected account owners have an opportunity to [view and edit their personal details](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) (name, address, TIN).\n    \n    ![Tax form confirm information email.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-confirm-information-email-2023.8868bb92bbd3f2fd5fa0e2fe319c11ab.png)\n    \n    ![Confirm information.](https://b.stripecdn.com/docs-statics-srv/assets/identity_7.1801e85e31759f80b4e3ffd7fe974778.png)\n    \n*   **Option 2:** Use Stripe Onboarding to collect missing details\n    \n    1.  Add the 1099 capability on your accounts [programmatically](https://docs.stripe.com/connect/account-capabilities#tax-reporting) or [one-by-one](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-capabilities) using the Connect Dashboard. By adding the 1099 capability, you make name, address, and TIN a requirement on all your connected accounts. If your connected accounts have more than 600 USD in lifetime volume and don’t have name, address, and verified TIN on file, payouts are paused until Stripe has that information.\n        *   There’s another feature in private beta called Additional Verifications that allows platforms to add TIN and address requirements on their connected accounts, along with flexibility on when to disable payouts. Reach out to your account manager if you’d like to learn more.\n    2.  Create [account links](https://docs.stripe.com/api/account_links/create) and route your users to Stripe onboarding for Custom accounts. For Express accounts, Stripe automatically detects when there are `currently_due` requirements (such as address or TIN) on the account and sends the connected account owner an email.\n    \n    ![Verify your personal details.](https://b.stripecdn.com/docs-statics-srv/assets/identity_8.1dc79629776f61a43b06d68a583d6aa4.png)",
    "title": "Identify forms with missing information | Stripe Documentation",
    "description": "Learn how to find and correct forms with missing information.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/modify-tax-forms",
    "markdown": "# Update and create 1099 tax forms\n\nStripe automatically generates tax forms for all connected accounts that have transactions in a given tax year. Tax forms are available on the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page in the Dashboard. If you need to update or correct a 1099 form, you can do so in one of the following ways:\n\nYou can also create new tax forms by importing CSV files. If your connected account doesn’t already have a tax form, performing Update or Delta imports automatically creates the form.\n\nClick **Create** to create a standalone tax form that isn’t associated with a connected account. You must include all columns except for `form_id` and `stripe_account_id`. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery). If you’re creating a standalone form of a non-default form type, you must include the CSV headers of that form type. If you need assistance getting the correct CSV headers, reach out to support@stripe.com.\n\nYou can update the values for payee details and payment amounts in a 1099 tax form using the Tax form editor in the Dashboard. After you update the values, you can generate a new or corrected form with updated values.\n\n## Understanding the tax form editor UI![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you open a record from the **Tax reporting** page, it includes the following sections:\n\n*   **Payee details**\\-Includes details about the owner of the connected account that you pay out to.\n*   **Totals**\\-Includes the payment detail totals form.\n*   **Forms details**\\-Includes details about delivery and filing status.\n*   **Form timeline**\\-Includes a log of corrections to the tax form. It doesn’t log changes made to the form by exporting the form to a CSV file and then importing an updated CSV file with new values.\n\nYou can modify values in the **Payee details**, **Totals**, and **Forms details** sections.\n\n#### Note\n\nWhen you update the values of a 1099 tax form it updates only the data on the form, not the data in the connected account.\n\n#### Warning\n\nEditing the **Payee details** or **Totals** data on a form during the form’s tax year will disable automatic updates to those fields by Stripe. You can always undo your edits to resume automatic updates later.\n\n**To update a 1099 tax form before filing**\n\n1.  On the **Tax reporting** page, click the tax form to update.\n2.  Click **Edit**.\n3.  To update the user details on the 1099 form, such as **Name**, **TIN**, or **Address**, expand **Payee details** and then update the value for each field as appropriate.\n4.  To update details related to payments and withholdings on the 1099 form, expand **Totals**, and then update the values as appropriate.\n5.  Click **Save** to save your changes.\n\nYou can then download the updated form as a PDF document.\n\nWhen you save the form, Stripe validates the format of the values you entered. For example, If you provide a TIN that doesn’t include the correct number of digits, Stripe displays an error message. Stripe doesn’t verify that the TIN is the correct TIN for the connected account, only that it includes the correct number of digits.\n\n## Correcting a tax form after filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, you need to correct the values in a 1099 tax form after you file it. If you try to update a tax form that you already filed, you see a **Correct** button instead of an **Edit** button in the form.\n\n#### Note\n\nYou can’t create a corrected 1099 form for a connected account if you already filed it and the status for the filed form is `Processing` or `Rejected`. If you need to update a form that is `Processing` or `Rejected`, contact [Stripe support](https://support.stripe.com/contact) for assistance.\n\n**To correct a 1099 tax form after filing**\n\n#### Warning\n\nThe IRS allows you to submit a correction to either the **Payee details** or **Totals** data, but not both at the same time. Correct only one set of data for a correction.\n\n1.  On the **Tax reporting** page, click the tax form to correct.\n2.  Click **Correct**.\n3.  To correct the user details on the 1099 form, such as **Name**, **TIN**, or **Address**, expand **Payee details** and then correct the value for each field as appropriate.\n4.  To correct details related to payments and withholdings on the 1099 form, expand **Totals** and then correct the values as appropriate.\n5.  Click **Save** to save your changes.\n\nYou can then [file](https://docs.stripe.com/connect/file-tax-forms) the corrected form and download a PDF copy for your records.\n\n## Quick Correct: Payee Details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the payee details for a connected account don’t match the values on a tax form for the connected account, a pencil icon appears next to **Payee details**. Hovering over the pencil shows a tool tip listing the information that doesn’t match. Click the pencil icon, then click **Correct** to automatically generate a corrected form in which the payee details match those of the connected account.\n\nWhen you click **Correct**, Stripe generates a new form with the updated payee information from the connected account **Payee details**. If there is an existing corrected form that wasn’t yet filed, the corrected form is updated with the information from the connected account. A corrected form includes all payee details that don’t match, such as payee name, address, and TIN. If more than one value is updated, the corrected form updates all mismatched fields.\n\nWhen you click **Correct** to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. You should verify all changes before filing the updated forms. If a connected account user made a typo to their address, the incorrect address is updated in the corrected form. You can choose to change a single value in an updated tax form by using CSV export to export the file to correct. To learn more, see [Correct tax forms](https://docs.stripe.com/connect/correct-tax-forms).\n\nYou can use **Quick Correct** to update details only in tax forms that you have already filed and contain a mismatch between the tax form data and the data in the connected account. When no mismatched data is detected, the pencil icon does not display. If there is a pencil icon displayed to indicate a mismatch in the data because the connected account data is missing, the pencil icon is displayed but the **Correct** button is deactivated.\n\nIn the **Quick Correct** panel you can view all of the payee details except for the TIN, which is partially redacted.\n\nYou can add a **Payee details** filter with a value of `Payee has updated identity info` to see only the list of forms with identity values that differ between the connected account and the form, which are the only forms eligible for **Quick Correct**.\n\n![Payee details filter](https://b.stripecdn.com/docs-statics-srv/assets/payee_details.cf41cd76412580985136ccbf38ba8d25.png)\n\n## Revert: Payee Details & Totals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the data for **Payee details** or **Totals** doesn’t match the values on a tax form for the connected account, an Edited badge appears next to the section. Hovering over the badge shows a tool tip listing the values that don’t match. Click the **Undo edits** button to automatically revert the tax form to match the data in the connected account.\n\nThe difference between **Revert** and **Quick Correct** is that you can Revert details on a form when it hasn’t been filed yet, and you can Quick Correct a form after it has been filed. When you click Revert, all mismatched data is updated. You can’t choose which fields to update and exclude others. If there is data missing from the connected account, the Revert button is deactivated.\n\n![Revert details](https://b.stripecdn.com/docs-statics-srv/assets/revert_details.be237e4cac5598ce9708f7260e7988db.png)\n\n## Updating or correcting a 1099 tax form after filing using connected account data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf data for a connected account changes after Stripe generates 1099 forms, you can use the editor in the Dashboard to quickly replace data in the 1099 with data from the connected account. Stripe displays a bell icon in the **Payee details** section when the data in the form is different from the data in the connected account.\n\n**To update or correct a tax form after filing using connected account data**\n\n1.  On the **Tax reporting** page, click the tax form to correct.\n2.  Click the bell icon to display the data from the connected account.\n3.  Click **Correct** to update the data in a 1099 form with the data from the connected account.\n\nIf you signed up for stripe hosted e-delivery, you can have your users update their tax information themselves before their tax form is filed. If users update their information after filing, the tax form page shows an option to correct the filed 1099 form with the updated information. For more information, see [Quick correct: Payee details](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#quick-correct:-payee-details).\n\nUsers can edit their Legal name, Taxpayer Identification Number (TIN), and address. Note that some information can’t be edited after a user’s legal entity is verified, including date of birth, and business type. To edit the information user must contact Stripe Support.",
    "title": "Update and create 1099 tax forms | Stripe Documentation",
    "description": "Update and create 1099 tax forms for connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/account-capabilities",
    "markdown": "# Account capabilities | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about capabilities you can enable for accounts and the requirements you must satisfy to use them.\n\nThe capabilities you request for a connected account determine the information you need to collect for that account. To reduce onboarding effort, only request the capabilities you need. The more capabilities you request, the more information you must collect.\n\nYou can start by completing the [platform profile](https://dashboard.stripe.com/connect/profile) to understand which capabilities might be appropriate for your platform.\n\n#### Note\n\nFor some capabilities, requesting them enables them permanently. Attempting to remove or unrequest a permanent capability returns an error.\n\nAfter creating most accounts, you can request additional capabilities and remove existing non-permanent capabilities. However, you can’t unrequest capabilities for connected accounts that other platforms control.\n\n## Supported capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFollowing is a list of available capabilities. Click an item to expand or collapse it.\n\n### Transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Card payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### US tax reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### India international payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Multiple capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRequesting multiple capabilities for a connected account is common, but involves the following considerations:\n\n*   Capabilities operate independently of each other.\n*   If a connected account has both `card_payments` and `transfers`, and the `status` of either one is `inactive`, then both capabilities are disabled.\n*   You can request or unrequest a capability for a connected account at any time during the account’s lifecycle.\n\nCapabilities also allow you to collect information for multiple purposes at the same time. For example, you can collect both required tax information and the information required for a requested capability. If you’re onboarding a connected account with the `transfers` capability and they’re required to file an IRS form 1099-MISC (a US federal tax reporting form), you can collect information for both at the same time.\n\n## Create an account with capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCapabilities are set on the [Account](https://docs.stripe.com/api/accounts/object) object. To get the list of available capabilities for an Account, use the [list\\_capabilities](https://docs.stripe.com/api/capabilities/list?lang=curl) endpoint.\n\nAccount creation and requesting capabilities differ for connected accounts in different configurations.\n\n*   Setting up connected accounts with access to the full Stripe Dashboard, including Standard accounts, automatically requests capabilities for them.\n*   For connected accounts with access to the Express Dashboard, including Express accounts, you can either request their capabilities or use the [onboarding configuration settings](https://dashboard.stripe.com/settings/connect/onboarding-options/countries) to automate capability requests.\n*   For connected accounts without access to a Stripe-hosted dashboard, including Custom accounts, you must request their capabilities.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d type=custom \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\nInformation requirements vary depending on the capability, but they often relate to identity verification or other information specific to a payment type.\n\nWhen your connected account is successfully created, you can [retrieve a list](https://docs.stripe.com/api/accounts/retrieve) of its requirements:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIn the response, the `requirements` hash specifies the required information. The values for `payouts_enabled` and `charges_enabled` indicate whether payouts and charges are enabled for the account.\n\n## Capabilities for existing connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following sections describe how to preview information requirements or manage capabilities for existing connected accounts using the [Capabilities API](https://docs.stripe.com/api/capabilities).\n\n### Preview information requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can preview what information is needed from your connected account for a particular capability either before or after that capability has been requested.\n\nWhen you request capabilities, `account.updated` [webhooks](https://docs.stripe.com/webhooks \"webhook\") fire and the account’s requirements can change. To enable a requirement faster and avoid disabling the account, preview the requirements and collect any required information before requesting the capability.\n\nThe following example [lists](https://docs.stripe.com/api/capabilities/retrieve) the requirements for the `card_payments` capability for a specific account.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/capabilities/card_payments \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIn the response, check the `requirements` hash to see what information is needed:\n\n`{   \"id\": \"card_payments\",   \"object\": \"capability\",   \"account\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"requested\": false,   \"requested_at\": null,   \"requirements\": {     \"past_due\": [],     \"currently_due\": [\"company.tax_id\", ...],     \"eventually_due\": [...],     \"disabled_reason\": ...,     \"current_deadline\": ...,   },   \"status\": \"unrequested\" }`\n\nThe value for `status` identifies whether the capability has been requested. When the value is [requested](#requesting-unrequesting), the account’s requirements are active.\n\nIn addition to previewing a capability’s requirements before requesting it, you can use the same endpoint to view a capability’s current requirements. That can help you stay informed when requirements change.\n\n### Request and unrequest capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo request a capability for an account, set the capability’s `requested` value to `true` by [updating the account](https://docs.stripe.com/api/capabilities/update). If the request succeeds, the API returns `requested: true` in the response.\n\nTo unrequest a capability for an account, set the capability’s `requested` value to `false` by [updating the account](https://docs.stripe.com/api/capabilities/update). If the capability can’t be removed, the call returns an error. If the call succeeds, the API returns `requested: false` in the response.\n\nYou can also [request and remove an account’s capabilities](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-capabilities) from the Dashboard. If a capability can’t be removed, its **Remove** button is disabled.\n\nThe example below requests the `transfers` capability for a specific connected account:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/capabilities/transfers \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d requested=true`\n\nThe example below requests multiple capabilities for a specific connected account:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"capabilities[bancontact_payments][requested]\"=true \\  -d \"capabilities[eps_payments][requested]\"=true \\  -d \"capabilities[giropay_payments][requested]\"=true \\  -d \"capabilities[ideal_payments][requested]\"=true \\  -d \"capabilities[p24_payments][requested]\"=true \\  -d \"capabilities[sofort_payments][requested]\"=true \\  -d \"capabilities[sepa_debit_payments][requested]\"=true`",
    "title": "Account capabilities | Stripe Documentation",
    "description": "Learn about capabilities you can enable for accounts and the requirements you must satisfy to use them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/service-agreement-types",
    "markdown": "# Service agreement types | Stripe DocumentationThe Stripe Docs logo\n\n## A service agreement establishes the relationship between Stripe and the platform's users.\n\nThe connected account’s [service agreement type](https://docs.stripe.com/api/accounts/object#account_object-tos_acceptance) determines what [capabilities](https://docs.stripe.com/connect/account-capabilities) the account has access to, and which service agreement applies to the platform’s users.\n\n## Supported agreement types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnected accounts can be under one of the following service agreement types: `full` or `recipient`. After the connected account’s service agreement is accepted, the type of service agreement can’t be modified.\n\n### Full service agreement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA `full` service agreement creates a service relationship between Stripe and the connected account holder. Connected accounts under the `full` service agreement can process card payments and request the [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments) capability.\n\nFor the legal language, see the [Stripe Connected Account Agreement](https://stripe.com/connect-account/legal/full).\n\n### Recipient service agreement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA `recipient` service agreement clarifies that there is no service relationship between Stripe and the recipient, and that the recipient’s relationship is with the platform. Connected accounts under the recipient service agreement can’t process payments or request the `card_payments` capability.\n\nTransfers to `recipient` accounts take an extra 24 hours to become available in the connected account’s balance. To learn more about `pending` balances, see the [account balances](https://docs.stripe.com/connect/account-balances) page.\n\n[Cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts) only work with accounts under the `recipient` service agreement. You must explicitly pass in the country code if it differs from the platform country.\n\nStripe isn’t responsible for providing direct support for accounts on the `recipient` service agreement. However, the platform can reach out to Stripe for support for these accounts.\n\nFor the legal language, see the [Stripe Recipient Agreement](https://stripe.com/connect-account/legal/recipient).\n\n## Choosing the agreement type ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify the agreement type through the [Accounts](https://docs.stripe.com/api/accounts) API.\n\n### Accounts API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo choose a `recipient` service agreement when [creating an account](https://docs.stripe.com/api#create_account), specify the agreement type with [tos\\_acceptance\\[service\\_agreement\\]](https://docs.stripe.com/api/accounts/object#account_object-tos_acceptance):\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"tos_acceptance[service_agreement]\"=recipient`\n\nThe same principle applies when [updating an account](https://docs.stripe.com/api#update_account):\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tos_acceptance[service_agreement]\"=recipient`\n\n#### Caution\n\nChanging the service agreement type fails if the service agreement has already been accepted; in those cases, create a new account with the desired service agreement.\n\n### Connect Configuration settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo choose a `recipient` service agreement for connected accounts with access to the Express Dashboard, select the **Transfers** option with the **Restricted Capability Access** icon in the [Configuration settings](https://dashboard.stripe.com/account/applications/settings/express) section of the Stripe Dashboard.\n\nYou can override the Configuration settings for an individual account by specifying its capabilities and service agreement type with the Accounts API.\n\n## Accepting the correct agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe handles the service agreement acceptance if you use [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) or [Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding). For [API onboarding](https://docs.stripe.com/connect/api-onboarding), the platform must attest that their user has seen and accepted the service agreement. See [service agreement acceptance](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance) for more information.",
    "title": "Service agreement types | Stripe Documentation",
    "description": "A service agreement establishes the relationship between Stripe and the platform's users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payouts-bank-accounts",
    "markdown": "# Manage payout accounts for connected accounts\n\n## Learn how to manage external bank accounts and debit cards for connected accounts\n\n[Payout](https://docs.stripe.com/payouts \"payout\") accounts can be bank accounts or debit cards. Stripe recommends collecting external account details with the Connect Onboarding web form, which helps you:\n\n*   Save design and development time.\n*   Eliminate the need to store sensitive data such as account and routing numbers on your server.\n*   Eliminate the need to build form validations when users enter account details.\n\nIn the US, we also recommend using [Stripe Financial Connections](https://docs.stripe.com/financial-connections), which lets your users securely link their financial accounts to your business. It helps you:\n\n*   Increase onboarding conversion by preventing your accounts from having to interrupt the process to locate their account and routing numbers.\n*   Reduce first payout failure rates by eliminating errors that result from manual entry of account and routing numbers.\n*   Eliminate the need to store sensitive data such as account and routing numbers on your server.\n*   Eliminate the need to build form validations when accounts enter account details in custom onboarding forms.\n*   Enable your accounts to authenticate in fewer steps by reusing bank account details they’ve saved to [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses). Accounts that save their account information at any of the Stripe businesses using Link can share their account details with your platform the next time they use Financial Connections.\n*   Access additional information on an account’s external bank account, such as [balances](https://docs.stripe.com/financial-connections/balances), [ownership details](https://docs.stripe.com/financial-connections/ownership), and [transactions](https://docs.stripe.com/financial-connections/transactions). You can mitigate fraud during onboarding by verifying that information, such as the name and address of the external bank account holder.\n\nFinancial Connections is free when you include Link. Otherwise, using it [incurs fees](https://stripe.com/financial-connections#pricing).\n\nAlternatively, if you use API onboarding for your connected accounts, you can collect payout account details with a custom form in your account onboarding flow.\n\n[Stripe-hosted onboarding for connected accounts](https://docs.stripe.com/connect/custom/hosted-onboarding) uses a web form hosted by Stripe to collect the information required to onboard connected accounts. Stripe-hosted onboarding can collect both bank accounts and debit cards. In order to collect debit cards, you must enable it in your [External Account Settings](https://dashboard.stripe.com/settings/connect/payouts/external_accounts), by selecting **Yes** under **Allow debit cards?**.\n\nYou can use Financial Connections with Stripe-hosted onboarding to collect external bank account details. However, you can’t use Financial Connections to collect debit card details.\n\n### Available in![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe platforms in the US can enable [Stripe Financial Connections](https://docs.stripe.com/financial-connections) within the Stripe-hosted onboarding form by following these steps:\n\n1.  Navigate to your [External Account settings](https://dashboard.stripe.com/settings/connect/payouts/external_accounts), where you manage optional Connect onboarding features.\n2.  For connected accounts where your platform collects account information when requirements change, including for Custom accounts, you must allow Stripe-hosted onboarding to collect external account details. Under **Stripe-hosted onboarding for Custom accounts**, allow Stripe to collect external account information by turning on the toggle.\n3.  Under **How will bank account details be collected?**, select **Financial Connections**.\n4.  _(Optional)_ Request permission to access additional data on the accounts instantly verified with Financial Connections, such as balances, ownership details, and transactions. If you opt to request this additional information, you’ll be prompted to sign up for Stripe Financial Connections.\n\nWhen external account detail collection is enabled, all connected accounts are prompted to authenticate their bank account using the Stripe-hosted modal UI embedded within the onboarding form.\n\n![Image showing a Connect onboarding flow using Stripe Financial Connections to collect a payout account.](https://b.stripecdn.com/docs-statics-srv/assets/connect-custom-onboarding-financial-connections-onboarding.8937a023f6682c90bab8c0b39873909a.png)\n\nA Connect onboarding flow using Stripe Financial Connections to collect a payout account.\n\nIf a connected account can’t instantly verify their bank account using Financial Connections, the verification process automatically falls back to manual entry:\n\n![Image showing a Connect onboarding flow using the Stripe Financial Connections modal to collect a payout account using manual entry.](https://b.stripecdn.com/docs-statics-srv/assets/connect-custom-onboarding-financial-connections-manual-entry.930da1e01c9026b9014008d75958bc8c.png)\n\nA Connect onboarding flow using the Stripe Financial Connections modal to collect a payout account using manual entry.\n\nAfter onboarding, the specified bank account automatically attaches to the connected account.\n\n### Retrieve data on a Financial Connections account Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can determine if your user linked a Financial Connections Account by retrieving any linked Financial Connections Accounts using their connected account ID. Be sure to specify their account ID in the `Stripe-Account` header.\n\n`curl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"account_holder[account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nThis returns an API response similar to the following:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"fca_zbyrdjTrwcYZJZc6WBs6GPid\",       \"object\": \"financial_connections.account\",       \"account_holder\": {         \"account\":` \n\n`'{{CONNECTED_ACCOUNT_ID}}'`\n\n`,         \"type\": \"account\"       },       ...       \"supported_payment_method_types\": [         \"us_bank_account\"       ]     }     ...   ] }`\n\nIf any Financial Connections accounts are listed, it indicates that the connected account linked them during the onboarding process. You can use the `id` value to access or refresh the data you specified in your [External Account settings](https://dashboard.stripe.com/settings/connect/payouts/external_accounts). To protect the privacy of your connected account’s data, you can only access the data you specified.\n\nTo start retrieving account data, follow the guides for [balances](https://docs.stripe.com/financial-connections/balances), [ownership](https://docs.stripe.com/financial-connections/ownership), and [transactions](https://docs.stripe.com/financial-connections/transactions). On all subsequent account retrieval and refresh requests, be sure to include the `Stripe-Account` header with the connected account ID:\n\n`curl https://api.stripe.com/v1/financial_connections/accounts/fca_zbyrdjTrwcYZJZc6WBs6GPid/refresh \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"features[]\"=balance`",
    "title": "Manage payout accounts for connected accounts | Stripe Documentation",
    "description": "Learn how to manage external bank accounts and debit cards for connected accounts",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/required-verification-information",
    "markdown": "# Required verification information | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what required verification information you need to collect for each country when using Connect.\n\nOnboarding connected accounts to a [Connect](https://docs.stripe.com/connect \"Connect\") platform requires collecting certain information for each account (which Stripe verifies). For Custom accounts, you can build an onboarding UI yourself [using our API](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding). [Embedded onboarding](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) and [Stripe hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) are prebuilt UIs that you use to collect the required information from connected accounts.\n\n#### Note\n\nIf you’re onboarding Express or Standard accounts, you don’t need to collect information because Stripe does it for you through the Stripe-provided UIs. However, you can review the type of information that’s collected from your users on this page.\n\nVerification requirements differ based on:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nAs an added convenience, most arguments in the tables below are followed by a localized version, suitable as a label in your user interface.\n\nLoading required verification information",
    "title": "Required verification information | Stripe Documentation",
    "description": "Learn what required verification information you need to collect for each country when using Connect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/additional-verifications",
    "markdown": "# Additional verifications | Stripe DocumentationThe Stripe Docs logo\n\n## Add identity verification checks to your platform’s connected accounts.\n\nCollect additional identity verification from connected [accounts](https://docs.stripe.com/connect/accounts) to help reduce fraud losses, streamline risk operations, and meet additional compliance requirements. Automatically collect required information with [Connect Onboarding](https://stripe.com/connect/onboarding) or embed [Stripe Identity](https://docs.stripe.com/identity) as part of your custom onboarding experience. Restrict your flow of funds based on verification status and volume thresholds.\n\nBy adding a few lines of code to your [Connect](https://docs.stripe.com/connect \"Connect\") integration, you can:\n\n*   Request an ID document check during initial onboarding\n*   Match the ID photo with selfies of the document holder\n*   Disable [payouts](https://docs.stripe.com/payouts \"payout\") or payments based on verification status or volume thresholds\n*   Access captured images and data extracted from ID documents\n*   Receive detailed status updates and error messages\n\nCommon use cases for additional verifications\n\n*   **Reduce fraud losses**—For example, platforms can streamline risk processes by inserting an ID verification before enabling the first payout.\n*   **Increase trust & safety**—For example, marketplaces facilitating in-person services can insert ID verification before allowing connected accounts to collect payments or interact with other users and can display a “verified” badge on their profile.\n*   **Meet additional compliance requirements**—For example, fintech platforms can conduct ID verification to confirm user identity as part of meeting their own KYC requirements.\n\n## Get started Invite only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccess to additional verifications is currently by invitation only. If you’re interested in this functionality, [reach out to sales](https://stripe.com/contact/sales) for an invitation.",
    "title": "Additional verifications | Stripe Documentation",
    "description": "Add identity verification checks to your platform’s connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/manage-payout-schedule",
    "markdown": "# Managing payout schedule | Stripe DocumentationThe Stripe Docs logo\n\n## Manage the automatic payout schedule to your connected accounts.\n\nWhen using automatic payouts, the [settings.payouts.schedule](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-schedule) hash on an [Account](https://docs.stripe.com/api/accounts/object) contains details on when a Stripe account’s funds are available and when the balance is automatically paid out:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"settings\": {     \"payouts\": {       \"schedule\": {         \"delay_days\": 7,         \"interval\": \"daily\"       },       ...     },     ...   },   ... }`\n\n### delay\\_days property ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [delay\\_days](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-schedule-delay_days) property reflects how long it takes for `on_behalf_of` charges (or direct charges performed on the connected account) to become available for payout. You can edit this property on accounts where you [own fraud and dispute liability](https://docs.stripe.com/connect/accounts).\n\nThis field is useful for dictating automatic payouts. Stripe calculates the delay in business days or calendar days based on the [connected accounts’ country](https://docs.stripe.com/payouts#standard-payout-timing). For example, if you want a connected account based in Singapore (which uses calendar day delays) to receive their funds two weeks after the charge is made, set `interval` to `daily` and `delay_days` to **14**. When setting or updating this field, you can pass the string `minimum` to choose the lowest permitted value.\n\nFor accounts where Stripe manages fraud and dispute liability (for example, Standard accounts), the default is the lowest permitted value for the account, determined by the [connected account’s country](https://docs.stripe.com/payouts#standard-payout-timing). If you’re opted into [accelerated payout speeds](https://docs.stripe.com/payouts#accelerated-payout-speeds), the value uses the accelerated timing. You can request to lower this by contacting [Stripe Support](https://support.stripe.com/contact). For accounts where you own fraud and dispute liability, the value remains at your original payout speed by default.\n\n### Interval property![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms that manage fraud and dispute liability, or have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts#control-payout-timing), can adjust the payout interval. There are four possible settings for the `interval` property:\n\n*   **manual**: This setting prevents automatic payouts. You will have to manually pay out the account’s balance using the [Payouts API](https://docs.stripe.com/api#create_payout) (acting as the connected account). You also set an account to `manual` to use [Instant Payouts](https://docs.stripe.com/connect/instant-payouts).\n*   **daily**: This setting automatically pays out charges `delay_days` days after they’re created. The `delay_days` value can’t be less than your own payout schedule or less than the default payout schedule for the account.\n*   **weekly**: This setting automatically pays out the balance once a week, with the day specified by the `weekly_anchor` parameter (a lower-case weekday such as **monday**).\n*   **monthly**: This setting automatically pays out the balance once a month, as specified by the `monthly_anchor` parameter (a number from 1 to 31). Payouts nominally scheduled between the 29th and 31st of the month are instead sent on the last day of a shorter month.",
    "title": "Managing payout schedule | Stripe Documentation",
    "description": "Manage the automatic payout schedule to your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/manual-payouts",
    "markdown": "# Using manual payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Send manual payouts to your connected accounts.\n\nIf you set the value of [schedule.interval](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-schedule) to `manual`, we hold funds in the accountholder’s balance until you specify otherwise. You must pay out the funds within the time period specified below, based on the business’s country:\n\n| Country | Holding Period |\n| --- | --- |\n| Thailand | 10 days |\n| United States | 2 years |\n| All other countries | 90 days |\n\nTo trigger a payout of these funds, use the [Payouts API](https://docs.stripe.com/api/payouts/create).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[payouts][schedule][interval]\"=manual`\n\nThe Payouts API is only for moving funds from a connected Stripe account’s balance into their external account. To move funds between the platform and a connected account, see creating [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) or creating [destination charges](https://docs.stripe.com/connect/destination-charges) through the platform.\n\n#### Note\n\n_Escrow_ has a precise legal definition, and Stripe doesn’t provide escrow services or support escrow accounts. However, you can control payout timing through manual payouts, which allow you to delay payouts to certain accounts. When using manual payouts, you must pay out funds within the time frame for the business’s country.\n\nDelayed payouts can be useful when a delivery is delayed or when there’s a possibility of a refund.\n\n## Regular payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example sends 10 USD from a connected account’s Stripe balance to their external account:\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd`\n\nWith a standard payout, you can move an amount up to the user’s available balance. To find that amount, perform a [retrieve balance](https://docs.stripe.com/api#retrieve_balance) call on their behalf.\n\nStripe tracks balance contributions from different payment sources in separate balances. The retrieve balance response breaks down the components of each balance by source type. For example, to create a payout specifically for a non-credit-card balance, specify the `source_type` in your request.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=24784 \\  -d currency=usd \\  -d source_type=bank_account`\n\nWhile individual balance components can go negative (such as through refunds or chargebacks), you can’t create payouts for greater than the aggregate available balance.",
    "title": "Using manual payouts | Stripe Documentation",
    "description": "Send manual payouts to your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/express-dashboard-taxes",
    "markdown": "# Deliver tax forms with Stripe Express\n\n## Learn how to e-deliver tax forms to connected accounts with the Stripe Express Dashboard.\n\n## How does e-delivery work for connected accounts?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStarting with tax season 2021, Stripe enabled e-delivery of tax forms through the Stripe Express Dashboard. Your connected account owners can use the Tax Center on [Stripe Express Dashboard](https://docs.stripe.com/connect/express-dashboard) to manage their tax forms, update their tax information, and manage their tax form delivery preferences. Learn more about working with your users to collect verified tax information for the upcoming tax season in the [1099 Tax Support and Communication Guide](https://docs.stripe.com/connect/platform-express-dashboard-taxes).\n\n#### Note\n\nReview a detailed [product walk-through](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) of the Stripe Express dashboard and Stripe outreach to your eligible connected accounts.\n\n## Which connected accounts have access to e-delivery through the Stripe Express Dashboard? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nE-delivery through the Stripe Express Dashboard is available to connected accounts that already have access to the Express dashboard and accounts where you have built and managed the full experience otherwise.\n\nThere are a few notable exceptions that might affect eligibility for e-delivery. For most platforms, these exceptions include less than 2% of connected accounts.\n\n*   More than five connected accounts tied to a single email, whether each account has the same TIN or different TINs. Stripe continues to deliver forms through paper mail for these accounts.\n*   Payees who don’t have an eligible connected account on Stripe. For example, if you pay someone by check, you can’t deliver their tax form through Stripe Express.\n*   Only current owners receive forms for connected accounts that have been sold or had their businesses transferred prior to receiving their 1099. Previous owners receive paper forms to the address on file if you split the form.\n*   Accounts that haven’t been activated in Stripe yet.\n\nFor the accounts that aren’t eligible for e-delivery, Stripe can support postal deliveries to the address on file.\n\n## When can my connected account owners access the Tax Center on the Stripe Express Dashboard?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected account owners that currently do not have access but are eligible for it can view the Stripe Express Dashboard and the tax forms page starting in November 2023 after receiving the email invitation from Stripe. This will be triggered if you choose to turn on e-delivery of your tax forms through the Express Dashboard and enable early collection of tax information and delivery preferences under your 1099 tax settings.\n\nCurrently, connected account owners with existing access to the Express Dashboard can edit their tax information. When you opt your platform in to e-delivery, your connected owners see the tax forms page with a row for your platform.\n\n## How do I enable outreach using the Stripe Express Dashboard to collect identity information and e-delivery consent ahead of tax season?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCollection of tax identity information and e-delivery consent early in the tax season is critical for enabling a smooth tax season. If your platform opts for e-delivery through the Express Dashboard and enables collection of tax information in advance using 1099 tax form settings, Stripe emails platforms’ connected accounts starting the week of November 1st, 2023 to confirm their tax information and provide e-delivery consent through the Express Dashboard. Note, we don’t send outreach emails to platforms’ connected accounts until _7 days_ after you enable the setting.\n\nThis outreach from Stripe gives connected account owners an opportunity to review and update their tax information and confirm their delivery preferences before you file with the IRS, which maximizes e-delivery opt-in rates, speeds up tax form delivery, and minimizes errors on finalized 1099 forms.\n\nIf you don’t enable collection of tax information in advance and only configure e-delivery, postal delivery initiates at the time you file for any accounts that have not provided e-delivery consent. If accounts provide consent after you file, that consent is applicable only for the next tax year.\n\n## How does a connected account without current access gain access to the Stripe Express Dashboard?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected account owners that are eligible for access to the Express Dashboard receive an invite from Stripe to confirm their tax information starting in November 2023. These emails include a link to Stripe Express Dashboard Account claims. For connected account owners who’ve never claimed their account and accessed the Stripe Express Dashboard, we first gather their email and phone number to set up their credentials. After that, we present them with a series of identity verification questions (Name, TIN, and DOB) to validate that they do own the account. If they fail these challenges, we provide follow-up questions such as address, Bank Last 4, and last payout amount from the platform to verify their identity. If they fail these questions after multiple attempts, we kick-off a manual review through Stripe Express support.\n\n## Which email address does Stripe use for e-delivery?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor connected accounts that have access to the Express dashboard from onboarding: Stripe already has emails associated with these users that are collected at onboarding. For these accounts, Stripe emails the primary user associated with the account. Multi-user Express Dashboard accounts aren’t supported.\n\nIf an eligible connected account without current access claimed their account on Stripe Express with a valid email address and phone number, the email address they used to sign up is what Stripe uses. Otherwise, Stripe uses the email address on the account.\n\nStripe can’t deliver forms electronically if there is no email address on the account. Instead, Stripe attempts to deliver paper forms if a valid address is on the tax form and you opted in to paper delivery.\n\n## Why do emails need to be updated for connected accounts?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order for a connected account owner to onboard, log in to the Stripe Express Dashboard, or access their tax forms, they need to be able to receive the email from Stripe inviting them to create their account. If for some reason the user has updated their email, Stripe is only able to resend these emails to the email address on file so they must contact your platform for assistance updating their email.\n\nYou only need to update emails on behalf of the connected account owners before they’ve claimed their accounts. After the owner claims the account, then Stripe is able to assist your users with updating their emails.\n\n## How do I update the email address?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update the email addresses on your connected accounts in the following ways:\n\n*   Use the [Update](https://docs.stripe.com/api/accounts/update#update_account-email) API.\n*   Use the CSV import functionality on the [Emails page](https://dashboard.stripe.com/settings/connect/emails) in the Dashboard.\n*   Edit the email addresses in the _Payee Details_ section in the 1099 dashboard.\n\nYou can’t update email addresses using the `email_address` field in a CSV import directly into the 1099 product. Changes made using this method don’t carry over each year.\n\n## How do connected accounts edit their information?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs your connected accounts onboard to the Stripe Express Dashboard, account owners can edit their account details within the Tax reporting page. They are able to edit their name, their TIN, and their address, but they aren’t able to change their date of birth or their entity type. For date of birth and entity updates, account owners need to contact Stripe Support.\n\n## How are tax forms kept in sync between the platform and the connected account?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard is still the main place to generate, correct, split, and file 1099s for your connected accounts. Onboarding to the Stripe Express Dashboard integrates the data from the Tax reporting view in the Dashboard directly into the Stripe Express Dashboard if it’s accessible to your connected account owners. Edits made by connected account owners (Name, Social Security Number or Employer Identification Number, address) update your connected accounts and thus the forms in the Tax reporting view in the Dashboard until they are filed. For any updates made by a connected account after the filing date, you are given the choice to either correct the tax form or leave the tax form as is. Updates might take up to 24 hours to sync due to TIN aggregation done by Stripe.\n\nStripe doesn’t share the updated sensitive PII (such as SSN or EIN) from accounts with your platform through the API for security reasons.\n\n## Can I collect consent for e-delivery through the Stripe Express Dashboard?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, the Stripe Express Dashboard can collect e-delivery consent from your connected accounts. Connected accounts can only view their tax forms after providing e-delivery consent. After providing e-delivery consent, connected accounts are provided with the option to request an optional paper copy. You can update the e-delivery consent for an individual form through either the Form Editor UI on the 1099 Dashboard or using a [CSV import](https://docs.stripe.com/connect/modify-tax-forms?method=csv#import-tax-forms) using the ‘e-delivery consent’ field from Jan 2023.\n\n#### Note\n\nConnected accounts are directed to your support team if they would like to revoke e-delivery consent.\n\n## How do connected accounts get alerted when their 1099 forms are available?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends an email notification to your connected accounts when their 1099 forms are available. This email includes both Stripe’s logo and your platform’s logo. The platform logo is taken from your [Connect branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), so please make sure this is up to date before the week of November 1st, 2023.\n\nFor connected accounts where you own the full experience otherwise, make sure that you also [update email addresses](https://docs.stripe.com/api/accounts/update#update_account-email) on the accounts before the week of November 1st, 2023 so Stripe can email them the following week. You can update this information using the Accounts API. Express connected accounts already have a user associated with them, and Stripe emails tax forms to the primary user associated with the account.\n\n## How should I prepare my connected accounts for e-delivery and the upcoming tax season?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrepare your connected accounts:\n\nCreate a support article with information for your connected account owners to let them know that their 1099s will be delivered by Stripe and that they should expect to receive an email from Stripe in January. [See an example](https://help.doordash.com/dashers/s/article/Common-Dasher-Tax-Questions?language=en_US).\n\nCommunicate with all eligible connected account owners to let them know they should expect to receive an email from Stripe. This helps with maximizing opt-in to e-delivery and minimizing concerns about phishing.\n\n### Sample language for communicating with your connected account users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubject: Our tax partner Stripe will be sending you an important email. Body: “In the next few days, you will receive an email from Stripe with a link to download your 1099 tax form. <Platform\\_Name> partners with Stripe to facilitate payments and tax reporting, including 1099 forms. We recommend adding express@stripe.com to your address book so the email isn’t marked as spam. When you receive the email, please click into it and follow the instructions to confirm your tax details.”\n\n## How do I navigate to prior years tax forms?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the Dashboard, choose the year in the dropdown to look for past years’ forms.\n\nForms for 2019 or earlier aren’t available through your Dashboard. These forms might be filed through a different system called Payable. If you used Stripe during that period of time, please reach out to support to get the tax forms you need.\n\n## Why are my users being asked to enter the last four digits of their TIN to download their forms?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected account owners who have consented to e-delivery must pass a TIN validation to download their tax forms as an added layer of security. The key here is that they must enter the last four digits of the TIN exactly as it appears on their 1099 tax form. For Prior Years tax forms, we present a similar TIN challenge to enter the last four digits for the TIN as it appears on that particular form. If your platform didn’t use Stripe in the past to file 1099s, then those forms aren’t available in the Dashboard.\n\n## Why are connected account owners having issues validating their TIN?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users might run into issues downloading their 1099 tax forms if they have updated the TIN on their connected account, if your platform has overwritten the TIN on the 1099 tax form, if they’ve simply forgotten the TIN that appears on the tax form, or if they recently received a new TIN from the IRS and it isn’t in their system yet.\n\nIn these instances, users reach out to your platform so that you can work with your users to confirm what TIN appears on the 1099 tax form or assist them with getting a corrected version of their 1099 tax form. You can also download the user’s tax form from the Tax reporting dashboard and email it to them directly. Only team members with the Tax Analyst role are able to access this information.\n\n## What else can a connected account manage using the Stripe Express Dashboard?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Express Dashboard also includes the Earnings page, which displays connected accounts’ [upcoming payouts and earnings](https://docs.stripe.com/connect/customize-express-dashboard#set-custom-descriptions) history through the activity feed. The activity feed shows transactions from your platform that affect connected accounts’ balances, such as payments, refunds, transfers, and payouts.\n\nIn the Account settings, connected account owners can update account details including legal entity information and personal information such as name, address, and taxpayer identification numbers, and view and update their bank account information for payouts.\n\n## Why are payouts blocked, restricted, or show as restricted soon for my account?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected account might get blocked after they update their information for a few different reasons:\n\n*   If you have applied a capability such as a 1099 capability, and they update their name or TIN to a value that doesn’t match against the IRS database then they must update their information in Stripe Express with a valid name and TIN combination.\n*   If your connected account was verified previously and changes their name and/or TIN, they are prompted to re-sign a Terms of Service agreement. Failure to do so might result in payouts being blocked until your account goes into Stripe Express and re-signs their Terms of Service agreement.\n*   If your connected account updates their details with values that can’t be verified against standard government databases, they might be asked to upload proof of identity that helps Stripe identify them. Failure to do so results in payouts being blocked. Your accounts can go into Stripe Express and submit proof of identity under the Accounts section.\n\n## Are Taxpayer Identification Numbers (TINs) checked against the IRS database?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTIN is verified against the IRS database if:\n\n*   You have applied the 1099-K, 1099-MISC, or any other capabilities that require a verified TIN, and\n*   The connected account meets the threshold for the applied [capability](https://docs.stripe.com/connect/required-verification-information-taxes#required-information).\n\nConnected accounts that enter an incorrect Name-TIN combination might see their payouts paused until they log back in to Stripe Express to [update their Name and TIN](https://support.stripe.com/express/questions/how-do-i-update-my-tax-information) with verified information.\n\n## I made a correction to a 1099, how long does this take to sync?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can correct only tax forms that the IRS has accepted. To start a correction, update the data in the tax forms. You can use either the Tax form editor or CSV export to update the tax form. After you update the form, select the updated form on the **Tax reporting** page, then click **Correct** to create a correction. It can take up to 48 to 72 hours after the platform files the correction for the payee notification.\n\n## Are my connected accounts able to consolidate their view of taxes across platforms?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs they get paid from different platforms, Stripe Express users can add each platform to the same Stripe Express accounts to create a single view of their earnings and their tax forms.\n\n## Is there a Stripe support address we can direct users to in our help center or is this only available in the onboarding flow of the Express App?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDirect users to [https://support.stripe.com/express](https://support.stripe.com/express). From here they can contact Stripe which ensures their questions are routed to a specialized support group best able to help them.\n\n## How can a connected account get their invitation email sent again?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connected account owner can request a new invitation link that’s sent to their email. Direct them to [this support page](https://support.stripe.com/express/how-do-i-get-a-new-invite-link) to resend their own invitation email. Ineligible users (connected accounts that didn’t meet the 2023 threshold of $600 for NEC/MISC or $20,000 and 200 transactions for K) don’t receive an email from Stripe.\n\n## If a connected account owner consents to e-delivery, do they still get a mailed copy?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the platform has paper delivery enabled, Stripe presents the connected account owner with the option to request this method of delivery. If they select this option, then Stripe mails the paper copy of their tax form to the address the platform has on file.\n\n## Edge cases for 1099 tax reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe new Stripe Express dashboard doesn’t support certain types of accounts, as follows:\n\n*   Multi-user and multi-currency accounts: Accounts that have multiple users or multiple currencies associated with them aren’t able to view the Express Dashboard and hence don’t receive electronic delivery of forms.\n*   Five or more connected accounts sharing the same email: When five or more connected accounts for the same platform have the same email, they don’t receive an email from Stripe\n*   Rejected and deleted accounts: Accounts that you have rejected or deleted no longer have a Stripe relationship and hence are ineligible to login to the Stripe Express Dashboard.\n*   Split forms: If a form is split (as in not tied to the active user of a connected account), it’s not eligible for electronic delivery.\n\n## What tax details are prompted for during the pre-verification?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor merchants set up as US Companies, Stripe’s 1099 product uses the business tax details except when they’re set up as a single member LLC or sole proprietorship, in which case it uses the owner’s personal tax details because those account types are disregarded entities for income tax purposes according to the IRS. For Individuals, Stripe uses personal tax details. For more information, refer to [Updating 1099 tax form details for connected accounts](https://support.stripe.com/questions/updating-1099-tax-form-details-for-connected-accounts).\n\nIf a connected account requests to use their business tax details on their 1099 tax form, and you want to support that, you can make the changes by collecting the business tax details from the user, and [updating the 1099 tax forms using CSV import](https://docs.stripe.com/connect/modify-tax-forms?method=csv#1099-csv-schema) or the [Tax Form Editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#understanding-the-tax-form-editor-ui) once tax form totals are finalized in January.\n\n## My connected account did not receive a pre-filing confirmation email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo check whether your connected account has received an email invite, go to the [1099 Dashboard page](https://dashboard.stripe.com/connect/taxes/forms). If the pre-filing confirmation status is **Sent**, Stripe attempted outreach to your user. If the status is **Queued** or **Not eligible**, like the example below, Stripe hasn’t sent an invite yet.\n\n![Tax form with pre-filing confirmation status](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-pre-filing-confirmation-status.15e4a385e3360ece2cd743f4285e93b3.png)\n\nTo send your user the pre-filling confirmation email, first confirm that their email address in Stripe is correct. Then, follow these steps:\n\n![Request pre-filing confirmation link](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-request-pre-filing-confirmation-link.fb53ecb1d73b4bbacf9f92b5a7c055b4.png)\n\n![Request pre-filing confirmation modal](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-request-pre-filing-confirmation-modal.04e45b1768e12dbd2a3db1bdd09bc85c.png)\n\nIf Stripe hasn’t sent the pre-filing confirmation email, confirm that your user’s email in Stripe matches the email where they expect to receive the tax form.\n\nTo update your user’s email address, follow the steps below. Learn more about other ways to [update emails for your accounts](#how-do-i-update-the-email-address).\n\n![Account email address](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-account-email.d60fd2c08eb5fedad766f98b0e5b9502.png)\n\n![Edit account email address modal](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-edit-account-email-modal.834f62cb61d6a4f2574e40b0e4146347.png)\n\n## My connected account was locked out of their Stripe Express account for failing the verification process. How can I resolve this issue?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts must claim their Stripe accounts in order to view the Tax Center in the Express dashboard. To authorize the claim, Stripe asks the user a series of questions to verify their identity. For security reasons, if the user fails to correctly answer the verification questions too many times, Stripe locks their account. You can see the status in the 1099 dashboard. A status of “Not claimed, no attempts left” means the connected account is locked. A “Claimed” status means the connected account claimed their Stripe account.\n\n![Account status in manual review state](https://b.stripecdn.com/docs-statics-srv/assets/account-in-manual-review.bbed96bd10b2a7a94fdb55fcb512e362.png)\n\nYou can reset your user’s claim attempts in the 1099 Dashboard. Before removing them from manual review, we recommend reviewing and updating account claim information (such as representative name, address, SSN, EIN, and DOB) with your connected account. Otherwise, the account might continue to fail to claim their Express account.\n\n![Dropdown menu option to remove account from manual review](https://b.stripecdn.com/docs-statics-srv/assets/remove-account-manual-review.95ba03fb935a58d7d31a968462efa9d1.png)\n\nIf there’s a mismatch between the information you have on file and what your user expects, you can [update](https://docs.stripe.com/connect/updating-service-agreements) their connected account directly. You can’t make updates in the 1099 Dashboard and you must have the correct [user role](https://docs.stripe.com/get-started/account/teams/roles).",
    "title": "Deliver tax forms with Stripe Express | Stripe Documentation",
    "description": "Learn how to e-deliver tax forms to connected accounts with the Stripe Express Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/migrate-to-stripe",
    "markdown": "# Migrating accounts to Stripe | Stripe DocumentationThe Stripe Docs logo\n\n## Start processing accounts on Stripe without disrupting payments.\n\nStripe enables you to migrate your existing connected accounts along with your payment and customer data. Doing so allows you to continue to [collect payments and pay out](https://docs.stripe.com/connect/collect-then-transfer-guide) or [enable other businesses to accept payments directly](https://docs.stripe.com/connect/enable-payment-acceptance-guide). To successfully bring your existing platform business to Stripe, you need to:\n\n1.  Create a migration plan and timeline\n2.  Update your integration for connected accounts\n3.  Create and onboard accounts\n4.  Handle outstanding and ongoing requirements\n5.  Migrate payment and customer data to Stripe\n\n## Create a migration plan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA successful migration to Stripe includes a migration plan, a timeline, and KYC information for connected accounts, as well as payment and customer data.\n\nConnected accounts must onboard to Stripe, which requires sending Stripe Know Your Customer (KYC) data for each account. Stripe’s requirements can require collecting additional information from your accounts. Perform an analysis to understand what data has been collected with your previous provider and what data Stripe requires. Stripe verifies KYC data before activating connected accounts. Monitor account verification status using the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event or the [Retrieve Account](https://docs.stripe.com/api/account/retrieve) API. Accounts that fail to verify require action before they’re activated.\n\nInclude a hard cutover date for payment data after onboarding accounts to Stripe. Payment and customer data requires [a PAN import](https://docs.stripe.com/get-started/data-migrations/pan-import) as part of the cutover. We recommend that you import accounts in batches.\n\n## Update your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour application can require changes as part of the integration updates to migrate to Stripe. For example, consider any changes to your connected accounts’ usage of your platform, such as pricing updates. Stripe recommends communicating any changes to your accounts ahead of time.\n\n### Stripe terms of service agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected accounts must accept the Stripe terms of service before they’re activated.\n\nFor accounts where Stripe is responsible for collecting updated information when requirements are due or change (including Standard and Express accounts), the account accepts Stripe’s terms of service as part of the onboarding flow.\n\nIf your platform is responsible for [collecting updated information](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) from a connected account (including Custom accounts) when requirements change, you can [wrap Stripe’s terms of service in your own terms of service](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service). We recommend placing terms of service acceptance at the end of the onboarding flow, but you can also have it at the start if that makes more sense for your business. When creating or updating connected accounts, record acceptance of the [updated Terms of Service information](https://docs.stripe.com/api/accounts/update#update_account-tos_acceptance) to send to Stripe, and communicate that to the accounts.\n\n### Onboard connected accounts to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers different levels of onboarding support for your connected accounts. Build an onboarding flow for your connected accounts using any of the following methods:\n\n| Method | Pros | Cons |\n| --- | --- | --- |\n| [API-based onboarding](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding) | Exercise full control over your own UI | *   Expensive and time-consuming to build<br>*   Continuing high maintenance, especially to keep in compliance with changing global requirements<br>*   Can’t resolve Stripe risk reviews |\n| [Embedded onboarding](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) new | *   [Highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components)<br>*   Limited or no Stripe branding<br>*   Connected accounts remain in the flow of your site<br>*   Low effort integration | Limited control over the flow logic |\n| [Stripe-hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) | Lowest effort integration | *   Stripe-branded with limited platform branding<br>*   Limited control over the flow logic<br>*   Connected accounts redirect to Stripe instead of completing the process without leaving your site |\n\n## Create and onboard accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following is an overview of the process:\n\n### Establish account requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following factors affect the [onboarding requirements](https://docs.stripe.com/connect/required-verification-information) for your connected accounts:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nUse the interactive form to see how changing these factors affects the requirements.\n\n### Requirements form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor each account to be migrated to Stripe, create an associated Account.\n\nUse the [Create Account](https://docs.stripe.com/api/accounts/create) API to create a connected account with `controller` set to the desired account preferences. You can prefill any information, but at a minimum, you must specify the `controller`. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding.\n\n#### Note\n\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as `address` and `website_url`, see the [Create Account API reference](https://docs.stripe.com/api/accounts/create).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[fees][payer]\"=account \\  -d \"controller[losses][payments]\"=stripe \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[requirement_collection]\"=stripe \\  -d country=US \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\nSuccessful creation returns the [account object](https://docs.stripe.com/api/accounts/object). Inspect the object for the connected account `id` and store the value in your database.\n\n`{   ...   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   ... }`\n\nAfter updating Stripe with all existing data, look for any outstanding requirements. Any outstanding requirements are listed in the `currently_due` array. All `currently_due` requirements need to be collected from the account for Stripe to verify the account and activate the account’s capabilities.\n\n`{   ...   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [       \"business_profile.url\",       \"external_account\",       \"individual.first_name\",       \"individual.last_name\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"disabled_reason\": \"requirements.past_due\",     \"errors\": [],`\n\nAfter providing all existing data on an account, direct the account to a Stripe UI to set up Stripe credentials, confirm the information, and accept the Stripe terms of service.\n\n### Take new accounts through an onboarding flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to migrating existing accounts, build a flow for new accounts to onboard to Stripe. You can also use this onboarding flow to collect missing data for accounts being migrated.\n\nReview [onboarding options](https://docs.stripe.com/connect/onboarding) to create your onboarding flow.\n\n## Handle outstanding and ongoing requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have [a pending status](https://docs.stripe.com/api/accounts/object#account_object-capabilities).\n\n### Review status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve the status of your connected account’s capabilities by:\n\n*   Inspecting the Account object’s [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) hash for the relevant capability.\n*   Requesting capabilities directly from the [Capabilities API](https://docs.stripe.com/api/capabilities/retrieve) and inspecting the status of the relevant capability.\n*   Listening for `account.updated` [events](https://docs.stripe.com/api/events/types#event_types-account.updated) in your [webhook](https://docs.stripe.com/connect/webhooks) endpoint and inspecting the `capabilities` hash for the relevant capability.\n\nAfter verifications are complete, the capability becomes `active` and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of `active`. Listen for `account.updated` events to detect changes to capability states.\n\nConfirm that your Connect integration is compliant and operational by checking that the account’s `charges_enabled` and `payouts_enabled` are both true. You can use the API or listen for `account.updated` events. For details on other relevant fields, check the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n\n*   [charges\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-charges_enabled) confirms that your full charge path including the charge and transfer works correctly and evaluates if either `card_payments` or `transfers` capabilities are active.\n*   [payouts\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-payouts_enabled) evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You [must eventually enable payouts](https://docs.stripe.com/connect/manage-payout-schedule) to pay your connected accounts.\n\nYou can use the following logic as a starting point for defining a summary status to display to your connected account.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def account_state(account)   reqs = account.requirements    if reqs.disabled_reason && reqs.disabled_reason.include?(\"rejected\")     \"rejected\"   elsif account.payouts_enabled && account.charges_enabled     if reqs.pending_verification       \"pending enablement\"     elsif !reqs.disabled_reason && !reqs.currently_due       if !reqs.eventually_due         \"complete\"       else         \"enabled\"       end     else       \"restricted\"     end   elsif !account.payouts_enabled && account.charges_enabled     \"restricted (payouts disabled)\"   elsif !account.charges_enabled && account.payouts_enabled     \"restricted (charges disabled)\"   elsif reqs.past_due     \"restricted (past due)\"   elsif reqs.pending_verification     \"pending (disabled)\"   else     \"restricted\"   end end  accounts = Stripe::Account.list(limit: 10)  accounts.each do |account|     puts \"#{account.id} has state: #{account_state(account)}\" end`\n\n### Handle verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle verification failures differently depending on your onboarding flow.\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\n[Create a form](#create-forms-to-collect-information) with clear instructions that the account can use to correct the information. Notify the account, then [submit the corrected information](#update-the-connected-account) using the Accounts API.\n\nIf you plan to create custom flows to handle all your verification errors:\n\n*   Review the details regarding all possible [verification errors and how to handle them](https://docs.stripe.com/connect/handling-api-verification).\n*   [Test verification states](https://docs.stripe.com/connect/testing-verification).\n\n## Migrate payment and customer data to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your connected accounts are created on Stripe, [request a PAN data import](https://docs.stripe.com/get-started/data-migrations/pan-import), which migrates your payment and customer data for use on Stripe.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Choose your onboarding configuration](https://docs.stripe.com/connect/onboarding)\n*   [Handling identity verification with the API](https://docs.stripe.com/connect/handling-api-verification)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)",
    "title": "Migrating accounts to Stripe | Stripe Documentation",
    "description": "Start processing accounts on Stripe without disrupting payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/webhooks",
    "markdown": "# Connect webhooks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use webhooks with Connect to be notified of Stripe activity.\n\nStripe uses [webhooks](https://docs.stripe.com/webhooks \"webhook\") to notify your application when an event happens in your account. All [Connect](https://docs.stripe.com/connect \"Connect\") integrations should establish a [webhook endpoint](https://dashboard.stripe.com/account/webhooks) to listen for Connect events.\n\n## Connect webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are a few types of webhooks:\n\n*   _Account_ webhooks are for activity on your own account (for example, most requests made using your API keys and without [authenticating as another Stripe account](https://docs.stripe.com/connect/authentication)). This includes all types of charges, except those made directly on a connected account.\n*   _Connect_ webhooks are for activity on any connected account. All events on the connected account are sent to the Connect webhooks. This includes the important `account.updated` event for any connected account and direct charges.\n\nWhen creating your webhook, ensure it is correctly configured to receive Connect webhook events. You can do this with the API by setting the [connect parameter](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-connect) to `true` when creating the webhook endpoint, or [through the Dashboard](https://dashboard.stripe.com/test/webhooks).\n\n![Webhook settings in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/webhooks.ac3d6c19a5281fbbd2b85a335cd887b3.png)\n\nFor Connect webhooks, only test webhooks are sent to your development webhook URLs, but _both live and test_ webhooks are sent to your production webhook URLs. This is because you can perform both live and test transactions under a production application. For this reason, we recommend that you check the `livemode` value when receiving an event webhook to know what action, if any, users should take.\n\nAs we state in the [event object reference](https://docs.stripe.com/api/events/object), each event for a connected account also contains a top-level `account` property. It identifies the account that the webhook is sent to and the `data[object]` it belongs to. Because these objects belong to other accounts, you must make the API requests [as the corresponding connected account](https://docs.stripe.com/connect/authentication) to access them.\n\n`{   \"id\":` \n\n`\"{{EVENT_ID}}\"`\n\n`,   \"livemode\": true,   \"object\": \"event\",   \"type\": \"customer.created\",   \"account\":   \"{{CONNECTED_ACCOUNT_ID}}\"  ,   \"pending_webhooks\": 2,   \"created\": 1349654313,   \"data\": {...} }`\n\nThere are several events related to accounts that Stripe recommends listening for:\n\n| Event | data.object type | Description |\n| --- | --- | --- |\n| `account.application.deauthorized` | `application` | Occurs when a connected account disconnects from your platform. You can use it to trigger cleanup on your server. Available for connected accounts with access to the Stripe Dashboard, which includes [Standard accounts](https://docs.stripe.com/connect/standard-accounts). |\n| `account.external_account.updated` | An external account, such as `card` or `bank_account` | Occurs when [a bank account or debit card attached to a connected account is updated](https://docs.stripe.com/connect/payouts-bank-accounts), which can impact payouts. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) enabled. |\n| `account.updated` | `account` | Allows you to monitor changes to connected account requirements and status changes. Available for all connected accounts. |\n| `balance.available` | `balance` | Occurs when your Stripe balance has been updated (for example, when [funds you’ve added from your bank account](https://docs.stripe.com/connect/add-and-pay-out-guide#add-funds) are available for transfer to your connected account). |\n| `payment_intent.succeeded` | `payment_intent` | Occurs when a payment intent results in a successful charge. Available for all payments, including [destination](https://docs.stripe.com/connect/collect-then-transfer-guide#fulfillment) and [direct](https://docs.stripe.com/connect/enable-payment-acceptance-guide) charges. |\n| `payout.failed` | `payout` | Occurs when [a payout fails](https://docs.stripe.com/connect/payouts-connected-accounts#webhooks). When a payout fails, the external account involved will be disabled, and no automatic or manual payouts can go through until the external account is updated. |\n| `person.updated` | `person` | If you [use the Persons API](https://docs.stripe.com/connect/handling-api-verification#verification-process), allows you to monitor changes to requirements and status changes for individuals. Available for connected accounts that your platform controls, which includes Custom and Express accounts, and Standard accounts with [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) enabled. |\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``# If you are testing your webhook locally with the Stripe CLI you # can find the endpoint's secret by running `stripe listen` # Otherwise, find your endpoint's secret in your webhook settings in # the Developer Dashboard endpoint_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid Signature.     status 400     return   end    if event['type'] == 'account.application.deauthorized'     application = event['data']['object']     connected_account_id = event['account']     handle_deauthorization(connected_account_id, application)   end    status 200 end  def handle_deauthorization(connected_account_id, application)   # Clean up account state.   puts 'Connected account ID: ' + connected_account_id   puts application.to_s end``\n\nThe events listed above are the ones we typically recommend Connect integrations listen for, but there are [many other event types](https://docs.stripe.com/api/events/types) you may be interested in.\n\n## Test webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can test webhooks locally with the Stripe CLI.\n\n1.  If you haven’t already, [install the Stripe CLI](https://docs.stripe.com/stripe-cli#install) on your machine.\n    \n2.  Log in to your Stripe account and set up the CLI by running `stripe login` on the command line.\n    \n3.  Allow your local host to receive a simulated event on your connected account by running `stripe listen --forward-to localhost:{PORT}/webhook` in one terminal window, and running `stripe trigger {{EVENT_NAME}}` in another.\n    \n\n#### Note",
    "title": "Connect webhooks | Stripe Documentation",
    "description": "Learn how to use webhooks with Connect to be notified of Stripe activity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payout-reversals",
    "markdown": "# Payout reversals | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reverse a payout sent to a connected account.\n\nWhen the platform is responsible for risk and negative balances, you can make a [payout](https://docs.stripe.com/payouts \"payout\") reversal from an external bank account back to the connected account’s balance.\n\nYou can make payout reversals from the Dashboard payout details page or by calling [reverse payout](https://docs.stripe.com/api/payouts/reverse).\n\n![Reverse payouts in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/reverse_payout_button.cb224dbe2ceae893b5a0ecef855f8f7b.png)\n\n`curl -X POST https://api.stripe.com/v1/payouts/`\n\n`{{PAYOUT_ID}}`\n\n`/reverse \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\n## Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo be reversed, a payout:\n\n*   Must be to a bank account in the US.\n*   Must be expected to arrive less than 90 days ago.\n*   Can’t be a debit or an [Instant Payout](https://docs.stripe.com/connect/instant-payouts).\n\n## Webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayout reversals are considered debits and have the same webhooks as other payouts. For example, when a payout reversal is first requested, a `payout.updated` event is sent for the original payout. Then, events for the payout reversal are sent, including `payout.created`, `payout.updated`, `payout.paid`, and possibly a `payout.failed` event.\n\n## Failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the original payout fails while the payout reversal is in a `pending` state, Stripe cancels the reversing payout. A payout reversal in the `paid` state can later be refused by the associated bank and transition to the `failed` state. This results in a `payout.failed` event. Failed payout reversals aren’t retried.",
    "title": "Payout reversals | Stripe Documentation",
    "description": "Learn how to reverse a payout sent to a connected account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/express-dashboard",
    "markdown": "# Express Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the features of the Express Dashboard.\n\nThe Express Dashboard is a user interface that’s available to your platform’s connected accounts. They can use the Express Dashboard to monitor their available balance, view upcoming [payouts](https://docs.stripe.com/payouts \"payout\"), and track their earnings in real time. This guide outlines the features of the Express Dashboard and how your connected accounts can access it.\n\n## Express Dashboard features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Express Dashboard displays the connected account’s balance transactions and net volume.\n\n### Transactions list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Transactions** list displays a connected account’s balance transactions, including charges, transfers, and payouts. The **Transactions** list organizes each transaction by type, date, and amount. By default, it displays generic descriptions of charges and transfers, such as `Payment from {YOUR PLATFORM}`. To learn how to create custom descriptions, see [Customize the Express Dashboard](https://docs.stripe.com/connect/customize-express-dashboard).\n\n### Earnings chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Earnings** chart displays the net volume of the account’s charges and transfers over time. They can select different time intervals to view.\n\n## Accessing the Express Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two ways to access the Express Dashboard, login links and self-service. We recommend using login links.\n\n### Platform login links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can generate single-use account-specific login links that redirect connected accounts from your platform application to the Express Dashboard login page. They then log into the Dashboard using SMS authentication.\n\nTo learn about using login links, see [Integrate the Express Dashboard in your platform](https://docs.stripe.com/connect/integrate-express-dashboard).\n\n### Self-serve access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnected accounts can access the Express Dashboard by logging into [Stripe Express](https://connect.stripe.com/express_login) using their account email and SMS authentication.\n\n#### Note\n\nOnly live mode accounts can log into Stripe Express. For testing, use [login links](https://docs.stripe.com/connect/integrate-express-dashboard).\n\nTo learn more about self-serve access, see the [Stripe Express support article](https://support.stripe.com/express/questions/how-do-i-login-to-my-stripe-express-account).\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Express Dashboard supports the same browsers that the [Full Stripe Dashboard supports](https://docs.stripe.com/dashboard/basics#browser-compatibility). However, it doesn’t support WebView browsers embedded in apps. Only standalone browsers can open it.",
    "title": "Express Dashboard | Stripe Documentation",
    "description": "Learn about the features of the Express Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/stripe-dashboard",
    "markdown": "# Stripe Dashboard for connected accounts\n\n## Learn about the features of the Stripe Dashboard for connected accounts.\n\nThe Stripe Dashboard is available to your platform’s connected accounts.\n\n## Stripe Dashboard features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts can use the Dashboard to:\n\n*   See analytics and charts about business performance\n*   View payments, balances, customers, billing, and other products\n*   Manage their business information and account settings\n*   Handle disputes, refunds, and chargebacks\n*   Download reports\n\n## Accessing the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected accounts have access to the Stripe Dashboard after they’ve completed onboarding. Consider linking to the [Dashboard](https://dashboard.stripe.com/) from your application.\n\n## Platform controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) for a connected account, you can co-brand the Stripe Dashboard. Your platform name is displayed in the bottom left corner of the user interface.",
    "title": "Stripe Dashboard for connected accounts | Stripe Documentation",
    "description": "Learn about the features of the Stripe Dashboard for connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/get-started-connect-embedded-components",
    "markdown": "# Get started with Connect embedded components\n\n## Learn how to embed dashboard functionality into your website.\n\nUse Connect embedded components to add connected account dashboard functionality to your website. These libraries and their supporting API allow you to grant your users access to Stripe products directly in your dashboard.\n\nFor an immersive version of this guide, see the [Connect embedded components integration quickstart](https://docs.stripe.com/connect/connect-embedded-components/quickstart). You can also download a sample integration from there. To customize the appearance of Connect embedded components, use the `appearance` options when you initialize `StripeConnectInstance`. See the [full list of appearance parameters](https://docs.stripe.com/connect/customize-connect-embedded-components).\n\n[](#account-sessions)\n\nStripe uses an [AccountSession](https://docs.stripe.com/api/account_sessions) to express your intent to delegate API access to your connected account.\n\nThe AccountSessions API returns a [client secret](https://docs.stripe.com/api/account_sessions/object#account_session_object-client_secret \"AccountSession client secret\") that allows an embedded component in the web client to access a connected account’s resources as if you were making the API calls for them.\n\n### Create an AccountSession Server![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn a single page application, your client initiates a request to obtain the account session to your server. You can create a new endpoint on your server that returns the client secret to the browser:\n\n`require 'sinatra' require 'stripe' # This is a placeholder - it should be replaced with your secret API key. # Sign in to see your own test API key embedded in code samples. # Don’t submit any personally identifiable information in requests made with this key. Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/account_session' do   content_type 'application/json'    # Create an AccountSession   begin     account_session = Stripe::AccountSession.create({       account: '{{CONNECTED_ACCOUNT_ID}}',       components: {         payments: {           enabled: true,           features: {             refund_management: true,             dispute_management: true,             capture_payments: true           }         }       }     })      {       client_secret: account_session[:client_secret]     }.to_json   rescue => error     puts \"An error occurred when calling the Stripe API to create an account session: #{error.message}\";     return [500, { error: error.message }.to_json]   end end`\n\n### Create Account Session API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Create Account Session API](https://docs.stripe.com/api/account_sessions/create) determines component and feature access for Connect embedded components. Stripe enforces these parameters for any components that correspond to the account session. If your site supports multiple user roles, make sure components and features that are enabled for that account session correspond to the current user’s role. For example, you can enable [refund management](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-payments-features-refund_management) only for administrators of your site, but not for other users. To ensure user role access are enforced, your backend must host the logic that maps your site’s user role to account session components.\n\n### Set up Connect.js Client![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstall the [npm package](https://github.com/stripe/connect-js) to use Connect.js as a module.\n\n`npm install --save @stripe/connect-js`\n\n### Load and initialize Connect.js Client![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCall `loadConnectAndInitialize` with your publishable key and a function that retrieves a client secret by calling the new endpoint you created on your server. Use the returned `StripeConnectInstance` to create embedded components. After initializing Connect.js, you can mount components to or unmount components from the DOM at any time. That includes any elements rendered inside React or Vue portals.\n\nTo create a component, call `create` on the `StripeConnectInstance` that you created above, then pass in the component name. This returns a [custom element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) that Connect.js registers and uses to automatically wire your DOM up to Stripe. You can then `append` this element to your DOM.\n\nCall `create` with `payments`, then add the result to your DOM to render a payments UI.\n\n`<head>   <script type=\"module\" src=\"index.js\" defer></script> </head> <body>   <h1>Payments</h1>   <div id=\"container\"></div>   <div id=\"error\" hidden>Something went wrong!</div> </body>`\n\n`import {loadConnectAndInitialize} from '@stripe/connect-js';  const fetchClientSecret = async () => {   // Fetch the AccountSession client secret   const response = await fetch('/account_session', { method: \"POST\" });   if (!response.ok) {     // Handle errors on the client side here     const {error} = await response.json();     console.error('An error occurred: ', error);     document.querySelector('#error').removeAttribute('hidden');     return undefined;   } else {     const {client_secret: clientSecret} = await response.json();     document.querySelector('#error').setAttribute('hidden', '');     return clientSecret;   } }  const stripeConnectInstance = loadConnectAndInitialize({     // This is a placeholder - it should be replaced with your publishable API key.     // Sign in to see your own test API key embedded in code samples.     // Don’t submit any personally identifiable information in requests made with this key.     publishableKey:` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`,     fetchClientSecret: fetchClientSecret,   }); const paymentComponent = stripeConnectInstance.create(\"payments\"); const container = document.getElementById(\"container\"); container.appendChild(paymentComponent);`\n\n[See a complete list of supported embedded components →](https://docs.stripe.com/connect/supported-embedded-components)\n\n[](#configuring-connect-js)\n\nThe `loadConnectAndInitialize` method on the client takes several different options to configure Connect.js.\n\n| Option | Description |     |\n| --- | --- | --- |\n| `publishableKey` | The [publishable key](https://docs.stripe.com/keys) for your integration. | required |\n| `fetchClientSecret` | The function that retrieves the [client secret](https://docs.stripe.com/api/account_sessions/object#account_session_object-client_secret \"AccountSession client secret\") returned by `/v1/account_sessions`. This tells `StripeConnectInstance` which account to delegate access to. This function is also used to retrieve a client secret function to refresh the session when it expires. | required |\n| `appearance` | An object to customize the look of Connect embedded components. | optional |\n| `locale` | A parameter to specify the [locale](#supported-languages) that Connect embedded components use. The locale defaults to the browser language. If the language passed in isn’t directly supported, a reasonable alternative is used (for example `fr-be` might fall back to `fr-fr`). | optional |\n| `fonts` | An array of custom fonts available for use by any embedded components created from a `StripeConnectInstance`. Fonts can be specified as [CssFontSource](https://docs.stripe.com/connect/get-started-connect-embedded-components#css-font-source) or [CustomFontSource](https://docs.stripe.com/connect/get-started-connect-embedded-components#custom-font-source) objects. | optional |\n\n## Customize the look of Connect embedded components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe offer a set of options to customize the look and feel of Connect embedded components. These customizations affect buttons, icons, and other accents in our design system.\n\nYou can set these options when initializing `StripeConnectInstance` by passing values to the `appearance` object. You can only use the [Connect.js options](https://docs.stripe.com/connect/get-started-connect-embedded-components#configuring-connect-js) to modify styles in Connect embedded components. The font family and background color of Connect embedded components can be overridden with CSS selectors, but Stripe doesn’t support overriding any other styles.\n\n`const fetchClientSecret = async () => {   const response = await fetch('/account_session');   const {client_secret: clientSecret} = await response.json();   return clientSecret; }  const stripeConnectInstance = loadConnectAndInitialize({   publishableKey:` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n``,   fetchClientSecret: fetchClientSecret,   fonts: [     {       cssSrc: \"[https://myfonts.example.com/mycssfile.css](https://myfonts.example.com/mycssfile.css)\",     },     {       src: `url([https://my-domain.com/assets/my-font-2.woff)`,](https://my-domain.com/assets/my-font-2.woff)%60,)       family: 'My Font'     }   ],   appearance: {     // See all possible variables below     overlays: \"dialog\",     variables: {       fontFamily: 'My Font',       colorPrimary: \"#FF0000\",     },   }, });``\n\n### The `fonts` object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `fonts` object in `stripeConnect.initialize` takes an array of [CssFontSource](https://docs.stripe.com/js/appendix/css_font_source_object) or [CustomFontSource](https://docs.stripe.com/js/appendix/custom_font_source_object) objects.\n\nIf you’re using custom fonts in your page (that is, `.woff` or `.tff` files), you must specify these files when initializing Connect embedded components. Doing this allows Connect embedded components to properly render these fonts. You can specify these as:\n\n#### CssFontSource ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse this object to pass a stylesheet URL that defines your custom fonts when creating a `StripeConnectInstance`. With a CssFontSource object, your [CSP configuration](https://docs.stripe.com/connect/get-started-connect-embedded-components#csp-and-http-header-requirements) must allow fetching the domains associated with the CSS file URLs specified as CssFontSource.\n\n#### CustomFontSource ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse this object to pass custom fonts when creating a `StripeConnectInstance`.\n\n| Name | Type | Example value |\n| --- | --- | --- |\n| `family` | string `required` | `Avenir` |\n| The name to give the font. |     |     |\n| `src` | string `required` | `url(https://my-domain.com/assets/avenir.woff)` |\n| A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your custom font file. This is usually (though not always) a link to a file with a `.woff` , `.otf`, or `.svg` suffix. |     |     |\n| `display` | string `optional` | `auto` |\n| A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value. |     |     |\n| `style` | string `optional` | `normal` |\n| One of `normal`, `italic`, or `oblique`. |     |     |\n| `unicodeRange` | string `optional` | `U+0-7F` |\n| A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value. |     |     |\n| `weight` | string `optional` | `400` |\n| A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number. |     |     |\n\n### The `appearance` object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `appearance` object in `loadConnectAndInitialize` takes the following optional properties:\n\n| Name | Type | Example value |\n| --- | --- | --- |\n| `overlays` | ‘dialog’ (default) \\| ‘drawer’ | `dialog` |\n| The type of overlay used throughout the Connect.js design system. Set this to be either a Dialog or Drawer. |     |     |\n| `variables` | object | `{colorPrimary: \"#0074D4\"}` |\n| See the [full list of appearance variables](https://docs.stripe.com/connect/embedded-appearance-options). |     |     |\n\n### Updating Connect embedded components after initialization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `update` method supports updating Connect embedded components after initialization. This is useful for switching appearance options at runtime (without refreshing the page). To do so, use the same `stripeConnectInstance` object you created with `initialize` and call the `update` method on it:\n\n`stripeConnectInstance.update({   appearance: {     variables: {       colorPrimary: \"#FF0000\",     },   },   locale: 'en-US', });`\n\n#### Note\n\nNot all options (e.g. `fonts`) are updatable. The supported options for this method are a subset of the options offered in `initialize`. This supports updating the `appearance` and `locale`.\n\n### Width and height![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect embedded components behave like regular `block` HTML elements. By default, they take 100% of the `width` of their parent HTML element, and grow in height according to the content rendered inside. You can control the `width` of Connect embedded components by specifying the `width` of the HTML parent. You can’t directly control the `height` as that depends on the rendered content, however, you can limit the height with `maxHeight` and `overflow: scroll`, just like with other HTML `block` elements.\n\n## Authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe offer a set of APIs to manage account sessions and user credentials in Connect embedded components.\n\n### Refresh the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn long running sessions, the session from the initially provided [client secret](https://docs.stripe.com/api/account_sessions/object#account_session_object-client_secret \"AccountSession client secret\") might expire. When it expires, we automatically use `fetchClientSecret` to retrieve a new client secret and refresh the session. You don’t need to pass in any additional parameters.\n\n`import { loadConnectAndInitialize } from \"@stripe/connect-js\"; // Example method to retrieve the client secret from your server const fetchClientSecret = async () => {   const response = await fetch('/account_session');   const {client_secret: clientSecret} = await response.json();   return clientSecret; }  const stripeConnectInstance = loadConnectAndInitialize({   publishableKey: \"{{PUBLISHABLE_KEY}}\",   fetchClientSecret: fetchClientSecret, });`\n\n### Log out![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend that you call `logout` on the `stripeConnectInstance` to destroy the associated account session object after a user logs out of your app. This disables all Connect embedded components that link to that `stripeConnectInstance`.\n\n`// Call this when your user logs out stripeConnectInstance.logout();`\n\n## CSP and HTTP header requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your website implements a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP \"Content Security Policy\"), you need to update the policy by adding the following rules:\n\n*   `frame-src` `https://connect-js.stripe.com` `https://js.stripe.com`\n*   `img-src` `https://*.stripe.com`\n*   `script-src` `https://connect-js.stripe.com` `https://js.stripe.com`\n*   `style-src` `sha256-0hAheEzaMe6uXIKV4EehS9pu1am1lj/KnnzrOYqckXk=` (SHA of empty style element)\n\nIf you’re using a CSS file to load [web fonts](https://docs.stripe.com/connect/get-started-connect-embedded-components#fonts-object) for use with Connect embedded components, its URL must be allowed by your [connect-src](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src) CSP directive.\n\nSetting certain [HTTP response headers](https://developer.mozilla.org/en-US/docs/Glossary/Response_header) enables the full functionality of Connect embedded components:\n\n*   [`Cross-Origin-Opener-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy), `unsafe-none`. This (`unsafe-none`) is the default value of the header, so not setting this header works. Other values like `same-origin` break [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components) in Connect embedded components.\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe support the same set of browsers that the [Stripe Dashboard currently supports](https://docs.stripe.com/dashboard/basics#browser-compatibility):\n\n*   The last 20 major versions of Chrome and Firefox\n*   The last two major versions of Safari and Edge\n*   The last two major versions of mobile Safari on iOS\n\nConnect embedded components aren’t supported in webviews, they are only supported in standalone browsers.\n\n## Supported languages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe localized Connect embedded components for the following languages:\n\n| Language | Locale code |\n| --- | --- |\n| Bulgarian (Bulgaria) | `bg-BG` |\n| Chinese (Simplified) | `zh-Hans` |\n| Chinese (Traditional - Hong Kong) | `zh-Hant-HK` |\n| Chinese (Traditional - Taiwan) | `zh-Hant-TW` |\n| Croatian (Croatia) | `hr-HR` |\n| Czech (Czechia) | `cs-CZ` |\n| Danish (Denmark) | `da-DK` |\n| Dutch (Netherlands) | `nl-NL` |\n| English (Australia) | `en-AU` |\n| English (India) | `en-IN` |\n| English (Ireland) | `en-IE` |\n| English (New Zealand) | `en-NZ` |\n| English (Singapore) | `en-SG` |\n| English (United Kingdom) | `en-GB` |\n| English (United States) | `en-US` |\n| Estonian (Estonia) | `et-EE` |\n| Filipino (Philippines) | `fil-PH` |\n| Finnish (Finland) | `fi-FI` |\n| French (Canada) | `fr-CA` |\n| French (France) | `fr-FR` |\n| German (Germany) | `de-DE` |\n| Greek (Greece) | `el-GR` |\n| Hungarian (Hungary) | `hu-HU` |\n| Indonesian (Indonesia) | `id-ID` |\n| Italian (Italy) | `it-IT` |\n| Japanese (Japan) | `ja-JP` |\n| Korean (South Korea) | `ko-KR` |\n| Latvian (Latvia) | `lv-LV` |\n| Lithuanian (Lithuania) | `lt-LT` |\n| Malay (Malaysia) | `ms-MY` |\n| Maltese (Malta) | `mt-MT` |\n| Norwegian Bokmål (Norway) | `nb-NO` |\n| Polish (Poland) | `pl-PL` |\n| Portuguese (Brazil) | `pt-BR` |\n| Portuguese (Portugal) | `pt-PT` |\n| Romanian (Romania) | `ro-RO` |\n| Slovak (Slovakia) | `sk-SK` |\n| Slovenian (Slovenia) | `sl-SI` |\n| Spanish (Argentina) | `es-AR` |\n| Spanish (Brazil) | `es-BR` |\n| Spanish (Latin America) | `es-419` |\n| Spanish (Mexico) | `es-MX` |\n| Spanish (Spain) | `es-ES` |\n| Swedish (Sweden) | `sv-SE` |\n| Thai (Thailand) | `th-TH` |\n| Turkish (Türkiye) | `tr-TR` |\n| Vietnamese (Vietnam) | `vi-VN` |\n\n[](#integrate-without-sdk)\n\nWe recommend integrating with our [javascript](https://github.com/stripe/connect-js) and [React component wrappers](https://github.com/stripe/react-connect-js), which simplify the loading of Connect embedded components and provide TypeScript definitions for our supported interfaces. If your build system currently doesn’t support taking a dependency on packages, you can integrate without these packages.\n\nManually add the Connect.js script tag to the `<head>` of each page on your site.\n\n### Using Connect.js without NPM ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter Connect.js completes loading, it initializes the global window variable `StripeConnect` and calls `StripeConnect.onLoad` if you define it. You can safely initialize Connect.js by setting up an `onload` function and calling `StripeConnect.init` with the same [Connect.js options](https://docs.stripe.com/connect/get-started-connect-embedded-components#configuring-connect-js) as `loadConnectAndInitialize`.\n\n`window.StripeConnect = window.StripeConnect || {}; StripeConnect.onLoad = () => {   const stripeConnectInstance = StripeConnect.init({       // This is a placeholder - it should be replaced with your publishable API key.       // Sign in to see your own test API key embedded in code samples.       // Don’t submit any personally identifiable information in requests made with this key.       publishableKey:` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`,       fetchClientSecret: fetchClientSecret,     });    const payments = stripeConnectInstance.create('payments');   document.body.appendChild(payments); };`\n\n## User authentication in Connect embedded components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect embedded components typically don’t require user authentication. In some scenarios, Connect embedded components require the connected account to sign in with their Stripe account to provide the necessary functionality (for example, writing information to the account legal entity in the case of the [account onboarding](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) component).\n\nAuthentication includes a popup to a Stripe-owned window. The connected account must authenticate before they can continue their workflow.\n\nThe [account onboarding](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) and [account management](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) components require connected accounts to authenticate. Other components might require authentication within the component after they initially render. Authentication for these components and scenarios is required for all connected accounts unless the platform has disabled external account collection.",
    "title": "Get started with Connect embedded components | Stripe Documentation",
    "description": "Learn how to embed dashboard functionality into your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/accounts",
    "markdown": "# Connect account types | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about older connected account configurations.\n\nWhen using [Connect](https://docs.stripe.com/connect \"Connect\"), you create a [connected account](https://docs.stripe.com/connect \"connected account\") for each business or individual that signs up to access your platform’s services. You can configure your platform and connected accounts to fit your business model, distributing specific responsibilities between your platform, Stripe, and your connected accounts.\n\nIf you’re setting up a new Connect platform, see [Design an integration](https://docs.stripe.com/connect/design-an-integration) to learn about configuring connected accounts. The information on this page applies only to less flexible connected account types, which are mainly used by existing platforms.\n\n#### Note\n\nConnect supports the following account types:\n\n*   [Standard](https://docs.stripe.com/connect/standard-accounts)\n*   [Express](https://docs.stripe.com/connect/express-accounts)\n*   [Custom](https://docs.stripe.com/connect/custom-accounts)\n\n## Choose an account type ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must consider several factors when choosing an account type. Integration effort and connected account user experience are especially important because they can affect engineering resource expenditure and conversion rates. After you create a connected account, you can’t change its type.\n\nStripe recommends that you use Express or Standard connected accounts, which require less integration effort. If you want more control over your connected accounts, consider using Express or Custom connected accounts. To learn which account type we recommend for your business, refer to your [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n\nThere’s an additional cost for using Express or Custom connected accounts.\n\n|     | Standard | Express | Custom |\n| --- | --- | --- | --- |\n| **Integration effort** | Lowest | Low | Significantly higher |\n| **Integration method** | API or OAuth | API | API |\n| **Fraud and dispute liability** | Connected account | Platform | Platform |\n| **Platform can specify payout timing?** | Yes, with [Platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) | Yes | Yes |\n| **Onboarding** | Stripe | Stripe | Platform or Stripe |\n| **Identity information gathering** | Stripe | Stripe | Platform or Stripe |\n| **Connected account can access the Dashboard?** | Yes, full Dashboard | Yes, Express Dashboard | No  |\n| **Connected account support provided by** | Platform and Stripe | Platform and Stripe | Platform |\n| **Automatic updates for new compliance requirements** | Yes | Yes | No  |\n| **Support new countries without integration changes** | Yes | Yes | No  |\n| **Ideal for platforms** | With experienced online businesses as connected accounts | Any type | With significant engineering resources to dedicate to a fully white-labeled experience |\n\nWith Standard connected accounts, the connected account is responsible for fraud and disputes when using [direct charges](https://docs.stripe.com/connect/charges#types), but that can vary when using [destination charges](https://docs.stripe.com/connect/charges#types).\n\n## Express connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith _Express_ connected accounts, Stripe handles the onboarding and identity verification processes. The platform has the ability to specify [charge types](https://docs.stripe.com/connect/charges) and set the connected account’s [payout settings](https://docs.stripe.com/connect/payouts-connected-accounts) programmatically. The platform is responsible for handling disputes and refunds, which is similar to a Custom connected account.\n\nAlthough your connected account has interactions with Stripe, they primarily interact with your platform, particularly for the core payment processing functionality. For Express connected account holders, Stripe provides an Express Dashboard (a lighter version of the Dashboard) that allows them to manage their personal information and see [payouts](https://docs.stripe.com/payouts \"payout\") to their bank.\n\nUse Express connected accounts when you:\n\n*   Want to get started quickly (letting Stripe handle account onboarding, management, and identity verification)\n*   Want to use [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n*   Want significant control over interactions with your connected accounts\n\nExamples of platforms that use Express connected accounts include, but are not limited to: a [home-rental marketplace](https://docs.stripe.com/connect/collect-then-transfer-guide) like Airbnb, or a ride-hailing service like Lyft.\n\nGlobal compliance requirements do evolve and change over time. With Express, Stripe proactively collects information when requirements change. For best practices on how to communicate to your connected accounts when that happens, visit the [guide for Express accounts](https://support.stripe.com/questions/best-practices-for-connect-platforms-communicating-updates-to-verification-requirements-with-standard-or-express-connected-accounts).\n\n### Express connected account availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSelect one of the available countries when you create an Express connected account. You can’t change the country later.\n\nSome countries are available only when using [cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts).\n\nTo know when Express connected accounts are available in your country, [contact Stripe](mailto:connect@stripe.com).\n\nAlbania\n\nAntigua & Barbuda\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nBahamas\n\nBahrain\n\nBelgium\n\nBenin\n\nBolivia\n\nBosnia & Herzegovina\n\nBotswana\n\nBrazil\n\nBrunei\n\nBulgaria\n\nCambodia\n\nCanada\n\nChile\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nEthiopia\n\nFinland\n\nFrance\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nGuyana\n\nHong Kong\n\nHungary\n\nIceland\n\nIndia\n\nIndonesia\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJordan\n\nKenya\n\nKuwait\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMacao SAR China\n\nMadagascar\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMonaco\n\nMongolia\n\nMorocco\n\nNamibia\n\nNetherlands\n\nNew Zealand\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nOman\n\nPakistan\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nQatar\n\nRomania\n\nRwanda\n\nSaudi Arabia\n\nSenegal\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSt. Lucia\n\nSweden\n\nSwitzerland\n\nTaiwan\n\nTanzania\n\nThailand\n\nTrinidad & Tobago\n\nTunisia\n\nTurkey\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nUruguay\n\nUzbekistan\n\nVietnam\n\n## Standard connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA _Standard_ connected account is a conventional Stripe account where the connected account has a direct relationship with Stripe, is able to log in to the [Dashboard](https://dashboard.stripe.com/), and can process charges on their own.\n\nUse Standard connected accounts when you:\n\n*   Want to get started quickly and don’t need a lot of control over interactions with your connected accounts\n*   Want to use [direct charges](https://docs.stripe.com/connect/direct-charges)\n*   Have connected accounts that are familiar with running online businesses or that already have a Stripe account\n*   Prefer that Stripe handles direct communication with the connected account for account issues (for example, to request more information for identity verification purposes)\n\nSome examples of platforms that use Standard connected accounts are [store builders](https://docs.stripe.com/connect/enable-payment-acceptance-guide) like Shopify, and Software as a Service (SaaS) platforms such as an online invoicing and payment service.\n\nGlobal compliance requirements do evolve and change over time. With Standard connected accounts, Stripe proactively collects information when requirements change. For best practices on how to communicate to your connected accounts when that happens, visit the [guide for Standard accounts](https://support.stripe.com/questions/best-practices-for-connect-platforms-communicating-updates-to-verification-requirements-with-standard-or-express-connected-accounts).\n\n#### Country can't be changed\n\nAfter you create a Standard connected account, you can’t change its country.\n\n## Custom connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA _Custom_ connected account is almost completely invisible to the account holder. You—the platform—are responsible for all interactions with your connected accounts, including collecting any information Stripe needs. You have the ability to change all of the account’s [settings](https://docs.stripe.com/connect/updating-service-agreements), including the payout [bank or debit card account](https://docs.stripe.com/connect/payouts-connected-accounts), programmatically.\n\nCustom connected account holders don’t have access to the Dashboard, and Stripe doesn’t contact them directly.\n\nUse Custom connected accounts when you:\n\n*   Want complete control over interactions with your connected accounts\n*   Can build the significant infrastructure required to collect connected account information, deploy a custom dashboard, and handle support\n*   Want to handle all communication with your connected accounts, involving no direct contact between them and Stripe\n\nCreating and managing Custom connected accounts requires a larger integration effort than the other account types. To learn more, see [Using Connect with Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nGlobal compliance requirements do evolve and change over time. For best practices on how to communicate to your connected accounts when requirements change, see the [guide for Custom accounts](https://support.stripe.com/questions/best-practices-for-connect-platforms-communicating-updates-to-verification-requirements-with-custom-connected-accounts).\n\nIf you decide to use Custom connected accounts, Stripe recommends that you use [Connect Onboarding for Custom accounts](https://docs.stripe.com/connect/custom/hosted-onboarding) to collect onboarding and verification information from your connected accounts. That decreases your integration effort and eliminates the need to update your onboarding form when requirements change.\n\n### Custom connected account availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSelect one of the available countries when you create a Custom connected account. You can’t change the country later.\n\nSome countries are available only when using [cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts).\n\nTo request notification when Custom connected accounts are available in your country, [contact Stripe](mailto:connect@stripe.com).\n\nAlbania\n\nAntigua & Barbuda\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nBahamas\n\nBahrain\n\nBelgium\n\nBenin\n\nBolivia\n\nBosnia & Herzegovina\n\nBotswana\n\nBrazil\n\nBrunei\n\nBulgaria\n\nCambodia\n\nCanada\n\nChile\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nEthiopia\n\nFinland\n\nFrance\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nGuyana\n\nHong Kong\n\nHungary\n\nIceland\n\nIndia\n\nIndonesia\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJordan\n\nKenya\n\nKuwait\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMacao SAR China\n\nMadagascar\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMonaco\n\nMongolia\n\nMorocco\n\nNamibia\n\nNetherlands\n\nNew Zealand\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nOman\n\nPakistan\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nQatar\n\nRomania\n\nRwanda\n\nSaudi Arabia\n\nSenegal\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSt. Lucia\n\nSweden\n\nSwitzerland\n\nTaiwan\n\nTanzania\n\nThailand\n\nTrinidad & Tobago\n\nTunisia\n\nTurkey\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nUruguay\n\nUzbekistan\n\nVietnam\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Express connected accounts](https://docs.stripe.com/connect/express-accounts)\n*   [Standard connected accounts](https://docs.stripe.com/connect/standard-accounts)\n*   [Custom connected accounts](https://docs.stripe.com/connect/custom-accounts)\n*   [Account capabilities](https://docs.stripe.com/connect/account-capabilities)",
    "title": "Connect account types | Stripe Documentation",
    "description": "Learn about older connected account configurations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/connect-embedded-components/quickstart",
    "markdown": "# Integrate with Connect embedded components\n\nSearch the docs or ask a question",
    "title": "Integrate with Connect embedded components | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code",
    "markdown": "# Collect payments then pay out\n\nThis guide demonstrates how to accept payments from customers and move funds to the bank accounts of your sellers or service providers, without writing code. Use this guide if you:\n\n*   Want to accept payments from customers and pay out sellers or service providers without writing code.\n*   Want to rapidly test product-market fit without coding.\n*   Are a marketplace that is selling directly to end customers (as opposed to a SaaS platform who is selling software to help others operate their own business).\n\nIn this example, we’ll build a marketplace that allows T-shirt artists to sell customized T-shirts. You can use the concepts covered in this guide in other business applications as well.\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  Complete your [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  Customize your Connect brand settings on the [Stripe Dashboard settings page](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) and customize your Payment Link brand settings on the Checkout [Branding settings page](https://dashboard.stripe.com/settings/branding).\n\n[](#create-account)\n\nWhen a seller or service provider signs up on your marketplace, you need to create a user account (referred to as a _connected account_) so you can move funds to their bank account. Connected accounts represent your sellers or service providers. In our T-shirt marketplace example, the connected account represents the artist making the shirts.\n\n### Step 1.1: Create a connected account onboarding link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Go to the [accounts overview page](https://dashboard.stripe.com/connect/accounts/overview) and click **+Create** to create a new connected account.\n*   Select **Express** for account type and select the country where this connected account is located. Stripe allows platforms in supported countries to [create connected accounts in other Stripe-supported countries](https://docs.stripe.com/connect/express-accounts#onboarding-express-accounts-outside-of-your-platforms-country).\n*   Click **Continue** to generate the onboarding link that you can then share with your seller or service provider over email, SMS, or other private means. Don’t share this link publicly.\n\n![The create account modal displaying a generated Express link for onboarding a connected account](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-express-link.40a3af1fdd03417e6560d3327db55961.png)\n\nCreate an onboarding link\n\nThis link directs sellers and service providers to a sign-up form where they can provide their identity and bank account information to onboard to your marketplace. In our example of a T-shirt marketplace, share this link with the T-shirt artist to onboard them. This link expires after 90 days and is for use by a single seller or service provider. After they complete the onboarding flow, you can see their account details in your [accounts list](https://dashboard.stripe.com/connect/accounts/overview). Repeat these steps any time you need to add additional sellers or service providers.\n\n![A single account displayed in the connected accounts list view](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-connected-accounts.a62a6dc14ef6c95ae5a1e36801090945.png)\n\n[](#accept-payment)\n\nNow that you’ve created a connected account, create a Payment Link to accept payments from your customers—no coding required. When you send this link to your marketplace customer, they’ll land on a Stripe-hosted page where they can pay you. In the T-shirt marketplace example, customers buy T-shirts through your marketplace, and you pay T-shirt artists for designing and creating the T-shirts. To set this up, click on **+Create link** on the [Payment Links page](https://dashboard.stripe.com/payment-links) and follow the steps.\n\n### Step 2.1: Add the product ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou configure Payment Links for a specific product and price so the first step is to [add the product](https://support.stripe.com/questions/how-to-create-products-and-prices) you want to sell. Click on **+Add new product** to add a product.\n\n![The first page of the payment link creation form](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-empty-payment-link.9885cf82263d39d2be55c4fbdcbcbb9f.png)\n\nSet your product name, description, and price, which are all visible to the customer on the Checkout page that you redirect them to. After entering the information for your new product click **+Add product** to add the product. In this example, we’re adding a medium-sized tree-patterned T-shirt product, so we’ll configure the Payment Link for this particular product. If we also wanted to sell small-sized T-shirts or T-shirts with other designs, we would follow the above steps to create a new Payment Link and a new product.\n\n![The product creation modal found within the payment link creation form](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-create-product.ce265a710c21ecb80ac7715dc240721a.png)\n\n### Step 2.2: Customize the Payment Link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can customize your Payment Link to allow customers to enter promotion codes, adjust the quantity of the product, or enter their shipping and billing address. For our example of a T-shirt marketplace, we want to allow customers to buy a variable number of T-shirts. We also need to collect the customer’s shipping address so we can ship the T-shirts to them. To enable both of these, select **Let customers adjust quantity** and **Collect customers’ addresses** then click **Next**.\n\n### Step 2.3: Decide when to pay your connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou have two options for paying out your connected account.\n\n*   If you already know which connected account you want to pay using funds collected through this Payment Link, you can automatically pay out.\n*   However, if you don’t know the connected account ahead of time or need to pay multiple connected accounts, you can pay out later.\n\n#### Select the connected account to pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSelect the checkbox that says **Split the payment with a connected account**. Selecting this checkbox allows a connected account to automatically get paid when a customer buys the product through this Payment Link. In our example, we want to automatically pay Jamie, the T-shirt artist, whenever a customer buys their T-shirt. To do that, we specify Jamie as the connected account.\n\n#### Specify the application fee for the platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo keep a portion of the payment for your marketplace, you can specify an application fee. This is a fixed amount for each payment that uses this payment link. It doesn’t change based on quantity, discounts, or taxes, and we cap it at the total purchase amount. In our example, our T-shirt marketplace takes a 1 USD application fee per sale and sends the remaining payment (9 USD) to the T-shirt artist. If the customer purchases two T-shirts, uses a promotion code, or needs to pay additional taxes on top of their 10 USD purchase, the T-shirt marketplace still receives a 1 USD application fee per sale. For products with recurring payments (subscriptions), you can specify an application fee as a percentage of the total transaction value.\n\n![The second page of the payment link creation form. This page includes options for routing funds to connected accounts.](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-create-payment-link-page-2.465b89cd12b53c1e3e623a0a3b03ffb0.png)\n\nAfter configuring the Payment Link to split the payment with your connected account, click **+Create link** to generate the Payment Link URL.\n\nAfter the customer pays, Stripe transfers the entire amount to the connected account’s pending balance and then transfers the application fee amount to the platform’s account as revenue for facilitating the sale. Then Stripe deducts the Stripe fees from the platform’s application fee. Under the hood, this funds flow is called a [destination charge](https://docs.stripe.com/connect/destination-charges).\n\n[](#share-payment-link)\n\nNow that you’ve created your Payment Link, copy the Payment Link URL and share it publicly on your website or through social media. When a customer clicks on your Payment Link URL, they see your customized Checkout page (example below) and can enter their payment information—they can pay from mobile or desktop with a card, Apple Pay, or Google Pay.\n\n[](#after-payment)\n\n### Step 4.1 View your payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo to the [Payments page](https://dashboard.stripe.com/payments) to see the list of payments your business has accepted. You can click on an individual payment to see more details about it, such as the shipping address if you chose to collect one. You can see the [application fees](https://dashboard.stripe.com/connect/application_fees) your business collected for each payment, or go to the [Balance page](https://dashboard.stripe.com/balance/overview) to see your total funds.\n\n### Step 4.2 Fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the payment completes, you need to handle fulfillment of the product. In the T-shirt marketplace example, this would entail shipping the T-shirts to the buyer after payment.\n\nAs the [settlement merchant](https://docs.stripe.com/connect/destination-charges#settlement-merchant) on charges, your platform is responsible for disputes. Make sure you understand the [best practices](https://docs.stripe.com/disputes/responding) for responding to disputes.\n\nBy default, any funds that you transfer to a connected account accumulate in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and are paid out on a daily rolling basis. You can change the [payout](https://docs.stripe.com/payouts \"payout\") frequency by going into the connected account’s detail page, clicking the right-most button in the **Balance** section, and selecting **Edit payout schedule**.\n\nTo issue refunds, go to the [Payments](https://dashboard.stripe.com/payments) page. Select individual payments by clicking the checkbox to the left of any payments you want to refund. After you select a payment, Stripe displays a **Refund** button in the upper-right corner of the page. Click the **Refund** button to issue a refund to customers for all payments you have selected.",
    "title": "Collect payments then pay out | Stripe Documentation",
    "description": "Collect payments from customers and pay them out to sellers or service providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api=dashboard",
    "markdown": "# Pay out money | Stripe DocumentationThe Stripe Docs logo\n\n## Add money to your Stripe balance and pay out your sellers or service providers.\n\n#### Note\n\nMost platforms can pay out funds only to connected accounts in the same region and in local currencies. Platforms based in the US can make [cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts) to accounts in other regions, subject to restrictions.\n\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n\nWhen adding funds to your balance, best practice is to use a manual [payout](https://docs.stripe.com/payouts \"payout\") schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n#### Note\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#create-connected-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n\n### Customize your signup form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [platform settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), customize your Express signup form by changing the color and logos that users see when they click your [Connect](https://docs.stripe.com/connect \"Connect\") link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-form.4b13fc5edc56abd16004b4ccdff27fb6.png)\n\nDefault Express signup form\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/branding-settings-payouts.20c99c810389a4e7f5c55238e80a9fc8.png)\n\nBranding settings\n\n### Create a connected account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a connected account onboarding link by clicking **+Create** on the [accounts overview page](https://dashboard.stripe.com/connect/accounts/overview), and selecting **Express** for the account type, along with the **transfers** capability. Click **Continue** to generate a link to share with the user you want to onboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-account.474100e68f8c8df37bc4b5fac9e04583.png)\n\nCreate a connected account\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-express-link.40a3af1fdd03417e6560d3327db55961.png)\n\nCreate an onboarding link\n\nThis link directs users to a form where they can provide information in order to connect to your platform. For example, if you have a Q&A platform, you can provide a link for writers to connect with the platform. The link is only for the single connected account you created. After your user completes the onboarding flow, you can view them in your accounts list.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-account-payout.94e15f1be4a11a54d18fc305433e50f4.png)\n\n[](#add-funds)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard. Click **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nSelect **Pay out connected accounts** to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n### Verify your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` as the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n### Add funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce verified, use the [Dashboard](https://dashboard.stripe.com/test/balance/overview) to add funds to your account balance.\n\n1.  In the Dashboard, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section.\n2.  In the **Add to balance** window, enter an amount in USD and select Connect payouts.\n3.  In the resulting modal (shown below), enter an amount in USD.\n4.  Verify the amount and then click **Add funds.**\n5.  The resulting object is called a [top-up](https://docs.stripe.com/api/topups/object) and can be viewed in the [Top-ups](https://dashboard.stripe.com/test/topups) section of the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/topup_modal.5523d356678b312020e4e063e7de8eb4.png)\n\n### View funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID in the format **tu\\_XXXXXX**, which you can see on the detailed view for the top-up.\n\n### Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfers](https://docs.stripe.com/get-started/account/add-funds) and are available in 1-2 business days.\n\n[](#pay-out-to-user)\n\nAfter your user completes [the onboarding process](https://docs.stripe.com/connect/add-and-pay-out-guide#create-connected-account) and you’ve added funds to your balance, you can transfer some of your balance to your connected accounts. In this example, money is transferred from the Q&A platform’s balance to the individual writer.\n\nTo pay your user, go to the **Balance** section of an account’s detail page and click **Add funds**. By default, any funds you transfer to a connected account accumulate in the connected account’s Stripe balance and are paid out on a daily rolling basis. You can change the payout frequency by clicking the right-most button in the **Balance** section and selecting **Edit payout schedule**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/send-funds.5c34a4e2e038c3a5343c7aa165eb3787.png)\n\nSend funds to user\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/edit-payout-schedule.537eca9bac08a738533bd644e9dd2280.png)\n\nEdit payout schedule",
    "title": "Pay out money | Stripe Documentation",
    "description": "Add money to your Stripe balance and pay out your sellers or service providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/margin-reports",
    "markdown": "# Connect margin reports | Stripe DocumentationThe Stripe Docs logo\n\n## Connect margin reportsBeta\n\n## Compute your margins by analyzing your Connect volume, revenue and costs.\n\nThe Connect margin reports show platforms their aggregated and transaction-level payment volumes, fees, and revenue associated with activity where the platform is responsible for pricing and fees. Use these reports to calculate your margins and set your fees appropriately given your underlying Stripe fees and network costs.\n\n## Platform support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese reports only support platforms that [explicitly state an application fee on their charges](https://docs.stripe.com/connect/destination-charges?fee-type=application-fee#collect-fees), either directly in the API or through [Platform Pricing Tools](https://docs.stripe.com/connect/platform-pricing-tools). They identify fees taken using `application_fee_amount`, but don’t identify fees taken using [transfer\\_data.amount](https://docs.stripe.com/connect/destination-charges?fee-type=transfer-amount#collect-fees) or account debits.\n\n## User access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers with the following [user roles](https://docs.stripe.com/get-started/account/teams/roles) can access the Margin Reports:\n\n*   Administrator\n*   Analyst\n*   Data Migration Specialist\n*   Developer\n*   Tax Analyst\n*   View only\n\n## Margin report data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMargin reports include charges based on the timestamp of the originating event, not the timestamp when a fee is assessed. For example, to view a fee assessed on February 1 for a charge created on January 31, run the report for January.\n\nA margin report includes data for the following types of charges:\n\n*   [Connect direct charges](https://docs.stripe.com/connect/direct-charges) where the platform collects application fees\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges) where the platform collects application fees, with or without on\\_behalf\\_of\n\nIt does not include data for the following types of charges:\n\n*   Direct charges where the connected account is responsible for fees\n*   Direct charges on the platform (such as SaaS subscriptions they run on the same account)\n*   Separate charges and transfers\n*   Non-Connect direct charges on a connected account\n\n#### Note\n\nA margin report normalizes all values to USD using the conversion rate at the time of activity. We plan to add other normalization currencies in a future release.\n\n## Available margin reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Report type | Description | Usage |\n| --- | --- | --- |\n| Summary | Platform-level aggregated view of Connect volume, revenue and fees | Calculate monthly margins for your platform |\n| Transaction | Transaction-level view of Connect volume, revenue and fees | Identify which transactions are driving margins up or down |\n| Connected Account _(coming soon)_ | Connected account-level view of Connect volume, revenue and fees | Identify which connected accounts are driving margins up or down |\n\n![Example of a summary margin report](https://b.stripecdn.com/docs-statics-srv/assets/summary-margin-report.4b348d78a47df2e2ab99328136a93cb4.png)\n\nSummary margin report example\n\n## Access the margin reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to the [Reports hub](https://dashboard.stripe.com/reports/hub) in your Stripe Dashboard.\n2.  Click **Connect Margin Report**.\n3.  Using the month picker, select the **time-period** for which you’d like the Margin Report. The report for a month is available 7 days after the end of that month.\n4.  Click **Download** on your desired Margin Report type.\n\n## Available columns for each margin report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Summary margin report shows aggregated monthly data, while the Transaction margin report shows data for individual transactions.\n\n#### Note\n\nThe total amounts shown in the Summary margin report are normally greater than the sum of the amounts in the Transaction margin report. That’s because the Transaction report includes only fees that apply at a transaction level. It doesn’t include out-of-band fees, such as Card Account Updater fees or non-transactional scheme fees.\n\n### Summary margin report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis report shows the aggregated volume, revenue, and costs for the platform for the entire month.\n\nAmount fields include:\n\n*   **subtotal\\_amount**: Amount excluding any tax\n*   **tax\\_amount**: Amount of tax\n*   **total\\_amount**: sum of `subtotal_amount` and `tax_amount`\n\nThe Summary margin report includes the following data:\n\n| Type | Category | Description |\n| --- | --- | --- |\n| Volume | Charges, Payment method = _{payment method}_ | Volume of charges for the _{payment method}_ payment method |\n| Refunds | Volume of refunds |\n| Disputes | Volume of disputes |\n| Revenue | Application fee, payment method = _{payment method}_ | Amount of application fees for the _{payment method}_ payment method |\n| Application fee refunds | Amount of application fees refunded by the platform |\n| Network fee (assessed by card networks) | Card payments - Transaction network costs | Interchange (or discount, for Amex) fees and transaction-level scheme fees; a single charge typically incurs one interchange fee and one or more scheme fees |\n| Card payments - Other network costs | Non-transactional scheme fees, such as FANF or MLF, assessed monthly |\n| Stripe fee | Stripe processing fees - _{payment method}_ | Stripe processing fees for cards and other payment methods |\n| Connect - _{fee type}_ | Connect fees, such as Account Volume Billing, Active Account Billing, and (for Stripe Managed Risk and Support) Loss Liability |\n| _Varies_ | Other product fees that apply to the platform, such as for Radar and Card Account Updater |\n\n### Transaction margin report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis report shows a transaction-level breakdown of volume, revenue, and costs for the entire month. It doesn’t include non-transactional fees. You can use it to understand which transactions are margin-positive, margin-neutral, or margin-negative.\n\nCharge detail fields include:\n\n*   **charge\\_id**: Unique identifier of the charge\n*   **connected\\_account\\_id**: Unique identifier of the connected account associated with the charge\n*   **activity\\_at**: Time in UTC at which we attribute the line item\n*   **payment\\_method\\_type**: Type of payment method used for the transaction, such as `card`, `ACH credit transfer`, or `link`\n*   **card\\_funding**: Card [funding type](https://docs.stripe.com/api/external_account_cards/object#account_card_object-funding); can be `credit`, `debit`, `prepaid`, or `unknown`\n*   **card\\_brand**: Card [brand](https://docs.stripe.com/api#card_object-brand); can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`\n*   **card\\_network**: Identifies which [network](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-network) processed the transaction; examples include `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, `unknown`\n*   **card\\_country**: Two-letter ISO code representing the country of the transaction card\n*   **connected\\_account\\_country**: Two-letter ISO code representing the country of the transaction account\n\nThe Transaction margin report includes the following data:\n\n| Type | Category | Description |\n| --- | --- | --- |\n| Volume | amount | Amount of the charge, excluding any tax |\n| amount\\_refunded | Amount of the charge that was refunded |\n| amount\\_disputed | Amount of the charge that was disputed by the customer |\n| Revenue | application\\_fee\\_amount | Amount requested by the platform to be deducted from the charge amount |\n| application\\_fee\\_amount\\_refunded | Application fee amount that was refunded |\n| Cost | stripe\\_processing\\_fees\\_subtotal\\_amount | Fees charged by Stripe for payments processing, such as fees for using payment methods like Affirm or AfterPay; for users with IC+ pricing, does not include Stripe card payments fees or network costs |\n| stripe\\_processing\\_fees\\_tax\\_amount | Tax on the fees charged by Stripe for payments processing |\n| stripe\\_dispute\\_fees\\_subtotal\\_amount | Dispute fees charged by Stripe |\n| stripe\\_dispute\\_fees\\_tax\\_amount | Tax on the dispute fees charged by Stripe |\n| stripe\\_refund\\_fees\\_subtotal\\_amount | Stripe processing fees that were refunded |\n| stripe\\_refund\\_fees\\_tax\\_amount | Tax on the Stripe processing fees that were refunded |\n| network\\_costs\\_subtotal\\_amount | Interchange (or discount, for Amex) fees and transaction-level scheme fees; a single charge typically incurs one interchange fee and one or more scheme fees |\n| network\\_costs\\_tax\\_amount | Tax on the transaction-level network costs charged to the platform |\n| stripe\\_per\\_auth\\_fee\\_subtotal\\_amount | Per-authorization fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_per\\_auth\\_fee\\_tax\\_amount | Tax on the per-authorization fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_volume\\_fee\\_subtotal\\_amount | Volume fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_volume\\_fee\\_tax\\_amount | Tax on the volume fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_other\\_cardpayments\\_fees\\_subtotal\\_amount | Other fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_other\\_cardpayments\\_fees\\_tax\\_amount | Tax on the other fees charged by Stripe for card processing with IC+ pricing |\n| stripe\\_radar\\_fees\\_subtotal\\_amount | Radar fees charged to the platform |\n| stripe\\_radar\\_fees\\_tax\\_amount | Tax on the Radar fees charged to the platform |\n| stripe\\_adaptive\\_acceptance\\_fee\\_subtotal\\_amount | Adaptive acceptance fees charged to the platform |\n| stripe\\_adaptive\\_acceptance\\_fee\\_tax\\_amount | Tax on the adaptive acceptance fees charged to the platform |\n| stripe\\_connect\\_loss\\_liability\\_fee\\_subtotal\\_amount | Loss liability fees charged by Stripe to manage risk on the transaction |\n| stripe\\_connect\\_loss\\_liability\\_fee\\_tax\\_amount | Tax on the loss liability fees charged by Stripe to manage risk on the transaction |\n| stripe\\_other\\_fees\\_subtotal\\_amount | All other fees charged on the transaction that aren’t explicitly included in another field |\n| stripe\\_other\\_fees\\_tax\\_amount | Tax charged on the other fees |\n| currency | Currency of the charge and fees |",
    "title": "Connect margin reports | Stripe Documentation",
    "description": "Compute your margins by analyzing your Connect volume, revenue and costs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/risk-management",
    "markdown": "# Risk management with Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Connect can help you manage risk and losses.\n\nAll business owners assume a certain amount of risk when accepting payments for goods and services. This guide defines the risks to consider as a Connect platform owner and the approaches you can take to mitigate those risks.\n\n## Components of payments risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny approach to risk management involves many potential sources of payments risk, which can be split into two general categories:\n\n*   **Transaction risk**: The risk that a customer might charge back a transaction, such as [disputes](https://docs.stripe.com/disputes) or fraud identified from card testing. With [direct charges](https://docs.stripe.com/connect/direct-charges), transaction risk primarily affects connected accounts; with [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), transaction risk primarily affects platforms.\n*   **Merchant risk**: The risk that a connected account is unable or unwilling to cover the costs of chargebacks on its transactions, leading to unrecoverable negative balances. Merchant risk primarily affects platforms.\n\nThere are two main types of merchant risk: credit risk and fraud risk. Both can result in chargebacks and unrecoverable negative balances.\n\n| Type | Description | Examples |\n| --- | --- | --- |\n| Credit risk | The risk that connected accounts are unable to fulfill their obligations to their customers, such as failing to deliver orders due to unforeseen supply issues. If a connected account accumulates more refunds and chargebacks than it can financially cover, it can result in default. | During the COVID pandemic, some hotels and short-term accommodation providers represented by connected accounts went out of business. As a result, customers who had pre-paid for future stays submitted chargebacks, which were covered by the platforms that processed those payments. |\n| Fraud risk | The risk that dishonest owners or employees of connected accounts intentionally don’t fulfill their obligations to their customers, such as taking orders for unavailable goods and services. | *   **No intent to deliver**: A fraudulent online storefront charged customers for goods that they didn’t intend to deliver. The connected account then paid out the money to their external bank account. When the customers realized that their orders were never going to arrive, they submitted chargebacks, which were covered by the platform.<br>*   **Payment method cashing**: A fraudster stole a customer’s credit card number, opened a connected account, and made purchases through that account using the stolen payment method credentials. When the customer discovered the fraudulent charges, they submitted chargebacks, which were covered by the platform. |\n\n## Connect merchant risk options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach connected account’s Account object has a [controller.losses.payments](https://docs.stripe.com/api/accounts/object#account_object-controller-losses-payments) property that determines who’s [responsible for covering any negative payments balance](https://docs.stripe.com/connect/risk-management \"negative balance liability\") on that account.\n\n#### Note\n\nThe `controller.losses.payments` property applies only to the connected account’s payments balance. It doesn’t affect responsibility for covering negative Issuing or Treasury balances.\n\nYou can select whether you or Stripe is responsible for negative balance liabilities on your accounts. Because your choice of negative balance liability can significantly impact your platform and connected accounts, consider it carefully before onboarding any accounts. This table describes some important elements of the decision:\n\n|     | Stripe | Platform |\n| --- | --- | --- |\n| [API value](https://docs.stripe.com/api/accounts/object#account_object-controller-losses-payments) | `stripe` | `application` |\n| Losses | Stripe covers losses due to your connected accounts’ negative balances. | Your platform can incur losses due to your connected accounts’ negative balances. |\n| Operational responsibilities | Stripe’s risk teams fully manage all payments-related merchant risk. | The platform maintains an internal risk team capable of adequately managing all payments-related merchant risk. |\n| Connected account experience | Stripe directly contacts your connected accounts to prevent, mitigate, and resolve payments risk-related issues, and in some cases can take action against them. | Your platform has a greater degree of control over the payments risk-related experience of your connected accounts. |\n| Stripe fees | If you pay Stripe’s listed prices for other fees, we don’t charge additional fees for negative balance liability. | Stripe charges no additional fees. |\n\nWe recommend that new platforms have Stripe take responsibility for negative balances on connected accounts. Only consider taking responsibility as the platform if you’re highly confident in your ability to manage merchant risk.\n\n## Stripe solutions for risk management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a variety of solutions to help manage both transaction and merchant risk. These solutions fall into two categories:\n\n*   **Tools to manage risk**: Tools that Stripe provides to help platforms manage risks without Stripe being liable for any resulting losses.\n*   **Full service risk management**: Risk-management services that Stripe provides where Stripe covers the costs of any resulting losses.\n\nThis table describes the main solution that Stripe provides in each category for each type of risk:\n\n| Risk type | Tools to manage risk | Full service risk management |\n| --- | --- | --- |\n| Transaction risk | [Radar](https://docs.stripe.com/radar): Scans every payment to help detect and prevent fraud. | [Chargeback protection](https://stripe.com/radar/chargeback-protection): Protects your platform and connected accounts from disputes by covering both disputed amounts and any dispute fees. |\n| Merchant risk | **Merchant risk tooling**: Tools that help your risk teams prevent, detect, and mitigate risks posed by your connected accounts. | [Stripe Managed Risk](https://docs.stripe.com/connect/risk-management/managed-risk): A full-service solution that protects your platform by managing risk and covering any negative balances on your connected accounts. |\n\n## Know Your Customer (KYC) and compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to operational risk management solutions, Stripe provides KYC and risk-based screening to help onboard connected accounts and maintain compliance with evolving regulations. Stripe screens include the following:\n\n*   Identity verifications\n*   Risk-based KYC and AML checks for individuals and businesses\n*   Sanctions screening\n*   MATCH (Member Alert To Control High-risk businesses) list checks\n*   Secure credit card data tokenization for PCI compliance\n*   Money transmitter licenses (MTL) in the US and e-money (EMI) licenses in the EU\n*   [Prohibited business checks](https://stripe.com/legal/restricted-businesses)",
    "title": "Risk management with Connect | Stripe Documentation",
    "description": "Learn how Connect can help you manage risk and losses.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/hosted-onboarding",
    "markdown": "# Stripe-hosted onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Onboard connected accounts by redirecting them to a Stripe-hosted onboarding flow.\n\nStripe-hosted onboarding handles the collection of business and identity verification information from connected accounts. It’s a web form hosted by Stripe that adjusts dynamically based on the capabilities, country, and business type of each connected account. Stripe-hosted onboarding is the recommended solution for platform’s looking for Stripe to take care of onboarding with little effort from the platform.\n\n[](#customize-onboarding-form)\n\nGo to the [Connect settings page](https://dashboard.stripe.com/account/applications/settings) in the Dashboard to customize the visual appearance of the form with your brand’s name, color, and icon. Stripe-hosted onboarding requires this information. Stripe also recommends [collecting bank account information](https://dashboard.stripe.com/settings/connect/payouts/onboarding) from your connected accounts as they’re onboarding.\n\n[](#create-account)\n\nCreate a [connected account](https://docs.stripe.com/api/accounts) with the default [controller](https://docs.stripe.com/api/accounts/create#create_account-controller) properties. See [design an integration](https://docs.stripe.com/connect/design-an-integration) to learn more about controller properties. Alternatively, you can create a connected account by specifying an account [type](https://docs.stripe.com/api/accounts/create#create_account-type).\n\n`curl -X POST https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf you know the country for your connected account, you can provide that information when you create the account. The country defaults to the same country as your platform if not provided.\n\nIf you need to request [capabilities](https://docs.stripe.com/connect/account-capabilities) for your connected account, you can provide that information when you create the account and Stripe’s onboarding UIs collect the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need. If you omit capabilities and your connected account has Express Dashboard access, Stripe-hosted onboarding uses the [Configuration settings](https://dashboard.stripe.com/settings/connect/onboarding-options/countries) to automatically request capabilities based on the account’s country.\n\nIf you have information about the account holder (like their name, address, or other details), you can proactively provide this when you [create](https://docs.stripe.com/api/accounts/create) or [update](https://docs.stripe.com/api/accounts/update) the account. Stripe-hosted onboarding asks the account holder to confirm the pre-filled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types). Providing more information through the API reduces the number of prompts and enhances the onboarding flow for your connected account.\n\nAdditionally, if you onboard an account without its own website and your platform provides the account with a URL, prefill the account’s [business\\_profile.url](https://docs.stripe.com/api/accounts/create#create_account-business_profile-url). If the account doesn’t have a URL, you can prefill its [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/create#create_account-business_profile-product_description) instead.\n\nWhen testing your integration, use [test data](https://docs.stripe.com/connect/testing) to simulate different outcomes including identity verification, business information verification, payout failures, and more.\n\n[](#info-to-collect)\n\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding only collects the `currently_due` requirements.\n\n|     | Upfront onboarding | Incremental onboarding |\n| --- | --- | --- |\n| **Advantages** | *   Entails a single request for information (normally)<br>*   Creates fewer problems in receiving payouts and maintaining processing ability<br>*   Exposes potential fraudsters or connected accounts who refuse to provide required information later | *   Onboards connected accounts quickly<br>*   Results in higher onboarding rates |\n| **Disadvantages** | *   Onboarding connected accounts can take longer<br>*   Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | *   Creates a higher likelihood of disrupting business of an ongoing connected account |\n\nTo determine whether to use upfront or incremental onboarding, review the [required information](https://docs.stripe.com/connect/required-verification-information) for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\n\n[](#create-account-link)\n\nCreate an [Account Link](https://docs.stripe.com/api/account_links) using the connected account ID and include a [refresh URL](#refresh-url) and a [return URL](#return-url). Stripe redirects the connected account to the refresh URL if the Account Link URL has already been visited, has expired, or is otherwise invalid. Stripe redirects connected accounts to the return URL when they have completed or left the onboarding flow. Additionally, based on the information you need to collect, pass either `currently_due` or `eventually_due` for `collection_options.fields`. This example passes `eventually_due` to use upfront onboarding. Set to `currently_due` for incremental onboarding.\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/refresh](https://example.com/refresh)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding \\  -d \"collection_options[fields]\"=eventually_due`\n\n### Redirect your connected account to the Account Link URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRedirect the connected account to the Account Link URL to send them to the onboarding flow. Each Account Link URL can only be used once because it grants access to the account holder’s personal information. Authenticate the account in your application before redirecting them to this URL.\n\n[\n\n## Handle new requirements becoming due![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-new-requirements-becoming-due)\n\nSet up your integration to [listen for changes](https://docs.stripe.com/connect/handling-api-verification#verification-process) to account requirements. You can test handling new requirements (and how they might disable charges and payouts) with the [test mode trigger cards](https://docs.stripe.com/connect/testing#trigger-cards). Stripe notifies you when [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts.\n\nYou can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Based on the verification needs of your application, send the connected account back into onboarding as necessary to satisfy `currently_due` or `eventually_due` requirements. You can use this as a signal of when to send your connected account back into the flow.\n\nYou don’t need to worry about what the requirements are—sending the connected account back into onboarding collects the right information. For example, if your connected account mistypes their information and they can’t be verified, they could be asked to provide an identity document (for example, a Driver’s License in the United States). Sending this user into onboarding prompts them to upload such a document to make sure they’re verified.\n\n### Handle verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\nLet your accounts remediate their verification requirements by directing them to the Stripe-hosted onboarding form.\n\n## Handle the connected account returning to your platform![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Account Link requires a `refresh_url` and `return_url` to handle all cases in which the connected account is redirected back to your platform. It’s important to implement these correctly to provide the best onboarding flow for your connected accounts.\n\n#### Note\n\nYou can use HTTP for your `refresh_url` and `return_url` while you’re in test mode (for example, to test locally), but for live mode only HTTPS is accepted. Be sure you’ve swapped any testing URLs for HTTPS URLs before going live.\n\n### Refresh URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour connected account is redirected to the `refresh_url` when:\n\n*   The link is expired (a few minutes went by since the link was created).\n*   The link was already visited (the connected account refreshed the page or clicked the **back** or **forward** button).\n*   The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which causes them to become expired.\n\nThe `refresh_url` should call a method on your server to create a new [Account Link](https://docs.stripe.com/api/account_links) with the same parameters and redirect the connected account to the new Account Link URL.\n\n### Return URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe redirects the connected account back to this URL when they complete the onboarding flow or click **Save for later** at any point in the flow. It **does not** mean that all information has been collected, or that there are no outstanding requirements on the account. It only means the flow was entered and exited properly.\n\nNo state is passed with this URL. After a connected account is redirected to the `return_url`, determine if the account has completed onboarding. [Retrieve](https://docs.stripe.com/api/accounts/retrieve) the account and check the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) attribute for outstanding requirements. Or, listen to the `account.updated` event sent to your webhook endpoint and cache the state of the account in your application. If the account hasn’t completed onboarding, provide prompts in your application to allow them to continue onboarding later.\n\n## Handle connected account-initiated updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe-hosted onboarding also supports connected account-initiated updates to the information they’ve already provided. When you create an Account Link, you can set the `type` to either `account_onboarding` or `account_update`.\n\n### Account onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccount Links of this type provide a form for inputting outstanding requirements. Use it when you’re onboarding a new connected account, or when an existing user has new requirements (such as when a connected account had already provided enough information, but you requested a new capability that needs additional info). Send them to this type of Account Link to just collect the new information you need.\n\n### Account update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccount Links of this type are enabled for accounts where your platform is responsible for requirement collection. `account_update` links display the attributes that are already populated on the account object and allows your connected account to edit previously provided information (for example, they need to update their address). Provide an option in your application (for example, “edit my profile” or “update my verification information”) for connected accounts to make updates themselves.\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe-hosted onboarding supports:\n\n*   The last 20 major versions of Chrome and Firefox\n*   The last two major versions of Safari and Edge\n*   The last two major versions of mobile Safari on iOS\n\nStripe-hosted onboarding isn’t supported when embedded through webviews. It’s only supported in standalone browsers.",
    "title": "Stripe-hosted onboarding | Stripe Documentation",
    "description": "Onboard connected accounts by redirecting them to a Stripe-hosted onboarding flow.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-pricing-tools",
    "markdown": "# Platform pricing tools | Stripe DocumentationThe Stripe Docs logo\n\n## Platform pricing toolsBeta\n\n## Design personalized pricing strategies with our no-code UI tool designed for platforms.\n\nPlatform pricing tools enable you to store pricing logic within Stripe for monetization, reducing the effort needed to successfully integrate. As a beta feature, your platform needs to have permissions to access the platform pricing tools.\n\nPlatform pricing tools allow you to create pricing schemes that apply different application fees based on the properties of a transaction, without having to pass an application fee amount through the API. These pricing schemes apply to activity on your connected accounts where your platform is responsible for the Stripe fees.\n\n## Request an invite![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Create a pricing scheme![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA pricing scheme is a list of conditional fees that Stripe evaluates from top to bottom, with a default fee applied to any transactions that don’t match a defined condition exactly. A conditional fee is made up of a fee and a set of conditions. When a transaction occurs, Stripe applies the first matching conditional fee (from top to bottom). If no conditional fees match the transaction, Stripe uses the default fee.\n\n1.  Go to the [Connect settings](https://dashboard.stripe.com/settings/connect) page in your Stripe Dashboard.\n2.  Click [Platform pricing](https://dashboard.stripe.com/settings/connect/platform_pricing) to go to your Platform pricing page.\n3.  Click **Add rules** to open the **Set a default payment pricing scheme** dialog.\n4.  Click **Add pricing rule** to create a new conditional fee rule. Use the dropdown menus to define the rule. Stripe calculates the fee in the specified currency, and then converts it to the settlement currency of the payment, if needed. You can add multiple pricing rules for the same pricing scheme, and they will be evaluated in the order that you select.\n    *   **Condition**: Use the dropdown menus to define a condition that the rule applies to. The options available for the right input depend on the selection you make on the left dropdown, For more information about conditions on specific transactions, see [Products](#products).\n    *   **Fee type**: Select **Fixed**, **Variable**, or **Blended**.\n        *   **Fixed**: Charge a specific amount. For example, charge 1.10 USD for every payment.\n        *   **Variable**: Charge a percentage of the total amount of the payment. For example, charge .45% of the total payment amount.\n            *   **Minimum (optional)**: Specify a lower bound for the fee amount. For example, charge at least 0.50 USD for every payment.\n            *   **Maximum (optional)**: Specify an upper bound for the fee amount. For example, cap every fee at 2.00 USD.\n        *   **Blended**: Charge a specific amount on top of a percentage of the total payment. For example, charge 1.10 USD for every transaction in addition to .45% of the total payment amount.\n            *   **Maximum (optional)**: Specify an upper bound for the fee amount. For example, cap every fee at 2.00 USD.\n5.  Under **Set fallback rule**, set a variable amount, fixed amount, or both. Use the Fixed dropdown to select the appropriate currency for the fixed amount. Stripe applies the default fee rule if any of the conditional fees you set aren’t matched by a particular transaction. The default fee must be a non-zero amount. You can’t have a zero percentage variable amount and a zero fixed amount.\n6.  (Optional) Click the **Add modifier** if you want to take the calculated application fee and either mark it up or discount it by a certain percentage.\n7.  Click **Save**. Alternatively, click **X** at the top to close the dialog without saving the conditions you created.\n8.  If you’re passing in an explicit `application_fee` or `transfer_data[amount]` parameter on a payment, they take precedence over the no-code pricing schemes. To apply the configured pricing, stop passing in these parameters.\n\nWhen you save the pricing scheme, Stripe automatically copies the pricing scheme to all of your connected accounts. The time it takes to update all your accounts depends on the number of connected accounts on your platform. Stripe displays a notice with the progress update in the [Connect settings](https://dashboard.stripe.com/test/settings/connect/setup) page.\n\n## Override a specific account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you set up a pricing scheme, you can override the rules for connected accounts that don’t have access to the full Stripe Dashboard (including Express and Custom accounts).\n\n1.  Select the account from the [Connected accounts page](https://dashboard.stripe.com/connect/accounts/overview) in your Dashboard.\n2.  On the connected account details page, click **Customize pricing** in the **Account pricing** section for **COLLECT APPLICATION FEES ON PAYMENTS** to open the **Customize pricing** dialog. If an overridden pricing scheme already exists, click **Edit** to open the dialog and make changes.\n    \n    ![Account pricing section with the Customize pricing button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/customize-pricing.6839b07bcee32ec7ad40a4dd9b3c6ca0.png)\n    \n3.  If you’re creating a new override, Stripe provides the option to start a blank pricing scheme **(Create a new scheme)** or to copy the pricing scheme set at the platform level as a starting point **(Copy from your platform’s pricing scheme)**. If you want to make small adjustments to a complex pricing scheme of your platform, click the **Copy from your platform’s pricing scheme** button. Otherwise, click **Create new pricing** to build a new pricing scheme from scratch.\n    \n    ![Customize account pricing dialog with Cancel, Create new pricing, and Copy pricing buttons.](https://b.stripecdn.com/docs-statics-srv/assets/custom-dialog.1dbb42ae35cdac263dff5a412e81a43c.png)\n    \n4.  Set the desired conditional and default fees as described in the preceding [Create a pricing scheme](#create-a-pricing-scheme) section.\n    \n    ![Customize account pricing rule editor.](https://b.stripecdn.com/docs-statics-srv/assets/customize-pricing-dialog.abf5ceefac307b3299f2c860782a8309.png)\n    \n5.  Click **Save** to save the override. Alternatively, click **X** at the top to close the dialog without saving. You’ll be prompted to **Confirm** the changes.\n\nSubsequent edits to the platform pricing scheme don’t update the pricing scheme of overridden connected accounts.\n\n## Revert overridden pricing schemes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can revert overridden pricing schemes on the account details page. Click **Revert to platform pricing** in the **Account pricing** section of a connected account details page to use the platform’s pricing scheme for the connected account.\n\n![Account pricing section with Revert to platform pricing button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/revert.151b51aa9959624829112e773e26faa4.png)\n\nRevert to platform pricing\n\n## Products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pricing scheme application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe applies pricing schemes to a payment when all of the following are true:\n\n*   The pricing scheme is enabled.\n*   Your platform is responsible for the Stripe fees on the payment.\n*   The account is in a country that your platform is eligible to take application fees for.\n*   The `application_fee` or `transfer_data[amount]` parameters aren’t present on the payment. An explicit `application_fee` or `transfer_data[amount]` always takes precedence over managed application fees.\n*   The payment did not use multi-capture\n*   The amount used to calculate a fee is the captured amount of the payment. If the payment is a card charge authorized for 10 USD, and only 5 USD is captured, 5 USD is the amount used to compute the fee.\n\n### Conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | Applies to | Description |\n| --- | --- | --- |\n| Payment method | All payments | The payment method used, for example `card`, `us_bank_account`, or `boleto` |\n| Presentment currency | All payments | The currency that the customer paid in |\n| Settlement merchant country | All payments | The country of the payment settlement merchant |\n| Card brand | Card payments | The type of card used, for example Visa or Mastercard |\n| Card present | Card payments | Whether or not the payment is in-person |\n| Card country | Card payments | The country of the card that the customer paid with |\n| Card product code | Card payments | The [product code](https://docs.stripe.com/connect/platform-pricing-tools/card-product-codes) of the card that the customer paid with |\n| Card type | Card payments | Funding source of the card, such as a credit card or debit card |\n| Card product category | Card payments | Card [class classification](https://support.stripe.com/questions/what-s-the-difference-between-standard-and-premium-cards), such as a Standard or Premium card |\n| Klarna payment category | Klarna payments | The [Klarna payment category](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-klarna-payment_method_category) used on a Klarna payment |\n\n### Fee modifier![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA fee modifier can either be a discount or markup. A markup applies a percent increase on the fee amount, whereas a discount applies a percent decrease. These will be calculated on the fee amount determined by the conditional and fallback rules.\n\nModifiers will compound based on the order they were added. For example, a 5% discount followed by a 10% markup will adjust a $1.00 fee to a $1.05 fee ($1.00 \\* 0.95 \\* 1.1 = $1.05).\n\n### Interaction with subscriptions and invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe applies managed application fees, configured in pricing tools, on [invoice](https://docs.stripe.com/invoicing) and [subscription](https://docs.stripe.com/billing) payments.\n\nIf you provide an [application fee amount](https://docs.stripe.com/api/invoices/create#create_invoice-application_fee_amount) when creating an invoice, that fee takes precedence and Stripe doesn’t apply the configured managed application fee.\n\nIf you provide an [application fee percent](https://docs.stripe.com/api/subscriptions/object#subscription_object-application_fee_percent) on a subscription, that fee takes precedence and Stripe doesn’t apply the configured managed application fee.\n\nDifferent roles have different levels of access to pricing schemes.\n\nAlthough some roles don’t have access to the platform’s default pricing, they might be able to deduce it based on the version copied to the connected accounts.\n\n| Role | Permissions |\n| --- | --- |\n| Administrator | Read/Write |\n| Developer | None |\n| IAM Admin | None |\n| Connect Onboarding Analyst | None |\n| Transfer Analyst | None |\n| Analyst | None |\n| Dispute Analyst | None |\n| Refund Analyst | None |\n| Support Specialist | None |\n| Support Only | None |\n| Tax Analyst | None |\n| View Only | None |\n| Topups Only | None |",
    "title": "Platform pricing tools | Stripe Documentation",
    "description": "Design personalized pricing strategies with our no-code UI tool designed for platforms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/statement-descriptors",
    "markdown": "# Set statement descriptors with Connect\n\n## Learn how statement descriptors work for charges with Connect.\n\nStatement descriptors explain charges or payments on bank statements and include information that banks and card networks require to help customers understand their statements. Familiarize yourself with the [requirements for statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors).\n\n## Set the static component for a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStatement descriptors contain a static component and, optionally, a dynamic part. The static component refers to either:\n\n*   The entire statement descriptor is static ([settings.payments.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payments-statement_descriptor)).\n*   The first half of the statement descriptor is static ([settings.card\\_payments.statement\\_descriptor\\_prefix](https://docs.stripe.com/api/accounts/object#account_object-settings-card_payments-statement_descriptor_prefix)) and the second half is dynamically set from the payment.\n\nYour platform and connected accounts with the `card_payments` capability must have a statement descriptor and, optionally, a statement descriptor prefix. Both values must be at least 5 characters in length. For a given payment, the statement descriptor of the platform or the connected account applies depending on [the charge type](https://docs.stripe.com/connect/charges).\n\nThe statement descriptor is set in one of the following ways:\n\n*   With a [create or update account](https://docs.stripe.com/api/accounts) API call\n*   During Stripe-hosted or embedded onboarding\n*   Through the full Stripe Dashboard or Express Dashboard\n\nConnected accounts with access to a Stripe-hosted dashboard can update their own statement descriptor settings.\n\nYou can prefill an account’s statement descriptor and prefix when you call the [create account](https://docs.stripe.com/api/accounts/create) endpoint. During Stripe-hosted or embedded onboarding, If `settings.payments.statement_descriptor` or `settings.card_payments.statement_descriptor_prefix` isn’t set, Stripe sets them based on information provided about the account during onboarding. If sufficient information isn’t available, Stripe prompts connected accounts to set their own statement descriptors during onboarding.\n\nAfter onboarding an account that doesn’t have access to the full Stripe Dashboard, you can update its `settings.payments.statement_descriptor` and `settings.card_payments.statement_descriptor_prefix` by calling the [update account](https://docs.stripe.com/api/accounts/update) endpoint.\n\nFor accounts where the platform handles onboarding, you must set their statement descriptor.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\  -d business_type=company \\  -d \"business_profile[name]\"=\"Runners Club\" \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"settings[payments][statement_descriptor]\"=\"RUNNERS CLUB\"`\n\nAs of [API version 2023-10-16](https://docs.stripe.com/upgrades#2023-10-16), there is new logic around updating statement descriptors.\n\n*   If you update an account’s `business_profile.name`, `business_profile.url`, or the name of the company or individual and the existing statement descriptor is based on lower precedence data, Stripe automatically resets the statement descriptor to match the higher precedence value. For example, if the statement descriptor is automatically set based on the URL, then you set or update `business_profile.name`, Stripe resets the statement descriptor to match the business profile name. If the statement descriptor is automatically set based on `business_profile.name`, and you set or update the name of the company or individual, the statement descriptor doesn’t reset because `business_profile.name` has higher precedence. The precedence order is `business_profile.name`, `business_profile.url`, then the name of the company or individual.\n*   Any update to an account’s full statement descriptor causes Stripe to automatically set the statement descriptor prefix to a shortened version of the updated statement descriptor, even if the previous prefix is manually set.\n\n## Statement descriptor usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe full statement descriptor is provided to the bank or card network processing the payment. Only the first 22 characters of the full statement descriptor are sent for card payments.\n\nThe customer’s statement uses the connected account’s static component for the following charge types:\n\n*   Direct charges\n*   Destination charges with `on_behalf_of`\n*   Separate charges and transfers with `on_behalf_of`\n\n#### Caution\n\nThe platform provides the static component for `/v1/charges` requests with `on_behalf_of` for API versions before `2019-02-19`.\n\nUsing the static component on connected accounts requires the [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments) capability.\n\nThe customer’s statement uses the platform account’s static component for the following charge types:\n\n*   Destination charges without `on_behalf_of`\n*   Separate charges and transfers without `on_behalf_of`\n\nAny additional information that’s displayed on a customer’s statement is also provided by the account that provides the static component (for example, support address or support phone number). If the connected account hasn’t provided this information, `on_behalf_of` charges use the platform account’s information.\n\nIf you use a dynamic suffix on a charge that uses the connected account’s static descriptor, you can set a prefix to ensure the complete statement descriptor appears as intended.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\  -d business_type=company \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"settings[card_payments][statement_descriptor_prefix]\"=RUNCLUB`\n\nThe static prefix must contain between 2 and 10 characters, inclusive. Card networks receive only the first 22 characters (including the `*` symbol and the space that concatenates the static prefix and dynamic suffix) of the complete statement descriptor.\n\nSet the `statement_descriptor` and `statement_descriptor_prefix` for flexibility in setting statement descriptors on charges.\n\nIf the statement descriptor is set on card charges and no prefix is set, Stripe truncates the account statement descriptor as needed to set the prefix value.\n\n## Set a dynamic suffix for connected account charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDynamic suffixes are supported only for card charges by using the `statement_descriptor_suffix` parameter. You can read more about [dynamic suffixes](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) or see the concatenated statement descriptors (prefix\\* suffix) in the [Dashboard](https://dashboard.stripe.com/settings/public).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"Custom suffix\"`\n\n## Set Japanese statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend setting the static components of kanji and kana statement descriptors for Japanese connected accounts. You can set all descriptors and their corresponding prefixes when creating a Japanese connected account:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=JP \\  -d business_type=company \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"settings[card_payments][statement_descriptor_prefix]\"=\"example prefix\" \\  -d \"settings[card_payments][statement_descriptor_prefix_kanji]\"=\"漢字プリフィックス\" \\  -d \"settings[card_payments][statement_descriptor_prefix_kana]\"=\"カナプリフィックス\" \\  -d \"settings[payments][statement_descriptor]\"=\"example descriptor\" \\  -d \"settings[payments][statement_descriptor_kanji]\"=\"漢字明細\" \\  -d \"settings[payments][statement_descriptor_kana]\"=\"カナメイサイ\"`\n\nYou can set dynamic kanji and kana suffixes when creating card charges with `payment_method_options[card][statement_descriptor_suffix_kanji]` and `payment_method_options[card][statement_descriptor_suffix_kana]`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=jpy \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"example descriptor\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kanji]\"=\"漢字サフィックス\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kana]\"=\"カナサフィックス\"`\n\nSee [Japanese statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors) for more details.",
    "title": "Set statement descriptors with Connect | Stripe Documentation",
    "description": "Learn how statement descriptors work for charges with Connect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/api-onboarding",
    "markdown": "# API onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Build your own onboarding flow using Stripe's APIs.\n\nWith API onboarding, you use the [Accounts API](https://docs.stripe.com/api/accounts) to build an onboarding flow, reporting functionality, and communication channels for your users. Stripe can be completely invisible to the account holder.\n\nYour platform is responsible for all interactions with your users and for collecting all the information needed to verify the account. Verification requirements are updated as laws and regulations change around the world.\n\n[](#establish-requirements)\n\nThe following factors affect the [onboarding requirements](https://docs.stripe.com/connect/required-verification-information) for your connected accounts:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nUse the interactive form to see how changing these factors affects the requirements.\n\n### Requirements form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#create-forms-to-collect-information)\n\nAs a best practice, organize the required parameters into logical groupings or forms in your onboarding flow. You might wish to encode a mapping between the Stripe parameters and the logical groupings. Suggested logical groupings for parameters are shown in the first column of the example requirements table.\n\nAfter you encode the required parameters into your application, generate UIs for the parameters corresponding to these requirements. For each parameter, design a UI form that includes:\n\n*   Parameter label, localized to each supported country and language\n*   Parameter description, localized to each supported country and language\n*   Parameter input fields with data validation logic and document uploading where required\n\nIt’s important to architect your application logic to account for the possibility of additional parameters in the future. For example, Stripe might introduce new parameters, new verifications, or new thresholds that you must incorporate into your onboarding flows over time.\n\nChanging any of the factors that determine your connected accounts requirements means you must also adjust your collection forms. [Country](https://docs.stripe.com/api/accounts/object#account_object-country) and [service agreement type](https://docs.stripe.com/api/accounts/object#account_object-tos_acceptance-service_agreement) are immutable, while [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) and [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) are mutable.\n\n*   To change an immutable field such as country or service agreement type, create a new connected account with the new values. Doing so produces new requirements for you to incorporate in your collection flows.\n*   To change a mutable field such as capabilities or business type, update the connected account. Doing so produces new requirements for you to incorporate in your collection flows.\n\n### Include Stripe Terms of Service Agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected accounts must accept Stripe terms of service before they can be activated. You can [wrap Stripe terms of service in your own terms of service](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service).\n\n[](#create-account)\n\nCreate a [connected account](https://docs.stripe.com/api/accounts) where your platform is liable for negative balances, Stripe collects fees from your platform account, and your connected accounts don’t have access to a Stripe-hosted dashboard. Request any capabilities that your connected accounts need. Include business type and any other information matching your [requirements](#establish-requirements) if you have it available to prefill.\n\nAlternatively, you can create a connected account with `type` set to `custom` and desired capabilities.\n\nIf you don’t specify the country and service type agreement, they’re assigned the following default values:\n\n*   The `country` defaults to the same country as your platform.\n*   The service type agreement (`tos_acceptance.service_agreement`) defaults to `full`.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d business_type=individual \\  -d country=US`\n\n[](#determine-information-to-collect)\n\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding only collects the `currently_due` requirements.\n\n|     | Upfront onboarding | Incremental onboarding |\n| --- | --- | --- |\n| **Advantages** | *   Entails a single request for information (normally)<br>*   Creates fewer problems in receiving payouts and maintaining processing ability<br>*   Exposes potential fraudsters or connected accounts who refuse to provide required information later | *   Onboards connected accounts quickly<br>*   Results in higher onboarding rates |\n| **Disadvantages** | *   Onboarding connected accounts can take longer<br>*   Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | *   Creates a higher likelihood of disrupting business of an ongoing connected account |\n\nTo determine whether to use upfront or incremental onboarding, review the [required information](https://docs.stripe.com/connect/required-verification-information) for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\n\nTo implement your onboarding strategy, inspect the requirements hash of the connected account you created. The requirements hash provides a complete list of parameters you must collect to activate the connected account.\n\n*   For incremental onboarding, inspect the `currently_due` field in the requirements hash and build an onboarding flow that only collects for the listed parameters.\n*   For upfront onboarding, inspect the `eventually_due` field in the requirements hash and build an onboarding flow that collects for all the listed parameters.\n\n`{   ...   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"disabled_reason\": \"requirements.past_due\",     \"errors\": [],     \"eventually_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n[](#update-the-connected-account)\n\n[Update](https://docs.stripe.com/api/accounts/update) the connected account object with new information as your user progresses through each step of the onboarding flow to allow Stripe to validate the information as soon as it’s added. After Stripe confirms acceptance of our terms of service, any changes to the connected account triggers reverification. For example, if you change the connected account’s name and ID number, Stripe reruns verifications.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\   --data-urlencode \"business_profile[url]\"=\"[https://furever.dev](https://furever.dev/)\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`\n\nWhen updating a connected account, you must handle any [verification errors](#handle-verification-errors) or [HTTP error codes](https://docs.stripe.com/error-handling).\n\n[\n\n## Handle verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-verification-errors)\n\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have [a pending status](https://docs.stripe.com/api/accounts/object#account_object-capabilities).\n\n### Review status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve the status of your connected account’s capabilities by:\n\n*   Inspecting the Account object’s [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) hash for the relevant capability.\n*   Requesting capabilities directly from the [Capabilities API](https://docs.stripe.com/api/capabilities/retrieve) and inspecting the status of the relevant capability.\n*   Listening for `account.updated` [events](https://docs.stripe.com/api/events/types#event_types-account.updated) in your [webhook](https://docs.stripe.com/connect/webhooks) endpoint and inspecting the `capabilities` hash for the relevant capability.\n\nAfter verifications are complete, the capability becomes `active` and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of `active`. Listen for `account.updated` events to detect changes to capability states.\n\nConfirm that your Connect integration is compliant and operational by checking that the account’s `charges_enabled` and `payouts_enabled` are both true. You can use the API or listen for `account.updated` events. For details on other relevant fields, check the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n\n*   [charges\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-charges_enabled) confirms that your full charge path including the charge and transfer works correctly and evaluates if either `card_payments` or `transfers` capabilities are active.\n*   [payouts\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-payouts_enabled) evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You [must eventually enable payouts](https://docs.stripe.com/connect/manage-payout-schedule) to pay your connected accounts.\n\nYou can use the following logic as a starting point for defining a summary status to display to your connected account.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def account_state(account)   reqs = account.requirements    if reqs.disabled_reason && reqs.disabled_reason.include?(\"rejected\")     \"rejected\"   elsif account.payouts_enabled && account.charges_enabled     if reqs.pending_verification       \"pending enablement\"     elsif !reqs.disabled_reason && !reqs.currently_due       if !reqs.eventually_due         \"complete\"       else         \"enabled\"       end     else       \"restricted\"     end   elsif !account.payouts_enabled && account.charges_enabled     \"restricted (payouts disabled)\"   elsif !account.charges_enabled && account.payouts_enabled     \"restricted (charges disabled)\"   elsif reqs.past_due     \"restricted (past due)\"   elsif reqs.pending_verification     \"pending (disabled)\"   else     \"restricted\"   end end  accounts = Stripe::Account.list(limit: 10)  accounts.each do |account|     puts \"#{account.id} has state: #{account_state(account)}\" end`\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\n[Create a form](#create-forms-to-collect-information) with clear instructions that the account can use to correct the information. Notify the account, then [submit the corrected information](#update-the-connected-account) using the Accounts API.\n\nIf you plan to create custom flows to handle all your verification errors:\n\n*   Review the details regarding all possible [verification errors and how to handle them](https://docs.stripe.com/connect/handling-api-verification).\n*   [Test verification states](https://docs.stripe.com/connect/testing-verification).",
    "title": "API onboarding | Stripe Documentation",
    "description": "Build your own onboarding flow using Stripe's APIs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate",
    "markdown": "# Stripe Climate | Stripe DocumentationThe Stripe Docs logo\n\nDirect a fraction of your revenue to help emerging permanent carbon removal technologies scale.\n\nThis is the right choice for businesses that (i) care primarily about advancing the carbon removal field and (ii) don’t need to buy a specific number of tons to meet a climate target.",
    "title": "Stripe Climate | Stripe Documentation",
    "description": "Remove carbon as you grow your business.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/direct-charges",
    "markdown": "# Create direct charges | Stripe DocumentationThe Stripe Docs logo\n\n## Create charges directly on the connected account and collect fees.\n\nCreate _direct charges_ when customers transact directly with a connected account, often unaware of your platform’s existence. With direct charges:\n\n*   The payment appears as a charge on the connected account, not your platform’s account.\n*   The connected account’s balance increases with every charge.\n*   Your account balance increases with application fees from every charge.\n\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls what your customer sees in the payment form such as line items, the order amount, and currency. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn your server, create a Checkout Session and redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\"`\n\n*   `line_items` - This attribute represents items that your customer is purchasing and shows up in the Stripe-hosted checkout page.\n*   `payment_intent_data[application_fee_amount]` - This attribute specifies the amount your platform deducts from the transaction as an application fee. After the payment is processed on the connected account, the `application_fee_amount` is transferred to the platform. See [collect fees](#collect-fees) for more information.\n*   `success_url` - Stripe redirects the customer to the success URL after they complete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See [customize redirect behavior with a Stripe-hosted page](https://docs.stripe.com/payments/checkout/custom-success-page) for more information.\n*   `Stripe-Account` - This header indicates a direct charge for your connected account. The connected account’s [branding](#branding) is used in Checkout, which allows their customers to feel like they’re interacting directly with the connected account instead of your platform.\n\nCharges that you create directly on the connected account are reported only on that account. These charges aren’t shown in your platform’s Dashboard or exports. Direct charges are included in reports and Sigma for connected accounts that your platform controls. You can always retrieve this information using the Stripe API.\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-payment-events)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nStripe recommends handling all of the following events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") [status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from `processing` to `succeeded` or a failure status.\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## Collect fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour platform can take an application fee with the following limitations:\n\n*   The value of `application_fee_amount` must be positive and less than the amount of the charge. The application fee collected is capped at the amount of the charge.\n*   There are no additional Stripe fees on the application fee itself.\n*   In line with Brazilian regulatory and compliance requirements, platforms based outside of Brazil, with Brazilian connected accounts cannot collect application fees through Stripe.\n*   The currency of `application_fee_amount` depends upon a few [multiple currency](https://docs.stripe.com/connect/currencies) factors.\n\nThe resulting charge’s [balance transaction](https://docs.stripe.com/api#balance_transaction_retrieve) includes a detailed fee breakdown of both the Stripe and application fees. To provide a better reporting experience, an [Application Fee](https://docs.stripe.com/api/application_fees/object) is created after the fee is collected. Use the `amount` property on the application fee object for reporting. You can then access these objects with the [Application Fees](https://docs.stripe.com/api/application_fees/list) endpoint.\n\nEarned application fees are added to your available account balance on the same schedule as funds from regular Stripe charges. Application fees are viewable in the [Collected fees](https://dashboard.stripe.com/connect/application_fees) section of the Dashboard.\n\n#### Caution\n\nApplication fees for direct charges are created asynchronously by default. If you expand the `application_fee` object in a charge creation request, the application fee is created synchronously as part of that request. Only expand the `application_fee` object if you absolutely have to, because it increases the latency of the request.\n\nTo access the application fee objects for application fees that are created asynchronously, listen for the [application\\_fee.created](https://docs.stripe.com/api/events/types#event_types-application_fee.created) webhook event.\n\n### Flow of funds with fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you specify an application fee on a charge, the fee amount is transferred to your platform’s Stripe account. When processing a charge directly on the connected account, the charge amount—less the Stripe fees and application fee—is deposited into the connected account.\n\nFor example, if you make a charge of 10 USD with a 1.23 USD application fee (like in the previous example), 1.23 USD is transferred to your platform account. 8.18 USD (10 USD - 0.59 USD - 1.23 USD) is netted in the connected account (assuming standard US Stripe fees).\n\n![Flow of funds for a charge with an application fee](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges_flow.ac943c1635c3c66d1ee5e0020c453744.png)\n\nIf you process payments in multiple currencies, read [how currencies are handled](https://docs.stripe.com/connect/currencies) in Connect.\n\n## Customize branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour platform and connected accounts can use the [Branding settings](https://dashboard.stripe.com/account/branding) in the Dashboard to customize branding on the payments page. For direct charges, Checkout uses the brand settings of the connected account.\n\nYou can also use the API to [update](https://docs.stripe.com/api/accounts/update#update_account-settings-branding) branding settings:\n\n*   `icon` - Displayed next to the business name in the header of the Checkout page.\n*   `logo` - Used in place of the icon and business name in the header of the Checkout page.\n*   `primary_color` - Used as the background color on the Checkout page.\n*   `secondary_color` - Used as the button color on the Checkout page.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[branding][icon]\"=  {{FILE_ID}}   \\  -d \"settings[branding][logo]\"=  {{FILE_ID}}   \\   --data-urlencode \"settings[branding][primary_color]\"=\"#663399\" \\   --data-urlencode \"settings[branding][secondary_color]\"=\"#4BB543\"`\n\n## Issue refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nJust as platforms can create charges on connected accounts, they can also create refunds of charges on connected accounts. [Create a refund](https://docs.stripe.com/api#create_refund) using your platform’s secret key while [authenticated](https://docs.stripe.com/connect/authentication#stripe-account-header) as the connected account.\n\nApplication fees are not automatically refunded when issuing a refund. Your platform must explicitly refund the application fee or the connected account—the account on which the charge was created—loses that amount. You can refund an application fee by passing a `refund_application_fee` value of **true** in the refund request:\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d charge=  {{CHARGE_ID}}   \\  -d refund_application_fee=true`\n\nBy default, the entire charge is refunded, but you can create a partial refund by setting an `amount` value as a positive integer. If the refund results in the entire charge being refunded, the entire application fee is refunded. Otherwise, a proportional amount of the application fee is refunded. Alternatively, you can provide a `refund_application_fee` value of **false** and [refund the application fee](https://docs.stripe.com/api#create_fee_refund) separately.",
    "title": "Create direct charges | Stripe Documentation",
    "description": "Create charges directly on the connected account and collect fees.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders",
    "markdown": "# Climate Orders overview | Stripe DocumentationThe Stripe Docs logo\n\n## Pre-order carbon removal tons from Frontier's offtake portfolio\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can purchase carbon removal programmatically using the Climate API or manually using the [Dashboard](https://dashboard.stripe.com/climate/orders). All orders are for future delivery.\n\n## Learn More![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe source, conduct diligence, and sign long-term offtake contracts with the most promising suppliers so that you don’t have to. Carbon removal is verified by both [Frontier](https://frontierclimate.com/) and an independent third-party before it’s delivered to you.\n\nYou can purchase carbon removal through a portfolio or from individual suppliers. Learn more about the different products on the [carbon removal inventory](https://docs.stripe.com/climate/orders/carbon-removal-inventory) page.\n\nVisit [frontierclimate.com/disclosures](https://frontierclimate.com/disclosures) for important disclosures related to our carbon removal.",
    "title": "Climate Orders overview | Stripe Documentation",
    "description": "Pre-order carbon removal tons from Frontier's offtake portfolio",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/destination-charges",
    "markdown": "# Create destination charges | Stripe DocumentationThe Stripe Docs logo\n\n## Create charges on your platform account, collect fees, and immediately transfer the remaining funds to your connected accounts.\n\nCreate _destination charges_ when customers transact with your platform for products or services provided by your connected accounts and you immediately transfer funds to your connected accounts. With this charge type:\n\n*   You create a charge on your platform’s account.\n*   You determine whether some or all of those funds are transferred to the connected account.\n*   Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\nThis charge type is most optimal for marketplaces such as Airbnb, a home rental marketplace or Lyft, a ridesharing app.\n\nDestination charges are only supported if both your platform and the connected account are in the same country. For cross-region support, you must specify the [settlement merchant](#settlement-merchant) to the connected account using the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of) parameter on the Payment Intent or other valid [cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border) scenarios.\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls what your customer sees in the payment form such as line items, the order amount and currency, and acceptable payment methods. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn your server, create a Checkout Session and redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\  -d \"payment_intent_data[transfer_data][destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\"`\n\n*   `payment_intent_data[transfer_data][destination]` - This parameter indicates that this is a destination charge. A destination charge means the charge is processed on the platform and then the funds are immediately and automatically transferred to the connected account’s pending balance.\n*   `line_items` - This parameter represents the items the customer is purchasing. The items are displayed in the embedded payment form.\n*   `success_url` - Stripe redirects the customer to the success URL after they complete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See [customize redirect behavior with a Stripe-hosted page](https://docs.stripe.com/payments/checkout/custom-success-page) for more information.\n*   `payment_intent_data[application_fee_amount]` - This parameter specifies the amount your platform plans to take from the transaction. The full charge amount is immediately transferred from the platform to the connected account that’s specified by `transfer_data[destination]` after the charge is captured. The `application_fee_amount` is then transferred back to the platform, and the Stripe fee is deducted from the platform’s amount.\n\nWhen processing destination charges, Checkout uses the brand settings of your platform account. See [customize branding](#branding) for more information.\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-payment-events)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nStripe recommends handling all of the following events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") [status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from `processing` to `succeeded` or a failure status.\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## Collect fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can collect fees with either an [application\\_fee\\_amount](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-application_fee_amount) or [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-transfer_data-amount).\n\nWhen creating charges with an `application_fee_amount`, the full charge amount is immediately transferred from the platform to the `transfer_data[destination]` account after the charge is captured. The `application_fee_amount` (capped at the full amount of the charge) is then transferred back to the platform.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\  -d \"payment_intent_data[transfer_data][destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\"`\n\nAfter the application fee is collected, an [Application Fee](https://docs.stripe.com/api/application_fees/object) object is created. You can view a list of application fees in the [Dashboard](https://dashboard.stripe.com/connect/application_fees), with the [application fees](https://docs.stripe.com/api/application_fees/list), or in [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard). You can also use the `amount` property on the application fee object for itemized fee reporting.\n\nWhen using an `application_fee_amount`, know that:\n\n*   The `application_fee_amount` is capped at the total transaction amount.\n*   The `application_fee_amount` is always computed in the same currency as the transaction.\n*   The application fee settles in the same currency as the connected account’s settlement currency. For cross-border destination charges, this might [differ from your platform’s settlement currency](https://docs.stripe.com/connect/currencies#application-fees-for-destination-charges-and-converting-balances).\n*   Your platform pays the Stripe fee after the `application_fee_amount` is transferred to your account.\n*   No additional Stripe fees are applied to the amount.\n*   Your platform can use built-in application fee reporting to reconcile [fees collected](https://dashboard.stripe.com/connect/application_fees).\n*   In Stripe-hosted dashboards or components such as the [Payment details component](https://docs.stripe.com/connect/supported-embedded-components/payment-details), your connected account can view both the total amount and the application fee amount.\n\n### Flow of funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the above code, the full charge amount (10.00 USD) is added to the connected account’s pending balance. The `application_fee_amount` (1.23 USD) is subtracted from the charge amount and is transferred to your platform. Stripe fees (0.59 USD) are subtracted from your platform account’s balance. The application fee amount minus the Stripe fees (1.23 USD - 0.59 USD = 0.64 USD) remains in your platform account’s balance.\n\n![Flow of funds for destination charges](https://b.stripecdn.com/docs-statics-srv/assets/destination_charge_app_fee.c9ef81298155b38f986df02d0efa9167.png)\n\nThe `application_fee_amount` becomes available on the platform account’s normal transfer schedule, just like funds from regular Stripe charges.\n\n## Customize branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour platform uses the [branding settings](https://dashboard.stripe.com/account/branding) in the Dashboard to customize branding on the payments page. For destination charges, Checkout uses the branding settings of the platform account. For destination charges with `on_behalf_of`, Checkout uses the branding settings of the connected account.\n\nPlatforms can configure the branding settings of connected accounts using the [Update Account](https://docs.stripe.com/api/accounts/update#update_account-settings-branding) API:\n\n*   `icon` - Displayed next to the business name in the header of the Checkout page.\n*   `logo`\\- Used in place of the icon and business name in the header of the Checkout page.\n*   `primary_color` - Used as the background color on the Checkout page.\n*   `secondary_color` - Used as the button color on the Checkout page.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[branding][icon]\"=  {{FILE_ID}}   \\  -d \"settings[branding][logo]\"=  {{FILE_ID}}   \\   --data-urlencode \"settings[branding][primary_color]\"=\"#663399\" \\   --data-urlencode \"settings[branding][secondary_color]\"=\"#4BB543\"`\n\n## Specify the settlement merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe settlement merchant is dependent on the [capabilities](https://docs.stripe.com/connect/account-capabilities) set on an account and how a charge is created. The settlement merchant determines whose information is used to make the charge. This includes the statement descriptor (either the platform’s or the connected account’s) that’s displayed on the customer’s credit card or bank statement for that charge.\n\nSpecifying the settlement merchant allows you to be more explicit about who to create charges for. For example, some platforms prefer to be the settlement merchant because the end customer interacts directly with their platform (such as on-demand platforms). However, some platforms have connected accounts that interact directly with end customers instead (such as a storefront on an e-commerce platform). In these scenarios, it might make more sense for the connected account to be the settlement merchant.\n\nYou can set the `on_behalf_of` parameter to the ID of a connected account to make that account the settlement merchant for the payment. When using `on_behalf_of`:\n\n*   Charges settle in the connected account’s country and settlement currency.\n*   The fee structure for the connected account’s country is used.\n*   The connected account’s statement descriptor is displayed on the customer’s credit card statement.\n*   If the connected account is in a different country than the platform, the connected account’s address and phone number are displayed on the customer’s credit card statement.\n*   The number of days that a [pending balance](https://docs.stripe.com/connect/account-balances) is held before being paid out depends on the [delay\\_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days) setting on the connected account.\n\nIf `on_behalf_of` is omitted, the platform is the business of record for the payment.\n\n#### Caution\n\nThe `on_behalf_of` parameter is supported only for connected accounts with a payments capability such as [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments). Accounts under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient) can’t request `card_payments` or other payments capabilities.\n\n## Issue refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you are using the Payment Intents API, refunds should be issued against [the most recent charge that is created](https://docs.stripe.com/payments/payment-intents/verifying-status#identifying-charges).\n\nCharges created on the platform account can be refunded using the platform account’s secret key. When refunding a charge that has a `transfer_data[destination]`, by default the destination account keeps the funds that were transferred to it, leaving the platform account to cover the negative balance from the refund. To pull back the funds from the connected account to cover the refund, set the `reverse_transfer` parameter to `true` when creating the refund:\n\n`curl https://api.stripe.com/v1/refunds \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d charge=\"{CHARGE_ID}\" \\   -d reverse_transfer=true \\`\n\nBy default, the entire charge is refunded, but you can create a partial refund by setting an `amount` value as a positive integer.\n\nIf the refund results in the entire charge being refunded, the entire transfer is reversed. Otherwise, a proportional amount of the transfer is reversed.\n\n### Refund application fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen refunding a charge with an application fee, by default the platform account keeps the funds from the application fee. To push the application fee funds back to the connected account, set the [refund\\_application\\_fee](https://docs.stripe.com/api/refunds/create#create_refund-refund_application_fee) parameter to `true` when creating the refund:\n\n`curl https://api.stripe.com/v1/refunds \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d charge=\"{CHARGE_ID}\" \\   -d reverse_transfer=true \\   -d refund_application_fee=true \\`\n\nNote that if you refund the application fee for a destination charge, you must also reverse the transfer. If the refund results in the entire charge being refunded, the entire application fee is refunded as well. Otherwise, a proportional amount of the application fee is refunded.\n\nAlternatively, you can provide a `refund_application_fee` value of **false** and refund the application fee separately [through the API](https://docs.stripe.com/api#create_fee_refund).\n\n### Failed refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a refund fails, the amount of the failed refund returns to your platform account’s Stripe balance. Create a [Transfer](https://docs.stripe.com/connect/separate-charges-and-transfers#create-transfer) to move the funds to the connected account, as needed.",
    "title": "Create destination charges | Stripe Documentation",
    "description": "Create charges on your platform account, collect fees, and immediately transfer the remaining funds to your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/use-cases",
    "markdown": "# Financial Connections use cases | Stripe DocumentationThe Stripe Docs logo\n\n## View options for integrating Financial Connections and common use cases.\n\nFinancial Connections allows your users to link their financial accounts to collect ACH payments, facilitate Connect [payouts](https://docs.stripe.com/payouts \"payout\"), and build financial data products. It also enables your users to connect their accounts in fewer steps with [Link](https://docs.stripe.com/payments/link), allowing them to save and quickly reuse their bank account details across Stripe merchants. View the following integration paths based on your requirements, and some common use cases for Financial Connections data below.\n\nHow you integrate Financial Connections depends on your desired use cases.\n\nTo process ACH payments or facilitate Connect payouts, use a recommended payments integration in the table above, such as Setup Intents. This makes sure that the collected accounts are compatible with [ACH transfers](https://docs.stripe.com/payments/ach-debit).\n\nThe Financial Connections Sessions API provides more flexibility for use cases that won’t use the collected accounts for ACH payments or Connect payouts. It has configuration options that let your users link additional [account types](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-category) that aren’t compatible with ACH, and you can collect multiple accounts in a single session.\n\nRegardless of which API you choose to integrate with, you can request access to additional data on your users’ financial accounts. You can then use this data to optimize your integration or create more complex products. The following sections provide more context on the above use cases, including recommendations on which data to access.\n\n[](#ach-direct-debit)\n\nIn accordance with [Nacha regulations](https://support.stripe.com/questions/nacha-bank-account-validation-rule), you must verify a user’s account to accept an ACH Direct Debit payment or transfer. With Financial Connections, your customer authenticates their bank account and provides permission to share the details you need to charge their account, such as a tokenized account and routing number.\n\nCollecting bank account details from a customer with Financial Connections can help you:\n\n*   Improve payment reliability by verifying that a user’s bank account is open and able to accept ACH direct debits.\n*   Increase checkout conversion by eliminating the need for your customers to leave your website or application to locate their account and routing numbers.\n*   Save development time by eliminating the need for you to build bank account form validation when your customer enters account details.\n\nTo verify a bank account to accept an ACH Direct Debit payment with Financial Connections, use Stripe’s Payment Intent or Setup Intent APIs. Alternatively, you can use a hosted Stripe payments integration such as [Checkout](https://docs.stripe.com/payments/checkout) or the [Payment Element](https://docs.stripe.com/payments/payment-element).\n\nLearn how to [collect a bank account to accept an ACH Direct Debit payment](https://docs.stripe.com/financial-connections/ach-direct-debit-payments).\n\nOptionally, you can request permission from your customers to retrieve additional data on their [Financial Connections account](https://docs.stripe.com/api/financial_connections/accounts/object). We recommend that you access [balances](https://docs.stripe.com/financial-connections/balances) data to perform balance checks prior to processing the payment.\n\nManual account entry and microdeposit verification are available as a fallback method for this use case. However, accounts that you add through microdeposits won’t have access to additional account data.\n\n[](#custom-connect-payouts)\n\nUse Financial Connections with Connect to verify bank accounts for Custom connected accounts, thereby facilitating payouts. This allows your connected account to authenticate its own bank account and provide permission to share details you need for payouts, like tokenized account and routing numbers.\n\nCollecting account details from your connected account with Financial Connections can help you:\n\n*   Increase onboarding conversion by eliminating the need for your connected account to leave your website or application to locate their account and routing numbers.\n*   Reduce first payout failure rates by eliminating errors that result from manual entry of account and routing numbers.\n*   Make sure you don’t need to store sensitive data such as account and routing numbers on your server.\n*   Save development time by eliminating the need for you to build bank account form validation when your connected account enters their bank account details.\n\nOptionally, you can request permission from your connected account to retrieve additional data on their Financial Connections account. Consider accessing [ownership](https://docs.stripe.com/financial-connections/ownership) details to optimize your onboarding process. Retrieving ownership data on an account can help you mitigate fraud by verifying an account’s ownership details, such as the name and address of the account holder.\n\nLearn how to [collect a bank account to initiate payouts to a US Custom Connect account](https://docs.stripe.com/financial-connections/connect-payouts).\n\nManual account entry and microdeposit verification are available as a fallback method for this use case (for example, if your connected account can’t find their institution or otherwise authenticate). However, accounts that you add through microdeposits won’t have access to additional account data.\n\n[](#building-other-products)\n\nUse Financial Connections to access external bank account data that you can use to build financial products.\n\nAfter your user has consented to share data from their financial accounts, you can retrieve data for various use cases, such as:\n\n*   Help your user track expenses, handle bills, manage their finances and take control of their financial well-being with [transactions](https://docs.stripe.com/financial-connections/transactions) data.\n*   Speed up underwriting and improve access to credit and other financial services with transactions and balances data.\n\nLearn how to [collect an account to access data](https://docs.stripe.com/financial-connections/other-data-powered-products) using Financial Connections’ Sessions API.\n\nManual account entry and microdeposit verification aren’t available in the authentication flow for this use case because the primary goal of collecting an account is data accessibility.\n\nYou can [convert most previously linked Financial Connections accounts to Payment Methods](https://docs.stripe.com/financial-connections/other-data-powered-products?platform=web#accept-ach-direct-debit). However, if your integration uses the Sessions API, the linked account might not be compatible with ACH.",
    "title": "Financial Connections use cases | Stripe Documentation",
    "description": "View options for integrating Financial Connections and common use cases.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/receipts?payment-ui=payment-links",
    "markdown": "# Email receipts and paid invoices\n\n## Send payment or refund receipts automatically.\n\nWith [Payment Links](https://docs.stripe.com/payment-links \"Payment Links\"), you can manually or automatically send customized email receipts or [paid invoices](#paid-invoices).\n\n## Receipt features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach receipt contains a link to view it in a browser, and a unique [receipt number](https://docs.stripe.com/api#charge_object-receipt_number) that’s useful when looking up payment information.\n\nYou can also access the link to view the receipt in a browser through the API in the [PaymentIntent’s](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") related [Charge](https://docs.stripe.com/api/charges/object#charge_object-receipt_url) object. When you visit the link, the receipt always shows the latest status of that charge–if it has been refunded, the receipt accurately reflects it.\n\nAs a security measure, receipt links expire within 30 days. Expired receipt links require the customer to provide the original email address to resend the receipt to that address.\n\n## Automatically send receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo enable automated receipts, toggle **Successful payments** on in your [Customer emails settings](https://dashboard.stripe.com/settings/emails). Stripe only sends receipts to successful and completed payments. If the payment fails or is declined, we don’t send a receipt.\n\n## Manually send receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send receipts in the [Dashboard](https://dashboard.stripe.com/payments), click **Send receipt** within the **Receipt history** section of a Payment details page. You can also hover over a payment within the **Payments** section of a customer’s page and click the **Send receipt** icon. To resend an email receipt, input a different email address, or specify a comma-separated list of addresses to send it to several recipients. A record of the last 10 receipts is visible on the payment’s page.\n\n## Customize receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAlter the appearance and functionality of your receipts with the following customization options:\n\n*   **Language**: Select the language for your receipts in your [Customer emails settings](https://dashboard.stripe.com/settings/emails).\n*   **Branding**: Modify the logo and colors in your [Branding settings](https://dashboard.stripe.com/settings/branding). The upper limit for a custom logo image file size is 512KB. Ideally, the logo should be a square image exceeding 128 x 128 pixels. JPG, PNG, and GIF file types are supported.\n*   **Public information**: Specify the public information you want to include, such as your contact number or website address, in your [Public details settings](https://dashboard.stripe.com/settings/public).\n\nTo display custom text, use the [description](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-description) attribute on the PaymentIntent. Some examples include:\n\n*   Description of goods or services provided.\n*   Authorization code.\n*   Subscription information.\n*   Cancellation policies.\n\nYou can see a real-time preview of your email receipt on your Dashboard Branding settings page. To send a test receipt, hover over the preview image and click **Send test receipt**, then enter your email address.\n\n#### Caution\n\nReceipts pull data from the `Charge` object generated when the PaymentIntent is confirmed. To update receipt data such as the `description` after the charge is generated, you must [update the Charge](https://docs.stripe.com/api/charges/update). Changes to a confirmed PaymentIntent don’t appear on receipts.\n\n## Refund receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a payment is refunded, Stripe can automatically send a receipt to the same email address provided in the original charge. You can also use the Dashboard to manually send a copy of the refund receipt. To enable automated refund receipts, toggle **Refunds** on in your [Customer emails settings](https://dashboard.stripe.com/settings/emails).\n\n## Invoice and subscription payment receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe creates a receipt when a customer pays an [invoice](https://docs.stripe.com/api/invoices \"invoices\") or makes any [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") payment. Receipts for subscription and invoice payments are itemized to include line items, discounts, and taxes. After payment, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) includes a link to a receipt that the customer can download for their own records.\n\n## Stripe Connect receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReceipt settings depend on the charge and account type:\n\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers): Receipts use the platform account’s **Customer emails**, **Branding**, and **Public details** settings.\n    \n*   [Direct charges](https://docs.stripe.com/connect/direct-charges): Receipts use the connected account’s **Customer emails**, **Branding**, and **Public details** settings.\n    \n\nPlatform accounts can send a receipt for a connected account by passing `receipt_email` when making a charge request.\n\nFor connected accounts that use the Stripe Dashboard (which includes Standard connected accounts), you can configure receipt settings under [Branding](https://dashboard.stripe.com/settings/branding). For connected accounts that don’t use the Dashboard (which includes Express and Custom connected accounts), the platform configures receipt settings through [settings.branding](https://docs.stripe.com/api/accounts/update#update_account-settings-branding).\n\n## Automatically send paid invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to ordinary receipts, Payment Links can generate paid invoices as proof of payment. Invoices have more information than receipts. For subscriptions, Stripe generates invoices automatically, but for one-time payments, you need to enable them.\n\nTo generate invoices, toggle **Successful payments** on in your [Customer emails settings](https://dashboard.stripe.com/settings/emails). Then, when [creating a Payment Link](https://dashboard.stripe.com/payment-links/create), select **Create an invoice PDF** in the **After payment** tab. You can configure your invoice, including adding a memo, footer, and your tax ID in your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).\n\nAfter the payment completes, Stripe sends an invoice summary with links to download the invoice PDF and invoice receipt to the email address your customer provides during checkout. You can also view the invoice in the [Dashboard](https://dashboard.stripe.com/invoices) or access it programmatically by listening to the [`invoice.paid`](https://docs.stripe.com/api/events/types#event_types-invoice.paid) webhook event.\n\n#### Caution\n\nInvoices for delayed notification payment methods such as [Bacs Direct Debit](https://docs.stripe.com/payments/bacs-debit/accept-a-payment), [Bank transfers](https://docs.stripe.com/payments/bank-transfers/accept-a-payment), [Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment), [Canadian pre-authorized debits](https://docs.stripe.com/payments/acss-debit/accept-a-payment), [Konbini](https://docs.stripe.com/payments/konbini/accept-a-payment), [OXXO](https://docs.stripe.com/payments/oxxo/accept-a-payment), [Pay by Bank](https://docs.stripe.com/payments/pay-by-bank/accept-a-payment), [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit/accept-a-payment), [SOFORT](https://docs.stripe.com/payments/sofort/accept-a-payment), or [ACH Direct Debit](https://docs.stripe.com/payments/ach-debit/accept-a-payment) might take longer to send because we send the invoice after successful payment, not upon checkout session completion.\n\n![Screenshot of the invoice PDF that customers can download from the invoice summary email](https://b.stripecdn.com/docs-statics-srv/assets/invoice.9e44668032383601eeec362f38293b7a.png)\n\nThe downloadable invoice PDF\n\n![Screenshot of the invoice receipt that customers can download from the invoice summary email](https://b.stripecdn.com/docs-statics-srv/assets/invoice_receipt.4f120ee7363f8e7728fa553a8a24aae3.png)\n\nThe downloadable invoice receipt\n\n![Screenshot of the invoice summary email Stripe sends](https://b.stripecdn.com/docs-statics-srv/assets/email.560c2666905531b907f7fcd4f1a0a6dd.png)\n\nThe customer email with links to the invoice PDF and receipt",
    "title": "Email receipts and paid invoices | Stripe Documentation",
    "description": "Send payment or refund receipts automatically.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/supported-institutions",
    "markdown": "# Supported institutions of Financial Connections\n\n## View the details of supported financial institutions.\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Ffinancial-connections%2Fsupported-institutions) to view Financial Connections supported institutions.",
    "title": "Supported institutions of Financial Connections | Stripe Documentation",
    "description": "View the details of supported financial institutions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/fundamentals",
    "markdown": "# Financial Connections fundamentals | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Financial Connections works.\n\nThe Stripe Financial Connections product has two main components: end user bank account collection through the authentication flow, and data retrieval on the collected accounts. There are a [number of ways](https://docs.stripe.com/financial-connections/use-cases) to integrate Financial Connections. In the following example, we assume you’re using a [Financial Connections Session](https://docs.stripe.com/api/financial_connections/sessions). However, the overall concepts and flow diagrams function similarly with payments integrations such as Setup or Payment Intents.\n\nTo initialize and complete the Financial Connections authentication flow:\n\n1.  Your user initiates the bank account linking process on your client.\n2.  Create a Financial Connections Session on your server to drive the authentication flow.\n3.  Return the session’s `client_secret` to your client.\n4.  Initiate the authentication flow using [collectFinancialConnectionsAccounts](https://docs.stripe.com/js/financial_connections/collect_financial_connections_accounts).\n5.  Your user completes the flow, which attaches [accounts](https://docs.stripe.com/api/financial_connections/accounts) to the session.\n\nAfter you have your user’s authenticated accounts, you can initiate data refreshes from your server. When the refreshes are complete, you can retrieve the account data.\n\n[](#authentication-flow)\n\nThe authentication flow is the client-side UI that allows your user to consent to data sharing and link their financial accounts to you and Stripe.\n\nEmbed the UI in your client-side user flow. It works across all major browsers and platforms, including web, iOS, Android, and mobile web views.\n\n![Authentication Flow](https://b.stripecdn.com/docs-statics-srv/assets/canonical-flow-v3.e0b5244b9d16ed2e03e6ed656e5ab1df.png)\n\nYour user follows these steps during the authentication flow:\n\n| Step | Description |\n| --- | --- |\n| **Give consent** | Users consent to share requested data. |\n| **Select institution** | Users select their bank either from frequently chosen banks or by searching over more than 5,000 other supported banks. |\n| **Log into bank** | Users authenticate access to their accounts by logging into their bank. |\n| **Select account(s)** | Users select which specific account(s) to link. |\n| **Success** | Users see a success screen after authentication completes successfully. |\n\nFor payments integrations such as Setup Intents, you can configure the authentication flow to use microdeposits as a fallback using the [verification\\_method](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-us_bank_account-verification_method) parameter.\n\n### Return user optimization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinancial Connections enables your users to connect their accounts in fewer steps with [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses), allowing them to save and quickly reuse their bank account details across Stripe merchants.\n\n![Authentication Flow](https://b.stripecdn.com/docs-statics-srv/assets/return-user-flow-v3.5a17b62098a2cfb95d42bfe37f641d1e.png)\n\nFor return users, launch the Financial Connections authentication flow with a [Customer](https://docs.stripe.com/api/customers \"Customers\") that has an email address. See our [use case guide](https://docs.stripe.com/financial-connections/use-cases) for examples of how to do this for your specific use case.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#how-stripe-links-financial-accounts)\n\nDuring the authentication flow, your user logs into their bank through either an OAuth (bank-hosted) or non-OAuth flow to authenticate access to their accounts. Stripe typically defaults the authentication flow to OAuth if it’s available at the financial institution. Your integration doesn’t need to treat OAuth accounts differently than non-OAuth accounts.\n\nOAuth is a standardized protocol that allows users to grant applications (for example, Stripe) access to their information within other applications (for example, bank apps). This protocol eliminates the need for users to share their login credentials.\n\nHere’s how OAuth and Financial Connections function together:\n\n*   When your user selects their bank in the Financial Connections authentication flow, they’re sent to their bank’s website or mobile app.\n*   Your user logs into their bank and grants the bank permission to share account data (such as balances or transactions) with Stripe.\n*   The bank redirects your user back to the authentication flow, passing a token that allows Stripe access to approved bank account information.\n*   Your user never shares their login credentials with Stripe.\n\nIn non-OAuth flows, end users provide credentials directly to Stripe or one of our [trusted partners](https://support.stripe.com/questions/what-is-the-relationship-between-stripe-and-stripe-s-service-providers).\n\n[](#financial-connections-account)\n\nSuccessful completion of the authentication flow creates one [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts/object) for each account authorized by your user. The Financial Connections Account is the API object you use to access additional account data, such as balances and transactions. They represent external financial accounts such as checking, savings, loan, or credit card accounts. See the [account\\_subcategory](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-subcategory) field on the account for a list of all account types we support. Only cash-based accounts, such as checking and savings accounts, allow ACH (Automated Clearing House) transfers.\n\n[](#data-permissions)\n\nAfter collecting an account, you immediately receive access to the following information:\n\n*   Last four digits of the account number\n*   Account category such as checking or savings\n*   Account nickname, if available\n\nTo access additional account data such as balances or transactions, you must request access with data permissions. You configure data permissions on server-side objects such as the Financial Connections Session using the [permissions](https://docs.stripe.com/api/financial_connections/sessions/create#financial_connections_create_session-permissions) parameter.\n\n| Data Available | Permissions | Description |\n| --- | --- | --- |\n| Account details | `payment_method` | Tokenized account and routing number (required for money movement) |\n| Account owners | `ownership` | Account owner names and mailing addresses |\n| Balances | `balances` | Current and available balances |\n| Transactions | `transactions` | Pending and posted transactions |\n\nConsider the data required to fulfill your use case and request permission to access only the data you need. Requesting permissions that go well beyond your application’s scope may erode your users’ trust in how you use their data. For example, if you’re building a personal financial management application or a lending product, you might request `transactions` data. If you’re mitigating fraud such as account takeovers, you might want to request `ownership` details.\n\nDuring the authentication flow, your users can see the data types that you’ve requested access to. They must provide their consent to share this data. To expand the data types you have access to, your user needs to complete the authentication flow again with the new data permissions.\n\nConsult the [balances integration](https://docs.stripe.com/financial-connections/balances) guide for an example of how to access financial account data, or learn more about [use cases](https://docs.stripe.com/financial-connections/use-cases) for the different data types.",
    "title": "Financial Connections fundamentals | Stripe Documentation",
    "description": "Learn how Financial Connections works.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/other-data-powered-products",
    "markdown": "# Collect an account to build data-powered products\n\nFinancial Connections lets your users securely share their financial data by linking their external financial accounts to your business. You can use Financial Connections to access user-permissioned financial data such as tokenized account and routing numbers, account balances, account owner information, and historical transactions.\n\nSome common examples of how you can use Financial Connections to improve product experiences for your users include:\n\n*   Mitigate fraud when onboarding a customer or business by verifying the [ownership](https://docs.stripe.com/financial-connections/ownership) information of an account, such as the name and address of the bank account holder.\n*   Help your users track expenses, handle bills, manage their finances and take control of their financial well-being with [transactions](https://docs.stripe.com/financial-connections/transactions) data.\n*   Speed up underwriting and improve access to credit and other financial services with transactions and balances data.\n*   Enable your users to connect their accounts in fewer steps with Link, allowing them to save and quickly reuse their bank account details across Stripe merchants.\n    \n\n[](#setup-stripe)\n\n[Register](https://dashboard.stripe.com/financial-connections/application) for Financial Connections after we approve your account for live-mode access.\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-a-customer)\n\nCreate a [Customer object](https://docs.stripe.com/api/customers/object) when users create an account with your business. By providing an email address, Financial Connections can optimize the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) by dynamically showing a streamlined user interface, for returning [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses) users.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}} \\   -d name={{CUSTOMER_NAME}}`\n\n[](#create-a-session)\n\nBefore you can retrieve data from a user’s bank account with Financial Connections, your user must authenticate their account with the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow).\n\nYour user begins the authentication flow when they want to connect their account to your site or application. Insert a button or link on your site or in your application, which allows a user to link their account—for example, your button might say “Link your bank account”.\n\nCreate a Financial Connections Session by posting to `/v1/financial_connections/sessions`:\n\n`curl https://api.stripe.com/v1/financial_connections/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"account_holder[type]\"=customer \\  -d \"account_holder[customer]\"=  {{CUSTOMER_ID}}   \\  -d \"permissions[]\"=balances \\  -d \"permissions[]\"=ownership \\  -d \"permissions[]\"=payment_method \\  -d \"permissions[]\"=transactions`\n\n1.  Set `account_holder[customer]` to the Customer `id`.\n2.  Set the data `permissions` parameter to include the data required to fulfill your use case.\n3.  _(Optional)_ set the `prefetch` parameter for retrieving the data on account creation.\n\nThe [permissions](https://docs.stripe.com/api/financial_connections/sessions/create#financial_connections_create_session-permissions) parameter controls which account data you can access. You must request at least one permission. When completing the authentication flow, your user can see the data you’ve requested access to, and provide their consent to share it.\n\nConsider the data required to fulfill your use case and request permission to access only the data you need. Requesting permissions that go well beyond your application’s scope might erode your users’ trust in how you use their data. For example, if you’re building a personal financial management application or a lending product, you might request `transactions` data. If you’re mitigating fraud such as account takeovers, you might want to request `ownership` details.\n\nAfter your user authenticates their account, you can expand data permissions only by creating a new Financial Connections Session and specifying a new value for the `permissions` parameter. Your user must complete the authentication flow again, where they’ll see the additional data you’ve requested permission to access, and provide consent to share their data.\n\nThe optional [prefetch parameter](https://docs.stripe.com/api/financial_connections/sessions/create#financial_connections_create_session-prefetch) controls which data you retrieve immediately after the user connects their account. Use this option if you know you always want a certain type of data. It removes the need to make an extra API call to initiate a [data refresh](https://docs.stripe.com/api/financial_connections/accounts/refresh).\n\nTo preserve the option to [accept ACH Direct Debit payments](#accept-ach-direct-debit), request the `payment_method` permission.\n\n[](#collect-an-account)\n\nUse the returned `client_secret` with Stripe.js to allow your user to connect their accounts. A `client_secret` allows client-side Stripe SDKs to make changes to the Financial Connections Session. Don’t store it, log it, embed it in URLs, or expose it to anyone other than your end user. Make sure that you have [TLS](https://docs.stripe.com/security/guide#tls) enabled on any page that includes the client secret.\n\nUse [collectFinancialConnectionsAccounts](https://docs.stripe.com/js/financial_connections/collect_financial_connections_accounts) to collect an account.\n\n`const stripe = new Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`) const financialConnectionsSessionResult = await stripe.collectFinancialConnectionsAccounts({   clientSecret: \"{{SESSION_CLIENT_SECRET}}\", });`\n\nThis method loads the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow), the client-side Stripe.js UI that helps your users link their financial accounts to you and Stripe.\n\nThe return value of `stripe.collectFinancialConnectionsAccounts` is a Promise. When the user completes the authentication flow, the Promise resolves with an object that contains the list of connected accounts:\n\n`{   \"financialConnectionsSession\": {     \"id\": \"fcsess_123\",     \"accounts\": [       {         \"id\": \"fca_456\",         \"object\": \"financial_connections.account\",         \"category\": \"Checking\",         \"display_name\": \"Premium Checking\",         \"institution_name\": \"Test Bank\",         \"last4\": \"4242\"       }     ]   } }`\n\nIf the user connects no accounts, or exits the authentication flow early, the response contains an empty `accounts` array.\n\nSuccessful completion of the authentication flow also sends one `financial_connections.account.created` webhook per account connected.\n\n[](#retrieve-additional-data)\n\nAfter your user has successfully completed the authentication flow, access or refresh the account data you’ve specified in the `permissions` parameter of the Financial Connections Session.\n\nTo protect the privacy of your user’s data, account data accessible to you is limited to the data you’ve specified in the `permissions` parameter.\n\nFollow the guides for [balances](https://docs.stripe.com/financial-connections/balances), [ownership](https://docs.stripe.com/financial-connections/ownership) and [transactions](https://docs.stripe.com/financial-connections/transactions) to start retrieving account data.",
    "title": "Collect an account to build data-powered products | Stripe Documentation",
    "description": "Collect your user's account and use data such as balances, ownership details, and transactions to build products.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/balances",
    "markdown": "# Access balances for a Financial Connections account\n\n## Learn how to access an account's balances with your user's permission.\n\nThe Financial Connections API allows you to retrieve up-to-date balances of a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts). Balance data is useful for a variety of applications, including reducing the risk of insufficient funds failures for ACH, underwriting, or building financial management tools.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have a completed Financial Connections registration to access balances in live mode. Check your [Dashboard settings](https://dashboard.stripe.com/settings/financial-connections) to check the state of your registration or begin the registration process. Test mode Financial Connections data is always available.\n\n[](#customer)\n\nWe recommend that you create a [Customer](https://docs.stripe.com/api/customers \"Customers\") with an email address to represent your user, that you then attach to your payment. Attaching a Customer object allows you to [list previously linked accounts](https://docs.stripe.com/api/financial_connections/accounts/list) later. By providing an email address on the Customer object, Financial Connections can improve the authentication flow by streamlining sign-in or sign-up for your user, depending on whether they’re a returning [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses) user.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#request-account-balances)\n\nYou must collect an account before you can access its balance data. To learn more about how to collect Financial Connections Accounts consult the integration guide most relevant to your use case: [accept payments](https://docs.stripe.com/financial-connections/ach-direct-debit-payments), [facilitate Connect payouts](https://docs.stripe.com/financial-connections/connect-payouts), or [build other-data powered products](https://docs.stripe.com/financial-connections/other-data-powered-products).\n\nWhen collecting an account, you specify the data you need access to with the [permissions](https://docs.stripe.com/financial-connections/fundamentals#data-permissions) parameter. The set of requested data permissions are viewable by the user in the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow). Financial Connections Accounts are collectible through various integration paths, and how you specify the parameter varies slightly by API.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=20000 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=balances \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method`\n\nWhen using dynamic payment methods for certain payments APIs, you can also configure requested permissions in the Dashboard. Learn how to [access additional account data on Financial Connections accounts](https://docs.stripe.com/financial-connections/ach-direct-debit-payments?dashboard-or-api=dashboard#access).\n\n[](#initiate-balance-refresh)\n\nAll Financial Connections data retrievals are asynchronous. You initiate a balance refresh and wait for it to complete, then retrieve the results. You can initiate balance refreshes with the `prefetch` API parameter or the [Refresh API](https://docs.stripe.com/api/financial_connections/accounts/refresh).\n\n### Prefetch balance data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpecify whether you want to prefetch account balances _before_ account collection. This initiates the refresh process as soon as your user connects their account in the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow). Set `prefetch` when you require balance data for every linked account, to make sure you receive it with minimal delay. An example of this is if you plan to perform balance checks prior to initiating an ACH payment. The `prefetch` parameter is available on all APIs that support Financial Connections.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=20000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][prefetch][]\"=balances \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=balances`\n\n### Initiate an on-demand refresh![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Refresh API](https://docs.stripe.com/api/financial_connections/accounts/refresh) to initiate on-demand balance refreshes _after_ account collection, and fetch balance information for a specific account at your convenience, allowing you to defer the decision until a later time.\n\nUse the Financial Connections account ID to initiate a refresh. If you’re integrating through a payments flow, find the account ID [on the associated Payment Method](https://docs.stripe.com/financial-connections/ach-direct-debit-payments#finding-the-financial-connections-account-id). When using a Financial Connections Session, retrieve it [through the session](https://docs.stripe.com/financial-connections/other-data-powered-products?platform=web#collect-an-account).\n\n`curl https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n`/refresh \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"features[]\"=balance`\n\n#### Note\n\nRefreshes aren’t allowed on inactive accounts.\n\n### Wait for the balance refresh to complete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [balance\\_refresh](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-balance_refresh) field on a Financial Connections account represents the balance refresh state. This field remains `null` until you request the `balances` permission and initiate a refresh. After you start a balance refresh, the state changes to `pending`, and after completion, it moves to either `succeeded` or `failed`. We send the [financial\\_connections.account.refreshed\\_balance](https://docs.stripe.com/api/events/types#event_types-financial_connections.account.refreshed_balance) event when the balance refresh completes. To determine the success of the refresh, check the `balance_refresh.status` field while handling the webhook.\n\nAfter a balance refresh completes, Stripe sets the availability of future refreshes through the [balance\\_refresh.next\\_refresh\\_available\\_at](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-balance_refresh-next_refresh_available_at) field. Check this field before initiating a new balance refresh to make sure that refreshes are currently available. If you attempt a refresh while the value is `null` (as is always the case when the refresh is pending or the account is inactive) or the current time is less than the `next_refresh_available_at` timestamp, the refresh won’t be initiated.\n\n#### Beta\n\nIn the unlikely event that a refresh fails, the `error` field on the refresh hash is a beta feature that provides the cause of the failure and recommended next steps. If you’d like to use it, [email us](mailto:financial-connections-beta+refresh-error@stripe.com) for access.\n\n[](#retrieve-account-balances)\n\nAfter the balance refresh has completed, retrieve the Financial Connections Account from the body of the [financial\\_connections.account.refreshed\\_balance](https://docs.stripe.com/api/events/types#event_types-financial_connections.account.refreshed_balance) event or through the API.\n\n`curl https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIf the refresh completed successfully, the account object contains balance data.\n\n`{   \"id\": \"fca_1Jbry3BAjqvGMUSxCDjFsrLU\",   \"object\": \"financial_connections.account\",   \"balance\": {     \"as_of\": 1651516592,     \"cash\": {       \"available\": {         \"usd\": 6000       }     },     \"current\": {       \"usd\": 6000     },     \"type\": \"cash\"   },   \"balance_refresh\": {     \"last_attempted_at\": 1651516582,     \"next_refresh_available_at\": 1651516583,     \"status\": \"succeeded\",   },   // ... other fields on the Financial Connections Account }`\n\n#### Balance data details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `balance` hash describes the different types of balances made available by a financial institution.\n\n| Balance Types | Description |\n| --- | --- |\n| `current` | The `current` balance is the amount of funds that have posted to the account. This amount ignores events that have yet to post to an account such as incoming transfers, outgoing transfers, and other holds. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder. |\n| `available` | The balance object is polymorphic, with types `cash` and `credit`. If the balance has `type: \"cash\"`, you’ll see a `cash` sub-object with the `available` property, which is the amount of funds available for use, such as any to be transferred or paid out, after considering incoming and outgoing holds. |\n| `used` | The balance object is polymorphic, with types `cash` and `credit`. If the balance has `type: \"credit\"`, you’ll see a `credit` sub-object with the `used` property, which is the amount of funds that have been consumed after taking outgoing holds into account. For credit balances, `current` and `used` amounts use the same sign convention used for cash balances: a positive amount means funds owed _to_ the account holder, a negative amount means funds owed _by_ the account holder. In most cases a credit balance has negative amounts. |\n\nThe availability of balances varies by underlying financial institution. We return all balance data that we have access to. In rare cases, most often when dealing with smaller financial institutions, Stripe can’t retrieve balance data from a financial institution or partner of any kind, in which case the `balance` object is `null`. The balance object is also `null` if the account has been disconnected. In some instances only a `current` balance is returned. See our list of [supported institutions](https://docs.stripe.com/financial-connections/supported-institutions) for data coverage.\n\nFor the `cash` balance type, use the `available` sub-object to confirm sufficient funds exist prior to initiating an ACH Direct Debit payment. If an `available` balance is null, you might want to use the `current` balance to confirm sufficient funds prior to initiating an ACH Direct Debit, but be mindful that this amount ignores events that have yet to post to an account such as incoming transfers, outgoing transfers, and other holds.\n\nThe `as_of` field on a balance is the date and time that the financial institution calculated this balance. This isn’t the same as the date and time of balance data retrieval. For example, certain institutions only update balance data once per day, while others update more frequently.",
    "title": "Access balances for a Financial Connections account | Stripe Documentation",
    "description": "Learn how to access an account's balances with your user's permission.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/connect-payouts",
    "markdown": "# Collect a bank account to enhance Connect payouts\n\n## Collect your connected account's bank account and use account data to enhance payouts.\n\nFinancial Connections lets you instantly collect tokenized account and routing numbers for payouts to connected accounts where your platform is liable for negative balances, including Custom and Express accounts.\n\nFinancial Connections helps you:\n\n*   Increase onboarding conversion by eliminating the need for your connected accounts to leave your website or application to locate their account and routing numbers.\n*   Reduce payout failure rates by eliminating errors that result from manual entry of account and routing numbers.\n*   Stay secure by not storing sensitive data such as account and routing numbers on your server.\n*   Save development time by eliminating your need to build bank account manual entry forms.\n*   Enable your users to connect their accounts in fewer steps with Link, allowing them to save and quickly reuse their bank account details across Stripe merchants.\n    \n\nOptionally, Stripe platforms in the US can request permission from your accounts to retrieve additional data on their [Financial Connections account](https://docs.stripe.com/api/financial_connections/accounts/object). Consider optimizing your onboarding process by accessing [balances](https://docs.stripe.com/financial-connections/balances), [transactions](https://docs.stripe.com/financial-connections/transactions), and [ownership](https://docs.stripe.com/financial-connections/ownership) information.\n\nRetrieving additional account data can help you:\n\n*   Mitigate fraud when onboarding accounts by verifying the ownership details of their bank account, such as the name and address of the account holder.\n*   Underwrite accounts for financial services that you might offer on your platform with balances and transactions data.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor accounts where your platform is liable for negative balances, such as Custom and Express accounts, enable Stripe Financial Connections either within the [Connect Onboarding](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-method=financial-connections) web form or within your [own onboarding flow](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-method=financial-connections&bank-account-collection-integration=direct-api).\n\nFor accounts where your platform isn’t liable for negative balances, including Standard connected accounts, account onboarding always uses Financial Connections. The platform can’t access additional bank account data on those accounts.",
    "title": "Collect a bank account to enhance Connect payouts | Stripe Documentation",
    "description": "Collect your connected account's bank account and use account data to enhance payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/ach-direct-debit-payments",
    "markdown": "# Collect a bank account to optimize ACH Direct Debit payments with account data\n\nAfter you have been approved for additional bank account data access like balances or ownership, you can use this data to optimize ACH payments performance. For example, you can use balance data to reduce the risk of insufficient funds failures. See related data guides for examples:\n\n*   [Balances](https://docs.stripe.com/financial-connections/balances): check account balance prior to payment initiation to reduce NSFs.\n*   [Ownership](https://docs.stripe.com/financial-connections/ownership): pull account owners and compare against your internal data models to catch potential fraud.\n*   [Transactions](https://docs.stripe.com/financial-connections/transactions): pull an account’s transaction history to check when the customer’s paycheck might land.\n\n### Finding the Financial Connections Account ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initiate data refreshes and retrieve data on a Financial Connections Account, you first need to get the account’s ID from the linked Payment Method by expanding the Payment Intent’s `payment_method` property:\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=payment_method`\n\nThe Financial Connections Account ID is on the expanded Payment Method’s [`us_bank_account` hash](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account). If you allow [manual entry fallback](https://docs.stripe.com/financial-connections/ach-direct-debit-payments#enable) and the user manually entered their account information, this field is `null`.\n\n`{   \"id\": \"pi_3OK3g4FitzZY8Nvm11121Lhb\",   \"object\": \"payment_intent\",   \"payment_method\": {     \"us_bank_account\": {       \"financial_connections_account\": \"fca_1OK123bitUAA8SvmruWkck76\"     }     // ... other fields on the Payment Method   }   // ... other fields on the Payment Intent }`",
    "title": "Collect a bank account to optimize ACH Direct Debit payments with account data | Stripe Documentation",
    "description": "Collect a customer's bank account for ACH Direct Debit payments, and use account data such as balances to optimize your payments integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/ownership",
    "markdown": "# Access ownership details for a Financial Connections account\n\n## Learn how to access an account's ownership details with your user's permission.\n\nThe Financial Connections API allows you to retrieve the ownership details of a [Financial Connections account](https://docs.stripe.com/api/financial_connections/accounts/object). Ownership data is useful for a variety of applications, including reducing the risk of fraud when onboarding users or underwriting.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have a completed Financial Connections registration to access ownership in live mode. Check your [Dashboard settings](https://dashboard.stripe.com/settings/financial-connections) to check the state of your registration or begin the registration process. Test mode Financial Connections data is always available.\n\n[](#customer)\n\nWe recommend that you create a [Customer](https://docs.stripe.com/api/customers \"Customers\") with an email address to represent your user, that you then attach to your payment. Attaching a Customer object allows you to [list previously linked accounts](https://docs.stripe.com/api/financial_connections/accounts/list) later. By providing an email address on the Customer object, Financial Connections can improve the authentication flow by streamlining sign-in or sign-up for your user, depending on whether they’re a returning [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses) user.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#request-account-ownership)\n\nYou must collect an account before you can access its ownership data. To learn more about how to collect Financial Connections Accounts, read the integration guide most relevant to your use case (for example, [accept payments](https://docs.stripe.com/financial-connections/ach-direct-debit-payments), [facilitate Connect payouts](https://docs.stripe.com/financial-connections/connect-payouts), or [build other-data powered products](https://docs.stripe.com/financial-connections/other-data-powered-products)).\n\nIf you use [Connect Onboarding for Custom Accounts](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration=prebuilt-web-form) to collect Financial Connections Accounts, configure which data you want access to in the [Dashboard](https://dashboard.stripe.com/settings/connect/custom).\n\nIf you use an API integration to collect accounts, specify the data you need access to with the [permissions](https://docs.stripe.com/financial-connections/fundamentals#data-permissions) parameter. The set of requested data permissions are viewable by the user in the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow). Financial Connections Accounts are collectible through various integration paths, and how you specify the parameter varies slightly by API.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=ownership \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method`\n\nWhen using dynamic payment methods for certain payments APIs, you can also configure requested permissions in the Dashboard. Learn how to [access additional account data on Financial Connections accounts](https://docs.stripe.com/financial-connections/ach-direct-debit-payments?dashboard-or-api=dashboard#access).\n\n[](#initiate-ownership-refresh)\n\nAll Financial Connections data retrievals are asynchronous. You initiate an ownership refresh and wait for it to complete, then retrieve the results. You can initiate ownership refreshes with the `prefetch` API parameter or the [Refresh API](https://docs.stripe.com/api/financial_connections/accounts/refresh).\n\n### Prefetch ownership data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpecify whether you want to prefetch account ownership details _before_ account collection. This initiates the refresh process as soon as your user connects their account in the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow). Set `prefetch` when you require ownership data for every linked account, to make sure you receive it with minimal delay. The `prefetch` parameter is available on all APIs that support Financial Connections.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][prefetch][]\"=ownership \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=ownership`\n\n### Initiate an on-demand refresh![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Refresh API](https://docs.stripe.com/api/financial_connections/accounts/refresh) to initiate on-demand ownership refreshes _after_ account collection, and fetch ownership information for a specific account at your convenience, allowing you to defer the decision until a later time. Although account ownership data can change, it generally doesn’t change as frequently as [balance](https://docs.stripe.com/financial-connections/balances) or [transaction](https://docs.stripe.com/financial-connections/transactions) data.\n\nUse the Financial Connections account ID to initiate a refresh. If you’re integrating through a payments flow, find the account ID [on the associated Payment Method](https://docs.stripe.com/financial-connections/ach-direct-debit-payments#finding-the-financial-connections-account-id). When using a Financial Connections Session, retrieve it [through the session](https://docs.stripe.com/financial-connections/other-data-powered-products?platform=web#collect-an-account).\n\n`curl https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n`/refresh \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"features[]\"=ownership`\n\n#### Note\n\nRefreshes aren’t allowed on inactive accounts.\n\n### Wait for the ownership refresh to complete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [ownership\\_refresh](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-ownership_refresh) field on a Financial Connections account represents the ownership refresh state. This field remains `null` until you request the `ownership` permission and initiate a refresh. After you start an ownership refresh, the state changes to `pending`, and after completion, it moves to either `succeeded` or `failed`. We send the [financial\\_connections.account.refreshed\\_ownership](https://docs.stripe.com/api/events/types#event_types-financial_connections.account.refreshed_ownership) event when the ownership refresh completes. To determine the success of the ownership refresh, check the `ownership_refresh.status` field while handling the webhook.\n\nAfter an ownership refresh completes, Stripe sets the availability of future refreshes through the [ownership\\_refresh.next\\_refresh\\_available\\_at](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-ownership_refresh-next_refresh_available_at) field. Check this field before initiating a new ownership refresh to make sure that refreshes are currently available. If you attempt a refresh while the value is `null` (as is always the case when the refresh is pending or the account is inactive) or the current time is less than the `next_refresh_available_at` timestamp, the refresh won’t be initiated.\n\n#### Beta\n\nIn the unlikely event that a refresh fails, the `error` field on the refresh hash is a beta feature that provides the cause of the failure and recommended next steps. If you’d like to use it, [email us](mailto:financial-connections-beta+refresh-error@stripe.com) for access.\n\n[](#retrieve-account-ownership)\n\nAfter the ownership refresh completes, retrieve the Financial Connections account from the API and expand the [ownership](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-ownership) field to see ownership details.\n\n`curl -G https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=ownership`\n\nThis returns the Financial Connections account with the ownership field expanded to list the account’s owners:\n\n`{   \"id\": \"fca_zbyrdjTrwcYZJZc6WBs6GPid\",   \"object\": \"financial_connections.account\",   \"ownership\": {     \"id\": \"fcaowns_1MzTG4IG1CZuezXppfPbUpXb\",     \"object\": \"financial_connections.account_ownership\",     \"created\": 1651784999,     \"owners\": {       \"object\": \"list\",       \"data\": [         {           \"name\": \"Jenny Rosen\",           \"email\": \"jenny.rosen@example.com\",           \"phone\": \"+1 555-555-5555\",           \"ownership\": \"fcaowns_1MzTG4IG1CZuezXppfPbUpXb\",           \"raw_address\": \"510 Townsend San Francisco, CA 94103\",           \"refreshed_at\": 1651784999         }       ],       \"has_more\": false,       \"url\": \"/v1/financial_connections/accounts/fca_zbyrdjTrwcYZJZc6WBs6GPid/owners?ownership=fcaowns_1MzTG4IG1CZuezXppfPbUpXb\"     }   },   \"ownership_refresh\": {     \"status\": \"succeeded\",     \"last_attempted_at\": 1651784999,     \"next_refresh_available_at\": 1651785000   },   // ... }`\n\nStripe returns the ownership information made available by a financial institution, and the availability of ownership details varies. We return all available fields and owners provided by the bank. Ownership details can include account owner name, address, email, and phone number.",
    "title": "Access ownership details for a Financial Connections account | Stripe Documentation",
    "description": "Learn how to access an account's ownership details with your user's permission.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/webhooks",
    "markdown": "# Get real-time updates from Financial Connections with webhooks\n\n## Use webhooks to get notifications about activity on Financial Connections accounts.\n\nAfter you collect a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts/object), you can access account data or listen for account changes with the Financial Connections API and associated [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\nCore webhooks notify you of account-level updates and newly created accounts. These include:\n\n*   `financial_connections.account.created`\n*   `financial_connections.account.deactivated`\n*   `financial_connections.account.reactivated`\n\nOther webhooks notify you when Stripe completes asynchronous data refreshes for accounts that your customers have connected.\n\n| Event | Description |\n| --- | --- |\n| `financial_connections.account.created` | Sent when a customer links a new account. If they link multiple accounts, it emits multiple events (one per account). |\n| `financial_connections.account.deactivated` | Sent when the [status](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-status) of your user’s account moves from `active` to `inactive`. New data refreshes aren’t allowed on `inactive` accounts, but previously refreshed data stays available. |\n| `financial_connections.account.reactivated` | Sent when the [status](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-status) of your user’s account moves from `inactive` to `active`. After an account moves from `inactive` to `active`, you can refresh account data again. |\n| `financial_connections.account.disconnected` | Sent on account disconnection. See the [disconnections guide](https://docs.stripe.com/financial-connections/disconnections) for further detail. |\n| `financial_connections.account.refreshed_balance` | Sent after a [balance](https://docs.stripe.com/financial-connections/balances) refresh is complete. |\n| `financial_connections.account.refreshed_ownership` | Sent after an [ownership](https://docs.stripe.com/financial-connections/ownership) refresh is complete. |\n| `financial_connections.account.refreshed_transactions` | Sent after a [transaction](https://docs.stripe.com/financial-connections/transactions) refresh is complete. |",
    "title": "Get real-time updates from Financial Connections with webhooks | Stripe Documentation",
    "description": "Use webhooks to get notifications about activity on Financial Connections accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/disconnections",
    "markdown": "# Disconnect a Financial Connections account\n\nTo disconnect an account, use the [disconnect API](https://docs.stripe.com/api/financial_connections/accounts/disconnect):\n\n`curl -X POST https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n`/disconnect \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nThis request returns the account with an updated `status` to reflect the successful disconnection.\n\n`{   \"id\": \"fca_zbyrdjTrwcYZJZc6WBs6GPid\",   \"object\": \"financial_connections.account\",   \"account_holder\": {     \"customer\": \"cus_NfjonN9919dELB\",     \"type\": \"customer\"   },   \"institution_name\": \"PNC Bank\",   \"status\": \"disconnected\",   // ... }`\n\nAfter account disconnection, Stripe emits a `financial_connections.account.disconnected` [webhook](https://docs.stripe.com/webhooks \"webhook\").",
    "title": "Disconnect a Financial Connections account | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verify-identity-documents",
    "markdown": "# Verify your users’ identity documents\n\nThis guide explains how to use Stripe Identity to securely collect and verify identity documents.\n\nShow a document upload modal inside your website. Here’s what you’ll do:\n\n1.  Add a verification button to your webpage that displays a document upload modal.\n2.  Display a confirmation page on identity document submission.\n3.  Handle verification results.\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nThen install the libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#add-a-button)\n\nCreate a button on your website for starting the verification.\n\n### Add a button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStart by adding a verify button to your page:\n\n`<html>   <head>     <title>Verify your identity</title>   </head>   <body>     <button id=\"verify-button\">Verify</button>   </body> </html>`\n\n### Add the Stripe.js library to your page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdd [Stripe.js](https://docs.stripe.com/payments/elements) to your page by including a script tag in your HTML document:\n\n`<html>   <head>     <title>Verify your identity</title>     <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>   </head>   <body>     <button id=\"verify-button\">Verify</button>   </body> </html>`\n\n#### Note\n\nAlways load **Stripe.js** directly from `https://js.stripe.com`. You can’t include it in a bundle or self-host it.\n\n### Initialize Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInitialize Stripe.js with your publishable [API key](https://docs.stripe.com/keys) by passing the following JavaScript to your page:\n\n`<html>   <head>     <title>Verify your identity</title>     <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>   </head>   <body>     <button id=\"verify-button\">Verify</button>     <script type=\"text/javascript\">       // Set your publishable key: remember to change this to your live publishable key in production       // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)       var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);     </script>   </body> </html>`\n\n[](#show-modal)\n\nSet up the new button to show a document upload modal. After clicking the button, your user can capture and upload a picture of their passport, driver’s license, or national ID.\n\nThe modal reduces development time and maintenance and allows you to collect identity documents as part of your existing flows. It also decreases the amount of private information you handle on your site, allows you to support users in a variety of platforms and languages, and allows you to customize the style to match your branding.\n\n### Create a VerificationSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) is the programmatic representation of the verification. It contains details about the type of verification, such as what [check](https://docs.stripe.com/identity/verification-checks) to perform. You can [expand](https://docs.stripe.com/api/expanding_objects) the [verified outputs](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) field to see details of the data that was verified.\n\nAfter successfully creating a `VerificationSession`, send the [client secret](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-client_secret) to the frontend to show the document upload modal.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/modal_integration_diagram.4c9ef035ee7fcb8b8f58a99fcad27202.svg)\n\nYou need a server-side endpoint to [create the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create). Creating the `VerificationSession` server-side prevents malicious users from overriding verification options and incurring processing charges on your account. Add authentication to this endpoint by including a user reference in the session metadata or storing the session ID in your database.\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  // In the route handler for /create-verification-session: // Authenticate your user.  // Create the session. const verificationSession = await stripe.identity.verificationSessions.create({   type: 'document',   metadata: {     user_id: '{{USER_ID}}',   }, });  // Return only the client secret to the frontend. const clientSecret = verificationSession.client_secret;`\n\n#### Caution\n\nThe client secret lets your frontend collect sensitive verification information. It’s single-use and expires after 24 hours. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Send only the client secret to your frontend to avoid exposing verification configuration or results.\n\nTest your endpoint by starting your web server (for example, `localhost:4242`) and sending a POST request with curl to create a VerificationSession:\n\n`curl -X POST -is \"http://localhost:4242/create-verification-session\" -d \"\"`\n\nThe response in your terminal looks like this:\n\n`HTTP/1.1 200 OK Content-Type: application/json  { client_secret: \"vs_QdfQQ6xfGNJR7ogV6...\"  }`\n\n### Add an event handler to the verify button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that you have a button and an endpoint to create a VerificationSession, modify the button to show the document upload modal when clicked. Add a call to [`verifyIdentity`](https://docs.stripe.com/js/identity/modal) using the client secret:\n\n`<html>   <head>     <title>Verify your identity</title>     <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>   </head>   <body>     <button id=\"verify-button\">Verify</button>      <script type=\"text/javascript\">       // Set your publishable key: remember to change this to your live publishable key in production       // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)       var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);        var verifyButton = document.getElementById('verify-button');        verifyButton.addEventListener('click', function() {         // Get the VerificationSession client secret using the server-side         // endpoint you created in step 3.         fetch('/create-verification-session', {           method: 'POST',         })         .then(function(response) {           return response.json();         })         .then(function(session) {           // Show the verification modal.           return stripe.verifyIdentity(session.client_secret);         })         .then(function(result) {           // If `verifyIdentity` fails, you should display the localized           // error message to your user using `error.message`.           if (result.error) {             alert(result.error.message);           }         })         .catch(function(error) {           console.error('Error:', error);         });       });     </script>   </body> </html>``\n\n### Event error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Error code | Description |\n| --- | --- |\n| `consent_declined` | The user declined verification by Stripe. Check with your legal counsel to see if you have an obligation to offer an alternative, non-biometric means to verify, such as through a manual review. |\n| `device_unsupported` | The verification requires a camera and the user is on a device without one. |\n| `under_supported_age` | Stripe doesn’t verify users under the age of majority. |\n| `phone_otp_declined` | The user is unable to verify the provided phone number. |\n| `email_verification_declined` | The user is unable to verify the provided email address. |\n\n### Test the upload modal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest that the verify button shows a document upload modal:\n\n*   Click the verify button, which opens the Stripe document upload modal.\n*   Ensure no error messages are shown.\n\nIf your integration isn’t working:\n\n1.  Open the Network tab in your browser’s developer tools.\n2.  Click the verify button to see if it makes an XHR request to your server-side endpoint (`POST /create-verification-session`).\n3.  Verify that the request returns a 200 status.\n4.  Use `console.log(session)` inside your button click listener to confirm that it returns the correct data.\n\n[](#show-confirmation-page)\n\nTo provide a user-friendly experience, show a confirmation page after users successfully submit their identity document. Host the page on your site to let the user know that the verification is processing.\n\nCreate a minimal confirmation page:\n\n`<html>   <head><title>Your document was submitted</title></head>   <body>     <h1>Thanks for submitting your identity document.</h1>     <p>       We are processing your verification.     </p>   </body> </html>`\n\nNext, update the button handler to redirect to this page:\n\n`<html>   <head>     <title>Verify your identity</title>     <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>   </head>   <body>     <button id=\"verify-button\">Verify</button>      <script type=\"text/javascript\">       // Set your publishable key: remember to change this to your live publishable key in production       // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)       var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``)        var verifyButton = document.getElementById('verify-button');        verifyButton.addEventListener('click', function() {         // Get the VerificationSession client secret using the server-side         // endpoint you created in step 3.         fetch('/create-verification-session', {           method: 'POST',         })         .then(function(response) {           return response.json();         })         .then(function(session) {           // Show the verification modal.           return stripe.verifyIdentity(session.client_secret);         })         .then(function(result) {           // If `verifyIdentity` fails, you should display the error message           // using `error.message`.           if (result.error) {             alert(result.error.message);           } else {             window.location.href = 'submitted.html';           }         })         .catch(function(error) {           console.error('Error:', error);         });       });     </script>   </body> </html>``\n\n### Test the confirmation page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest that your confirmation page works:\n\n*   Click your verify button.\n*   Submit the session by selecting a predefined test case.\n*   Confirm that the new confirmation page is shown.\n*   Test the entire flow for failure cases (such as declining consent or refusing camera permissions) and ensure your app handles them without any issues.\n\nNext, find the verification in the Stripe Dashboard. Verification sessions appear in the Dashboard’s [list of VerificationSessions](https://dashboard.stripe.com/identity). Click a session to go to the Session Detail page. The summary section contains verification results, which you can use in your app.\n\n[\n\n## Handle verification events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-verification-events)\n\n[Document checks](https://docs.stripe.com/identity/verification-checks#document-availability) are typically completed as soon as the user redirects back to your site and you can retrieve the result from the API immediately. In some rare cases, the document verification isn’t ready yet and must continue asynchronously. In these cases, you’re notified through webhooks when the verification result is ready. After the processing completes, the VerificationSession [status changes](https://docs.stripe.com/identity/how-sessions-work) from `processing` to `verified`.\n\nStripe sends the following events when the session status changes:\n\nUse a [webhook handler](https://docs.stripe.com/identity/handle-verification-outcomes) to receive these events and automate actions like sending a confirmation email, updating the verification results in your database, or completing an onboarding step. You can also view [verification events in the Dashboard](https://dashboard.stripe.com/events?type=identity.%2A).\n\n## Receive events and run business actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### With code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous verification flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n[Build a custom webhook](https://docs.stripe.com/identity/handle-verification-outcomes)\n\n### Without code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Dashboard to view all your verifications, inspect collected data, and understand verification failures.\n\n[View your test verifications in the Dashboard](https://dashboard.stripe.com/test/identity/verification-sessions)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handle verification outcomes](https://docs.stripe.com/identity/handle-verification-outcomes)\n*   [Learn about VerificationSessions](https://docs.stripe.com/identity/verification-sessions)\n*   [Learn about Stripe.js](https://docs.stripe.com/payments/elements)",
    "title": "Verify your users’ identity documents | Stripe Documentation",
    "description": "Create sessions and collect identity documents.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/transactions",
    "markdown": "# Access transactions for a Financial Connections account\n\n## Learn how to access an account's transactions with your user's permission.\n\nThe Financial Connections API allows you to retrieve transactions on a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts/object). Use transaction data to build a variety of products and solutions, such as:\n\n*   Expedite the underwriting process and improve access to credit and other financial services for your users.\n*   Mitigate fraud and reduce risk during user onboarding by evaluating a user’s transaction history, and understanding cash inflows and outflows from their financial accounts.\n*   Help your users track expenses, handle bills, and manage their finances.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have a completed Financial Connections registration to access transactions in live mode. Check your [Dashboard settings](https://dashboard.stripe.com/settings/financial-connections) to check the state of your registration or begin the registration process. Test mode Financial Connections data is always available.\n\n[](#customer)\n\nWe recommend that you create a [Customer](https://docs.stripe.com/api/customers \"Customers\") with an email address to represent your user, that you then attach to your payment. Attaching a Customer object allows you to [list previously linked accounts](https://docs.stripe.com/api/financial_connections/accounts/list) later. By providing an email address on the Customer object, Financial Connections can improve the authentication flow by streamlining sign-in or sign-up for your user, depending on whether they’re a returning [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses) user.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#request-access-to-transactions)\n\nYou must collect an account before you can access its transaction data. To learn more about how to collect Financial Connections Accounts consult the integration guide most relevant to your use case: [accept payments](https://docs.stripe.com/financial-connections/ach-direct-debit-payments), [facilitate Connect payouts](https://docs.stripe.com/financial-connections/connect-payouts), or [build other-data powered products](https://docs.stripe.com/financial-connections/other-data-powered-products).\n\nWhen collecting an account, you specify the data you need access to with the [permissions](https://docs.stripe.com/financial-connections/fundamentals#data-permissions) parameter. The set of requested data permissions are viewable by the user in the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow). Financial Connections Accounts are collectible through various integration paths, and how you specify the parameter varies slightly by API.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=20000 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=transactions \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method`\n\nWhen using dynamic payment methods for certain payments APIs, you can also configure requested permissions in the Dashboard. Learn how to [access additional account data on Financial Connections accounts](https://docs.stripe.com/financial-connections/ach-direct-debit-payments?dashboard-or-api=dashboard#access).\n\n[](#subscribe-to-transactions)\n\nWhen you subscribe to an account’s transaction data, Stripe automatically retrieves new transactions in the background every day and notifies you when they’re available. Subscribing to daily updates is the easiest way to keep the account’s transaction data up to date.\n\nTo get the Financial Connections Account ID you want to subscribe to transactions for, consult the documentation for our [payments integrations](https://docs.stripe.com/financial-connections/ach-direct-debit-payments#finding-the-financial-connections-account-id) or check the guide for [Financial Connections Sessions](https://docs.stripe.com/financial-connections/other-data-powered-products?platform=web#collect-an-account).\n\nSubscribe to transaction data by calling the [subscribe API](https://docs.stripe.com/api/financial_connections/accounts/subscribe):\n\n`curl https://api.stripe.com/v1/financial_connections/accounts/`\n\n`{{ACCOUNT_ID}}`\n\n`/subscribe \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"features[]\"=transactions`\n\n#### Note\n\nSubscriptions aren’t allowed on inactive accounts.\n\nIn addition to activating a subscription to future transaction data, this API call automatically initiates a transaction refresh:\n\n`{   \"id\": \"fca_1LDYuMGxLVUXRs6HW0lrat9T\",   \"object\": \"financial_connections.account\",   \"display_name\": \"Savings\",   \"institution_name\": \"Test Bank\",   \"status\": \"active\",   \"permissions\": [\"transactions\"],   \"subscriptions\": [\"transactions\"],   \"transaction_refresh\": {     \"id\": \"fctxnref_1aaaxqEitUZY8Svm4QdcWZKt\",     \"last_attempted_at\": 1706742786,     \"next_refresh_available_at\": null,     \"status\": \"pending\"   }   // ... }`\n\nAs long as you remain subscribed to transaction data, Stripe initiates a new refresh every day.\n\n### Wait for the refresh to complete ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll Financial Connections data refreshes are asynchronous. After you initiate a transaction refresh, you must wait for it to complete, then retrieve the resulting transactions.\n\nThe [transaction\\_refresh](https://docs.stripe.com/api/financial_connections/accounts/object#financial_connections_account_object-transaction_refresh) field on a Financial Connections account represents the transaction refresh state. This field remains `null` until you request the `transactions` permission and initiate a refresh. After you start a transaction refresh, the state changes to `pending`, and after completion, it moves to either `succeeded` or `failed`. We send the [financial\\_connections.account.refreshed\\_transactions](https://docs.stripe.com/api/events/types#event_types-financial_connections.account.refreshed_transactions) event when the transaction refresh completes. To determine the success of the refresh, check the `transaction_refresh.status` field while handling the webhook.\n\n[](#retrieve-transactions)\n\nAfter Stripe successfully refreshes transactions on the account, you can retrieve them using the [transactions list API](https://docs.stripe.com/api/financial_connections/transactions/list):\n\n`curl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{ACCOUNT_ID}}    `\n\nStripe returns a [paginated](https://docs.stripe.com/api/pagination) list of up to the last 180 days of transaction history on an account, depending on the account’s financial institution.\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"fctxn_1LXp9RGxLVUXRs6HtTSVfxse\",       \"object\": \"financial_connections.transaction\",       \"account\": \"fca_1LDYuMGxLVUXRs6HW0lrat9T\",       \"amount\": -1000,       \"currency\": \"usd\",       \"description\": \"Rocket Rides\",       \"livemode\": true,       \"status\": \"posted\",       \"status_transitions\": {         \"posted_at\": 1651784999,         \"void_at\": null       },       \"transacted_at\": 1651784999,       \"transaction_refresh\": \"fctxnref_1LXp8WGxLVUXRs6Hkc5PNUXf\",       \"updated\": 1651784999     },     {...},     {...}   ],   \"has_more\": false,   \"url\": \"/v1/financial_connections/transactions\" }`\n\nThe [status](https://docs.stripe.com/api/financial_connections/transactions/object#financial_connections_transaction_object-status) of a transaction is one of `pending`, `posted`, or `void`. Information included in the [description](https://docs.stripe.com/api/financial_connections/transactions/object#financial_connections_transaction_object-description) field varies, but can include metadata such as the business name.\n\n### Retrieving transactions since last refresh![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might wish to retrieve only new transaction data since your last data pull. For example, some users save previously retrieved transaction data to their database, and subsequently merge new or updated data as it becomes available.\n\nTo retrieve only new or updated transaction data since your last refresh, pass the `transaction_refresh` identifier provided by your last observed [financial\\_connections.account.refreshed\\_transactions](https://docs.stripe.com/api/events/types#event_types-financial_connections.account.refreshed_transactions) webhook event object to the list API:\n\n`curl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{ACCOUNT_ID}}   \\  -d \"transaction_refresh[after]\"=fctxnref_1LXp8WGxLVUXRs6Hkc5PNUXf`\n\nThe following is an example [webhook](https://docs.stripe.com/webhooks#webhook-endpoint-def) integration that only retrieves and records new or updated transaction data:\n\n``import stripe from flask import Flask app = Flask(__name__)  @app.route('/stripe_webhooks', methods=['POST']) def webhook():     event = None     try:         event = stripe.Event.construct_from(json.loads(request.data), stripe.api_key)     except ValueError as e:         # Invalid payload         raise e      if event.type == \"financial_connections.account.refreshed_transactions\":         account = event.data.object         sync_transactions(account[\"id\"], account[\"transaction_refresh\"][\"id\"])      return jsonify(success=True)  def sync_transactions(account_id, current_refresh):     # Fetches the last transaction_refresh observed for this account from internal database     last_observed_transaction_refresh = get_previous_transaction_refresh(key=account_id)      # Get transactions since the last seen transaction_refresh     response = stripe.financial_connections.Transaction.list(         account=account_id,         transaction_refresh={\"after\": last_observed_transaction_refresh},     )      # We know every transaction is either new or updated because of the `transaction_refresh` filter in the list endpoint     for transaction in response.data:         record_transaction(transaction)  # Saves the transaction to the DB      # Updates the last observed transaction_refresh for this account to the current refresh     set_previous_transaction_refresh(key=account_id, value=current_refresh)``",
    "title": "Access transactions for a Financial Connections account | Stripe Documentation",
    "description": "Learn how to access an account's transactions with your user's permission.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/handle-verification-outcomes",
    "markdown": "# Handle verification outcomes | Stripe DocumentationThe Stripe Docs logo\n\n## Listen for verification results so your integration can automatically trigger reactions.\n\nYou wrote code to [display a modal to collect identity documents](https://docs.stripe.com/identity/verify-identity-documents). Now, when your user submits a document, you can listen to verification results to trigger reactions in your application.\n\nIn this guide, you’ll learn how to:\n\n1.  Receive an event notification when a verification finishes processing.\n2.  Handle successful and failed verification checks.\n3.  Turn your event handler on in production.\n\n[Verification checks](https://docs.stripe.com/identity/verification-checks) are asynchronous, which means that verification results aren’t immediately available. When the processing completes, the VerificationSession status updates and the verified information is available. Stripe generates [events](https://docs.stripe.com/api/events) every time a session changes status. In this guide, we’ll implement [webhooks](https://docs.stripe.com/webhooks) to notify your app when verification results become available.\n\nSee [How sessions work](https://docs.stripe.com/identity/how-sessions-work) to learn the status and lifecycle of verification sessions.\n\n[](#set-up-stripe)\n\nInstall our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-webhook)\n\nA [webhook](https://docs.stripe.com/webhooks#webhooks-def) is an endpoint on your server that receives requests from Stripe, notifying you about events that happen on your account. In this step, we’ll build an endpoint to receive events on VerificationSession [status changes](https://docs.stripe.com/identity/how-sessions-work).\n\nWebhook endpoints must be publicly accessible so Stripe can send unauthenticated requests. You’ll need to verify that Stripe sent the event by using the Stripe library and request header:\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  // You can find your endpoint's secret in your webhook settings const endpointSecret = 'whsec_...';  // This example uses Express to receive webhooks const express = require('express');  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const app = express();  // Use JSON parser for all non-webhook routes app.use((req, res, next) => {   if (req.originalUrl === '/webhook') {     next();   } else {     bodyParser.json()(req, res, next);   } });  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {   let event;    // Verify the event came from Stripe   try {     const sig = req.headers['stripe-signature'];     event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);   } catch (err) {     // On error, log and return the error message     console.log(`❌ Error message: ${err.message}`);     return res.status(400).send(`Webhook Error: ${err.message}`);   }    // Successfully constructed event    res.json({received: true}); });  app.listen(4242, () => {   console.log('Running on port 4242'); });``\n\nNow that you have the basic structure and security in place to listen to notifications from Stripe, update your webhook endpoint to handle verification session events.\n\nAll [session events](https://docs.stripe.com/identity/how-sessions-work#events) include the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) object, which contains details about the verification checks performed. See [Accessing verification results](https://docs.stripe.com/identity/access-verification-results) to learn how to retrieve verified information not included in session events.\n\nStripe sends the following events when the session status changes:\n\nYour webhook code needs to handle the `identity.verification_session.verified` and `identity.verification_session.requires_input` events. You can subscribe to other [session events](https://docs.stripe.com/identity/how-sessions-work#events) to trigger additional reactions in your app.\n\n### Handle VerificationSession `verified` status change![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `identity.verification_session.verified` event is sent when verification checks have completed and are all successfully verified.\n\nAdd code to your event handler to handle all verification checks passing:\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  // You can find your endpoint's secret in your webhook settings const endpointSecret = 'whsec_...';  // This example uses Express to receive webhooks const express = require('express');  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const app = express();  // Use JSON parser for all non-webhook routes app.use((req, res, next) => {   if (req.originalUrl === '/webhook') {     next();   } else {     bodyParser.json()(req, res, next);   } });  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {   let event;    // Verify the event came from Stripe   try {     const sig = req.headers['stripe-signature'];     event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);   } catch (err) {     // On error, log and return the error message     console.log(`❌ Error message: ${err.message}`);     return res.status(400).send(`Webhook Error: ${err.message}`);   }    // Successfully constructed event   switch (event.type) {     case 'identity.verification_session.verified': {       // All the verification checks passed       const verificationSession = event.data.object;       break;     }   }    res.json({received: true}); });  app.listen(4242, () => {   console.log('Running on port 4242'); });``\n\nWhen handling this event, you might also consider:\n\n*   Saving the verification status in your own database\n*   Sending an email to your user letting them know they’ve been verified\n*   [Expanding](https://docs.stripe.com/api/expanding_objects) the VerificationSession [verified outputs](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) and comparing them against an expected value.\n\n### Handle VerificationSession `requires_input` status changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `identity.verification_session.requires_input` event is sent when at least one of the checks failed. You can inspect the [last\\_error](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error) hash on the verification session to handle specific failure reasons:\n\n*   The [`last_error.code`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-code) field can be used to programmatically handle verification failures.\n*   The [`last_error.reason`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-reason) field contains a descriptive message explaining the failure reason and can be shown to your user.\n\n#### Event error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Error code | Description |\n| --- | --- |\n| `consent_declined` | The user declined to be verified by Stripe. Check with your legal counsel to see if you have an obligation to offer an alternative, non-biometric means to verify, such as through a manual review. |\n| `under_supported_age` | Stripe doesn’t verify users under the age of majority. |\n| `country_not_supported` | Stripe doesn’t verify users from the provided country. |\n\nAdd code to your event handler to handle verification check failure:\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  // You can find your endpoint's secret in your webhook settings const endpointSecret = 'whsec_...';  // This example uses Express to receive webhooks const express = require('express');  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const app = express();  // Use JSON parser for all non-webhook routes app.use((req, res, next) => {   if (req.originalUrl === '/webhook') {     next();   } else {     bodyParser.json()(req, res, next);   } });  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (req, res) => {   let event;    // Verify the event came from Stripe   try {     const sig = req.headers['stripe-signature'];     event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);   } catch (err) {     // On error, log and return the error message     console.log(`❌ Error message: ${err.message}`);     return res.status(400).send(`Webhook Error: ${err.message}`);   }    // Successfully constructed event   switch (event.type) {     case 'identity.verification_session.verified': {       // All the verification checks passed       const verificationSession = event.data.object;       break;     }     case 'identity.verification_session.requires_input': {       // At least one of the verification checks failed       const verificationSession = event.data.object;        console.log('Verification check failed: ' + verificationSession.last_error.reason);        // Handle specific failure reasons       switch (verificationSession.last_error.code) {         case 'document_unverified_other': {           // The document was invalid           break;         }         case 'document_expired': {           // The document was expired           break;         }         case 'document_type_not_supported': {           // document type not supported           break;         }         default: {           // ...         }       }     }   }    res.json({received: true}); });  app.listen(4242, () => {   console.log('Running on port 4242'); });``\n\nDepending on your use case, you might want to allow your users to retry the verification if it fails. We recommend that you limit the amount of submission attempts.\n\nWhen handling this event, you might also consider:\n\n*   Manually reviewing the collected information\n*   Sending an email to your user letting them know that their verification failed\n*   Providing your user an alternative verification method\n\n[](#go-live)\n\nAfter you’ve deployed your event handler endpoint to production, set up the endpoint so Stripe knows where to send live mode events. It’s also helpful to go through the [development checklist](https://docs.stripe.com/get-started/checklist/go-live) to ensure a smooth transition when taking your integration live.\n\nWebhook endpoints are configured in the Dashboard or programmatically using the API.\n\n### Add an endpoint in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the Dashboard’s [Webhooks settings](https://dashboard.stripe.com/webhooks) page, click **Add an endpoint** to add a new webhook endpoint. Enter the URL of your webhook endpoint and select which events to listen to. See the full list of [Verification Session events](https://docs.stripe.com/identity/how-sessions-work#events).\n\n### Add endpoint with the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also programmatically [create webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/create). As with the form in the Dashboard, you can enter any URL as the destination for events and which event types to subscribe to.\n\n`curl https://api.stripe.com/v1/webhook_endpoints \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"url\"=\"https://{{DOMAIN}}/my/webhook/endpoint\" \\   -d \"enabled_events[]\"=\"identity.verification_session.verified\" \\   -d \"enabled_events[]\"=\"identity.verification_session.requires_input\"`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Test a webhook endpoint](https://docs.stripe.com/webhooks#test-webhook)\n*   [How sessions work](https://docs.stripe.com/identity/how-sessions-work)\n*   [Best practices for using webhooks](https://docs.stripe.com/webhooks#best-practices)\n*   [Webhook development checklist](https://docs.stripe.com/get-started/checklist/go-live)",
    "title": "Handle verification outcomes | Stripe Documentation",
    "description": "Listen for verification results so your integration can automatically trigger reactions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/review-tools",
    "markdown": "# Review tools | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use manual reviews to supplement programmatic systems with human expertise.\n\nWhile Stripe’s programmatic systems work to detect fraudulent verifications, you can perform manual reviews to provide an extra layer of fraud protection.\n\nFor example, you might want to review verifications when:\n\n*   Your customer submits a document from an unexpected country\n*   Your customer contacts you about a potential mistake in their verification\n*   Your business requirements differ from Stripe Identity’s default risk thresholds\n\nManual reviews and [insights](https://docs.stripe.com/identity/insights) in Stripe Identity allow you to examine unusual verifications and update verification statuses.\n\n## Reviewing verifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can review verifications in two ways. The [list view](#list-view) allows you to scan a list of verifications without seeing details about a verification, while the [detailed view](#detailed-view) provides more context.\n\n### List view ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe list view contains information to help you quickly get a sense of the state of each verification. It includes information on overall verification status, document country, extracted name, and individual verification check status.\n\n![Verification list view](https://b.stripecdn.com/docs-statics-srv/assets/list_view.578f9884a1db4a9b57bd59585010d9e3.png)\n\nVerification list view\n\n### Detailed view ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo see more information about a verification before making a decision, select the verification from the list view to navigate to a detailed view. In this view, you can inspect the individual images collected alongside available [insights](https://docs.stripe.com/identity/insights).\n\n### Actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you review a verification, take one of the following actions:\n\n*   **Override status**: Manually override the verification status to match your decision on whether or not the customer is verified. Stripe sends a [webhook event](https://docs.stripe.com/identity/handle-verification-outcomes) with the new status.\n*   **Add to blocklist**: Add the document to a blocklist to programmatically block future verifications completed with the same document.\n\n### Biometric duplicates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen processing new verification attempts, Stripe reviews your completed verifications for duplicate identities using biometric data (for example, based on a selfie) to make sure that each identity is unique.\n\nIf we detect a duplicate selfie, we’ll share a list of verification sessions where the duplicate is detected and how many times it’s found in each session.\n\n## Block list ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe block list prevents individuals from using data for verification after you add it to the block list. All future verifications processed with matching data are programmatically marked as ‘unverified‘.\n\nWe support adding block list items of the following types:\n\n*   **Document**: matches against the combination of the type of the document, the document number, and the document country.\n*   **Selfie**: matches against the facial mapping of the selfie image uploaded during verification.\n\nIf you believe there are any mistakes with the block list outcome, you can manually overturn Stripe’s automated decision by [overriding the status](#actions).\n\n### Adding an item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the [Identity Dashboard](https://dashboard.stripe.com/identity), find the VerificationSession containing the data you want to add to the block list. Navigate to the overflow menu ​​() in the top right, then select **Add to list**.\n\n### Disabling an item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the block list item details page, you can click **Disable** in the top right. After you confirm your decision in a modal, it disables the item, and future verifications that have data that match are no longer programmatically unverified.\n\nIf you wish to re-enable a block list item, you can visit the VerificationSession that initially created it and create a new item with the same data.\n\n### Deleting an item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, if you redact a VerificationSession the associated list items are deleted as well.\n\nIf you want to delete an individual list item, you can click **Delete** in the top right corner of the block list item details page. After you confirm your decision in a modal, the item is permanently disabled and the underlying data is redacted.\n\n## Identity reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this report, you can see usage and verification rates over time, including how users progress through the different stages of the verification funnel. This data is reported from your live verification sessions and doesn’t include test mode sessions.\n\nTo access [Identity reports](https://dashboard.stripe.com/identity/overview) from your [Stripe Dashboard](https://dashboard.stripe.com/), navigate to **More** > **Reports**, then select **Identity**. Generate a report by selecting a date range. The earliest date you can choose is when you began using Identity.\n\n### About the data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the reporting metrics for [VerificationSessions](https://docs.stripe.com/identity/verification-sessions) in a number of ways:\n\n*   **Verifications created**: The total number of verifications created, including those that are abandoned, canceled, redacted, or otherwise unfinished.\n*   **Verifications started**: The number of verifications that a user visited and then started the verification process for.\n*   **Verification submitted**: The number of verifications that were completed and submitted by a user. You’re charged for every submitted verification, regardless of the outcome.\n*   **Verifications successful**: The number of verifications that were verified successfully after submission.\n*   **Completion rate**: The rate at which started verifications were completed and submitted by a user. Stripe divides the number of submitted verifications by the number of started verifications.\n*   **Verification rate**: The rate at which submitted verifications were verified successfully. Stripe divides the number of verified verifications by the number of submitted verifications.\n\nVerification sessions can have multiple attempts (in case the user is unverified after an initial attempt). Each attempt generates a new [VerificationReport](https://docs.stripe.com/api/identity/verification_reports), and Stripe calculates a number of verification report metrics:\n\n*   **Verification reports created**: The number of verification attempts that were completed and submitted.\n*   **Verification reports successful**: The number of verification attempts that were verified successfully after submission.\n\n## Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following best practices to get the most out of reviews and perform them efficiently:\n\n*   **Focus on verifications where human judgment or manual review adds valuable insight to the determination of whether the customer’s identity is verified.**\n    \n    Our systems can make determinations on identity verification on the majority of verification sessions, but human judgment can improve accuracy for some cases.\n    \n*   **Use insights and context from your business to make an informed decision.**\n    \n    Use the data in the [Insights](https://docs.stripe.com/identity/insights) section to see how Stripe made the decision on the document or face image. Combining Insights, knowledge about your business, and human judgment can help you make an informed choice about when to trust or ignore the risk signals that Identity indicates.\n    \n*   **Apply what reviewers learn to develop fraud prevention strategies.**\n    \n    As reviewers sort through your verifications, they develop intuitions for fraud prevention that you can translate into updates to your integration with Identity.\n    \n*   **Customize the process by presenting data unique to your business at review time.**\n    \n    Pass along any additional customer information as metadata so that all relevant information is in the Dashboard at the time of review.\n    \n*   **Don’t slow down your customer.**\n    \n    A review implies some amount of time between verification completion and enabling the capabilities within your business for the customer. If your business has an inherent delay of this type (for example, Identity is a part of a more long form review process), taking the time to review a verification doesn’t change the customer experience. If you don’t have a built-in delay, adding a review process could slow down customers—consider the impact on them before you implement a review process. For example, build out workflows for handling situations when the verification status changes for a customer after they’ve already been verified.\n    \n*   **Implement customer support workflows.**\n    \n    Prepare to handle customer requests regarding their verification status and offer a non-biometric method for identity verification if they request it.",
    "title": "Review tools | Stripe Documentation",
    "description": "Learn how to use manual reviews to supplement programmatic systems with human expertise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/access-verification-results",
    "markdown": "# Access verification results | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to access sensitive verification results.\n\nYou wrote code to [display a modal to collect identity documents](https://docs.stripe.com/identity/verify-identity-documents) and [handle verification outcomes](https://docs.stripe.com/identity/handle-verification-outcomes). Now you might need access to the sensitive verification results such as your user’s date of birth or pictures of the collected document.\n\nFirst, consider using the [Identity Dashboard](https://dashboard.stripe.com/identity) to access sensitive verification results. If needed, [give team members controlled access](https://docs.stripe.com/get-started/account/teams) to your Stripe account. This saves you development time and ensures the sensitive verification data is kept [securely](https://support.stripe.com/questions/managing-your-id-verification-information) on Stripe.\n\nYou can [access most verification details programmatically](https://docs.stripe.com/identity/verification-sessions#results), such as the result of a verification check or the user’s name and address using your [secret key](https://docs.stripe.com/keys). Access to more sensitive fields require the use of [restricted API keys](https://docs.stripe.com/keys#limit-access).\n\n| Verification result | Available in Dashboard | Secret key access | Restricted API key access |\n| --- | --- | --- | --- |\n| Address |     |     |     |\n| Document type |     |     |     |\n| First and last names |     |     |     |\n| Issuing country of the document |     |     |     |\n| Result of the verification check |     |     |     |\n| Issued date of the document |     |     |     |\n| Type of ID number |     |     |     |\n| Email address |     |     |     |\n| Phone number |     |     |     |\n| Expiration date of the document |     |     |     |\n| Date of birth |     |     |     |\n| Document ID number |     |     |     |\n| Document images |     |     |     |\n| Face images |     |     |     |\n| ID number |     |     |     |\n\nRestricted API keys allow access based on the security measures associated with it:\n\n*   **Restricted keys** — Allow access to sensitive verification results for verifications processed in the last 48 hours.\n*   **IP restricted keys** - Allow access to sensitive verification results for all verifications.\n\nIn this guide, you’ll learn how to:\n\n1.  Consider your sensitive data access requirements carefully.\n2.  Create restricted API keys.\n3.  Make API requests to obtain sensitive verification results.\n4.  Roll your keys if they’re compromised.\n5.  Communicate your sensitive verification results and security measures to your users.\n6.  Add IP restrictions to your key for long-term access to sensitive verification results.\n\n1.  Consider your sensitive data access requirements carefully.\n2.  Create restricted API keys.\n3.  Make API requests to obtain sensitive verification results.\n4.  Roll your keys if they’re compromised.\n5.  Communicate your sensitive verification results and security measures to your users.\n\n[](#decide-access-requirements)\n\nTo build an integration with Stripe Identity that prioritizes your user’s privacy, you must first decide the minimum amount of PII that you need access to. If you don’t need access to the most sensitive data (that requires authentication with a restricted API key), then your integration can authenticate using your secret key only.\n\nTo access PII resulting from a verification, you can retrieve a VerificationSession and [expand](https://docs.stripe.com/api/expanding_objects) either the [`verified_outputs`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) field or - if you need more granular detail on the verification result - the [`last_verification_report`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_verification_report). Expanding either of these fields automatically includes all of the PII fields they contain that only require a secret key.\n\nHere is an example of how to expand the `verified_outputs` field to retrieve a user’s name that was verified by Stripe Identity.\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  const verificationSession = await stripe.identity.verificationSessions.retrieve(   '{{SESSION_ID}}',   {     expand: [       'verified_outputs',     ],   } );  const firstName = verificationSession.verified_outputs.first_name;`\n\nIf you do need to access sensitive PII that requires a restricted key, follow the steps in this guide.\n\n[](#create-restricted-key)\n\nYou can use your account’s secret API keys to perform any API request without restriction. Accessing sensitive verification results requires [restricted keys](https://docs.stripe.com/keys#limit-access), which are more secure.\n\nTo create a new restricted key,\n\n1.  Go to the [API keys page](https://dashboard.stripe.com/apikeys) in the Dashboard and click [**Create restricted key**](https://dashboard.stripe.com/apikeys/create).\n2.  Name your key.\n3.  Make sure the Identity **Verification Sessions and Reports** and **Access recent sensitive verification results** permissions are set to **Read**.\n4.  (optional) If you need to access collected images, add the Files **Write** permission.\n5.  Click **Create key**.\n6.  Store the key securely. [Learn more about keeping your keys safe](https://docs.stripe.com/keys#safe-keys).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/rak_identity_permissions.51347778adedec20ad9aaec2cb5a5bb9.png)\n\n[](#api-request)\n\n[VerificationReports](https://docs.stripe.com/api/identity/verification_reports) contain all the collected data and verification results from a submitted session. VerificationReports are created when all verification checks for a session are processed. They allow you to understand why a verification check failed and what data was successfully verified.\n\nYou can [expand](https://docs.stripe.com/expand) the [`last_verification_report`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_verification_report) session field to retrieve the associated VerificationReport.\n\nBy default, VerificationReports don’t include sensitive verification results. To access these, you’ll need to:\n\n1.  Authenticate using the restricted API key created in step 1.\n2.  [Expand](https://docs.stripe.com/api/expanding_objects) the fields you want to access.\n\nHere’s an example of accessing the extracted date of birth, ID number, and document number from a [document check](https://docs.stripe.com/identity/verification-checks?type=document):\n\n`// Set your restricted key. Remember to switch to a live restricted key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')('rk_test_...');  const verificationSession = await stripe.identity.verificationSessions.retrieve(   '{{SESSION_ID}}',   {     expand: [       'verified_outputs.dob',       'verified_outputs.id_number',       'last_verification_report.document.number',     ],   } );  const dateOfBirth = verificationSession.verified_outputs.dob; const idNumber = verificationSession.verified_outputs.id_number; const documentNumber = verificationSession.last_verification_report.document.number;`\n\n## Accessing collected images ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve identity document and face images that you collect as part of a session using the [File Upload API](https://docs.stripe.com/file-upload). The following fields on a VerificationReport can hold a reference to a [File](https://docs.stripe.com/api/files) resource in the Stripe API:\n\n*   [`document.files`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-document-front) - images of the identity document\n*   [`selfie.document`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-selfie-document) - image of the photo ID front\n*   [`selfie.selfie`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-selfie-selfie) - image of the user’s face\n\n#### Note\n\nDocument and face images are very sensitive and some countries, such as Germany, have laws prohibiting ID Document images from being shared or kept longer than necessary. As much as possible, access image content with short-lived FileLinks, don’t make copies of the file contents, and [redact sessions](https://docs.stripe.com/identity/verification-sessions#redact) and collected images when you’re done using them for the purpose collected.\n\nTo access the contents of the file, you need to authenticate using the previously created restricted key and [Create a FileLink](https://docs.stripe.com/api/file_links/create) with a short expiration and send the [`url`](https://docs.stripe.com/api/file_links/object#file_link_object-url) to the client:\n\n`// Set your restricted key. Remember to switch to a live restricted key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')('rk_test_...');  // Get the VerificationReport const session = await stripe.identity.verificationSessions.retrieve(   '{{SESSION_ID}}',   {     expand: ['last_verification_report'],   } );  // Retrieve the File id const report = session.last_verification_report; const documentFrontFile = report.document.files[0];  // Create a short-lived FileLink const fileLink = await stripe.fileLinks.create({   file: documentFrontFile,   expires_at: Math.floor(Date.now() / 1000) + 30,  // link expires in 30 seconds });  // Access the FileLink URL to download file contents const fileUrl = fileLink.url;`\n\n#### Note\n\nFileLinks for document and selfie files must expire within 30 seconds. We recommend not downloading the file contents on your server, instead send the FileLink URL to the client to display the image.\n\nIf you believe an attacker has accessed sensitive data collected by Identity, please [reach out to support](https://support.stripe.com/contact).\n\n[](#roll-keys)\n\nUsing restricted API keys that only have Identity permissions allows you to roll the keys in case of emergency without affecting other Stripe product integrations.\n\nWe recommend that you regularly monitor your restricted key usage to ensure that no one has gained access to them. In the [Dashboard](https://dashboard.stripe.com/apikeys), you can use the overflow menu (**…**) to view request logs for a specific API key to view all the requests made from that key.\n\nIf an API key is compromised, roll the key in the [Dashboard](https://dashboard.stripe.com/apikeys) to block it and generate a new one. Make sure to expire it immediately to prevent bad actors from retrieving sensitive information.\n\n#### Warning\n\nRolling blocks the API key and generates a new one. We recommend reviewing your [security history](https://dashboard.stripe.com/security_history) for events related to this key. Any webhook endpoints created with this key will stay active, even after the key is rolled.\n\nIf you believe an attacker has accessed sensitive data collected by Identity, please [reach out to support](https://support.stripe.com/contact).",
    "title": "Access verification results | Stripe Documentation",
    "description": "Learn how to access sensitive verification results.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/financial-connections/testing",
    "markdown": "# Test Financial Connections | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to test your integration with simulated Financial Connections accounts.\n\n[](#get-started)\n\nTo use the test mode features of Financial Connections, follow the relevant [use case guide](https://docs.stripe.com/financial-connections/use-cases) using a test API key. Accounts and customers that you make in test mode are invisible to your live mode integration.\n\n#### Note\n\nThe Financial Connections [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) is subject to change, so we don’t recommend automated client-side testing. Stripe’s test mode API is also strictly [rate limited](https://docs.stripe.com/testing#rate-limits), which you must account for in your tests.\n\n[](#web-how-to-use-test-accounts)\n\nWhen you provide [Stripe.js](https://docs.stripe.com/js) with a Financial Connections Session token created using test keys, the [authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) exclusively shows a selection of test institutions managed by Stripe. The client can link accounts from any of these institutions without providing credentials.\n\nFeatures like [balances](https://docs.stripe.com/financial-connections/balances), [account ownership](https://docs.stripe.com/financial-connections/ownership), and [transactions](https://docs.stripe.com/financial-connections/transactions) work the same way as they do in live mode, except they return testing data instead of real account data.\n\nTest mode [webhooks](https://docs.stripe.com/webhooks \"webhook\") are separate from live webhooks. Learn about [testing your webhook integrations](https://docs.stripe.com/webhooks#test-webhook).\n\n[](#web-test-institutions)\n\nStripe provides a set of test institutions exercising different success and failure scenarios, each represented as a bank in the list of featured institutions.\n\n#### Simulating successful authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Test Institution**: Simulates the user successfully logging into their institution and contains a basic set of test accounts.\n*   **Test OAuth Institution**: Contains the same test accounts as Test Institution, but instead of authenticating directly with the modal, it opens an OAuth popup for authentication.\n*   **Ownership Accounts**: Contains test accounts representing different ownership states.\n*   **Sandbox Bank (OAuth)**: Provides a test institution OAuth popup that allows you to select accounts to link. Sandbox Bank is the most representative of account linking for the majority of live mode institutions.\n*   **Sandbox Bank (Non-OAuth)**: Provides a Stripe-hosted login form to simulate institutions that don’t support OAuth. Use the following test credentials to proceed:\n    *   The initial prompt asks for username and password. Entering any input value simulates a successful login.\n    *   In the password field or any subsequent field, enter `options` (selection from a list), `mfa` (one-time passcode entry), or `security_question` (secret answer entry) to exercise further login prompts.\n    *   Entering `error` in any field ends the login session; `incorrect` gives you a chance to try again.\n*   **Invalid Payment Accounts**: Contains test accounts that are unusable for ACH payments.\n\n#### Simulating failed authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Down bank (scheduled)**: The institution’s login API is unavailable for a known time period that the institution communicated to Stripe.\n*   **Down bank (unscheduled)**: The institution’s login API is unavailable without any information about the downtime communicated to Stripe.\n*   **Down bank (error)**: Stripe is experiencing an unknown error communicating with the institution.\n\n#### Note\n\nWe recommend manually testing OAuth and non-OAuth institutions to make sure that both UI flows work within the context your application. See [additional documentation](https://docs.stripe.com/financial-connections/fundamentals#how-stripe-links-financial-accounts) about the differences between OAuth and non-OAuth connections.",
    "title": "Test Financial Connections | Stripe Documentation",
    "description": "Learn how to test your integration with simulated Financial Connections accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embedded-onboarding",
    "markdown": "# Embedded onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Show a localized onboarding form that validates data.\n\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Your platform embeds the [Account onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) in your application, and your connected accounts interact with the embedded component without ever leaving your application. Embedded onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries. In addition, embedded onboarding handles all:\n\n*   Business types\n*   Configurations of company representatives\n*   Verification document uploading\n*   Identify verification and statuses\n*   International bank accounts\n*   Error states\n\n[](#create-account)\n\nCreate a [connected account](https://docs.stripe.com/api/accounts) with the default [controller](https://docs.stripe.com/api/accounts/create#create_account-controller) properties. See [design an integration](https://docs.stripe.com/connect/design-an-integration) to learn more about controller properties. Alternatively, you can create a connected account by specifying an account [type](https://docs.stripe.com/api/accounts/create#create_account-type).\n\n`curl -X POST https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf you know the country for your connected account, you can provide that information when you create the account. The country defaults to the same country as your platform if not provided.\n\nIf you need to request [capabilities](https://docs.stripe.com/connect/account-capabilities) for your connected account, you can provide that information when you create the account and Stripe’s onboarding UIs collect the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need. If you omit capabilities and your connected account has Express Dashboard access, Stripe-hosted onboarding uses the [Configuration settings](https://dashboard.stripe.com/settings/connect/onboarding-options/countries) to automatically request capabilities based on the account’s country.\n\nIf you have information about the account holder (like their name, address, or other details), you can proactively provide this when you [create](https://docs.stripe.com/api/accounts/create) or [update](https://docs.stripe.com/api/accounts/update) the account. Stripe-hosted onboarding asks the account holder to confirm the pre-filled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types). Providing more information through the API reduces the number of prompts and enhances the onboarding flow for your connected account.\n\nAdditionally, if you onboard an account without its own website and your platform provides the account with a URL, prefill the account’s [business\\_profile.url](https://docs.stripe.com/api/accounts/create#create_account-business_profile-url). If the account doesn’t have a URL, you can prefill its [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/create#create_account-business_profile-product_description) instead.\n\nWhen testing your integration, use [test data](https://docs.stripe.com/connect/testing) to simulate different outcomes including identity verification, business information verification, payout failures, and more.\n\n[](#info-to-collect)\n\nAs the platform, you must decide if you want to collect the required information from your connected accounts upfront or incrementally. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding only collects the `currently_due` requirements.\n\n|     | Upfront onboarding | Incremental onboarding |\n| --- | --- | --- |\n| **Advantages** | *   Entails a single request for information (normally)<br>*   Creates fewer problems in receiving payouts and maintaining processing ability<br>*   Exposes potential fraudsters or connected accounts who refuse to provide required information later | *   Onboards connected accounts quickly<br>*   Results in higher onboarding rates |\n| **Disadvantages** | *   Onboarding connected accounts can take longer<br>*   Some legitimate new connected accounts might turn away due to the amount of information required before they complete the onboarding process | *   Creates a higher likelihood of disrupting business of an ongoing connected account |\n\nTo determine whether to use upfront or incremental onboarding, review the [required information](https://docs.stripe.com/connect/required-verification-information) for the countries where your connected accounts are located to understand the requirements that are eventually due. While Stripe tries to minimize any impact to connected accounts, requirements might change over time.\n\nFor connected accounts where you’re responsible for requirement collection, you can customize the behavior of [future requirements](https://docs.stripe.com/connect/handle-verification-updates) using the `collectionOptions` attribute when integrating the Account onboarding component.\n\n[](#customize-policies-shown-to-your-users)\n\nConnected accounts see Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy) during embedded onboarding. Connected account users who haven’t [accepted Stripe’s services agreement](https://docs.stripe.com/connect/service-agreement-types#accepting-the-correct-agreement) must accept it on the final onboarding screen. Embedded onboarding also has a footer with links to Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy).\n\nFor connected accounts where the platform is responsible for requirement collection, you have additional options to customize the onboarding flow, as outlined below.\n\n### Handle service agreement acceptance on your own![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re a platform onboarding connected accounts where you’re responsible for requirement collection, you can [collect Terms of Service acceptance](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance) using your own process instead of using the embedded account onboarding component. If using your own process, the final onboarding screen only asks your connected accounts to confirm the information they entered, and you must secure their acceptance of Stripe’s service agreement.\n\nEmbedded onboarding still has links to the terms of service (for example, in the footer) that you can replace by [linking to your own agreements and privacy policy](#link-to-your-own-agreements-and-privacy-policy).\n\n### Link to your agreements and privacy policy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnected accounts see the Stripe service agreement and [Privacy Policy](https://stripe.com/privacy) throughout embedded onboarding. For the connected accounts where you’re responsible for requirement collection, you can replace the links with your own agreements and policy. Follow the instructions to [incorporate the Stripe services agreement](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service) and [link to the Stripe Privacy Policy](https://docs.stripe.com/connect/updating-service-agreements#disclosing-how-stripe-processes-user-data).\n\n[](#integrate-account-onboarding-component)\n\nCreate an [Account Session](https://docs.stripe.com/api/account_sessions) by specifying the ID of the connected account and `account_onboarding` as the component to enable.\n\n## Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account onboarding by specifying `account_onboarding` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[account_onboarding][features][external_account_collection]\"=true`\n\nAfter creating the Account Session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Account onboarding component in the front end:\n\n`// Include this element in your HTML const accountOnboarding = stripeConnectInstance.create('account-onboarding'); accountOnboarding.setOnExit(() => {   console.log('User exited the onboarding flow'); }); container.appendChild(accountOnboarding);  // Optional: make sure to follow our policy instructions above // accountOnboarding.setFullTermsOfServiceUrl('{{URL}}') // accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}') // accountOnboarding.setPrivacyPolicyUrl('{{URL}}') // accountOnboarding.setSkipTermsOfServiceCollection(false) // accountOnboarding.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- |\n| `setFullTermsOfServiceUrl` | `string` | Absolute URL to your [full terms of service](https://docs.stripe.com/connect/service-agreement-types#full) agreement. | [Stripe’s full service agreement](https://stripe.com/connect-account/legal/full) |\n| `setRecipientTermsOfServiceUrl` | `string` | Absolute URL to your [recipient terms of service](https://docs.stripe.com/connect/service-agreement-types#recipient) agreement. | [Stripe’s recipient service agreement](https://stripe.com/connect-account/legal/recipient) |\n| `setPrivacyPolicyUrl` | `string` | Absolute URL to your privacy policy. | [Stripe’s privacy policy](https://stripe.com/privacy) |\n| `setSkipTermsOfServiceCollection` | `string` | If true, embedded onboarding skips terms of service collection and you must [collect terms acceptance yourself](https://docs.stripe.com/connect/updating-service-agreements#indicating-acceptance). | false |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |\n| `setOnExit` | `() => void` | The connected account has exited the onboarding process |     |\n\nTo use this component to set up new accounts:\n\n1.  Create a [connected account](https://docs.stripe.com/api/accounts). You can prefill information on the account object in this API call.\n2.  [Initialize Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions) using the ID of the connected account.\n3.  Include the `account-onboarding` element to show the onboarding flow to the connected account.\n4.  Listen for the `exit` event emitted from this component. Stripe sends this event when the connected account exits the onboarding process.\n\n[\n\n## Handle new requirements becoming due![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-new-requirements-becoming-due)\n\nSet up your integration to [listen for changes](https://docs.stripe.com/connect/handling-api-verification#verification-process) to account requirements. You can test handling new requirements (and how they might disable charges and payouts) with the [test mode trigger cards](https://docs.stripe.com/connect/testing#trigger-cards). Stripe notifies you when [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts.\n\nYou can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Based on the verification needs of your application, send the connected account back into onboarding as necessary to satisfy `currently_due` or `eventually_due` requirements. You can use this as a signal of when to send your connected account back into the flow.\n\nYou don’t need to worry about what the requirements are—sending the connected account back into onboarding collects the right information. For example, if your connected account mistypes their information and they can’t be verified, they could be asked to provide an identity document (for example, a Driver’s License in the United States). Sending this user into onboarding prompts them to upload such a document to make sure they’re verified.\n\n### Handle verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\nLet your accounts remediate their verification requirements by directing them to the [Account onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Get started with Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n*   [Customize embedded components](https://docs.stripe.com/connect/customize-connect-embedded-components)",
    "title": "Embedded onboarding | Stripe Documentation",
    "description": "Show a localized onboarding form that validates data.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verification-flows",
    "markdown": "# Verification Flows | Stripe DocumentationThe Stripe Docs logo\n\n## Use Verification Flows to configure Stripe Identity in the Dashboard.\n\nUse Verification Flows to configure your verification preferences, deploy no-code verifications, and manage link expiration. You can access each configuration option available in the Identity API, allowing you to select your desired verification type and modify the verification process accordingly.\n\n## Create Flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set up your Identity integration, create a Verification Flow:\n\n1.  Navigate to the [Verification Flow](https://dashboard.stripe.com/identity/verification-flows) page, then click **Create Flow**.\n2.  Select a type from the **Verification type** dropdown.\n3.  Enter a name in the **Flow title** field.\n4.  Select the options that you want to use.\n5.  Optionally, provide a return URL.\n6.  Click **Save**.\n\n### Manage Flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Verification Flows](https://dashboard.stripe.com/identity/verification-flows) page displays all the Verification Flows that you create. You can create distinct Flows for different use-cases, such as:\n\n*   Marketing campaigns\n*   High-value versus low-value transactions\n*   Known high-risk users versus trusted users\n*   Any other relevant use case\n\nAfter you create a Verification Flow, use the details page to:\n\n*   View details and edit the Flow\n*   View a list of all the Verification Sessions controlled by the Flow\n*   Activate or deactivate the static link associated to the Flow\n\n### Update Flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Verification Flows to deploy configuration updates to production (for example, you can edit the Verification Flow details in the Dashboard to add or remove a selfie check from a live document Verification Flow). Any future verifications you create with this Flow automatically adopt the updated configuration, so make sure to apply changes cautiously.\n\n## Use Flows to verify users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you have created a Verification Flow, you have two options to initiate an identity verification using that Flow’s configuration.\n\nTo use Verification Flows in your API integration, copy the Verification Flow ID from the details page and pass it in the [verification\\_flow](https://docs.stripe.com/api/identity/verification_sessions/create#create_identity_verification_session-verification_flow) parameter when you create a Verification Session.\n\n`curl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d verification_flow=  {{VERIFICATION_FLOW_ID}}    `\n\n### Include user-specific details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs with any VerificationSession that you create with the API, you can attach user-specific data by using the [metadata](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-metadata) and [provided\\_details](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-provided_details) parameters. The [client\\_reference\\_id](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-client_reference_id) parameter is used to provide a reference to a user in your system that you can look up later.\n\nFor example, here is how you can attach a user-specific phone number, email address, and `client_reference_id` to a Verification Session:\n\n`curl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d verification_flow=  {{VERIFICATION_FLOW_ID}}   \\  -d \"provided_details[phone]\"=5555551212 \\   --data-urlencode \"provided_details[email]\"=\"user@domain.com\" \\  -d client_reference_id=reference-token`",
    "title": "Verification Flows | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verification-checks",
    "markdown": "# Verification checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different verification checks supported by Stripe Identity.\n\nStripe Identity currently supports five types of verification checks: document, selfie, ID number, address, and phone.\n\nEach verification check requires different information from your user, has different coverage, and has a different verification flow. After you’ve integrated one check, you can add another with minimal changes to your integration.\n\nDocument checks verify the authenticity of government-issued identity documents. Stripe uses a combination of machine learning models, automated heuristic analysis and manual reviewers to verify the authenticity of hundreds of different document types.\n\nMachine learning models are used to capture high-definition pictures of the fronts and backs of documents. The document images are analyzed in real-time to check for legibility and warn the user if the document is expired or unlikely to be verified. Stripe checks the images against a database of fraudulent document templates. This database is updated frequently, so that Stripe can detect new fake document templates and automatically block them.\n\nWherever available, barcodes and other machine-readable features of the document are decoded and consistency checks are performed to ensure that the text document data matches the machine-readable data.\n\nTo prevent “presentation attacks” — fraudster using pictures of stolen documents or someone else’s face, Stripe uses computer vision and machine learning algorithms to ensure the user captured an image of an actual document.\n\nSee the [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents) guide to learn how to integrate document checks into your app.\n\nAdditionally, document checks can also be [paired with ID number checks](https://docs.stripe.com/api/identity/verification_sessions/create#create_identity_verification_session-options-document-require_id_number). This ensures the authenticity of the document and ensure the information in it can be cross-referenced in third party databases.\n\n### Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDocument checks are available for most government issued documents (national IDs, driver’s licenses and passports) from the following countries:\n\nAlbania\n\nAlgeria\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nAzerbaijan\n\nBahamas\n\nBahrain\n\nBangladesh\n\nBelarus\n\nBelgium\n\nBenin\n\nBolivia\n\nBrazil\n\nBulgaria\n\nCameroon\n\nCanada\n\nChile\n\nChina\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nFinland\n\nFrance\n\nGeorgia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nHaiti\n\nHonduras\n\nHong Kong\n\nHungary\n\nIndia\n\nIndonesia\n\nIraq\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJersey\n\nJordan\n\nKazakhstan\n\nKenya\n\nKuwait\n\nLatvia\n\nLebanon\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMongolia\n\nMorocco\n\nMyanmar (Burma)\n\nNepal\n\nNetherlands\n\nNew Zealand\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nPakistan\n\nPalestinian Territories\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nPuerto Rico\n\nRomania\n\nRussia\n\nSaudi Arabia\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSweden\n\nSwitzerland\n\nTaiwan\n\nThailand\n\nTunisia\n\nTurkey\n\nUganda\n\nUkraine\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nUruguay\n\nUzbekistan\n\nVenezuela\n\nVietnam\n\n#### Note\n\nStripe doesn’t support extraction of document fields written in Arabic, Chinese, Cyrillic, Greek, Hebrew, Korean, Tamil, or Thai script.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n*   [Adding selfie checks](https://docs.stripe.com/identity/selfie)\n*   [The Verification Sessions API](https://docs.stripe.com/identity/verification-sessions#create)",
    "title": "Verification checks | Stripe Documentation",
    "description": "Learn about the different verification checks supported by Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/before-going-live",
    "markdown": "# Before going live | Stripe DocumentationThe Stripe Docs logo\n\n## Best practices to build a production-ready Stripe Identity integration.\n\n*   Make sure your use case and business are supported\n    \n    Review the [supported use cases](https://docs.stripe.com/identity/use-cases) and [terms of service](https://stripe.com/identity/legal) to make sure that your business can use Stripe Identity.\n    \n*   The verification experience shows your company name, logo, and color. Make sure to configure the [branding settings](https://dashboard.stripe.com/settings/branding) for your account before going live.\n    \n*   Limit the number of submission attempts\n    \n    To prevent fraudsters from abusing your verification flow and incurring charges on your account, we recommend that you limit the number of times a user can verify themselves.\n    \n*   Limit how much sensitive information you store\n    \n    As much as possible, store only references to the verification and use the API to [retrieve the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve) when you need access to sensitive information. This simplifies your integration and limits your exposure from a security perspective, and helps you comply with privacy laws (such as GDPR) that require you to minimize data retention.\n    \n*   Always authenticate your user\n    \n    We recommend that you authenticate your user before showing or sending them to Stripe Identity. This allows you to keep relevant internal references and adds a layer of security to prevent fraudsters from abusing your verification flow.\n    \n*   Provide an alternative verification method\n    \n    Stripe Identity may not be able to verify all of your users. For example, your user might decline to be verified using biometric technology, they might attempt to verify with an unsupported document type, or they might not be covered by Identity’s [verification checks](https://docs.stripe.com/identity/verification-checks). We recommend that you provide alternative ways to verify your user, such as reaching out to your support team. In some jurisdictions, privacy laws (such as GDPR) might require you to offer a non-biometric verification option for users who decline to consent to using their biometric information.\n    \n*   Follow webhook best practices\n    \n    If your integration depends on [webhooks](https://docs.stripe.com/webhooks#webhooks-def), make you sure you’ve [tested](https://docs.stripe.com/identity/handle-verification-outcomes#test) that your integration handles Identity events correctly and that you’re following the [Best practices for using webhooks](https://docs.stripe.com/webhooks#best-practices).\n    \n*   Follow the Stripe development checklist\n    \n    Follow the [Development checklist](https://docs.stripe.com/get-started/checklist/go-live) to ensure a smooth transition when taking your integration live.\n    \n*   Update your privacy policy if necessary\n    \n    Stripe Identity collects sensitive information, such as facial and identity document images. Make sure that your own privacy policy tells your customers about all the ways you may use or reuse the collected identity data and that this data is shared with Stripe. You could add the following paragraph to your policy if it doesn’t already include information about how their data is disclosed to Stripe:\n    \n    > We use Stripe for identity document verification. Stripe collects identity document images, facial images, ID numbers and addresses as well as advanced fraud signals and information about the devices that connect to its services. Stripe shares this information with us and also uses this information to operate and improve the services it provides, including for fraud detection. You may also choose to allow Stripe to use your data to improve Stripe’s biometric verification technology. You can learn more about Stripe and read its privacy policy at https://stripe.com/privacy.\n    \n*   Provide a URL to your privacy policy\n    \n    Make sure your [account settings](https://dashboard.stripe.com/settings/account?support_details=true) include a link to your privacy policy. This URL will be linked from Stripe Identity.\n    \n*   Explain ID verification and Stripe Identity to your customers\n    \n    Add information to your site answering common questions about identity verification and your use of Stripe Identity. See the [FAQ template](https://docs.stripe.com/identity/explaining-identity).\n    \n*   Explain to your users how to delete their data from Stripe’s servers\n    \n    When your users request their data to be deleted, [redact the VerificationSession](https://docs.stripe.com/identity/verification-sessions#redact) and let your users know that they’ll need to contact Stripe support to remove their data from Stripe’s servers. You could add the following paragraph to your application:\n    \n    > We use Stripe for identity document verification. Stripe retains a copy of all the data provided as part of a verification. You may also have consented to allow Stripe to use your data to improve their technology. You can delete your information from Stripe’s servers or revoke your consent by visiting https://support.stripe.com.",
    "title": "Before going live | Stripe Documentation",
    "description": "Best practices to build a production-ready Stripe Identity integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/selfie",
    "markdown": "# Adding selfie checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to add face similarity checks to prevent fraudsters from using stolen documents.\n\nWhile [document checks](https://docs.stripe.com/identity/verification-checks?type=document) provide a defense against the use of fraudulent identity documents, it’s possible for fraudsters to get access to legitimate stolen documents. To prevent this, Stripe Identity can perform selfie checks on your users.\n\nSelfie checks look for distinguishing biological traits, such as face geometry, from a photo ID and a picture of your user’s face. Stripe then uses advanced machine learning algorithms to ensure the face pictures belong to the same person.\n\nTo add selfie checks to your application, first follow the guide to [collect and verify identity documents](https://docs.stripe.com/identity/verify-identity-documents).\n\n## Adding selfie checks to VerificationSessions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create), use the [`options.document.require_matching_selfie`](https://docs.stripe.com/api/identity/verification_sessions/create#create_identity_verification_session-options-document-require_matching_selfie) parameter to enable selfie checks.\n\n`curl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=document \\  -d \"options[document][require_matching_selfie]\"=true`\n\nThis configures the verification flow to require a photo ID and a face picture from your user.\n\n## Accessing selfie check results ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter it’s submitted and processed, the VerificationSession [status](https://docs.stripe.com/identity/how-sessions-work) changes depending on the result of the checks:\n\n*   `verified` — Both the document and selfie checks were successful. The session [`verified_outputs`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) contains extracted information from the document.\n*   `requires_input` — At least one of the document or the selfie checks failed.\n\nTo access the captured selfie and document images, you’ll need to retrieve the associated [VerificationReport](https://docs.stripe.com/api/identity/verification_reports), you can do this by [expanding](https://docs.stripe.com/api/expanding_objects) the [`last_verification_report`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_verification_report) field in the session:\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`); const verificationSession = await stripe.identity.verificationSessions.retrieve(   '{{SESSION_ID}}',   {     expand: ['last_verification_report'],   } ); const verificationReport = verificationSession.last_verification_report;`\n\nThe VerificationReport has [`document`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-document) and [`selfie`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-selfie) fields holding the results of the document and selfie checks. Here’s an example VerificationReport with successful document and selfie checks:\n\n`{   \"id\": \"vr_iwNFg6uFn4rVNcDPngKcCLMW\",   \"object\": \"identity.verification_report\",   \"type\": \"document\",   \"verification_session\": \"vs_hBCzBeDkd0OCLpkMtXFO83uJ\",   \"created\": 1611776872,   \"livemode\": true,   \"options\": {     \"document\": {       \"require_matching_selfie\": true     }   },   \"document\": {     \"status\": \"verified\",     \"error\": null,     \"first_name\": \"Jenny\",     \"last_name\": \"Rosen\",     \"address\": {       \"line1\": \"1234 Main St.\",       \"city\": \"San Francisco\",       \"state\": \"CA\",       \"postal_code\": \"94111\",       \"country\": \"US\"     },     \"document_type\": \"id_card\",     \"expiration_date\": {       \"day\": 17,       \"month\": 7,       \"year\": 2024     },     \"files\": [\"file_4mSp3DBBhXuIQWVXInyhQsc8\", \"file_lZDkCFZMqBRPHc5QFznpGjpO\"],     \"issued_date\": {       \"day\": 4,       \"month\": 27,       \"year\": 2021     },     \"issuing_country\": \"US\"   },   \"selfie\": {     \"status\": \"verified\",     \"error\": null,     \"document\": \"file_sEPYkj9O5q1gqPphno8Qdxd0\",     \"selfie\": \"file_dNcXwELYqIsn7polvkIeMG3i\",   } }`\n\nTo access the collected document and face images, see [Accessing verification results](https://docs.stripe.com/identity/access-verification-results).\n\n## Understanding selfie check failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [`document`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-document) and [`selfie`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-selfie) VerificationReport fields contain the collected data as well as a `status` and `error` fields to help you understand whether the check is successful or not.\n\nThe `status` field tells you whether each check is successful or not. The possible values are:\n\n*   `verified` - The verification check is successful and the collected data is verified.\n*   `unverified` - The verification check failed. You can check the `error` hash for more information.\n\nWhen the verification check fails, the `error` field contains `code` and `reason` values to explain the verification failure. The `error.code` field can be used to programmatically handle verification failures. The `reason` field contains a descriptive message explaining the failure reason and can be shown to your user.\n\n### Document check failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFailure details are available in the report [`document.error`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-document-error) field.\n\n| Error code | Description |\n| --- | --- |\n| `document_expired` | The provided identity document has expired. |\n| `document_unverified_other` | Stripe couldn’t verify the provided identity document. [See list of supported document types](https://docs.stripe.com/identity/verification-checks?type=document). |\n| `document_type_not_supported` | The provided identity document isn’t one of the session’s [allowed document types](https://docs.stripe.com/api/identity/verification_sessions/create#create_identity_verification_session-options-document-allow_document_types). |\n\n### Selfie check failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFailure details are available in the report [`selfie.error`](https://docs.stripe.com/api/identity/verification_reports/object#identity_verification_report_object-selfie-error) field.\n\n| Error code | Description |\n| --- | --- |\n| `selfie_document_missing_photo` | The provided identity document did not contain a picture of a face. |\n| `selfie_face_mismatch` | The captured face image did not match with the document’s face. |\n| `selfie_unverified_other` | Stripe couldn’t verify the provided selfie. |\n| `selfie_manipulated` | The captured face image was manipulated. |",
    "title": "Adding selfie checks | Stripe Documentation",
    "description": "Learn how to add face similarity checks to prevent fraudsters from using stolen documents.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verification-sessions",
    "markdown": "# The Verification Sessions API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the Verification Sessions API that powers Stripe Identity.\n\nUse the [Verification Session API](https://docs.stripe.com/api/identity/verification_sessions) to securely collect information and perform [verification checks](https://docs.stripe.com/identity/verification-checks). This API tracks a verification, from initial creation through the entire verification process, and shows verification results upon completion.\n\nFor a step-by-step guide on using the Verification Session API to verify your users’ identity document, follow the related guide: [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents).\n\n## Creating a VerificationSession ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you [create the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create), determine which [verification check](https://docs.stripe.com/identity/verification-checks) to perform by specifying the session [`type`](https://docs.stripe.com/api/identity/verification_sessions/create#create_identity_verification_session-type):\n\n*   [`document`](https://docs.stripe.com/identity/verification-checks?type=document) - Verify the authenticity and ownership of government-issued identity documents. Can also include a [selfie check](https://docs.stripe.com/identity/selfie).\n*   [`id_number`](https://docs.stripe.com/identity/verification-checks?type=id-number) - Verify a user’s name, date of birth and national ID number.\n\n`curl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=document`\n\n### Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the verification process is interrupted and resumes later, attempt to reuse the same VerificationSession instead of creating a new one. Each VerificationSession has a unique ID that you can use to [retrieve](https://docs.stripe.com/api/identity/verification_sessions/retrieve) it. In your application’s data model, you can store the VerificationSession’s ID to facilitate retrieval.\n\nThe benefit of reusing the VerificationSession is that the object helps track any failed verification attempts. If any of the checks fail, the VerificationSession will have a `requires_input` status.\n\nWe recommend that you provide an [idempotency key](https://docs.stripe.com/api/idempotent_requests) when creating the VerificationSession to avoid erroneously creating duplicate VerificationSessions for the same person. This key is typically based on the ID that you associate with the verification in your application, like a user reference.\n\n## Passing the client secret to the frontend ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe VerificationSession contains a [client secret](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-client_secret), a key that’s unique to the individual VerificationSession. The front end uses the client secret to complete the verification.\n\nTo use the client secret, you must obtain it from the VerificationSession on your server and pass it to the frontend. You can retrieve the client secret from an endpoint on your server using the browser’s `fetch` function on the client. This approach is generally most suitable when the client is a single-page application, especially one built with a modern frontend framework such as React.\n\nThis example shows how to create the server endpoint that serves the client secret:\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  // In the route handler for /create-verification-session: // Authenticate your user.  // Create the session. const verificationSession = await stripe.identity.verificationSessions.create({   type: 'document',   metadata: {     user_id: '{{USER_ID}}',   }, });  // Return only the client secret to the frontend. const clientSecret = verificationSession.client_secret;`\n\nThis example demonstrates how to fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/create-verification-session');   const {client_secret: clientSecret} = await response.json();   // Call stripe.verifyIdentity() with the client secret. })();`\n\n#### Note\n\nThe client secret is a sensitive token that you can use to complete the verification. Don’t log it, embed it in URLs, or expose it to anyone but the user that you’re verifying. Make sure that you have [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") on any page that includes the client secret.\n\n## Accessing verification results ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubmitting and processing a VerificationSession updates the session `status` and creates a [VerificationReport](https://docs.stripe.com/api/identity/verification_reports/object) object. This normally happens within a few minutes.\n\nOnce all of the verification checks have passed, the status changes to `verified`. You can [expand](https://docs.stripe.com/api/expanding_objects) the [`verified_outputs`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) field to see the verified data.\n\n`{   \"id\": \"vs_lXX1JHkgT40CIMn4ctwUG1NY\",   \"object\": \"identity.verification_session\",   \"created\": 1610744321,   \"last_error\": null,   \"last_verification_report\": \"vr_qxsbKXREpnMSq18J67rho6Dh\",   \"livemode\": true,   \"metadata\": {},   \"options\": {     \"document\": {},   },   \"status\": \"verified\",   \"type\": \"document\",   \"redaction\": null,   \"url\": null,   \"verified_outputs\": {     \"first_name\": \"Jenny\",     \"last_name\": \"Rosen\",     \"address\": {       \"line1\": \"1234 Main St.\",       \"city\": \"San Francisco\",       \"state\": \"CA\",       \"postal_code\": \"94111\",       \"country\": \"US\"     },     \"id_number_type\": null   } }`\n\nIf any of the verification checks fail, the session will have a `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work). Verification failure details are available in the session [`last_error`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error) hash. The [`last_error.code`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-code) value can be used to programmatically handle common verification failures. The [`last_error.reason`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-last_error-code) will contain a string that explains the failure reason and can be shown to your user.\n\n`{   \"id\": \"vs_Lt3uT7nqsJFL5J8cDZci5nUF\",   \"object\": \"identity.verification_session\",   \"created\": 1610744321,   \"last_error\": {     \"code\": \"document_expired\",     \"reason\": \"The document is expired.\",   },   \"last_verification_report\": \"vr_1ExIfyV6HWvL9CdSL4ExYt5r\",   \"livemode\": true,   \"metadata\": {},   \"options\": {},   \"status\": \"requires_input\",   \"type\": \"document\",   \"redaction\": null,   \"url\": null, }`\n\nIf you want your user to attempt verification again, you’ll need to [Retrieve the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve) to get a fresh URL or client secret to pass to your client.\n\nLearn how to [access sensitive verification results](https://docs.stripe.com/identity/access-verification-results)\n\n## Cancelling a VerificationSession ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel a VerificationSession at any point before it’s `processing` or `verified`. This invalidates the VerificationSession for future submission attempts, and can’t be undone. The session will have a `canceled` [status](https://docs.stripe.com/identity/how-sessions-work).\n\n`curl -X POST https://api.stripe.com/v1/identity/verification_sessions/`\n\n`{{VERIFICATION_SESSION_ID}}`\n\n`/cancel \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Redacting a VerificationSession ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOne of the reasons that you might want to redact a verification session is if you receive a data deletion request from your user. You can redact a session to ensure collected information is no longer returned by the Stripe API or visible in Dashboard. You can still [retrieve](https://docs.stripe.com/api/identity/verification_sessions/retrieve) redacted sessions with the API but you can’t update them. Sessions can be redacted from the Dashboard or through the API:\n\n`curl -X POST https://api.stripe.com/v1/identity/verification_sessions/`\n\n`{{VERIFICATION_SESSION_ID}}`\n\n`/redact \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nRedacted sessions show placeholder values for all fields that previously contained personally identifiable information (PII). The session includes a [`redaction.status`](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-redaction-status) field indicating the status of the redaction process. An [`identity.verification_session.redacted`](https://docs.stripe.com/api/events/types#event_types-identity.verification_session.redacted) webhook will be sent when the session is redacted. Please note redaction can take up to 4 days.\n\nIf a VerificationSession that has been redacted is retrieved with PII fields expanded, then these fields will still appear in the response but their values will not contain any PII. For example, here is a response that has expanded the `verified_outputs` and `verified_outputs.dob` fields on a redacted VerificationSession.\n\n`{   \"id\": \"vs_5k6tWo61v2vl7tlY0M5Y3Urh\",   \"object\": \"identity.verification_session\",   \"created\": 1610744321,   \"last_error\": null,   \"last_verification_report\": \"vr_YWcHeeGz2sELes2glkuxfOJz\",   \"livemode\": true,   \"options\": {},   \"status\": \"verified\",   \"type\": \"document\",   \"url\": null,   \"client_secret\": null,   \"redaction\": {     \"status\": \"redacted\"   },   \"verified_outputs\": {     \"first_name\": \"[redacted]\",     \"last_name\": \"[redacted]\",     \"dob\": {       \"year\": 1,       \"month\": 1,       \"day\": 1     },     \"address\": {       \"line1\": \"[redacted]\",       \"city\": \"[redacted]\",       \"state\": \"[redacted]\",       \"postal_code\": \"[redacted]\",       \"country\": \"US\"     },     \"id_number_type\": null   },   \"metadata\": {} // Metadata will also be redacted }`\n\nAny [VerificationReports](https://docs.stripe.com/api/identity/verification_reports), [Events](https://docs.stripe.com/api/events), and [Request Logs](https://dashboard.stripe.com/logs) associated with the VerificationSession are also redacted and [File](https://docs.stripe.com/api/files) contents are no longer downloadable.\n\nIf the VerificationSession is in the `processing` state you must wait until it finishes before redacting it. Redacting a VerificationSession with `requires_action` status automatically cancels it.\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the VerificationSession object. Metadata isn’t shown to customers or factored into whether a verification check succeeds or fails.\n\nThrough metadata, you can associate other information—meaningful to you—with Stripe activity. Any metadata you include is viewable in the Dashboard (for example, when looking at the page for an individual session), and is also available in common reports. As an example, you can attach your application’s user ID to the VerificationSession used to verify that user. Doing so allows you, or your team to easily reconcile verifications in Stripe to users in your system.\n\n`curl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=document \\  -d \"metadata[user_id]\"={{USER_ID}} \\   -d \"metadata[reference]\"={{IDENTIFIER}}`\n\nWe recommend you don’t store any sensitive information (PII, ID numbers, and so on) in session metadata. Note that metadata is removed when you redact a VerificationSession.",
    "title": "The Verification Sessions API | Stripe Documentation",
    "description": "Learn more about the Verification Sessions API that powers Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/use-cases",
    "markdown": "# Supported uses cases and locations for Stripe Identity\n\n## Learn about the verification use cases and business locations supported by Stripe Identity.\n\nEligibility to use Stripe Identity depends on a combination of your business location, how you plan to use Stripe Identity, and the type of business you operate. Check the following lists to determine if Stripe Identity currently supports your use case and industry in your location.\n\n## Business location ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile you can [verify identity documents](https://docs.stripe.com/identity/verification-checks?type=document) from hundreds of countries across the globe, Stripe Identity is generally available for businesses based in the following countries:\n\nJapan\n\nUnited Kingdom\n\nUnited States\n\nStripe Identity is also available in self-serve public beta for businesses based in the following countries:\n\nAustralia\n\nAustria\n\nBelgium\n\nBulgaria\n\nCanada\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nEstonia\n\nFinland\n\nFrance\n\nGermany\n\nGreece\n\nHungary\n\nIreland\n\nItaly\n\nLatvia\n\nLithuania\n\nLuxembourg\n\nMalta\n\nNetherlands\n\nNew Zealand\n\nNorway\n\nPoland\n\nPortugal\n\nRomania\n\nSlovenia\n\nSpain\n\nSweden\n\nSwitzerland\n\n## Use cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have any questions about supported and unsupported use cases, please [reach out to support](https://support.stripe.com/contact). Our [Services Terms](https://stripe.com/ssa#services-terms) describe the purposes for which Stripe Identity may be used.\n\n### Unsupported use cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou may not use Stripe Identity for any of the following purposes:\n\n*   Reselling as an independent ID verification service or selling or renting the data you receive from Stripe Identity: Resale, provision, or further distribution of identity verification services or data to third parties. For example, your primary business is selling ID verification to other businesses.\n*   Processing Personal Health Information (PHI) by a HIPAA-covered entity: Verification or storage of PHI protected by the Health Insurance Portability and Accountability Act of 1996 (HIPAA). This only applies for businesses that are sharing data covered by the US HIPAA.\n*   Eligibility for Credit, Employment, Housing, or Insurance or any “Permissible Purpose” under the US Fair Credit Reporting Act (FCRA): Conducting ID verification to determine if an individual is eligible for credit, housing, employment, insurance—or other purposes under the FCRA. This only applies to businesses that are using Identity for an activity that is covered by the US FCRA.\n*   Government or law enforcement use\n*   Verifying anyone considered a minor or who is under the age of 16.\n*   Verifying anyone who is linked directly or indirectly with jurisdictions Stripe has deemed high risk, as may be updated from time to time on our [Prohibited and Restricted Business](https://stripe.com/restricted-businesses) page:\n    *   Cuba, Iran, North Korea, Syria, and the Crimea, Donetsk, and Luhansk Regions, or persons Stripe has deemed high risk, such as those individuals or entities named to a restricted person or party list of the U.S., United Kingdom, European Union or United Nations, including the sanctions lists maintained by the U.S. Office of Foreign Assets Control or the Denied Persons List or Entity List maintained by the U.S. Department of Commerce\n    *   Russian Federation\n*   As, or in furtherance of, any [Prohibited or Restricted Business](https://stripe.com/restricted-businesses); provided, however, that for the purpose of using Stripe Identity as a stand-alone service and only in the US or UK, the following restricted business categories may use Stripe Identity without pre-approval:\n    *   Financial products and services\n    *   Non-fiat currency and stored value\n    *   Pharmaceuticals, medical devices and telemedicine, as long as the data provided to Stripe Identity isn’t subject to the Health Insurance Portability and Accountability Act of 1996 (HIPAA)\n    *   Tobacco\n    *   Travel",
    "title": "Supported uses cases and locations for Stripe Identity | Stripe Documentation",
    "description": "Learn about the verification use cases and business locations supported by Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/reference",
    "markdown": "# Reference guides | Stripe DocumentationThe Stripe Docs logo\n\n## Use these reference guides to explore the CLI and Stripe APIs.\n\n## Where to find sample commands![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Open the [Stripe API Reference](https://docs.stripe.com/api).\n2.  Use _command_ or _control_ + _F_ on your keyboard to search by API name.\n3.  Click the API name (for example, _Create a customer_).\n4.  Select **Stripe CLI** in the dropdown menu.\n\n![Select Stripe CLI in the dropdown menu](https://b.stripecdn.com/docs-statics-srv/assets/cli-commands.fb58dfa38b75963030832c9fa90566ac.png)\n\nSelect Stripe CLI in the dropdown menu.\n\n## Reference guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Reference guides | Stripe Documentation",
    "description": "Use these reference guides to explore the CLI and Stripe APIs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/pending-updates",
    "markdown": "# Pending updates | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to handle payment failures when updating subscriptions.\n\nUpdating a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") generates a new [invoice](https://docs.stripe.com/api/invoices \"invoices\") when:\n\n*   The subscription requires payment for the first time, such as the end of a trial period.\n*   The billing period changes.\n*   Changing the subscription causes a proration and `proration_behavior=always_invoice`.\n\nBy default, updates are applied regardless of whether payment on the new invoice succeeds. If payment fails, rolling back the updates is a manual process. You need to create a new invoice, prorate items on the invoice, and then initiate payment again. However, with the pending updates feature, you can make changes to subscriptions only if payment succeeds on the new invoice.\n\n#### Caution\n\nPending updates aren’t supported when the subscription’s [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) is `send_invoice` or when bank debits are used as the payment method for the subscription.\n\n[](#update-subscription)\n\nYou can use pending updates with the [update subscription](https://docs.stripe.com/api/subscriptions/update), [create subscription item](https://docs.stripe.com/api/subscription_items/create), and [update subscription item](https://docs.stripe.com/api/subscription_items/update) calls. When you make the update, set `payment_behavior=pending_if_incomplete`. The example below adds a new price to a subscription. Because `proration_behavior=always_invoice`, an invoice is created and payment is attempted when the update is made.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_behavior\"=\"pending_if_incomplete\" \\   -d \"proration_behavior\"=\"always_invoice\" \\   -d \"items[0][id]\"=\"si_09IkI4u3ZypJUk5onGUZpe8O\" \\   -d \"items[0][price]\"=\"price_CBb6IXqvTLXp3f\"`\n\nIf payment succeeds, the subscription is updated. If payment fails, the `Subscription` object that’s returned contains a `pending_update` hash with the changes:\n\n`{   \"id\": \"sub_49ty4767H20z6a\",   \"object\": \"subscription\",   \"application_fee_percent\": null,   \"pending_update\": {     \"expires_at\": 1571194285,     \"subscription_items\": [       {         \"id\": \"si_09IkI4u3ZypJUk5onGUZpe8O\",         \"price\": \"price_CBb6IXqvTLXp3f\"       }     ]   }, }`\n\n[\n\n## Handling failed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-failed-payments)\n\nAfter making the update, check the `pending_update` hash on the subscription. If you want to be notified automatically, you can build a [webhook](https://docs.stripe.com/webhooks \"webhook\") that listens for the `customer.subscription.updated` event. If the `pending_update` hash is populated, the payment failed and the subscription will continue to cycle as if no update request was made.\n\nPayments often fail because the payment method is declined or because they require customer authentication. You should build logic to handle both of these scenarios.\n\nUse the instructions for [payment failures](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method) to handle card declines. You need to attach a new payment method to the customer and then use the [pay](https://docs.stripe.com/api/invoices/pay) endpoint to pay the invoice that the update generates.\n\nUse the [customer action](https://docs.stripe.com/billing/subscriptions/overview#requires-action) instructions to handle customer authentication. This walks the user through the authentication process and then pays the invoice.\n\nA successful payment:\n\n*   Immediately applies the changes in the `pending_update` hash.\n*   Updates the invoice to `paid`.\n\nIf payment fails again, the `pending_update` hash remains on the subscription with the original [expiry date](https://docs.stripe.com/billing/subscriptions/pending-updates-reference#expiration) and no changes are applied.",
    "title": "Pending updates | Stripe Documentation",
    "description": "Learn how to handle payment failures when updating subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/triggers",
    "markdown": "# Trigger webhook events with the Stripe CLI\n\n## Learn how to trigger webhook events in test mode.\n\nThere are two ways to trigger webhook events in test mode:\n\n*   Do the actions that lead to the event you want to trigger. For example, [creating a Customer](https://docs.stripe.com/api/customers/create) with the Stripe API or in the Stripe Dashboard generates a `customer.created` event.\n*   Run a command with the Stripe CLI to automatically generate the event.\n\nThis guide focuses on the Stripe CLI.\n\n## Trigger events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo see the name of all events supported by the Stripe CLI, run this command.\n\nTo trigger a specific event, run this by replacing `<EVENT>` with the name of the event.\n\nFor example, this command triggers the `payment_intent.succeeded` event.\n\n`stripe trigger payment_intent.succeeded`\n\nThen, you can view the event in the [events page](https://dashboard.stripe.com/test/events) of the Stripe Dashboard or by using the [stripe listen](https://docs.stripe.com/cli/listen) command.\n\n#### Note\n\nDepending on the event that you trigger, the Stripe CLI might generate multiple related events. For example, when running `stripe trigger price.created`, the Stripe CLI needs to create a Product to create a Price, so it generates two events: `product.created` and `price.created`.\n\n## Customize events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo generate events, the Stripe CLI calls the Stripe API with some predefined parameters. For example, to trigger the `payment_intent.succeeded` event, the Stripe CLI calls the create PaymentIntent endpoint with the `amount` parameter set to `2000`. You can change these API parameters with the `override` flag.\n\n`stripe trigger <EVENT> --override <RESOURCE>:<PROPERTY>=<VALUE>`\n\nHere are some examples of using overrides.\n\n`# Set a top-level parameter stripe trigger customer.created --override customer:name=Bob  # Set a nested parameter stripe trigger customer.created --override customer:\"address[country]\"=FR  # Append an element to the end of a list stripe trigger customer.created --override customer:\"preferred_locales[]\"=FR  # Replace an element of a list stripe trigger customer.created --override customer:\"preferred_locales[0]\"=FR  # Set a parameter inside a list stripe trigger customer.subscription.created --override subscription:\"items[0][price]\"=price_xxx`\n\nYou can also combine multiple overrides on different resources.\n\n`stripe trigger price.created \\   --override product:name=foo \\   --override price:unit_amount=4200`\n\nTo figure out which resources and parameters you can change, review the relevant triggers in the [GitHub repository](https://github.com/stripe/stripe-cli/tree/master/pkg/fixtures/triggers) of the Stripe CLI.\n\n## Advanced customization of events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the available events or overrides aren’t sufficient for your use case, you can write a JSON file describing how to generate an event, and use the CLI to trigger that event. Read the [API reference](https://docs.stripe.com/cli/fixtures) to learn more.",
    "title": "Trigger webhook events with the Stripe CLI | Stripe Documentation",
    "description": "Learn how to trigger webhook events in test mode.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/explaining-identity",
    "markdown": "# Explain Identity to your customers\n\n## Answer customer questions about ID verification and Stripe Identity.\n\nIf you use Stripe Identity for ID verification, copy and customize these questions and answers to create Frequently Asked Questions (FAQs) around ID verification. To obtain Stripe logos, badges, and buttons for your site, visit the **Media assets** section on [stripe.com](https://stripe.com/newsroom/information).\n\n[](#open-ended)\n\nFor the following questions, provide your preferred answer:\n\n| Question | Additional information |\n| --- | --- |\n| **Why am I asked to verify my identity?** | Provide your preferred answer. Some users might be hesitant to share their ID information, so it’s important to help them understand why you’re asking for this information |\n| **Why was I rejected?** | You might want to offer alternative methods for verification if a user disputes their results. |\n| **Can I get verified using a different method?** | Privacy laws might require you to provide an alternative verification process that doesn’t use biometric technology if the user doesn’t consent to use of their biometric information. Consult your legal counsel for regional requirements. |\n| **How can I access or delete my verification data?** | Provide your data privacy process.<br><br>The Identity API has a [redaction endpoint](https://docs.stripe.com/api/identity/verification_sessions/redact) that allows you to delete the verification data that Stripe Identity stores on behalf of your business. For example, you can use this tool to meet your deletion requirements when an end-user from Europe or California asks you to delete their data, or when you collect an ID from a country such as Germany that requires you to delete an ID card upon completion of the verification even if there’s no deletion request from the end user. If you’ve created additional copies of a user’s data, you might also need to delete these as well.<br><br>Stripe doesn’t delete data on your behalf when we store the data as your processor, even if your end-user asks us to, because we recognize you must conduct your own legal analysis on whether deletion is appropriate.<br><br>If your end-user reaches out to us requesting deletion, we’ll respond to the request with respect to any data that we hold as data controller, and also recommend the end-user reach out to you to request deletion. |",
    "title": "Explain Identity to your customers | Stripe Documentation",
    "description": "Answer customer questions about ID verification and Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/upgrade",
    "markdown": "# Upgrade the Stripe CLI | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to upgrade the CLI.\n\nTake advantage of the latest features of the Stripe CLI.\n\n## Homebrew![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upgrade the Stripe CLI with [homebrew](https://brew.sh/), run:\n\n`brew upgrade stripe/stripe-cli/stripe`\n\n## Scoop![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upgrade the Stripe CLI with [Scoop](https://scoop.sh/), run:\n\n## macOS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upgrade the Stripe CLI on macOS without homebrew:\n\n1.  Download the latest `mac-os` tar.gz file of your cpu architecture type from [GitHub](https://github.com/stripe/stripe-cli/releases/latest).\n2.  Unzip the file: `tar -xvf stripe_[X.X.X]_mac-os_[ARCH_TYPE].tar.gz`.\n\nOptionally, install the binary in a location where you can execute it globally (for example, `/usr/local/bin`).\n\n## Linux![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upgrade the Stripe CLI on Linux without a package manager:\n\n1.  Download the latest `linux` tar.gz file from [GitHub](https://github.com/stripe/stripe-cli/releases/latest).\n2.  Unzip the file: `tar -xvf stripe_X.X.X_linux_x86_64.tar.gz`.\n3.  Move `./stripe` to your execution path.\n\n## Windows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upgrade the Stripe CLI on Windows without Scoop:\n\n1.  Download the latest `windows` zip file from [GitHub](https://github.com/stripe/stripe-cli/releases/latest).\n2.  Unzip the `stripe_X.X.X_windows_x86_64.zip` file.\n3.  Add the path to the unzipped `stripe.exe` file to your `Path` environment variable. To learn how to update environment variables, see the [Microsoft PowerShell documentation](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.3#saving-changes-to-environment-variables).\n\n#### Note\n\nWindows anti-virus scanners occasionally flag the Stripe CLI as unsafe. This is very likely a false positive. For more information, see [issue #692](https://github.com/stripe/stripe-cli/issues/692) in the GitHub repository.\n\n## Docker![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe CLI is also available as a [Docker image](https://hub.docker.com/r/stripe/stripe-cli). To install the latest version, run:\n\n`docker run --rm -it stripe/stripe-cli:latest`",
    "title": "Upgrade the Stripe CLI | Stripe Documentation",
    "description": "Learn how to upgrade the CLI.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/use-cases",
    "markdown": "# Subscription use cases | Stripe DocumentationThe Stripe Docs logo\n\n## Create a subscriptions integration with the Stripe Billing APIs.\n\n## Business models![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Manage recurring revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe’s revenue and finance automation tools to recognize revenue for accrual accounting, reduce lost revenue, and analyze your business performance with revenue reporting.",
    "title": "Subscription use cases | Stripe Documentation",
    "description": "Create a subscriptions integration with the Stripe Billing APIs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules",
    "markdown": "# Subscription Schedule | Stripe API Reference\n\n## [The Subscription Schedule object](https://docs.stripe.com/api/subscription_schedules/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    current\\_phasenullable object\n    \n    Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.\n    \n*   ID of the customer who owns the subscription schedule.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Configuration for the subscription schedule’s phases.\n    \n*   The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active` |\n    | `canceled` |\n    | `completed` |\n    | `not_started` |\n    | `released` |\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    ID of the subscription managed by the subscription schedule.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n*   #### \n    \n    completed\\_atnullable timestamp\n    \n\n*   #### \n    \n    released\\_atnullable timestamp\n    \n*   #### \n    \n    released\\_subscriptionnullable string\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n## [Create a schedule](https://docs.stripe.com/api/subscription_schedules/create)\n\nCreates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.\n\n### Parameters\n\n*   The identifier of the customer to create the subscription schedule for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.\n    \n*   #### \n    \n    start\\_datetimestamp | string\n    \n    When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on.\n    \n\n### More parameters\n\n### Returns\n\nReturns a subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcI8FsMbh0OeFs \\  -d start_date=1680716828 \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=price_1Mr3YcLkdIwHu7ixYCFhXHNb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Update a schedule](https://docs.stripe.com/api/subscription_schedules/update)\n\nUpdates an existing subscription schedule.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.\n    \n*   If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Prorate changes, and force an invoice to be immediately created for any prorations. |\n    | `create_prorations`<br><br>Prorate changes, but leave any prorations as pending invoice items to be picked up on the customer’s next invoice. |\n    | `none`<br><br>Does not create any prorations. |\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d end_behavior=release\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Retrieve a schedule](https://docs.stripe.com/api/subscription_schedules/retrieve)\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```",
    "title": "Subscription Schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/create",
    "markdown": "# Create a schedule | Stripe API Reference\n\nCreates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.\n\n### Parameters\n\n*   The identifier of the customer to create the subscription schedule for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.\n    \n*   #### \n    \n    start\\_datetimestamp | string\n    \n    When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on.\n    \n\n### More parameters\n\n### Returns\n\nReturns a subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcI8FsMbh0OeFs \\  -d start_date=1680716828 \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=price_1Mr3YcLkdIwHu7ixYCFhXHNb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Update a schedule](https://docs.stripe.com/api/subscription_schedules/update)\n\nUpdates an existing subscription schedule.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.\n    \n*   If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Prorate changes, and force an invoice to be immediately created for any prorations. |\n    | `create_prorations`<br><br>Prorate changes, but leave any prorations as pending invoice items to be picked up on the customer’s next invoice. |\n    | `none`<br><br>Does not create any prorations. |\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d end_behavior=release\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Retrieve a schedule](https://docs.stripe.com/api/subscription_schedules/retrieve)\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a schedule](https://docs.stripe.com/api/subscription_schedules/cancel)\n\nCancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n### Parameters\n\n*   If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.\n    \n\n### More parameters\n\n### Returns\n\nThe canceled `subscription_schedule` object. Its status will be `canceled` and `canceled_at` will be the current time.\n\nPOST /v1/subscription\\_schedules/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3owLkdIwHu7ix38CXMudt/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3owLkdIwHu7ix38CXMudt\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": 1680114847,  \"completed_at\": null,  \"created\": 1680114846,  \"current_phase\": null,  \"customer\": \"cus_NcIPFRC981NmaY\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"price\": \"price_1Mr3owLkdIwHu7ix0RyYpQzk\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"canceled\",  \"subscription\": null,  \"test_clock\": null}\n```",
    "title": "Create a schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/integration",
    "markdown": "# Integrate subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Create a subscriptions integration with the Stripe Billing APIs.\n\nSign up for developer updates:",
    "title": "Integrate subscriptions | Stripe Documentation",
    "description": "Create a subscriptions integration with the Stripe Billing APIs.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/prices/object",
    "markdown": "# The Price object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the price can be used for new purchases.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   The ID of the product this price is associated with.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The unit amount in cents to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.\n    \n\n### More attributes\n\n*   #### \n    \n    currency\\_optionsnullable objectExpandable\n    \n*   #### \n    \n    custom\\_unit\\_amountnullable object\n    \n\n*   #### \n    \n    lookup\\_keynullable string\n    \n*   #### \n    \n    tax\\_behaviornullable enum\n    \n*   #### \n    \n    tiersnullable array of objectsExpandable\n    \n\n*   #### \n    \n    transform\\_quantitynullable object\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Create a price](https://docs.stripe.com/api/prices/create)\n\nCreates a new price for an existing product. The price can be recurring or one-time.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   #### \n    \n    productstringRequired unless product\\_data is provided\n    \n    The ID of the product that this price will belong to.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   #### \n    \n    unit\\_amountintegerRequired conditionally\n    \n    A positive integer in cents (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.\n    \n\n### More parameters\n\n*   #### \n    \n    custom\\_unit\\_amountobjectRequired unless unit\\_amount is provided\n    \n\n*   #### \n    \n    product\\_dataobjectRequired unless product is provided\n    \n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe newly created `Price` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d \"recurring[interval]\"=month \\  -d \"product_data[name]\"=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Update a price](https://docs.stripe.com/api/prices/update)\n\nUpdates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n### Returns\n\nThe updated price object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Retrieve a price](https://docs.stripe.com/api/prices/retrieve)\n\nRetrieves the price with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a price if a valid price or plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [List all prices](https://docs.stripe.com/api/prices/list)\n\nReturns a list of your active prices, excluding [inline prices](https://docs.stripe.com/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set `active` to false.\n\n### Parameters\n\n*   Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).\n    \n*   Only return prices for the given currency.\n    \n*   Only return prices for the given product.\n    \n*   Only return prices of type `recurring` or `one_time`.\n    \n\n### More parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` prices, starting after prices `starting_after`. Each entry in the array is a separate price object. If no more prices are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/prices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",      \"object\": \"price\",      \"active\": true,      \"billing_scheme\": \"per_unit\",      \"created\": 1679431181,      \"currency\": \"usd\",      \"custom_unit_amount\": null,      \"livemode\": false,      \"lookup_key\": null,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NZKdYqrwEYx6iK\",      \"recurring\": {        \"aggregate_usage\": null,        \"interval\": \"month\",        \"interval_count\": 1,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"tax_behavior\": \"unspecified\",      \"tiers_mode\": null,      \"transform_quantity\": null,      \"type\": \"recurring\",      \"unit_amount\": 1000,      \"unit_amount_decimal\": \"1000\"    }    {...}    {...}  ],}\n```",
    "title": "The Price object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/object",
    "markdown": "# The Subscription Schedule object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    current\\_phasenullable object\n    \n    Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.\n    \n*   ID of the customer who owns the subscription schedule.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Configuration for the subscription schedule’s phases.\n    \n*   The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active` |\n    | `canceled` |\n    | `completed` |\n    | `not_started` |\n    | `released` |\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    ID of the subscription managed by the subscription schedule.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n*   #### \n    \n    completed\\_atnullable timestamp\n    \n\n*   #### \n    \n    released\\_atnullable timestamp\n    \n*   #### \n    \n    released\\_subscriptionnullable string\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n## [Create a schedule](https://docs.stripe.com/api/subscription_schedules/create)\n\nCreates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.\n\n### Parameters\n\n*   The identifier of the customer to create the subscription schedule for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.\n    \n*   #### \n    \n    start\\_datetimestamp | string\n    \n    When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on.\n    \n\n### More parameters\n\n### Returns\n\nReturns a subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcI8FsMbh0OeFs \\  -d start_date=1680716828 \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=price_1Mr3YcLkdIwHu7ixYCFhXHNb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Update a schedule](https://docs.stripe.com/api/subscription_schedules/update)\n\nUpdates an existing subscription schedule.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.\n    \n*   If the update changes the current phase, indicates whether the changes should be prorated. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Prorate changes, and force an invoice to be immediately created for any prorations. |\n    | `create_prorations`<br><br>Prorate changes, but leave any prorations as pending invoice items to be picked up on the customer’s next invoice. |\n    | `none`<br><br>Does not create any prorations. |\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated subscription schedule object if the call succeeded.\n\nPOST /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d end_behavior=release\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Retrieve a schedule](https://docs.stripe.com/api/subscription_schedules/retrieve)\n\nRetrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription schedule object if a valid identifier was provided.\n\nGET /v1/subscription\\_schedules/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3YdLkdIwHu7ixjop3qtff \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680113835,  \"current_phase\": null,  \"customer\": \"cus_NcI8FsMbh0OeFs\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discounts\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"discounts\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": null,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"not_started\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [List all schedules](https://docs.stripe.com/api/subscription_schedules/list)\n\nRetrieves the list of your subscription schedules.\n\n### Parameters\n\n*   Only return subscription schedules for the given customer.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription schedules, starting after subscription schedule `starting_after`. Each entry in the array is a separate subscription schedule object. If no more subscription schedules are available, the resulting array will be empty.\n\nGET /v1/subscription\\_schedules\n\n```\ncurl -G https://api.stripe.com/v1/subscription_schedules \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_schedules\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_sched_1Mr3YdLkdIwHu7ixjop3qtff\",      \"object\": \"subscription_schedule\",      \"application\": null,      \"canceled_at\": null,      \"completed_at\": null,      \"created\": 1680113835,      \"current_phase\": null,      \"customer\": \"cus_NcI8FsMbh0OeFs\",      \"default_settings\": {        \"application_fee_percent\": null,        \"automatic_tax\": {          \"enabled\": false,          \"liability\": null        },        \"billing_cycle_anchor\": \"automatic\",        \"billing_thresholds\": null,        \"collection_method\": \"charge_automatically\",        \"default_payment_method\": null,        \"default_source\": null,        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"on_behalf_of\": null,        \"transfer_data\": null      },      \"end_behavior\": \"release\",      \"livemode\": false,      \"metadata\": {},      \"phases\": [        {          \"add_invoice_items\": [],          \"application_fee_percent\": null,          \"billing_cycle_anchor\": null,          \"billing_thresholds\": null,          \"collection_method\": null,          \"coupon\": null,          \"currency\": \"usd\",          \"default_payment_method\": null,          \"default_tax_rates\": [],          \"description\": null,          \"discounts\": null,          \"end_date\": 1712339228,          \"invoice_settings\": null,          \"items\": [            {              \"billing_thresholds\": null,              \"discounts\": null,              \"metadata\": {},              \"plan\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"price\": \"price_1Mr3YcLkdIwHu7ixYCFhXHNb\",              \"quantity\": 1,              \"tax_rates\": []            }          ],          \"metadata\": {},          \"on_behalf_of\": null,          \"proration_behavior\": \"create_prorations\",          \"start_date\": 1680716828,          \"transfer_data\": null,          \"trial_end\": null        }      ],      \"released_at\": null,      \"released_subscription\": null,      \"renewal_interval\": null,      \"status\": \"not_started\",      \"subscription\": null,      \"test_clock\": null    }    {...}    {...}  ],}\n```",
    "title": "The Subscription Schedule object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/invoices/subscription",
    "markdown": "# Subscription invoices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage subscription invoices.\n\n[Invoices](https://docs.stripe.com/api/invoices \"invoices\") are core resources in Stripe, representing the amount a customer owes. Stripe generates an invoice for every period in a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") billing cycle period. You can also manually generate invoices through the Dashboard or API for off-cycle or one-time payments. Read the guides to learn more about the lifecycle for [standalone invoices](https://docs.stripe.com/invoicing/overview#invoice-lifecycle) and [subscription-generated invoices](https://docs.stripe.com/billing/subscriptions/overview#invoice-lifecycle).\n\n[](#sub-invoice-lifecycle)\n\nThe following sections describe how Stripe handles an invoice throughout a subscription lifecycle.\n\n### New subscription invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you subscribe a customer, Stripe:\n\n*   Creates an invoice.\n*   [Finalizes](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized) the invoice.\n\nIf the payment succeeds on a subscription’s first invoice or the invoice doesn’t require payment, the invoice transitions to [status=paid](https://docs.stripe.com/api/invoices/object#invoice_object-status), and the subscription becomes active.\n\nUntil the payment succeeds, the invoice [status](https://docs.stripe.com/api/invoices/object#invoice_object-status) remains `open` and [auto\\_advance](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection#toggle-auto-advance) remains `false`. The subscription [status](https://docs.stripe.com/api/subscriptions/object#subscription_object-status) remains `incomplete`. Learn how to resolve payment failures for new subscription invoices that [require a payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\nIn some cases, upgrading or downgrading the subscription also creates a new invoice. We turn off [auto\\_advance](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection#toggle-auto-advance) for these invoices from the outset.\n\nWith a finalized invoice, you can’t add invoice items or make other modifications that affect the amount due. However, you can still add invoice items to the customer. The added items apply to the next invoice.\n\n### Subscription renewal invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen subscriptions renew, Stripe:\n\n*   Creates an invoice.\n    \n*   Leaves the invoice in a `draft` state for about an hour.\n    \n*   Attempts to finalize and pay the invoice with the default payment method.\n    \n*   Changes the invoice status to `paid` if payment succeeds.\n    \n\nWhen Stripe creates an invoice, you receive—through configured [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks)—an `invoice.created` event. In this case, the attribute of the invoice [status](https://docs.stripe.com/api/invoices/object#invoice_object-status) is `draft`, which means that its invoice items are open for modification.\n\n### Collect payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an invoice is due, Stripe tries to collect payment by either [automatically charging](https://docs.stripe.com/invoicing/automatic-charging) the [payment method](https://docs.stripe.com/payments/payment-methods/integration-options) on file, or [emailing the invoice](https://docs.stripe.com/invoicing/integration#accept-invoice-payment) to customers.\n\n#### Retry payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers several options for dealing with [failed payments](https://docs.stripe.com/invoicing/automatic-collection), including machine-learning powered [Smart Retries](https://docs.stripe.com/invoicing/automatic-collection#smart-retries).\n\n[](#manage-invoices)\n\nThe following sections describe how to perform basic actions on invoices in the Dashboard. For more options around using invoices, see [Managing invoices](https://docs.stripe.com/invoicing/dashboard/manage-invoices).\n\n### Create an invoice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically creates an invoice for subscriptions at the end of each billing cycle.\n\nLearn how to [create a one-off invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n\nStripe finalizes and sends the invoice in 1 hour. Before the invoice is finalized, you can edit it. Read more about making changes in the [Invoice details page](https://docs.stripe.com/invoicing/dashboard/manage-invoices#invoice-details-page).\n\n### Edit an invoice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith the Dashboard, you can duplicate an invoice and modify the new copy. When you duplicate an invoice, Stripe copies all of the information on the original invoice except for credit notes, deleted (or archived) products, prices, coupons, discounts, and tax rates. If you made a mistake on an invoice you already created, duplicate it, make your corrections, and then send the new invoice. Remember to [void](https://docs.stripe.com/invoicing/overview#void) the incorrect invoice as well.\n\n#### Note\n\nYou can change the status of an [open](https://docs.stripe.com/invoicing/overview#open) invoice in the Dashboard by going to its details page and choosing **More** > **Change Invoice Status**.\n\nTo duplicate an invoice, [view your invoices](https://dashboard.stripe.com/invoices) and click the overflow menu () for the invoice you want to duplicate. Click **Duplicate invoice** to create, edit, and then send the new invoice.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice-duplication.7f22a89383b54d5e45693f642942afa1.png)\n\nDuplicate an invoice from the Dashboard\n\n### Preview upcoming invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Retrieve an invoice](https://docs.stripe.com/api#retrieve_invoice) API provides a mechanism for viewing an existing invoice. Stripe also provides an endpoint for [retrieving an upcoming invoice](https://docs.stripe.com/api#upcoming_invoice). This preview reflects the base price, pending invoice items, discounts, and any existing customer credit balance.\n\nWhen fetching the preview, you can also model what the invoice would look like if you changed the subscription in one of these ways:\n\n*   Swapping the underlying price.\n    \n*   Altering the quantity.\n    \n*   Applying a trial period.\n    \n*   Adding a coupon.\n    \n\n[](#update-first-invoice)\n\nHow you edit the first invoice of a subscription depends on the setting for the customer’s payment method for the subscription. If unsure, you can check the payment method setting using the API or the Dashboard.\n\nTo check subscription payment method using the API, check the value of [`collection_method`](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) on the `Subscriptions` object for the customer. A value of `send_invoice` means Stripe emails the customer their invoice. A value of `charge_automatically` means Stripe charges the customer on your behalf using their default payment method.\n\nTo check subscription payment method in the Dashboard, open the [Subscriptions page](https://dashboard.stripe.com/subscriptions). Then, click the subscription you want to check to open it’s detailed view. In the **Subscription details** section, the **Billing method** field value defines the payment method: **Charge default payment method** or **Send invoice**.\n\nFor customers that receive invoices, you have a one hour period after creation before Stripe finalizes the subscription. Within this timeframe you can make necessary changes to the subscription, like changing amount or line items, adding a description or metadata, and so on.\n\nAfter the initial hour, you can no longer make updates. Stripe emails the invoice to the customer to collect subscription payment.\n\n[](#Customize)\n\nYou can customize invoices in several ways, including:\n\n*   [Add extra items to a future invoice](#adding-upcoming-invoice-items)\n*   [Increase the frequency of invoices](#pending-items-frequently)\n*   [Add items to a customer’s first invoice](#first-invoice-extra)\n*   [Add items to a draft subscription invoice](#adding-draft-invoice-items)\n*   [Generate an invoice outside of the subscription cycle](#generating-invoices)\n*   [Pause a subscription invoice for review](#holding-review)\n*   [Issue a subscription invoice with configurable item prices](#invoice-item-prices)\n\n### Add extra invoice items to a future invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add up to 250 invoice items to an invoice. To [add extra invoice items](https://docs.stripe.com/api/invoiceitems/create) to the next invoice in the cycle:\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d price=price_CBb6IXqvTLXp3f \\  -d customer=cus_4fdAW5ftNQow1a`\n\nThese one-off items are added to the next invoice created for this customer. To make sure this is added to a specific subscription, use the optional `subscription` parameter to apply it to that subscription.\n\n#### Invoice pending items more frequently ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOther than [changing the billing cycle](https://docs.stripe.com/billing/subscriptions/billing-cycle), there are a few ways to invoice these items without adjusting the normal subscription cycle:\n\n*   Create a [one-off invoice](https://docs.stripe.com/invoicing/dashboard) for the customer.\n    \n*   Charge a subscription whenever the amount due reaches a [threshold](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#billing-thresholds).\n    \n*   Use [pending\\_invoice\\_item\\_interval](https://docs.stripe.com/api/subscriptions/object#subscription_object-pending_invoice_item_interval) to specify an interval for how often to bill for any pending invoice items. This is equivalent to having Stripe create a [one-off invoice](https://docs.stripe.com/invoicing/dashboard) for the subscription on a recurring basis.\n    \n\nInclude a one-time charge to the first subscription invoice using `add_invoice_items`:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{RECURRING_PRICE_ID}} \\   -d \"add_invoice_items[0][price]\"={{PRICE_ID}} \\   -d payment_behavior=default_incomplete`\n\n#### Caution\n\n### Add invoice items to a draft subscription invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a subscription renews and creates an invoice, Stripe sends the `invoice.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. Stripe [waits approximately one hour](https://docs.stripe.com/billing/subscriptions/webhooks#understand) before finalizing the invoice and attempting payment, or sending an email.\n\nDuring that delay, the invoice is a [`draft`](https://docs.stripe.com/api/invoices/object#invoice_object-status) and is editable. You can [create invoice items](https://docs.stripe.com/api/invoiceitems/create) on that invoice. Make sure to provide the [invoice](https://docs.stripe.com/api/invoiceitems/create#create_invoiceitem-invoice) parameter when you create these invoice items. Otherwise, they’re added as pending items and are included in the next subscription period.\n\nThese invoice items behave slightly differently than invoice items automatically generated by Stripe:\n\n*   Pending invoice items are always charged when the billing period ends for any canceled subscription. Canceling a customer’s subscription prevents them from being billed again _if no invoice items exist_.\n    \n*   Pending invoice items aren’t prorated when a customer’s subscription changes.\n    \n\nIf pending invoice items remain after a subscription cancels, Stripe generates an invoice and attempts to bill the customer for them at the end of the next billing period. These invoice items are (similarly) not prorated when a subscription changes.\n\n#### Manage pending invoice items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can see a customer’s pending invoice items by navigating to the [Customers page](https://dashboard.stripe.com/customers), and clicking on their name. If the customer has a pending invoice item, it appears under **Pending invoice items**. An invoice item appears as pending if it’s not attached to any invoice.\n\nUnder **Pending invoice items**, you can also choose to create a new invoice item, or instantly invoice everything listed. When you click **Invoice now**, a dialog appears that lets you select whether to charge the default source or email the invoice to the customer. Additionally, the dialog gives you the option to calculate tax automatically.\n\n### Generate an invoice for subscription items outside the billing cycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can invoice pending invoice items outside of the regular billing cycle by [generating a one-off invoice](https://docs.stripe.com/invoicing/dashboard). Generating a one-off invoice pulls in any pending invoice items that would have been added to the regularly scheduled invoice.\n\n#### Caution\n\nWhen you manually generate an invoice, Stripe does not apply the [tax rates](https://docs.stripe.com/billing/taxes) you may have established on the subscription. If taxes should apply, you must explicitly [add the tax rates](https://docs.stripe.com/invoicing/taxes/tax-rates) to the invoice.\n\n### Pause a subscription invoice for review ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRather than automatically attempting payment at the end of a billing period, you can pause the invoice for review or corrections. To pause an invoice:\n\n1.  Pause automatic collection within one hour of receiving the `invoice.created` event. You can do this by setting `auto_advance=false` in the API, or by going to [Subscriptions and emails](https://dashboard.stripe.com/settings/billing/automatic) in the Dashboard. Locate the pause payment section, and click **Set up** to make changes. This feature prevents Stripe from automatically attempting payment from your customer for the invoice amount, and from emailing the invoice.\n    \n2.  Review the invoice.\n    \n3.  After you’re ready to charge the customer, resume automatic collection. You can this by either setting [auto\\_advance=true](https://docs.stripe.com/api/invoices/update#update_invoice-auto_advance), or by updating the pause payment options in the Dashboard.\n    \n\n### Issue a subscription invoice with configurable item prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can issue invoices with line item prices that exclude inclusive tax. Tax-exclusive prices are only shown in the invoice PDF. That means, when using inclusive tax, the Hosted Invoice Page and invoice emails show tax-inclusive prices. You can define the settings for net prices in the Dashboard or API.\n\n*   **Include inclusive tax**—The invoice PDF displays line item prices including the inclusive tax. (This is the default.)\n*   **Exclude tax**—The invoice PDF displays line item prices excluding tax.\n\n#### Order precedence\n\nIf you set a default for line item prices at the customer level, it takes precedence over account-level settings.\n\n[](#subscription-metadata)\n\nAfter a subscription creates an invoice, it includes the subscription’s `metadata` in the following ways:\n\n*   The invoice’s [subscription\\_details.metadata](https://docs.stripe.com/api/invoices/object#invoice_object-subscription_details-metadata) attribute always contains the subscription’s `metadata` at the time of invoice creation, even if the subscription `metadata` is later modified.\n*   The [metadata](https://docs.stripe.com/api/invoice/line_item#invoice_line_item_object-metadata) attribute of [invoice line items](https://docs.stripe.com/api/invoices/line_item) with [type=“subscription”](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) reflects the most recent subscription `metadata` at the time of retrieving the invoice, meaning it might differ from the `metadata` at the time of invoice creation.\n*   Invoice line items with [type=“invoiceitem”](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) don’t contain the subscription’s `metadata`.\n\nWhen you modify a subscription invoice line item’s `metadata` directly, either with the [invoice line update](https://docs.stripe.com/api/invoices/update_line) or the [bulk invoice line update](https://docs.stripe.com/invoicing/bulk-update-line-item) endpoint, the update request declares the invoice line item `metadata`. Any “inherited” Subscription `metadata` isn’t preserved implicitly.\n\n[Subscription item metadata](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-metadata) isn’t automatically propagated to any other Stripe objects.",
    "title": "Subscription invoices | Stripe Documentation",
    "description": "Learn how to manage subscription invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/subscription-schedules/use-cases",
    "markdown": "# Subscription schedules use cases | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use subscription schedules.\n\nTo understand [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") schedules, imagine a fictional newspaper company called The Pacific. It offers two subscription options:\n\n*   _Print_, where customers receive the physical paper\n*   _Digital_, where customers get access to exclusive content on The Pacific’s website\n\nBoth subscriptions bill monthly. Browse possible options for subscription schedules below.\n\n## Start a subscription in the future ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, new print subscriptions start on the first day of the next month. To accomplish this, the `start_date` is set to a point in the future. The code below creates a subscription that starts in the future:\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=1690873200 \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"={{PRICE_PRINT}} \\   -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12`\n\n## Backdate a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen customers subscribe to the digital plan, The Pacific backdates their subscriptions to the first day of the current month. Backdating charges for time in the past and allows digital subscribers to access the website immediately.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=1688194800 \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"={{PRICE_DIGITAL}} \\   -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12`\n\n## Add a schedule to an existing subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific may discover that some of their original customers are on subscriptions without schedules. Because these subscriptions exist already, the subscription IDs can be passed in the `from_subscription` attribute to add a schedule. Passing the subscription IDs in this way creates a schedule with one phase that’s based on the current billing period of the subscription.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=  {{SUBSCRIPTION_ID}}    `\n\nWhile adding these schedules, some customers decide to get a print subscription so The Pacific adds a second phase to the schedule to start the print plan one month from now. The following use case shows an example of this process.\n\n## Upgrade subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific offers an option to start with a print subscription for one month, then automatically add the digital option. Some customers prefer this because they can test out the print publication first and then decide if they want to continue or cancel their subscription.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"={{PRICE_PRINT}} \\   -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=1 \\  -d \"phases[1][items][0][price]\"={{PRICE_PRINT}} \\   -d \"phases[1][items][0][quantity]\"=1 \\  -d \"phases[1][items][1][price]\"={{PRICE_DIGITAL}} \\   -d \"phases[1][items][1][quantity]\"=1 \\  -d \"phases[1][iterations]\"=11`\n\n## Downgrade subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific also offers an option to start a subscription with both the print and digital publications, and then downgrade to only the print publication for the rest of the subscription. [Customers](https://docs.stripe.com/api/customers \"Customers\") use this option to test out both publications to see how they like them.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"={{PRICE_DIGITAL}} \\   -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][items][1][price]\"={{PRICE_PRINT}} \\   -d \"phases[0][items][1][quantity]\"=1 \\  -d \"phases[0][iterations]\"=1 \\  -d \"phases[1][items][0][price]\"={{PRICE_PRINT}} \\   -d \"phases[1][items][0][quantity]\"=1 \\  -d \"phases[1][iterations]\"=11`\n\n## Change subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific offers two print subscription options, a basic option with advertisements or a premium option without advertisements. Some customers on the premium option decide they want to change to the basic option with advertisements at the next billing cycle. Create a schedule using the existing subscription and then update the schedule with the basic option with advertisements as a new phase.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Create a subscription schedule with the existing subscription schedule = Stripe::SubscriptionSchedule.create({   from_subscription: 'sub_ERf72J8Sc7qx7D', })  # Update the schedule with the new phase Stripe::SubscriptionSchedule.update(   schedule.id,   {     phases: [       {         items: [           {             price: schedule.phases[0].items[0].price,             quantity: schedule.phases[0].items[0].quantity,           },         ],         start_date: schedule.phases[0].start_date,         end_date: schedule.phases[0].end_date,       },       {         items: [           {             price: '{{PRICE_PRINT_BASIC}}',             quantity: 1,           },         ],         iterations: 1,       },     ],   }, )`\n\n## Increase the quantity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also schedule increases to the quantities on a subscription. The schedule below starts with one instance of the digital publication for one month. In the second phase, the quantity is increased to 2 for 11 more months.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=1 \\  -d \"phases[1][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][iterations]\"=11`\n\n## Use coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes The Pacific runs subscription specials. The schedule below starts the customer on the print publication at 50% off for six months. The schedule removes the coupon from the subscription in the second phase, which entails the remaining six months.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=6 \\  -d \"phases[0][coupon]\"=  {{COUPON_ID}}   \\  -d \"phases[1][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[1][items][0][quantity]\"=1 \\  -d \"phases[1][iterations]\"=6`\n\n## Change tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific operates in several jurisdictions, and some of them have unique tax rates for subscription based businesses. One of these jurisdictions requires two tax rates: one for the first month when a customer initially subscribes, and one for recurring billings.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][items][0][tax_rates][0]\"=txr_2J8lmBBGHJYyuUJqF6QJtaAA \\  -d \"phases[0][iterations]\"=1 \\  -d \"phases[1][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[1][items][0][quantity]\"=1 \\  -d \"phases[1][items][0][tax_rates][0]\"=txr_2J8lmBBGHJYyuUJqF6QJtbBB \\  -d \"phases[1][iterations]\"=11`\n\n## Release a subscription from a schedule ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [release](https://docs.stripe.com/api/subscription_schedules/release) a subscription from a schedule as long as the status of the schedule is `not_started` or `active`. Releasing a subscription leaves it in place but removes the schedule and any remaining phases.\n\n`curl -X POST https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n`/release \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Cancel a schedule and subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is `not_started` or `active`.\n\n`curl -X POST https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n`/cancel \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Reset the billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Pacific bills their long-time print customers on whichever day of the month they originally subscribed. This day is their billing cycle anchor.\n\nIf these customers transition to the digital edition, The Pacific schedules their transition date for the 1st day of the following month. They also reset the billing cycle anchor to that same date.\n\nYou can verify that the billing cycle anchor gets reset by creating a subscription using the sample code below. Look at the subscription in the Dashboard, and notice that the Upcoming [Invoice](https://docs.stripe.com/api/invoices \"invoices\") is scheduled to bill the customer as soon as the digital subscription starts on the 1st.\n\nTo see what happens if you don’t reset the anchor, run the sample code again, but remove the line that sets the billing cycle anchor to `phase_start`. Without that line, the Upcoming Invoice in the Dashboard waits to bill the customer until a full month from today, despite the transition that occurs on the 1st.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d \"phases[0][items][0][price]\"={{PRICE_PRINT}} \\   -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][end_date]\"=1690873200 \\  -d \"phases[1][items][0][price]\"={{PRICE_DIGITAL}} \\   -d \"phases[1][items][0][quantity]\"=1 \\  -d \"phases[1][iterations]\"=11 \\  -d \"phases[1][billing_cycle_anchor]\"=phase_start`\n\n## Installment plans ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstallment plans allow customers to make partial payments for a set amount of time until the total amount is paid. For example, when The Pacific buys new printing presses, they sell the used ones to other publications. Smaller publications rarely have enough funds to pay for a printing press upfront, so they pay using an installment plan instead.\n\nFor most presses, The Pacific charges 1,000 USD per month so a reusable price is created:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d unit_amount=100000 \\  -d currency=usd \\  -d product=prod_Hh99apo1OViyGW \\  -d \"recurring[interval]\"=month`\n\nDepending on the make, model, and age of the printing press, The Pacific charges different amounts. This example charges 1,000 USD each month for 6 months, for a total of 6,000 USD.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=cancel \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=6`\n\nThe number of `iterations` is multiplied by the price’s interval—6 monthly payments in this example—to determine the number of times the customer is charged. `end_behavior` determines what happens to the subscription after the last iteration is complete. In an installment plan, the subscription isn’t needed anymore so `end_behavior` is set to `cancel`.\n\nIn rare cases, The Pacific charges less than the usual 1,000 USD per month. In these scenarios, they use `price_data` to create a single-use price. This example creates a 500 USD price, and charges monthly for 6 months:\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d start_date=now \\  -d end_behavior=cancel \\  -d \"phases[0][items][0][price_data][currency]\"=usd \\  -d \"phases[0][items][0][price_data][product]\"=prod_Hh99apo1OViyGW \\  -d \"phases[0][items][0][price_data][recurring][interval]\"=month \\  -d \"phases[0][items][0][price_data][unit_amount]\"=50000 \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=6`",
    "title": "Subscription schedules use cases | Stripe Documentation",
    "description": "Learn how to use subscription schedules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/features",
    "markdown": "# Subscription features | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register/billing)\n\nor\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fbilling%2Fsubscriptions%2Ffeatures)\n\n[](https://docs.stripe.com/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register/billing)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fbilling%2Fsubscriptions%2Ffeatures)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[\n\nNo-code\n\n\n\n](https://docs.stripe.com/no-code)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[Overview](https://docs.stripe.com/finance-automation)\n\nBilling\n\n[Overview](https://docs.stripe.com/billing)\n\n[About the Billing APIs](https://docs.stripe.com/billing/billing-apis)\n\n[Subscriptions](https://docs.stripe.com/subscriptions)\n\n[Overview](https://docs.stripe.com/billing/subscriptions/overview \"Learn about the lifecycles of Stripe Billing’s subscriptions and invoices\")\n\n[Quickstart](https://docs.stripe.com/billing/quickstart \"Quickstart\")\n\n[Use cases](https://docs.stripe.com/billing/subscriptions/use-cases)\n\n[Build your integration](https://docs.stripe.com/billing/subscriptions/integration)\n\nSubscription features\n\n[Subscription invoices](https://docs.stripe.com/billing/invoices/subscription \"Learn how to manage subscription invoices\")\n\n[Subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules \"Learn about subscription schedules and how to use them\")\n\n[Subscription metrics](https://docs.stripe.com/billing/subscriptions/view-metrics \"Use the Dashboard to view metrics about your subscriptions\")\n\nSubscription pricing\n\n[Recurring pricing models](https://docs.stripe.com/products-prices/pricing-models \"Understand and build models for recurring prices\")\n\n[Embed a pricing table](https://docs.stripe.com/payments/checkout/pricing-table \"Display a pricing table on your website and take customers directly to Stripe Checkout\")\n\nStart subscriptions\n\n[Set quantities](https://docs.stripe.com/billing/subscriptions/quantities \"Vary the cost of a subscription by subscribing a customer to multiple quantities of a product\")\n\n[Set billing cycles](https://docs.stripe.com/billing/subscriptions/billing-cycle \"Learn how to set the billing date for subscriptions\")\n\n[Backdate subscriptions](https://docs.stripe.com/billing/subscriptions/backdating \"Bill customers for time that has already elapsed.\")\n\n[Subscribe to multiple items](https://docs.stripe.com/billing/subscriptions/multiple-products \"Create subscriptions with multiple products, all billed in a single invoice.\")\n\n[Set trial periods](https://docs.stripe.com/billing/subscriptions/trials \"Delay payments on active subscriptions using trial periods.\")\n\n[Apply coupons](https://docs.stripe.com/billing/subscriptions/coupons \"Add discounts to a subscription using coupons and promotion codes\")\n\n[Migrate subscriptions to Stripe](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions \"Import subscriptions from other sources into Stripe\")\n\nSubscription payments\n\n[Subscription payment methods](https://docs.stripe.com/billing/subscriptions/payment-methods-setting \"Learn how to specify which payment methods are allowed for a subscription.\")\n\n[Integrate with third-party payment processing](https://docs.stripe.com/billing/subscriptions/third-party-payment-processing \"Integrate subscriptions with third-party payment providers\")\n\n[Collection methods](https://docs.stripe.com/billing/collection-method \"Configure your preferred method to collect on invoices and subscriptions\")\n\n[Share a link to update payment details](https://docs.stripe.com/billing/subscriptions/update-payment-method \"Give your customers links they can use to update subscription payment details\")\n\n[Strong Customer Authentication (SCA)](https://docs.stripe.com/billing/migration/strong-customer-authentication \"Update your integration to support Strong Customer Authentication (SCA) requirements\")\n\nManage subscriptions\n\n[Modify subscriptions](https://docs.stripe.com/billing/subscriptions/change \"Learn how to change existing subscriptions.\")\n\n[Manage pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates \"Learn how to handle payment failures when updating a subscription\")\n\n[Invoicing](https://docs.stripe.com/invoicing \"Create and manage invoices for one-time payments\")\n\n[Usage-based Billing](https://docs.stripe.com/billing/subscriptions/usage-based)\n\n[Connect and Billing](https://docs.stripe.com/billing/multi-entity-business)\n\n[Tax and Billing](https://docs.stripe.com/billing/taxes)\n\n[Quotes](https://docs.stripe.com/quotes \"Learn about quotes\")\n\n[Revenue recovery](https://docs.stripe.com/billing/revenue-recovery \"Learn about automated revenue recovery features for subscriptions\")\n\n[Automations](https://docs.stripe.com/billing/automations)\n\n[Revenue recognition](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing \"Use Revenue Recognition with subscriptions\")\n\n[Customer management](https://docs.stripe.com/customer-management \"Learn how to enable self-serve customer management\")\n\n[Entitlements](https://docs.stripe.com/billing/entitlements \"Determine when you can grant your customers access to your product's features and when to revoke access.\")\n\n[Test your integration](https://docs.stripe.com/billing/testing \"Test your billing integration\")\n\nTax\n\nReporting\n\nData\n\nStartup incorporation\n\n[Home](https://docs.stripe.com/ \"Home\")[Finance automation](https://docs.stripe.com/finance-automation \"Finance automation\")[Billing](https://docs.stripe.com/billing \"Billing\")[Subscriptions](https://docs.stripe.com/subscriptions \"Subscriptions\")\n\n## Explore subscription features in depth.\n\n## Core concepts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/billing/invoices/subscription \"Subscription invoices\")\n\n[Subscription invoices](https://docs.stripe.com/billing/invoices/subscription \"Subscription invoices\")\n\n[\n\nLearn how to manage subscription invoices.\n\n](https://docs.stripe.com/billing/invoices/subscription \"Subscription invoices\")\n\n[](https://docs.stripe.com/billing/subscriptions/subscription-schedules \"Subscription schedules\")\n\n[Subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules \"Subscription schedules\")\n\n[\n\nLearn about subscription schedules and how to use them.\n\n](https://docs.stripe.com/billing/subscriptions/subscription-schedules \"Subscription schedules\")\n\n[](https://docs.stripe.com/billing/subscriptions/view-metrics \"Subscription metrics\")\n\n[Subscription metrics](https://docs.stripe.com/billing/subscriptions/view-metrics \"Subscription metrics\")\n\n[\n\nUse the Dashboard to view metrics about your subscriptions.\n\n](https://docs.stripe.com/billing/subscriptions/view-metrics \"Subscription metrics\")\n\n## Subscription pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/products-prices/pricing-models \"Recurring pricing models\")\n\n[Recurring pricing models](https://docs.stripe.com/products-prices/pricing-models \"Recurring pricing models\")\n\n[\n\nUnderstand and build models for recurring prices.\n\n](https://docs.stripe.com/products-prices/pricing-models \"Recurring pricing models\")\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Embed a pricing table\")\n\n[Embed a pricing table](https://docs.stripe.com/payments/checkout/pricing-table \"Embed a pricing table\")\n\n[\n\nDisplay a pricing table on your website and take customers directly to Stripe Checkout.\n\n](https://docs.stripe.com/payments/checkout/pricing-table \"Embed a pricing table\")\n\n## Start subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/billing/subscriptions/quantities \"Set quantities\")\n\n[Set quantities](https://docs.stripe.com/billing/subscriptions/quantities \"Set quantities\")\n\n[\n\nVary the cost of a subscription by subscribing a customer to multiple quantities of a product.\n\n](https://docs.stripe.com/billing/subscriptions/quantities \"Set quantities\")\n\n[](https://docs.stripe.com/billing/subscriptions/billing-cycle \"Set billing cycles\")\n\n[Set billing cycles](https://docs.stripe.com/billing/subscriptions/billing-cycle \"Set billing cycles\")\n\n[\n\nLearn how to set the billing date for subscriptions.\n\n](https://docs.stripe.com/billing/subscriptions/billing-cycle \"Set billing cycles\")\n\n[](https://docs.stripe.com/billing/subscriptions/backdating \"Backdate subscriptions\")\n\n[Backdate subscriptions](https://docs.stripe.com/billing/subscriptions/backdating \"Backdate subscriptions\")\n\n[\n\nBill customers for time that has already elapsed.\n\n](https://docs.stripe.com/billing/subscriptions/backdating \"Backdate subscriptions\")\n\n[](https://docs.stripe.com/billing/subscriptions/multiple-products \"Subscribe to multiple items\")\n\n[Subscribe to multiple items](https://docs.stripe.com/billing/subscriptions/multiple-products \"Subscribe to multiple items\")\n\n[\n\nCreate subscriptions with multiple products, all billed in a single invoice.\n\n](https://docs.stripe.com/billing/subscriptions/multiple-products \"Subscribe to multiple items\")\n\n[](https://docs.stripe.com/billing/subscriptions/trials \"Set trial periods\")\n\n[Set trial periods](https://docs.stripe.com/billing/subscriptions/trials \"Set trial periods\")\n\n[\n\nDelay payments on active subscriptions using trial periods.\n\n](https://docs.stripe.com/billing/subscriptions/trials \"Set trial periods\")\n\n[](https://docs.stripe.com/billing/subscriptions/coupons \"Apply coupons\")\n\n[Apply coupons](https://docs.stripe.com/billing/subscriptions/coupons \"Apply coupons\")\n\n[\n\nAdd discounts to a subscription using coupons and promotion codes.\n\n](https://docs.stripe.com/billing/subscriptions/coupons \"Apply coupons\")\n\n[](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions \"Migrate subscriptions to Stripe\")\n\n[Migrate subscriptions to Stripe](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions \"Migrate subscriptions to Stripe\")\n\n[\n\nImport subscriptions from other sources into Stripe.\n\n](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions \"Migrate subscriptions to Stripe\")\n\n## Subscription payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/billing/subscriptions/payment-methods-setting \"Subscription payment methods\")\n\n[Subscription payment methods](https://docs.stripe.com/billing/subscriptions/payment-methods-setting \"Subscription payment methods\")\n\n[\n\nLearn how to specify which payment methods are allowed for a subscription.\n\n](https://docs.stripe.com/billing/subscriptions/payment-methods-setting \"Subscription payment methods\")\n\n[](https://docs.stripe.com/billing/subscriptions/third-party-payment-processing \"Integrate with third-party payment processing\")\n\n[Integrate with third-party payment processing](https://docs.stripe.com/billing/subscriptions/third-party-payment-processing \"Integrate with third-party payment processing\")\n\n[\n\nIntegrate subscriptions with third-party payment providers.\n\n](https://docs.stripe.com/billing/subscriptions/third-party-payment-processing \"Integrate with third-party payment processing\")\n\n[](https://docs.stripe.com/billing/collection-method \"Collection methods\")\n\n[Collection methods](https://docs.stripe.com/billing/collection-method \"Collection methods\")\n\n[\n\nConfigure your preferred method to collect on invoices and subscriptions.\n\n](https://docs.stripe.com/billing/collection-method \"Collection methods\")\n\n[](https://docs.stripe.com/billing/subscriptions/update-payment-method \"Share a link to update payment details\")\n\n[Share a link to update payment details](https://docs.stripe.com/billing/subscriptions/update-payment-method \"Share a link to update payment details\")\n\n[\n\nGive your customers links they can use to update subscription payment details.\n\n](https://docs.stripe.com/billing/subscriptions/update-payment-method \"Share a link to update payment details\")\n\n[](https://docs.stripe.com/billing/migration/strong-customer-authentication \"Strong Customer Authentication (SCA)\")\n\n[Strong Customer Authentication (SCA)](https://docs.stripe.com/billing/migration/strong-customer-authentication \"Strong Customer Authentication (SCA)\")\n\n[\n\nUpdate your integration to support Strong Customer Authentication (SCA) requirements.\n\n](https://docs.stripe.com/billing/migration/strong-customer-authentication \"Strong Customer Authentication (SCA)\")\n\n## Manage subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/billing/subscriptions/pause-payment \"Pause payment collection\")\n\n[Pause payment collection](https://docs.stripe.com/billing/subscriptions/pause-payment \"Pause payment collection\")\n\n[\n\nLearn how to pause payment collection on subscriptions.\n\n](https://docs.stripe.com/billing/subscriptions/pause-payment \"Pause payment collection\")\n\n[](https://docs.stripe.com/billing/subscriptions/change \"Upgrade and downgrade subscriptions\")\n\n[Upgrade and downgrade subscriptions](https://docs.stripe.com/billing/subscriptions/change \"Upgrade and downgrade subscriptions\")\n\n[\n\nLearn how to change existing subscriptions.\n\n](https://docs.stripe.com/billing/subscriptions/change \"Upgrade and downgrade subscriptions\")\n\n[](https://docs.stripe.com/billing/subscriptions/prorations \"Prorate subscription changes\")\n\n[Prorate subscription changes](https://docs.stripe.com/billing/subscriptions/prorations \"Prorate subscription changes\")\n\n[\n\nHandle prorated charges after changes to a subscription\n\n](https://docs.stripe.com/billing/subscriptions/prorations \"Prorate subscription changes\")\n\n[](https://docs.stripe.com/billing/subscriptions/pending-updates \"Manage pending updates\")\n\n[Manage pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates \"Manage pending updates\")\n\n[\n\nLearn how to handle payment failures when updating a subscription\n\n](https://docs.stripe.com/billing/subscriptions/pending-updates \"Manage pending updates\")\n\n[](https://docs.stripe.com/billing/subscriptions/cancel \"Cancel subscriptions\")\n\n[Cancel subscriptions](https://docs.stripe.com/billing/subscriptions/cancel \"Cancel subscriptions\")\n\n[\n\nLearn how to cancel existing subscriptions.\n\n](https://docs.stripe.com/billing/subscriptions/cancel \"Cancel subscriptions\")\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
    "title": "Subscription features | Stripe Documentation",
    "description": "Explore subscription features in depth.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_schedules/release",
    "markdown": "# Release a schedule | Stripe API Reference\n\nReleases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is `not_started` or `active`. If the subscription schedule is currently associated with a subscription, releasing it will remove its `subscription` property and set the subscription’s ID to the `released_subscription` property.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    preserve\\_cancel\\_dateboolean\n    \n\n### Returns\n\nThe released `subscription_schedule` object. Its status will be `released`, `released_at` will be the current time, and `released_subscription` will be the ID of the subscription the subscription schedule managed prior to being released.\n\nPOST /v1/subscription\\_schedules/:id/release\n\n```\ncurl -X POST https://api.stripe.com/v1/subscription_schedules/sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI/release \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_sched_1Mr3hWLkdIwHu7ixA5zxZvNI\",  \"object\": \"subscription_schedule\",  \"application\": null,  \"canceled_at\": null,  \"completed_at\": null,  \"created\": 1680114386,  \"current_phase\": null,  \"customer\": \"cus_NcII9GZkTPAnor\",  \"default_settings\": {    \"application_fee_percent\": null,    \"automatic_tax\": {      \"enabled\": false,      \"liability\": null    },    \"billing_cycle_anchor\": \"automatic\",    \"billing_thresholds\": null,    \"collection_method\": \"charge_automatically\",    \"default_payment_method\": null,    \"default_source\": null,    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"on_behalf_of\": null,    \"transfer_data\": null  },  \"end_behavior\": \"release\",  \"livemode\": false,  \"metadata\": {},  \"phases\": [    {      \"add_invoice_items\": [],      \"application_fee_percent\": null,      \"billing_cycle_anchor\": null,      \"billing_thresholds\": null,      \"collection_method\": null,      \"coupon\": null,      \"currency\": \"usd\",      \"default_payment_method\": null,      \"default_tax_rates\": [],      \"description\": null,      \"end_date\": 1712339228,      \"invoice_settings\": null,      \"items\": [        {          \"billing_thresholds\": null,          \"metadata\": {},          \"plan\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"price\": \"price_1Mr3hVLkdIwHu7ixWuJp9ew0\",          \"quantity\": 1,          \"tax_rates\": []        }      ],      \"metadata\": {},      \"on_behalf_of\": null,      \"proration_behavior\": \"create_prorations\",      \"start_date\": 1680716828,      \"transfer_data\": null,      \"trial_end\": null    }  ],  \"released_at\": 1680114386,  \"released_subscription\": null,  \"renewal_interval\": null,  \"status\": \"released\",  \"subscription\": null,  \"test_clock\": null}\n```\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Release a schedule | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/update",
    "markdown": "# Update an invoice | Stripe API Reference\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Retrieve an invoice](https://docs.stripe.com/api/invoices/retrieve)\n\nRetrieves the invoice with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice object if a valid invoice ID was provided. Raises [an error](#errors) otherwise.\n\nThe invoice object contains a `lines` hash that contains information about the subscriptions and invoice items that have been applied to the invoice, as well as any prorations that Stripe has automatically calculated. Each line on the invoice has an `amount` attribute that represents the amount actually contributed to the invoice’s total. For invoice items and prorations, the amount attribute is the same as for the invoice item or proration respectively. For subscriptions, the amount may be different from the plan’s regular price depending on whether the invoice covers a trial period or the invoice period differs from the plan’s usual interval.\n\nThe invoice object has both a `subtotal` and a `total`. The subtotal represents the total before any discounts, while the total is the final amount to be charged to the customer after all coupons have been applied.\n\nThe invoice also has a `next_payment_attempt` attribute that tells you the next time (as a Unix timestamp) payment for the invoice will be automatically attempted. For invoices with manual payment collection, that have been closed, or that have reached the maximum number of retries (specified in your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic)), the `next_payment_attempt` will be null.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an upcoming invoice](https://docs.stripe.com/api/invoices/upcoming)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_billing\\_cycle\\_anchorstring | timestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_attimestampDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_at\\_period\\_endbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_cancel\\_nowbooleanDeprecated\n    \n*   #### \n    \n    subscription\\_default\\_tax\\_ratesarray of stringsDeprecated\n    \n*   #### \n    \n    subscription\\_detailsobject\n    \n*   #### \n    \n    subscription\\_itemsarray of objectsDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_behaviorenumDeprecated\n    \n*   #### \n    \n    subscription\\_proration\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_resume\\_atstringDeprecated\n    \n*   #### \n    \n    subscription\\_start\\_datetimestampDeprecated\n    \n*   #### \n    \n    subscription\\_trial\\_endstring | timestampDeprecated\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nGET /v1/invoices/upcoming\n\n```\ncurl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Retrieve an invoice's line items](https://docs.stripe.com/api/invoices/invoice_lines)\n\nWhen retrieving an invoice, you’ll get a **lines** property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#invoice_line_item_object).\n\nGET /v1/invoices/:id/lines\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1NpHok2eZvKYlo2CyeiBref0/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/invoices/in_1NpHiG2eZvKYlo2CZV0ZkEBT/lines\",  \"has_more\": false,  \"data\": [    {      \"id\": \"il_tmp_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"object\": \"line_item\",      \"amount\": 129999,      \"amount_excluding_tax\": 129999,      \"currency\": \"usd\",      \"description\": \"My First Invoice Item (created for API docs)\",      \"discount_amounts\": [],      \"discountable\": true,      \"discounts\": [],      \"invoice_item\": \"ii_1NpHiK2eZvKYlo2C9NdV8VrI\",      \"livemode\": false,      \"metadata\": {},      \"period\": {        \"end\": 1694467932,        \"start\": 1694467932      },      \"price\": {        \"id\": \"price_1NpEIa2eZvKYlo2CXcy5DRPA\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1694454804,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OcTFTbV7qh48bd\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 129999,        \"unit_amount_decimal\": \"129999\"      },      \"proration\": false,      \"proration_details\": {        \"credited_items\": null      },      \"quantity\": 1,      \"subscription\": null,      \"tax_amounts\": [],      \"tax_rates\": [],      \"type\": \"invoiceitem\",      \"unit_amount_excluding_tax\": \"129999\"    }  ]}\n```",
    "title": "Update an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/multiple-products",
    "markdown": "# Subscriptions with multiple products | Stripe DocumentationThe Stripe Docs logo\n\n## Create subscriptions with multiple products, all billed in a single invoice.\n\nIf you offer multiple products or want to charge different amounts for the same product, you can attach multiple products to a subscription. This generates a single [invoice](https://docs.stripe.com/api/invoices \"invoices\") each billing period that combines every price. Only a single payment for that invoice is required, reducing your costs and the number of charges your customer sees.\n\n## Creating multiple-product subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate multiple-product subscriptions on a customer using the `items` parameter. Provide the `price` and, optionally, a `quantity` (when using a value other than 1), for each product:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=price_CBXbz9i7AIOTzr \\  -d \"items[1][price]\"=price_IFuCu48Snc02bc \\  -d \"items[1][quantity]\"=2`\n\nThe response includes a list of all the subscription items, prices, and quantities:\n\n`{   \"id\": \"sub_CZEpS1Zt9QLxdo\",   \"object\": \"subscription\",   ...   \"items\": {     \"object\": \"list\",     \"data\": [       {         \"id\": \"si_H1yPnAVzP9vDRW\",         \"object\": \"subscription_item\",         \"billing_thresholds\": null,         \"created\": 1585939321,         \"metadata\": {         },         \"price\": {           \"id\": \"price_H1c8v1liEvrfcd\",           \"object\": \"price\",           \"active\": true,           \"billing_scheme\": \"per_unit\",           \"created\": 1585856460,           \"currency\": \"usd\",           \"livemode\": false,           \"lookup_key\": null,           \"metadata\": {           },           \"nickname\": null,           \"product\": \"prod_H1c7exjJHbC4sr\",           \"recurring\": {             \"aggregate_usage\": null,             \"interval\": \"month\",             \"interval_count\": 1,             \"trial_period_days\": null,             \"usage_type\": \"licensed\"           },           \"tiers\": null,           \"tiers_mode\": null,           \"transform_quantity\": null,           \"type\": \"recurring\",           \"unit_amount\": 1000,           \"unit_amount_decimal\": \"1000\"         },         \"quantity\": 1,         \"subscription\": \"sub_H1yPRslJXa4TUt\",         \"tax_rates\": [         ]`\n\n## Billing periods with multiple prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConventional prices that charge a fixed amount on an interval are billed at the start of each [billing cycle](https://docs.stripe.com/billing/subscriptions/billing-cycle). With each invoice, the customer effectively pays for the next interval of service. With [metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), the amount paid by the customer varies based on consumption during the billing cycle, so the customer pays for their usage at the end.\n\nWhen a subscription combines a fixed rate with metered billing, metered usage from the previous billing cycle is charged alongside the fixed rate for the new billing cycle at the start of each interval. The metered billing and fixed rate are combined in a single invoice.\n\n## Restrictions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSince using multiple products with a subscription results in a single invoice and payment, all of the prices for those products must use the same currency and have the same billing interval. You are also limited to 20 products in a single subscription.\n\n## Discounts, taxes, and trial periods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using multiple products, you can also create discounts, charge taxes, and use trial periods as you would with a single-product subscription. Provide these as top-level arguments to the create or update subscription call, as they apply to the subscription at large:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d coupon=free-period \\  -d \"default_tax_rates[0]\"=txr_1EO66sClCIKljWvs98IiVfHW \\  -d trial_end=1610403705 \\  -d \"items[0][price]\"=price_CBXbz9i7AIOTzr \\  -d \"items[1][price]\"=price_IFuCu48Snc02bc \\  -d \"items[1][quantity]\"=2`\n\nWhen you create a subscription by passing prices into the `items` attribute, it will ignore any trial period that is specified on the individual prices. The trial period is only respected if you create a subscription with a single price using the legacy plan attribute.\n\n## Multiple subscriptions for a customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can simultaneously create multiple subscriptions for a single customer. This capability is useful when you want to make it possible for your customers to subscribe to multiple products with separate intervals. Each subscription has its own separate billing cycle, invoice, and charge—even if the underlying prices have the same billing interval.\n\nCreate multiple subscriptions on a customer by using the same [create subscription](https://docs.stripe.com/api#create_subscription) code:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_4fdAW5ftNQow1a \\  -d \"items[0][price]\"=price_CZB2krKbBDOkTS`\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_4fdAW5ftNQow1a \\  -d \"items[0][price]\"=price_CZB1AX3KOacNJw`\n\nA customer can be subscribed to multiple products or even to a single product multiple times. Each subscription has a unique ID and its state is handled independently from the customer’s other subscriptions. Each subscription also has its own independent billing cycle, based on the [billing cycle anchor](https://docs.stripe.com/billing/subscriptions/billing-cycle) of the subscription.\n\nWhen a customer has multiple subscriptions, the `Customer` object’s `subscriptions` property provides a list of every subscription:\n\n`{   \"id\": \"cus_4fdAW5ftNQow1a\",   \"object\": \"customer\",   \"subscriptions\": {     \"object\": \"list\",     \"data\": [       {         \"id\": \"sub_9RRl3XywPg2P5H\",         \"object\": \"subscription\",         ...         \"price\": {           \"id\": \"price_CZB2krKbBDOkTS\",           \"object\": \"price\",           \"amount\": 2995,           ...         }       },       {         \"id\": \"sub_9RRlIq2t9obFLI\",         \"object\": \"subscription\",         ...         \"price\": {           \"id\": \"price_CZB1AX3KOacNJw\",           \"object\": \"price\",           \"amount\": 1295,           ...         }       }     ]     ...   }   ... }`",
    "title": "Subscriptions with multiple products | Stripe Documentation",
    "description": "Create subscriptions with multiple products, all billed in a single invoice.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/quantities",
    "markdown": "# Setting subscription quantities | Stripe DocumentationThe Stripe Docs logo\n\n## Vary the cost of a subscription by subscribing a customer to multiple quantities of a product.\n\nBy default, each subscription is for one product, but Stripe allows you to subscribe a customer to multiple quantities of an item. For example, say you run a hosting company and your customers host sites through it at a cost of 9.99 USD per site, per month. Most customers host a single site, while some host many. You could create prices for one site (9.99 USD), two sites (19.98 USD), and so forth, but a better approach is to subscribe customers to a quantity with a 9.99 USD unit price.\n\nSubscriptions have two kinds of usage-based billing: metered billing, and per-seat licensing. You can enable these billing models by setting the value of the `recurring[usage_type]` attribute when creating a price. You can only specify a quantity when creating a subscription with a `recurring[usage_type]` of `licensed`. If you want to have granular billing for usage that fluctuates within a billing interval, consider using [metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) instead of quantities.\n\n## Setting multiple quantities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set the quantity on a subscription, provide a `quantity` value when [creating](https://docs.stripe.com/api#create_subscription) or [updating](https://docs.stripe.com/api#update_subscription) the subscription:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_4fdAW5ftNQow1a \\  -d \"items[0][price]\"=price_CBb6IXqvTLXp3f \\  -d \"items[0][quantity]\"=5`\n\nYou still bill multiple quantities using one [invoice](https://docs.stripe.com/api/invoices \"invoices\"), and you [prorate](https://docs.stripe.com/billing/subscriptions/prorations) them when the subscription changes. This includes when you change subscription quantities.\n\n## Charging different amounts based on quantity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, you might want to adjust the cost per seat based on the number of seats in a subscription. For example, you could offer volume licensing discounts for subscriptions that exceed certain quantity thresholds. You can use [tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing) to adjust per-seat pricing.\n\n## Quantity transformation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you bill your customers, you might want to track usage at a different granularity than you bill. For example, consider a productivity software suite that charges 10 USD for every 5 users (or portion thereof) using the product. Without quantity transformation, they would need to increase the `quantity` of the subscription item by 1 for every 5 users.\n\n| Number of Users | Subscription Item Quantity Reported to Stripe | Total |\n| --- | --- | --- |\n| 1   | 1   | 10 USD |\n| 3   | 1   | 10 USD |\n| 5   | 1   | 10 USD |\n| 6   | 2   | 20 USD |\n| 7   | 2   | 20 USD |\n\nWith the `transform_quantity` parameter, you can instruct Stripe to transform the quantity before applying the per unit cost. The following subscription allows you to naturally report the current number of users as the subscription item `quantity`—Stripe’s billing system divides the quantity by 5 and rounds up before calculating by the unit cost.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Standard Cost Per 5 Users\" \\  -d \"transform_quantity[divide_by]\"=5 \\  -d \"transform_quantity[round]\"=up \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=licensed \\  -d product={{PRODUCTIVITY_SUITE_ID}}`\n\nCurrently, the only available transformation is division, using the `divide_by` parameter in conjunction with the `round` parameter.\n\nYou can only use `transform_quantity` with `billing_scheme=per_unit`—it’s incompatible with tiered pricing.\n\n### Rounding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe previous example showed a subscription that charges for every 5 users rounding up, that is, 6 divided by 5 results in a quantity of 2. For use cases where you don’t want to charge for a portion of usage, like charging for every full gigabyte of usage of a broadband internet service, you can also pass `down` as the value of `round`.\n\n### Metered usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also apply `transform_quantity` in conjunction with metered billing. This transformation applies to prices with `recurring[usage_type]=metered` at the end of a billing period in the same way it applies to `quantity` for prices with `recurring[usage_type]=licensed`.\n\nA marketing email service that creates a metered price to charge 0.10 USD for every full 1000 emails sent might look something like this:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Metered Emails\" \\  -d \"transform_quantity[divide_by]\"=1000 \\  -d \"transform_quantity[round]\"=down \\  -d unit_amount=10 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d product={{MARKETING_EMAILS_ID}}`\n\nWith this subscription, usage can be reported per email and you can bill the customer 0.10 USD for every 1000 emails they send.",
    "title": "Setting subscription quantities | Stripe Documentation",
    "description": "Vary the cost of a subscription by subscribing a customer to multiple quantities of a product.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/backdating",
    "markdown": "# Backdating subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about backdating subscriptions.\n\nYou can backdate a subscription to bill customers for time that has already elapsed. This is often used when migrating to Stripe or for record keeping purposes. The `backdate_start_date` field specifies the subscription’s backdated start date. You can optionally bill customers for this elapsed time and set the next billing date.\n\n## Backdating and charging users ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes users can have access to your service before you create a subscription for them, and you want to charge them for that access.\n\nTo charge users for this time through the Dashboard:\n\n1.  Go to the **Payments** > **Subscriptions** page.\n    \n2.  Click **+Create subscription**.\n    \n3.  Find or add a customer.\n    \n4.  Enter the pricing and product information.\n    \n5.  In the **Subscription details** section, select the start and end dates of the subscription. To backdate it, select a start date in the past.\n    \n6.  Select the date that you want to start the billing cycle on.\n    \n7.  Optionally, set the **Payment** or **Advanced** options.\n    \n8.  Click **Create subscription**. The subscription starts on the date you selected.\n    \n\nThat creates an [invoice](https://docs.stripe.com/api/invoices \"invoices\") with a prorated amount for the time between the backdated start date and the current time. The prorated amount is calculated based on an imagined interval that starts on the backdated start date. For example, if the billing interval is monthly on the first of the month, and you set the `backdate_start_date` to February 15 (in a non-leap year), the proration calculation is based on a month running February 15 to March 15. Because that imagined month is 28 days, the prorated amount for the 14 days of February 15 to March 1 is exactly half the amount of a normal monthly charge.\n\nSimilarly, if you set the `backdate_start_date` to January 15, the proration calculation is based on an imagined month running January 15 to February 15. Because that month is 31 days, the prorated amount for the 17 days of January 15 to February 1 is 17/31 (or 0.548) of a normal monthly charge.\n\nAnother way to think about the calculation is to look at the backdated start date as the original start date and the beginning of the first full billing period as an updated start date.\n\n## Backdating without charging users ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also backdate a subscription without charging the customer for the backdated period, which is useful if you’re migrating to Stripe. To do so, pass `proration_behavior: 'none'` when you create the subscription. That sets the `start_date` to the same value as `backdate_start_date`, but it doesn’t charge the customer for backdated time.\n\n## Backdating and setting the billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can combine `backdate_start_date` with `billing_cycle_anchor` to backdate a subscription and set the billing cycle anchor to a date in the future. This creates a prorated item on the next invoice for the time between the backdated start date and the billing cycle anchor. That’s useful if you’re migrating to Stripe and need to carry over the next billing date for your subscriptions while billing customers for elapsed time.\n\nFor example, let’s say it’s October 15 and you’re migrating to Stripe. You have a subscription that started on September 1, and the next billing date is November 1. To migrate that subscription, create a new subscription and set `backdate_start_date` to September 1 and `billing_cycle_anchor` to November 1.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d backdate_start_date=1575176400 \\  -d billing_cycle_anchor=1572580800 \\  -d \"items[0][price]\"=  {{PRICE_ID}}    `\n\nThat immediately issues an invoice for the prorated amount covering the time between September 1 and November 1. It also sets the `start_date` of the subscription to September 1. Stripe issues the next invoice on November 1.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/backdate-with-billing-cycle-anchor-invoice.4720d0bcbf068b1b4463e17181ba1c13.png)\n\n## Backdating an update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set the effective date of [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when updating a subscription, use the [`proration_date`](https://docs.stripe.com/api/subscriptions/update#update_subscription-proration_date) parameter. Pass an integer Unix timestamp within the subscription’s current period. If the subscription is backed by a subscription schedule, make sure that the timestamp is prior to the start date of the next phase of the subscription schedule.\n\nYou can set a `proration_date` earlier than the current period only during the first period of a backdated subscription. In that case, the `proration_date` can be on or after the `subscription[start_date]` (backdated start date). In all other cases, the `proration_date` can’t be before the `current_period_start`.",
    "title": "Backdating subscriptions | Stripe Documentation",
    "description": "Learn about backdating subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/trials",
    "markdown": "# Using trial periods on subscriptions\n\n## Delay payments on active subscriptions using trial periods.\n\nYou can start a customer’s [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") with a free trial period by providing a `trial_end` argument when [creating the subscription](https://docs.stripe.com/api#create_subscription):\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d trial_end=1610403705`\n\nThe `trial_end` parameter takes a timestamp indicating the exact moment the trial ends. When creating a subscription, you can alternatively use the [trial\\_period\\_days](https://docs.stripe.com/api#create_subscription-trial_period_days) parameter: an integer representing the number of days the trial lasts, from the current moment.\n\nWhen creating a subscription with a trial period, no payment method is required for the customer. An immediate [invoice](https://docs.stripe.com/api/invoices \"invoices\") is still created, but for $0.\n\nWhen the trial ends, if the subscription `status` isn’t `paused`, we generate an invoice and send an `invoice.created` event notification. Approximately 1 hour later, we attempt to charge that invoice. A new billing cycle also begins for the customer when the trial ends.\n\nTo end a trial early, make an [update subscription](https://docs.stripe.com/api#update_subscription) API call, setting the `trial_end` value to a new timestamp, or **now** to end immediately:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d trial_end=now`\n\n## Combining trials with billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs of API version [`2018-02-05`](https://docs.stripe.com/upgrades#2018-02-05), you can also combine trials with `billing_cycle_anchor`, resulting in a free period followed by a prorated period, leading into a fixed billing cycle.\n\nFor example, suppose it’s the 15th of the month and you want to give your customer a free 7 day trial (until the 22nd), and then start normal billing on the 1st. You can do this through the API by combining trials with `billing_cycle_anchor`. (This isn’t currently available through the [Dashboard](https://dashboard.stripe.com/test/subscriptions).)\n\nIn this example, the customer gets an invoice for a _prorated_ amount on the 22nd (for the period until the 1st). Then, on the 1st, they’ll be invoiced again for the full amount, and again on the 1st of the following month, and so on.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d trial_end=1610403705 \\  -d billing_cycle_anchor=1611008505`\n\n## Combining trials with usage-based billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use trial periods for subscriptions with [usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing). During the trial period, any usage accrued doesn’t count toward the total charged to the customer at the end of the billing cycle. After the trial period ends, usage accrues and is billed at the end of the next billing cycle.\n\n### Trials and aggregate usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use the `aggregate_usage` [parameter](https://docs.stripe.com/api/prices/create#create_price-recurring-aggregate_usage) and set the behavior to `last_ever`, your customer will be billed for the last usage record if it falls within the trial period, even if the usage occurred during the trial period.\n\nFor example, if you provide file storage you might want to offer a month of free storage, but then charge for the first month if the customer continues to store files with your service.\n\n### Metered billing with paused subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscriptions that have subscription items with metered pricing bill in arrears because we need the total usage to determine the amount to bill. Paused subscriptions won’t allow usage events to be created for attached subscription items. Because it’s possible for you to resume a subscription in the middle of a billing period while leaving the billing cycle anchor unchanged, we support invoicing for the usage events with a timestamp after the subscription resumes.\n\n## Combining trials with add\\_invoice\\_items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTrial periods for subscriptions can be combined with one time prices and `add_invoice_items`. This may happen if you want to charge a one time fee or add on at the same time as starting a trial. Note that doing this will cause an invoice to be cut immediately for the amount of the one time item at the beginning of the trial.\n\n## Compliance requirements for trials and promotions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must comply with card network [requirements](https://support.stripe.com/questions/2020-visa-trial-subscription-requirement-changes-guide) when offering trials, whether they’re free or not. This includes scenarios like free trials or charging customers a reduced price for the first few months and then automatically charging them your normal rate. When using our trials features, you can enable [messaging settings](https://dashboard.stripe.com/settings/billing/automatic) in the Stripe Dashboard to help you meet the requirements.\n\nIf you notify users of [successful payments](https://dashboard.stripe.com/settings/emails), Stripe automatically displays information about the trial and the cancellation URL in those notifications.\n\nIf you don’t use these settings, you’re still responsible for complying with the requirements.\n\nWhen customer emails are enabled, a reminder is sent seven days before a trial ends. If a trial is shorter than seven days, the reminder email is sent as soon as the trial begins. If trials are renewed, a reminder email is resent.\n\nIf both trial reminders and subscription renewal reminders are enabled during a trial, customers only receive the trial ending reminder. Renewal emails are then sent for subsequent billing periods.\n\nThe cancellation policy link is a URL that is displayed on customer receipts, along with other trial information. This information is included for all card payments. The cancellation URL is also included in the reminder email that is sent to customers seven days before their trial ends.\n\nFor statement descriptors, if you manually set the [statement descriptor](https://docs.stripe.com/api/invoices/object#invoice_object-statement_descriptor) on the invoice, the trial text isn’t appended so you need to add it. If you use [product statement descriptors](https://docs.stripe.com/api/products/object#product_object-statement_descriptor), the trial text is appended automatically. If your statement descriptor is greater than 10 characters, make sure it still makes sense to your customers with the trial text appended. There is a 22 character [limit](https://docs.stripe.com/get-started/account/statement-descriptors#requirements) so anything after the 10th character is overwritten with `* TRIAL OVER`.\n\nIf you don’t manually set the statement descriptor or use product statement descriptors, the trial text is appended to your account’s statement descriptor. If needed, you can set up a [shortened descriptor](https://dashboard.stripe.com/settings/public) to ensure the trial text displays correctly.\n\n### Meeting requirements without using Stripe’s features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you offer trials or promotions without using our trials features, you still need to comply with the [requirements](https://support.stripe.com/questions/2020-visa-trial-subscription-requirement-changes-guide). You can listen for the [invoice.upcoming](https://docs.stripe.com/api/events/types#event_types-invoice.upcoming) event to determine when to send email notifications. To add text to your statement descriptor that indicates the promotion is over:\n\n*   Listen for the `customer.subscription.updated` event\n*   Check to see if a trial or promotion has ended\n*   Update the [statement descriptor](https://docs.stripe.com/api/invoices/update#update_invoice-statement_descriptor) on the subscription’s `latest_invoice`\n\nYou need to update the latest invoice within an hour of its creation while it’s still in draft status.\n\n## Create free trials without collecting payment method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can sign customers up for a free trial of a subscription without collecting their payment details in the Dashboard, the API, and Checkout. When you create the subscription, you can specify whether to cancel or pause the subscription if the customer didn’t provide a payment method during the trial period. To cancel or pause the subscription, set the `trial_settings.end_behavior.missing_payment_method` parameter when you create or update the subscription:\n\n*   **Cancel subscription**\\-If the free trial subscription ends without a payment method, it cancels immediately. You can create another subscription if the customer decides to subscribe to a paid plan in the future. Set `missing_payment_method=cancel` to cancel the subscription when it reaches the end of a trial without an available payment method.\n*   **Pause subscription**\\-If the free trial subscription ends without a payment method, it pauses and doesn’t cycle until it’s resumed. When a subscription is paused, it doesn’t generate invoices (unlike when a subscription’s [payment collection](https://docs.stripe.com/billing/subscriptions/pause-payment) is paused). When your customer adds their payment method after the subscription has paused, you can resume the same subscription. The subscription can remain paused indefinitely. Set `missing_payment_method=pause` to pause the subscription when it reaches the end of a trial without an available payment method.\n\nAlternatively, set `missing_payment_method=create_invoice` to invoice at the end of the trial if no payment method is present. If a payment method isn’t provided when the invoice finalizes, the subscription moves into `past_due`.\n\nConfigure reminder emails to collect customer’s payment details in your [free trial messaging settings](https://dashboard.stripe.com/settings/billing/automatic).\n\n### Configure free trials without payment methods to cancel![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Dashboard, the API, or Checkout to create free trials of a subscription without collecting payment details from your customers, and to configure your subscription to cancel if the trial ends without a payment method.\n\nYou can use the Dashboard to sign customers up for a free trial of a subscription without collecting their payment details:\n\n1.  From the Subscriptions settings of the Dashboard, select **+Create subscription**.\n2.  After adding your customer and product information, select **+Add free trial**, then input how many days the free trial lasts.\n3.  Select the **Pause or cancel if free trial ends without a payment method** option, then select **Cancel immediately**. If you’re using [test clocks](https://docs.stripe.com/billing/testing/test-clocks), advance to the end of the trial. You won’t see an upcoming invoice for the subscription.\n4.  Listen to the `customer.subscription.deleted` event that informs you when a subscription cancels at the end of trials without a payment method.\n\nIf you provide a payment method or select the **Email invoice to customer with link to payment page** option, the **Pause or cancel if free trial ends without a payment method** option won’t be visible.\n\n### Configure free trials without payment methods to pause![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Dashboard, the API, or Checkout to create free trials of a subscription without collecting payment details from your customers, and to configure your subscription to pause if the trial ends without a payment method.\n\nYou can use the Dashboard to sign customers up for a free trial of a subscription without collecting their payment details:\n\n1.  From the Subscriptions settings of the Dashboard, select **+Create subscription**.\n2.  After adding your customer and product information, select **+Add free trial**, then input how many days the free trial lasts.\n3.  Select the **Pause or cancel if free trial ends without a payment method** option, then select **Pause**. If you’re using [test clocks](https://docs.stripe.com/billing/testing/test-clocks), advance to the end of the trial. You won’t see an upcoming invoice for the subscription.\n4.  Listen to the `customer.subscription.paused` event that informs you when a subscription pauses at the end of trials without a payment method.\n\nIf you provide a payment method or select the **Email invoice to customer with link to payment page** option, the **Pause or cancel if free trial ends without a payment method** option won’t be visible.\n\n### Collect payment details from your customer before their trial ends![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your subscription to automatically send a reminder email when the customer’s trial is about to expire. You must comply with the card network requirements when offering trials. Learn more about [compliance requirements for trials and promotion](#compliance).\n\n### Webhook events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Events](https://docs.stripe.com/api#event_types) are triggered every time a free trial changes. Make sure that your integration properly handles the events. For example, you might want to email a customer before a free trial ends. Learn more about [subscription webhook events](https://docs.stripe.com/billing/subscriptions/webhooks#events).\n\nThe following table describes the events that trigger before a free trial ends, when a trial subscription pauses or cancels, and when a subscription is resumed and becomes active.\n\n| Event | Description | Use case |\n| --- | --- | --- |\n| `customer.subscription.deleted` | Sent when a subscription ends. | Stop providing access to your product in response to this webhook. The subscription moves to the `canceled` status and sends this webhook after a free trial ends without a payment method and if the subscription’s `missing_payment_method` end behavior is set to `cancel`. |\n| `customer.subscription.resumed` | Sent when a subscription is no longer paused. When you receive this event, grant the customer access to the product if access was revoked while the subscription was paused. | Paused subscriptions are converted into active subscriptions after being resumed. Resuming a subscription might generate an invoice and corresponding Payment Intent that must be paid before the subscription moves out of the `paused` status. |\n| `customer.subscription.paused` | Sent when a subscription is fully paused. Invoicing won’t occur until the subscription resumes. When you receive this event, you can revoke the customer’s access to the product until they add a payment method and the subscription resumes. | Stop providing access to your product in response to this webhook. The subscription moves to the `paused` status and sends this webhook after a free trial ends without a payment method and if the subscription’s `missing_payment_method` end behavior is set to `pause`. The subscription remains `paused` until explicitly resumed. |\n| `customer.subscription.trial_will_end` | Sent three days before the trial period ends. If the trial is less than 3 days, this event is triggered. | Configure the subscription to automatically send an email to your customer 3 days before the trial period ends. |\n\n### Use the customer portal to collect payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create a subscription for a customer without collecting a payment method, you can redirect them to the Billing customer portal to add their payment details.\n\nFirst, configure the [Billing customer portal](https://docs.stripe.com/customer-management) to enable your customers to manage their subscriptions.\n\nNext, collect billing information from your customers:\n\n1.  Listen to the [`customer.subscription.trial_will_end` event](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end).\n2.  If the subscription doesn’t have a [default payment method](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method), get the customer’s email using the [Customers API](https://docs.stripe.com/api/customers/retrieve) and send them a message with a link to your site. It’s helpful to embed the customer ID in the email. For example: `https://example.com?...&customer={{CUSTOMER_ID}}`.\n3.  When the customer enters your site, create a customer portal session using the customer ID from the previous step.\n4.  Redirect the customer to the customer portal, where they can update their subscription with payment details.\n\n### Allow customers to reactivate their subscriptions in the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo enable the subscription of a customer whose trial ended in a `paused` subscription through the customer portal, enable the free trial without payment method feature when creating a new subscription in the Dashboard.\n\n### Send an email reminder before the trial ends![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo send a reminder email prior to the end of the trial, select the **Link to a Stripe-hosted page** option in the [Subscriptions and emails setting](https://dashboard.stripe.com/settings/billing/automatic). The reminder email contains a link for the customer to add or update their payment details. We don’t send free trial reminder emails in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Learn more about how to [setup free trial reminders](https://docs.stripe.com/billing/revenue-recovery/customer-emails#trial-ending-reminders).\n\nUse the `customer.subscription.trial_will_end` event to send your own hosted emails to customers. After you see the event in the Dashboard, it’s confirmed that your email has been sent.\n\n### Convert a trial if customers provide payment information before the trial ends![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscriptions and upcoming invoices are created at the start of the trial and become active at the end of the trial if the customer provides a payment method.\n\n### Configure pausing when a payment method isn’t provided![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a free trial ends, you can configure subscriptions to pause if no default payment method is available for a subscription on a per-subscription basis.\n\nYou can update subscriptions while they’re paused. Updates that typically generate prorations (adding items, changing price or plan, changing quantity, and so on) won’t generate proration line items because the customer isn’t being charged while the subscription is paused. If you want to extend a trial after a subscription transitions into a `paused` status, you must resume the subscription before configuring a trial.\n\nWe check `default_source` and `default_payment_method` on the subscription and customer to determine whether a subscription is missing a payment method at the end of a trial.\n\n### Resume a paused subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Dashboard, API, customer portal, or Hosted Invoice Page to resume a paused subscription.\n\nTo resume a paused subscription in the Dashboard, navigate to the subscription, then select **Resume Subscription** under the **Actions** menu. Select **Reset billing cycle** or **Always invoice** (if you’re not resetting the billing cycle) from the **Resume subscription** modal to charge the customer immediately.\n\n### Invoicing a subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile paused, a subscription won’t create an invoice. If you want to continue creating invoices, use `pause_collection` to stop collecting payments while continuing to invoice and advance billing periods.\n\nTo preview the invoice that’s generated when a paused subscription is resumed, specify a [subscription\\_resume\\_at](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-subscription_resume_at).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Products and prices](https://docs.stripe.com/products-prices/overview)\n*   [Prices](https://docs.stripe.com/api#prices)\n*   [Subscriptions](https://docs.stripe.com/api#subscriptions)\n*   [Managing subscription billing cycles](https://docs.stripe.com/billing/subscriptions/billing-cycle)",
    "title": "Using trial periods on subscriptions | Stripe Documentation",
    "description": "Delay payments on active subscriptions using trial periods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/collection-method",
    "markdown": "# Billing collection methods | Stripe DocumentationThe Stripe Docs logo\n\n## Configure your preferred method to collect on invoices and subscriptions.\n\nYou can set your preferred payment collection method when creating [invoices](https://docs.stripe.com/api/invoices \"invoices\") and [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") using either the Dashboard or API.\n\n## Automatic charging versus manual payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe collection method determines how Stripe processes the payment for both products. To collect payments for invoices and subscriptions, you can select from these methods:\n\n*   Automatic charging\n*   Manual payments\n\n#### Note\n\nManual payment methods, such as wire transfers, have more rigorous tracking and reconciliation processes, which [enterprise clients](#enterprise-clients-wire-transfers) often require for high transaction volumes. Some payment methods, such as [bank transfers](https://docs.stripe.com/invoicing/bank-transfer), only support `send_invoice` and can’t be charged automatically.\n\n### Set a collection method for an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set a collection method for an invoice through the Invoicing API, use the [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) attribute.\n\n*   `charge_automatically`: Lets you automatically charge a customer’s default payment method to pay invoices.\n*   `send_invoice`: Sends an invoice for manual payment. Unlike automatic charging which requires immediate payment, you can give the customer an adjustable payment window. You can use the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) and set up [email notifications and reminders](https://docs.stripe.com/invoicing/send-email#customer-emails) to facilitate payment.\n\n### Set a collection method for a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set a collection method for a subscription through the Subscriptions API, use the [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) attribute. If you change the collection method for a subscription, only subsequently created subscription invoices use the new collection method.\n\n*   `charge_automatically`: Tells Stripe to automatically charge your customer’s default payment method to pay the invoice generated for each subscription period.\n*   `send_invoice`: Generates an invoice for each billing period, and requires manual payment. Unlike automatic charging which requires immediate payment, you can give the customer an adjustable payment window.\n\n## Collection methods and failed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDepending on the collection method, failed payments generate different [subscription statuses](https://docs.stripe.com/api/subscriptions/object#subscription_object-status) and [invoice statuses](https://docs.stripe.com/api/invoices/object#invoice_object-status).\n\n### Failed subscription payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreating a subscription with a [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) of `allow_incomplete`, and the `collection_method` set to `charge_automatically`, immediately attempts payment and marks the subscription `status` as `incomplete` if the initial payment attempt doesn’t succeed.\n\nPassing a `payment_behavior` of `default_incomplete` will always initialize subscriptions with an `incomplete` status if the first invoice requires payment. The resulting PaymentIntent must be confirmed in a separate request in order to attempt payment.\n\nFor both `allow_incomplete` and `default_incomplete`, the subscription becomes `active` after the first invoice is paid. Subscriptions that do not require payment upon creation (like those that are trialing) will immediately have a status of `active`. If the first invoice remains unpaid after 23 hours, the subscription is set to `incomplete_expired`. This status is final and irreversible, voiding the open invoice and preventing future invoices.\n\n#### Failed incomplete subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a subscription has a status of `incomplete`, you can only update attributes that won’t result in the creation of an invoice or invoice item, such as its [metadata](https://docs.stripe.com/api/subscriptions/object#subscription_object-metadata), [save\\_default\\_payment\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings-save_default_payment_method), and [description](https://docs.stripe.com/api/subscriptions/object#subscription_object-description).\n\nIf a payment to renew the subscription fails when you’ve set it to charge automatically, the subscription transitions to `past_due` and Stripe may mark it as `canceled` or `unpaid` (depending on your [subscriptions settings](https://dashboard.stripe.com/settings/billing/automatic)) after Stripe exhausts all payment retry attempts.\n\nOn the other hand, if the subscription’s `collection_method` is set to `send_invoice`, it becomes `past_due` when its invoice remains unpaid by the due date. If the customer still hasn’t paid the invoice after you extend the deadline, Stripe may mark the subscription as `canceled` or `unpaid`, which again depends on your subscription settings.\n\nWhen a subscription has a status of `unpaid`, Stripe creates future invoices but leaves them as drafts. In this case, you have the option to [resend](https://docs.stripe.com/api/invoices/send) the `past due` invoice and any created draft invoices to collect payment. Use this feature if you’re trying to collect payment for unpaid months (such as when you continue to provide the goods or services related to an unpaid subscription) or leave them closed and unpaid when you stop providing goods or services.\n\n### Failed invoicing payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices not associated with subscriptions that have their `collection_method` set to `charge_automatically` and [auto-advancement](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) disabled, remain `open` if an initial payment attempt fails. Because auto-advancement is disabled, Stripe doesn’t automatically close the invoices, retry them, or transition them to a different status. Learn more about [failed payment notifications](https://docs.stripe.com/invoicing/automatic-collection#failed-payment-notifications) and [managing invoices sent to customers](https://docs.stripe.com/invoicing/automatic-collection#manage-invoices-sent-customers).\n\nIf [auto-advancement](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) is enabled for the invoice, Stripe may automatically mark the invoice as `uncollectible` (depending on your [invoice status settings](https://dashboard.stripe.com/settings/billing/automatic)) after Stripe exhausts all payment retry attempts.\n\nWhen the collection method is set to `send_invoice`, the invoice requires manual payment. If the invoice remains unpaid past the due date, the status becomes `past_due`, indicating an overdue invoice. If you extend the payment deadline and the customer still hasn’t paid, you can leave the invoice as `past_due` or transition it to `uncollectible` or `void`.\n\n## Enterprise clients and wire transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor enterprise clients, manual payment methods, such as wire transfers, offer some advantages. These payment methods often involve more rigorous tracking and reconciliation processes compared to automated methods, which is crucial for enterprises that deal with high transaction volumes. By setting the `collection_method` to `send_invoice`, you can generate clear and well-documented invoices that enterprise clients can pay using wire transfers—a commonly preferred payment method for this type of client.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Automatic collection](https://docs.stripe.com/invoicing/automatic-collection)\n*   [Automatic charging](https://docs.stripe.com/invoicing/automatic-charging)\n*   [Subscription invoices](https://docs.stripe.com/billing/invoices/subscription)\n*   [Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions)",
    "title": "Billing collection methods | Stripe Documentation",
    "description": "To collect payments for invoices and subscriptions, you can choose to either automatically charge your customer or send them an invoice.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/payment-methods-setting",
    "markdown": "# Set payment methods per-subscription | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to specify which payment methods are allowed for a subscription.\n\nThe [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") `payment_settings` [parameter](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings) lets you set specific payment methods on individual subscriptions. This allows more flexibility than a single `default_payment_method` or less granular customer settings.\n\nTo enable payment methods, you first need to activate them in your [account settings](https://dashboard.stripe.com/settings/payments).\n\nIn some situations, there might be restrictions that prevent payment methods from being used for a subscription. For instance, a payment method might only operate in one currency, or have limitations on the amount that can be paid. Stripe doesn’t automatically select a payment method when these limitations prevent it from being used.\n\n## Manually select payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can override the payment methods that can be used to pay a subscription by changing its [payment settings](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings).\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_settings[payment_method_types][]\"=card \\  -d \"payment_settings[payment_method_types][]\"=customer_balance`\n\nIf you configured a default payment method on either the [Customer](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or the [Subscription](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method), be sure to include it in the list of `payment_method_types`. Otherwise, that method will not be used and payment could fail.\n\n## Payment method priority ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, customers can pay a subscription’s generated [invoice](https://docs.stripe.com/api/invoices \"invoices\") with any of the enabled payment methods in your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). This takes precedence over the older `default_source` [customer setting](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n\nIf set, a subscription’s `payment_settings.payment_method_types` takes priority over default invoice settings, but only for that specific subscription. Payment method types are passed onto the subscription’s [setup intent](https://docs.stripe.com/api/setup_intents) and invoices.\n\nYou can further specify a subscription’s `default_payment_method`, or the older `default_source`, to prioritize which payment method is attempted.\n\n## Payment method errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment method errors can prevent a subscription from being created. This can happen when:\n\n*   You manually select a payment method but a restriction, such as supported currencies, prevents it from being used.\n*   A payment method isn’t activated for your account\n\nErrors can also occur at time of payment, and Stripe can’t finalize the invoice. See invoicing [payment method errors](https://docs.stripe.com/invoicing/payment-methods#payment-method-errors) for details.\n\n### Payment method options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods have additional options that you can set to customize the payment experience. See the [payment method options](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings) documentation for details.",
    "title": "Set payment methods per-subscription | Stripe Documentation",
    "description": "Learn how to specify which payment methods are allowed for a subscription.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/coupons",
    "markdown": "# Flexible coupons and promotion codes\n\n## Add discounts to subscriptions and subscription items using coupons and promotion codes.\n\nRedeem coupons to apply discounts to the subscriptions you offer. You can also use coupons to create promotion codes to share with your customers. Customers can redeem these promotion codes to apply discounts to their subscriptions.\n\nYou can use coupons and promotion codes to:\n\n*   Apply one or more discounts to every [invoice](https://docs.stripe.com/api/invoices \"invoices\"), a specific invoice, or for a certain duration of time\n*   Apply one or more discounts to every subscription a customer has or to specific subscriptions\n*   Apply one or more discounts to specific subscription items\n*   Reduce invoice amounts by a percentage or a flat amount\n\nYou can also define a coupon that a customer must redeem by a certain date, or that’s limited to a set number of redemptions across all of your customers.\n\nTo use discounts for one-time payments, see [Add discounts for one-time payments](https://docs.stripe.com/payments/checkout/discounts).\n\n## Coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo apply discounts to a customer or a customer’s charges, redeem coupons into discounts. Learn how to create and manage coupons in the following sections.\n\n### Create a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate coupons in the Dashboard or with the [API](https://docs.stripe.com/api/coupons/create):\n\n1.  In the Dashboard, open the [Products](https://dashboard.stripe.com/test/products?active=true) page.\n2.  Click **Coupons**.\n3.  Click **+New**.\n4.  In the **Create a coupon** dialog, enter the coupon’s parameters.\n5.  Click **Create coupon**.\n\nHere are all the settings for coupons.\n\n| Setting | Description |\n| --- | --- |\n| **Name** | The name of the coupon that appears on receipts and invoices. |\n| **ID** optional | A unique identifier for the coupon in the API. If you leave this field blank, Stripe generates an ID for you. |\n| **Type** | Determines whether a coupon discounts a subscription by a fixed amount or by a percentage. |\n| **Percentage off** or **Discount amount** | Indicates how much the coupon actually discounts.<br><br>If you sell in multiple currencies, a single coupon can define different discount amounts for different currencies. Multi-currency coupons follow the same rules as [multi-currency prices](https://docs.stripe.com/products-prices/pricing-models#multicurrency). |\n| **Apply to specific products** optional | Limits the type of items that the coupon can apply to. |\n| **Duration** | Indicates how long the coupon is valid for. |\n| **Redemption limits** optional | Allows you to limit when a customer can redeem the coupon and the number of times a coupon can be redeemed. |\n| **Codes** optional | Allows you to create [promotion codes](#promotion-codes--promotion-codes) for the coupon. |\n\nYou can only edit the name of the coupon after creation.\n\n### Set eligible products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the products that are eligible for discounts, add the relevant product in the **Apply to specific product** field. Any promotion codes that are associated with the coupon are also restricted to this list of eligible products.\n\nIf you configure a coupon to apply to specific products and a subscription doesn’t have any applicable products, no discount is applied when you add the coupon to the subscription.\n\nWhen you [make changes](https://docs.stripe.com/billing/subscriptions/change) to a subscription, any existing discounts are applied when proration is calculated. You can’t discount proration line items further on the invoice that’s generated.\n\n### Apply coupons to subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you’ve created coupons, create a discount by applying them to a subscription. You can apply the coupon when you create the subscription or by [updating a customer’s existing subscription](https://docs.stripe.com/api#update_subscription).\n\n1.  In the Dashboard, open the **Billing** page and click **Subscriptions**.\n2.  Click the relevant subscription.\n3.  Click **Actions**.\n4.  Click **Update subscription**.\n5.  Click **Add coupon**.\n6.  Select one or more coupons from the dropdown menus and click **Submit**.\n\nYou can still create a subscription when a customer doesn’t have a stored payment method if no immediate payment is required after you apply coupons to it.\n\n### Apply coupons to customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you add a coupon to a customer, the coupon applies to all subscriptions for that customer, including subscriptions added later. To prevent discounting all recurring charges for a customer, add coupons to subscriptions instead of customers.\n\nA coupon attached to a subscription takes priority over a coupon attached to a customer. If you add coupons to a subscription, any coupons attached to the customer are not automatically applied. You must add the customer coupons to the subscription if you want those to apply as well.\n\n1.  In the Dashboard, open the [Customers](https://dashboard.stripe.com/test/customers) page and select the customer.\n2.  Click **Actions**\n3.  Click **Apply coupon**.\n4.  Select a coupon from the dropdown menu and click **Submit**.\n\n### Apply coupons to Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nApply coupons to subscriptions in a Checkout Session by setting the `discounts` parameter in the [API](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts). To create a session with an applied discount, pass the coupon ID in the `coupon` parameter of the `discounts` array. This coupon overrides any coupon on the customer.\n\nIf you’re creating a subscription with an existing customer, any coupon associated with the customer is applied to the subscription’s invoices.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=card \\   -d \"line_items[][price]\"=  {{PRICE_ID}}   \\   -d \"line_items[][quantity]\"=1 \\   -d mode=subscription \\   -d \"discounts[][coupon]\"=\"{{COUPON_ID}}\" \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Delete coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can delete coupons with the Dashboard or the [API](https://docs.stripe.com/api/coupons/delete).\n\nDeleting a coupon prevents it from being applied to future subscriptions or customers, but it doesn’t remove the discount from any subscription or customer that already has it.\n\n1.  In the Dashboard, open the [Products](https://dashboard.stripe.com/test/products?active=true) page.\n2.  Click **Coupons**\n3.  Click the relevant coupon.\n4.  Click the overflow menu ().\n5.  Click **Delete coupon**.\n\n### Coupon duration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA coupon’s duration indicates how long the redeemed [discount](https://docs.stripe.com/api/#discounts) is valid for. For example, a coupon for 50% off with a duration of 4 months applies to all invoices in the 4 month period starting when the coupon is first applied. If a customer applies this coupon to a yearly subscription during the coupon’s 4 month period, the 50% discount applies to the entire yearly subscription. In a monthly subscription, the coupon applies to the first 4 months. For a weekly subscription, a 4 month coupon applies to every invoice in the first 4 months.\n\nIf you’re configuring a coupon’s duration in the API, when you use the value `repeating` you must specify `duration_in_months` as the number of months that the coupon repeatedly applies to. If you set the duration to `once`, the coupon applies only to the first invoice. If you set the duration to `forever`, the coupon applies to all invoices indefinitely.\n\n### Redemption limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRedemption limits apply to the coupon across every customer. For example, if you limit the number of times a coupon can be redeemed to 50, you can apply it to your customers only 50 times. This can be one time each for 50 different customers, one customer 50 times, or multiple customers multiple times until the max of 50 times.\n\nIf you set a coupon to last forever when a customer uses it but the coupon has an expiration date, any customer given that coupon will have that coupon’s discount forever. No new customers can apply the coupon after the expiration date.\n\nPromotion codes are customer-facing codes that you create for coupons. For example, FALLPROMO and SPRINGPROMO can both point to a single 25% off coupon. You can share promotion codes directly with your customers to use at checkout.\n\nIf you’ve implemented the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\") and turned on promotion codes, customers can apply a discount when upgrading or downgrading their existing subscriptions in the portal.\n\nCustomize controls and limits on promotion codes by specifying eligible customers, first time orders, minimum order values, expiration dates, and redemption limits.\n\n### Restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are some restrictions to promotion codes.\n\n*   You can’t apply a promotion code with amount restrictions on:\n    *   [Customer objects](https://docs.stripe.com/api/customers/object)\n    *   [Subscription Item objects](https://docs.stripe.com/api/subscription_items/object)\n    *   [Invoice Item objects](https://docs.stripe.com/api/subscription_items/object)\n    *   [Subscriptions objects](https://docs.stripe.com/api/subscriptions/object) when you make an update\n    *   Future phases on [Subscription Schedule objects](https://docs.stripe.com/api/subscription_schedules/object)\n\n### Create promotion codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create a promotion code in the Dashboard when you [create a coupon](#create-coupons--create-coupons).\n\nThe **Code** is case-insensitive and unique across active promotion codes for any customer. For example:\n\n*   You can create multiple customer-restricted promotion codes with the same **Code**, but you can’t reuse that **Code** for a promotion code that any customer can redeem.\n*   If you create a promotion code that is redeemable by any customer, you can’t create another active promotion code with the same **code**.\n*   You can create a promotion code with one **Code**, [inactivate](#inactive-promotions--inactivate) it, and then create a new promotion code with the same **Code**.\n\n1.  In the Dashboard on the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, click the **Use customer-facing coupon codes** button.\n2.  Enter a code. This is the code that a customer enters at checkout to redeem the discount. If you don’t set a code, Stripe generates one for you.\n3.  Select requirements for the promotion code. For example, you can restrict the coupon to only being valid on first-time orders.\n\nWhen you create a promotion code, it inherits the configuration of the associated coupon.\n\n### Promotion code configurations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy configuring the promotion code settings, you can customize the following:\n\n*   Which customers are eligible to use a promotion code\n*   How many times a customer can redeem a promotion code\n*   When a promotion code expires\n*   Set a minimum amount a promotion code can apply to\n\n### Limit by customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo limit a promotion code to a particular customer complete these steps:\n\n1.  On the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, select **Limit to a specific customer**.\n2.  Select the relevant customer. If you don’t specify a customer, any customer can redeem the promotion code.\n\n### Limit by first time order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo limit a promotion code to a customer’s first order, on the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, select **Eligible for first-time order only**.\n\n### Set a minimum amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set an minimum amount that is eligible for a promotion code, on the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, select **Require minimum order value** and enter the minimum value.\n\nBecause promotion code restrictions are checked at redemption time, the minimum transaction amount only applies to the initial payment for a subscription.\n\nIf the coupon supports multiple currencies, the minimum amount can be different per-currency.\n\n### Customize expirations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set an expiration date for a promotion code, on the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, select **Add an expiration date** and the date and time at which the promotion code expires.\n\nIf the underlying coupon already has an expiration date set, then the promotion code’s expiration date can’t be later than the coupon’s.\n\nFor example, you might have plans to support a coupon for a year, but you only want it to be redeemable for one week after a customer receives it. To do this, set the coupon’s expiration date to one year from now, and set each the promotion code’s expiration date to one week after it is created.\n\n### Limit redemptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the number of times a customer can redeem the promotion code, on the [Create a coupon](https://dashboard.stripe.com/test/coupons/create) page, select **Limit the number of times this code can be redeemed** and enter the number.\n\nIf the underlying coupon already has a maximum number of times set, then the promotion code’s maximum redemptions can’t be greater than the coupon’s.\n\n### Deactivate promotion codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo deactivate a promotion code, doing the following steps:\n\n1.  In the Dashboard, open the [Products](https://dashboard.stripe.com/test/products?active=true) page.\n2.  Click **Coupons**.\n3.  Click the coupon whose promotion code you want to deactivate.\n4.  In the relevant promotion code row, click the overflow menu ().\n5.  Click **Archive promotion code**.\n\nHowever, if the underlying coupon for a promotion code becomes invalid, all of its promotion codes become permanently inactive. Similarly, if a promotion code reaches its maximum redemption limit or its expiration date, it becomes permanently inactive. These promotion codes can’t be reactivated.\n\n### Apply promotion codes to subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you create a promotion code, redeem a discount by applying the promotion code to a subscription. You can apply promotion codes two ways:\n\n*   When you [create a subscription](https://docs.stripe.com/api#create_subscription)\n*   When you [update a customer’s existing subscription](https://docs.stripe.com/api#update_subscription)\n\n1.  In the Dashboard, go to **Billing** > **Subscriptions**.\n2.  Click the relevant subscription.\n3.  Click **Actions** > **Update subscription** > **Add coupon**.\n4.  Click a promotion code from the dropdown menu and click **Submit**.\n\n### Add promotion codes to Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable promotion codes with the API by setting the [allow\\_promotion\\_codes](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-allow_promotion_codes) parameter in Checkout Sessions. When `allow_promotion_codes` is enabled on a Checkout Session, Checkout includes a promotion code redemption box for your customers to use.\n\n![Promotion code field at checkout](https://b.stripecdn.com/docs-statics-srv/assets/promo_code_checkout.c07ef6d4f0b1b3f9a8a7e4bbba83d56f.png)\n\nPromotion code field at checkout\n\n## Stackable coupons and promotion codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add multiple coupons, promotion codes, or redeemed [discounts](https://docs.stripe.com/api/#discounts) to a customer’s list of charges. You can do this when [creating a subscription](https://docs.stripe.com/api#create_subscription) or by [updating a customer’s existing subscription](https://docs.stripe.com/api#update_subscription).\n\nWe support multiple discounts on both subscriptions and subscription items.\n\n1.  In the Dashboard, go to **Billing** > **Subscriptions**.\n2.  Click the relevant subscription.\n3.  Click **Actions** > **Update subscription** > **Add coupon**.\n4.  Click coupons from the dropdown menus and click **Submit**.\n5.  Click the relevant product.\n6.  Click **Add coupons**.\n7.  Click coupons from the dropdown menus and click **Submit**.\n\n#### Note\n\nYou can start using the new `discounts` parameter on any subscription. We automatically clear out the singular `discount` field when `discounts` with more than one entry is passed in an update.\n\n### Restrictions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are some restrictions to using multiple discounts.\n\n*   You can set up to 20 entries in the `discounts` parameter.\n*   Each entry in `discounts` has to be unique.\n*   You can not pass in a coupon and a promotion code created from the same coupon.\n*   You can not pass in a coupon and a discount that is generated from the same coupon.\n*   Redeemed discounts must already be attached to the customer or subscription that you’re updating.\n\n### Update a subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou don’t need to set `discounts` if you don’t intend to make changes to existing discounts.\n\nWhen updating `discounts`, you need to pass in any previously set `coupon`, `promotion_code` or `discount` you want to keep on the subscription.\n\nPass `discounts = \"\"` to clear all discounts from the subscription. When a subscription has no discounts, the customer-level discount, if any, applies to invoices.\n\nIf you have already set more than one discount on a subscription with the new `discounts` parameter, you can not update the subscription with the deprecated `coupon` or `promotion_code` parameter. Similarly, you can not update a schedule’s phases with the deprecated `coupon` or `promotion_code` parameter if you have set more than one discount on a prior phase.\n\nUpdating `discounts` does not incur prorations or generate an invoice on its own. The new discounts are applied the next time the subscription creates an invoice.\n\n## Alternative discount methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAlthough coupons are the most common way to discount a subscription, you can also do the following:\n\n*   Add a negative [customer balance](https://docs.stripe.com/api#customer_object-balance) to the customer.\n*   Add negative [invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).\n*   Add a [second price](https://docs.stripe.com/products-prices/manage-prices#create-price) that is a cheaper version of a product’s usual price.\n\nOf these methods, negative invoice items provide more detailed information as to what discount was created, when, and why.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Changing subscriptions](https://docs.stripe.com/billing/subscriptions/change)\n*   [Working with invoices](https://docs.stripe.com/billing/invoices/subscription)\n*   [Coupons API](https://docs.stripe.com/api#coupons)\n*   [Promotion codes API](https://docs.stripe.com/api#promotion_codes)",
    "title": "Flexible coupons and promotion codes | Stripe Documentation",
    "description": "Add discounts to subscriptions and subscription items using coupons and promotion codes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/migration/strong-customer-authentication",
    "markdown": "# SCA migration guide for Billing\n\n## Update your Billing implementation to support new Strong Customer Authentication (SCA) requirements.\n\n#### Note\n\nAs of April 2021, issuing banks in India have started taking steps to block transactions that don’t comply with the Reserve Bank of India’s (RBI) [directive on the processing of e-mandates](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=11668) for recurring transactions. Businesses with customers in India should implement the changes outlined in this guide to prevent seeing higher payment failure rates on recurring transactions. Learn more on our [dedicated support page](https://support.stripe.com/questions/background-on-indian-government-regulations-affecting-card-payments).\n\n#### Note\n\nBeginning September 14, 2019, PSD2 regulation requires [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") for many online payments made by European customers. Businesses based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area) (EEA) with customers in the EEA should implement the changes outlined in this guide to prevent declined payments.\n\n## Strong Customer Authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Strong Customer Authentication (SCA)](https://docs.stripe.com/strong-customer-authentication), a regulation that took effect on September 14, 2019, as part of PSD2 in Europe, requires changes to how your European customers authenticate online payments. This regulation [applies](https://docs.stripe.com/strong-customer-authentication) to online payments where the customer’s bank and the business are both in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA).\n\nSCA requires that businesses use two [independent authentication elements](https://stripe.com/guides/strong-customer-authentication#what-is-strong-customer-authentication) to verify payments. In practice, this means adding a new payment step where your customers must confirm their payment using an authentication method like a password, hardware token, or biometric. [3D Secure 2](https://stripe.com/guides/3d-secure-2) is the primary authentication method used to meet SCA requirements for card payments.\n\nTransactions that don’t meet these authentication requirements and that don’t qualify for an exemption may be declined.\n\n## Stripe Billing changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDue to the increased payment friction caused by SCA, you can expect longer collection times and lower conversion rates. The changes to Stripe Billing allow you to maximize your revenue under these constraints. These changes include:\n\n*   New [subscription statuses](#summary-statuses) to facilitate initial payment\n*   [PaymentIntents](#summary-payment-intents) that are now exposed on [invoices](https://docs.stripe.com/api/invoices \"invoices\") as a mechanism for multi-state payments\n*   [SetupIntents](#summary-pending-setup-intent) that can be used to collect authentication while customers are on-session\n*   A new [webhook](#summary-webhooks) that indicates when SCA is required for payment\n*   An updated [Hosted Invoice Page](#hip) allowing customers to complete the authentication step required by SCA\n*   A new set of [dunning emails](https://docs.stripe.com/invoicing/integration/send-email \"dunning email\") to help collect payment when SCA is required\n\n## How SCA impacts Billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSCA impacts card charges between EEA businesses and EEA customers. This changes how on-session and off-session payments are made.\n\n| Term | Example | Impact |\n| --- | --- | --- |\n| On-session | An e-commerce checkout flow or when a customer signs up and pays for a subscription. | When SCA is required, your customer needs to provide payment authentication. This is usually completed by redirecting your customer to their bank for authentication. |\n| Off-session | A monthly subscription automatically charged using a stored card. | Some off-session payments are [exempt](#sca-exemptions) from SCA. For off-session payments that do require SCA, you need to bring your customer on-session so that they can complete the authentication flow. |\n\n## Using previous authorization agreements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Previous authorization agreements](https://docs.stripe.com/strong-customer-authentication/previous-authorization-agreements) for off-session payments when they meet the following criteria:\n\n*   Cards from EU customers saved before December 31, 2020\n*   Cards from UK customers saved before September 14, 2021\n\nFor the following scenarios, this means that you don’t have to save the cards again and re-authenticate these customers. If you use Stripe for non-recurring payments, refer to the [out of scope payments](https://docs.stripe.com/strong-customer-authentication/previous-authorization-agreements#preparing) guide.\n\n| Goal | How you saved the card before the eligibility cutoff | What to do after the eligibility period |\n| --- | --- | --- |\n| **Continue a subscription with previously saved card** | By passing a token, source, or payment method to a `Customer` | No action |\n| **Create a new subscription with previously saved card** | By passing a token, source, or payment method to a `Customer` | Create a subscription with the [off\\_session](https://docs.stripe.com/api/subscriptions/create#create_subscription-off_session) parameter |\n| **Collect a subscription payment after trial ends** | By [creating a trial subscription](https://docs.stripe.com/billing/subscriptions/trials) pre-SCA that ends after the eligibility period | No action |\n| **Create a standalone invoice with previously saved card** | By [passing a token, source, or payment method](https://docs.stripe.com/saving-cards) to a `Customer` | [Pay](https://docs.stripe.com/api/invoices/pay) or [create a one-off invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice) |\n\n## Updating your Billing integration to support SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe updates you need to make to your integration depend on how you use Stripe Billing. There are four possible scenarios you need to manage to support SCA. You need to evaluate your integration against these scenarios to find out which ones apply to you.\n\n*   [Scenario 1](#scenario-1): Charging customers on-session for their initial payment\n*   [Scenario 2](#scenario-2): Charging customers off-session for their initial payment\n*   [Scenario 3](#scenario-3): Managing recurring charges after customers make their first payment\n*   [Scenario 4](#scenario-4): One-off invoices\n\nThe first scenario applies to you if you immediately charge your customers when they subscribe. This means that your customer’s first payment is on-session. The second scenario applies to you if you don’t immediately charge your customers when they subscribe, and their initial payment occurs when they’re off-session.\n\nThe third scenario applies to most Billing users because it’s for managing recurring payments. These are any payments that occur after the first payment is made. The fourth scenario only applies to you if you use [one-off invoices](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n\nRegardless of the scenarios that apply to your integration, when you create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), you can [expand](https://docs.stripe.com/api/expanding_objects) the [latest\\_invoice.payment\\_intent](https://docs.stripe.com/api/subscriptions/object#subscription_object-latest_invoice) attribute to determine the outcome of a payment. You can also expand [pending\\_setup\\_intent](https://docs.stripe.com/api/subscriptions/object#subscription_object-pending_setup_intent) when handling subscriptions without an initial payment as shown in [scenario 2](#scenario-2).\n\n## Scenario 1: Charging customers on-session for their initial payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen charging immediately, your customers’ first charge for a subscription requires SCA. This means you need to add handling for authentication in your application checkout or signup flow. When setting up a subscription for the first time, customers are on-session. This means that they’re on a browser or app and able to react to your prompts.\n\n![diagram showing how a payment that requires SCA will return with a status of requires_action](https://b.stripecdn.com/docs-statics-srv/assets/sca_scenario1.df6584effe5cd9769f5b4ac0705272e8.png)\n\nWhen setting up a subscription that bills immediately, Stripe attempts to charge the card on file for your customer as part of the [Create Subscription](https://docs.stripe.com/api/subscriptions/create) or [Create Customer](https://docs.stripe.com/api/customers/create) call which generates the subscription.\n\n### Step 1: Creating subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubscriptions have new [incomplete statuses](https://docs.stripe.com/billing/migration/strong-customer-authentication#summary-statuses) that you need to use to support SCA. However, you have two options for accessing these statuses. The first option allows you to remain on an older API version but requires you to pass a flag in some of your API calls. The second option is upgrading your API version. The options are explained in subsequent sections but the diagrams below provide an overview of the subscription behavior with these statuses.\n\nWhen a payment succeeds, the subscription’s status is set to `active` and no further action is required. When a payment fails, the subscription’s status is set to `incomplete` and the `latest_invoice.payment_intent.status` attribute is set to `requires_payment_method`. In these situations, you should charge the customer with another payment method using the [Pay Invoice](https://docs.stripe.com/api/invoices/pay) endpoint.\n\n![How to handle a subscription payment failure.](https://b.stripecdn.com/docs-statics-srv/assets/initial_payment_fail.110591368c0834d7cb92f3ded955b2fe.svg)\n\nWhen a payment requires SCA, the subscription’s status is set to `incomplete` and the `latest_invoice.payment_intent.status` attribute is set to `requires_action`. In these situations, you need your customer to complete a [3D Secure](https://stripe.com/guides/3d-secure-2) authentication flow using `latest_invoice.payment_intent`. The [next step](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-1-handling-sca) explains how to do this.\n\n![How to handle a subscription requiring SCA.](https://b.stripecdn.com/docs-statics-srv/assets/initial_payment_sca.1407dfe31f9c73a82094d8dbd51f6f02.svg)\n\nYou can use the [regulatory test cards](https://docs.stripe.com/testing#regulatory-cards) to explore this behavior in your test environment. For detailed instructions on how to build a complete subscriptions integration, see the [integration guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n#### Option 1: Using the payment behavior flag![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t upgrade your API version, but pass a new [payment\\_behavior=allow\\_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) flag on subscription create and update calls, your subscriptions will use the new [incomplete status](https://docs.stripe.com/billing/migration/strong-customer-authentication#summary-statuses) functionality. This allows you to manage scenarios that require SCA, which is explained in the [next step](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-1-handling-sca). See the [FAQ](#faq) at the bottom of this document for a complete list of endpoints you need to pass this flag to.\n\nIf you don’t upgrade your API version, and don’t pass the `payment_behavior` flag, attempts to create subscriptions that require SCA will fail and return a [card\\_error](https://docs.stripe.com/api/errors#errors-card_error). This is consistent with legacy behavior that blocks subscription creation if payment fails.\n\n#### Option 2: Upgrading your API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you upgrade to API version [2019-03-14](https://docs.stripe.com/upgrades#2019-03-14) or newer, your subscriptions automatically use the new [incomplete status](https://docs.stripe.com/billing/migration/strong-customer-authentication#summary-statuses) functionality. After upgrading your API, you can move on to the [next step](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-1-handling-sca).\n\n### Step 2: Handling SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn order to complete payment on a charge that requires SCA, you can either use [Stripe.js](https://docs.stripe.com/payments/elements) or a browser-redirect flow. Stripe.js is recommended because most Stripe users already use it, and it makes it easier to manage 3DS authentication. Using Stripe.js involves passing the `latest_invoice.payment_intent.client_secret` into the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) method, which displays a modal that allows the customer to provide authentication for their payment.\n\nAlternatively, if you prefer to not use Stripe.js, you can pass a `return_url` to the PaymentIntent confirmation endpoint and initiate a redirect flow:\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode return_url=\"[https://www.example.com/return_url](https://www.example.com/return_url)\"`\n\nFor more details about using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") authentication for Billing, see the [overview guide](https://docs.stripe.com/billing/subscriptions/overview#requires-action).\n\nAfter the customer successfully completes the redirect or modal flow, the subscription status is `active` and the invoice status is `paid`. Be aware that the customer might quit their browser after authentication, but before being redirected. To provide more robust handling, Stripe recommends listening to invoice [webhooks](https://docs.stripe.com/webhooks \"webhook\") as described in the next step.\n\n### Step 3: Provisioning and fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s possible for customers to leave their browser before the `confirmCardPayment` callback executes, or before the `return_url` redirect occurs. In these cases, your application might not be aware that payment is complete, and the associated product might not be provisioned for your customer. You can avoid these situations by listening to the [invoice.paid](https://docs.stripe.com/api/events/types#event_types-invoice.paid) event notification to verify that the invoice is `paid` and `billing_reason=subscription_create`. This means you can provision the subscription for your customer.\n\n## Scenario 2: Charging customers off-session for their initial payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreating subscriptions with [free trials](https://docs.stripe.com/billing/subscriptions/trials), using [metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), and invoices discounted through coupons or customer balances often result in non-payment invoices. This means the customer isn’t immediately charged when the subscription is created. In these situations, you need to [save the customer’s payment information](https://docs.stripe.com/payments/save-and-reuse) and authenticate their card while they’re on-session so that you can charge them later.\n\nTo manage situations like this, Stripe created the [Setup Intents API](https://docs.stripe.com/api/setup_intents \"Setup Intents API\"), which allows you to:\n\n*   Collect payment information\n*   Authenticate the customer’s card\n*   Authorize the customer’s card without charging it\n\nCollecting payment information upfront and authenticating payments allows Stripe to apply for exemptions on your behalf. These exemptions generally decrease the chance that 3DS is required when you charge customers off-session.\n\nIf subscription creation does not require an initial payment and if authentication is recommended while the customer is on-session, Stripe Billing automatically creates a SetupIntent. This is exposed on the Subscription object through the [pending\\_setup\\_intent](https://docs.stripe.com/api/subscriptions/object#subscription_object-pending_setup_intent) attribute. See the [Using SetupIntents](https://docs.stripe.com/billing/subscriptions/overview#using-setupintents) section to learn more about SetupIntents and how to use them with Billing. To create subscriptions and charge customers off-session for their initial payment, you need to:\n\n1.  Use [CreatePaymentMethod](https://docs.stripe.com/js#stripe-create-payment-method) to collect payment information\n2.  [Create a customer](https://docs.stripe.com/api/customers/create#create_customer-payment_method) using the ID of the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") you created\n3.  [Create the subscription](https://docs.stripe.com/api/subscriptions/create)\n4.  Set up error handling using [confirmCardSetup](https://docs.stripe.com/js#stripe-confirm-card-setup) for authentication failures and [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) for authorization failures\n\nYou can also use SetupIntents to change the payment method on a customer or subscription. The [saving cards without payment](https://docs.stripe.com/payments/save-and-reuse) section explains how to do this at the customer level. At the subscription level, Stripe automatically updates the `pending_setup_intent` field on the subscription object if authentication is recommended on the updated default payment method.\n\n## Scenario 3: Managing recurring charges after customers make their first payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRecurring charges usually occur when customers are off-session. If no [exemptions](https://docs.stripe.com/billing/migration/strong-customer-authentication#sca-exemptions) apply to the charge, and SCA is required, you need to bring your user on-session so they can complete the payment. To do this, you can use Stripe’s prebuilt tools or create your own solution. The diagram below explains these options in more detail.\n\n![Recurring payments flow for subscriptions.](https://b.stripecdn.com/docs-statics-srv/assets/scenario3.0181edcaab626b8acdebc3195b3bd35a.svg)\n\nWhen a billing cycle date or a subscription threshold is reached, payment for the associated subscription is attempted. If the charge requires SCA, the subscription status changes to `past_due`. With Stripe’s tools, you can enable a [set of emails](#settings-3ds-payment) specific to 3D Secure to be sent to your customers when SCA is required. Alternatively, if you want to send your own emails but don’t want to build your own authentication flow, you can use our [Hosted Invoice Page](#hip).\n\nIf you choose to build your own solution, you can listen to the new `invoice.payment_action_required` webhook or the existing `customer.subscription.updated` webhook to be notified of subscriptions that become `past_due` because of SCA requirements. When this happens, you need to bring your customer back on-session and have them complete an authentication flow similar to what is explained in the [first scenario](#scenario-1).\n\nAfter the payment is authenticated and succeeds, the subscription status updates to `active` and the invoice status updates to `paid`.\n\n## Scenario 4: One-off invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOne-off invoices can also be subject to SCA. The changes you need to make to manage one-off invoices depends on how you use Billing today. If you already use our Hosted Invoice Page, you get SCA support out of the box without making any changes. If you use `collection_method=charge_automatically`, you might need to bring the customer back on-session to complete SCA. You can do so with our Hosted Invoice Page, or through the custom handling described in the [third scenario](#scenario-3).\n\nIf your application uses the [Pay Invoice](https://docs.stripe.com/api/invoices/pay) endpoint, you either need to start using the Hosted Invoice Page or build custom handling because this endpoint will return an HTTP 402 error when SCA is required. If you choose to build custom handling, you need to use the invoice’s PaymentIntent to drive the payment to completion. You also need to set [off\\_session](https://docs.stripe.com/api/invoices/pay#pay_invoice-off_session) when attempting to pay an invoice using the endpoint.\n\nStripe Billing offers a set of prebuilt tools that can automatically handle payments that require 3D Secure authentication.\n\nThis demo shows a sample invoice payment.\n\nYou can choose to have Stripe:\n\n*   Email your customers when an off-session payment requires 3D Secure authentication\n*   Schedule follow-up emails reminding customers to complete authentication\n*   Provide a link to a hosted invoice page where customers can complete authentication\n\nYou can customize emails and the hosted invoice page in your [Branding settings](https://dashboard.stripe.com/account/branding).\n\nThe following table outlines the various actions you or Stripe can take to trigger SCA and whether or not Stripe considers the action on-session or off-session by default. For actions that are off-session, Stripe sends an authentication link if the SCA email setting is enabled.\n\n| Action | Customer presence | Sends SCA email |\n| --- | --- | --- |\n| Create subscription from the API | On-session | No  |\n| Create subscription from the Dashboard | Off-session | Yes |\n| Update subscription from the API | On-session | No  |\n| Update subscription from the Dashboard | Off-session | Yes |\n| Update customer source | Off-session | Yes |\n| Pay invoice from the API | Off-session | Yes |\n| Pay invoice from the Dashboard | Off-session | Yes |\n| Pay invoice from Hosted invoice page | On-session | No  |\n| Stripe automatically charges scheduled invoice | Off-session | Yes |\n| Stripe dunning | Off-session | Yes |\n\nThe API actions for creating subscriptions, updating subscriptions, and paying invoices also have an `off_session` attribute that you can set manually. Setting this attribute to `true` indicates the payment is off-session, and `false` indicates the payment is on-session.\n\n## Emails and dunning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can send a [dunning email](https://docs.stripe.com/invoicing/integration/send-email \"dunning email\") to customers for overdue payments to increase recovery chances. Our suite of customer emails has been updated to include notifications for when 3D Secure authentication is required for off-session payments. This is in addition to support for sending invoices, receipts, and failed payment notifications.\n\n## 3D Secure payment settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can schedule when to send 3D Secure emails and you can determine what effect non-payment has on subscriptions. Use the [Billing settings](https://dashboard.stripe.com/settings/billing/automatic) in the Stripe Dashboard to configure these settings.\n\n![How to configure your 3D Secure engagement.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-settings.e64e0e1fdd9eb5fcdb87eedab14e07bd.png)\n\n### Request for payment authentication using 3D Secure emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA configurable email template is available to automatically send your customers an email asking them to authenticate to complete payment for their invoice or subscription.\n\n![Sample 3D Secure authentication notification.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-email.05ee80fdb0e4873670106b982c986c3f.png)\n\n## Hosted Invoice Page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Billing provides a [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) that supports all invoices. To support SCA requirements, this page can now manage [3D Secure](https://stripe.com/guides/3d-secure-2) authentication.\n\nIf an off-session payment requires the customer to complete 3D Secure authentication, you can send them a link to a hosted invoice page. On the hosted invoice page, the customer can confirm their payment or add a new payment method if one is needed. After confirming their payment, the customer can complete authentication with their bank using a 3D Secure 2 modal that is displayed.\n\n## SCA exemptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe SCA regulation contains a [set of exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication). These exemptions mean that your customers might not need to provide additional authentication to confirm some payments. Stripe’s goal is to optimize your payment flow and attempt to automatically apply as many exemptions as possible in order to reduce the likelihood of your customers needing to authenticate.\n\n## Summary of API changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe API contains several updates to help manage SCA requirements and the authentication flow.\n\n### Subscription statuses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTwo [statuses](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle) have been added to the Subscription resource: `incomplete` and `incomplete_expired`. Subscriptions enter the `incomplete` status only when the first charge is attempted and either fails or requires SCA. Any subscription that remains in the `incomplete` state and is not successfully paid expires after 23 hours. This automatically changes the status to `incomplete_expired`. After a subscription is `active` it cannot enter `incomplete` again. Future payments that require SCA result in the subscription being `past_due`.\n\n#### Note\n\nUsers on API version [2019-03-14](https://docs.stripe.com/upgrades#2019-03-14) or newer automatically have access to this functionality. If you’re on an older API version, you need to use the [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) flag to use these new statuses.\n\n### Subscriptions reference their latest invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe subscription’s `latest_invoice` field provides a reference to the invoice affecting the status of a subscription. This change is additive to all API versions.\n\n### All invoices use PaymentIntents for payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Payment Intents API](https://docs.stripe.com/api/payment_intents) is Stripe’s new payment API that manages the lifecycle of a payment. This includes a new `requires_action` payment status and a `next_action` attribute. These additions indicate how to complete payment, which is usually done through a redirect to the cardholder’s bank for authentication or using a URL embedded within the response. The Invoice object now has a `payment_intent` you can use to manage the payment lifecycle, in addition to the existing `charge` attribute.\n\nThis change is additive to all API versions and is backwards compatible. You can still use the `charge` attribute to manage payments, but if your business needs to support SCA and wants future compatibility with other payment methods that require authentication, Stripe recommends using the `payment_intent` attribute.\n\n### Stripe.js support for the Payment Intents API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices for Stripe Billing are fully compatible with the Payment Intents API, so you get the benefit of the Stripe.js helper functions to assist with your checkout payment flow. Specifically, the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) JavaScript function helps you display a 3D Secure modal to collect the authentication information needed to complete payment. This change is only relevant if you use PaymentIntents.\n\n### An invoice.payment\\_action\\_required webhook is sent when SCA is required ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen an invoice requires customer action, Stripe sends a new `invoice.payment_action_required` webhook containing the associated invoice. This webhook is meant to complement existing `invoice.paid` and `invoice.payment_failed` webhooks. This change is additive to all API versions. Existing Stripe Billing users that are not concerned with SCA can ignore this webhook.\n\n### Subscriptions reference SetupIntents for collecting authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubscription’s now have a `pending_setup_intent` attribute that references a SetupIntent. This SetupIntent can be used to collect authentication while customers are on-session, which optimizes off-session payments. This change is additive to all API versions.\n\n## Frequently asked questions (FAQ) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Does SCA apply to my business?**\n    \n    Strong [Customer](https://docs.stripe.com/api/customers \"Customers\") Authentication (SCA) regulations apply to online payments where the cardholder’s bank and the business’s payment provider are both in the European Economic Area (EEA). Read more in the [Strong Customer Authentication Overview](https://docs.stripe.com/strong-customer-authentication).\n    \n*   **What payment methods require SCA?**\n    \n    Strong Customer Authentication will apply to [“customer-initiated” online payments within Europe](https://stripe.com/guides/strong-customer-authentication#when-is-strong-customer-authentication-required). As a result, most card payments and all bank transfers will require SCA. The major integration changes that are required pertain to cards, as documented in this guide. Bank transfers won’t require an integration change because it’s up to the customer’s bank to authenticate transfers using their existing online bank interface.\n    \n*   **What happens if I don’t upgrade my integration, or start passing the payment\\_behavior flag?**\n    \n    Calls to create or update subscriptions that result in charges requiring SCA will fail with an HTTP 402 error. Similarly, calls to the [Pay Invoice](https://docs.stripe.com/api/invoices/pay) endpoint will fail. As a result you might experience an overall increase in payment failures.\n    \n*   **How can I use the new subscription behavior without upgrading my API version?**\n    \n    Assuming that updating your API version is not an option, you should use the [payment\\_behavior=allow\\_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) flag. Since payments can be initiated during subscription updates as well as subscription creation, you should pass this flag to all `subscription` and `subscription_item` creation or update calls. Below is a list of endpoints this flag applies to.\n    \n    *   [Create Customer](https://docs.stripe.com/api/customers/create)\n    *   [Update Customer](https://docs.stripe.com/api/customers/update)\n    *   [Create Subscription](https://docs.stripe.com/api/subscriptions/create)\n    *   [Update Subscription](https://docs.stripe.com/api/subscriptions/update)\n    *   [Update Subscription Item](https://docs.stripe.com/api/subscription_items)\n    \n    For creating and updating customers, the `payment_behavior` flag is only supported when subscribing a customer using an the API request. Creating and updating subscriptions using the Customer object is no longer documented, but the APIs are still supported for legacy reasons.\n    \n*   **How often will SCA be required and when will I be able to rely on exemptions?**\n    \n    For subscriptions, Stripe is working to optimize the exemptions claimed on your behalf. SCA will systematically be applied to the first charge in a subscription where both the merchant and the customer are located in the EEA. Subsequent charges could be subject to exemptions. For one-off invoices and charges, Stripe will apply for exemptions on your behalf when possible.\n    \n    There are a couple of known caveats to [SCA exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\"):\n    \n    *   Certain card issuing banks don’t support some or all exemption categories, though they may in the future.\n    *   The card issuing bank has an unconditional right to challenge a legitimate exemption request. It is expected this will happen when they assess a transaction as high risk.\n    \n    When considering how to update your integration, plan for SCA every time.\n    \n*   **What is off-session and why is it important?**\n    \n    A payment is off-session if it occurs without the direct involvement of the customer, using previously-collected payment information. Explicitly tagging transactions as off-session allows Stripe to claim exemptions on your behalf. For example, the [merchant-initiated transaction](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") (MIT) exemption only applies to off-session payments. Claiming this exemption decreases the chance that SCA is required, which reduces the friction on the customer.\n    \n*   **When does Stripe automatically infer on-session and off-session on your behalf?**\n    \n    *   Payments initiated through subscription creation are assumed to be on-session.\n    *   Payments initiated by Stripe’s automated systems, like a payment for a recurring subscription, are considered off-session.\n    *   Payments made using the [Pay Invoice](https://docs.stripe.com/api/invoices/pay) endpoint need to be explicitly tagged as on or off-session using the [off\\_session](https://docs.stripe.com/api/invoices/pay#pay_invoice-off_session) attribute. If no value is set, Stripe defaults to `true`.\n    \n\n## SCA Migration Guide changelog ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBelow is a list of major revisions to this guide.\n\n**2019-07-15**\n\n*   Add content explaining SetupIntents and when to use them\n*   Explain when Stripe automatically determines whether a payment is on or off-session\n*   Explain when and how to set `off_session` on the [Pay Invoice](https://docs.stripe.com/api/invoices/pay) endpoint\n*   Add link to new card for testing SCA\n*   Renamed the `enable_incomplete_payments` flag to [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior)\n    *   `payment_behavior` can be set to either `allow_incomplete` or `error_if_incomplete`\n\n**2019-04-15**\n\n*   Publish initial content",
    "title": "SCA migration guide for Billing | Stripe Documentation",
    "description": "Update your Billing implementation to support new Strong Customer Authentication (SCA) requirements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/prorations",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Prorations\n\n## Manage prorations for modified subscriptions.\n\nThe most complex aspect of changing existing subscriptions is proration, where the customer is charged a percentage of a subscription’s cost to reflect partial use. This page explains how prorations work with subscriptions and how to manage prorations for your customers.\n\n## How prorations work![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor example, [upgrading or downgrading](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade) a subscription can result in prorated charges. If a customer upgrades from a 10 USD per month plan to a 20 USD option, they’re charged prorated amounts for the time spent on each option. Assuming the change occurred halfway through the billing period, the customer is billed an additional 5 USD: -5 USD for unused time on the initial price, and 10 USD for the remaining time on the new price.\n\nProration ensures that customers are billed accurately, but a proration can result in different payment amounts than you may expect. Negative prorations aren’t automatically refunded and positive prorations aren’t immediately billed, although you can do both manually.\n\nYou can [preview a proration](#preview-proration) to view the amount before applying the changes.\n\n### Prorations and discounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen applying changes to existing subscriptions, [discounts](https://docs.stripe.com/billing/subscriptions/coupons) don’t affect the resulting proration line items.\n\n### What triggers prorations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the following scenarios result in a proration:\n\n*   Changing to a price with a different base cost\n*   Changing to a price with a different billing interval\n*   Adding a trial period to an active subscription\n*   Changing the quantity\n*   [Licensed](https://docs.stripe.com/billing/subscriptions/quantities) (per-seat) subscriptions (because they’re billed at the start of each billing period)\n\n### When prorations are applied![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProrations only apply to charges that occur ahead of the billing cycle. [Usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) isn’t subject to proration.\n\nThe prorated amount is calculated as soon as the API updates the subscription. The current billing period’s start and end times are used to calculate the cost of the subscription before and after the change.\n\n### Taxes and prorations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor information about how taxes work with prorations, see [Collect taxes for recurring payments](https://docs.stripe.com/billing/taxes/collect-taxes).\n\n## Preview a proration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [retrieve an upcoming invoice](https://docs.stripe.com/api#upcoming_invoice) to preview changes to a subscription. This API call doesn’t modify the subscription, it returns the upcoming [invoice](https://docs.stripe.com/api/invoices \"invoices\") based only on the parameters that you pass. Changing the `price` or `quantity` both result in a proration. This example changes the `price` and sets a date for the proration.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Set proration date to this moment: proration_date = Time.now.to_i  subscription = Stripe::Subscription.retrieve('sub_49ty4767H20z6a')  # See what the next invoice would look like with a price switch # and proration set: items = [{   id: subscription.items.data[0].id,   price: 'price_CBb6IXqvTLXp3f', # Switch to new price }]  invoice = Stripe::Invoice.upcoming({   customer: 'cus_4fdAW5ftNQow1a',   subscription: 'sub_49ty4767H20z6a',   subscription_items: items,   subscription_proration_date: proration_date, })`\n\nYou can expand the example response below to see:\n\n*   The credit for unused time at the previous price on lines 36-38.\n*   The cost for time spent at the new price on lines 107-109.\n*   The new subtotal and total for the invoice on lines 276-279.\n\n`{   \"account_country\": \"US\",   \"account_name\": \"Test account\",   \"amount_due\": 3627,   \"amount_paid\": 0,   \"amount_remaining\": 3627,   \"application_fee_amount\": null,   \"attempt_count\": 0,   \"attempted\": false,   \"billing_reason\": \"upcoming\",`\n\nUse this information to confirm the changes with the customer before modifying the subscription. Because Stripe prorates to the second, prorated amounts may change between the time they’re previewed and the time the update is made. To avoid this, pass in a `subscription_proration_date` to the invoice when you preview a change. When you update the subscription, pass the same date using the `proration_date` parameter on a subscription so that the proration is calculated at the same time.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.update(   'sub_49ty4767H20z6a',   {     items: [       {         id: subscription.items.data[0].id,         price: 'price_CBb6IXqvTLXp3f',       },     ],     proration_date: proration_date,   } )`\n\n## Disable prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nProrating is controlled by the [`proration_behavior`](https://docs.stripe.com/api/subscriptions/update#update_subscription-proration_behavior) parameter and defaults to [`create_prorations`](https://docs.stripe.com/api/subscriptions/update#update_subscription-proration_behavior).\n\nTo disable prorations on a per-request basis, set the `proration_behavior` parameter to `none`. No parameter turns off all future prorations for a Subscription. To disable prorations indefinitely, set `proration_behavior` to `none` for every request that generates prorations:\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"items[0][id]\"=\"si_1AkFf6LlRB0eXbMtRFjYiJ0J\" \\   -d \"items[0][price]\"=\"price_CBb6IXqvTLXp3f\" \\   -d \"proration_behavior\"=\"none\"`\n\nWhen prorations are disabled, customers are billed the full amount at the new price when the next invoice is generated.",
    "title": "Prorations | Stripe Documentation",
    "description": "Use Stripe Billing to manage how your customers are charged for partial use of their subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/integrations/salesforce",
    "markdown": "# Integrate Stripe Billing with Salesforce\n\n## Leverage Stripe seamlessly through your Salesforce workflows and processes.\n\nUse the guidance on this page to learn how integrating Stripe with Salesforce can help support your business needs.\n\nCombine Stripe Billing and Salesforce for the following benefits:\n\n*   Automatically create or update subscriptions on Stripe based on Salesforce activity (for example, when your sales team activates an order).\n*   Model complex sales contracts using features in Stripe Billing, such as subscription schedules, tiered prices, and usage-based (metered) billing.\n*   Generate links from within Salesforce to secure Stripe-hosted pages that allow your customers to save a payment method on file.\n*   View the latest state of subscriptions and invoices of a customer from within Salesforce.\n\nRefer to the following guides, depending on your business needs:",
    "title": "Integrate Stripe Billing with Salesforce | Stripe Documentation",
    "description": "Leverage Stripe seamlessly through your Salesforce workflows and processes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/products",
    "markdown": "# Products | Stripe API Reference\n\nEndpoints\n\n[POST/v1/products](https://docs.stripe.com/api/products/create)[POST/v1/products/:id](https://docs.stripe.com/api/products/update)[GET/v1/products/:id](https://docs.stripe.com/api/products/retrieve)[GET/v1/products](https://docs.stripe.com/api/products/list)[DELETE/v1/products/:id](https://docs.stripe.com/api/products/delete)[GET/v1/products/search](https://docs.stripe.com/api/products/search)\n\n## [The Product object](https://docs.stripe.com/api/products/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the product is currently available for purchase.\n    \n*   #### \n    \n    default\\_pricenullable stringExpandable\n    \n    The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More attributes\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n*   #### \n    \n    package\\_dimensionsnullable object\n    \n*   #### \n    \n    shippablenullable boolean\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    tax\\_codenullable stringExpandable\n    \n*   #### \n    \n    unit\\_labelnullable string\n    \n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Create a product](https://docs.stripe.com/api/products/create)\n\nCreates a new product object.\n\n### Parameters\n\n*   The product’s name, meant to be displayable to the customer.\n    \n*   Whether the product is currently available for purchase. Defaults to `true`.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns a product object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Update a product](https://docs.stripe.com/api/products/update)\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```",
    "title": "Products | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/upsells",
    "markdown": "# Subscription upsells | Stripe DocumentationThe Stripe Docs logo\n\n## Enable customers to upgrade their subscription plan at checkout by using upsells.\n\n## Subscription upsells![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscription upsells give customers the option to upgrade to a longer-term plan using Checkout. Upselling customers to longer subscription intervals (for example, from monthly to yearly) can increase your average order value and cash flow.\n\nAll recurring prices that aren’t metered are eligible to use subscription upsells. For any eligible price, you can set up a subscription upsell to another price that meets the following criteria:\n\n*   Prices must reference the same [Product](https://docs.stripe.com/api/prices/object#price_object-product).\n*   Prices must have the same [currency](https://docs.stripe.com/api/prices/object#price_object-currency).\n*   Prices must be `recurring` [type](https://docs.stripe.com/api/prices/object#price_object-type).\n*   If your prices use [tax behavior](https://docs.stripe.com/api/prices/object#price_object-tax_behavior), their values must be identical.\n*   If your price uses [tiers](https://docs.stripe.com/api/prices/object#price_object-tiers), the value for `up_to` in each tier must be identical.\n*   If using [quantity transformation](https://docs.stripe.com/api/prices/object#price_object-transform_quantity), the values for `divide_by` and `round` must be identical.\n\n## Create a subscription upsell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure a subscription upsell in the Dashboard on the Price detail page (to view the details for a Price, click on a Product, then click a price that’s been added to a Product). In the Upsells section, select an upsell price from the dropdown menu. Upsells immediately apply to eligible Checkout Sessions that use that price.\n\n![Configure a subscription upsell on the Price detail page](https://b.stripecdn.com/docs-statics-srv/assets/add-upsell.08bc9bf9425295edb1ada9ff297ee257.gif)\n\nConfigure a subscription upsell on the Price detail page.\n\n## Checkout experience ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring checkout, customers see an option to select the upsell with savings displayed, if applicable. For a Checkout Session to be eligible for upsells, it must:\n\n*   Be a subscription mode Checkout Session\n*   Have only one `type=recurring` price in the Checkout Session\n*   Have a valid configuration for the upsell price\n\nStripe calculates savings based on the amount the user would save in one billing cycle if they chose upsell pricing. For example, a monthly subscription of 100 USD that upsells to an annual subscription of 1000 USD shows savings of 200 USD. Savings are displayed as an amount or a percentage, depending on the character length of the savings.\n\nUsers can toggle between the initial price option and the upsell price option and then checkout.\n\n![Toggle between the initial price option and the upsell price option](https://b.stripecdn.com/docs-statics-srv/assets/upsell-preview.2a43c1a8acb9f167178b7fda6a2b0796.gif)\n\nCustomer preview.\n\n## Retrieve Checkout Session line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a customer selects an upsell, the `line_items` for the Checkout Session update to reflect the upsell price. When [fulfilling your order](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler) using the `checkout.session.completed` webhook, make sure to [retrieve the line items](https://docs.stripe.com/api/checkout/sessions/line_items).\n\n## Trial behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer selects an upsell for a Checkout Session with a trial available, the trial length won’t change.\n\n## Coupon behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a coupon is passed into the [discounts](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts) array of the Checkout Session, that coupon is also applied to the upsell price if a customer selects the upsell. For example, if a monthly subscription upsells to a yearly subscription, and you pass in a 50% off coupon with a duration of four months, the discount applies to all invoices in the four month period starting when the coupon is first applied. If the upsell is selected, the 50% discount applies to the entire yearly subscription because the yearly invoice is created during the coupon’s four month period.\n\n## Remove a subscription upsell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo remove a subscription upsell, click the **x** below. After you remove a subscription upsell, that upsell won’t be available to any new Checkout Sessions.\n\n![Remove an upsell](https://b.stripecdn.com/docs-statics-srv/assets/remove-upsell.36e5e59619f3c13f0aa94a3bd48bafdb.gif)\n\nRemove an upsell.",
    "title": "Subscription upsells | Stripe Documentation",
    "description": "Enable customers to upgrade their subscription plan at checkout by using upsells.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/prices",
    "markdown": "# Prices | Stripe API Reference\n\nPrices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has prices for $10/month, $100/year, and €9 once.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription), [create an invoice](https://docs.stripe.com/billing/invoices/create), and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\nEndpoints\n\n[POST/v1/prices](https://docs.stripe.com/api/prices/create)[POST/v1/prices/:id](https://docs.stripe.com/api/prices/update)[GET/v1/prices/:id](https://docs.stripe.com/api/prices/retrieve)[GET/v1/prices](https://docs.stripe.com/api/prices/list)[GET/v1/prices/search](https://docs.stripe.com/api/prices/search)\n\n## [The Price object](https://docs.stripe.com/api/prices/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the price can be used for new purchases.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   The ID of the product this price is associated with.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The unit amount in cents to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.\n    \n\n### More attributes\n\n*   #### \n    \n    currency\\_optionsnullable objectExpandable\n    \n*   #### \n    \n    custom\\_unit\\_amountnullable object\n    \n\n*   #### \n    \n    lookup\\_keynullable string\n    \n*   #### \n    \n    tax\\_behaviornullable enum\n    \n*   #### \n    \n    tiersnullable array of objectsExpandable\n    \n\n*   #### \n    \n    transform\\_quantitynullable object\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Create a price](https://docs.stripe.com/api/prices/create)\n\nCreates a new price for an existing product. The price can be recurring or one-time.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   #### \n    \n    productstringRequired unless product\\_data is provided\n    \n    The ID of the product that this price will belong to.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   #### \n    \n    unit\\_amountintegerRequired conditionally\n    \n    A positive integer in cents (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.\n    \n\n### More parameters\n\n*   #### \n    \n    custom\\_unit\\_amountobjectRequired unless unit\\_amount is provided\n    \n\n*   #### \n    \n    product\\_dataobjectRequired unless product is provided\n    \n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe newly created `Price` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d \"recurring[interval]\"=month \\  -d \"product_data[name]\"=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Update a price](https://docs.stripe.com/api/prices/update)\n\nUpdates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n### Returns\n\nThe updated price object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Retrieve a price](https://docs.stripe.com/api/prices/retrieve)\n\nRetrieves the price with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a price if a valid price or plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```",
    "title": "Prices | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/products-prices/manage-prices",
    "markdown": "# Manage products and prices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage products and prices.\n\nYou can create and update products and prices in the Dashboard or through the API.\n\nSome advanced use cases, like [creating variable prices](https://docs.stripe.com/products-prices/pricing-models#variable-pricing), require you to use the API. If you have a large number of products and prices or if you’re [building a custom integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements) with Elements, you need to use the API.\n\n*   Use the [Dashboard](https://dashboard.stripe.com/test/products) to create and manage products and prices if you want to avoid writing code or if you only have a few products and prices. Set up your [pricing model](https://docs.stripe.com/products-prices/pricing-models \"pricing model\") in test mode and click the **Copy to live mode** button on the product details page.\n*   Use the [API](https://docs.stripe.com/api) or the [Stripe CLI](https://docs.stripe.com/stripe-cli) to create and manage products and prices. The API is a direct method that you use for production implementations. The Stripe CLI is a developer tool that helps you build, test, and manage your integration with Stripe directly from your terminal.\n\nThe following API steps use a fictional SaaS collaboration tool (Togethere) as an example, where the basic product is a project management dashboard.\n\n[](#create-product)\n\n### Create a product and price ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Create a product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a product in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Click **+Add product**.\n3.  Enter the **Name** of your product.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n5.  _(Optional)_ Add an **Image** of your product. Use a JPEG, PNG, or WEBP file that’s smaller than 2MB. The image appears at checkout.\n6.  _(Optional)_ If you’re using [Stripe Tax](https://docs.stripe.com/tax), select a **Tax code** for your product. See [tax codes](https://docs.stripe.com/tax/tax-codes) for more information about the appropriate category for your product.\n7.  _(Optional)_ Enter a **Statement descriptor**. This descriptor overrides any account descriptors for recurring payments. Choose something that your customers would recognize on a bank statement.\n8.  _(Optional)_ Enter a **Unit label**. This describes how you sell your product. For example, if you charge by the seat, enter “seat” so the line item includes “per seat” for the price. Unit labels appear at checkout, and in invoices, receipts, and the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\n#### Create a price for the product ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo save a product in the Dashboard, you must also add at least one price.\n\nThe product editor shows the flat-rate pricing model by default. You can create multiple prices or use a different pricing model with the **Advanced pricing options**.\n\n1.  Select a **Pricing model**. For more details about recurring pricing models, read the [pricing model guide](https://docs.stripe.com/products-prices/pricing-models).\n    \n    *   **Flat-rate pricing**: Charge the same price for each unit. If you use this option, select **One time** or **Recurring**.\n    *   **Package pricing**: Charge by the package, or group of units, such as charging 25 USD for every 5 units. Purchases are rounded up by default, so a customer buying 8 units pays 50 USD.\n    *   **Graduated pricing**: Use pricing tiers that might result in a different price for some units in an order. For example, you might charge 10 USD per unit for the first 100 units and then 5 USD per unit for the next 50. If you use this option, select the currency for the price and fill in the tier table.\n    *   **Volume pricing**: Charge the same price for each unit based on the total number of units sold. For example, you might charge 10 USD per unit for 50 units, and 7 USD per unit for 100 units. If you use this option, select the currency for the price and fill in the tier table.\n    \n    *   **Customer chooses price**: Let the payer decide on the amount to pay for your product, service, or cause. **Customer chooses price** is only compatible with Checkout and Payment Links.\n    \n    *   **Usage-based pricing**: Charge your customers based on how much of your service they use during the billing cycle.\n2.  _(Optional)_ If you’re selling in multiple currencies, click **Add another currency** to set how much to charge in each currency.\n    \n3.  Select a **Billing period** for recurring prices. You can add a custom period if none of the drop-down options are what you want.\n    \n4.  Select whether to **Include tax in price**. Learn more about [taxes and subscriptions](https://docs.stripe.com/billing/taxes).\n    \n5.  _(Optional)_ Enter a **Price description**. Customers don’t see this description.\n    \n6.  _(Optional)_ Click **Advanced pricing options** if you want to create multiple prices for your product.\n7.  Click **Add product** to save the product and price. You can [edit both](#edit-product) later.\n\n[](#edit-product)\n\nTo modify a product in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu (), then click **Edit product**.\n3.  Make your changes to the product.\n4.  Click **Save product**.\n\nYou can also edit products from within the product information page by clicking the overflow menu () or **Edit**.\n\n[](#archive-product)\n\nIf you want to disable a product so that it can’t be added to new invoices or subscriptions, you can archive it. If you archive a product, any existing subscriptions that use the product remain active until they’re canceled and any existing payment links that use the product are deactivated. You can’t delete products that have an associated price, but you can archive them.\n\nTo archive a product:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu (), then click **Archive product**.\n\nTo unarchive a product:\n\n1.  Go to the **Archived** tab on the **Product catalog**\\>**Overview** page.\n2.  Find the product you want to modify, click the overflow menu (), then click **Unarchive product**.\n\nYou can also unarchive a product from the product information page.\n\n[](#delete-product)\n\nYou can only delete products that have no prices associated with them. Alternatively, you can [archive a product](#archive-product).\n\nIf a product has a price associated with it, you have to [delete](#delete-price) or [archive](#archive-price) the price before you can delete the product. Stripe keeps a record of the price and product for historical transactions.\n\nTo permanently delete a product:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu (), then click **Delete product**.\n\n[](#create-price)\n\nYou can create single or multiple prices for a product. For example, Togethere may have a “starter” level offered at 10 USD per month, 100 USD per year, or 9 EUR as a one-time purchase.\n\n#### Note\n\nAfter you create a price, you can only update its `metadata`, `nickname`, and `active` fields.\n\nTo create a price in the Dashboard, you have to [create a product](#create-product) first. Then you can create a price:\n\n1.  Select a **Pricing model**. For more details about recurring pricing models, read the [pricing model guide](https://docs.stripe.com/products-prices/pricing-models).\n    \n    *   **Flat-rate pricing**: Charge the same price for each unit. If you use this option, select **One time** or **Recurring**.\n    *   **Package pricing**: Charge by the package, or group of units, such as charging 25 USD for every 5 units. Purchases are rounded up by default, so a customer buying 8 units pays 50 USD.\n    *   **Graduated pricing**: Use pricing tiers that might result in a different price for some units in an order. For example, you might charge 10 USD per unit for the first 100 units and then 5 USD per unit for the next 50. If you use this option, select the currency for the price and fill in the tier table.\n    *   **Volume pricing**: Charge the same price for each unit based on the total number of units sold. For example, you might charge 10 USD per unit for 50 units, and 7 USD per unit for 100 units. If you use this option, select the currency for the price and fill in the tier table.\n    \n    *   **Customer chooses price**: Let the payer decide on the amount to pay for your product, service, or cause. **Customer chooses price** is only compatible with Checkout and Payment Links.\n    \n    *   **Usage-based pricing**: Charge your customers based on how much of your service they use during the billing cycle.\n2.  _(Optional)_ If you’re selling in multiple currencies, click **Add another currency** to set how much to charge in each currency.\n    \n3.  Select a **Billing period** for recurring prices. You can add a custom period if none of the drop-down options are what you want.\n    \n4.  Select whether to **Include tax in price**. Learn more about [taxes and subscriptions](https://docs.stripe.com/billing/taxes).\n    \n5.  _(Optional)_ Enter a **Price description**. Customers don’t see this description.\n    \n6.  Click **Create price** to save the price. You can [edit the price](#edit-price) later.\n\n### Set a default price ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA product’s default price is the most common price you want to present to customers. For example, a product could have multiple prices for seasonal sales, but the default is the regular (non-sale) price. If your product only has one price, that is its default price. The default price must be an [active](https://docs.stripe.com/api/prices/object#price_object-active) Price.\n\nTo change your product’s default price in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu (), then click **Edit product**.\n3.  Under the **Price information** section, find the price you want to set as the new default price, then click **Set as default price**.\n4.  Click **Save product**.\n\nTo create a new price and make it the new default price in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify and click on it to open the product information page.\n3.  In the **Pricing** section, click the **Add another price** button.\n4.  Enter your pricing details and select **Set as default price**. Read more about the fields available when you [create a price](#create-price).\n5.  Click **Add price**.\n\n### Lookup keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMost businesses display pricing information on their website. If these prices are hard-coded and you want to change them, the process is often manual and requires you to deploy new code. To better manage these scenarios, you can use the [lookup\\_key](https://docs.stripe.com/api/prices/create#create_price-lookup_key) attribute on the [Price object](https://docs.stripe.com/api/prices/object#price_object). This key allows you to:\n\n*   Render different prices in your frontend.\n*   Use the rendered price to bill customers.\n\nYou can pass a `lookup_key` when you create a price:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d lookup_key=standard_monthly`\n\nInstead of hard-coding text like **10 USD per month** on your pricing page and using a price ID on your backend, you can query for the price using the `standard_monthly` key and then render that in your frontend:\n\n`curl -G https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"lookup_keys[]\"=standard_monthly`\n\n#### Note\n\nTo optimize performance, you might want to add a caching layer to only reload the price occasionally.\n\nWhen a customer clicks your subscribe or pay button, you pass the price from the `GET` request above into the Subscriptions API.\n\nNow that you can render different prices, if you decide that you want to start charging new users 20 USD per month rather than 10 USD per month, you only need to create a new price and transfer the lookup key to that new price using [transfer\\_lookup\\_key=true](https://docs.stripe.com/api/prices/create#create_price-transfer_lookup_key):\n\n#### Rounding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRounding occurs on the line item level of your [invoices](https://docs.stripe.com/api/invoices \"invoices\"). For example, if you create a price with `unit_amount_decimal = 0.05` and a monthly subscription for that \\[price\\] with `quantity = 30`, rounding occurs after multiplying the quantity by the decimal amount. In this case, the calculated amount for the line item would be `0.05 * 30 = 1.5`, which rounds up to 2 cents. If you have multiple line items, each is rounded up before summing up the total amount for the invoice. This ensures that customers are still charged an integer minor unit amount, as decimal amounts only apply for pricing.\n\nExclusive taxes are added to each line item amount, depending on the tax rate. If you enable [automatic taxes](https://docs.stripe.com/tax/invoicing), exclusive taxes are applied and rounded on the total of the invoice, including invoice level discounts. If you use manual taxes on either the line item level or the invoice level, you can choose how to apply rounding. Use the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page in the Dashboard to apply and round taxes for each line item, or apply and round taxes on the invoice subtotal.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=2000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d lookup_key=standard_monthly \\  -d transfer_lookup_key=true`\n\n[](#edit-price)\n\nMultiple properties can be updated on a price, either in the Dashboard or the API. For example, you can change whether the price is active, or modify its metadata.\n\nNote that you can not change a price’s amount in the API. Instead, we recommend creating a new price for the new amount, switch to the new price’s ID, then update the old price to be inactive.\n\nTo modify a price in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product for the price you want to modify, and click on it\n3.  Find the price you want to modify, click the overflow menu (), then click **Edit price**.\n4.  Make your changes to the price. You can add another price at this point.\n5.  Click **Save**.\n\n[](#archive-price)\n\nIf you want to disable a price so that it can’t be added to new invoices or subscriptions, you can archive it. If you archive a price, any existing subscriptions that use the price remain active until they’re canceled and any existing payment links that use the product are deactivated.\n\nTo archive a price through the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu ().\n3.  On the product information page, find the price you want to modify, then click the overflow menu () next to it and click **Archive price**.\n\nTo unarchive a price:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu ().\n3.  On the product information page, find the price you want to modify, then click the overflow menu () next to it and click **Unarchive price**.\n\n[](#delete-price)\n\nYou can only delete prices that you’ve never used. Otherwise, you can [archive them](#archive-price).\n\nTo permanently delete a price in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Find the product you want to modify, click the overflow menu ().\n3.  On the product information page, find the price you want to modify, then click the overflow menu () next to it and click **Delete price**.\n\n[](#pricing-table)\n\nAfter creating products and prices, you can embed a [pricing table](https://docs.stripe.com/payments/checkout/pricing-table) on your website to display pricing information to your customers. When customers choose a subscription option, they’re taken directly to checkout. Configure, customize, and update directly in the [Dashboard](https://dashboard.stripe.com/test/pricing-tables) without writing any code.",
    "title": "Manage products and prices | Stripe Documentation",
    "description": "Learn how to manage products and prices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-cli/autocomplete",
    "markdown": "# Enable autocompletion for the Stripe CLI\n\n## Enable autocompletion so that the Stripe CLI automatically completes your commands.\n\nUse the `stripe completion` command to enable autocompletion so that the Stripe CLI automatically completes your commands. After you enable autocomplete, you can type a command and press the tab key on your keyboard to view available commands and flags.\n\n## Setup with ZSH on macOS and Linux![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOpen a new ZSH shell and run the following commands:\n\n`stripe completion mkdir -p ~/.stripe mv stripe-completion.zsh ~/.stripe`\n\nAdd the following lines to your `.zshrc` file:\n\n`# The next lines enables shell command completion for Stripe fpath=(~/.stripe $fpath) autoload -Uz compinit && compinit -i`\n\n## Setup with Bash on macOS and Linux![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions in [bash-completion](https://formulae.brew.sh/formula/bash-completion/) to set up bash completions.\n\nOpen a new Bash shell and run the following commands:\n\n`stripe completion mkdir -p ~/.stripe mv stripe-completion.bash ~/.stripe`\n\nAdd the following lines to your `.bashrc` file:\n\n`# The next line enables shell command completion for Stripe source ~/.stripe/stripe-completion.bash`\n\n## Windows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWindows autocompletion is currently not supported.",
    "title": "Enable autocompletion for the Stripe CLI | Stripe Documentation",
    "description": "Enable autocompletion so that the Stripe CLI automatically completes your commands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/checkout/sessions/object",
    "markdown": "# The Session object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems.\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the customer for this Session. For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout will create a new customer object based on information provided during the payment flow unless an existing customer was provided when the Session was created.\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n    If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The line items purchased by the customer.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The mode of the Checkout Session.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `payment`<br><br>Accept one-time payments for cards, iDEAL, and more. |\n    | `setup`<br><br>Save payment details to charge your customers later. |\n    | `subscription`<br><br>Use Stripe Billing to set up fixed-price subscriptions. |\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can’t confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n    \n*   The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer’s order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `no_payment_required`<br><br>The payment is delayed to a future date, or the Checkout Session is in `setup` mode and doesn’t require a payment at this time. |\n    | `paid`<br><br>The payment funds are available in your account. |\n    | `unpaid`<br><br>The payment funds are not yet available in your account. |\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site.\n    \n*   The status of the Checkout Session, one of `open`, `complete`, or `expired`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The checkout session is complete. Payment processing may still be in progress |\n    | `expired`<br><br>The checkout session has expired. No further processing will occur |\n    | `open`<br><br>The checkout session is still in progress. Payment processing has not started |\n    \n*   #### \n    \n    success\\_urlnullable string\n    \n    The URL the customer will be directed to after the payment or subscription creation is successful.\n    \n*   The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://docs.stripe.com/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.` This value is only present when the session is active.\n    \n\n### More attributes\n\n*   #### \n    \n    after\\_expirationnullable object\n    \n*   #### \n    \n    allow\\_promotion\\_codesnullable boolean\n    \n*   #### \n    \n    amount\\_subtotalnullable integer\n    \n*   #### \n    \n    amount\\_totalnullable integer\n    \n\n*   #### \n    \n    billing\\_address\\_collectionnullable enum\n    \n*   #### \n    \n    cancel\\_urlnullable string\n    \n*   #### \n    \n    client\\_secretnullable string\n    \n\n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    currency\\_conversionnullable object\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    customer\\_creationnullable enum\n    \n*   #### \n    \n    customer\\_detailsnullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    payment\\_linknullable stringExpandable\n    \n*   #### \n    \n    payment\\_method\\_collectionnullable enum\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    phone\\_number\\_collectionnullable object\n    \n*   #### \n    \n    recovered\\_fromnullable string\n    \n*   #### \n    \n    redirect\\_on\\_completionnullable enum\n    \n*   #### \n    \n    saved\\_payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    setup\\_intentnullable stringExpandable\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    tax\\_id\\_collectionnullable object\n    \n*   #### \n    \n    total\\_detailsnullable object\n    \n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Create a Session](https://docs.stripe.com/api/checkout/sessions/create)\n\nCreates a Session object.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.\n    \n*   ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recently saved card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://docs.stripe.com/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, otherwise the most recently saved card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer’s card details.\n    \n    If the Customer already has a valid [email](https://docs.stripe.com/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.\n    \n    If blank for Checkout Sessions in `subscription` mode or with `customer_creation` set as `always` in `payment` mode, Checkout will create a new Customer object based on information provided during the payment flow.\n    \n    You can set [`payment_intent_data.setup_future_usage`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.\n    \n*   If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired unless setup mode\n    \n    A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://docs.stripe.com/api/prices).\n    \n    For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.\n    \n    For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `payment`<br><br>Accept one-time payments for cards, iDEAL, and more. |\n    | `setup`<br><br>Save payment details to charge your customers later. |\n    | `subscription`<br><br>Use Stripe Billing to set up fixed-price subscriptions. |\n    \n*   #### \n    \n    return\\_urlstringRequired conditionally\n    \n    The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site. This parameter is required if ui\\_mode is `embedded` and redirect-based payment methods are enabled on the session.\n    \n*   #### \n    \n    success\\_urlstringRequired conditionally\n    \n    The URL to which Stripe should send customers when payment or setup is complete. This parameter is not allowed if ui\\_mode is `embedded`. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://docs.stripe.com/payments/checkout/custom-success-page).\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    currencyenumRequired conditionally\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    redirect\\_on\\_completionenum\n    \n*   #### \n    \n    saved\\_payment\\_method\\_optionsobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n### Returns\n\nReturns a Session object.\n\nPOST /v1/checkout/sessions\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode success_url=\"https://example.com/success\" \\  -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/checkout/sessions/retrieve)\n\nRetrieves a Session object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object.\n\nGET /v1/checkout/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Checkout Session's line items](https://docs.stripe.com/api/checkout/sessions/line_items)\n\nWhen retrieving a Checkout Session, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Session line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1N4BEoLkdIwHu7ixWtXug1yk\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items\"}\n```\n\n## [List all Checkout Sessions](https://docs.stripe.com/api/checkout/sessions/list)\n\nReturns a list of Checkout Sessions.\n\n### Parameters\n\n*   Only return the Checkout Session for the PaymentIntent specified.\n    \n*   Only return the Checkout Session for the subscription specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Sessions, starting after Checkout Session `starting_after`. Each entry in the array is a separate Checkout Session object. If no more Checkout Sessions are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions\n\n```\ncurl -G https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/checkout/sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",      \"object\": \"checkout.session\",      \"after_expiration\": null,      \"allow_promotion_codes\": null,      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_address_collection\": null,      \"cancel_url\": null,      \"client_reference_id\": null,      \"consent\": null,      \"consent_collection\": null,      \"created\": 1679600215,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer\": null,      \"customer_creation\": \"if_required\",      \"customer_details\": null,      \"customer_email\": null,      \"expires_at\": 1679686615,      \"invoice\": null,      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"locale\": null,      \"metadata\": {},      \"mode\": \"payment\",      \"payment_intent\": null,      \"payment_link\": null,      \"payment_method_collection\": \"always\",      \"payment_method_options\": {},      \"payment_method_types\": [        \"card\"      ],      \"payment_status\": \"unpaid\",      \"phone_number_collection\": {        \"enabled\": false      },      \"recovered_from\": null,      \"setup_intent\": null,      \"shipping_address_collection\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"shipping_options\": [],      \"status\": \"open\",      \"submit_type\": null,      \"subscription\": null,      \"success_url\": \"https://example.com/success\",      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"    }    {...}    {...}  ],}\n```",
    "title": "The Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/checkout/sessions/create",
    "markdown": "# Create a Session | Stripe API Reference\n\nCreates a Session object.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.\n    \n*   ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recently saved card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://docs.stripe.com/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, otherwise the most recently saved card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer’s card details.\n    \n    If the Customer already has a valid [email](https://docs.stripe.com/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.\n    \n    If blank for Checkout Sessions in `subscription` mode or with `customer_creation` set as `always` in `payment` mode, Checkout will create a new Customer object based on information provided during the payment flow.\n    \n    You can set [`payment_intent_data.setup_future_usage`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.\n    \n*   If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired unless setup mode\n    \n    A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://docs.stripe.com/api/prices).\n    \n    For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.\n    \n    For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `payment`<br><br>Accept one-time payments for cards, iDEAL, and more. |\n    | `setup`<br><br>Save payment details to charge your customers later. |\n    | `subscription`<br><br>Use Stripe Billing to set up fixed-price subscriptions. |\n    \n*   #### \n    \n    return\\_urlstringRequired conditionally\n    \n    The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method’s app or site. This parameter is required if ui\\_mode is `embedded` and redirect-based payment methods are enabled on the session.\n    \n*   #### \n    \n    success\\_urlstringRequired conditionally\n    \n    The URL to which Stripe should send customers when payment or setup is complete. This parameter is not allowed if ui\\_mode is `embedded`. If you’d like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://docs.stripe.com/payments/checkout/custom-success-page).\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    currencyenumRequired conditionally\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    redirect\\_on\\_completionenum\n    \n*   #### \n    \n    saved\\_payment\\_method\\_optionsobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n### Returns\n\nReturns a Session object.\n\nPOST /v1/checkout/sessions\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode success_url=\"https://example.com/success\" \\  -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/checkout/sessions/retrieve)\n\nRetrieves a Session object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object.\n\nGET /v1/checkout/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679600215,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679686615,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"open\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"}\n```\n\n## [Retrieve a Checkout Session's line items](https://docs.stripe.com/api/checkout/sessions/line_items)\n\nWhen retrieving a Checkout Session, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Session line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_1N4BEoLkdIwHu7ixWtXug1yk\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }  ],  \"has_more\": false,  \"url\": \"/v1/checkout/sessions/cs_test_a1enSAC01IA3Ps2vL32mNoWKMCNmmfUGTeEeHXI5tLCvyFNGsdG2UNA7mr/line_items\"}\n```\n\n## [List all Checkout Sessions](https://docs.stripe.com/api/checkout/sessions/list)\n\nReturns a list of Checkout Sessions.\n\n### Parameters\n\n*   Only return the Checkout Session for the PaymentIntent specified.\n    \n*   Only return the Checkout Session for the subscription specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Checkout Sessions, starting after Checkout Session `starting_after`. Each entry in the array is a separate Checkout Session object. If no more Checkout Sessions are available, the resulting array will be empty.\n\nGET /v1/checkout/sessions\n\n```\ncurl -G https://api.stripe.com/v1/checkout/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/checkout/sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u\",      \"object\": \"checkout.session\",      \"after_expiration\": null,      \"allow_promotion_codes\": null,      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_address_collection\": null,      \"cancel_url\": null,      \"client_reference_id\": null,      \"consent\": null,      \"consent_collection\": null,      \"created\": 1679600215,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer\": null,      \"customer_creation\": \"if_required\",      \"customer_details\": null,      \"customer_email\": null,      \"expires_at\": 1679686615,      \"invoice\": null,      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"locale\": null,      \"metadata\": {},      \"mode\": \"payment\",      \"payment_intent\": null,      \"payment_link\": null,      \"payment_method_collection\": \"always\",      \"payment_method_options\": {},      \"payment_method_types\": [        \"card\"      ],      \"payment_status\": \"unpaid\",      \"phone_number_collection\": {        \"enabled\": false      },      \"recovered_from\": null,      \"setup_intent\": null,      \"shipping_address_collection\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"shipping_options\": [],      \"status\": \"open\",      \"submit_type\": null,      \"subscription\": null,      \"success_url\": \"https://example.com/success\",      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      },      \"url\": \"https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ6QSNRQhkUpVph4WRmzW0zWJO2znZKdVujZ0N0S22u#fidkdWxOYHwnPyd1blpxYHZxWjA0SDdPUW5JbmFMck1wMmx9N2BLZjFEfGRUNWhqTmJ%2FM2F8bUA2SDRySkFdUV81T1BSV0YxcWJcTUJcYW5rSzN3dzBLPUE0TzRKTTxzNFBjPWZEX1NKSkxpNTVjRjN8VHE0YicpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\"    }    {...}    {...}  ],}\n```\n\n## [Expire a Session](https://docs.stripe.com/api/checkout/sessions/expire)\n\nA Session can be expired when it is in one of these statuses: `open`\n\nAfter it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Session object if the expiration succeeded. Returns an error if the Session has already expired or isn’t in an expireable state.\n\nPOST /v1/checkout/sessions/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/checkout/sessions/cs_test_a1Ae6ClgOkjygKwrf9B3L6ITtUuZW4Xx9FivL6DZYoYFdfAefQxsYpJJd3/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cs_test_a1Ae6ClgOkjygKwrf9B3L6ITtUuZW4Xx9FivL6DZYoYFdfAefQxsYpJJd3\",  \"object\": \"checkout.session\",  \"after_expiration\": null,  \"allow_promotion_codes\": null,  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_address_collection\": null,  \"cancel_url\": null,  \"client_reference_id\": null,  \"consent\": null,  \"consent_collection\": null,  \"created\": 1679434412,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer\": null,  \"customer_creation\": \"if_required\",  \"customer_details\": null,  \"customer_email\": null,  \"expires_at\": 1679520812,  \"invoice\": null,  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"locale\": null,  \"metadata\": {},  \"mode\": \"payment\",  \"payment_intent\": null,  \"payment_link\": null,  \"payment_method_collection\": \"always\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"payment_status\": \"unpaid\",  \"phone_number_collection\": {    \"enabled\": false  },  \"recovered_from\": null,  \"setup_intent\": null,  \"shipping_address_collection\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"shipping_options\": [],  \"status\": \"expired\",  \"submit_type\": null,  \"subscription\": null,  \"success_url\": \"https://example.com/success\",  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"url\": null}\n```",
    "title": "Create a Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/custom-success-page",
    "markdown": "# Customize redirect behavior with a Stripe-hosted page\n\n## For Stripe-hosted pages, display a confirmation page with your customer's order information.\n\nAfter payment succeeds, Stripe redirects your customer to a success page that you create and host on your site.\n\n#### Common mistake\n\nIf you’ve integrated with an embedded payment form, you can’t use the `success_url` parameter. You must use `return_url`. Learn more about [customizing redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior) for integrations with the embedded form.\n\n## Redirect customers to a success page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the details from a [Checkout Session](https://docs.stripe.com/api/checkout/sessions) to display an order confirmation page for your customer (for example, their name or payment amount) after the payment. To use the details from a Checkout Session:\n\n1.  Modify the `success_url` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-success_url) to pass the Checkout Session ID to the client side.\n2.  Look up the Checkout Session using the ID on your success page.\n3.  Use the Checkout Session to customize what’s displayed on your success page.\n\n## Modify the success URL Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdd the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` when you create the Checkout Session. Note that this is a literal string and must be added exactly as you see it here. Do not substitute it with a Checkout Session ID—this happens automatically after your customer pays and is redirected to the success page.\n\n## Create the success page Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLook up the Checkout Session using the ID and create a success page to display the order information. This example prints out the customer’s name:\n\n`# This example sets up an endpoint using the Sinatra framework. # Watch this video to get started: [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc)  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`require 'sinatra'  get '/order/success' do   session = Stripe::Checkout::Session.retrieve(params[:session_id])   customer = Stripe::Customer.retrieve(session.customer)    \"<html><body><h1>Thanks for your order, #{customer.name}!</h1></body></html>\" end`\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo confirm that your redirect is working as expected:\n\n1.  Click the checkout button.\n2.  Fill in the customer name and other payment details.\n3.  Click **Pay**.\n\nIf it works, you’re redirected to the success page with your custom message. For example, if you used the message in the code samples, the success page displays this message: **Thanks for your order, Jenny Rosen!**",
    "title": "Customize redirect behavior with a Stripe-hosted page | Stripe Documentation",
    "description": "For Stripe-hosted pages, display a confirmation page with your customer's order information.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/sessions/create",
    "markdown": "# Create a portal session | Stripe API Reference\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a portal session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events/object",
    "markdown": "# The Event object | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "The Event object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/taxes",
    "markdown": "# Collect taxes in Checkout | Stripe DocumentationThe Stripe Docs logo\n\nStripe offers two ways to calculate tax on your Checkout Sessions: Stripe Tax and Tax Rates.\n\nStripe Tax allows you to calculate the tax on your one-time and recurring payments when you use Checkout. You can enable Stripe Tax to automatically compute taxes on all of your Checkout purchases and subscriptions. Make sure to [integrate Checkout](https://docs.stripe.com/payments/checkout) before reading through this guide.\n\n#### Note\n\n[\n\n## Update your Products and Prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nWhen calculating tax, Stripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules. You can update your Checkout products and prices to include:\n\n*   `tax_behavior`—Specifies whether the price is considered `inclusive` or `exclusive` of taxes.\n*   `tax_code` (_optional_)—Specifies the product tax code. If you don’t set a `tax_code` on a product, we apply your preset product tax code. For more information, consult our [list of tax codes](https://docs.stripe.com/tax/tax-codes).\n\nWhen you set the `tax_behavior` parameter to `exclusive`, it adds tax to the subtotal. This is common in US markets and for business-to-business (B2B) sales. If you set the `tax_behavior` to `inclusive`, the amount your buyer pays never changes (even if the tax rate varies). This is common practice for business-to-consumer (B2C) buyers in markets outside of the US. If you don’t want to create your products and prices upfront, you can pass the `price_data.tax_behavior` and `product_data.tax_code` parameters in your Checkout session.\n\n#### Note\n\n[](#create-session)\n\nAfter updating your products and prices, you’re ready to start calculating tax on your Checkout sessions. You can create sessions for one-time and recurring purchases.\n\nTo calculate tax for new customers, Checkout validates and uses the provided shipping or billing address. For existing customers, Checkout calculates tax by validating and using the attached customer shipping or billing address. If you capture a new billing or shipping address for an existing customer, Checkout won’t automatically override the previous billing or shipping information. You must explicitly request customer address changes.\n\n### Apple Pay and Google Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you wish to ensure that Google Pay is offered as a payment method while using Stripe Tax in Checkout, you must require collecting a shipping address. Apple Pay with Stripe Tax displays only when the customer’s browser supports Apple Pay version 12.\n\n[](#new-customers)\n\nIf you don’t pass in an existing customer when creating a Checkout session, Checkout creates a new customer and automatically saves the billing address and shipping information. Checkout uses the shipping address entered during the session to determine the customer’s location for calculating tax. If you don’t collect shipping information, Checkout uses the billing address.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d \"automatic_tax[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`",
    "title": "Collect taxes in Checkout | Stripe Documentation",
    "description": "Learn how to collect taxes for one-time payments in Stripe Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/customer-management/integrate-customer-portal",
    "markdown": "# Integrate the customer portal with the API\n\n## Learn how to integrate the customer portal using the Stripe API.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the customer portal, you can provide subscription, billing, and invoicing management to your customers without building it yourself. After you configure and integrate the portal, customers redirect to a co-branded dashboard where they can manage their account based on the functionality you configured.\n\nTo integrate your application with the customer portal:\n\n1.  [Configure](#configure) the portal’s features and user interface (UI). You can do this in the Dashboard.\n2.  [Implement a redirect](#redirect) to integrate the portal with your application.\n3.  [Listen to webhooks](#webhooks) to receive updates to customers’ subscriptions and payment methods.\n4.  [Go live](#go-live) to use the portal in your production environment.\n\nOr clone one of our sample projects:\n\n*   [Firebase](https://github.com/stripe-samples/firebase-subscription-payments)\n*   [Netlify Identity](https://github.com/stripe-samples/netlify-stripe-subscriptions)\n*   [Ruby on Rails](https://github.com/stripe-samples/developer-office-hours/tree/master/2020-06-29-customer-portal).\n\nYou can optionally [customize](#customize) portal sessions to enable different features for different customers.\n\n[](#configure)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register/).\n\nBefore you integrate the customer portal, configure its functionality and branding in the Dashboard to define what your users can do with the portal. Its features depend on your product and price catalog, so there are different settings for live and test modes.\n\n#### Common mistake\n\nIf you’re using the customer portal with Stripe Connect, make sure you configure the customer portal for the platform, not a connected account.\n\nIf you want to create multiple portal configurations for different sets of customers—or if you’re a [Connect](https://docs.stripe.com/connect \"Connect\") platform and would like to manage configurations for your connected accounts—you can do that by using the [API](https://docs.stripe.com/api/customer_portal/configuration):\n\n`curl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"business_profile[headline]\"=\"Cactus Practice partners with Stripe for simplified billing.\" \\  -d \"features[invoice_history][enabled]\"=true`\n\n### Set a product catalog ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you allow customers to upgrade, downgrade, or change the quantities of their subscriptions, you must also set a product catalog. This includes the products and prices that your customers can upgrade or downgrade to, as well as the subscriptions they can update quantities on. See the [guide](https://docs.stripe.com/products-prices/getting-started#create-product) for more details about creating products and prices. If you’re using the customer portal only for invoicing, you don’t need to set a product catalog.\n\nThe portal displays the following attributes of your product catalog:\n\n*   **Product name and description**—these attributes are editable in the Dashboard and API.\n*   **Quantity restrictions per product**—these attributes are editable in the Dashboard.\n*   **Price amount, currency, and billing interval**—these attributes are immutable and you can only set them when you create them in the Dashboard and API.\n\n### Enable tax ID collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use [Stripe Tax](https://docs.stripe.com/tax) to automatically collect taxes for subscriptions or invoices, you can let customers set and update their tax IDs in the customer portal. Stripe Billing adds the tax IDs to the customers’ [invoices](https://docs.stripe.com/api/invoices \"invoices\"). To enable this, go to the [Customer portal settings](https://dashboard.stripe.com/settings/billing/portal) and toggle on **Tax ID**. For more information, see how customer tax IDs work with [subscriptions](https://docs.stripe.com/billing/customer/tax-ids) and [invoices](https://docs.stripe.com/invoicing/taxes/account-tax-ids).\n\nLearn how to [set up Stripe Tax](https://docs.stripe.com/tax/set-up), [collect taxes for recurring payments](https://docs.stripe.com/billing/taxes/collect-taxes), [collect taxes in your custom payment flows](https://docs.stripe.com/tax/custom#existing-customer) and [set tax rates for line items and invoices](https://docs.stripe.com/tax/invoicing).\n\n### Preview and test ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs you configure your settings, you can preview the portal by clicking **Preview**. This launches a read-only version of the portal that lets you see how your customers could manage their subscriptions and billing details.\n\nAfter saving your settings, you can launch the portal and test it by using a customer in test mode. Navigate to a customer in the Dashboard, click **Actions**, and then select **Open customer portal**.\n\nPreviewing the portal as a read-only version is only available when your Dashboard is in test mode. If you’re unable to preview and test the portal, check your settings to make sure that your configuration is saved in test mode. For previewing and testing to work, you also need to have edit permissions in the Dashboard.\n\n[](#redirect)\n\nA portal session is the entry point into the customer portal. It provides a unique, temporary link to the portal. When a customer wants to manage their billing or invoicing, create a new portal session and redirect them to the session’s `url`.\n\nOn your site, add a button that customers can click to enter the portal. Use a POST request to create a portal session:\n\n`<form method=\"POST\" action=\"/create-customer-portal-session\">   <button type=\"submit\">Manage billing</button> </form>`\n\nNext, add an endpoint that creates a portal session and redirects your customers. Make sure to authenticate customers on your site before creating sessions for them. To [create a session](https://docs.stripe.com/api/customer_portal/sessions/create), you need the customer’s ID and a `return_url`, which is required if a default return URL isn’t set in the Dashboard configuration.\n\nWhen you create a portal session, Stripe returns the `portal session object`, which contains the session’s [short-lived URL](https://docs.stripe.com/api/customer_portal/session?lang=curl#portal_session_object-url) that your customers use to access the customer portal.\n\n`curl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   --data-urlencode return_url=\"https://example.com/account\"`\n\n[](#webhooks)\n\nWhen subscriptions are upgraded, downgraded, or canceled, you need to make sure that customers receive only the products or services they’re actively subscribed to. Stripe sends notifications of these changes to your integration using [webhooks](https://docs.stripe.com/webhooks \"webhook\"). In the `Event` object, look at the ID for the subscription or the customer to determine which customer the event applies to.\n\nStripe also sends notifications if an invoice is paid to your integration using [webhooks](https://docs.stripe.com/webhooks \"webhook\"). In the `Event` object, look at the ID for the invoice or the customer to determine which customer the event applies to.\n\nIf you haven’t set up a webhook endpoint with Stripe before, you can use Stripe’s [webhooks documentation](https://docs.stripe.com/webhooks) to get started, and then listen for the events described below.\n\n| Event | Description |\n| --- | --- |\n| [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) | Listen to this to monitor subscription upgrades and downgrades. For upgrades, check the `subscription.items.data[0].price` attribute in the subscription object to find the price the customer is subscribed to. Then, grant access to the new product. For downgrades, check the same attribute and adjust or revoke access as needed.<br><br>When a customer uses the portal to upgrade or downgrade a subscription with a [trial](https://docs.stripe.com/billing/subscriptions/trials), the subscription’s trial ends immediately when switching to the new price. |\n| [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) | Listen to this to monitor updates to the subscription quantity. When you receive this event, check the `subscription.items.data[0].quantity` attribute to find the quantity the customer is subscribed to. Then, grant access to the new quantity. |\n| [customer.subscription.deleted](https://docs.stripe.com/api/events/types#event_types-customer.subscription.deleted) | Listen to this to monitor subscription cancellations. When you receive this event, revoke the customer’s access to the product. If you configure the portal to cancel subscriptions at the end of a billing period, listen to the [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) event to be notified of cancellations before they occur. If `cancel_at_period_end` is `true`, the subscription is canceled at the end of its billing period.<br><br>If a customer changes their mind, they can reactivate their subscription prior to the end of the billing period. When they do this, a [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) event is sent. Check that `cancel_at_period_end` is `false` to confirm that they reactivated their subscription. |\n| [payment\\_method.attached](https://docs.stripe.com/api/events/types#event_types-payment_method.attached) | Occurs when a customer adds a payment method. |\n| [payment\\_method.detached](https://docs.stripe.com/api/events/types#event_types-payment_method.detached) | Occurs when a customer removes a payment method. |\n| [customer.updated](https://docs.stripe.com/api/events/types#event_types-customer.updated) | Check the `invoice_settings.default_payment_method` attribute to find the payment method that a customer selected as the new default. If you have subscriptions that override the customer-level default payment method, customers can remove this override. Check the subscription’s `default_payment_method` attribute when you receive this event to see if the override was removed. Use this webhook to update any relevant information in your database. All updates must be treated as billing information changes only. Don’t use the customer billing email address as a login credential. |\n| [customer.tax\\_id.created](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.created) | Occurs when customers manage their tax IDs. Stripe can validate some types of tax IDs. Learn more in the [tax IDs guide](https://docs.stripe.com/billing/customer/tax-ids). |\n| [customer.tax\\_id.deleted](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.deleted) | Occurs when customers manage their tax IDs. Stripe can validate some types of tax IDs. Learn more in the [tax IDs guide](https://docs.stripe.com/billing/customer/tax-ids). |\n| [customer.tax\\_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated) | Listen to this to get validation updates about customer tax IDs. Learn more in the [tax IDs guide](https://docs.stripe.com/billing/customer/tax-ids). |\n| [billing\\_portal.configuration.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.created) | Occurs when a configuration is created. |\n| [billing\\_portal.configuration.updated](https://docs.stripe.com/api/events/types#event_types-billing_portal.configuration.updated) | Occurs when a configuration is updated. |\n| [billing\\_portal.session.created](https://docs.stripe.com/api/events/types#event_types-billing_portal.session.created) | Occurs when a portal session is created. |\n\n[](#go-live)\n\nMake sure to test the portal before enabling it in production. When you’re ready to go live:\n\nWhen you create a portal session, Stripe returns the `portal session` object, which contains the session’s [short-lived URL](https://docs.stripe.com/api/customer_portal/session?lang=curl#portal_session_object-url) that your customers must use to access the customer portal. You can also create one shareable link for each configuration of the portal with the [`login_page`](https://docs.stripe.com/api/customer_portal/configuration#portal_configuration_object-login_page) parameter.\n\n*   Turn off **View test data** in the Dashboard.\n*   [Configure](https://dashboard.stripe.com/settings/billing/portal) the portal in live mode.\n*   Add your [webhooks](https://dashboard.stripe.com/webhooks) in live mode.\n\nStripe maintains two distinct sets of portal configurations: one for live mode and one for test mode. To help you validate your integration, making changes in one mode does not affect your configuration in the other.",
    "title": "Integrate the customer portal with the API | Stripe Documentation",
    "description": "Learn how to integrate the customer portal using the Stripe API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/revenue-recovery/smart-retries",
    "markdown": "# Automate payment retries | Stripe DocumentationThe Stripe Docs logo\n\n## Automatically retry failed payments and reduce involuntary churn.\n\nAlthough payments can fail for a number of reasons, many of them are recoverable. You can automatically retry failed payments with Stripe, without writing code.\n\nConfigure the settings in the **Retries** tab of the [Revenue recovery](https://dashboard.stripe.com/revenue_recovery/retries) Dashboard.\n\nStripe doesn’t retry payments for:\n\n*   Failures where the issuer provided a non-retryable [decline code](https://docs.stripe.com/billing/revenue-recovery/smart-retries#non-retryable-decline-codes).\n*   Unavailable payment methods\n*   Detached connected accounts (Connect only)\n\nStripe recommends using Smart Retries, but you can also create a custom retry schedule.\n\n## Payment method ordering ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses the first payment instrument from this ordered list in retries:\n\n1.  [`subscription.default_payment_method`](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\n2.  [`subscription.default_source`](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_source)\n3.  [`customer.invoice_settings.default_payment_method`](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method)\n4.  [`customer.default_source`](https://docs.stripe.com/api/customers/object#customer_object-default_source)\n\nWhen you update payment methods after a failed payment attempt, update the field where the previous payment failed. For example, if a subscription has a `default_payment_method`, but you only update `customer.invoice_settings.default_payment_method`, Stripe continues to retry on the subscription’s `default_payment_method`.\n\n## Smart Retries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing machine learning, Smart Retries chooses the best times to retry failed payment attempts to increase the chance of successfully paying an invoice. The machine learning system behind Smart Retries uses time-dependent, dynamic signals, such as:\n\n*   The number of different devices that have presented a given payment method in the last _N_ hours.\n*   The best time to pay (payments made for debit cards in certain countries might be slightly more successful at 12:01 AM in local time zones).\n\nBased on a combination of these factors, Stripe intelligently assesses when to retry payments. We continuously learn from new purchaser behaviors and transactions, which provide for a more targeted approach over traditional rules-based payment retry logic.\n\nSmart Retries reattempts the charge according to your specifications for the number of retries and the maximum duration. You can also use [automations](https://docs.stripe.com/billing/automations) to create different retry policies for different customer segments.\n\nYou can override this behavior by [disabling Smart Retries](https://dashboard.stripe.com/revenue_recovery/retries) and defining your own custom retry rules. When you enable dunning, the [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) attribute indicates when the next collection attempt will be.\n\n## ACH Debit retries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Enable ACH Debit retries](https://dashboard.stripe.com/revenue_recovery/retries) to have Stripe automatically retry failed ACH Debit payments caused by insufficient funds. Stripe retries the failed ACH Debit a maximum of two times over a 14 day period.\n\nYou can turn on retries for recurring subscription invoices, one-off invoices, or both types of invoice.\n\nBefore retrying, make sure you’ve [obtained authorization](https://docs.stripe.com/payments/ach-debit#mandates) from your customer to retry a debit on their bank account.\n\n## Webhook events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor both Smart Retries and custom retry schedules, Stripe reattempts the charge according to your specified schedule. Use the `invoice.payment_failed` [webhook](https://docs.stripe.com/webhooks \"webhook\") to receive subscription payment failure events and retry attempt updates.\n\nThe [attempt\\_count](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) attribute on the `invoice.payment_failed` webhook indicates how many attempts have been made so far. If a failure returns a non-retryable return code, we can’t retry invoice payment without a new payment method. Retries continue to be scheduled, and [attempt\\_count](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) continues to increment, but retries only execute after detecting a new payment method. Unexecuted retries don’t create a new [Charge](https://docs.stripe.com/api/charges).\n\nThe [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) attribute on the invoice indicates the date when Stripe will attempt the next collection. For [automations](https://docs.stripe.com/billing/automations) users, [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) is no longer set in `invoice.payment_failed` webhooks but is set in `invoice.updated` webhooks.\n\n### Non-retryable decline codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the card issuer returns the payment with a subset of [decline codes](https://docs.stripe.com/declines/codes) considered as non-retryable, then Stripe can’t automatically retry the payment. These codes are one of `incorrect_number`, `lost_card`, `pickup_card`, `stolen_card`, `revocation_of_authorization`, `revocation_of_all_authorizations` and `highest_risk_level`. For these failures, the scheduled retries continue but the payment executes only if you obtain a new payment method.",
    "title": "Automate payment retries | Stripe Documentation",
    "description": "Automatically retry failed payments and reduce involuntary churn.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/creating",
    "markdown": "# How subscriptions work | Stripe DocumentationThe Stripe Docs logo\n\nTo simplify the handling of failed payments and to create subscriptions before attempting payment:\n\n1.  Pass [payment\\_behavior=default\\_incomplete](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) when creating a subscription. If your subscription requires payment, it’s created with an `incomplete` status, otherwise your subscription immediately becomes `active`.\n2.  Activate an incomplete subscription by paying the first invoice.\n3.  Pass the payment intent identifier from the invoice to your user interface to collect payment information and confirm the payment intent. You can use [Elements](https://docs.stripe.com/js/elements_object), the [Android SDK](https://stripe.dev/stripe-android/), or the [iOS SDK](https://stripe.dev/stripe-ios/).\n\n### Payment status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe payment process differs across payment methods and geographical locations. Payments can also fail initially (for example, a customer might enter the wrong card number or have insufficient funds), so various payment outcomes are possible.\n\nA [PaymentIntent](https://docs.stripe.com/payments/payment-intents) tracks the lifecycle of every payment. Whenever a payment is due for a subscription, Stripe generates an invoice and a PaymentIntent. The PaymentIntent ID attaches to the invoice and you can access it from the Invoice and Subscription objects. The state of the PaymentIntent affects the state of the invoice and the subscription. Here’s how the different outcomes of a payment map to the different statuses:\n\n| Payment outcome | PaymentIntent status | Invoice status | Subscription status |\n| --- | --- | --- | --- |\n| Success | `succeeded` | `paid` | `active` |\n| Fails because of a card error | `requires_payment_method` | `open` | `incomplete` |\n| Fails because of authentication | `requires_action` | `open` | `incomplete` |\n\nThe following sections explain these statuses and the actions to take for each.\n\n### Payment succeeded ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your payment succeeds, the status of the PaymentIntent is `succeeded`, and the subscription becomes `active`. For [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) with longer processing periods, subscriptions are immediately activated. In these cases, the status of the PaymentIntent may be `processing` for an `active` subscription until the payment succeeds.\n\nWith your subscription now activated, provision access to your product. Read the guide to learn more about [the subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle) and best practices for provisioning.\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"active\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"paid\",     ...     \"payment_intent\": {       \"status\": \"succeeded\",       ...     }   } }` | **active** | **succeeded** |\n\n![Subscription payment network flow.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-succeeds.ac7343c9ec9a77e6efa1a84c02bb597d.svg)\n\n### Requires payment method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf payment fails because of a [card error](https://docs.stripe.com/api/errors#errors-card_error), such as a [decline](https://docs.stripe.com/declines#issuer-declines), the status of the PaymentIntent is `requires_payment_method` and the subscription is `incomplete`.\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"incomplete\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"open\",     ...     \"payment_intent\": {       \"status\": \"requires_payment_method\",       ...     }   } }` | **incomplete** | **requires\\_payment\\_method** |\n\nTo resolve these scenarios:\n\n*   Notify the customer.\n*   Collect new payment information and [confirm the payment intent](https://docs.stripe.com/api/payment_intents/confirm).\n*   Update the [default payment method](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method) on the subscription.\n\nLearn how to [handle payment failures for subscriptions](https://docs.stripe.com/billing/subscriptions/webhooks#payment-failures).\n\n![How to handle subscription payment failures.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-payment-method.8305917aa91650ba7f7e9b6e5999ce32.svg)\n\n### Requires action ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods require customer authentication with [3D Secure](https://docs.stripe.com/payments/3d-secure) (3DS) to complete the payment process. If you use the [Payment Intents API](https://docs.stripe.com/api/payment_intents), the value of `latest_invoice.payment_intent.status` is `requires_action` when a customer needs to authenticate a payment. 3DS completes the authentication process. Whether a payment method requires authentication depends on your [Radar rules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) and the issuing bank for the card.\n\nRegulations in Europe often require 3D Secure. See [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) to determine whether handling this status is important for your business. If you have an existing billing integration and want to add support for this flow, also see the [Billing SCA Migration guide](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n| Response | Subscription | PaymentIntent |\n| --- | --- | --- |\n| `{   \"id\": \"sub_1ELI8bClCIKljWvsvK36TXlC\",   \"object\": \"subscription\",   \"status\": \"incomplete\",   ...   \"latest_invoice\": {     \"id\": \"in_EmGqfJMYy3Nt9M\",     \"status\": \"open\",     ...     \"payment_intent\": {       \"status\": \"requires_action\",       \"client_secret\": \"pi_91_secret_W9\",       \"next_action\": {         \"type\": \"use_stripe_sdk\",         ...       },       ...     }   } }` | **incomplete** | **requires\\_action** |\n\nTo handle these scenarios:\n\n*   Monitor for the `invoice.payment_action_required` event notification with [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks). This indicates that authentication is required.\n*   Notify your customer that they must authenticate.\n*   Retrieve the client secret for the payment intent and pass it in a call to [stripe.ConfirmCardPayment](https://docs.stripe.com/js/payment_intents/confirm_card_payment). This displays an authentication modal to your customers, attempts payment, then closes the modal and returns context to your application.\n*   Monitor the `invoice.paid` event on your webhook endpoint to verify that the payment succeeded. Users can leave your application before `confirmCardPayment()` finishes. Verifying whether the payment succeeded allows you to correctly provision your product.\n\n![How to handle subscription payments that require additional action from the customer.](https://b.stripecdn.com/docs-statics-srv/assets/payment-flow-requires-action.ac57889e9bccdb6ec4f5ea47fba194ec.svg)\n\n### Recurring charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe handles recurring charges for you automatically. This includes:\n\n*   [Automatically invoicing](https://docs.stripe.com/billing/invoices/subscription#subscription-renewal) customers and attempting payments when new billing cycles start.\n*   When payments fail, Stripe retries them using the [Smart Retries](https://docs.stripe.com/invoicing/automatic-collection#smart-retries) feature or your custom retry schedule. This automatically re-attempts payment according to your Dashboard settings when cards are declined. If a failure returns a non-retryable [decline code](https://docs.stripe.com/declines/codes), the scheduled retries continue but the payment executes only if you obtain a new payment method.\n\nYou can send a [dunning email](https://docs.stripe.com/invoicing/integration/send-email \"dunning email\") to customers for overdue payments to increase recovery chances. For payments that require 3D Secure, you can [configure your billing settings](https://dashboard.stripe.com/account/billing/automatic) to send a [hosted link](https://docs.stripe.com/invoicing/hosted-invoice-page) to customers so they can complete the flow.\n\n#### Build your own handling for recurring charge failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t want to use Stripe’s tooling to manage failures, you can build your own. If a payment fails or if it requires customer authentication, the subscription’s `status` is set to `past_due` and the PaymentIntent status is either `requires_payment_method` or `requires_action`.\n\n![Objects involved when handling failed or action required subscription payments.](https://b.stripecdn.com/docs-statics-srv/assets/recurring-charge-failure.f0db8a9b3a90000f3df0b98f7aacfa36.svg)\n\nTo manage these scenarios, set up a [webhook](https://docs.stripe.com/webhooks \"webhook\") and listen to the [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) event so that you’re notified when subscriptions enter a `past_due` state:\n\n`{   \"id\": \"sub_E8uXk63MAbZbto\",   \"object\": \"subscription\",   ...   \"status\": \"past_due\",   \"latest_invoice\": \"in_1EMLu1ClCIKljWvsfTjRFAxa\" }`\n\nFor these subscriptions, you need to get your customers back into your application to collect a different payment method so they can complete the payment. You can use an email or a mobile push notification. Stripe provides built-in reminder emails to handle this case, which you can configure in your [billing settings](https://dashboard.stripe.com/account/billing/automatic).\n\nWhen your customer is back in your application, reuse either your [payment failure flow](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method) or [customer action flow](https://docs.stripe.com/billing/subscriptions/overview#requires-action) depending on the status of the associated PaymentIntent. After the payment succeeds, the status of the subscription is `active` and the invoice is `paid`.\n\n### Handle non-payment invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubscriptions that include [free trials](https://docs.stripe.com/billing/subscriptions/trials), [usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), invoices with coupons, or applied customer credit balances often result in non-payment invoices. This means you don’t immediately charge your customer when you create the subscription.\n\nEven though you don’t charge customers for the first invoice, authenticating and authorizing their card is often beneficial as it can increase the chance that the first non-zero payment completes successfully. Payments made this way are known as off-session payments. To manage these scenarios, Stripe created SetupIntents.\n\n#### Using SetupIntents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use SetupIntents to:\n\n*   Collect payment information.\n*   Authenticate your customer’s card to claim [exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\") later.\n*   Authorize your customer’s card without charging it.\n\nAuthenticating payments allows your customer to grant permissions to charge their card. [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) requires this, and [3DS](https://docs.stripe.com/payments/3d-secure) is a common way to complete it. Collecting payment method information and authorizing it ensures that you can successfully charge the payment method.\n\nIn off-session scenarios, SetupIntents enable you to charge customers for their first non-zero payment without having to bring them back to your website or app for authentication. This reduces the friction on your customers.\n\nThe `pending_setup_intent` field on a subscription doesn’t cancel automatically when the subscription ends. Listen for `customer.subscription.deleted` webhooks and manually [cancel a subscription SetupIntent](https://docs.stripe.com/api/setup_intents/cancel) if needed.\n\nStripe automatically creates SetupIntents for subscriptions that don’t require an initial payment. The authentication and authorization process also completes at this point, if required. If both succeed or aren’t required, no action is necessary, and the `subscription.pending_setup_intent` field is `null`. If either step fails, Stripe recommends using the SetupIntent on your frontend to resolve the issue while your customer is on-session. The next two sections explain in detail how to manage scenarios where authentication or authorization fail.\n\n#### Managing authentication failures Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAuthentication failures occur when Stripe is unable to authenticate your customer with their card issuer. When this happens, the `status` of the SetupIntent is set to `requires_action`.\n\n![How to handle subscription payment authentication failures.](https://b.stripecdn.com/docs-statics-srv/assets/authentication_failure.2eaec43cac8c688f0ff3438fbe3b50e4.svg)\n\nTo resolve these scenarios, call [confirmCardSetup](https://docs.stripe.com/js#stripe-confirm-card-setup) on your frontend so that your customer can complete the authentication flow manually. The code example below [expands](https://docs.stripe.com/api/expanding_objects) the `pending_setup_intent` to complete the flow.\n\n`const {pending_setup_intent} = subscription;  if (pending_setup_intent) {   const {client_secret, status} = subscription.pending_setup_intent;    if (status === \"requires_action\") {     const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);      if (error) {       // Display error.message in your UI.     } else {       // The setup has succeeded. Display a success message.     }   } }`\n\nAfter completing this flow, authorization executes if it’s required. If authorization succeeds, or if it’s not required, `pending_setup_intent` is updated to `null` upon completion.\n\nPayment authorization failures occur when Stripe can’t verify that a card can be charged. When this happens, the `status` of the SetupIntent is set to `requires_payment_method`. This generally means that subsequent charges with that card fail.\n\n![How to handle subscription payment authorization failures.](https://b.stripecdn.com/docs-statics-srv/assets/authorization_failure.0b6ca4a2e2bbeba11710bf22fb0a5d00.svg)\n\nTo resolve these scenarios, [collect a new payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method), then update the default payment method for your customer or the subscription. The code example below [expands](https://docs.stripe.com/api/expanding_objects) the `pending_setup_intent` to complete the flow.\n\n`const {pending_setup_intent, latest_invoice} = subscription;  if (pending_setup_intent) {   const {client_secret, status} = subscription.pending_setup_intent;    if (status === \"requires_action\") {     const {setupIntent, error} = await stripe.confirmCardSetup(client_secret);      if (error) {       // Display error.message in your UI.     } else {       // The setup has succeeded. Display a success message.     }   } else if (status === \"requires_payment_method\") {     // Collect new payment method   } }`",
    "title": "How subscriptions work | Stripe Documentation",
    "description": "Learn how subscriptions work within Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/revenue-recovery/smarter-saved-cards",
    "markdown": "# Smarter saved cards | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe can automatically keep replaced cards up to date.\n\nSaved card details can continue to work even if the customer’s issuing bank has replaced the physical card. Stripe works with card networks and [automatically attempts to update saved card details](https://docs.stripe.com/saving-cards#automatic-card-updates) whenever a customer receives a new card. Most US-issued American Express, Visa, Mastercard, and Discover cards support automatic card updates. International support for automatic card updates, however, can vary from country to country. Stripe can’t identify what cards can be automatically updated.\n\n#### Note\n\nAutomatic card updates require card issuers to participate with the network.",
    "title": "Smarter saved cards | Stripe Documentation",
    "description": "Learn how Stripe can automatically keep replaced cards up to date.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/revenue-recovery/recovery-analytics",
    "markdown": "# Revenue recovery analytics | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Stripe Dashboard to understand your subscription payment failure rate and how effectively you are able to recover failed subscription payments.\n\nThe [revenue recovery overview](https://dashboard.stripe.com/revenue_recovery) provides key performance indicators (KPIs), trends, and reports to help you understand how failed subscription payments are impacting your business. This data can be helpful in optimizing your revenue recovery strategy and keeping track of changes in performance.\n\n#### Note\n\nData in the revenue recovery overview represents recurring subscription payments only and excludes the first invoice payment following a trial.\n\n## Key performance indicators (KPIs)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Failed payments:** The volume of subscription payments that failed on the first attempt. Use this metric to identify and monitor the volume of failed payments over time.\n*   **Failure rate:** The percentage of subscription payment volume that failed on the first attempt. If your failure rate is high, you can send proactive reminders ahead of payment dates to prevent failed payments.\n*   **Recovered payments:** The volume of subscription payments recovered through retries or emails managed by Stripe, as well as other recovery methods you may be using. Monitoring the volume of recovered payments can help you measure the effectiveness of your recovery strategies.\n*   **Recovery rate:** The percentage of subscription payment volume successfully recovered by any means after a failure. If your recovery rate is lower than expected, consider turning on Stripe [retries](https://docs.stripe.com/billing/revenue-recovery/smart-retries) and failed payment [emails](https://docs.stripe.com/billing/revenue-recovery/customer-emails).\n\n## Breakdowns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese are specific charts that provide more granular insights on payment failures, recovery methods, and decline codes enabling you to tailor and optimize your recovery strategies.\n\n### Recovery breakdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Not recovered:** The volume of subscription payments that failed and could not be recovered.\n*   **Recovered:** The volume of subscription payments recovered through retries or emails managed by Stripe, as well as other recovery methods you may be using. Monitoring the volume of recovered payments can help you measure the effectiveness of your recovery strategies.\n*   **In recovery:** The volume of subscription payments that have recently failed but are still being retried by Stripe. You’re likely to see payment volume in recovery for the current month and the previous month as the retry window concludes.\n*   **Recovery rate:** The percentage of subscription payment volume that is successfully recovered by any means after a failure. You may see a temporary drop in your recovery rate for the current and previous month if not all automatic retries have been attempted yet.\n\n### Recovered volume by method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Retries:** The volume of failed payments recovered by Stripe retries.\n*   **Emails:** The volume of failed payments recovered by Stripe emails.\n*   **Other:** The volume of failed payments recovered by charge attempts made via API or in the Dashboard. Can include third-party email campaigns, in-app flows, other retry algorithms, and other recovery methods.\n\n### Failed volume by decline reason![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis chart shows you the top five decline codes by failed payment volume. Recognizing the types of decline codes can help diagnose common issues and propose corrective measures to reduce failures. [Learn more about decline codes](https://docs.stripe.com/declines/codes).\n\n## Top customers in recovery![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis table showcases customers whose payments have recently failed and are still being attempted by Stripe. The table shows the failure amount and how long the subscriber has been a customer. Consider reaching out to these customers manually depending on their value to potentially save revenue.",
    "title": "Revenue recovery analytics | Stripe Documentation",
    "description": "Understand, analyze, and track your recovery rates with Stripe's recovery analytics. Get valuable insights into your recovery effectiveness so you can reduce involuntary churn.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/automation-recipes",
    "markdown": "# Automation recipes | Stripe DocumentationThe Stripe Docs logo\n\n## View example recipes for common automations.\n\nIn this guide, we provide popular automation recipes to give you an idea of how to use automations in different scenarios. To get an overview of the different triggers, filter conditions, and actions available, see [Automations](https://docs.stripe.com/billing/automations).\n\n[](#custom-dunning-flow)\n\nIncrease your recovery rate by customizing dunning behavior based on billing interval, invoice amount, or customer segment. For example, you might want to grant longer grace periods to annual or high-value customers, or retry more frequently for a specific customer segment.\n\nTo customize automations:\n\n1.  Click **New automation**.\n2.  Give the automation a descriptive name, such as “Annual subscriber dunning.”\n3.  Select the **Subscription payment fails** as the trigger.\n4.  (Optional) Choose the conditions that must be met for the automation to run. In this case, Subscription interval is: **yearly**.\n5.  Add the **Start retry policy** action, and select **\\+ Create new retry policy** in the dropdown. Choose **Smart Retries for subscriptions** and retry up to **8 times** within **2 months**.\n6.  (Optional) Add a delay of 7 days as an additional grace period for manual outreach.\n7.  Add the **Cancel subscription** action.\n8.  Add the **Mark invoice uncollectible** action (which makes it a write-off for [Revenue Recognition](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing#uncollectible-invoices)).\n\n[](#invoice-overdue-notifications)\n\nTo improve cash flow and customer communications, keep track of high-value unpaid invoices. This recipe automates notifications for high-value invoices, enabling your team to take proactive measures to encourage the customer to pay the outstanding invoice.\n\nTo implement these notifications:\n\n1.  Click **New automation**.\n2.  Give the automation a descriptive name, such as “Notify Collections team of high-value late invoices.”\n3.  Select the **Invoice is overdue** as the trigger.\n4.  Add a filter condition to select invoices **greater than** **$500**.\n5.  Add a **Send email** action and select a recipient using the company email domain.\n6.  Write a short memo such as “Invoice over $500 is overdue by X days” in the memo field.\n\nModify this recipe to meet your specific business needs, such as adjusting the overdue dollar amount and length of overdue period. The recipient must use the company email domain or be a user on the Stripe account.\n\n[](#subscription-cancellation-confirmation)\n\nTo enhance customer communication, automatically send subscribers a confirmation email when their subscription is canceled.\n\nSending the confirmation email doesn’t prevent churn, but it can help to maintain a positive customer relationship and provide an opportunity to gather the cancellation reason, which allows you to further improve your service.\n\nTo set up this recipe with automations:\n\n1.  Click **New automation**.\n2.  Give the automation a descriptive name, such as “Subscription cancellation confirmation.”\n3.  Select the **Subscription is canceled** as the trigger.\n4.  (Optional) Add a filter condition to restrict the automation by customer segment, subscription product or plan, or subscription amount.\n5.  Select the **Send email to customer** action.\n6.  Stripe provides a predefined email template for the confirmation email. The email includes the subscription details and confirms the cancellation date. You also have the option to include a link to a cancellation reason survey.\n\n[](#signup-spend-credit)\n\nBusinesses with usage based pricing models can give new users a spend credit to get started. This can lower the barrier to entry for new users trying your products by helping reduce friction to sign up and increase activation rates.\n\nTo set this recipe with automations:\n\n1.  Click **New automation**.\n2.  Give the automation a descriptive name, such as “New customer spend credit.”\n3.  Select **Customer is created** as the trigger.\n4.  (Optional) Select the **Create a subscription** action.\n5.  Select the **Credit customer balance** action.\n6.  At the prompt, enter the amount of the credit.\n\nModify this recipe to meet your specific needs, such as adjusting the dollar amount of the credit adjustment and whether you want to create a subscription for this new customer.",
    "title": "Automation recipes | Stripe Documentation",
    "description": "Learn how to use automations in Stripe to create custom dunning flows, manage customer communications, create custom notifications, and issue signup credits for new users.",
    "languageCode": "en-US"
  }
]