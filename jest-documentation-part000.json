[
  {
    "url": "https://jestjs.io/docs/",
    "markdown": "# Page Not Found · Jest\n\nWe could not find what you were looking for.\n\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken.",
    "title": "Page Not Found · Jest",
    "description": null,
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/getting-started",
    "markdown": "# Getting Started · Jest\n\nInstall Jest using your favorite package manager:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest\n```\n\nLet's get started by writing a test for a hypothetical function that adds two numbers. First, create a `sum.js` file:\n\n```\nfunction sum(a, b) {  return a + b;}module.exports = sum;\n```\n\nThen, create a file named `sum.test.js`. This will contain our actual test:\n\n```\nconst sum = require('./sum');test('adds 1 + 2 to equal 3', () => {  expect(sum(1, 2)).toBe(3);});\n```\n\nAdd the following section to your `package.json`:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nFinally, run `yarn test` or `npm test` and Jest will print this message:\n\n```\nPASS  ./sum.test.js✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**You just successfully wrote your first test using Jest!**\n\nThis test used `expect` and `toBe` to test that two values were exactly identical. To learn about the other things that Jest can test, see [Using Matchers](https://jestjs.io/docs/next/using-matchers).\n\n## Running from command line[​](#running-from-command-line \"Direct link to Running from command line\")\n\nYou can run Jest directly from the CLI (if it's globally available in your `PATH`, e.g. by `yarn global add jest` or `npm install jest --global`) with a variety of useful options.\n\nHere's how to run Jest on files matching `my-test`, using `config.json` as a configuration file and display a native OS notification after the run:\n\n```\njest my-test --notify --config=config.json\n```\n\nIf you'd like to learn more about running `jest` through the command line, take a look at the [Jest CLI Options](https://jestjs.io/docs/next/cli) page.\n\n## Additional Configuration[​](#additional-configuration \"Direct link to Additional Configuration\")\n\n### Generate a basic configuration file[​](#generate-a-basic-configuration-file \"Direct link to Generate a basic configuration file\")\n\nBased on your project, Jest will ask you a few questions and will create a basic configuration file with a short description for each option:\n\n*   npm\n*   Yarn\n*   pnpm\n\n### Using Babel[​](#using-babel \"Direct link to Using Babel\")\n\nTo use [Babel](https://babeljs.io/), install required dependencies:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\nConfigure Babel to target your current version of Node by creating a `babel.config.js` file in the root of your project:\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],};\n```\n\nThe ideal configuration for Babel will depend on your project. See [Babel's docs](https://babeljs.io/docs/en/) for more details.\n\n**Making your Babel config jest-aware**\n\nJest will set `process.env.NODE_ENV` to `'test'` if it's not set to something else. You can use that in your configuration to conditionally setup only the compilation needed for Jest, e.g.\n\nbabel.config.js\n\n```\nmodule.exports = api => {  const isTest = api.env('test');  // You can use isTest to determine what presets and plugins to use.  return {    // ...  };};\n```\n\nnote\n\n`babel-jest` is automatically installed when installing Jest and will automatically transform files if a babel configuration exists in your project. To avoid this behavior, you can explicitly reset the `transform` configuration option:\n\njest.config.js\n\n```\nmodule.exports = {  transform: {},};\n```\n\n### Using webpack[​](#using-webpack \"Direct link to Using webpack\")\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools. Refer to the [webpack guide](https://jestjs.io/docs/next/webpack) to get started.\n\n### Using Vite[​](#using-vite \"Direct link to Using Vite\")\n\nJest can be used in projects that use [vite](https://vitejs.dev/) to serve source code over native ESM to provide some frontend tooling, vite is an opinionated tool and does offer some out-of-the box workflows. Jest is not fully supported by vite due to how the [plugin system](https://github.com/vitejs/vite/issues/1955#issuecomment-776009094) from vite works, but there are some working examples for first-class jest integration using `vite-jest`, since this is not fully supported, you might as well read the [limitation of the `vite-jest`](https://github.com/sodatea/vite-jest/tree/main/packages/vite-jest#limitations-and-differences-with-commonjs-tests). Refer to the [vite guide](https://vitejs.dev/guide/) to get started.\n\n### Using Parcel[​](#using-parcel \"Direct link to Using Parcel\")\n\nJest can be used in projects that use [parcel-bundler](https://parceljs.org/) to manage assets, styles, and compilation similar to webpack. Parcel requires zero configuration. Refer to the official [docs](https://parceljs.org/docs/) to get started.\n\n### Using TypeScript[​](#using-typescript \"Direct link to Using TypeScript\")\n\n#### Via `babel`[​](#via-babel \"Direct link to via-babel\")\n\nJest supports TypeScript, via Babel. First, make sure you followed the instructions on [using Babel](#using-babel) above. Next, install the `@babel/preset-typescript`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\nThen add `@babel/preset-typescript` to the list of presets in your `babel.config.js`.\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    ['@babel/preset-env', {targets: {node: 'current'}}],    '@babel/preset-typescript',  ],};\n```\n\nHowever, there are some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats) to using TypeScript with Babel. Because TypeScript support in Babel is purely transpilation, Jest will not type-check your tests as they are run. If you want that, you can use [ts-jest](https://github.com/kulshekhar/ts-jest) instead, or just run the TypeScript compiler [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) separately (or as part of your build process).\n\n#### Via `ts-jest`[​](#via-ts-jest \"Direct link to via-ts-jest\")\n\n[ts-jest](https://github.com/kulshekhar/ts-jest) is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev ts-jest\n```\n\nIn order for Jest to transpile TypeScript with `ts-jest`, you may also need to create a [configuration](https://kulshekhar.github.io/ts-jest/docs/getting-started/installation#jest-config-file) file.\n\n#### Type definitions[​](#type-definitions \"Direct link to Type definitions\")\n\nThere are two ways to have [Jest global APIs](https://jestjs.io/docs/next/api) typed for test files written in TypeScript.\n\nYou can use type definitions which ships with Jest and will update each time you update Jest. Install the `@jest/globals` package:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @jest/globals\n```\n\nAnd import the APIs from it:\n\nsum.test.ts\n\n```\nimport {describe, expect, test} from '@jest/globals';import {sum} from './sum';describe('sum module', () => {  test('adds 1 + 2 to equal 3', () => {    expect(sum(1, 2)).toBe(3);  });});\n```\n\nOr you may choose to install the [`@types/jest`](https://npmjs.com/package/@types/jest) package. It provides types for Jest globals without a need to import them.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @types/jest\n```\n\ninfo\n\n`@types/jest` is a third party library maintained at [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jest), hence the latest Jest features or versions may not be covered yet. Try to match versions of Jest and `@types/jest` as closely as possible. For example, if you are using Jest `27.4.0` then installing `27.4.x` of `@types/jest` is ideal.\n\n### Using ESLint[​](#using-eslint \"Direct link to Using ESLint\")\n\nJest can be used with ESLint without any further configuration as long as you import the [Jest global helpers](https://jestjs.io/docs/next/api) (`describe`, `it`, etc.) from `@jest/globals` before using them in your test file. This is necessary to avoid `no-undef` errors from ESLint, which doesn't know about the Jest globals.\n\nIf you'd like to avoid these imports, you can configure your [ESLint environment](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments) to support these globals by adding the `jest` environment:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"env\": {        \"jest\": true      }    }  ]}\n```\n\nOr use [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest), which has a similar effect:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"plugins\": [\"jest\"],      \"env\": {        \"jest/globals\": true      }    }  ]}\n```",
    "title": "Getting Started · Jest",
    "description": "Install Jest using your favorite package manager:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/getting-started",
    "markdown": "# Getting Started · Jest\n\nInstall Jest using your favorite package manager:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest\n```\n\nLet's get started by writing a test for a hypothetical function that adds two numbers. First, create a `sum.js` file:\n\n```\nfunction sum(a, b) {  return a + b;}module.exports = sum;\n```\n\nThen, create a file named `sum.test.js`. This will contain our actual test:\n\n```\nconst sum = require('./sum');test('adds 1 + 2 to equal 3', () => {  expect(sum(1, 2)).toBe(3);});\n```\n\nAdd the following section to your `package.json`:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nFinally, run `yarn test` or `npm test` and Jest will print this message:\n\n```\nPASS  ./sum.test.js✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**You just successfully wrote your first test using Jest!**\n\nThis test used `expect` and `toBe` to test that two values were exactly identical. To learn about the other things that Jest can test, see [Using Matchers](https://jestjs.io/docs/using-matchers).\n\n## Running from command line[​](#running-from-command-line \"Direct link to Running from command line\")\n\nYou can run Jest directly from the CLI (if it's globally available in your `PATH`, e.g. by `yarn global add jest` or `npm install jest --global`) with a variety of useful options.\n\nHere's how to run Jest on files matching `my-test`, using `config.json` as a configuration file and display a native OS notification after the run:\n\n```\njest my-test --notify --config=config.json\n```\n\nIf you'd like to learn more about running `jest` through the command line, take a look at the [Jest CLI Options](https://jestjs.io/docs/cli) page.\n\n## Additional Configuration[​](#additional-configuration \"Direct link to Additional Configuration\")\n\n### Generate a basic configuration file[​](#generate-a-basic-configuration-file \"Direct link to Generate a basic configuration file\")\n\nBased on your project, Jest will ask you a few questions and will create a basic configuration file with a short description for each option:\n\n*   npm\n*   Yarn\n*   pnpm\n\n### Using Babel[​](#using-babel \"Direct link to Using Babel\")\n\nTo use [Babel](https://babeljs.io/), install required dependencies:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\nConfigure Babel to target your current version of Node by creating a `babel.config.js` file in the root of your project:\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],};\n```\n\nThe ideal configuration for Babel will depend on your project. See [Babel's docs](https://babeljs.io/docs/en/) for more details.\n\n**Making your Babel config jest-aware**\n\nJest will set `process.env.NODE_ENV` to `'test'` if it's not set to something else. You can use that in your configuration to conditionally setup only the compilation needed for Jest, e.g.\n\nbabel.config.js\n\n```\nmodule.exports = api => {  const isTest = api.env('test');  // You can use isTest to determine what presets and plugins to use.  return {    // ...  };};\n```\n\nnote\n\n`babel-jest` is automatically installed when installing Jest and will automatically transform files if a babel configuration exists in your project. To avoid this behavior, you can explicitly reset the `transform` configuration option:\n\njest.config.js\n\n```\nmodule.exports = {  transform: {},};\n```\n\n### Using webpack[​](#using-webpack \"Direct link to Using webpack\")\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools. Refer to the [webpack guide](https://jestjs.io/docs/webpack) to get started.\n\n### Using Vite[​](#using-vite \"Direct link to Using Vite\")\n\nJest can be used in projects that use [vite](https://vitejs.dev/) to serve source code over native ESM to provide some frontend tooling, vite is an opinionated tool and does offer some out-of-the box workflows. Jest is not fully supported by vite due to how the [plugin system](https://github.com/vitejs/vite/issues/1955#issuecomment-776009094) from vite works, but there are some working examples for first-class jest integration using `vite-jest`, since this is not fully supported, you might as well read the [limitation of the `vite-jest`](https://github.com/sodatea/vite-jest/tree/main/packages/vite-jest#limitations-and-differences-with-commonjs-tests). Refer to the [vite guide](https://vitejs.dev/guide/) to get started.\n\n### Using Parcel[​](#using-parcel \"Direct link to Using Parcel\")\n\nJest can be used in projects that use [parcel-bundler](https://parceljs.org/) to manage assets, styles, and compilation similar to webpack. Parcel requires zero configuration. Refer to the official [docs](https://parceljs.org/docs/) to get started.\n\n### Using TypeScript[​](#using-typescript \"Direct link to Using TypeScript\")\n\n#### Via `babel`[​](#via-babel \"Direct link to via-babel\")\n\nJest supports TypeScript, via Babel. First, make sure you followed the instructions on [using Babel](#using-babel) above. Next, install the `@babel/preset-typescript`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\nThen add `@babel/preset-typescript` to the list of presets in your `babel.config.js`.\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    ['@babel/preset-env', {targets: {node: 'current'}}],    '@babel/preset-typescript',  ],};\n```\n\nHowever, there are some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats) to using TypeScript with Babel. Because TypeScript support in Babel is purely transpilation, Jest will not type-check your tests as they are run. If you want that, you can use [ts-jest](https://github.com/kulshekhar/ts-jest) instead, or just run the TypeScript compiler [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) separately (or as part of your build process).\n\n#### Via `ts-jest`[​](#via-ts-jest \"Direct link to via-ts-jest\")\n\n[ts-jest](https://github.com/kulshekhar/ts-jest) is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev ts-jest\n```\n\nIn order for Jest to transpile TypeScript with `ts-jest`, you may also need to create a [configuration](https://kulshekhar.github.io/ts-jest/docs/getting-started/installation#jest-config-file) file.\n\n#### Type definitions[​](#type-definitions \"Direct link to Type definitions\")\n\nThere are two ways to have [Jest global APIs](https://jestjs.io/docs/api) typed for test files written in TypeScript.\n\nYou can use type definitions which ships with Jest and will update each time you update Jest. Install the `@jest/globals` package:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @jest/globals\n```\n\nAnd import the APIs from it:\n\nsum.test.ts\n\n```\nimport {describe, expect, test} from '@jest/globals';import {sum} from './sum';describe('sum module', () => {  test('adds 1 + 2 to equal 3', () => {    expect(sum(1, 2)).toBe(3);  });});\n```\n\nOr you may choose to install the [`@types/jest`](https://npmjs.com/package/@types/jest) package. It provides types for Jest globals without a need to import them.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @types/jest\n```\n\ninfo\n\n`@types/jest` is a third party library maintained at [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jest), hence the latest Jest features or versions may not be covered yet. Try to match versions of Jest and `@types/jest` as closely as possible. For example, if you are using Jest `27.4.0` then installing `27.4.x` of `@types/jest` is ideal.\n\n### Using ESLint[​](#using-eslint \"Direct link to Using ESLint\")\n\nJest can be used with ESLint without any further configuration as long as you import the [Jest global helpers](https://jestjs.io/docs/api) (`describe`, `it`, etc.) from `@jest/globals` before using them in your test file. This is necessary to avoid `no-undef` errors from ESLint, which doesn't know about the Jest globals.\n\nIf you'd like to avoid these imports, you can configure your [ESLint environment](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments) to support these globals by adding the `jest` environment:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"env\": {        \"jest\": true      }    }  ]}\n```\n\nOr use [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest), which has a similar effect:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"plugins\": [\"jest\"],      \"env\": {        \"jest/globals\": true      }    }  ]}\n```",
    "title": "Getting Started · Jest",
    "description": "Install Jest using your favorite package manager:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/getting-started",
    "markdown": "# Getting Started · Jest\n\nInstall Jest using your favorite package manager:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest\n```\n\nLet's get started by writing a test for a hypothetical function that adds two numbers. First, create a `sum.js` file:\n\n```\nfunction sum(a, b) {  return a + b;}module.exports = sum;\n```\n\nThen, create a file named `sum.test.js`. This will contain our actual test:\n\n```\nconst sum = require('./sum');test('adds 1 + 2 to equal 3', () => {  expect(sum(1, 2)).toBe(3);});\n```\n\nAdd the following section to your `package.json`:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nFinally, run `yarn test` or `npm test` and Jest will print this message:\n\n```\nPASS  ./sum.test.js✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**You just successfully wrote your first test using Jest!**\n\nThis test used `expect` and `toBe` to test that two values were exactly identical. To learn about the other things that Jest can test, see [Using Matchers](https://jestjs.io/docs/29.6/using-matchers).\n\n## Running from command line[​](#running-from-command-line \"Direct link to Running from command line\")\n\nYou can run Jest directly from the CLI (if it's globally available in your `PATH`, e.g. by `yarn global add jest` or `npm install jest --global`) with a variety of useful options.\n\nHere's how to run Jest on files matching `my-test`, using `config.json` as a configuration file and display a native OS notification after the run:\n\n```\njest my-test --notify --config=config.json\n```\n\nIf you'd like to learn more about running `jest` through the command line, take a look at the [Jest CLI Options](https://jestjs.io/docs/29.6/cli) page.\n\n## Additional Configuration[​](#additional-configuration \"Direct link to Additional Configuration\")\n\n### Generate a basic configuration file[​](#generate-a-basic-configuration-file \"Direct link to Generate a basic configuration file\")\n\nBased on your project, Jest will ask you a few questions and will create a basic configuration file with a short description for each option:\n\n### Using Babel[​](#using-babel \"Direct link to Using Babel\")\n\nTo use [Babel](https://babeljs.io/), install required dependencies:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\nConfigure Babel to target your current version of Node by creating a `babel.config.js` file in the root of your project:\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],};\n```\n\nThe ideal configuration for Babel will depend on your project. See [Babel's docs](https://babeljs.io/docs/en/) for more details.\n\n**Making your Babel config jest-aware**\n\nJest will set `process.env.NODE_ENV` to `'test'` if it's not set to something else. You can use that in your configuration to conditionally setup only the compilation needed for Jest, e.g.\n\nbabel.config.js\n\n```\nmodule.exports = api => {  const isTest = api.env('test');  // You can use isTest to determine what presets and plugins to use.  return {    // ...  };};\n```\n\nnote\n\n`babel-jest` is automatically installed when installing Jest and will automatically transform files if a babel configuration exists in your project. To avoid this behavior, you can explicitly reset the `transform` configuration option:\n\njest.config.js\n\n```\nmodule.exports = {  transform: {},};\n```\n\n### Using webpack[​](#using-webpack \"Direct link to Using webpack\")\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools. Refer to the [webpack guide](https://jestjs.io/docs/29.6/webpack) to get started.\n\n### Using Vite[​](#using-vite \"Direct link to Using Vite\")\n\nJest can be used in projects that use [vite](https://vitejs.dev/) to serve source code over native ESM to provide some frontend tooling, vite is an opinionated tool and does offer some out-of-the box workflows. Jest is not fully supported by vite due to how the [plugin system](https://github.com/vitejs/vite/issues/1955#issuecomment-776009094) from vite works, but there are some working examples for first-class jest integration using `vite-jest`, since this is not fully supported, you might as well read the [limitation of the `vite-jest`](https://github.com/sodatea/vite-jest/tree/main/packages/vite-jest#limitations-and-differences-with-commonjs-tests). Refer to the [vite guide](https://vitejs.dev/guide/) to get started.\n\n### Using Parcel[​](#using-parcel \"Direct link to Using Parcel\")\n\nJest can be used in projects that use [parcel-bundler](https://parceljs.org/) to manage assets, styles, and compilation similar to webpack. Parcel requires zero configuration. Refer to the official [docs](https://parceljs.org/docs/) to get started.\n\n### Using TypeScript[​](#using-typescript \"Direct link to Using TypeScript\")\n\n#### Via `babel`[​](#via-babel \"Direct link to via-babel\")\n\nJest supports TypeScript, via Babel. First, make sure you followed the instructions on [using Babel](#using-babel) above. Next, install the `@babel/preset-typescript`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\nThen add `@babel/preset-typescript` to the list of presets in your `babel.config.js`.\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    ['@babel/preset-env', {targets: {node: 'current'}}],    '@babel/preset-typescript',  ],};\n```\n\nHowever, there are some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats) to using TypeScript with Babel. Because TypeScript support in Babel is purely transpilation, Jest will not type-check your tests as they are run. If you want that, you can use [ts-jest](https://github.com/kulshekhar/ts-jest) instead, or just run the TypeScript compiler [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) separately (or as part of your build process).\n\n#### Via `ts-jest`[​](#via-ts-jest \"Direct link to via-ts-jest\")\n\n[ts-jest](https://github.com/kulshekhar/ts-jest) is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev ts-jest\n```\n\nIn order for Jest to transpile TypeScript with `ts-jest`, you may also need to create a [configuration](https://kulshekhar.github.io/ts-jest/docs/getting-started/installation#jest-config-file) file.\n\n#### Type definitions[​](#type-definitions \"Direct link to Type definitions\")\n\nThere are two ways to have [Jest global APIs](https://jestjs.io/docs/29.6/api) typed for test files written in TypeScript.\n\nYou can use type definitions which ships with Jest and will update each time you update Jest. Install the `@jest/globals` package:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @jest/globals\n```\n\nAnd import the APIs from it:\n\nsum.test.ts\n\n```\nimport {describe, expect, test} from '@jest/globals';import {sum} from './sum';describe('sum module', () => {  test('adds 1 + 2 to equal 3', () => {    expect(sum(1, 2)).toBe(3);  });});\n```\n\nOr you may choose to install the [`@types/jest`](https://npmjs.com/package/@types/jest) package. It provides types for Jest globals without a need to import them.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @types/jest\n```\n\ninfo\n\n`@types/jest` is a third party library maintained at [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jest), hence the latest Jest features or versions may not be covered yet. Try to match versions of Jest and `@types/jest` as closely as possible. For example, if you are using Jest `27.4.0` then installing `27.4.x` of `@types/jest` is ideal.\n\n### Using ESLint[​](#using-eslint \"Direct link to Using ESLint\")\n\nJest can be used with ESLint without any further configuration as long as you import the [Jest global helpers](https://jestjs.io/docs/29.6/api) (`describe`, `it`, etc.) from `@jest/globals` before using them in your test file. This is necessary to avoid `no-undef` errors from ESLint, which doesn't know about the Jest globals.\n\nIf you'd like to avoid these imports, you can configure your [ESLint environment](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments) to support these globals by adding the `jest` environment:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"env\": {        \"jest\": true      }    }  ]}\n```\n\nOr use [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest), which has a similar effect:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"plugins\": [\"jest\"],      \"env\": {        \"jest/globals\": true      }    }  ]}\n```",
    "title": "Getting Started · Jest",
    "description": "Install Jest using your favorite package manager:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/getting-started",
    "markdown": "# Getting Started · Jest\n\nInstall Jest using your favorite package manager:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest\n```\n\nLet's get started by writing a test for a hypothetical function that adds two numbers. First, create a `sum.js` file:\n\n```\nfunction sum(a, b) {  return a + b;}module.exports = sum;\n```\n\nThen, create a file named `sum.test.js`. This will contain our actual test:\n\n```\nconst sum = require('./sum');test('adds 1 + 2 to equal 3', () => {  expect(sum(1, 2)).toBe(3);});\n```\n\nAdd the following section to your `package.json`:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nFinally, run `yarn test` or `npm test` and Jest will print this message:\n\n```\nPASS  ./sum.test.js✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**You just successfully wrote your first test using Jest!**\n\nThis test used `expect` and `toBe` to test that two values were exactly identical. To learn about the other things that Jest can test, see [Using Matchers](https://jestjs.io/docs/29.5/using-matchers).\n\n## Running from command line[​](#running-from-command-line \"Direct link to Running from command line\")\n\nYou can run Jest directly from the CLI (if it's globally available in your `PATH`, e.g. by `yarn global add jest` or `npm install jest --global`) with a variety of useful options.\n\nHere's how to run Jest on files matching `my-test`, using `config.json` as a configuration file and display a native OS notification after the run:\n\n```\njest my-test --notify --config=config.json\n```\n\nIf you'd like to learn more about running `jest` through the command line, take a look at the [Jest CLI Options](https://jestjs.io/docs/29.5/cli) page.\n\n## Additional Configuration[​](#additional-configuration \"Direct link to Additional Configuration\")\n\n### Generate a basic configuration file[​](#generate-a-basic-configuration-file \"Direct link to Generate a basic configuration file\")\n\nBased on your project, Jest will ask you a few questions and will create a basic configuration file with a short description for each option:\n\n### Using Babel[​](#using-babel \"Direct link to Using Babel\")\n\nTo use [Babel](https://babeljs.io/), install required dependencies:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\nConfigure Babel to target your current version of Node by creating a `babel.config.js` file in the root of your project:\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],};\n```\n\nThe ideal configuration for Babel will depend on your project. See [Babel's docs](https://babeljs.io/docs/en/) for more details.\n\n**Making your Babel config jest-aware**\n\nJest will set `process.env.NODE_ENV` to `'test'` if it's not set to something else. You can use that in your configuration to conditionally setup only the compilation needed for Jest, e.g.\n\nbabel.config.js\n\n```\nmodule.exports = api => {  const isTest = api.env('test');  // You can use isTest to determine what presets and plugins to use.  return {    // ...  };};\n```\n\nnote\n\n`babel-jest` is automatically installed when installing Jest and will automatically transform files if a babel configuration exists in your project. To avoid this behavior, you can explicitly reset the `transform` configuration option:\n\njest.config.js\n\n```\nmodule.exports = {  transform: {},};\n```\n\n### Using webpack[​](#using-webpack \"Direct link to Using webpack\")\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools. Refer to the [webpack guide](https://jestjs.io/docs/29.5/webpack) to get started.\n\n### Using Vite[​](#using-vite \"Direct link to Using Vite\")\n\nJest can be used in projects that use [vite](https://vitejs.dev/) to serve source code over native ESM to provide some frontend tooling, vite is an opinionated tool and does offer some out-of-the box workflows. Jest is not fully supported by vite due to how the [plugin system](https://github.com/vitejs/vite/issues/1955#issuecomment-776009094) from vite works, but there are some working examples for first-class jest integration using `vite-jest`, since this is not fully supported, you might as well read the [limitation of the `vite-jest`](https://github.com/sodatea/vite-jest/tree/main/packages/vite-jest#limitations-and-differences-with-commonjs-tests). Refer to the [vite guide](https://vitejs.dev/guide/) to get started.\n\n### Using Parcel[​](#using-parcel \"Direct link to Using Parcel\")\n\nJest can be used in projects that use [parcel-bundler](https://parceljs.org/) to manage assets, styles, and compilation similar to webpack. Parcel requires zero configuration. Refer to the official [docs](https://parceljs.org/docs/) to get started.\n\n### Using TypeScript[​](#using-typescript \"Direct link to Using TypeScript\")\n\n#### Via `babel`[​](#via-babel \"Direct link to via-babel\")\n\nJest supports TypeScript, via Babel. First, make sure you followed the instructions on [using Babel](#using-babel) above. Next, install the `@babel/preset-typescript`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\nThen add `@babel/preset-typescript` to the list of presets in your `babel.config.js`.\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    ['@babel/preset-env', {targets: {node: 'current'}}],    '@babel/preset-typescript',  ],};\n```\n\nHowever, there are some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats) to using TypeScript with Babel. Because TypeScript support in Babel is purely transpilation, Jest will not type-check your tests as they are run. If you want that, you can use [ts-jest](https://github.com/kulshekhar/ts-jest) instead, or just run the TypeScript compiler [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) separately (or as part of your build process).\n\n#### Via `ts-jest`[​](#via-ts-jest \"Direct link to via-ts-jest\")\n\n[ts-jest](https://github.com/kulshekhar/ts-jest) is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev ts-jest\n```\n\nIn order for Jest to transpile TypeScript with `ts-jest`, you may also need to create a [configuration](https://kulshekhar.github.io/ts-jest/docs/getting-started/installation#jest-config-file) file.\n\n#### Type definitions[​](#type-definitions \"Direct link to Type definitions\")\n\nThere are two ways to have [Jest global APIs](https://jestjs.io/docs/29.5/api) typed for test files written in TypeScript.\n\nYou can use type definitions which ships with Jest and will update each time you update Jest. Install the `@jest/globals` package:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @jest/globals\n```\n\nAnd import the APIs from it:\n\nsum.test.ts\n\n```\nimport {describe, expect, test} from '@jest/globals';import {sum} from './sum';describe('sum module', () => {  test('adds 1 + 2 to equal 3', () => {    expect(sum(1, 2)).toBe(3);  });});\n```\n\nOr you may choose to install the [`@types/jest`](https://npmjs.com/package/@types/jest) package. It provides types for Jest globals without a need to import them.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @types/jest\n```\n\ninfo\n\n`@types/jest` is a third party library maintained at [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jest), hence the latest Jest features or versions may not be covered yet. Try to match versions of Jest and `@types/jest` as closely as possible. For example, if you are using Jest `27.4.0` then installing `27.4.x` of `@types/jest` is ideal.\n\n### Using ESLint[​](#using-eslint \"Direct link to Using ESLint\")\n\nJest can be used with ESLint without any further configuration as long as you import the [Jest global helpers](https://jestjs.io/docs/29.5/api) (`describe`, `it`, etc.) from `@jest/globals` before using them in your test file. This is necessary to avoid `no-undef` errors from ESLint, which doesn't know about the Jest globals.\n\nIf you'd like to avoid these imports, you can configure your [ESLint environment](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments) to support these globals by adding the `jest` environment:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"env\": {        \"jest\": true      }    }  ]}\n```\n\nOr use [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest), which has a similar effect:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"plugins\": [\"jest\"],      \"env\": {        \"jest/globals\": true      }    }  ]}\n```",
    "title": "Getting Started · Jest",
    "description": "Install Jest using your favorite package manager:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/getting-started",
    "markdown": "# Getting Started · Jest\n\nInstall Jest using your favorite package manager:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest\n```\n\nLet's get started by writing a test for a hypothetical function that adds two numbers. First, create a `sum.js` file:\n\n```\nfunction sum(a, b) {  return a + b;}module.exports = sum;\n```\n\nThen, create a file named `sum.test.js`. This will contain our actual test:\n\n```\nconst sum = require('./sum');test('adds 1 + 2 to equal 3', () => {  expect(sum(1, 2)).toBe(3);});\n```\n\nAdd the following section to your `package.json`:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nFinally, run `yarn test` or `npm test` and Jest will print this message:\n\n```\nPASS  ./sum.test.js✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**You just successfully wrote your first test using Jest!**\n\nThis test used `expect` and `toBe` to test that two values were exactly identical. To learn about the other things that Jest can test, see [Using Matchers](https://jestjs.io/docs/29.4/using-matchers).\n\n## Running from command line[​](#running-from-command-line \"Direct link to Running from command line\")\n\nYou can run Jest directly from the CLI (if it's globally available in your `PATH`, e.g. by `yarn global add jest` or `npm install jest --global`) with a variety of useful options.\n\nHere's how to run Jest on files matching `my-test`, using `config.json` as a configuration file and display a native OS notification after the run:\n\n```\njest my-test --notify --config=config.json\n```\n\nIf you'd like to learn more about running `jest` through the command line, take a look at the [Jest CLI Options](https://jestjs.io/docs/29.4/cli) page.\n\n## Additional Configuration[​](#additional-configuration \"Direct link to Additional Configuration\")\n\n### Generate a basic configuration file[​](#generate-a-basic-configuration-file \"Direct link to Generate a basic configuration file\")\n\nBased on your project, Jest will ask you a few questions and will create a basic configuration file with a short description for each option:\n\n### Using Babel[​](#using-babel \"Direct link to Using Babel\")\n\nTo use [Babel](https://babeljs.io/), install required dependencies:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev babel-jest @babel/core @babel/preset-env\n```\n\nConfigure Babel to target your current version of Node by creating a `babel.config.js` file in the root of your project:\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],};\n```\n\nThe ideal configuration for Babel will depend on your project. See [Babel's docs](https://babeljs.io/docs/en/) for more details.\n\n**Making your Babel config jest-aware**\n\nJest will set `process.env.NODE_ENV` to `'test'` if it's not set to something else. You can use that in your configuration to conditionally setup only the compilation needed for Jest, e.g.\n\nbabel.config.js\n\n```\nmodule.exports = api => {  const isTest = api.env('test');  // You can use isTest to determine what presets and plugins to use.  return {    // ...  };};\n```\n\nnote\n\n`babel-jest` is automatically installed when installing Jest and will automatically transform files if a babel configuration exists in your project. To avoid this behavior, you can explicitly reset the `transform` configuration option:\n\njest.config.js\n\n```\nmodule.exports = {  transform: {},};\n```\n\n### Using webpack[​](#using-webpack \"Direct link to Using webpack\")\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools. Refer to the [webpack guide](https://jestjs.io/docs/29.4/webpack) to get started.\n\n### Using Vite[​](#using-vite \"Direct link to Using Vite\")\n\nJest can be used in projects that use [vite](https://vitejs.dev/) to serve source code over native ESM to provide some frontend tooling, vite is an opinionated tool and does offer some out-of-the box workflows. Jest is not fully supported by vite due to how the [plugin system](https://github.com/vitejs/vite/issues/1955#issuecomment-776009094) from vite works, but there are some working examples for first-class jest integration using `vite-jest`, since this is not fully supported, you might as well read the [limitation of the `vite-jest`](https://github.com/sodatea/vite-jest/tree/main/packages/vite-jest#limitations-and-differences-with-commonjs-tests). Refer to the [vite guide](https://vitejs.dev/guide/) to get started.\n\n### Using Parcel[​](#using-parcel \"Direct link to Using Parcel\")\n\nJest can be used in projects that use [parcel-bundler](https://parceljs.org/) to manage assets, styles, and compilation similar to webpack. Parcel requires zero configuration. Refer to the official [docs](https://parceljs.org/docs/) to get started.\n\n### Using TypeScript[​](#using-typescript \"Direct link to Using TypeScript\")\n\n#### Via `babel`[​](#via-babel \"Direct link to via-babel\")\n\nJest supports TypeScript, via Babel. First, make sure you followed the instructions on [using Babel](#using-babel) above. Next, install the `@babel/preset-typescript`:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\nThen add `@babel/preset-typescript` to the list of presets in your `babel.config.js`.\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    ['@babel/preset-env', {targets: {node: 'current'}}],    '@babel/preset-typescript',  ],};\n```\n\nHowever, there are some [caveats](https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats) to using TypeScript with Babel. Because TypeScript support in Babel is purely transpilation, Jest will not type-check your tests as they are run. If you want that, you can use [ts-jest](https://github.com/kulshekhar/ts-jest) instead, or just run the TypeScript compiler [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) separately (or as part of your build process).\n\n#### Via `ts-jest`[​](#via-ts-jest \"Direct link to via-ts-jest\")\n\n[ts-jest](https://github.com/kulshekhar/ts-jest) is a TypeScript preprocessor with source map support for Jest that lets you use Jest to test projects written in TypeScript.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev ts-jest\n```\n\nIn order for Jest to transpile TypeScript with `ts-jest`, you may also need to create a [configuration](https://kulshekhar.github.io/ts-jest/docs/getting-started/installation#jest-config-file) file.\n\n#### Type definitions[​](#type-definitions \"Direct link to Type definitions\")\n\nThere are two ways to have [Jest global APIs](https://jestjs.io/docs/29.4/api) typed for test files written in TypeScript.\n\nYou can use type definitions which ships with Jest and will update each time you update Jest. Install the `@jest/globals` package:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @jest/globals\n```\n\nAnd import the APIs from it:\n\nsum.test.ts\n\n```\nimport {describe, expect, test} from '@jest/globals';import {sum} from './sum';describe('sum module', () => {  test('adds 1 + 2 to equal 3', () => {    expect(sum(1, 2)).toBe(3);  });});\n```\n\nOr you may choose to install the [`@types/jest`](https://npmjs.com/package/@types/jest) package. It provides types for Jest globals without a need to import them.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @types/jest\n```\n\ninfo\n\n`@types/jest` is a third party library maintained at [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jest), hence the latest Jest features or versions may not be covered yet. Try to match versions of Jest and `@types/jest` as closely as possible. For example, if you are using Jest `27.4.0` then installing `27.4.x` of `@types/jest` is ideal.\n\n### Using ESLint[​](#using-eslint \"Direct link to Using ESLint\")\n\nJest can be used with ESLint without any further configuration as long as you import the [Jest global helpers](https://jestjs.io/docs/29.4/api) (`describe`, `it`, etc.) from `@jest/globals` before using them in your test file. This is necessary to avoid `no-undef` errors from ESLint, which doesn't know about the Jest globals.\n\nIf you'd like to avoid these imports, you can configure your [ESLint environment](https://eslint.org/docs/latest/use/configure/language-options#specifying-environments) to support these globals by adding the `jest` environment:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"env\": {        \"jest\": true      }    }  ]}\n```\n\nOr use [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest), which has a similar effect:\n\n```\n{  \"overrides\": [    {      \"files\": [\"tests/**/*\"],      \"plugins\": [\"jest\"],      \"env\": {        \"jest/globals\": true      }    }  ]}\n```",
    "title": "Getting Started · Jest",
    "description": "Install Jest using your favorite package manager:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/snapshot-testing",
    "markdown": "# Snapshot Testing · Jest\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest[​](#snapshot-testing-with-jest \"Direct link to Snapshot Testing with Jest\")\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n```\nexports[`renders correctly 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nnote\n\nThe snapshot is directly scoped to the data you render – in our example the `<Link>` component with `page` prop passed to it. This implies that even if any other file has missing props (say, `App.js`) in the `<Link>` component, it will still pass the test as the test doesn't know the usage of `<Link>` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\ninfo\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots[​](#updating-snapshots \"Direct link to Updating Snapshots\")\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n```\n// Updated test case with a Link to a different addressit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nIn that case, Jest will print this output:\n\n![](https://jestjs.io/assets/images/failedSnapshotTest-754bd8c54c17338fe046c6273fd3f9d1.png)\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode[​](#interactive-snapshot-mode \"Direct link to Interactive Snapshot Mode\")\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshot-58ae38e9cae13140c56d8472453f0595.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotUpdate-a17d8d77f94702048b4d0e0e4c580719.gif)\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotDone-59ee291ee320accbc4bfc4f33b22638a.png)\n\n### Inline Snapshots[​](#inline-snapshots \"Direct link to Inline Snapshots\")\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nExample:\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot();});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot(`    <a      className=\"normal\"      href=\"https://example.com\"      onMouseEnter={[Function]}      onMouseLeave={[Function]}    >      Example Site    </a>  `);});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers[​](#property-matchers \"Direct link to Property Matchers\")\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n```\nit('will fail every time', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot();});// Snapshotexports[`will fail every time 1`] = `{  \"createdAt\": 2018-05-19T23:36:09.816Z,  \"id\": 3,  \"name\": \"LeBron James\",}`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n```\nit('will check the matchers and pass', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    id: expect.any(Number),  });});// Snapshotexports[`will check the matchers and pass 1`] = `{  \"createdAt\": Any<Date>,  \"id\": Any<Number>,  \"name\": \"LeBron James\",}`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n```\nit('will check the values and pass', () => {  const user = {    createdAt: new Date(),    name: 'Bond... James Bond',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    name: 'Bond... James Bond',  });});// Snapshotexports[`will check the values and pass 1`] = `{  \"createdAt\": Any<Date>,  \"name\": 'Bond... James Bond',}`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n```\nconst randomNumber = Math.round(Math.random() * 100);const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);expect(stringWithConstantData).toMatchSnapshot();\n```\n\nOther ways this can be done is using the [snapshot serializer](https://jestjs.io/docs/configuration#snapshotserializers-arraystring) or [mocking](https://jestjs.io/docs/mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1\\. Treat snapshots as code[​](#1-treat-snapshots-as-code \"Direct link to 1. Treat snapshots as code\")\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2\\. Tests should be deterministic[​](#2-tests-should-be-deterministic \"Direct link to 2. Tests should be deterministic\")\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/jestjs/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](https://jestjs.io/docs/mock-functions) to return a consistent value every time the test is run:\n\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3\\. Use descriptive snapshot names[​](#3-use-descriptive-snapshot-names \"Direct link to 3. Use descriptive snapshot names\")\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n```\nexports[`<UserName /> should handle some test case`] = `null`;exports[`<UserName /> should handle some other test case`] = `<div>  Alan Turing</div>`;\n```\n\nTo:\n\n```\nexports[`<UserName /> should render null`] = `null`;exports[`<UserName /> should render Alan Turing`] = `<div>  Alan Turing</div>`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n```\nexports[`<UserName /> should render null`] = `<div>  Alan Turing</div>`;exports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions[​](#frequently-asked-questions \"Direct link to Frequently Asked Questions\")\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?[​](#are-snapshots-written-automatically-on-continuous-integration-ci-systems \"Direct link to Are snapshots written automatically on Continuous Integration (CI) systems?\")\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?[​](#should-snapshot-files-be-committed \"Direct link to Should snapshot files be committed?\")\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?[​](#does-snapshot-testing-only-work-with-react-components \"Direct link to Does snapshot testing only work with React components?\")\n\n[React](https://jestjs.io/docs/tutorial-react) and [React Native](https://jestjs.io/docs/tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/jestjs/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?[​](#whats-the-difference-between-snapshot-testing-and-visual-regression-testing \"Direct link to What's the difference between snapshot testing and visual regression testing?\")\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?[​](#does-snapshot-testing-replace-unit-testing \"Direct link to Does snapshot testing replace unit testing?\")\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?[​](#what-is-the-performance-of-snapshot-testing-regarding-speed-and-size-of-the-generated-files \"Direct link to What is the performance of snapshot testing regarding speed and size of the generated files?\")\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?[​](#how-do-i-resolve-conflicts-within-snapshot-files \"Direct link to How do I resolve conflicts within snapshot files?\")\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?[​](#is-it-possible-to-apply-test-driven-development-principles-with-snapshot-testing \"Direct link to Is it possible to apply test-driven development principles with snapshot testing?\")\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?[​](#does-code-coverage-work-with-snapshot-testing \"Direct link to Does code coverage work with snapshot testing?\")\n\nYes, as well as with any other test.",
    "title": "Snapshot Testing · Jest",
    "description": "Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/using-matchers",
    "markdown": "# Using Matchers · Jest\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](https://jestjs.io/docs/next/expect).\n\n## Common Matchers[​](#common-matchers \"Direct link to Common Matchers\")\n\nThe simplest way to test a value is with exact equality.\n\n```\ntest('two plus two is four', () => {  expect(2 + 2).toBe(4);});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual`:\n\n```\ntest('object assignment', () => {  const data = {one: 1};  data['two'] = 2;  expect(data).toEqual({one: 1, two: 2});});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\ntip\n\n`toEqual` ignores object keys with `undefined` properties, `undefined` array items, array sparseness, or object type mismatch. To take these into account use `toStrictEqual` instead.\n\nYou can also test for the opposite of a matcher using `not`:\n\n```\ntest('adding positive numbers is not zero', () => {  for (let a = 1; a < 10; a++) {    for (let b = 1; b < 10; b++) {      expect(a + b).not.toBe(0);    }  }});\n```\n\n## Truthiness[​](#truthiness \"Direct link to Truthiness\")\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n*   `toBeNull` matches only `null`\n*   `toBeUndefined` matches only `undefined`\n*   `toBeDefined` is the opposite of `toBeUndefined`\n*   `toBeTruthy` matches anything that an `if` statement treats as true\n*   `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n```\ntest('null', () => {  const n = null;  expect(n).toBeNull();  expect(n).toBeDefined();  expect(n).not.toBeUndefined();  expect(n).not.toBeTruthy();  expect(n).toBeFalsy();});test('zero', () => {  const z = 0;  expect(z).not.toBeNull();  expect(z).toBeDefined();  expect(z).not.toBeUndefined();  expect(z).not.toBeTruthy();  expect(z).toBeFalsy();});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers[​](#numbers \"Direct link to Numbers\")\n\nMost ways of comparing numbers have matcher equivalents.\n\n```\ntest('two plus two', () => {  const value = 2 + 2;  expect(value).toBeGreaterThan(3);  expect(value).toBeGreaterThanOrEqual(3.5);  expect(value).toBeLessThan(5);  expect(value).toBeLessThanOrEqual(4.5);  // toBe and toEqual are equivalent for numbers  expect(value).toBe(4);  expect(value).toEqual(4);});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n```\ntest('adding floating point numbers', () => {  const value = 0.1 + 0.2;  //expect(value).toBe(0.3);           This won't work because of rounding error  expect(value).toBeCloseTo(0.3); // This works.});\n```\n\n## Strings[​](#strings \"Direct link to Strings\")\n\nYou can check strings against regular expressions with `toMatch`:\n\n```\ntest('there is no I in team', () => {  expect('team').not.toMatch(/I/);});test('but there is a \"stop\" in Christoph', () => {  expect('Christoph').toMatch(/stop/);});\n```\n\n## Arrays and iterables[​](#arrays-and-iterables \"Direct link to Arrays and iterables\")\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n```\nconst shoppingList = [  'diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];test('the shopping list has milk on it', () => {  expect(shoppingList).toContain('milk');  expect(new Set(shoppingList)).toContain('milk');});\n```\n\n## Exceptions[​](#exceptions \"Direct link to Exceptions\")\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n```\nfunction compileAndroidCode() {  throw new Error('you are using the wrong JDK!');}test('compiling android goes as expected', () => {  expect(() => compileAndroidCode()).toThrow();  expect(() => compileAndroidCode()).toThrow(Error);  // You can also use a string that must be contained in the error message or a regexp  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');  expect(() => compileAndroidCode()).toThrow(/JDK/);  // Or you can match an exact error message using a regexp like below  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass});\n```\n\ntip\n\nThe function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More[​](#and-more \"Direct link to And More\")\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/next/expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](https://jestjs.io/docs/next/asynchronous).",
    "title": "Using Matchers · Jest",
    "description": "Jest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/api",
    "markdown": "# Globals · Jest\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/next/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`afterAll(fn, timeout)`](#afterallfn-timeout)\n    *   [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n    *   [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n    *   [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n    *   [`describe(name, fn)`](#describename-fn)\n    *   [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n    *   [`describe.only(name, fn)`](#describeonlyname-fn)\n    *   [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n    *   [`describe.skip(name, fn)`](#describeskipname-fn)\n    *   [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n    *   [`test(name, fn, timeout)`](#testname-fn-timeout)\n    *   [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n    *   [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n    *   [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n    *   [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n    *   [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n    *   [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n    *   [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n    *   [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n    *   [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n    *   [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n    *   [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n    *   [`test.skip(name, fn)`](#testskipname-fn)\n    *   [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n    *   [`test.todo(name)`](#testtodoname)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`.each`](#each)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `afterAll(fn, timeout)`[​](#afterallfn-timeout \"Direct link to afterallfn-timeout\")\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterAll(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`[​](#aftereachfn-timeout \"Direct link to aftereachfn-timeout\")\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterEach(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`[​](#beforeallfn-timeout \"Direct link to beforeallfn-timeout\")\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeAll(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});// Since we only set up the database once in this example, it's important// that our tests don't modify it.test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`[​](#beforeeachfn-timeout \"Direct link to beforeeachfn-timeout\")\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeEach(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`[​](#describename-fn \"Direct link to describename-fn\")\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n```\nconst myBeverage = {  delicious: true,  sour: false,};describe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n```\nconst binaryStringToNumber = binString => {  if (!/^[01]+$/.test(binString)) {    throw new CustomError('Not a binary number.');  }  return parseInt(binString, 2);};describe('binaryStringToNumber', () => {  describe('given an invalid binary string', () => {    test('composed of non-numbers throws CustomError', () => {      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);    });    test('with extra whitespace throws CustomError', () => {      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);    });  });  describe('given a valid binary string', () => {    test('returns the correct number', () => {      expect(binaryStringToNumber('100')).toBe(4);    });  });});\n```\n\n### `describe.each(table)(name, fn, timeout)`[​](#describeeachtablename-fn-timeout \"Direct link to describeeachtablename-fn-timeout\")\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1\\. `describe.each(table)(name, fn, timeout)`[​](#1-describeeachtablename-fn-timeout \"Direct link to 1-describeeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`.\n    \n*   `name`: `String` the title of the test suite.\n    \n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%$` - Number of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments.\n    \n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n    \n\nExample:\n\n```\ndescribe.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n```\ndescribe.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n#### 2\\. ``describe.each`table`(name, fn, timeout)``[​](#2-describeeachtablename-fn-timeout \"Direct link to 2-describeeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ndescribe.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('$a + $b', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n### `describe.only(name, fn)`[​](#describeonlyname-fn \"Direct link to describeonlyname-fn\")\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n```\ndescribe.only('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe('my other beverage', () => {  // ... will be skipped});\n```\n\n### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn \"Direct link to describeonlyeachtablename-fn\")\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and ``fdescribe.each`table`(name, fn)``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn-1 \"Direct link to describeonlyeachtablename-fn-1\")\n\n```\ndescribe.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.only.each`table`(name, fn)``[​](#describeonlyeachtablename-fn-2 \"Direct link to describeonlyeachtablename-fn-2\")\n\n```\ndescribe.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('passes', () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `describe.skip(name, fn)`[​](#describeskipname-fn \"Direct link to describeskipname-fn\")\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n```\ndescribe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe.skip('my other beverage', () => {  // ... will be skipped});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn \"Direct link to describeskipeachtablename-fn\")\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and ``xdescribe.each`table`(name, fn)``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn-1 \"Direct link to describeskipeachtablename-fn-1\")\n\n```\ndescribe.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.skip.each`table`(name, fn)``[​](#describeskipeachtablename-fn-2 \"Direct link to describeskipeachtablename-fn-2\")\n\n```\ndescribe.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('will not be run', () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test(name, fn, timeout)`[​](#testname-fn-timeout \"Direct link to testname-fn-timeout\")\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n```\ntest('did not rain', () => {  expect(inchesOfRain()).toBe(0);});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nIf a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n```\ntest('has lemon in it', () => {  return fetchBeverageList().then(list => {    expect(list).toContain('lemon');  });});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves. For more details, see [Testing Asynchronous Code](https://jestjs.io/docs/next/asynchronous) page.\n\ntip\n\nJest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test [callbacks](https://jestjs.io/docs/next/asynchronous#callbacks).\n\n### `test.concurrent(name, fn, timeout)`[​](#testconcurrentname-fn-timeout \"Direct link to testconcurrentname-fn-timeout\")\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\ncaution\n\n`test.concurrent` is considered experimental - see [here](https://github.com/jestjs/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues.\n\nUse `test.concurrent` if you want the test to run concurrently.\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\n```\ntest.concurrent('addition of 2 numbers', async () => {  expect(5 + 3).toBe(8);});test.concurrent('subtraction 2 numbers', async () => {  expect(5 - 3).toBe(2);});\n```\n\ntip\n\nUse the [`maxConcurrency`](https://jestjs.io/docs/next/configuration#maxconcurrency-number) configuration option to prevent Jest from executing more than the specified amount of tests at the same time.\n\n### `test.concurrent.each(table)(name, fn, timeout)`[​](#testconcurrenteachtablename-fn-timeout \"Direct link to testconcurrenteachtablename-fn-timeout\")\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1\\. `test.concurrent.each(table)(name, fn, timeout)`[​](#1-testconcurrenteachtablename-fn-timeout \"Direct link to 1-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%$` - Number of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.concurrent.each`table`(name, fn, timeout)``[​](#2-testconcurrenteachtablename-fn-timeout \"Direct link to 2-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn \"Direct link to testconcurrentonlyeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn-1 \"Direct link to testconcurrentonlyeachtablename-fn-1\")\n\n```\ntest.concurrent.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn \"Direct link to testonlyeachtablename-fn\")\n\n```\ntest.concurrent.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn \"Direct link to testconcurrentskipeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn-1 \"Direct link to testconcurrentskipeachtablename-fn-1\")\n\n```\ntest.concurrent.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.concurrent.skip.each`table`(name, fn)``[​](#testconcurrentskipeachtablename-fn-2 \"Direct link to testconcurrentskipeachtablename-fn-2\")\n\n```\ntest.concurrent.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.each(table)(name, fn, timeout)`[​](#testeachtablename-fn-timeout \"Direct link to testeachtablename-fn-timeout\")\n\nAlso under the alias: `it.each(table)(name, fn)` and ``it.each`table`(name, fn)``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1\\. `test.each(table)(name, fn, timeout)`[​](#1-testeachtablename-fn-timeout \"Direct link to 1-testeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%$` - Number of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n```\ntest.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.each`table`(name, fn, timeout)``[​](#2-testeachtablename-fn-timeout \"Direct link to 2-testeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.failing(name, fn, timeout)`[​](#testfailingname-fn-timeout \"Direct link to testfailingname-fn-timeout\")\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n```\ntest.failing('it is not equal', () => {  expect(5).toBe(6); // this test will pass});test.failing('it is equal', () => {  expect(10).toBe(10); // this test will fail});\n```\n\n### `test.failing.each(name, fn, timeout)`[​](#testfailingeachname-fn-timeout \"Direct link to testfailingeachname-fn-timeout\")\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and ``it.failing.each`table`(name, fn)``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n```\ntest.failing.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.only.failing(name, fn, timeout)`[​](#testonlyfailingname-fn-timeout \"Direct link to testonlyfailingname-fn-timeout\")\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`[​](#testskipfailingname-fn-timeout \"Direct link to testskipfailingname-fn-timeout\")\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`[​](#testonlyname-fn-timeout \"Direct link to testonlyname-fn-timeout\")\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nFor example, let's say you had these tests:\n\n```\ntest.only('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-1 \"Direct link to testonlyeachtablename-fn-1\")\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, ``it.only.each`table`(name, fn)`` and ``fit.each`table`(name, fn)``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-2 \"Direct link to testonlyeachtablename-fn-2\")\n\n```\ntest.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn-3 \"Direct link to testonlyeachtablename-fn-3\")\n\n```\ntest.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.skip(name, fn)`[​](#testskipname-fn \"Direct link to testskipname-fn\")\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n```\ntest('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test.skip('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn \"Direct link to testskipeachtablename-fn\")\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn-1 \"Direct link to testskipeachtablename-fn-1\")\n\n```\ntest.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.skip.each`table`(name, fn)``[​](#testskipeachtablename-fn-2 \"Direct link to testskipeachtablename-fn-2\")\n\n```\ntest.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.todo(name)`[​](#testtodoname \"Direct link to testtodoname\")\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n```\nconst add = (a, b) => a + b;test.todo('add should be associative');\n```\n\ntip\n\n`test.todo` will throw an error if you pass it a test callback function. Use [`test.skip`](#testskipname-fn) instead, if you already implemented the test, but do not want it to run.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/next/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `.each`[​](#each \"Direct link to each\")\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects[​](#array-of-objects \"Direct link to Array of objects\")\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n```\nimport {test} from '@jest/globals';test.each([  {name: 'a', path: 'path/to/a', count: 1, write: true},  {name: 'b', path: 'path/to/b', count: 3},])('inline table', ({name, path, count, write}) => {  // arguments are typed as expected, e.g. `write: boolean | undefined`});\n```\n\nOr declared separately as a variable:\n\n```\nimport {test} from '@jest/globals';const table = [  {a: 1, b: 2, expected: 'three', extra: true},  {a: 3, b: 4, expected: 'seven', extra: false},  {a: 5, b: 6, expected: 'eleven'},];test.each(table)('table as a variable', ({a, b, expected, extra}) => {  // again everything is typed as expected, e.g. `extra: boolean | undefined`});\n```\n\n#### Array of arrays[​](#array-of-arrays \"Direct link to Array of arrays\")\n\nThe array of arrays style will work smoothly with inlined tables:\n\n```\nimport {test} from '@jest/globals';test.each([  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],])('inline table example', (a, b, expected, extra) => {  // arguments are typed as expected, e.g. `extra: boolean | undefined`});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n```\nimport {test} from '@jest/globals';const table: Array<[number, number, string, boolean?]> = [  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],];test.each(table)('table as a variable example', (a, b, expected, extra) => {  // without the annotation types are incorrect, e.g. `a: number | string | boolean`});\n```\n\n#### Template literal[​](#template-literal \"Direct link to Template literal\")\n\nIf all input values are of the same type, the template literal API will type the arguments correctly:\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${3}  ${3} | ${4} | ${7}  ${5} | ${6} | ${11}`('template literal example same type', ({a, b, expected}) => {  // all arguments are of type `number` because all inputs (a, b, expected) are of type `number`});\n```\n\nIf the inputs have different types, the arguments will be typed as a union of all the input types (i.e. type of the variables inside the template literal):\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${'three'}  ${3} | ${4} | ${'seven'}  ${5} | ${6} | ${'eleven'}`('template literal example different types', ({a, b, expected}) => {  // all arguments are of type `number | string` because some inputs (a, b) are of type `number` and some others (expected) are of type `string`});\n```\n\nOtherwise, if you want each argument to have the right type, you have to explicitly provide the generic type argument:\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; b: number; expected: string; extra?: boolean}>`  a    | b    | expected    | extra  ${1} | ${2} | ${'three'}  | ${true}  ${3} | ${4} | ${'seven'}  | ${false}  ${5} | ${6} | ${'eleven'}`('template literal example', ({a, b, expected, extra}) => {  // all arguments are typed as expected, e.g. `a: number`, `expected: string`, `extra: boolean | undefined`});\n```\n\ncaution\n\nKeep in mind the variables inside the template literal are not type checked, so you have to ensure that their types are correct.\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; expected: string}>`  a                            | expected  ${1}                         | ${'one'}  ${'will not raise TS error'} | ${'two'}  ${3}                         | ${'three'}`('template literal with wrongly typed input', ({a, expected}) => {  // all arguments are typed as stated in the generic: `a: number`, `expected: string`  // WARNING: `a` is of type `number` but will be a string in the 2nd test case.});\n```",
    "title": "Globals · Jest",
    "description": "In your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do import {describe, expect, test} from '@jest/globals'.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/api",
    "markdown": "# Globals · Jest\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`afterAll(fn, timeout)`](#afterallfn-timeout)\n    *   [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n    *   [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n    *   [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n    *   [`describe(name, fn)`](#describename-fn)\n    *   [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n    *   [`describe.only(name, fn)`](#describeonlyname-fn)\n    *   [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n    *   [`describe.skip(name, fn)`](#describeskipname-fn)\n    *   [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n    *   [`test(name, fn, timeout)`](#testname-fn-timeout)\n    *   [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n    *   [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n    *   [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n    *   [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n    *   [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n    *   [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n    *   [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n    *   [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n    *   [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n    *   [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n    *   [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n    *   [`test.skip(name, fn)`](#testskipname-fn)\n    *   [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n    *   [`test.todo(name)`](#testtodoname)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`.each`](#each)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `afterAll(fn, timeout)`[​](#afterallfn-timeout \"Direct link to afterallfn-timeout\")\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterAll(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`[​](#aftereachfn-timeout \"Direct link to aftereachfn-timeout\")\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterEach(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`[​](#beforeallfn-timeout \"Direct link to beforeallfn-timeout\")\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeAll(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});// Since we only set up the database once in this example, it's important// that our tests don't modify it.test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`[​](#beforeeachfn-timeout \"Direct link to beforeeachfn-timeout\")\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeEach(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`[​](#describename-fn \"Direct link to describename-fn\")\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n```\nconst myBeverage = {  delicious: true,  sour: false,};describe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n```\nconst binaryStringToNumber = binString => {  if (!/^[01]+$/.test(binString)) {    throw new CustomError('Not a binary number.');  }  return parseInt(binString, 2);};describe('binaryStringToNumber', () => {  describe('given an invalid binary string', () => {    test('composed of non-numbers throws CustomError', () => {      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);    });    test('with extra whitespace throws CustomError', () => {      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);    });  });  describe('given a valid binary string', () => {    test('returns the correct number', () => {      expect(binaryStringToNumber('100')).toBe(4);    });  });});\n```\n\n### `describe.each(table)(name, fn, timeout)`[​](#describeeachtablename-fn-timeout \"Direct link to describeeachtablename-fn-timeout\")\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1\\. `describe.each(table)(name, fn, timeout)`[​](#1-describeeachtablename-fn-timeout \"Direct link to 1-describeeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`.\n    \n*   `name`: `String` the title of the test suite.\n    \n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments.\n    \n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n    \n\nExample:\n\n```\ndescribe.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n```\ndescribe.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n#### 2\\. ``describe.each`table`(name, fn, timeout)``[​](#2-describeeachtablename-fn-timeout \"Direct link to 2-describeeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ndescribe.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('$a + $b', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n### `describe.only(name, fn)`[​](#describeonlyname-fn \"Direct link to describeonlyname-fn\")\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n```\ndescribe.only('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe('my other beverage', () => {  // ... will be skipped});\n```\n\n### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn \"Direct link to describeonlyeachtablename-fn\")\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and ``fdescribe.each`table`(name, fn)``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn-1 \"Direct link to describeonlyeachtablename-fn-1\")\n\n```\ndescribe.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.only.each`table`(name, fn)``[​](#describeonlyeachtablename-fn-2 \"Direct link to describeonlyeachtablename-fn-2\")\n\n```\ndescribe.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('passes', () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `describe.skip(name, fn)`[​](#describeskipname-fn \"Direct link to describeskipname-fn\")\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n```\ndescribe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe.skip('my other beverage', () => {  // ... will be skipped});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn \"Direct link to describeskipeachtablename-fn\")\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and ``xdescribe.each`table`(name, fn)``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn-1 \"Direct link to describeskipeachtablename-fn-1\")\n\n```\ndescribe.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.skip.each`table`(name, fn)``[​](#describeskipeachtablename-fn-2 \"Direct link to describeskipeachtablename-fn-2\")\n\n```\ndescribe.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('will not be run', () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test(name, fn, timeout)`[​](#testname-fn-timeout \"Direct link to testname-fn-timeout\")\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n```\ntest('did not rain', () => {  expect(inchesOfRain()).toBe(0);});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nIf a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n```\ntest('has lemon in it', () => {  return fetchBeverageList().then(list => {    expect(list).toContain('lemon');  });});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves. For more details, see [Testing Asynchronous Code](https://jestjs.io/docs/asynchronous) page.\n\ntip\n\nJest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test [callbacks](https://jestjs.io/docs/asynchronous#callbacks).\n\n### `test.concurrent(name, fn, timeout)`[​](#testconcurrentname-fn-timeout \"Direct link to testconcurrentname-fn-timeout\")\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\ncaution\n\n`test.concurrent` is considered experimental - see [here](https://github.com/jestjs/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues.\n\nUse `test.concurrent` if you want the test to run concurrently.\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\n```\ntest.concurrent('addition of 2 numbers', async () => {  expect(5 + 3).toBe(8);});test.concurrent('subtraction 2 numbers', async () => {  expect(5 - 3).toBe(2);});\n```\n\ntip\n\nUse the [`maxConcurrency`](https://jestjs.io/docs/configuration#maxconcurrency-number) configuration option to prevent Jest from executing more than the specified amount of tests at the same time.\n\n### `test.concurrent.each(table)(name, fn, timeout)`[​](#testconcurrenteachtablename-fn-timeout \"Direct link to testconcurrenteachtablename-fn-timeout\")\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1\\. `test.concurrent.each(table)(name, fn, timeout)`[​](#1-testconcurrenteachtablename-fn-timeout \"Direct link to 1-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.concurrent.each`table`(name, fn, timeout)``[​](#2-testconcurrenteachtablename-fn-timeout \"Direct link to 2-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn \"Direct link to testconcurrentonlyeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn-1 \"Direct link to testconcurrentonlyeachtablename-fn-1\")\n\n```\ntest.concurrent.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn \"Direct link to testonlyeachtablename-fn\")\n\n```\ntest.concurrent.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn \"Direct link to testconcurrentskipeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn-1 \"Direct link to testconcurrentskipeachtablename-fn-1\")\n\n```\ntest.concurrent.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.concurrent.skip.each`table`(name, fn)``[​](#testconcurrentskipeachtablename-fn-2 \"Direct link to testconcurrentskipeachtablename-fn-2\")\n\n```\ntest.concurrent.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.each(table)(name, fn, timeout)`[​](#testeachtablename-fn-timeout \"Direct link to testeachtablename-fn-timeout\")\n\nAlso under the alias: `it.each(table)(name, fn)` and ``it.each`table`(name, fn)``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1\\. `test.each(table)(name, fn, timeout)`[​](#1-testeachtablename-fn-timeout \"Direct link to 1-testeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n```\ntest.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.each`table`(name, fn, timeout)``[​](#2-testeachtablename-fn-timeout \"Direct link to 2-testeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.failing(name, fn, timeout)`[​](#testfailingname-fn-timeout \"Direct link to testfailingname-fn-timeout\")\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n```\ntest.failing('it is not equal', () => {  expect(5).toBe(6); // this test will pass});test.failing('it is equal', () => {  expect(10).toBe(10); // this test will fail});\n```\n\n### `test.failing.each(name, fn, timeout)`[​](#testfailingeachname-fn-timeout \"Direct link to testfailingeachname-fn-timeout\")\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and ``it.failing.each`table`(name, fn)``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n```\ntest.failing.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.only.failing(name, fn, timeout)`[​](#testonlyfailingname-fn-timeout \"Direct link to testonlyfailingname-fn-timeout\")\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`[​](#testskipfailingname-fn-timeout \"Direct link to testskipfailingname-fn-timeout\")\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`[​](#testonlyname-fn-timeout \"Direct link to testonlyname-fn-timeout\")\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nFor example, let's say you had these tests:\n\n```\ntest.only('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-1 \"Direct link to testonlyeachtablename-fn-1\")\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, ``it.only.each`table`(name, fn)`` and ``fit.each`table`(name, fn)``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-2 \"Direct link to testonlyeachtablename-fn-2\")\n\n```\ntest.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn-3 \"Direct link to testonlyeachtablename-fn-3\")\n\n```\ntest.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.skip(name, fn)`[​](#testskipname-fn \"Direct link to testskipname-fn\")\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n```\ntest('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test.skip('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn \"Direct link to testskipeachtablename-fn\")\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn-1 \"Direct link to testskipeachtablename-fn-1\")\n\n```\ntest.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.skip.each`table`(name, fn)``[​](#testskipeachtablename-fn-2 \"Direct link to testskipeachtablename-fn-2\")\n\n```\ntest.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.todo(name)`[​](#testtodoname \"Direct link to testtodoname\")\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n```\nconst add = (a, b) => a + b;test.todo('add should be associative');\n```\n\ntip\n\n`test.todo` will throw an error if you pass it a test callback function. Use [`test.skip`](#testskipname-fn) instead, if you already implemented the test, but do not want it to run.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `.each`[​](#each \"Direct link to each\")\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects[​](#array-of-objects \"Direct link to Array of objects\")\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n```\nimport {test} from '@jest/globals';test.each([  {name: 'a', path: 'path/to/a', count: 1, write: true},  {name: 'b', path: 'path/to/b', count: 3},])('inline table', ({name, path, count, write}) => {  // arguments are typed as expected, e.g. `write: boolean | undefined`});\n```\n\nOr declared separately as a variable:\n\n```\nimport {test} from '@jest/globals';const table = [  {a: 1, b: 2, expected: 'three', extra: true},  {a: 3, b: 4, expected: 'seven', extra: false},  {a: 5, b: 6, expected: 'eleven'},];test.each(table)('table as a variable', ({a, b, expected, extra}) => {  // again everything is typed as expected, e.g. `extra: boolean | undefined`});\n```\n\n#### Array of arrays[​](#array-of-arrays \"Direct link to Array of arrays\")\n\nThe array of arrays style will work smoothly with inlined tables:\n\n```\nimport {test} from '@jest/globals';test.each([  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],])('inline table example', (a, b, expected, extra) => {  // arguments are typed as expected, e.g. `extra: boolean | undefined`});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n```\nimport {test} from '@jest/globals';const table: Array<[number, number, string, boolean?]> = [  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],];test.each(table)('table as a variable example', (a, b, expected, extra) => {  // without the annotation types are incorrect, e.g. `a: number | string | boolean`});\n```\n\n#### Template literal[​](#template-literal \"Direct link to Template literal\")\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${3}  ${3} | ${4} | ${7}  ${5} | ${6} | ${11}`('template literal example', ({a, b, expected}) => {  // all arguments are of type `number`});\n```\n\nOtherwise it will require a generic type argument:\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; b: number; expected: string; extra?: boolean}>`  a    | b    | expected    | extra  ${1} | ${2} | ${'three'}  | ${true}  ${3} | ${4} | ${'seven'}  | ${false}  ${5} | ${6} | ${'eleven'}`('template literal example', ({a, b, expected, extra}) => {  // without the generic argument in this case types would default to `unknown`});\n```",
    "title": "Globals · Jest",
    "description": "In your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do import {describe, expect, test} from '@jest/globals'.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/asynchronous",
    "markdown": "# Testing Asynchronous Code · Jest\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises[​](#promises \"Direct link to Promises\")\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n```\ntest('the data is peanut butter', () => {  return fetchData().then(data => {    expect(data).toBe('peanut butter');  });});\n```\n\n## Async/Await[​](#asyncawait \"Direct link to Async/Await\")\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n```\ntest('the data is peanut butter', async () => {  const data = await fetchData();  expect(data).toBe('peanut butter');});test('the fetch fails with an error', async () => {  expect.assertions(1);  try {    await fetchData();  } catch (error) {    expect(error).toMatch('error');  }});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n```\ntest('the data is peanut butter', async () => {  await expect(fetchData()).resolves.toBe('peanut butter');});test('the fetch fails with an error', async () => {  await expect(fetchData()).rejects.toMatch('error');});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n```\ntest('the fetch fails with an error', () => {  expect.assertions(1);  return fetchData().catch(error => expect(error).toMatch('error'));});\n```\n\n## Callbacks[​](#callbacks \"Direct link to Callbacks\")\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will _not_ work as intended:\n\n```\n// Don't do this!test('the data is peanut butter', () => {  function callback(error, data) {    if (error) {      throw error;    }    expect(data).toBe('peanut butter');  }  fetchData(callback);});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n```\ntest('the data is peanut butter', done => {  function callback(error, data) {    if (error) {      done(error);      return;    }    try {      expect(data).toBe('peanut butter');      done();    } catch (error) {      done(error);    }  }  fetchData(callback);});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\ncaution\n\nJest will throw an error, if the same test function is passed a `done()` callback and returns a promise. This is done as a precaution to avoid memory leaks in your tests.\n\n## `.resolves` / `.rejects`[​](#resolves--rejects \"Direct link to resolves--rejects\")\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n```\ntest('the data is peanut butter', () => {  return expect(fetchData()).resolves.toBe('peanut butter');});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n```\ntest('the fetch fails with an error', () => {  return expect(fetchData()).rejects.toMatch('error');});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.",
    "title": "Testing Asynchronous Code · Jest",
    "description": "It's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/jest-community",
    "markdown": "# Jest Community · Jest\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n*   [vscode-jest](https://github.com/jest-community/vscode-jest)\n*   [jest-extended](https://github.com/jest-community/jest-extended)\n*   [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n*   [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest[​](#awesome-jest \"Direct link to Awesome Jest\")\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.",
    "title": "Jest Community · Jest",
    "description": "The community around Jest is working hard to make the testing experience even greater.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/jest-platform",
    "markdown": "# Jest Platform · Jest\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files[​](#jest-changed-files \"Direct link to jest-changed-files\")\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n*   `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n*   `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example[​](#example \"Direct link to Example\")\n\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');// print the set of modified files since last commit in the current repogetChangedFilesForRoots(['./'], {  lastCommit: true,}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff[​](#jest-diff \"Direct link to jest-diff\")\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example[​](#example-1 \"Direct link to Example\")\n\n```\nconst {diff} = require('jest-diff');const a = {a: {b: {c: 5}}};const b = {a: {b: {c: 6}}};const result = diff(a, b);// print diffconsole.log(result);\n```\n\n## jest-docblock[​](#jest-docblock \"Direct link to jest-docblock\")\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example[​](#example-2 \"Direct link to Example\")\n\n```\nconst {parseWithComments} = require('jest-docblock');const code = `/** * This is a sample * * @flow */ console.log('Hello World!');`;const parsed = parseWithComments(code);// prints an object with two attributes: comments and pragmas.console.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type[​](#jest-get-type \"Direct link to jest-get-type\")\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example[​](#example-3 \"Direct link to Example\")\n\n```\nconst {getType} = require('jest-get-type');const array = [1, 2, 3];const nullValue = null;const undefinedValue = undefined;// prints 'array'console.log(getType(array));// prints 'null'console.log(getType(nullValue));// prints 'undefined'console.log(getType(undefinedValue));\n```\n\n## jest-validate[​](#jest-validate \"Direct link to jest-validate\")\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n*   `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n*   `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example[​](#example-4 \"Direct link to Example\")\n\n```\nconst {validate} = require('jest-validate');const configByUser = {  transform: '<rootDir>/node_modules/my-custom-transform',};const result = validate(configByUser, {  comment: '  Documentation: http://custom-docs.com',  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},});console.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker[​](#jest-worker \"Direct link to jest-worker\")\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example[​](#example-5 \"Direct link to Example\")\n\nheavy-task.js\n\n```\nmodule.exports = {  myHeavyTask: args => {    // long running CPU intensive task.  },};\n```\n\nmain.js\n\n```\nasync function main() {  const worker = new Worker(require.resolve('./heavy-task.js'));  // run 2 tasks in parallel with different arguments  const results = await Promise.all([    worker.myHeavyTask({foo: 'bar'}),    worker.myHeavyTask({bar: 'foo'}),  ]);  console.log(results);}main();\n```\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format[​](#pretty-format \"Direct link to pretty-format\")\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example[​](#example-6 \"Direct link to Example\")\n\n```\nconst {format: prettyFormat} = require('pretty-format');const val = {object: {}};val.circularReference = val;val[Symbol('foo')] = 'foo';val.map = new Map([['prop', 'value']]);val.array = [-0, Infinity, NaN];console.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md).",
    "title": "Jest Platform · Jest",
    "description": "You can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/setup-teardown",
    "markdown": "# Setup and Teardown · Jest\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup[​](#repeating-setup \"Direct link to Repeating Setup\")\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n```\nbeforeEach(() => {  initializeCityDatabase();});afterEach(() => {  clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](https://jestjs.io/docs/next/asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n```\nbeforeEach(() => {  return initializeCityDatabase();});\n```\n\n## One-Time Setup[​](#one-time-setup \"Direct link to One-Time Setup\")\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n```\nbeforeAll(() => {  return initializeCityDatabase();});afterAll(() => {  return clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n## Scoping[​](#scoping \"Direct link to Scoping\")\n\nThe top level `before*` and `after*` hooks apply to every test in a file. The hooks declared inside a `describe` block apply only to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n```\n// Applies to all tests in this filebeforeEach(() => {  return initializeCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});describe('matching cities to foods', () => {  // Applies only to tests in this describe block  beforeEach(() => {    return initializeFoodDatabase();  });  test('Vienna <3 veal', () => {    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);  });  test('San Juan <3 plantains', () => {    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);  });});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n```\nbeforeAll(() => console.log('1 - beforeAll'));afterAll(() => console.log('1 - afterAll'));beforeEach(() => console.log('1 - beforeEach'));afterEach(() => console.log('1 - afterEach'));test('', () => console.log('1 - test'));describe('Scoped / Nested block', () => {  beforeAll(() => console.log('2 - beforeAll'));  afterAll(() => console.log('2 - afterAll'));  beforeEach(() => console.log('2 - beforeEach'));  afterEach(() => console.log('2 - afterEach'));  test('', () => console.log('2 - test'));});// 1 - beforeAll// 1 - beforeEach// 1 - test// 1 - afterEach// 2 - beforeAll// 1 - beforeEach// 2 - beforeEach// 2 - test// 2 - afterEach// 1 - afterEach// 2 - afterAll// 1 - afterAll\n```\n\n## Order of Execution[​](#order-of-execution \"Direct link to Order of Execution\")\n\nJest executes all describe handlers in a test file _before_ it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n```\ndescribe('describe outer', () => {  console.log('describe outer-a');  describe('describe inner 1', () => {    console.log('describe inner 1');    test('test 1', () => console.log('test 1'));  });  console.log('describe outer-b');  test('test 2', () => console.log('test 2'));  describe('describe inner 2', () => {    console.log('describe inner 2');    test('test 3', () => console.log('test 3'));  });  console.log('describe outer-c');});// describe outer-a// describe inner 1// describe outer-b// describe inner 2// describe outer-c// test 1// test 2// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n```\nbeforeEach(() => console.log('connection setup'));beforeEach(() => console.log('database setup'));afterEach(() => console.log('database teardown'));afterEach(() => console.log('connection teardown'));test('test 1', () => console.log('test 1'));describe('extra', () => {  beforeEach(() => console.log('extra database setup'));  afterEach(() => console.log('extra database teardown'));  test('test 2', () => console.log('test 2'));});// connection setup// database setup// test 1// database teardown// connection teardown// connection setup// database setup// extra database setup// test 2// extra database teardown// database teardown// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n```\n  beforeEach(() => console.log('connection setup'));+ afterEach(() => console.log('connection teardown'));  beforeEach(() => console.log('database setup'));+ afterEach(() => console.log('database teardown'));- afterEach(() => console.log('database teardown'));- afterEach(() => console.log('connection teardown'));  // ...\n```\n\n## General Advice[​](#general-advice \"Direct link to General Advice\")\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n```\ntest.only('this will be the only test that runs', () => {  expect(true).toBe(false);});test('this test will not run', () => {  expect('A').toBe('A');});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.",
    "title": "Setup and Teardown · Jest",
    "description": "Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/more-resources",
    "markdown": "# More Resources · Jest\n\nVersion: Next\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs[​](#browse-the-docs \"Direct link to Browse the docs\")\n\n*   Learn about [Snapshot Testing](https://jestjs.io/docs/next/snapshot-testing), [Mock Functions](https://jestjs.io/docs/next/mock-functions), and more in our in-depth guides.\n*   Migrate your existing tests to Jest by following our [migration guide](https://jestjs.io/docs/next/migration-guide).\n*   Learn how to [configure Jest](https://jestjs.io/docs/next/configuration).\n*   Look at the full [API Reference](https://jestjs.io/docs/next/api).\n*   [Troubleshoot](https://jestjs.io/docs/next/troubleshooting) problems with Jest.\n\n## Learn by example[​](#learn-by-example \"Direct link to Learn by example\")\n\nYou will find a number of example test cases in the [`examples`](https://github.com/jestjs/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/jestjs_) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.",
    "title": "More Resources · Jest",
    "description": "By now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/upgrading-to-jest29",
    "markdown": "# From v28 to v29 · Jest\n\nUpgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.\n\ninfo\n\nSee [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for the full list of changes.\n\nnote\n\nUpgrading from an older version? You can see the upgrade guide from v27 to v28 [here](https://jestjs.io/docs/28.x/upgrading-to-jest28).\n\n## Compatibility[​](#compatibility \"Direct link to Compatibility\")\n\nThe supported Node versions are 14.15, 16.10, 18.0 and above.\n\n## Snapshot format[​](#snapshot-format \"Direct link to Snapshot format\")\n\nAs announced in the [Jest 28 blog post](https://jestjs.io/blog/2022/04/25/jest-28#future), Jest 29 has changed the default snapshot formatting to `{escapeString: false, printBasicPrototype: false}`.\n\nIf you want to keep the old behavior, you can set the `snapshotFormat` property to:\n\n```\n+ snapshotFormat: {+   escapeString: true,+   printBasicPrototype: true+ }\n```\n\n## JSDOM upgrade[​](#jsdom-upgrade \"Direct link to JSDOM upgrade\")\n\n`jest-environment-jsdom` has upgraded `jsdom` from v19 to v20.\n\ninfo\n\nIf you use `jest-environment-jsdom`, the minimum TypeScript version is set to `4.5`.\n\nNotably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `uuid` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n\n## `pretty-format`[​](#pretty-format \"Direct link to pretty-format\")\n\n`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n\n### `jest-mock`[​](#jest-mock \"Direct link to jest-mock\")\n\nExports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n\n## TypeScript[​](#typescript \"Direct link to TypeScript\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/next/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.mocked()`[​](#jestmocked \"Direct link to jestmocked\")\n\nThe [`jest.mocked()`](https://jestjs.io/docs/next/mock-function-api#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n\n```\n- const mockedObject = jest.mocked(someObject, true);+ const mockedObject = jest.mocked(someObject);\n```\n\nTo have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n\n```\n- const mockedObject = jest.mocked(someObject);+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```",
    "title": "From v28 to v29 · Jest",
    "description": "Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/cli",
    "markdown": "# Jest CLI Options · Jest\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](https://jestjs.io/docs/next/configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line[​](#running-from-the-command-line \"Direct link to Running from the command line\")\n\nRun all tests (default):\n\nRun only the tests that were specified with a pattern or filename:\n\n```\njest my-test #orjest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\nRun watch mode:\n\n```\njest --watch #runs jest -o by defaultjest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with package manager[​](#using-with-package-manager \"Direct link to Using with package manager\")\n\nIf you run Jest via your package manager, you can still pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\nyou can use:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support[​](#camelcase--dashed-args-support \"Direct link to Camelcase & dashed args support\")\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n```\njest --collect-coveragejest --collectCoverage\n```\n\nArguments can also be mixed:\n\n```\njest --update-snapshot --detectOpenHandles\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nnote\n\nCLI options take precedence over values from the [Configuration](https://jestjs.io/docs/next/configuration).\n\n*   [Camelcase & dashed args support](#camelcase--dashed-args-support)\n*   [Options](#options)\n*   [Reference](#reference)\n    *   [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n    *   [`--bail[=<n>]`](#--bailn)\n    *   [`--cache`](#--cache)\n    *   [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n    *   [`--changedSince`](#--changedsince)\n    *   [`--ci`](#--ci)\n    *   [`--clearCache`](#--clearcache)\n    *   [`--clearMocks`](#--clearmocks)\n    *   [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n    *   [`--colors`](#--colors)\n    *   [`--config=<path>`](#--configpath)\n    *   [`--coverage[=<boolean>]`](#--coverageboolean)\n    *   [`--coverageDirectory=<path>`](#--coveragedirectorypath)\n    *   [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n    *   [`--debug`](#--debug)\n    *   [`--detectOpenHandles`](#--detectopenhandles)\n    *   [`--env=<environment>`](#--envenvironment)\n    *   [`--errorOnDeprecated`](#--errorondeprecated)\n    *   [`--expand`](#--expand)\n    *   [`--filter=<file>`](#--filterfile)\n    *   [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n    *   [`--forceExit`](#--forceexit)\n    *   [`--help`](#--help)\n    *   [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n    *   [`--injectGlobals`](#--injectglobals)\n    *   [`--json`](#--json)\n    *   [`--lastCommit`](#--lastcommit)\n    *   [`--listTests`](#--listtests)\n    *   [`--logHeapUsage`](#--logheapusage)\n    *   [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n    *   [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n    *   [`--noStackTrace`](#--nostacktrace)\n    *   [`--notify`](#--notify)\n    *   [`--onlyChanged`](#--onlychanged)\n    *   [`--openHandlesTimeout=<milliseconds>`](#--openhandlestimeoutmilliseconds)\n    *   [`--outputFile=<filename>`](#--outputfilefilename)\n    *   [`--passWithNoTests`](#--passwithnotests)\n    *   [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n    *   [`--randomize`](#--randomize)\n    *   [`--reporters`](#--reporters)\n    *   [`--resetMocks`](#--resetmocks)\n    *   [`--restoreMocks`](#--restoremocks)\n    *   [`--roots`](#--roots)\n    *   [`--runInBand`](#--runinband)\n    *   [`--runTestsByPath`](#--runtestsbypath)\n    *   [`--seed=<num>`](#--seednum)\n    *   [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n    *   [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n    *   [`--shard`](#--shard)\n    *   [`--showConfig`](#--showconfig)\n    *   [`--showSeed`](#--showseed)\n    *   [`--silent`](#--silent)\n    *   [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n    *   [`--testLocationInResults`](#--testlocationinresults)\n    *   [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n    *   [`--testNamePattern=<regex>`](#--testnamepatternregex)\n    *   [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n    *   [`--testPathPatterns=<regex>`](#--testpathpatternsregex)\n    *   [`--testRunner=<path>`](#--testrunnerpath)\n    *   [`--testSequencer=<path>`](#--testsequencerpath)\n    *   [`--testTimeout=<number>`](#--testtimeoutnumber)\n    *   [`--updateSnapshot`](#--updatesnapshot)\n    *   [`--useStderr`](#--usestderr)\n    *   [`--verbose`](#--verbose)\n    *   [`--version`](#--version)\n    *   [`--waitNextEventLoopTurnForUnhandledRejectionEvents`](#--waitnexteventloopturnforunhandledrejectionevents)\n    *   [`--watch`](#--watch)\n    *   [`--watchAll`](#--watchall)\n    *   [`--watchman`](#--watchman)\n    *   [`--workerThreads`](#--workerthreads)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `jest <regexForTestFiles>`[​](#jest-regexfortestfiles \"Direct link to jest-regexfortestfiles\")\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`[​](#--bailn \"Direct link to --bailn\")\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`[​](#--cache \"Direct link to --cache\")\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`[​](#--changedfileswithancestor \"Direct link to --changedfileswithancestor\")\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`[​](#--changedsince \"Direct link to --changedsince\")\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`[​](#--ci \"Direct link to --ci\")\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`[​](#--clearcache \"Direct link to --clearcache\")\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`[​](#--clearmocks \"Direct link to --clearmocks\")\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](https://jestjs.io/docs/next/jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`[​](#--collectcoveragefromglob \"Direct link to --collectcoveragefromglob\")\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`[​](#--colors \"Direct link to --colors\")\n\nForces test results output highlighting even if stdout is not a TTY.\n\nnote\n\nAlternatively you can set the environment variable `FORCE_COLOR=true` to forcefully enable or `FORCE_COLOR=false` to disable colorized output. The use of `FORCE_COLOR` overrides all other color support checks.\n\n### `--config=<path>`[​](#--configpath \"Direct link to --configpath\")\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`[​](#--coverageboolean \"Direct link to --coverageboolean\")\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageDirectory=<path>`[​](#--coveragedirectorypath \"Direct link to --coveragedirectorypath\")\n\nThe directory where Jest should output its coverage files.\n\n### `--coverageProvider=<provider>`[​](#--coverageproviderprovider \"Direct link to --coverageproviderprovider\")\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\n### `--debug`[​](#--debug \"Direct link to --debug\")\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`[​](#--detectopenhandles \"Direct link to --detectopenhandles\")\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`[​](#--envenvironment \"Direct link to --envenvironment\")\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`[​](#--errorondeprecated \"Direct link to --errorondeprecated\")\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`[​](#--expand \"Direct link to --expand\")\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`[​](#--filterfile \"Direct link to --filterfile\")\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running and must return an object with shape `{ filtered: Array<string> }` containing the tests that should be run by Jest. Especially useful when used in conjunction with a testing infrastructure to filter known broken tests.\n\nmy-filter.js\n\n```\n// This filter when applied will only run tests ending in .spec.js (not the best way to do it, but it's just an example):const filteringFunction = testPath => testPath.endsWith('.spec.js');module.exports = testPaths => {  const allowedPaths = testPaths.filter(filteringFunction); // [\"path1.spec.js\", \"path2.spec.js\", etc]  return {    filtered: allowedPaths,  };};\n```\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`[​](#--forceexit \"Direct link to --forceexit\")\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`[​](#--help \"Direct link to --help\")\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`[​](#--ignoreprojects-project1--projectn \"Direct link to --ignoreprojects-project1--projectn\")\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--injectGlobals`[​](#--injectglobals \"Direct link to --injectglobals\")\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n```\nimport {expect, jest, test} from '@jest/globals';jest.useFakeTimers();test('some test', () => {  expect(Date.now()).toBe(0);});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`[​](#--json \"Direct link to --json\")\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`[​](#--lastcommit \"Direct link to --lastcommit\")\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`[​](#--listtests \"Direct link to --listtests\")\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`[​](#--logheapusage \"Direct link to --logheapusage\")\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`[​](#--maxconcurrencynum \"Direct link to --maxconcurrencynum\")\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`[​](#--maxworkersnumstring \"Direct link to --maxworkersnumstring\")\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`[​](#--nostacktrace \"Direct link to --nostacktrace\")\n\nDisables stack trace in test results output.\n\n### `--notify`[​](#--notify \"Direct link to --notify\")\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`[​](#--onlychanged \"Direct link to --onlychanged\")\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--openHandlesTimeout=<milliseconds>`[​](#--openhandlestimeoutmilliseconds \"Direct link to --openhandlestimeoutmilliseconds\")\n\nWhen `--detectOpenHandles` and `--forceExit` are _disabled_, Jest will print a warning if the process has not exited cleanly after this number of milliseconds. A value of `0` disables the warning. Defaults to `1000`.\n\n### `--outputFile=<filename>`[​](#--outputfilefilename \"Direct link to --outputfilefilename\")\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](https://jestjs.io/docs/next/configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`[​](#--passwithnotests \"Direct link to --passwithnotests\")\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`[​](#--projects-path1--pathn \"Direct link to --projects-path1--pathn\")\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](https://jestjs.io/docs/next/configuration#projects-arraystring--projectconfig) configuration option.\n\nnote\n\nIf configuration files are found in the specified paths, _all_ projects specified within those configuration files will be run.\n\n### `--randomize`[​](#--randomize \"Direct link to --randomize\")\n\nShuffle the order of the tests within a file. The shuffling is based on the seed. See [`--seed=<num>`](#--seednum) for more info.\n\nSeed value is displayed when this option is set. Equivalent to setting the CLI option [`--showSeed`](#--showseed).\n\n```\njest --randomize --seed 1234\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--reporters`[​](#--reporters \"Direct link to --reporters\")\n\nRun tests with specified reporters. [Reporter options](https://jestjs.io/docs/next/configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`[​](#--resetmocks \"Direct link to --resetmocks\")\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](https://jestjs.io/docs/next/jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`[​](#--restoremocks \"Direct link to --restoremocks\")\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](https://jestjs.io/docs/next/jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`[​](#--roots \"Direct link to --roots\")\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`[​](#--runinband \"Direct link to --runinband\")\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`[​](#--runtestsbypath \"Direct link to --runtestsbypath\")\n\nRun only the tests that were specified with their exact paths. This avoids converting them into a regular expression and matching it against every single file.\n\nFor example, given the following file structure:\n\n```\n__tests__└── t1.test.js # test└── t2.test.js # test\n```\n\nWhen ran with a pattern, no test is found:\n\n```\njest --runTestsByPath __tests__/t\n```\n\nOutput:\n\nHowever, passing an exact path will execute only the given test:\n\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\nOutput:\n\n```\nPASS __tests__/t1.test.js\n```\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--seed=<num>`[​](#--seednum \"Direct link to --seednum\")\n\nSets a seed value that can be retrieved in a test file via [`jest.getSeed()`](https://jestjs.io/docs/next/jest-object#jestgetseed). The seed value must be between `-0x80000000` and `0x7fffffff` inclusive (`-2147483648` (`-(2 ** 31)`) and `2147483647` (`2 ** 31 - 1`) in decimal).\n\ntip\n\nIf this option is not specified Jest will randomly generate the value. You can use the [`--showSeed`](#--showseed) flag to print the seed in the test report summary.\n\n### `--selectProjects <project1> ... <projectN>`[​](#--selectprojects-project1--projectn \"Direct link to --selectprojects-project1--projectn\")\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`[​](#--setupfilesafterenv-path1--pathn \"Direct link to --setupfilesafterenv-path1--pathn\")\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`[​](#--shard \"Direct link to --shard\")\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](https://jestjs.io/docs/next/configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n```\njest --shard=1/3jest --shard=2/3jest --shard=3/3\n```\n\n### `--showConfig`[​](#--showconfig \"Direct link to --showconfig\")\n\nPrint your Jest config and then exits.\n\n### `--showSeed`[​](#--showseed \"Direct link to --showseed\")\n\nPrints the seed value in the test report summary. See [`--seed=<num>`](#--seednum) for the details.\n\nCan also be set in configuration. See [`showSeed`](https://jestjs.io/docs/next/configuration#showseed-boolean).\n\n### `--silent`[​](#--silent \"Direct link to --silent\")\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`[​](#--testenvironmentoptionsjson-string \"Direct link to --testenvironmentoptionsjson-string\")\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`[​](#--testlocationinresults \"Direct link to --testlocationinresults\")\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nnote\n\nIn the resulting object `column` is 0-indexed while `line` is not.\n\n```\n{  \"column\": 4,  \"line\": 5}\n```\n\n### `--testMatch glob1 ... globN`[​](#--testmatch-glob1--globn \"Direct link to --testmatch-glob1--globn\")\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](https://jestjs.io/docs/next/configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`[​](#--testnamepatternregex \"Direct link to --testnamepatternregex\")\n\nAlias: `-t`. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like `'GET /api/posts with auth'`, then you can use `jest -t=auth`.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`[​](#--testpathignorepatternsregexarray \"Direct link to --testpathignorepatternsregexarray\")\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPatterns`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPatterns=<regex>`[​](#--testpathpatternsregex \"Direct link to --testpathpatternsregex\")\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`[​](#--testrunnerpath \"Direct link to --testrunnerpath\")\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`[​](#--testsequencerpath \"Direct link to --testsequencerpath\")\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](https://jestjs.io/docs/next/configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`[​](#--testtimeoutnumber \"Direct link to --testtimeoutnumber\")\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`[​](#--updatesnapshot \"Direct link to --updatesnapshot\")\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`[​](#--usestderr \"Direct link to --usestderr\")\n\nDivert all output to stderr.\n\n### `--verbose`[​](#--verbose \"Direct link to --verbose\")\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`[​](#--version \"Direct link to --version\")\n\nAlias: `-v`. Print the version and exit.\n\n### `--waitNextEventLoopTurnForUnhandledRejectionEvents`[​](#--waitnexteventloopturnforunhandledrejectionevents \"Direct link to --waitnexteventloopturnforunhandledrejectionevents\")\n\nGives one event loop turn to handle `rejectionHandled`, `uncaughtException` or `unhandledRejection`.\n\nWithout this flag Jest may report false-positive errors (e.g. actually handled rejection reported) or not report actually unhandled rejection (or report it for different test case).\n\nThis option may add a noticeable overhead for fast test suites.\n\n### `--watch`[​](#--watch \"Direct link to --watch\")\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\ntip\n\nUse `--no-watch` (or `--watch=false`) to explicitly disable the watch mode if it was enabled using `--watch`. In most CI environments, this is automatically handled for you.\n\n### `--watchAll`[​](#--watchall \"Direct link to --watchall\")\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\ntip\n\nUse `--no-watchAll` (or `--watchAll=false`) to explicitly disable the watch mode if it was enabled using `--watchAll`. In most CI environments, this is automatically handled for you.\n\n### `--watchman`[​](#--watchman \"Direct link to --watchman\")\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n### `--workerThreads`[​](#--workerthreads \"Direct link to --workerthreads\")\n\nWhether to use [worker threads](https://nodejs.org/dist/latest/docs/api/worker_threads.html) for parallelization. [Child processes](https://nodejs.org/dist/latest/docs/api/child_process.html) are used by default.",
    "title": "Jest CLI Options · Jest",
    "description": "The jest command line runner has a number of useful options. You can run jest --help to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's Configuration options can also be specified through the CLI.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/tutorial-react",
    "markdown": "# Testing React Apps · Jest\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Setup with Create React App[​](#setup-with-create-react-app \"Direct link to Setup with Create React App\")\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev react-test-renderer\n```\n\n### Setup without Create React App[​](#setup-without-create-react-app \"Direct link to Setup without Create React App\")\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](https://jestjs.io/docs/next/getting-started#using-babel).\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n```\n{  \"dependencies\": {    \"react\": \"<current-version>\",    \"react-dom\": \"<current-version>\"  },  \"devDependencies\": {    \"@babel/preset-env\": \"<current-version>\",    \"@babel/preset-react\": \"<current-version>\",    \"babel-jest\": \"<current-version>\",    \"jest\": \"<current-version>\",    \"react-test-renderer\": \"<current-version>\"  },  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    '@babel/preset-env',    ['@babel/preset-react', {runtime: 'automatic'}],  ],};\n```\n\n**And you're good to go!**\n\n### Snapshot Testing[​](#snapshot-testing \"Direct link to Snapshot Testing\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/next/snapshot-testing) for a Link component that renders hyperlinks:\n\nLink.js\n\n```\nimport {useState} from 'react';const STATUS = {  HOVERED: 'hovered',  NORMAL: 'normal',};export default function Link({page, children}) {  const [status, setStatus] = useState(STATUS.NORMAL);  const onMouseEnter = () => {    setStatus(STATUS.HOVERED);  };  const onMouseLeave = () => {    setStatus(STATUS.NORMAL);  };  return (    <a      className={status}      href={page || '#'}      onMouseEnter={onMouseEnter}      onMouseLeave={onMouseLeave}    >      {children}    </a>  );}\n```\n\nnote\n\nExamples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\nLink.test.js\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('changes the class when hovered', () => {  const component = renderer.create(    <Link page=\"http://www.facebook.com\">Facebook</Link>,  );  let tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseEnter();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseLeave();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\n```\nexports[`changes the class when hovered 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 2`] = `<a  className=\"hovered\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 3`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/jestjs/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+[​](#snapshot-testing-with-mocks-enzyme-and-react-16 \"Direct link to Snapshot Testing with Mocks, Enzyme and React 16+\")\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.# Or:Warning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n    \n    ```\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n    \n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n    \n    ```\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n    \n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n4.  Disable warnings all together (should be done in your jest setup file):\n    \n    ```\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n    \n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing[​](#dom-testing \"Direct link to DOM Testing\")\n\nIf you'd like to assert, and manipulate your rendered components you can use [@testing-library/react](https://github.com/testing-library/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following example use `@testing-library/react`.\n\n#### @testing-library/react[​](#testing-libraryreact \"Direct link to @testing-library/react\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\nCheckboxWithLabel.js\n\n```\nimport {useState} from 'react';export default function CheckboxWithLabel({labelOn, labelOff}) {  const [isChecked, setIsChecked] = useState(false);  const onChange = () => {    setIsChecked(!isChecked);  };  return (    <label>      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />      {isChecked ? labelOn : labelOff}    </label>  );}\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';import CheckboxWithLabel from '../CheckboxWithLabel';// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher// unmount and cleanup DOM after the test is finished.afterEach(cleanup);it('CheckboxWithLabel changes the text after click', () => {  const {queryByLabelText, getByLabelText} = render(    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,  );  expect(queryByLabelText(/off/i)).toBeTruthy();  fireEvent.click(getByLabelText(/off/i));  expect(queryByLabelText(/on/i)).toBeTruthy();});\n```\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/jestjs/jest/tree/main/examples/react-testing-library).\n\n### Custom transformers[​](#custom-transformers \"Direct link to Custom transformers\")\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\ncustom-transformer.js\n\n```\n'use strict';const {transform} = require('@babel/core');const jestPreset = require('babel-preset-jest');module.exports = {  process(src, filename) {    const result = transform(src, {      filename,      presets: [jestPreset],    });    return result || src;  },};\n```\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n```\nconst babelJest = require('babel-jest');module.exports = babelJest.createTransformer({  presets: ['my-custom-preset'],});\n```\n\nSee [dedicated docs](https://jestjs.io/docs/next/code-transformation#writing-custom-transformers) for more details.",
    "title": "Testing React Apps · Jest",
    "description": "At Facebook, we use Jest to test React applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/webpack",
    "markdown": "# Using with webpack · Jest\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack _does_ offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example[​](#a-webpack-example \"Direct link to A webpack example\")\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\nwebpack.config.js\n\n```\nmodule.exports = {  module: {    rules: [      {        test: /\\.jsx?$/,        exclude: ['node_modules'],        use: ['babel-loader'],      },      {        test: /\\.css$/,        use: ['style-loader', 'css-loader'],      },      {        test: /\\.gif$/,        type: 'asset/inline',      },      {        test: /\\.(ttf|eot|svg)$/,        type: 'asset/resource',      },    ],  },  resolve: {    alias: {      config$: './configs/app-config.js',      react: './vendor/react-master',    },    extensions: ['.js', '.jsx'],    modules: [      'node_modules',      'bower_components',      'shared',      '/shared/vendor/modules',    ],  },};\n```\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](https://jestjs.io/docs/next/getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](https://jestjs.io/docs/next/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets[​](#handling-static-assets \"Direct link to Handling Static Assets\")\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\njest.config.js\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',  },};\n```\n\nAnd the mock files themselves:\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n```\nmodule.exports = 'test-file-stub';\n```\n\n### Mocking CSS Modules[​](#mocking-css-modules \"Direct link to Mocking CSS Modules\")\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](https://jestjs.io/docs/next/snapshot-testing).\n\njest.config.js (for CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': 'identity-obj-proxy',  },};\n```\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](https://jestjs.io/docs/next/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js (for custom transformers and CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(css|less)$': 'identity-obj-proxy',  },  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n### Configuring Jest to find our files[​](#configuring-jest-to-find-our-files \"Direct link to Configuring Jest to find our files\")\n\nNow that Jest knows how to process our files, we need to tell it how to _find_ them. For webpack's `modules`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\njest.config.js\n\n```\nmodule.exports = {  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nnote\n\n`<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom [`rootDir`](https://jestjs.io/docs/next/configuration#rootdir-string) option in your configuration.\n\nSimilarly, Jest's counterpart for Webpack's `resolve.roots` (an alternative to setting `NODE_PATH`) is `modulePaths`.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',    '^react(.*)$': '<rootDir>/vendor/react-master$1',    '^config$': '<rootDir>/configs/app-config.js',  },};\n```\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n## Using with webpack[​](#using-with-webpack \"Direct link to Using with webpack\")\n\nIn addition to installing `babel-jest` as described earlier, you'll need to add `@babel/preset-env` like so:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-env\n```\n\nThen, you'll want to configure Babel as follows:\n\n.babelrc\n\n```\n{  \"presets\": [\"@babel/preset-env\"]}\n```\n\ntip\n\nJest caches files to speed up test execution. If you updated `.babelrc` and Jest is not working as expected, try clearing the cache by running `jest --clearCache`.\n\ntip\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n.babelrc\n\n```\n{  \"presets\": [[\"env\", {\"modules\": false}]],  \"plugins\": [\"syntax-dynamic-import\"],  \"env\": {    \"test\": {      \"plugins\": [\"dynamic-import-node\"]    }  }}\n```\n\nFor an example of how to use Jest with webpack with React, you can view one [here](https://github.com/jenniferabowd/jest_webpack_example).",
    "title": "Using with webpack · Jest",
    "description": "Jest can be used in projects that use webpack to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/using-matchers",
    "markdown": "# Using Matchers · Jest\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](https://jestjs.io/docs/expect).\n\n## Common Matchers[​](#common-matchers \"Direct link to Common Matchers\")\n\nThe simplest way to test a value is with exact equality.\n\n```\ntest('two plus two is four', () => {  expect(2 + 2).toBe(4);});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual`:\n\n```\ntest('object assignment', () => {  const data = {one: 1};  data['two'] = 2;  expect(data).toEqual({one: 1, two: 2});});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\ntip\n\n`toEqual` ignores object keys with `undefined` properties, `undefined` array items, array sparseness, or object type mismatch. To take these into account use `toStrictEqual` instead.\n\nYou can also test for the opposite of a matcher using `not`:\n\n```\ntest('adding positive numbers is not zero', () => {  for (let a = 1; a < 10; a++) {    for (let b = 1; b < 10; b++) {      expect(a + b).not.toBe(0);    }  }});\n```\n\n## Truthiness[​](#truthiness \"Direct link to Truthiness\")\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n*   `toBeNull` matches only `null`\n*   `toBeUndefined` matches only `undefined`\n*   `toBeDefined` is the opposite of `toBeUndefined`\n*   `toBeTruthy` matches anything that an `if` statement treats as true\n*   `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n```\ntest('null', () => {  const n = null;  expect(n).toBeNull();  expect(n).toBeDefined();  expect(n).not.toBeUndefined();  expect(n).not.toBeTruthy();  expect(n).toBeFalsy();});test('zero', () => {  const z = 0;  expect(z).not.toBeNull();  expect(z).toBeDefined();  expect(z).not.toBeUndefined();  expect(z).not.toBeTruthy();  expect(z).toBeFalsy();});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers[​](#numbers \"Direct link to Numbers\")\n\nMost ways of comparing numbers have matcher equivalents.\n\n```\ntest('two plus two', () => {  const value = 2 + 2;  expect(value).toBeGreaterThan(3);  expect(value).toBeGreaterThanOrEqual(3.5);  expect(value).toBeLessThan(5);  expect(value).toBeLessThanOrEqual(4.5);  // toBe and toEqual are equivalent for numbers  expect(value).toBe(4);  expect(value).toEqual(4);});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n```\ntest('adding floating point numbers', () => {  const value = 0.1 + 0.2;  //expect(value).toBe(0.3);           This won't work because of rounding error  expect(value).toBeCloseTo(0.3); // This works.});\n```\n\n## Strings[​](#strings \"Direct link to Strings\")\n\nYou can check strings against regular expressions with `toMatch`:\n\n```\ntest('there is no I in team', () => {  expect('team').not.toMatch(/I/);});test('but there is a \"stop\" in Christoph', () => {  expect('Christoph').toMatch(/stop/);});\n```\n\n## Arrays and iterables[​](#arrays-and-iterables \"Direct link to Arrays and iterables\")\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n```\nconst shoppingList = [  'diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];test('the shopping list has milk on it', () => {  expect(shoppingList).toContain('milk');  expect(new Set(shoppingList)).toContain('milk');});\n```\n\n## Exceptions[​](#exceptions \"Direct link to Exceptions\")\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n```\nfunction compileAndroidCode() {  throw new Error('you are using the wrong JDK!');}test('compiling android goes as expected', () => {  expect(() => compileAndroidCode()).toThrow();  expect(() => compileAndroidCode()).toThrow(Error);  // You can also use a string that must be contained in the error message or a regexp  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');  expect(() => compileAndroidCode()).toThrow(/JDK/);  // Or you can match an exact error message using a regexp like below  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass});\n```\n\ntip\n\nThe function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More[​](#and-more \"Direct link to And More\")\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](https://jestjs.io/docs/asynchronous).",
    "title": "Using Matchers · Jest",
    "description": "Jest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/mock-function-api",
    "markdown": "# Mock Functions · Jest\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/next/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`mockFn.getMockName()`](#mockfngetmockname)\n    *   [`mockFn.mock.calls`](#mockfnmockcalls)\n    *   [`mockFn.mock.results`](#mockfnmockresults)\n    *   [`mockFn.mock.instances`](#mockfnmockinstances)\n    *   [`mockFn.mock.contexts`](#mockfnmockcontexts)\n    *   [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n    *   [`mockFn.mockClear()`](#mockfnmockclear)\n    *   [`mockFn.mockReset()`](#mockfnmockreset)\n    *   [`mockFn.mockRestore()`](#mockfnmockrestore)\n    *   [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n    *   [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n    *   [`mockFn.mockName(name)`](#mockfnmocknamename)\n    *   [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n    *   [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n    *   [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n    *   [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n    *   [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n    *   [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n    *   [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n    *   [`mockFn.withImplementation(fn, callback)`](#mockfnwithimplementationfn-callback)\n*   [Replaced Properties](#replaced-properties)\n    *   [`replacedProperty.replaceValue(value)`](#replacedpropertyreplacevaluevalue)\n    *   [`replacedProperty.restore()`](#replacedpropertyrestore)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`jest.fn(implementation?)`](#jestfnimplementation)\n    *   [`jest.Mock<T>`](#jestmockt)\n    *   [`jest.Mocked<Source>`](#jestmockedsource)\n    *   [`jest.Replaced<Source>`](#jestreplacedsource)\n    *   [`jest.mocked(source, options?)`](#jestmockedsource-options)\n    *   [`jest.Spied<Source>`](#jestspiedsource)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `mockFn.getMockName()`[​](#mockfngetmockname \"Direct link to mockfngetmockname\")\n\nReturns the mock name string set by calling [`.mockName()`](#mockfnmocknamename).\n\n### `mockFn.mock.calls`[​](#mockfnmockcalls \"Direct link to mockfnmockcalls\")\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n```\n[  ['arg1', 'arg2'],  ['arg3', 'arg4'],];\n```\n\n### `mockFn.mock.results`[​](#mockfnmockresults \"Direct link to mockfnmockresults\")\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n*   `'return'` - Indicates that the call completed by returning normally.\n*   `'throw'` - Indicates that the call completed by throwing a value.\n*   `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n```\n[  {    type: 'return',    value: 'result1',  },  {    type: 'throw',    value: {      /* Error instance */    },  },  {    type: 'return',    value: 'result2',  },];\n```\n\n### `mockFn.mock.instances`[​](#mockfnmockinstances \"Direct link to mockfnmockinstances\")\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n```\nconst mockFn = jest.fn();const a = new mockFn();const b = new mockFn();mockFn.mock.instances[0] === a; // truemockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`[​](#mockfnmockcontexts \"Direct link to mockfnmockcontexts\")\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n```\nconst mockFn = jest.fn();const boundMockFn = mockFn.bind(thisContext0);boundMockFn('a', 'b');mockFn.call(thisContext1, 'a', 'b');mockFn.apply(thisContext2, ['a', 'b']);mockFn.mock.contexts[0] === thisContext0; // truemockFn.mock.contexts[1] === thisContext1; // truemockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`[​](#mockfnmocklastcall \"Direct link to mockfnmocklastcall\")\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n### `mockFn.mockClear()`[​](#mockfnmockclear \"Direct link to mockfnmockclear\")\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nThe [`clearMocks`](https://jestjs.io/docs/next/configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\ncaution\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\n### `mockFn.mockReset()`[​](#mockfnmockreset \"Direct link to mockfnmockreset\")\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also replaces the mock implementation with an empty function, returning `undefined`.\n\nThe [`resetMocks`](https://jestjs.io/docs/next/configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`[​](#mockfnmockrestore \"Direct link to mockfnmockrestore\")\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nThe [`restoreMocks`](https://jestjs.io/docs/next/configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\ninfo\n\n`mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\n### `mockFn.mockImplementation(fn)`[​](#mockfnmockimplementationfn \"Direct link to mockfnmockimplementationfn\")\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);mockFn(0); // 42mockFn(1); // 43mockFn.mockImplementation(scalar => 36 + scalar);mockFn(2); // 38mockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n*   JavaScript\n*   TypeScript\n\nSomeClass.js\n\n```\nmodule.exports = class SomeClass {  method(a, b) {}};\n```\n\nSomeClass.test.js\n\n```\nconst SomeClass = require('./SomeClass');jest.mock('./SomeClass'); // this happens automatically with automockingconst mockMethod = jest.fn();SomeClass.mockImplementation(() => {  return {    method: mockMethod,  };});const some = new SomeClass();some.method('a', 'b');console.log('Calls to method:', mockMethod.mock.calls);\n```\n\n### `mockFn.mockImplementationOnce(fn)`[​](#mockfnmockimplementationoncefn \"Direct link to mockfnmockimplementationoncefn\")\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));mockFn((err, val) => console.log(val)); // truemockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n```\nconst mockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`[​](#mockfnmocknamename \"Direct link to mockfnmocknamename\")\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n```\nconst mockFn = jest.fn().mockName('mockedFunction');// mockFn();expect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n```\nexpect(mockedFunction).toHaveBeenCalled()Expected number of calls: >= 1Received number of calls:    0\n```\n\n### `mockFn.mockReturnThis()`[​](#mockfnmockreturnthis \"Direct link to mockfnmockreturnthis\")\n\nShorthand for:\n\n```\njest.fn(function () {  return this;});\n```\n\n### `mockFn.mockReturnValue(value)`[​](#mockfnmockreturnvaluevalue \"Direct link to mockfnmockreturnvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => value);\n```\n\nAccepts a value that will be returned whenever the mock function is called.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mock = jest.fn();mock.mockReturnValue(42);mock(); // 42mock.mockReturnValue(43);mock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`[​](#mockfnmockreturnvalueoncevalue \"Direct link to mockfnmockreturnvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockReturnValue('default')  .mockReturnValueOnce('first call')  .mockReturnValueOnce('second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`[​](#mockfnmockresolvedvaluevalue \"Direct link to mockfnmockresolvedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest.fn().mockResolvedValue(43);  await asyncMock(); // 43});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`[​](#mockfnmockresolvedvalueoncevalue \"Direct link to mockfnmockresolvedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValue('default')    .mockResolvedValueOnce('first call')    .mockResolvedValueOnce('second call');  await asyncMock(); // 'first call'  await asyncMock(); // 'second call'  await asyncMock(); // 'default'  await asyncMock(); // 'default'});\n```\n\n### `mockFn.mockRejectedValue(value)`[​](#mockfnmockrejectedvaluevalue \"Direct link to mockfnmockrejectedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockRejectedValue(new Error('Async error message'));  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`[​](#mockfnmockrejectedvalueoncevalue \"Direct link to mockfnmockrejectedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValueOnce('first call')    .mockRejectedValueOnce(new Error('Async error message'));  await asyncMock(); // 'first call'  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.withImplementation(fn, callback)`[​](#mockfnwithimplementationfn-callback \"Direct link to mockfnwithimplementationfn-callback\")\n\nAccepts a function which should be temporarily used as the implementation of the mock while the callback is being executed.\n\n```\ntest('test', () => {  const mock = jest.fn(() => 'outside callback');  mock.withImplementation(    () => 'inside callback',    () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n`mockFn.withImplementation` can be used regardless of whether or not the callback is asynchronous (returns a `thenable`). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation.\n\n```\ntest('async test', async () => {  const mock = jest.fn(() => 'outside callback');  // We await this call since the callback is async  await mock.withImplementation(    () => 'inside callback',    async () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n## Replaced Properties[​](#replaced-properties \"Direct link to Replaced Properties\")\n\n### `replacedProperty.replaceValue(value)`[​](#replacedpropertyreplacevaluevalue \"Direct link to replacedpropertyreplacevaluevalue\")\n\nChanges the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call [`jest.replaceProperty()`](https://jestjs.io/docs/next/jest-object#jestreplacepropertyobject-propertykey-value) multiple times on same property.\n\n### `replacedProperty.restore()`[​](#replacedpropertyrestore \"Direct link to replacedpropertyrestore\")\n\nRestores object's property to the original value.\n\nBeware that `replacedProperty.restore()` only works when the property value was replaced with [`jest.replaceProperty()`](https://jestjs.io/docs/next/jest-object#jestreplacepropertyobject-propertykey-value).\n\nThe [`restoreMocks`](https://jestjs.io/docs/next/configuration#restoremocks-boolean) configuration option is available to restore replaced properties automatically before each test.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/next/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`[​](#jestfnimplementation \"Direct link to jestfnimplementation\")\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](https://jestjs.io/docs/next/jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n```\nimport {expect, jest, test} from '@jest/globals';import type add from './add';import calculate from './calc';test('calculate calls add', () => {  // Create a new mock that can be used in place of `add`.  const mockAdd = jest.fn<typeof add>();  // `.mockImplementation()` now can infer that `a` and `b` are `number`  // and that the returned value is a `number`.  mockAdd.mockImplementation((a, b) => {    // Yes, this mock is still adding two numbers but imagine this    // was a complex function we are mocking.    return a + b;  });  // `mockAdd` is properly typed and therefore accepted by anything  // requiring `add`.  calculate(mockAdd, 1, 2);  expect(mockAdd).toHaveBeenCalledTimes(1);  expect(mockAdd).toHaveBeenCalledWith(1, 2);});\n```\n\n### `jest.Mock<T>`[​](#jestmockt \"Direct link to jestmockt\")\n\nConstructs the type of a mock function, e.g. the return type of `jest.fn()`. It can be useful if you have to defined a recursive mock function:\n\n```\nimport {jest} from '@jest/globals';const sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {  if (value === 0) {    return 0;  } else {    return value + fn(value - 1);  }});\n```\n\n### `jest.Mocked<Source>`[​](#jestmockedsource \"Direct link to jestmockedsource\")\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n```\nimport {expect, jest, test} from '@jest/globals';import type {fetch} from 'node-fetch';jest.mock('node-fetch');let mockedFetch: jest.Mocked<typeof fetch>;afterEach(() => {  mockedFetch.mockClear();});test('makes correct call', () => {  mockedFetch = getMockedFetch();  // ...});test('returns correct data', () => {  mockedFetch = getMockedFetch();  // ...});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.Replaced<Source>`[​](#jestreplacedsource \"Direct link to jestreplacedsource\")\n\nThe `jest.Replaced<Source>` utility type returns the `Source` type wrapped with type definitions of Jest [replaced property](#replaced-properties).\n\nsrc/utils.ts\n\n```\nexport function isLocalhost(): boolean {  return process.env['HOSTNAME'] === 'localhost';}\n```\n\nsrc/\\_\\_tests\\_\\_/utils.test.ts\n\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';import {isLocalhost} from '../utils';let replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;afterEach(() => {  replacedEnv?.restore();});it('isLocalhost should detect localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});  expect(isLocalhost()).toBe(true);});it('isLocalhost should detect non-localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});  expect(isLocalhost()).toBe(false);});\n```\n\n### `jest.mocked(source, options?)`[​](#jestmockedsource-options \"Direct link to jestmockedsource-options\")\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\nsong.ts\n\n```\nexport const song = {  one: {    more: {      time: (t: number) => {        return t;      },    },  },};\n```\n\nsong.test.ts\n\n```\nimport {expect, jest, test} from '@jest/globals';import {song} from './song';jest.mock('./song');jest.spyOn(console, 'log');const mockedSong = jest.mocked(song);// or through `jest.Mocked<Source>`// const mockedSong = song as jest.Mocked<typeof song>;test('deep method is typed correctly', () => {  mockedSong.one.more.time.mockReturnValue(12);  expect(mockedSong.one.more.time(10)).toBe(12);  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);});test('direct usage', () => {  jest.mocked(console.log).mockImplementation(() => {    return;  });  console.log('one more time');  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);});\n```\n\n### `jest.Spied<Source>`[​](#jestspiedsource \"Direct link to jestspiedsource\")\n\nConstructs the type of a spied class or function (i.e. the return type of `jest.spyOn()`).\n\n\\_\\_utils\\_\\_/setDateNow.ts\n\n```\nimport {jest} from '@jest/globals';export function setDateNow(now: number): jest.Spied<typeof Date.now> {  return jest.spyOn(Date, 'now').mockReturnValue(now);}\n```\n\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';import {setDateNow} from './__utils__/setDateNow';let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;afterEach(() => {  spiedDateNow?.mockReset();});test('renders correctly with a given date', () => {  spiedDateNow = setDateNow(1_482_363_367_071);  // ...  expect(spiedDateNow).toHaveBeenCalledTimes(1);});\n```\n\nTypes of a class or function can be passed as type argument to `jest.Spied<Source>`. If you prefer to constrain the input type, use: `jest.SpiedClass<Source>` or `jest.SpiedFunction<Source>`.\n\nUse `jest.SpiedGetter<Source>` or `jest.SpiedSetter<Source>` to create the type of a spied getter or setter respectively.",
    "title": "Mock Functions · Jest",
    "description": "Mock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with jest.fn(). If no implementation is given, the mock function will return undefined when invoked.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/setup-teardown",
    "markdown": "# Setup and Teardown · Jest\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup[​](#repeating-setup \"Direct link to Repeating Setup\")\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n```\nbeforeEach(() => {  initializeCityDatabase();});afterEach(() => {  clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](https://jestjs.io/docs/asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n```\nbeforeEach(() => {  return initializeCityDatabase();});\n```\n\n## One-Time Setup[​](#one-time-setup \"Direct link to One-Time Setup\")\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n```\nbeforeAll(() => {  return initializeCityDatabase();});afterAll(() => {  return clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n## Scoping[​](#scoping \"Direct link to Scoping\")\n\nThe top level `before*` and `after*` hooks apply to every test in a file. The hooks declared inside a `describe` block apply only to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n```\n// Applies to all tests in this filebeforeEach(() => {  return initializeCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});describe('matching cities to foods', () => {  // Applies only to tests in this describe block  beforeEach(() => {    return initializeFoodDatabase();  });  test('Vienna <3 veal', () => {    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);  });  test('San Juan <3 plantains', () => {    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);  });});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n```\nbeforeAll(() => console.log('1 - beforeAll'));afterAll(() => console.log('1 - afterAll'));beforeEach(() => console.log('1 - beforeEach'));afterEach(() => console.log('1 - afterEach'));test('', () => console.log('1 - test'));describe('Scoped / Nested block', () => {  beforeAll(() => console.log('2 - beforeAll'));  afterAll(() => console.log('2 - afterAll'));  beforeEach(() => console.log('2 - beforeEach'));  afterEach(() => console.log('2 - afterEach'));  test('', () => console.log('2 - test'));});// 1 - beforeAll// 1 - beforeEach// 1 - test// 1 - afterEach// 2 - beforeAll// 1 - beforeEach// 2 - beforeEach// 2 - test// 2 - afterEach// 1 - afterEach// 2 - afterAll// 1 - afterAll\n```\n\n## Order of Execution[​](#order-of-execution \"Direct link to Order of Execution\")\n\nJest executes all describe handlers in a test file _before_ it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n```\ndescribe('describe outer', () => {  console.log('describe outer-a');  describe('describe inner 1', () => {    console.log('describe inner 1');    test('test 1', () => console.log('test 1'));  });  console.log('describe outer-b');  test('test 2', () => console.log('test 2'));  describe('describe inner 2', () => {    console.log('describe inner 2');    test('test 3', () => console.log('test 3'));  });  console.log('describe outer-c');});// describe outer-a// describe inner 1// describe outer-b// describe inner 2// describe outer-c// test 1// test 2// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n```\nbeforeEach(() => console.log('connection setup'));beforeEach(() => console.log('database setup'));afterEach(() => console.log('database teardown'));afterEach(() => console.log('connection teardown'));test('test 1', () => console.log('test 1'));describe('extra', () => {  beforeEach(() => console.log('extra database setup'));  afterEach(() => console.log('extra database teardown'));  test('test 2', () => console.log('test 2'));});// connection setup// database setup// test 1// database teardown// connection teardown// connection setup// database setup// extra database setup// test 2// extra database teardown// database teardown// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n```\n  beforeEach(() => console.log('connection setup'));+ afterEach(() => console.log('connection teardown'));  beforeEach(() => console.log('database setup'));+ afterEach(() => console.log('database teardown'));- afterEach(() => console.log('database teardown'));- afterEach(() => console.log('connection teardown'));  // ...\n```\n\n## General Advice[​](#general-advice \"Direct link to General Advice\")\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n```\ntest.only('this will be the only test that runs', () => {  expect(true).toBe(false);});test('this test will not run', () => {  expect('A').toBe('A');});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.",
    "title": "Setup and Teardown · Jest",
    "description": "Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/asynchronous",
    "markdown": "# Testing Asynchronous Code · Jest\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises[​](#promises \"Direct link to Promises\")\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n```\ntest('the data is peanut butter', () => {  return fetchData().then(data => {    expect(data).toBe('peanut butter');  });});\n```\n\n## Async/Await[​](#asyncawait \"Direct link to Async/Await\")\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n```\ntest('the data is peanut butter', async () => {  const data = await fetchData();  expect(data).toBe('peanut butter');});test('the fetch fails with an error', async () => {  expect.assertions(1);  try {    await fetchData();  } catch (error) {    expect(error).toMatch('error');  }});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n```\ntest('the data is peanut butter', async () => {  await expect(fetchData()).resolves.toBe('peanut butter');});test('the fetch fails with an error', async () => {  await expect(fetchData()).rejects.toMatch('error');});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n```\ntest('the fetch fails with an error', () => {  expect.assertions(1);  return fetchData().catch(error => expect(error).toMatch('error'));});\n```\n\n## Callbacks[​](#callbacks \"Direct link to Callbacks\")\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will _not_ work as intended:\n\n```\n// Don't do this!test('the data is peanut butter', () => {  function callback(error, data) {    if (error) {      throw error;    }    expect(data).toBe('peanut butter');  }  fetchData(callback);});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n```\ntest('the data is peanut butter', done => {  function callback(error, data) {    if (error) {      done(error);      return;    }    try {      expect(data).toBe('peanut butter');      done();    } catch (error) {      done(error);    }  }  fetchData(callback);});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\ncaution\n\nJest will throw an error, if the same test function is passed a `done()` callback and returns a promise. This is done as a precaution to avoid memory leaks in your tests.\n\n## `.resolves` / `.rejects`[​](#resolves--rejects \"Direct link to resolves--rejects\")\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n```\ntest('the data is peanut butter', () => {  return expect(fetchData()).resolves.toBe('peanut butter');});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n```\ntest('the fetch fails with an error', () => {  return expect(fetchData()).rejects.toMatch('error');});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.",
    "title": "Testing Asynchronous Code · Jest",
    "description": "It's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/jest-platform",
    "markdown": "# Jest Platform · Jest\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files[​](#jest-changed-files \"Direct link to jest-changed-files\")\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n*   `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n*   `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example[​](#example \"Direct link to Example\")\n\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');// print the set of modified files since last commit in the current repogetChangedFilesForRoots(['./'], {  lastCommit: true,}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff[​](#jest-diff \"Direct link to jest-diff\")\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example[​](#example-1 \"Direct link to Example\")\n\n```\nconst {diff} = require('jest-diff');const a = {a: {b: {c: 5}}};const b = {a: {b: {c: 6}}};const result = diff(a, b);// print diffconsole.log(result);\n```\n\n## jest-docblock[​](#jest-docblock \"Direct link to jest-docblock\")\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example[​](#example-2 \"Direct link to Example\")\n\n```\nconst {parseWithComments} = require('jest-docblock');const code = `/** * This is a sample * * @flow */ console.log('Hello World!');`;const parsed = parseWithComments(code);// prints an object with two attributes: comments and pragmas.console.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type[​](#jest-get-type \"Direct link to jest-get-type\")\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example[​](#example-3 \"Direct link to Example\")\n\n```\nconst {getType} = require('jest-get-type');const array = [1, 2, 3];const nullValue = null;const undefinedValue = undefined;// prints 'array'console.log(getType(array));// prints 'null'console.log(getType(nullValue));// prints 'undefined'console.log(getType(undefinedValue));\n```\n\n## jest-validate[​](#jest-validate \"Direct link to jest-validate\")\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n*   `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n*   `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example[​](#example-4 \"Direct link to Example\")\n\n```\nconst {validate} = require('jest-validate');const configByUser = {  transform: '<rootDir>/node_modules/my-custom-transform',};const result = validate(configByUser, {  comment: '  Documentation: http://custom-docs.com',  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},});console.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker[​](#jest-worker \"Direct link to jest-worker\")\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example[​](#example-5 \"Direct link to Example\")\n\nheavy-task.js\n\n```\nmodule.exports = {  myHeavyTask: args => {    // long running CPU intensive task.  },};\n```\n\nmain.js\n\n```\nasync function main() {  const worker = new Worker(require.resolve('./heavy-task.js'));  // run 2 tasks in parallel with different arguments  const results = await Promise.all([    worker.myHeavyTask({foo: 'bar'}),    worker.myHeavyTask({bar: 'foo'}),  ]);  console.log(results);}main();\n```\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format[​](#pretty-format \"Direct link to pretty-format\")\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example[​](#example-6 \"Direct link to Example\")\n\n```\nconst {format: prettyFormat} = require('pretty-format');const val = {object: {}};val.circularReference = val;val[Symbol('foo')] = 'foo';val.map = new Map([['prop', 'value']]);val.array = [-0, Infinity, NaN];console.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md).",
    "title": "Jest Platform · Jest",
    "description": "You can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/mock-functions",
    "markdown": "# Mock Functions · Jest\n\nMock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with `new`, and allowing test-time configuration of return values.\n\nThere are two ways to mock functions: Either by creating a mock function to use in test code, or writing a [`manual mock`](https://jestjs.io/docs/manual-mocks) to override a module dependency.\n\n## Using a mock function[​](#using-a-mock-function \"Direct link to Using a mock function\")\n\nLet's imagine we're testing an implementation of a function `forEach`, which invokes a callback for each item in a supplied array.\n\nforEach.js\n\n```\nexport function forEach(items, callback) {  for (const item of items) {    callback(item);  }}\n```\n\nTo test this function, we can use a mock function, and inspect the mock's state to ensure the callback is invoked as expected.\n\nforEach.test.js\n\n```\nconst forEach = require('./forEach');const mockCallback = jest.fn(x => 42 + x);test('forEach mock function', () => {  forEach([0, 1], mockCallback);  // The mock function was called twice  expect(mockCallback.mock.calls).toHaveLength(2);  // The first argument of the first call to the function was 0  expect(mockCallback.mock.calls[0][0]).toBe(0);  // The first argument of the second call to the function was 1  expect(mockCallback.mock.calls[1][0]).toBe(1);  // The return value of the first call to the function was 42  expect(mockCallback.mock.results[0].value).toBe(42);});\n```\n\n## `.mock` property[​](#mock-property \"Direct link to mock-property\")\n\nAll mock functions have this special `.mock` property, which is where data about how the function has been called and what the function returned is kept. The `.mock` property also tracks the value of `this` for each call, so it is possible to inspect this as well:\n\n```\nconst myMock1 = jest.fn();const a = new myMock1();console.log(myMock1.mock.instances);// > [ <a> ]const myMock2 = jest.fn();const b = {};const bound = myMock2.bind(b);bound();console.log(myMock2.mock.contexts);// > [ <b> ]\n```\n\nThese mock members are very useful in tests to assert how these functions get called, instantiated, or what they returned:\n\n```\n// The function was called exactly onceexpect(someMockFunction.mock.calls).toHaveLength(1);// The first arg of the first call to the function was 'first arg'expect(someMockFunction.mock.calls[0][0]).toBe('first arg');// The second arg of the first call to the function was 'second arg'expect(someMockFunction.mock.calls[0][1]).toBe('second arg');// The return value of the first call to the function was 'return value'expect(someMockFunction.mock.results[0].value).toBe('return value');// The function was called with a certain `this` context: the `element` object.expect(someMockFunction.mock.contexts[0]).toBe(element);// This function was instantiated exactly twiceexpect(someMockFunction.mock.instances.length).toBe(2);// The object returned by the first instantiation of this function// had a `name` property whose value was set to 'test'expect(someMockFunction.mock.instances[0].name).toBe('test');// The first argument of the last call to the function was 'test'expect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n## Mock Return Values[​](#mock-return-values \"Direct link to Mock Return Values\")\n\nMock functions can also be used to inject test values into your code during a test:\n\n```\nconst myMock = jest.fn();console.log(myMock());// > undefinedmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);console.log(myMock(), myMock(), myMock(), myMock());// > 10, 'x', true, true\n```\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n```\nconst filterTestFn = jest.fn();// Make the mock return `true` for the first call,// and `false` for the second callfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);const result = [11, 12].filter(num => filterTestFn(num));console.log(result);// > [11]console.log(filterTestFn.mock.calls[0][0]); // 11console.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n\n## Mocking Modules[​](#mocking-modules \"Direct link to Mocking Modules\")\n\nSuppose we have a class that fetches users from our API. The class uses [axios](https://github.com/axios/axios) to call the API then returns the `data` attribute which contains all the users:\n\nusers.js\n\n```\nimport axios from 'axios';class Users {  static all() {    return axios.get('/users.json').then(resp => resp.data);  }}export default Users;\n```\n\nNow, in order to test this method without actually hitting the API (and thus creating slow and fragile tests), we can use the `jest.mock(...)` function to automatically mock the axios module.\n\nOnce we mock the module we can provide a `mockResolvedValue` for `.get` that returns the data we want our test to assert against. In effect, we are saying that we want `axios.get('/users.json')` to return a fake response.\n\nusers.test.js\n\n```\nimport axios from 'axios';import Users from './users';jest.mock('axios');test('should fetch users', () => {  const users = [{name: 'Bob'}];  const resp = {data: users};  axios.get.mockResolvedValue(resp);  // or you could use the following depending on your use case:  // axios.get.mockImplementation(() => Promise.resolve(resp))  return Users.all().then(data => expect(data).toEqual(users));});\n```\n\n## Mocking Partials[​](#mocking-partials \"Direct link to Mocking Partials\")\n\nSubsets of a module can be mocked and the rest of the module can keep their actual implementation:\n\nfoo-bar-baz.js\n\n```\nexport const foo = 'foo';export const bar = () => 'bar';export default () => 'baz';\n```\n\n```\n//test.jsimport defaultExport, {bar, foo} from '../foo-bar-baz';jest.mock('../foo-bar-baz', () => {  const originalModule = jest.requireActual('../foo-bar-baz');  //Mock the default export and named export 'foo'  return {    __esModule: true,    ...originalModule,    default: jest.fn(() => 'mocked baz'),    foo: 'mocked foo',  };});test('should do a partial mock', () => {  const defaultExportResult = defaultExport();  expect(defaultExportResult).toBe('mocked baz');  expect(defaultExport).toHaveBeenCalled();  expect(foo).toBe('mocked foo');  expect(bar()).toBe('bar');});\n```\n\n## Mock Implementations[​](#mock-implementations \"Direct link to Mock Implementations\")\n\nStill, there are cases where it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with `jest.fn` or the `mockImplementationOnce` method on mock functions.\n\n```\nconst myMockFn = jest.fn(cb => cb(null, true));myMockFn((err, val) => console.log(val));// > true\n```\n\nThe `mockImplementation` method is useful when you need to define the default implementation of a mock function that is created from another module:\n\nfoo.js\n\n```\nmodule.exports = function () {  // some implementation;};\n```\n\ntest.js\n\n```\njest.mock('../foo'); // this happens automatically with automockingconst foo = require('../foo');// foo is a mock functionfoo.mockImplementation(() => 42);foo();// > 42\n```\n\nWhen you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the `mockImplementationOnce` method:\n\n```\nconst myMockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));myMockFn((err, val) => console.log(val));// > truemyMockFn((err, val) => console.log(val));// > false\n```\n\nWhen the mocked function runs out of implementations defined with `mockImplementationOnce`, it will execute the default implementation set with `jest.fn` (if it is defined):\n\n```\nconst myMockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());// > 'first call', 'second call', 'default', 'default'\n```\n\nFor cases where we have methods that are typically chained (and thus always need to return `this`), we have a sugary API to simplify this in the form of a `.mockReturnThis()` function that also sits on all mocks:\n\n```\nconst myObj = {  myMethod: jest.fn().mockReturnThis(),};// is the same asconst otherObj = {  myMethod: jest.fn(function () {    return this;  }),};\n```\n\n## Mock Names[​](#mock-names \"Direct link to Mock Names\")\n\nYou can optionally provide a name for your mock functions, which will be displayed instead of `'jest.fn()'` in the test error output. Use [`.mockName()`](https://jestjs.io/docs/mock-function-api#mockfnmocknamename) if you want to be able to quickly identify the mock function reporting an error in your test output.\n\n```\nconst myMockFn = jest  .fn()  .mockReturnValue('default')  .mockImplementation(scalar => 42 + scalar)  .mockName('add42');\n```\n\n## Custom Matchers[​](#custom-matchers \"Direct link to Custom Matchers\")\n\nFinally, in order to make it less demanding to assert how mock functions have been called, we've added some custom matcher functions for you:\n\n```\n// The mock function was called at least onceexpect(mockFunc).toHaveBeenCalled();// The mock function was called at least once with the specified argsexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);// The last call to the mock function was called with the specified argsexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);// All calls and the name of the mock is written as a snapshotexpect(mockFunc).toMatchSnapshot();\n```\n\nThese matchers are sugar for common forms of inspecting the `.mock` property. You can always do this manually yourself if that's more to your taste or if you need to do something more specific:\n\n```\n// The mock function was called at least onceexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);// The mock function was called at least once with the specified argsexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);// The last call to the mock function was called with the specified argsexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([  arg1,  arg2,]);// The first arg of the last call to the mock function was `42`// (note that there is no sugar helper for this specific of an assertion)expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);// A snapshot will check that a mock was invoked the same number of times,// in the same order, with the same arguments. It will also assert on the name.expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);expect(mockFunc.getMockName()).toBe('a mock name');\n```\n\nFor a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/expect).",
    "title": "Mock Functions · Jest",
    "description": "Mock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with new, and allowing test-time configuration of return values.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/jest-community",
    "markdown": "# Jest Community · Jest\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n*   [vscode-jest](https://github.com/jest-community/vscode-jest)\n*   [jest-extended](https://github.com/jest-community/jest-extended)\n*   [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n*   [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest[​](#awesome-jest \"Direct link to Awesome Jest\")\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.",
    "title": "Jest Community · Jest",
    "description": "The community around Jest is working hard to make the testing experience even greater.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/upgrading-to-jest29",
    "markdown": "# From v28 to v29 · Jest\n\nUpgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.\n\ninfo\n\nSee [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for the full list of changes.\n\nnote\n\nUpgrading from an older version? You can see the upgrade guide from v27 to v28 [here](https://jestjs.io/docs/28.x/upgrading-to-jest28).\n\n## Compatibility[​](#compatibility \"Direct link to Compatibility\")\n\nThe supported Node versions are 14.15, 16.10, 18.0 and above.\n\n## Snapshot format[​](#snapshot-format \"Direct link to Snapshot format\")\n\nAs announced in the [Jest 28 blog post](https://jestjs.io/blog/2022/04/25/jest-28#future), Jest 29 has changed the default snapshot formatting to `{escapeString: false, printBasicPrototype: false}`.\n\nIf you want to keep the old behavior, you can set the `snapshotFormat` property to:\n\n```\n+ snapshotFormat: {+   escapeString: true,+   printBasicPrototype: true+ }\n```\n\n## JSDOM upgrade[​](#jsdom-upgrade \"Direct link to JSDOM upgrade\")\n\n`jest-environment-jsdom` has upgraded `jsdom` from v19 to v20.\n\ninfo\n\nIf you use `jest-environment-jsdom`, the minimum TypeScript version is set to `4.5`.\n\nNotably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `uuid` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n\n## `pretty-format`[​](#pretty-format \"Direct link to pretty-format\")\n\n`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n\n### `jest-mock`[​](#jest-mock \"Direct link to jest-mock\")\n\nExports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n\n## TypeScript[​](#typescript \"Direct link to TypeScript\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.mocked()`[​](#jestmocked \"Direct link to jestmocked\")\n\nThe [`jest.mocked()`](https://jestjs.io/docs/mock-function-api#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n\n```\n- const mockedObject = jest.mocked(someObject, true);+ const mockedObject = jest.mocked(someObject);\n```\n\nTo have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n\n```\n- const mockedObject = jest.mocked(someObject);+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```",
    "title": "From v28 to v29 · Jest",
    "description": "Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/more-resources",
    "markdown": "# More Resources · Jest\n\nVersion: 29.7\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs[​](#browse-the-docs \"Direct link to Browse the docs\")\n\n*   Learn about [Snapshot Testing](https://jestjs.io/docs/snapshot-testing), [Mock Functions](https://jestjs.io/docs/mock-functions), and more in our in-depth guides.\n*   Migrate your existing tests to Jest by following our [migration guide](https://jestjs.io/docs/migration-guide).\n*   Learn how to [configure Jest](https://jestjs.io/docs/configuration).\n*   Look at the full [API Reference](https://jestjs.io/docs/api).\n*   [Troubleshoot](https://jestjs.io/docs/troubleshooting) problems with Jest.\n\n## Learn by example[​](#learn-by-example \"Direct link to Learn by example\")\n\nYou will find a number of example test cases in the [`examples`](https://github.com/jestjs/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/jestjs_) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.",
    "title": "More Resources · Jest",
    "description": "By now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/cli",
    "markdown": "# Jest CLI Options · Jest\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](https://jestjs.io/docs/configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line[​](#running-from-the-command-line \"Direct link to Running from the command line\")\n\nRun all tests (default):\n\nRun only the tests that were specified with a pattern or filename:\n\n```\njest my-test #orjest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\nRun watch mode:\n\n```\njest --watch #runs jest -o by defaultjest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with package manager[​](#using-with-package-manager \"Direct link to Using with package manager\")\n\nIf you run Jest via your package manager, you can still pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\nyou can use:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support[​](#camelcase--dashed-args-support \"Direct link to Camelcase & dashed args support\")\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n```\njest --collect-coveragejest --collectCoverage\n```\n\nArguments can also be mixed:\n\n```\njest --update-snapshot --detectOpenHandles\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nnote\n\nCLI options take precedence over values from the [Configuration](https://jestjs.io/docs/configuration).\n\n*   [Camelcase & dashed args support](#camelcase--dashed-args-support)\n*   [Options](#options)\n*   [Reference](#reference)\n    *   [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n    *   [`--bail[=<n>]`](#--bailn)\n    *   [`--cache`](#--cache)\n    *   [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n    *   [`--changedSince`](#--changedsince)\n    *   [`--ci`](#--ci)\n    *   [`--clearCache`](#--clearcache)\n    *   [`--clearMocks`](#--clearmocks)\n    *   [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n    *   [`--colors`](#--colors)\n    *   [`--config=<path>`](#--configpath)\n    *   [`--coverage[=<boolean>]`](#--coverageboolean)\n    *   [`--coverageDirectory=<path>`](#--coveragedirectorypath)\n    *   [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n    *   [`--debug`](#--debug)\n    *   [`--detectOpenHandles`](#--detectopenhandles)\n    *   [`--env=<environment>`](#--envenvironment)\n    *   [`--errorOnDeprecated`](#--errorondeprecated)\n    *   [`--expand`](#--expand)\n    *   [`--filter=<file>`](#--filterfile)\n    *   [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n    *   [`--forceExit`](#--forceexit)\n    *   [`--help`](#--help)\n    *   [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n    *   [`--init`](#--init)\n    *   [`--injectGlobals`](#--injectglobals)\n    *   [`--json`](#--json)\n    *   [`--lastCommit`](#--lastcommit)\n    *   [`--listTests`](#--listtests)\n    *   [`--logHeapUsage`](#--logheapusage)\n    *   [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n    *   [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n    *   [`--noStackTrace`](#--nostacktrace)\n    *   [`--notify`](#--notify)\n    *   [`--onlyChanged`](#--onlychanged)\n    *   [`--openHandlesTimeout=<milliseconds>`](#--openhandlestimeoutmilliseconds)\n    *   [`--outputFile=<filename>`](#--outputfilefilename)\n    *   [`--passWithNoTests`](#--passwithnotests)\n    *   [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n    *   [`--randomize`](#--randomize)\n    *   [`--reporters`](#--reporters)\n    *   [`--resetMocks`](#--resetmocks)\n    *   [`--restoreMocks`](#--restoremocks)\n    *   [`--roots`](#--roots)\n    *   [`--runInBand`](#--runinband)\n    *   [`--runTestsByPath`](#--runtestsbypath)\n    *   [`--seed=<num>`](#--seednum)\n    *   [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n    *   [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n    *   [`--shard`](#--shard)\n    *   [`--showConfig`](#--showconfig)\n    *   [`--showSeed`](#--showseed)\n    *   [`--silent`](#--silent)\n    *   [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n    *   [`--testLocationInResults`](#--testlocationinresults)\n    *   [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n    *   [`--testNamePattern=<regex>`](#--testnamepatternregex)\n    *   [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n    *   [`--testPathPattern=<regex>`](#--testpathpatternregex)\n    *   [`--testRunner=<path>`](#--testrunnerpath)\n    *   [`--testSequencer=<path>`](#--testsequencerpath)\n    *   [`--testTimeout=<number>`](#--testtimeoutnumber)\n    *   [`--updateSnapshot`](#--updatesnapshot)\n    *   [`--useStderr`](#--usestderr)\n    *   [`--verbose`](#--verbose)\n    *   [`--version`](#--version)\n    *   [`--watch`](#--watch)\n    *   [`--watchAll`](#--watchall)\n    *   [`--watchman`](#--watchman)\n    *   [`--workerThreads`](#--workerthreads)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `jest <regexForTestFiles>`[​](#jest-regexfortestfiles \"Direct link to jest-regexfortestfiles\")\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`[​](#--bailn \"Direct link to --bailn\")\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`[​](#--cache \"Direct link to --cache\")\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`[​](#--changedfileswithancestor \"Direct link to --changedfileswithancestor\")\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`[​](#--changedsince \"Direct link to --changedsince\")\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`[​](#--ci \"Direct link to --ci\")\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`[​](#--clearcache \"Direct link to --clearcache\")\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`[​](#--clearmocks \"Direct link to --clearmocks\")\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](https://jestjs.io/docs/jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`[​](#--collectcoveragefromglob \"Direct link to --collectcoveragefromglob\")\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`[​](#--colors \"Direct link to --colors\")\n\nForces test results output highlighting even if stdout is not a TTY.\n\nnote\n\nAlternatively you can set the environment variable `FORCE_COLOR=true` to forcefully enable or `FORCE_COLOR=false` to disable colorized output. The use of `FORCE_COLOR` overrides all other color support checks.\n\n### `--config=<path>`[​](#--configpath \"Direct link to --configpath\")\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`[​](#--coverageboolean \"Direct link to --coverageboolean\")\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageDirectory=<path>`[​](#--coveragedirectorypath \"Direct link to --coveragedirectorypath\")\n\nThe directory where Jest should output its coverage files.\n\n### `--coverageProvider=<provider>`[​](#--coverageproviderprovider \"Direct link to --coverageproviderprovider\")\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\n### `--debug`[​](#--debug \"Direct link to --debug\")\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`[​](#--detectopenhandles \"Direct link to --detectopenhandles\")\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`[​](#--envenvironment \"Direct link to --envenvironment\")\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`[​](#--errorondeprecated \"Direct link to --errorondeprecated\")\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`[​](#--expand \"Direct link to --expand\")\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`[​](#--filterfile \"Direct link to --filterfile\")\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with shape `{ filtered: Array<{ test: string }> }`. Especially useful when used in conjunction with a testing infrastructure to filter known broken tests, e.g.\n\nmy-filter.js\n\n```\nmodule.exports = testPaths => {  const allowedPaths = testPaths    .filter(filteringFunction)    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]  return {    filtered: allowedPaths,  };};\n```\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`[​](#--forceexit \"Direct link to --forceexit\")\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`[​](#--help \"Direct link to --help\")\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`[​](#--ignoreprojects-project1--projectn \"Direct link to --ignoreprojects-project1--projectn\")\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--init`[​](#--init \"Direct link to --init\")\n\nGenerate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.\n\n### `--injectGlobals`[​](#--injectglobals \"Direct link to --injectglobals\")\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n```\nimport {expect, jest, test} from '@jest/globals';jest.useFakeTimers();test('some test', () => {  expect(Date.now()).toBe(0);});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`[​](#--json \"Direct link to --json\")\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`[​](#--lastcommit \"Direct link to --lastcommit\")\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`[​](#--listtests \"Direct link to --listtests\")\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`[​](#--logheapusage \"Direct link to --logheapusage\")\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`[​](#--maxconcurrencynum \"Direct link to --maxconcurrencynum\")\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`[​](#--maxworkersnumstring \"Direct link to --maxworkersnumstring\")\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`[​](#--nostacktrace \"Direct link to --nostacktrace\")\n\nDisables stack trace in test results output.\n\n### `--notify`[​](#--notify \"Direct link to --notify\")\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`[​](#--onlychanged \"Direct link to --onlychanged\")\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--openHandlesTimeout=<milliseconds>`[​](#--openhandlestimeoutmilliseconds \"Direct link to --openhandlestimeoutmilliseconds\")\n\nWhen `--detectOpenHandles` and `--forceExit` are _disabled_, Jest will print a warning if the process has not exited cleanly after this number of milliseconds. A value of `0` disables the warning. Defaults to `1000`.\n\n### `--outputFile=<filename>`[​](#--outputfilefilename \"Direct link to --outputfilefilename\")\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](https://jestjs.io/docs/configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`[​](#--passwithnotests \"Direct link to --passwithnotests\")\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`[​](#--projects-path1--pathn \"Direct link to --projects-path1--pathn\")\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](https://jestjs.io/docs/configuration#projects-arraystring--projectconfig) configuration option.\n\nnote\n\nIf configuration files are found in the specified paths, _all_ projects specified within those configuration files will be run.\n\n### `--randomize`[​](#--randomize \"Direct link to --randomize\")\n\nShuffle the order of the tests within a file. The shuffling is based on the seed. See [`--seed=<num>`](#--seednum) for more info.\n\nSeed value is displayed when this option is set. Equivalent to setting the CLI option [`--showSeed`](#--showseed).\n\n```\njest --randomize --seed 1234\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--reporters`[​](#--reporters \"Direct link to --reporters\")\n\nRun tests with specified reporters. [Reporter options](https://jestjs.io/docs/configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`[​](#--resetmocks \"Direct link to --resetmocks\")\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](https://jestjs.io/docs/jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`[​](#--restoremocks \"Direct link to --restoremocks\")\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](https://jestjs.io/docs/jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`[​](#--roots \"Direct link to --roots\")\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`[​](#--runinband \"Direct link to --runinband\")\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`[​](#--runtestsbypath \"Direct link to --runtestsbypath\")\n\nRun only the tests that were specified with their exact paths. This avoids converting them into a regular expression and matching it against every single file.\n\nFor example, given the following file structure:\n\n```\n__tests__└── t1.test.js # test└── t2.test.js # test\n```\n\nWhen ran with a pattern, no test is found:\n\n```\njest --runTestsByPath __tests__/t\n```\n\nOutput:\n\nHowever, passing an exact path will execute only the given test:\n\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\nOutput:\n\n```\nPASS __tests__/t1.test.js\n```\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--seed=<num>`[​](#--seednum \"Direct link to --seednum\")\n\nSets a seed value that can be retrieved in a test file via [`jest.getSeed()`](https://jestjs.io/docs/jest-object#jestgetseed). The seed value must be between `-0x80000000` and `0x7fffffff` inclusive (`-2147483648` (`-(2 ** 31)`) and `2147483647` (`2 ** 31 - 1`) in decimal).\n\ntip\n\nIf this option is not specified Jest will randomly generate the value. You can use the [`--showSeed`](#--showseed) flag to print the seed in the test report summary.\n\n### `--selectProjects <project1> ... <projectN>`[​](#--selectprojects-project1--projectn \"Direct link to --selectprojects-project1--projectn\")\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`[​](#--setupfilesafterenv-path1--pathn \"Direct link to --setupfilesafterenv-path1--pathn\")\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`[​](#--shard \"Direct link to --shard\")\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](https://jestjs.io/docs/configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n```\njest --shard=1/3jest --shard=2/3jest --shard=3/3\n```\n\n### `--showConfig`[​](#--showconfig \"Direct link to --showconfig\")\n\nPrint your Jest config and then exits.\n\n### `--showSeed`[​](#--showseed \"Direct link to --showseed\")\n\nPrints the seed value in the test report summary. See [`--seed=<num>`](#--seednum) for the details.\n\nCan also be set in configuration. See [`showSeed`](https://jestjs.io/docs/configuration#showseed-boolean).\n\n### `--silent`[​](#--silent \"Direct link to --silent\")\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`[​](#--testenvironmentoptionsjson-string \"Direct link to --testenvironmentoptionsjson-string\")\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`[​](#--testlocationinresults \"Direct link to --testlocationinresults\")\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nnote\n\nIn the resulting object `column` is 0-indexed while `line` is not.\n\n```\n{  \"column\": 4,  \"line\": 5}\n```\n\n### `--testMatch glob1 ... globN`[​](#--testmatch-glob1--globn \"Direct link to --testmatch-glob1--globn\")\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](https://jestjs.io/docs/configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`[​](#--testnamepatternregex \"Direct link to --testnamepatternregex\")\n\nAlias: `-t`. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like `'GET /api/posts with auth'`, then you can use `jest -t=auth`.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`[​](#--testpathignorepatternsregexarray \"Direct link to --testpathignorepatternsregexarray\")\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPattern=<regex>`[​](#--testpathpatternregex \"Direct link to --testpathpatternregex\")\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`[​](#--testrunnerpath \"Direct link to --testrunnerpath\")\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`[​](#--testsequencerpath \"Direct link to --testsequencerpath\")\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](https://jestjs.io/docs/configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`[​](#--testtimeoutnumber \"Direct link to --testtimeoutnumber\")\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`[​](#--updatesnapshot \"Direct link to --updatesnapshot\")\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`[​](#--usestderr \"Direct link to --usestderr\")\n\nDivert all output to stderr.\n\n### `--verbose`[​](#--verbose \"Direct link to --verbose\")\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`[​](#--version \"Direct link to --version\")\n\nAlias: `-v`. Print the version and exit.\n\n### `--watch`[​](#--watch \"Direct link to --watch\")\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\ntip\n\nUse `--no-watch` (or `--watch=false`) to explicitly disable the watch mode if it was enabled using `--watch`. In most CI environments, this is automatically handled for you.\n\n### `--watchAll`[​](#--watchall \"Direct link to --watchall\")\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\ntip\n\nUse `--no-watchAll` (or `--watchAll=false`) to explicitly disable the watch mode if it was enabled using `--watchAll`. In most CI environments, this is automatically handled for you.\n\n### `--watchman`[​](#--watchman \"Direct link to --watchman\")\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n### `--workerThreads`[​](#--workerthreads \"Direct link to --workerthreads\")\n\nWhether to use [worker threads](https://nodejs.org/dist/latest/docs/api/worker_threads.html) for parallelization. [Child processes](https://nodejs.org/dist/latest/docs/api/child_process.html) are used by default.",
    "title": "Jest CLI Options · Jest",
    "description": "The jest command line runner has a number of useful options. You can run jest --help to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's Configuration options can also be specified through the CLI.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/webpack",
    "markdown": "# Using with webpack · Jest\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack _does_ offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example[​](#a-webpack-example \"Direct link to A webpack example\")\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\nwebpack.config.js\n\n```\nmodule.exports = {  module: {    rules: [      {        test: /\\.jsx?$/,        exclude: ['node_modules'],        use: ['babel-loader'],      },      {        test: /\\.css$/,        use: ['style-loader', 'css-loader'],      },      {        test: /\\.gif$/,        type: 'asset/inline',      },      {        test: /\\.(ttf|eot|svg)$/,        type: 'asset/resource',      },    ],  },  resolve: {    alias: {      config$: './configs/app-config.js',      react: './vendor/react-master',    },    extensions: ['.js', '.jsx'],    modules: [      'node_modules',      'bower_components',      'shared',      '/shared/vendor/modules',    ],  },};\n```\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](https://jestjs.io/docs/getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets[​](#handling-static-assets \"Direct link to Handling Static Assets\")\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\njest.config.js\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',  },};\n```\n\nAnd the mock files themselves:\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n```\nmodule.exports = 'test-file-stub';\n```\n\n### Mocking CSS Modules[​](#mocking-css-modules \"Direct link to Mocking CSS Modules\")\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](https://jestjs.io/docs/snapshot-testing).\n\njest.config.js (for CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': 'identity-obj-proxy',  },};\n```\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js (for custom transformers and CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(css|less)$': 'identity-obj-proxy',  },  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n### Configuring Jest to find our files[​](#configuring-jest-to-find-our-files \"Direct link to Configuring Jest to find our files\")\n\nNow that Jest knows how to process our files, we need to tell it how to _find_ them. For webpack's `modules`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\njest.config.js\n\n```\nmodule.exports = {  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nnote\n\n`<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom [`rootDir`](https://jestjs.io/docs/configuration#rootdir-string) option in your configuration.\n\nSimilarly, Jest's counterpart for Webpack's `resolve.roots` (an alternative to setting `NODE_PATH`) is `modulePaths`.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',    '^react(.*)$': '<rootDir>/vendor/react-master$1',    '^config$': '<rootDir>/configs/app-config.js',  },};\n```\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n## Using with webpack[​](#using-with-webpack \"Direct link to Using with webpack\")\n\nIn addition to installing `babel-jest` as described earlier, you'll need to add `@babel/preset-env` like so:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-env\n```\n\nThen, you'll want to configure Babel as follows:\n\n.babelrc\n\n```\n{  \"presets\": [\"@babel/preset-env\"]}\n```\n\ntip\n\nJest caches files to speed up test execution. If you updated `.babelrc` and Jest is not working as expected, try clearing the cache by running `jest --clearCache`.\n\ntip\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n.babelrc\n\n```\n{  \"presets\": [[\"env\", {\"modules\": false}]],  \"plugins\": [\"syntax-dynamic-import\"],  \"env\": {    \"test\": {      \"plugins\": [\"dynamic-import-node\"]    }  }}\n```\n\nFor an example of how to use Jest with webpack with React, you can view one [here](https://github.com/jenniferabowd/jest_webpack_example).",
    "title": "Using with webpack · Jest",
    "description": "Jest can be used in projects that use webpack to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/tutorial-react",
    "markdown": "# Testing React Apps · Jest\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Setup with Create React App[​](#setup-with-create-react-app \"Direct link to Setup with Create React App\")\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev react-test-renderer\n```\n\n### Setup without Create React App[​](#setup-without-create-react-app \"Direct link to Setup without Create React App\")\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](https://jestjs.io/docs/getting-started#using-babel).\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n```\n{  \"dependencies\": {    \"react\": \"<current-version>\",    \"react-dom\": \"<current-version>\"  },  \"devDependencies\": {    \"@babel/preset-env\": \"<current-version>\",    \"@babel/preset-react\": \"<current-version>\",    \"babel-jest\": \"<current-version>\",    \"jest\": \"<current-version>\",    \"react-test-renderer\": \"<current-version>\"  },  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    '@babel/preset-env',    ['@babel/preset-react', {runtime: 'automatic'}],  ],};\n```\n\n**And you're good to go!**\n\n### Snapshot Testing[​](#snapshot-testing \"Direct link to Snapshot Testing\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/snapshot-testing) for a Link component that renders hyperlinks:\n\nLink.js\n\n```\nimport {useState} from 'react';const STATUS = {  HOVERED: 'hovered',  NORMAL: 'normal',};export default function Link({page, children}) {  const [status, setStatus] = useState(STATUS.NORMAL);  const onMouseEnter = () => {    setStatus(STATUS.HOVERED);  };  const onMouseLeave = () => {    setStatus(STATUS.NORMAL);  };  return (    <a      className={status}      href={page || '#'}      onMouseEnter={onMouseEnter}      onMouseLeave={onMouseLeave}    >      {children}    </a>  );}\n```\n\nnote\n\nExamples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\nLink.test.js\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('changes the class when hovered', () => {  const component = renderer.create(    <Link page=\"http://www.facebook.com\">Facebook</Link>,  );  let tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseEnter();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseLeave();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\n```\nexports[`changes the class when hovered 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 2`] = `<a  className=\"hovered\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 3`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/jestjs/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+[​](#snapshot-testing-with-mocks-enzyme-and-react-16 \"Direct link to Snapshot Testing with Mocks, Enzyme and React 16+\")\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.# Or:Warning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n    \n    ```\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n    \n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n    \n    ```\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n    \n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n4.  Disable warnings all together (should be done in your jest setup file):\n    \n    ```\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n    \n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing[​](#dom-testing \"Direct link to DOM Testing\")\n\nIf you'd like to assert, and manipulate your rendered components you can use [@testing-library/react](https://github.com/testing-library/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following example use `@testing-library/react`.\n\n#### @testing-library/react[​](#testing-libraryreact \"Direct link to @testing-library/react\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\nCheckboxWithLabel.js\n\n```\nimport {useState} from 'react';export default function CheckboxWithLabel({labelOn, labelOff}) {  const [isChecked, setIsChecked] = useState(false);  const onChange = () => {    setIsChecked(!isChecked);  };  return (    <label>      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />      {isChecked ? labelOn : labelOff}    </label>  );}\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';import CheckboxWithLabel from '../CheckboxWithLabel';// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher// unmount and cleanup DOM after the test is finished.afterEach(cleanup);it('CheckboxWithLabel changes the text after click', () => {  const {queryByLabelText, getByLabelText} = render(    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,  );  expect(queryByLabelText(/off/i)).toBeTruthy();  fireEvent.click(getByLabelText(/off/i));  expect(queryByLabelText(/on/i)).toBeTruthy();});\n```\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/jestjs/jest/tree/main/examples/react-testing-library).\n\n### Custom transformers[​](#custom-transformers \"Direct link to Custom transformers\")\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\ncustom-transformer.js\n\n```\n'use strict';const {transform} = require('@babel/core');const jestPreset = require('babel-preset-jest');module.exports = {  process(src, filename) {    const result = transform(src, {      filename,      presets: [jestPreset],    });    return result || src;  },};\n```\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n```\nconst babelJest = require('babel-jest');module.exports = babelJest.createTransformer({  presets: ['my-custom-preset'],});\n```\n\nSee [dedicated docs](https://jestjs.io/docs/code-transformation#writing-custom-transformers) for more details.",
    "title": "Testing React Apps · Jest",
    "description": "At Facebook, we use Jest to test React applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/using-matchers",
    "markdown": "# Using Matchers · Jest\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](https://jestjs.io/docs/29.6/expect).\n\n## Common Matchers[​](#common-matchers \"Direct link to Common Matchers\")\n\nThe simplest way to test a value is with exact equality.\n\n```\ntest('two plus two is four', () => {  expect(2 + 2).toBe(4);});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual`:\n\n```\ntest('object assignment', () => {  const data = {one: 1};  data['two'] = 2;  expect(data).toEqual({one: 1, two: 2});});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\ntip\n\n`toEqual` ignores object keys with `undefined` properties, `undefined` array items, array sparseness, or object type mismatch. To take these into account use `toStrictEqual` instead.\n\nYou can also test for the opposite of a matcher using `not`:\n\n```\ntest('adding positive numbers is not zero', () => {  for (let a = 1; a < 10; a++) {    for (let b = 1; b < 10; b++) {      expect(a + b).not.toBe(0);    }  }});\n```\n\n## Truthiness[​](#truthiness \"Direct link to Truthiness\")\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n*   `toBeNull` matches only `null`\n*   `toBeUndefined` matches only `undefined`\n*   `toBeDefined` is the opposite of `toBeUndefined`\n*   `toBeTruthy` matches anything that an `if` statement treats as true\n*   `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n```\ntest('null', () => {  const n = null;  expect(n).toBeNull();  expect(n).toBeDefined();  expect(n).not.toBeUndefined();  expect(n).not.toBeTruthy();  expect(n).toBeFalsy();});test('zero', () => {  const z = 0;  expect(z).not.toBeNull();  expect(z).toBeDefined();  expect(z).not.toBeUndefined();  expect(z).not.toBeTruthy();  expect(z).toBeFalsy();});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers[​](#numbers \"Direct link to Numbers\")\n\nMost ways of comparing numbers have matcher equivalents.\n\n```\ntest('two plus two', () => {  const value = 2 + 2;  expect(value).toBeGreaterThan(3);  expect(value).toBeGreaterThanOrEqual(3.5);  expect(value).toBeLessThan(5);  expect(value).toBeLessThanOrEqual(4.5);  // toBe and toEqual are equivalent for numbers  expect(value).toBe(4);  expect(value).toEqual(4);});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n```\ntest('adding floating point numbers', () => {  const value = 0.1 + 0.2;  //expect(value).toBe(0.3);           This won't work because of rounding error  expect(value).toBeCloseTo(0.3); // This works.});\n```\n\n## Strings[​](#strings \"Direct link to Strings\")\n\nYou can check strings against regular expressions with `toMatch`:\n\n```\ntest('there is no I in team', () => {  expect('team').not.toMatch(/I/);});test('but there is a \"stop\" in Christoph', () => {  expect('Christoph').toMatch(/stop/);});\n```\n\n## Arrays and iterables[​](#arrays-and-iterables \"Direct link to Arrays and iterables\")\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n```\nconst shoppingList = [  'diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];test('the shopping list has milk on it', () => {  expect(shoppingList).toContain('milk');  expect(new Set(shoppingList)).toContain('milk');});\n```\n\n## Exceptions[​](#exceptions \"Direct link to Exceptions\")\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n```\nfunction compileAndroidCode() {  throw new Error('you are using the wrong JDK!');}test('compiling android goes as expected', () => {  expect(() => compileAndroidCode()).toThrow();  expect(() => compileAndroidCode()).toThrow(Error);  // You can also use a string that must be contained in the error message or a regexp  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');  expect(() => compileAndroidCode()).toThrow(/JDK/);  // Or you can match an exact error message using a regexp like below  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass});\n```\n\ntip\n\nThe function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More[​](#and-more \"Direct link to And More\")\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.6/expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](https://jestjs.io/docs/29.6/asynchronous).",
    "title": "Using Matchers · Jest",
    "description": "Jest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/asynchronous",
    "markdown": "# Testing Asynchronous Code · Jest\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises[​](#promises \"Direct link to Promises\")\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n```\ntest('the data is peanut butter', () => {  return fetchData().then(data => {    expect(data).toBe('peanut butter');  });});\n```\n\n## Async/Await[​](#asyncawait \"Direct link to Async/Await\")\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n```\ntest('the data is peanut butter', async () => {  const data = await fetchData();  expect(data).toBe('peanut butter');});test('the fetch fails with an error', async () => {  expect.assertions(1);  try {    await fetchData();  } catch (error) {    expect(error).toMatch('error');  }});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n```\ntest('the data is peanut butter', async () => {  await expect(fetchData()).resolves.toBe('peanut butter');});test('the fetch fails with an error', async () => {  await expect(fetchData()).rejects.toMatch('error');});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n```\ntest('the fetch fails with an error', () => {  expect.assertions(1);  return fetchData().catch(error => expect(error).toMatch('error'));});\n```\n\n## Callbacks[​](#callbacks \"Direct link to Callbacks\")\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will _not_ work as intended:\n\n```\n// Don't do this!test('the data is peanut butter', () => {  function callback(error, data) {    if (error) {      throw error;    }    expect(data).toBe('peanut butter');  }  fetchData(callback);});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n```\ntest('the data is peanut butter', done => {  function callback(error, data) {    if (error) {      done(error);      return;    }    try {      expect(data).toBe('peanut butter');      done();    } catch (error) {      done(error);    }  }  fetchData(callback);});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\ncaution\n\nJest will throw an error, if the same test function is passed a `done()` callback and returns a promise. This is done as a precaution to avoid memory leaks in your tests.\n\n## `.resolves` / `.rejects`[​](#resolves--rejects \"Direct link to resolves--rejects\")\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n```\ntest('the data is peanut butter', () => {  return expect(fetchData()).resolves.toBe('peanut butter');});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n```\ntest('the fetch fails with an error', () => {  return expect(fetchData()).rejects.toMatch('error');});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.",
    "title": "Testing Asynchronous Code · Jest",
    "description": "It's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/mock-function-api",
    "markdown": "# Mock Functions · Jest\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`mockFn.getMockName()`](#mockfngetmockname)\n    *   [`mockFn.mock.calls`](#mockfnmockcalls)\n    *   [`mockFn.mock.results`](#mockfnmockresults)\n    *   [`mockFn.mock.instances`](#mockfnmockinstances)\n    *   [`mockFn.mock.contexts`](#mockfnmockcontexts)\n    *   [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n    *   [`mockFn.mockClear()`](#mockfnmockclear)\n    *   [`mockFn.mockReset()`](#mockfnmockreset)\n    *   [`mockFn.mockRestore()`](#mockfnmockrestore)\n    *   [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n    *   [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n    *   [`mockFn.mockName(name)`](#mockfnmocknamename)\n    *   [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n    *   [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n    *   [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n    *   [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n    *   [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n    *   [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n    *   [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n    *   [`mockFn.withImplementation(fn, callback)`](#mockfnwithimplementationfn-callback)\n*   [Replaced Properties](#replaced-properties)\n    *   [`replacedProperty.replaceValue(value)`](#replacedpropertyreplacevaluevalue)\n    *   [`replacedProperty.restore()`](#replacedpropertyrestore)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`jest.fn(implementation?)`](#jestfnimplementation)\n    *   [`jest.Mock<T>`](#jestmockt)\n    *   [`jest.Mocked<Source>`](#jestmockedsource)\n    *   [`jest.Replaced<Source>`](#jestreplacedsource)\n    *   [`jest.mocked(source, options?)`](#jestmockedsource-options)\n    *   [`jest.Spied<Source>`](#jestspiedsource)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `mockFn.getMockName()`[​](#mockfngetmockname \"Direct link to mockfngetmockname\")\n\nReturns the mock name string set by calling [`.mockName()`](#mockfnmocknamename).\n\n### `mockFn.mock.calls`[​](#mockfnmockcalls \"Direct link to mockfnmockcalls\")\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n```\n[  ['arg1', 'arg2'],  ['arg3', 'arg4'],];\n```\n\n### `mockFn.mock.results`[​](#mockfnmockresults \"Direct link to mockfnmockresults\")\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n*   `'return'` - Indicates that the call completed by returning normally.\n*   `'throw'` - Indicates that the call completed by throwing a value.\n*   `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n```\n[  {    type: 'return',    value: 'result1',  },  {    type: 'throw',    value: {      /* Error instance */    },  },  {    type: 'return',    value: 'result2',  },];\n```\n\n### `mockFn.mock.instances`[​](#mockfnmockinstances \"Direct link to mockfnmockinstances\")\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n```\nconst mockFn = jest.fn();const a = new mockFn();const b = new mockFn();mockFn.mock.instances[0] === a; // truemockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`[​](#mockfnmockcontexts \"Direct link to mockfnmockcontexts\")\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n```\nconst mockFn = jest.fn();const boundMockFn = mockFn.bind(thisContext0);boundMockFn('a', 'b');mockFn.call(thisContext1, 'a', 'b');mockFn.apply(thisContext2, ['a', 'b']);mockFn.mock.contexts[0] === thisContext0; // truemockFn.mock.contexts[1] === thisContext1; // truemockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`[​](#mockfnmocklastcall \"Direct link to mockfnmocklastcall\")\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n### `mockFn.mockClear()`[​](#mockfnmockclear \"Direct link to mockfnmockclear\")\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nThe [`clearMocks`](https://jestjs.io/docs/configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\ncaution\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\n### `mockFn.mockReset()`[​](#mockfnmockreset \"Direct link to mockfnmockreset\")\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also replaces the mock implementation with an empty function, returning `undefined`.\n\nThe [`resetMocks`](https://jestjs.io/docs/configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`[​](#mockfnmockrestore \"Direct link to mockfnmockrestore\")\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nThe [`restoreMocks`](https://jestjs.io/docs/configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\ninfo\n\n`mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\n### `mockFn.mockImplementation(fn)`[​](#mockfnmockimplementationfn \"Direct link to mockfnmockimplementationfn\")\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);mockFn(0); // 42mockFn(1); // 43mockFn.mockImplementation(scalar => 36 + scalar);mockFn(2); // 38mockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n*   JavaScript\n*   TypeScript\n\nSomeClass.js\n\n```\nmodule.exports = class SomeClass {  method(a, b) {}};\n```\n\nSomeClass.test.js\n\n```\nconst SomeClass = require('./SomeClass');jest.mock('./SomeClass'); // this happens automatically with automockingconst mockMethod = jest.fn();SomeClass.mockImplementation(() => {  return {    method: mockMethod,  };});const some = new SomeClass();some.method('a', 'b');console.log('Calls to method:', mockMethod.mock.calls);\n```\n\n### `mockFn.mockImplementationOnce(fn)`[​](#mockfnmockimplementationoncefn \"Direct link to mockfnmockimplementationoncefn\")\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));mockFn((err, val) => console.log(val)); // truemockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n```\nconst mockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`[​](#mockfnmocknamename \"Direct link to mockfnmocknamename\")\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n```\nconst mockFn = jest.fn().mockName('mockedFunction');// mockFn();expect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n```\nexpect(mockedFunction).toHaveBeenCalled()Expected number of calls: >= 1Received number of calls:    0\n```\n\n### `mockFn.mockReturnThis()`[​](#mockfnmockreturnthis \"Direct link to mockfnmockreturnthis\")\n\nShorthand for:\n\n```\njest.fn(function () {  return this;});\n```\n\n### `mockFn.mockReturnValue(value)`[​](#mockfnmockreturnvaluevalue \"Direct link to mockfnmockreturnvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => value);\n```\n\nAccepts a value that will be returned whenever the mock function is called.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mock = jest.fn();mock.mockReturnValue(42);mock(); // 42mock.mockReturnValue(43);mock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`[​](#mockfnmockreturnvalueoncevalue \"Direct link to mockfnmockreturnvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockReturnValue('default')  .mockReturnValueOnce('first call')  .mockReturnValueOnce('second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`[​](#mockfnmockresolvedvaluevalue \"Direct link to mockfnmockresolvedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest.fn().mockResolvedValue(43);  await asyncMock(); // 43});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`[​](#mockfnmockresolvedvalueoncevalue \"Direct link to mockfnmockresolvedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValue('default')    .mockResolvedValueOnce('first call')    .mockResolvedValueOnce('second call');  await asyncMock(); // 'first call'  await asyncMock(); // 'second call'  await asyncMock(); // 'default'  await asyncMock(); // 'default'});\n```\n\n### `mockFn.mockRejectedValue(value)`[​](#mockfnmockrejectedvaluevalue \"Direct link to mockfnmockrejectedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockRejectedValue(new Error('Async error message'));  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`[​](#mockfnmockrejectedvalueoncevalue \"Direct link to mockfnmockrejectedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValueOnce('first call')    .mockRejectedValueOnce(new Error('Async error message'));  await asyncMock(); // 'first call'  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.withImplementation(fn, callback)`[​](#mockfnwithimplementationfn-callback \"Direct link to mockfnwithimplementationfn-callback\")\n\nAccepts a function which should be temporarily used as the implementation of the mock while the callback is being executed.\n\n```\ntest('test', () => {  const mock = jest.fn(() => 'outside callback');  mock.withImplementation(    () => 'inside callback',    () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n`mockFn.withImplementation` can be used regardless of whether or not the callback is asynchronous (returns a `thenable`). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation.\n\n```\ntest('async test', async () => {  const mock = jest.fn(() => 'outside callback');  // We await this call since the callback is async  await mock.withImplementation(    () => 'inside callback',    async () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n## Replaced Properties[​](#replaced-properties \"Direct link to Replaced Properties\")\n\n### `replacedProperty.replaceValue(value)`[​](#replacedpropertyreplacevaluevalue \"Direct link to replacedpropertyreplacevaluevalue\")\n\nChanges the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call [`jest.replaceProperty()`](https://jestjs.io/docs/jest-object#jestreplacepropertyobject-propertykey-value) multiple times on same property.\n\n### `replacedProperty.restore()`[​](#replacedpropertyrestore \"Direct link to replacedpropertyrestore\")\n\nRestores object's property to the original value.\n\nBeware that `replacedProperty.restore()` only works when the property value was replaced with [`jest.replaceProperty()`](https://jestjs.io/docs/jest-object#jestreplacepropertyobject-propertykey-value).\n\nThe [`restoreMocks`](https://jestjs.io/docs/configuration#restoremocks-boolean) configuration option is available to restore replaced properties automatically before each test.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`[​](#jestfnimplementation \"Direct link to jestfnimplementation\")\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](https://jestjs.io/docs/jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n```\nimport {expect, jest, test} from '@jest/globals';import type add from './add';import calculate from './calc';test('calculate calls add', () => {  // Create a new mock that can be used in place of `add`.  const mockAdd = jest.fn<typeof add>();  // `.mockImplementation()` now can infer that `a` and `b` are `number`  // and that the returned value is a `number`.  mockAdd.mockImplementation((a, b) => {    // Yes, this mock is still adding two numbers but imagine this    // was a complex function we are mocking.    return a + b;  });  // `mockAdd` is properly typed and therefore accepted by anything  // requiring `add`.  calculate(mockAdd, 1, 2);  expect(mockAdd).toHaveBeenCalledTimes(1);  expect(mockAdd).toHaveBeenCalledWith(1, 2);});\n```\n\n### `jest.Mock<T>`[​](#jestmockt \"Direct link to jestmockt\")\n\nConstructs the type of a mock function, e.g. the return type of `jest.fn()`. It can be useful if you have to defined a recursive mock function:\n\n```\nimport {jest} from '@jest/globals';const sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {  if (value === 0) {    return 0;  } else {    return value + fn(value - 1);  }});\n```\n\n### `jest.Mocked<Source>`[​](#jestmockedsource \"Direct link to jestmockedsource\")\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n```\nimport {expect, jest, test} from '@jest/globals';import type {fetch} from 'node-fetch';jest.mock('node-fetch');let mockedFetch: jest.Mocked<typeof fetch>;afterEach(() => {  mockedFetch.mockClear();});test('makes correct call', () => {  mockedFetch = getMockedFetch();  // ...});test('returns correct data', () => {  mockedFetch = getMockedFetch();  // ...});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.Replaced<Source>`[​](#jestreplacedsource \"Direct link to jestreplacedsource\")\n\nThe `jest.Replaced<Source>` utility type returns the `Source` type wrapped with type definitions of Jest [replaced property](#replaced-properties).\n\nsrc/utils.ts\n\n```\nexport function isLocalhost(): boolean {  return process.env['HOSTNAME'] === 'localhost';}\n```\n\nsrc/\\_\\_tests\\_\\_/utils.test.ts\n\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';import {isLocalhost} from '../utils';let replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;afterEach(() => {  replacedEnv?.restore();});it('isLocalhost should detect localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});  expect(isLocalhost()).toBe(true);});it('isLocalhost should detect non-localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});  expect(isLocalhost()).toBe(false);});\n```\n\n### `jest.mocked(source, options?)`[​](#jestmockedsource-options \"Direct link to jestmockedsource-options\")\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\nsong.ts\n\n```\nexport const song = {  one: {    more: {      time: (t: number) => {        return t;      },    },  },};\n```\n\nsong.test.ts\n\n```\nimport {expect, jest, test} from '@jest/globals';import {song} from './song';jest.mock('./song');jest.spyOn(console, 'log');const mockedSong = jest.mocked(song);// or through `jest.Mocked<Source>`// const mockedSong = song as jest.Mocked<typeof song>;test('deep method is typed correctly', () => {  mockedSong.one.more.time.mockReturnValue(12);  expect(mockedSong.one.more.time(10)).toBe(12);  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);});test('direct usage', () => {  jest.mocked(console.log).mockImplementation(() => {    return;  });  console.log('one more time');  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);});\n```\n\n### `jest.Spied<Source>`[​](#jestspiedsource \"Direct link to jestspiedsource\")\n\nConstructs the type of a spied class or function (i.e. the return type of `jest.spyOn()`).\n\n\\_\\_utils\\_\\_/setDateNow.ts\n\n```\nimport {jest} from '@jest/globals';export function setDateNow(now: number): jest.Spied<typeof Date.now> {  return jest.spyOn(Date, 'now').mockReturnValue(now);}\n```\n\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';import {setDateNow} from './__utils__/setDateNow';let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;afterEach(() => {  spiedDateNow?.mockReset();});test('renders correctly with a given date', () => {  spiedDateNow = setDateNow(1_482_363_367_071);  // ...  expect(spiedDateNow).toHaveBeenCalledTimes(1);});\n```\n\nTypes of a class or function can be passed as type argument to `jest.Spied<Source>`. If you prefer to constrain the input type, use: `jest.SpiedClass<Source>` or `jest.SpiedFunction<Source>`.\n\nUse `jest.SpiedGetter<Source>` or `jest.SpiedSetter<Source>` to create the type of a spied getter or setter respectively.",
    "title": "Mock Functions · Jest",
    "description": "Mock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with jest.fn(). If no implementation is given, the mock function will return undefined when invoked.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/setup-teardown",
    "markdown": "# Setup and Teardown · Jest\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup[​](#repeating-setup \"Direct link to Repeating Setup\")\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n```\nbeforeEach(() => {  initializeCityDatabase();});afterEach(() => {  clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](https://jestjs.io/docs/29.6/asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n```\nbeforeEach(() => {  return initializeCityDatabase();});\n```\n\n## One-Time Setup[​](#one-time-setup \"Direct link to One-Time Setup\")\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n```\nbeforeAll(() => {  return initializeCityDatabase();});afterAll(() => {  return clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n## Scoping[​](#scoping \"Direct link to Scoping\")\n\nThe top level `before*` and `after*` hooks apply to every test in a file. The hooks declared inside a `describe` block apply only to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n```\n// Applies to all tests in this filebeforeEach(() => {  return initializeCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});describe('matching cities to foods', () => {  // Applies only to tests in this describe block  beforeEach(() => {    return initializeFoodDatabase();  });  test('Vienna <3 veal', () => {    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);  });  test('San Juan <3 plantains', () => {    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);  });});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n```\nbeforeAll(() => console.log('1 - beforeAll'));afterAll(() => console.log('1 - afterAll'));beforeEach(() => console.log('1 - beforeEach'));afterEach(() => console.log('1 - afterEach'));test('', () => console.log('1 - test'));describe('Scoped / Nested block', () => {  beforeAll(() => console.log('2 - beforeAll'));  afterAll(() => console.log('2 - afterAll'));  beforeEach(() => console.log('2 - beforeEach'));  afterEach(() => console.log('2 - afterEach'));  test('', () => console.log('2 - test'));});// 1 - beforeAll// 1 - beforeEach// 1 - test// 1 - afterEach// 2 - beforeAll// 1 - beforeEach// 2 - beforeEach// 2 - test// 2 - afterEach// 1 - afterEach// 2 - afterAll// 1 - afterAll\n```\n\n## Order of Execution[​](#order-of-execution \"Direct link to Order of Execution\")\n\nJest executes all describe handlers in a test file _before_ it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n```\ndescribe('describe outer', () => {  console.log('describe outer-a');  describe('describe inner 1', () => {    console.log('describe inner 1');    test('test 1', () => console.log('test 1'));  });  console.log('describe outer-b');  test('test 2', () => console.log('test 2'));  describe('describe inner 2', () => {    console.log('describe inner 2');    test('test 3', () => console.log('test 3'));  });  console.log('describe outer-c');});// describe outer-a// describe inner 1// describe outer-b// describe inner 2// describe outer-c// test 1// test 2// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n```\nbeforeEach(() => console.log('connection setup'));beforeEach(() => console.log('database setup'));afterEach(() => console.log('database teardown'));afterEach(() => console.log('connection teardown'));test('test 1', () => console.log('test 1'));describe('extra', () => {  beforeEach(() => console.log('extra database setup'));  afterEach(() => console.log('extra database teardown'));  test('test 2', () => console.log('test 2'));});// connection setup// database setup// test 1// database teardown// connection teardown// connection setup// database setup// extra database setup// test 2// extra database teardown// database teardown// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n```\n  beforeEach(() => console.log('connection setup'));+ afterEach(() => console.log('connection teardown'));  beforeEach(() => console.log('database setup'));+ afterEach(() => console.log('database teardown'));- afterEach(() => console.log('database teardown'));- afterEach(() => console.log('connection teardown'));  // ...\n```\n\n## General Advice[​](#general-advice \"Direct link to General Advice\")\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n```\ntest.only('this will be the only test that runs', () => {  expect(true).toBe(false);});test('this test will not run', () => {  expect('A').toBe('A');});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.",
    "title": "Setup and Teardown · Jest",
    "description": "Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/api",
    "markdown": "# Globals · Jest\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.6/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`afterAll(fn, timeout)`](#afterallfn-timeout)\n    *   [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n    *   [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n    *   [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n    *   [`describe(name, fn)`](#describename-fn)\n    *   [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n    *   [`describe.only(name, fn)`](#describeonlyname-fn)\n    *   [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n    *   [`describe.skip(name, fn)`](#describeskipname-fn)\n    *   [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n    *   [`test(name, fn, timeout)`](#testname-fn-timeout)\n    *   [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n    *   [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n    *   [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n    *   [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n    *   [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n    *   [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n    *   [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n    *   [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n    *   [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n    *   [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n    *   [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n    *   [`test.skip(name, fn)`](#testskipname-fn)\n    *   [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n    *   [`test.todo(name)`](#testtodoname)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`.each`](#each)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `afterAll(fn, timeout)`[​](#afterallfn-timeout \"Direct link to afterallfn-timeout\")\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterAll(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`[​](#aftereachfn-timeout \"Direct link to aftereachfn-timeout\")\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterEach(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`[​](#beforeallfn-timeout \"Direct link to beforeallfn-timeout\")\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeAll(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});// Since we only set up the database once in this example, it's important// that our tests don't modify it.test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`[​](#beforeeachfn-timeout \"Direct link to beforeeachfn-timeout\")\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeEach(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`[​](#describename-fn \"Direct link to describename-fn\")\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n```\nconst myBeverage = {  delicious: true,  sour: false,};describe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n```\nconst binaryStringToNumber = binString => {  if (!/^[01]+$/.test(binString)) {    throw new CustomError('Not a binary number.');  }  return parseInt(binString, 2);};describe('binaryStringToNumber', () => {  describe('given an invalid binary string', () => {    test('composed of non-numbers throws CustomError', () => {      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);    });    test('with extra whitespace throws CustomError', () => {      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);    });  });  describe('given a valid binary string', () => {    test('returns the correct number', () => {      expect(binaryStringToNumber('100')).toBe(4);    });  });});\n```\n\n### `describe.each(table)(name, fn, timeout)`[​](#describeeachtablename-fn-timeout \"Direct link to describeeachtablename-fn-timeout\")\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1\\. `describe.each(table)(name, fn, timeout)`[​](#1-describeeachtablename-fn-timeout \"Direct link to 1-describeeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`.\n    \n*   `name`: `String` the title of the test suite.\n    \n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments.\n    \n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n    \n\nExample:\n\n```\ndescribe.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n```\ndescribe.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n#### 2\\. ``describe.each`table`(name, fn, timeout)``[​](#2-describeeachtablename-fn-timeout \"Direct link to 2-describeeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ndescribe.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('$a + $b', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n### `describe.only(name, fn)`[​](#describeonlyname-fn \"Direct link to describeonlyname-fn\")\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n```\ndescribe.only('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe('my other beverage', () => {  // ... will be skipped});\n```\n\n### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn \"Direct link to describeonlyeachtablename-fn\")\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and ``fdescribe.each`table`(name, fn)``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn-1 \"Direct link to describeonlyeachtablename-fn-1\")\n\n```\ndescribe.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.only.each`table`(name, fn)``[​](#describeonlyeachtablename-fn-2 \"Direct link to describeonlyeachtablename-fn-2\")\n\n```\ndescribe.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('passes', () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `describe.skip(name, fn)`[​](#describeskipname-fn \"Direct link to describeskipname-fn\")\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n```\ndescribe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe.skip('my other beverage', () => {  // ... will be skipped});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn \"Direct link to describeskipeachtablename-fn\")\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and ``xdescribe.each`table`(name, fn)``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn-1 \"Direct link to describeskipeachtablename-fn-1\")\n\n```\ndescribe.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.skip.each`table`(name, fn)``[​](#describeskipeachtablename-fn-2 \"Direct link to describeskipeachtablename-fn-2\")\n\n```\ndescribe.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('will not be run', () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test(name, fn, timeout)`[​](#testname-fn-timeout \"Direct link to testname-fn-timeout\")\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n```\ntest('did not rain', () => {  expect(inchesOfRain()).toBe(0);});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nIf a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n```\ntest('has lemon in it', () => {  return fetchBeverageList().then(list => {    expect(list).toContain('lemon');  });});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves. For more details, see [Testing Asynchronous Code](https://jestjs.io/docs/29.6/asynchronous) page.\n\ntip\n\nJest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test [callbacks](https://jestjs.io/docs/29.6/asynchronous#callbacks).\n\n### `test.concurrent(name, fn, timeout)`[​](#testconcurrentname-fn-timeout \"Direct link to testconcurrentname-fn-timeout\")\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\ncaution\n\n`test.concurrent` is considered experimental - see [here](https://github.com/jestjs/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues.\n\nUse `test.concurrent` if you want the test to run concurrently.\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\n```\ntest.concurrent('addition of 2 numbers', async () => {  expect(5 + 3).toBe(8);});test.concurrent('subtraction 2 numbers', async () => {  expect(5 - 3).toBe(2);});\n```\n\ntip\n\nUse the [`maxConcurrency`](https://jestjs.io/docs/29.6/configuration#maxconcurrency-number) configuration option to prevent Jest from executing more than the specified amount of tests at the same time.\n\n### `test.concurrent.each(table)(name, fn, timeout)`[​](#testconcurrenteachtablename-fn-timeout \"Direct link to testconcurrenteachtablename-fn-timeout\")\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1\\. `test.concurrent.each(table)(name, fn, timeout)`[​](#1-testconcurrenteachtablename-fn-timeout \"Direct link to 1-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.concurrent.each`table`(name, fn, timeout)``[​](#2-testconcurrenteachtablename-fn-timeout \"Direct link to 2-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn \"Direct link to testconcurrentonlyeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn-1 \"Direct link to testconcurrentonlyeachtablename-fn-1\")\n\n```\ntest.concurrent.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn \"Direct link to testonlyeachtablename-fn\")\n\n```\ntest.concurrent.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn \"Direct link to testconcurrentskipeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn-1 \"Direct link to testconcurrentskipeachtablename-fn-1\")\n\n```\ntest.concurrent.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.concurrent.skip.each`table`(name, fn)``[​](#testconcurrentskipeachtablename-fn-2 \"Direct link to testconcurrentskipeachtablename-fn-2\")\n\n```\ntest.concurrent.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.each(table)(name, fn, timeout)`[​](#testeachtablename-fn-timeout \"Direct link to testeachtablename-fn-timeout\")\n\nAlso under the alias: `it.each(table)(name, fn)` and ``it.each`table`(name, fn)``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1\\. `test.each(table)(name, fn, timeout)`[​](#1-testeachtablename-fn-timeout \"Direct link to 1-testeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n```\ntest.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.each`table`(name, fn, timeout)``[​](#2-testeachtablename-fn-timeout \"Direct link to 2-testeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.failing(name, fn, timeout)`[​](#testfailingname-fn-timeout \"Direct link to testfailingname-fn-timeout\")\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n```\ntest.failing('it is not equal', () => {  expect(5).toBe(6); // this test will pass});test.failing('it is equal', () => {  expect(10).toBe(10); // this test will fail});\n```\n\n### `test.failing.each(name, fn, timeout)`[​](#testfailingeachname-fn-timeout \"Direct link to testfailingeachname-fn-timeout\")\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and ``it.failing.each`table`(name, fn)``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n```\ntest.failing.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.only.failing(name, fn, timeout)`[​](#testonlyfailingname-fn-timeout \"Direct link to testonlyfailingname-fn-timeout\")\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`[​](#testskipfailingname-fn-timeout \"Direct link to testskipfailingname-fn-timeout\")\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`[​](#testonlyname-fn-timeout \"Direct link to testonlyname-fn-timeout\")\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nFor example, let's say you had these tests:\n\n```\ntest.only('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-1 \"Direct link to testonlyeachtablename-fn-1\")\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, ``it.only.each`table`(name, fn)`` and ``fit.each`table`(name, fn)``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-2 \"Direct link to testonlyeachtablename-fn-2\")\n\n```\ntest.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn-3 \"Direct link to testonlyeachtablename-fn-3\")\n\n```\ntest.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.skip(name, fn)`[​](#testskipname-fn \"Direct link to testskipname-fn\")\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n```\ntest('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test.skip('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn \"Direct link to testskipeachtablename-fn\")\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn-1 \"Direct link to testskipeachtablename-fn-1\")\n\n```\ntest.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.skip.each`table`(name, fn)``[​](#testskipeachtablename-fn-2 \"Direct link to testskipeachtablename-fn-2\")\n\n```\ntest.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.todo(name)`[​](#testtodoname \"Direct link to testtodoname\")\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n```\nconst add = (a, b) => a + b;test.todo('add should be associative');\n```\n\ntip\n\n`test.todo` will throw an error if you pass it a test callback function. Use [`test.skip`](#testskipname-fn) instead, if you already implemented the test, but do not want it to run.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.6/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `.each`[​](#each \"Direct link to each\")\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects[​](#array-of-objects \"Direct link to Array of objects\")\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n```\nimport {test} from '@jest/globals';test.each([  {name: 'a', path: 'path/to/a', count: 1, write: true},  {name: 'b', path: 'path/to/b', count: 3},])('inline table', ({name, path, count, write}) => {  // arguments are typed as expected, e.g. `write: boolean | undefined`});\n```\n\nOr declared separately as a variable:\n\n```\nimport {test} from '@jest/globals';const table = [  {a: 1, b: 2, expected: 'three', extra: true},  {a: 3, b: 4, expected: 'seven', extra: false},  {a: 5, b: 6, expected: 'eleven'},];test.each(table)('table as a variable', ({a, b, expected, extra}) => {  // again everything is typed as expected, e.g. `extra: boolean | undefined`});\n```\n\n#### Array of arrays[​](#array-of-arrays \"Direct link to Array of arrays\")\n\nThe array of arrays style will work smoothly with inlined tables:\n\n```\nimport {test} from '@jest/globals';test.each([  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],])('inline table example', (a, b, expected, extra) => {  // arguments are typed as expected, e.g. `extra: boolean | undefined`});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n```\nimport {test} from '@jest/globals';const table: Array<[number, number, string, boolean?]> = [  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],];test.each(table)('table as a variable example', (a, b, expected, extra) => {  // without the annotation types are incorrect, e.g. `a: number | string | boolean`});\n```\n\n#### Template literal[​](#template-literal \"Direct link to Template literal\")\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${3}  ${3} | ${4} | ${7}  ${5} | ${6} | ${11}`('template literal example', ({a, b, expected}) => {  // all arguments are of type `number`});\n```\n\nOtherwise it will require a generic type argument:\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; b: number; expected: string; extra?: boolean}>`  a    | b    | expected    | extra  ${1} | ${2} | ${'three'}  | ${true}  ${3} | ${4} | ${'seven'}  | ${false}  ${5} | ${6} | ${'eleven'}`('template literal example', ({a, b, expected, extra}) => {  // without the generic argument in this case types would default to `unknown`});\n```",
    "title": "Globals · Jest",
    "description": "In your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do import {describe, expect, test} from '@jest/globals'.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/jest-community",
    "markdown": "# Jest Community · Jest\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n*   [vscode-jest](https://github.com/jest-community/vscode-jest)\n*   [jest-extended](https://github.com/jest-community/jest-extended)\n*   [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n*   [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest[​](#awesome-jest \"Direct link to Awesome Jest\")\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.",
    "title": "Jest Community · Jest",
    "description": "The community around Jest is working hard to make the testing experience even greater.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/more-resources",
    "markdown": "# More Resources · Jest\n\nVersion: 29.6\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs[​](#browse-the-docs \"Direct link to Browse the docs\")\n\n*   Learn about [Snapshot Testing](https://jestjs.io/docs/29.6/snapshot-testing), [Mock Functions](https://jestjs.io/docs/29.6/mock-functions), and more in our in-depth guides.\n*   Migrate your existing tests to Jest by following our [migration guide](https://jestjs.io/docs/29.6/migration-guide).\n*   Learn how to [configure Jest](https://jestjs.io/docs/29.6/configuration).\n*   Look at the full [API Reference](https://jestjs.io/docs/29.6/api).\n*   [Troubleshoot](https://jestjs.io/docs/29.6/troubleshooting) problems with Jest.\n\n## Learn by example[​](#learn-by-example \"Direct link to Learn by example\")\n\nYou will find a number of example test cases in the [`examples`](https://github.com/jestjs/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/jestjs_) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.",
    "title": "More Resources · Jest",
    "description": "By now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/jest-platform",
    "markdown": "# Jest Platform · Jest\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files[​](#jest-changed-files \"Direct link to jest-changed-files\")\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n*   `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n*   `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example[​](#example \"Direct link to Example\")\n\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');// print the set of modified files since last commit in the current repogetChangedFilesForRoots(['./'], {  lastCommit: true,}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff[​](#jest-diff \"Direct link to jest-diff\")\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example[​](#example-1 \"Direct link to Example\")\n\n```\nconst {diff} = require('jest-diff');const a = {a: {b: {c: 5}}};const b = {a: {b: {c: 6}}};const result = diff(a, b);// print diffconsole.log(result);\n```\n\n## jest-docblock[​](#jest-docblock \"Direct link to jest-docblock\")\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example[​](#example-2 \"Direct link to Example\")\n\n```\nconst {parseWithComments} = require('jest-docblock');const code = `/** * This is a sample * * @flow */ console.log('Hello World!');`;const parsed = parseWithComments(code);// prints an object with two attributes: comments and pragmas.console.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type[​](#jest-get-type \"Direct link to jest-get-type\")\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example[​](#example-3 \"Direct link to Example\")\n\n```\nconst {getType} = require('jest-get-type');const array = [1, 2, 3];const nullValue = null;const undefinedValue = undefined;// prints 'array'console.log(getType(array));// prints 'null'console.log(getType(nullValue));// prints 'undefined'console.log(getType(undefinedValue));\n```\n\n## jest-validate[​](#jest-validate \"Direct link to jest-validate\")\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n*   `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n*   `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example[​](#example-4 \"Direct link to Example\")\n\n```\nconst {validate} = require('jest-validate');const configByUser = {  transform: '<rootDir>/node_modules/my-custom-transform',};const result = validate(configByUser, {  comment: '  Documentation: http://custom-docs.com',  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},});console.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker[​](#jest-worker \"Direct link to jest-worker\")\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example[​](#example-5 \"Direct link to Example\")\n\nheavy-task.js\n\n```\nmodule.exports = {  myHeavyTask: args => {    // long running CPU intensive task.  },};\n```\n\nmain.js\n\n```\nasync function main() {  const worker = new Worker(require.resolve('./heavy-task.js'));  // run 2 tasks in parallel with different arguments  const results = await Promise.all([    worker.myHeavyTask({foo: 'bar'}),    worker.myHeavyTask({bar: 'foo'}),  ]);  console.log(results);}main();\n```\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format[​](#pretty-format \"Direct link to pretty-format\")\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example[​](#example-6 \"Direct link to Example\")\n\n```\nconst {format: prettyFormat} = require('pretty-format');const val = {object: {}};val.circularReference = val;val[Symbol('foo')] = 'foo';val.map = new Map([['prop', 'value']]);val.array = [-0, Infinity, NaN];console.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md).",
    "title": "Jest Platform · Jest",
    "description": "You can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/snapshot-testing",
    "markdown": "# Snapshot Testing · Jest\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest[​](#snapshot-testing-with-jest \"Direct link to Snapshot Testing with Jest\")\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n```\nexports[`renders correctly 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nnote\n\nThe snapshot is directly scoped to the data you render – in our example the `<Link>` component with `page` prop passed to it. This implies that even if any other file has missing props (say, `App.js`) in the `<Link>` component, it will still pass the test as the test doesn't know the usage of `<Link>` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\ninfo\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots[​](#updating-snapshots \"Direct link to Updating Snapshots\")\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n```\n// Updated test case with a Link to a different addressit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nIn that case, Jest will print this output:\n\n![](https://jestjs.io/assets/images/failedSnapshotTest-754bd8c54c17338fe046c6273fd3f9d1.png)\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode[​](#interactive-snapshot-mode \"Direct link to Interactive Snapshot Mode\")\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshot-58ae38e9cae13140c56d8472453f0595.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotUpdate-a17d8d77f94702048b4d0e0e4c580719.gif)\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotDone-59ee291ee320accbc4bfc4f33b22638a.png)\n\n### Inline Snapshots[​](#inline-snapshots \"Direct link to Inline Snapshots\")\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nExample:\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot();});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot(`    <a      className=\"normal\"      href=\"https://example.com\"      onMouseEnter={[Function]}      onMouseLeave={[Function]}    >      Example Site    </a>  `);});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers[​](#property-matchers \"Direct link to Property Matchers\")\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n```\nit('will fail every time', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot();});// Snapshotexports[`will fail every time 1`] = `{  \"createdAt\": 2018-05-19T23:36:09.816Z,  \"id\": 3,  \"name\": \"LeBron James\",}`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n```\nit('will check the matchers and pass', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    id: expect.any(Number),  });});// Snapshotexports[`will check the matchers and pass 1`] = `{  \"createdAt\": Any<Date>,  \"id\": Any<Number>,  \"name\": \"LeBron James\",}`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n```\nit('will check the values and pass', () => {  const user = {    createdAt: new Date(),    name: 'Bond... James Bond',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    name: 'Bond... James Bond',  });});// Snapshotexports[`will check the values and pass 1`] = `{  \"createdAt\": Any<Date>,  \"name\": 'Bond... James Bond',}`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n```\nconst randomNumber = Math.round(Math.random() * 100);const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);expect(stringWithConstantData).toMatchSnapshot();\n```\n\nOther ways this can be done is using the [snapshot serializer](https://jestjs.io/docs/29.6/configuration#snapshotserializers-arraystring) or [mocking](https://jestjs.io/docs/29.6/mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1\\. Treat snapshots as code[​](#1-treat-snapshots-as-code \"Direct link to 1. Treat snapshots as code\")\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2\\. Tests should be deterministic[​](#2-tests-should-be-deterministic \"Direct link to 2. Tests should be deterministic\")\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/jestjs/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](https://jestjs.io/docs/29.6/mock-functions) to return a consistent value every time the test is run:\n\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3\\. Use descriptive snapshot names[​](#3-use-descriptive-snapshot-names \"Direct link to 3. Use descriptive snapshot names\")\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n```\nexports[`<UserName /> should handle some test case`] = `null`;exports[`<UserName /> should handle some other test case`] = `<div>  Alan Turing</div>`;\n```\n\nTo:\n\n```\nexports[`<UserName /> should render null`] = `null`;exports[`<UserName /> should render Alan Turing`] = `<div>  Alan Turing</div>`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n```\nexports[`<UserName /> should render null`] = `<div>  Alan Turing</div>`;exports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions[​](#frequently-asked-questions \"Direct link to Frequently Asked Questions\")\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?[​](#are-snapshots-written-automatically-on-continuous-integration-ci-systems \"Direct link to Are snapshots written automatically on Continuous Integration (CI) systems?\")\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?[​](#should-snapshot-files-be-committed \"Direct link to Should snapshot files be committed?\")\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?[​](#does-snapshot-testing-only-work-with-react-components \"Direct link to Does snapshot testing only work with React components?\")\n\n[React](https://jestjs.io/docs/29.6/tutorial-react) and [React Native](https://jestjs.io/docs/29.6/tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/jestjs/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?[​](#whats-the-difference-between-snapshot-testing-and-visual-regression-testing \"Direct link to What's the difference between snapshot testing and visual regression testing?\")\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?[​](#does-snapshot-testing-replace-unit-testing \"Direct link to Does snapshot testing replace unit testing?\")\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?[​](#what-is-the-performance-of-snapshot-testing-regarding-speed-and-size-of-the-generated-files \"Direct link to What is the performance of snapshot testing regarding speed and size of the generated files?\")\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?[​](#how-do-i-resolve-conflicts-within-snapshot-files \"Direct link to How do I resolve conflicts within snapshot files?\")\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?[​](#is-it-possible-to-apply-test-driven-development-principles-with-snapshot-testing \"Direct link to Is it possible to apply test-driven development principles with snapshot testing?\")\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?[​](#does-code-coverage-work-with-snapshot-testing \"Direct link to Does code coverage work with snapshot testing?\")\n\nYes, as well as with any other test.",
    "title": "Snapshot Testing · Jest",
    "description": "Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/mock-functions",
    "markdown": "# Mock Functions · Jest\n\nMock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with `new`, and allowing test-time configuration of return values.\n\nThere are two ways to mock functions: Either by creating a mock function to use in test code, or writing a [`manual mock`](https://jestjs.io/docs/29.6/manual-mocks) to override a module dependency.\n\n## Using a mock function[​](#using-a-mock-function \"Direct link to Using a mock function\")\n\nLet's imagine we're testing an implementation of a function `forEach`, which invokes a callback for each item in a supplied array.\n\nforEach.js\n\n```\nexport function forEach(items, callback) {  for (const item of items) {    callback(item);  }}\n```\n\nTo test this function, we can use a mock function, and inspect the mock's state to ensure the callback is invoked as expected.\n\nforEach.test.js\n\n```\nconst forEach = require('./forEach');const mockCallback = jest.fn(x => 42 + x);test('forEach mock function', () => {  forEach([0, 1], mockCallback);  // The mock function was called twice  expect(mockCallback.mock.calls).toHaveLength(2);  // The first argument of the first call to the function was 0  expect(mockCallback.mock.calls[0][0]).toBe(0);  // The first argument of the second call to the function was 1  expect(mockCallback.mock.calls[1][0]).toBe(1);  // The return value of the first call to the function was 42  expect(mockCallback.mock.results[0].value).toBe(42);});\n```\n\n## `.mock` property[​](#mock-property \"Direct link to mock-property\")\n\nAll mock functions have this special `.mock` property, which is where data about how the function has been called and what the function returned is kept. The `.mock` property also tracks the value of `this` for each call, so it is possible to inspect this as well:\n\n```\nconst myMock1 = jest.fn();const a = new myMock1();console.log(myMock1.mock.instances);// > [ <a> ]const myMock2 = jest.fn();const b = {};const bound = myMock2.bind(b);bound();console.log(myMock2.mock.contexts);// > [ <b> ]\n```\n\nThese mock members are very useful in tests to assert how these functions get called, instantiated, or what they returned:\n\n```\n// The function was called exactly onceexpect(someMockFunction.mock.calls).toHaveLength(1);// The first arg of the first call to the function was 'first arg'expect(someMockFunction.mock.calls[0][0]).toBe('first arg');// The second arg of the first call to the function was 'second arg'expect(someMockFunction.mock.calls[0][1]).toBe('second arg');// The return value of the first call to the function was 'return value'expect(someMockFunction.mock.results[0].value).toBe('return value');// The function was called with a certain `this` context: the `element` object.expect(someMockFunction.mock.contexts[0]).toBe(element);// This function was instantiated exactly twiceexpect(someMockFunction.mock.instances.length).toBe(2);// The object returned by the first instantiation of this function// had a `name` property whose value was set to 'test'expect(someMockFunction.mock.instances[0].name).toBe('test');// The first argument of the last call to the function was 'test'expect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n## Mock Return Values[​](#mock-return-values \"Direct link to Mock Return Values\")\n\nMock functions can also be used to inject test values into your code during a test:\n\n```\nconst myMock = jest.fn();console.log(myMock());// > undefinedmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);console.log(myMock(), myMock(), myMock(), myMock());// > 10, 'x', true, true\n```\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n```\nconst filterTestFn = jest.fn();// Make the mock return `true` for the first call,// and `false` for the second callfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);const result = [11, 12].filter(num => filterTestFn(num));console.log(result);// > [11]console.log(filterTestFn.mock.calls[0][0]); // 11console.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n\n## Mocking Modules[​](#mocking-modules \"Direct link to Mocking Modules\")\n\nSuppose we have a class that fetches users from our API. The class uses [axios](https://github.com/axios/axios) to call the API then returns the `data` attribute which contains all the users:\n\nusers.js\n\n```\nimport axios from 'axios';class Users {  static all() {    return axios.get('/users.json').then(resp => resp.data);  }}export default Users;\n```\n\nNow, in order to test this method without actually hitting the API (and thus creating slow and fragile tests), we can use the `jest.mock(...)` function to automatically mock the axios module.\n\nOnce we mock the module we can provide a `mockResolvedValue` for `.get` that returns the data we want our test to assert against. In effect, we are saying that we want `axios.get('/users.json')` to return a fake response.\n\nusers.test.js\n\n```\nimport axios from 'axios';import Users from './users';jest.mock('axios');test('should fetch users', () => {  const users = [{name: 'Bob'}];  const resp = {data: users};  axios.get.mockResolvedValue(resp);  // or you could use the following depending on your use case:  // axios.get.mockImplementation(() => Promise.resolve(resp))  return Users.all().then(data => expect(data).toEqual(users));});\n```\n\n## Mocking Partials[​](#mocking-partials \"Direct link to Mocking Partials\")\n\nSubsets of a module can be mocked and the rest of the module can keep their actual implementation:\n\nfoo-bar-baz.js\n\n```\nexport const foo = 'foo';export const bar = () => 'bar';export default () => 'baz';\n```\n\n```\n//test.jsimport defaultExport, {bar, foo} from '../foo-bar-baz';jest.mock('../foo-bar-baz', () => {  const originalModule = jest.requireActual('../foo-bar-baz');  //Mock the default export and named export 'foo'  return {    __esModule: true,    ...originalModule,    default: jest.fn(() => 'mocked baz'),    foo: 'mocked foo',  };});test('should do a partial mock', () => {  const defaultExportResult = defaultExport();  expect(defaultExportResult).toBe('mocked baz');  expect(defaultExport).toHaveBeenCalled();  expect(foo).toBe('mocked foo');  expect(bar()).toBe('bar');});\n```\n\n## Mock Implementations[​](#mock-implementations \"Direct link to Mock Implementations\")\n\nStill, there are cases where it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with `jest.fn` or the `mockImplementationOnce` method on mock functions.\n\n```\nconst myMockFn = jest.fn(cb => cb(null, true));myMockFn((err, val) => console.log(val));// > true\n```\n\nThe `mockImplementation` method is useful when you need to define the default implementation of a mock function that is created from another module:\n\nfoo.js\n\n```\nmodule.exports = function () {  // some implementation;};\n```\n\ntest.js\n\n```\njest.mock('../foo'); // this happens automatically with automockingconst foo = require('../foo');// foo is a mock functionfoo.mockImplementation(() => 42);foo();// > 42\n```\n\nWhen you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the `mockImplementationOnce` method:\n\n```\nconst myMockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));myMockFn((err, val) => console.log(val));// > truemyMockFn((err, val) => console.log(val));// > false\n```\n\nWhen the mocked function runs out of implementations defined with `mockImplementationOnce`, it will execute the default implementation set with `jest.fn` (if it is defined):\n\n```\nconst myMockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());// > 'first call', 'second call', 'default', 'default'\n```\n\nFor cases where we have methods that are typically chained (and thus always need to return `this`), we have a sugary API to simplify this in the form of a `.mockReturnThis()` function that also sits on all mocks:\n\n```\nconst myObj = {  myMethod: jest.fn().mockReturnThis(),};// is the same asconst otherObj = {  myMethod: jest.fn(function () {    return this;  }),};\n```\n\n## Mock Names[​](#mock-names \"Direct link to Mock Names\")\n\nYou can optionally provide a name for your mock functions, which will be displayed instead of `'jest.fn()'` in the test error output. Use [`.mockName()`](https://jestjs.io/docs/29.6/mock-function-api#mockfnmocknamename) if you want to be able to quickly identify the mock function reporting an error in your test output.\n\n```\nconst myMockFn = jest  .fn()  .mockReturnValue('default')  .mockImplementation(scalar => 42 + scalar)  .mockName('add42');\n```\n\n## Custom Matchers[​](#custom-matchers \"Direct link to Custom Matchers\")\n\nFinally, in order to make it less demanding to assert how mock functions have been called, we've added some custom matcher functions for you:\n\n```\n// The mock function was called at least onceexpect(mockFunc).toHaveBeenCalled();// The mock function was called at least once with the specified argsexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);// The last call to the mock function was called with the specified argsexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);// All calls and the name of the mock is written as a snapshotexpect(mockFunc).toMatchSnapshot();\n```\n\nThese matchers are sugar for common forms of inspecting the `.mock` property. You can always do this manually yourself if that's more to your taste or if you need to do something more specific:\n\n```\n// The mock function was called at least onceexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);// The mock function was called at least once with the specified argsexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);// The last call to the mock function was called with the specified argsexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([  arg1,  arg2,]);// The first arg of the last call to the mock function was `42`// (note that there is no sugar helper for this specific of an assertion)expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);// A snapshot will check that a mock was invoked the same number of times,// in the same order, with the same arguments. It will also assert on the name.expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);expect(mockFunc.getMockName()).toBe('a mock name');\n```\n\nFor a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.6/expect).",
    "title": "Mock Functions · Jest",
    "description": "Mock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with new, and allowing test-time configuration of return values.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/upgrading-to-jest29",
    "markdown": "# From v28 to v29 · Jest\n\nUpgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.\n\ninfo\n\nSee [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for the full list of changes.\n\nnote\n\nUpgrading from an older version? You can see the upgrade guide from v27 to v28 [here](https://jestjs.io/docs/28.x/upgrading-to-jest28).\n\n## Compatibility[​](#compatibility \"Direct link to Compatibility\")\n\nThe supported Node versions are 14.15, 16.10, 18.0 and above.\n\n## Snapshot format[​](#snapshot-format \"Direct link to Snapshot format\")\n\nAs announced in the [Jest 28 blog post](https://jestjs.io/blog/2022/04/25/jest-28#future), Jest 29 has changed the default snapshot formatting to `{escapeString: false, printBasicPrototype: false}`.\n\nIf you want to keep the old behavior, you can set the `snapshotFormat` property to:\n\n```\n+ snapshotFormat: {+   escapeString: true,+   printBasicPrototype: true+ }\n```\n\n## JSDOM upgrade[​](#jsdom-upgrade \"Direct link to JSDOM upgrade\")\n\n`jest-environment-jsdom` has upgraded `jsdom` from v19 to v20.\n\ninfo\n\nIf you use `jest-environment-jsdom`, the minimum TypeScript version is set to `4.5`.\n\nNotably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `uuid` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n\n## `pretty-format`[​](#pretty-format \"Direct link to pretty-format\")\n\n`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n\n### `jest-mock`[​](#jest-mock \"Direct link to jest-mock\")\n\nExports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n\n## TypeScript[​](#typescript \"Direct link to TypeScript\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.6/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.mocked()`[​](#jestmocked \"Direct link to jestmocked\")\n\nThe [`jest.mocked()`](https://jestjs.io/docs/29.6/mock-function-api#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n\n```\n- const mockedObject = jest.mocked(someObject, true);+ const mockedObject = jest.mocked(someObject);\n```\n\nTo have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n\n```\n- const mockedObject = jest.mocked(someObject);+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```",
    "title": "From v28 to v29 · Jest",
    "description": "Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/tutorial-react",
    "markdown": "# Testing React Apps · Jest\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Setup with Create React App[​](#setup-with-create-react-app \"Direct link to Setup with Create React App\")\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev react-test-renderer\n```\n\n### Setup without Create React App[​](#setup-without-create-react-app \"Direct link to Setup without Create React App\")\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](https://jestjs.io/docs/29.6/getting-started#using-babel).\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n```\n{  \"dependencies\": {    \"react\": \"<current-version>\",    \"react-dom\": \"<current-version>\"  },  \"devDependencies\": {    \"@babel/preset-env\": \"<current-version>\",    \"@babel/preset-react\": \"<current-version>\",    \"babel-jest\": \"<current-version>\",    \"jest\": \"<current-version>\",    \"react-test-renderer\": \"<current-version>\"  },  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    '@babel/preset-env',    ['@babel/preset-react', {runtime: 'automatic'}],  ],};\n```\n\n**And you're good to go!**\n\n### Snapshot Testing[​](#snapshot-testing \"Direct link to Snapshot Testing\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/29.6/snapshot-testing) for a Link component that renders hyperlinks:\n\nLink.js\n\n```\nimport {useState} from 'react';const STATUS = {  HOVERED: 'hovered',  NORMAL: 'normal',};export default function Link({page, children}) {  const [status, setStatus] = useState(STATUS.NORMAL);  const onMouseEnter = () => {    setStatus(STATUS.HOVERED);  };  const onMouseLeave = () => {    setStatus(STATUS.NORMAL);  };  return (    <a      className={status}      href={page || '#'}      onMouseEnter={onMouseEnter}      onMouseLeave={onMouseLeave}    >      {children}    </a>  );}\n```\n\nnote\n\nExamples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\nLink.test.js\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('changes the class when hovered', () => {  const component = renderer.create(    <Link page=\"http://www.facebook.com\">Facebook</Link>,  );  let tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseEnter();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseLeave();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\n```\nexports[`changes the class when hovered 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 2`] = `<a  className=\"hovered\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 3`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/jestjs/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+[​](#snapshot-testing-with-mocks-enzyme-and-react-16 \"Direct link to Snapshot Testing with Mocks, Enzyme and React 16+\")\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.# Or:Warning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n    \n    ```\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n    \n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n    \n    ```\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n    \n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n4.  Disable warnings all together (should be done in your jest setup file):\n    \n    ```\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n    \n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing[​](#dom-testing \"Direct link to DOM Testing\")\n\nIf you'd like to assert, and manipulate your rendered components you can use [@testing-library/react](https://github.com/testing-library/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following example use `@testing-library/react`.\n\n#### @testing-library/react[​](#testing-libraryreact \"Direct link to @testing-library/react\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\nCheckboxWithLabel.js\n\n```\nimport {useState} from 'react';export default function CheckboxWithLabel({labelOn, labelOff}) {  const [isChecked, setIsChecked] = useState(false);  const onChange = () => {    setIsChecked(!isChecked);  };  return (    <label>      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />      {isChecked ? labelOn : labelOff}    </label>  );}\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';import CheckboxWithLabel from '../CheckboxWithLabel';// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher// unmount and cleanup DOM after the test is finished.afterEach(cleanup);it('CheckboxWithLabel changes the text after click', () => {  const {queryByLabelText, getByLabelText} = render(    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,  );  expect(queryByLabelText(/off/i)).toBeTruthy();  fireEvent.click(getByLabelText(/off/i));  expect(queryByLabelText(/on/i)).toBeTruthy();});\n```\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/jestjs/jest/tree/main/examples/react-testing-library).\n\n### Custom transformers[​](#custom-transformers \"Direct link to Custom transformers\")\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\ncustom-transformer.js\n\n```\n'use strict';const {transform} = require('@babel/core');const jestPreset = require('babel-preset-jest');module.exports = {  process(src, filename) {    const result = transform(src, {      filename,      presets: [jestPreset],    });    return result || src;  },};\n```\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n```\nconst babelJest = require('babel-jest');module.exports = babelJest.createTransformer({  presets: ['my-custom-preset'],});\n```\n\nSee [dedicated docs](https://jestjs.io/docs/29.6/code-transformation#writing-custom-transformers) for more details.",
    "title": "Testing React Apps · Jest",
    "description": "At Facebook, we use Jest to test React applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/webpack",
    "markdown": "# Using with webpack · Jest\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack _does_ offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example[​](#a-webpack-example \"Direct link to A webpack example\")\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\nwebpack.config.js\n\n```\nmodule.exports = {  module: {    rules: [      {        test: /\\.jsx?$/,        exclude: ['node_modules'],        use: ['babel-loader'],      },      {        test: /\\.css$/,        use: ['style-loader', 'css-loader'],      },      {        test: /\\.gif$/,        type: 'asset/inline',      },      {        test: /\\.(ttf|eot|svg)$/,        type: 'asset/resource',      },    ],  },  resolve: {    alias: {      config$: './configs/app-config.js',      react: './vendor/react-master',    },    extensions: ['.js', '.jsx'],    modules: [      'node_modules',      'bower_components',      'shared',      '/shared/vendor/modules',    ],  },};\n```\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](https://jestjs.io/docs/29.6/getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](https://jestjs.io/docs/29.6/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets[​](#handling-static-assets \"Direct link to Handling Static Assets\")\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\njest.config.js\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',  },};\n```\n\nAnd the mock files themselves:\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n```\nmodule.exports = 'test-file-stub';\n```\n\n### Mocking CSS Modules[​](#mocking-css-modules \"Direct link to Mocking CSS Modules\")\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](https://jestjs.io/docs/29.6/snapshot-testing).\n\njest.config.js (for CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': 'identity-obj-proxy',  },};\n```\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](https://jestjs.io/docs/29.6/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js (for custom transformers and CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(css|less)$': 'identity-obj-proxy',  },  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n### Configuring Jest to find our files[​](#configuring-jest-to-find-our-files \"Direct link to Configuring Jest to find our files\")\n\nNow that Jest knows how to process our files, we need to tell it how to _find_ them. For webpack's `modules`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\njest.config.js\n\n```\nmodule.exports = {  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nnote\n\n`<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom [`rootDir`](https://jestjs.io/docs/29.6/configuration#rootdir-string) option in your configuration.\n\nSimilarly, Jest's counterpart for Webpack's `resolve.roots` (an alternative to setting `NODE_PATH`) is `modulePaths`.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',    '^react(.*)$': '<rootDir>/vendor/react-master$1',    '^config$': '<rootDir>/configs/app-config.js',  },};\n```\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n## Using with webpack[​](#using-with-webpack \"Direct link to Using with webpack\")\n\nIn addition to installing `babel-jest` as described earlier, you'll need to add `@babel/preset-env` like so:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-env\n```\n\nThen, you'll want to configure Babel as follows:\n\n.babelrc\n\n```\n{  \"presets\": [\"@babel/preset-env\"]}\n```\n\ntip\n\nJest caches files to speed up test execution. If you updated `.babelrc` and Jest is not working as expected, try clearing the cache by running `jest --clearCache`.\n\ntip\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n.babelrc\n\n```\n{  \"presets\": [[\"env\", {\"modules\": false}]],  \"plugins\": [\"syntax-dynamic-import\"],  \"env\": {    \"test\": {      \"plugins\": [\"dynamic-import-node\"]    }  }}\n```\n\nFor an example of how to use Jest with webpack with React, you can view one [here](https://github.com/jenniferabowd/jest_webpack_example).",
    "title": "Using with webpack · Jest",
    "description": "Jest can be used in projects that use webpack to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/cli",
    "markdown": "# Jest CLI Options · Jest\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](https://jestjs.io/docs/29.6/configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line[​](#running-from-the-command-line \"Direct link to Running from the command line\")\n\nRun all tests (default):\n\nRun only the tests that were specified with a pattern or filename:\n\n```\njest my-test #orjest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\nRun watch mode:\n\n```\njest --watch #runs jest -o by defaultjest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with package manager[​](#using-with-package-manager \"Direct link to Using with package manager\")\n\nIf you run Jest via your package manager, you can still pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\nyou can use:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support[​](#camelcase--dashed-args-support \"Direct link to Camelcase & dashed args support\")\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n```\njest --collect-coveragejest --collectCoverage\n```\n\nArguments can also be mixed:\n\n```\njest --update-snapshot --detectOpenHandles\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nnote\n\nCLI options take precedence over values from the [Configuration](https://jestjs.io/docs/29.6/configuration).\n\n*   [Camelcase & dashed args support](#camelcase--dashed-args-support)\n*   [Options](#options)\n*   [Reference](#reference)\n    *   [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n    *   [`--bail[=<n>]`](#--bailn)\n    *   [`--cache`](#--cache)\n    *   [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n    *   [`--changedSince`](#--changedsince)\n    *   [`--ci`](#--ci)\n    *   [`--clearCache`](#--clearcache)\n    *   [`--clearMocks`](#--clearmocks)\n    *   [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n    *   [`--colors`](#--colors)\n    *   [`--config=<path>`](#--configpath)\n    *   [`--coverage[=<boolean>]`](#--coverageboolean)\n    *   [`--coverageDirectory=<path>`](#--coveragedirectorypath)\n    *   [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n    *   [`--debug`](#--debug)\n    *   [`--detectOpenHandles`](#--detectopenhandles)\n    *   [`--env=<environment>`](#--envenvironment)\n    *   [`--errorOnDeprecated`](#--errorondeprecated)\n    *   [`--expand`](#--expand)\n    *   [`--filter=<file>`](#--filterfile)\n    *   [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n    *   [`--forceExit`](#--forceexit)\n    *   [`--help`](#--help)\n    *   [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n    *   [`--init`](#--init)\n    *   [`--injectGlobals`](#--injectglobals)\n    *   [`--json`](#--json)\n    *   [`--lastCommit`](#--lastcommit)\n    *   [`--listTests`](#--listtests)\n    *   [`--logHeapUsage`](#--logheapusage)\n    *   [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n    *   [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n    *   [`--noStackTrace`](#--nostacktrace)\n    *   [`--notify`](#--notify)\n    *   [`--onlyChanged`](#--onlychanged)\n    *   [`--openHandlesTimeout=<milliseconds>`](#--openhandlestimeoutmilliseconds)\n    *   [`--outputFile=<filename>`](#--outputfilefilename)\n    *   [`--passWithNoTests`](#--passwithnotests)\n    *   [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n    *   [`--randomize`](#--randomize)\n    *   [`--reporters`](#--reporters)\n    *   [`--resetMocks`](#--resetmocks)\n    *   [`--restoreMocks`](#--restoremocks)\n    *   [`--roots`](#--roots)\n    *   [`--runInBand`](#--runinband)\n    *   [`--runTestsByPath`](#--runtestsbypath)\n    *   [`--seed=<num>`](#--seednum)\n    *   [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n    *   [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n    *   [`--shard`](#--shard)\n    *   [`--showConfig`](#--showconfig)\n    *   [`--showSeed`](#--showseed)\n    *   [`--silent`](#--silent)\n    *   [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n    *   [`--testLocationInResults`](#--testlocationinresults)\n    *   [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n    *   [`--testNamePattern=<regex>`](#--testnamepatternregex)\n    *   [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n    *   [`--testPathPattern=<regex>`](#--testpathpatternregex)\n    *   [`--testRunner=<path>`](#--testrunnerpath)\n    *   [`--testSequencer=<path>`](#--testsequencerpath)\n    *   [`--testTimeout=<number>`](#--testtimeoutnumber)\n    *   [`--updateSnapshot`](#--updatesnapshot)\n    *   [`--useStderr`](#--usestderr)\n    *   [`--verbose`](#--verbose)\n    *   [`--version`](#--version)\n    *   [`--watch`](#--watch)\n    *   [`--watchAll`](#--watchall)\n    *   [`--watchman`](#--watchman)\n    *   [`--workerThreads`](#--workerthreads)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `jest <regexForTestFiles>`[​](#jest-regexfortestfiles \"Direct link to jest-regexfortestfiles\")\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`[​](#--bailn \"Direct link to --bailn\")\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`[​](#--cache \"Direct link to --cache\")\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`[​](#--changedfileswithancestor \"Direct link to --changedfileswithancestor\")\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`[​](#--changedsince \"Direct link to --changedsince\")\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`[​](#--ci \"Direct link to --ci\")\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`[​](#--clearcache \"Direct link to --clearcache\")\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`[​](#--clearmocks \"Direct link to --clearmocks\")\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](https://jestjs.io/docs/29.6/jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`[​](#--collectcoveragefromglob \"Direct link to --collectcoveragefromglob\")\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`[​](#--colors \"Direct link to --colors\")\n\nForces test results output highlighting even if stdout is not a TTY.\n\nnote\n\nAlternatively you can set the environment variable `FORCE_COLOR=true` to forcefully enable or `FORCE_COLOR=false` to disable colorized output. The use of `FORCE_COLOR` overrides all other color support checks.\n\n### `--config=<path>`[​](#--configpath \"Direct link to --configpath\")\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`[​](#--coverageboolean \"Direct link to --coverageboolean\")\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageDirectory=<path>`[​](#--coveragedirectorypath \"Direct link to --coveragedirectorypath\")\n\nThe directory where Jest should output its coverage files.\n\n### `--coverageProvider=<provider>`[​](#--coverageproviderprovider \"Direct link to --coverageproviderprovider\")\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\n### `--debug`[​](#--debug \"Direct link to --debug\")\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`[​](#--detectopenhandles \"Direct link to --detectopenhandles\")\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`[​](#--envenvironment \"Direct link to --envenvironment\")\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`[​](#--errorondeprecated \"Direct link to --errorondeprecated\")\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`[​](#--expand \"Direct link to --expand\")\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`[​](#--filterfile \"Direct link to --filterfile\")\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with shape `{ filtered: Array<{ test: string }> }`. Especially useful when used in conjunction with a testing infrastructure to filter known broken tests, e.g.\n\nmy-filter.js\n\n```\nmodule.exports = testPaths => {  const allowedPaths = testPaths    .filter(filteringFunction)    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]  return {    filtered: allowedPaths,  };};\n```\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`[​](#--forceexit \"Direct link to --forceexit\")\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`[​](#--help \"Direct link to --help\")\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`[​](#--ignoreprojects-project1--projectn \"Direct link to --ignoreprojects-project1--projectn\")\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--init`[​](#--init \"Direct link to --init\")\n\nGenerate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.\n\n### `--injectGlobals`[​](#--injectglobals \"Direct link to --injectglobals\")\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n```\nimport {expect, jest, test} from '@jest/globals';jest.useFakeTimers();test('some test', () => {  expect(Date.now()).toBe(0);});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`[​](#--json \"Direct link to --json\")\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`[​](#--lastcommit \"Direct link to --lastcommit\")\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`[​](#--listtests \"Direct link to --listtests\")\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`[​](#--logheapusage \"Direct link to --logheapusage\")\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`[​](#--maxconcurrencynum \"Direct link to --maxconcurrencynum\")\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`[​](#--maxworkersnumstring \"Direct link to --maxworkersnumstring\")\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`[​](#--nostacktrace \"Direct link to --nostacktrace\")\n\nDisables stack trace in test results output.\n\n### `--notify`[​](#--notify \"Direct link to --notify\")\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`[​](#--onlychanged \"Direct link to --onlychanged\")\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--openHandlesTimeout=<milliseconds>`[​](#--openhandlestimeoutmilliseconds \"Direct link to --openhandlestimeoutmilliseconds\")\n\nWhen `--detectOpenHandles` and `--forceExit` are _disabled_, Jest will print a warning if the process has not exited cleanly after this number of milliseconds. A value of `0` disables the warning. Defaults to `1000`.\n\n### `--outputFile=<filename>`[​](#--outputfilefilename \"Direct link to --outputfilefilename\")\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](https://jestjs.io/docs/29.6/configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`[​](#--passwithnotests \"Direct link to --passwithnotests\")\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`[​](#--projects-path1--pathn \"Direct link to --projects-path1--pathn\")\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](https://jestjs.io/docs/29.6/configuration#projects-arraystring--projectconfig) configuration option.\n\nnote\n\nIf configuration files are found in the specified paths, _all_ projects specified within those configuration files will be run.\n\n### `--randomize`[​](#--randomize \"Direct link to --randomize\")\n\nShuffle the order of the tests within a file. The shuffling is based on the seed. See [`--seed=<num>`](#--seednum) for more info.\n\nSeed value is displayed when this option is set. Equivalent to setting the CLI option [`--showSeed`](#--showseed).\n\n```\njest --randomize --seed 1234\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--reporters`[​](#--reporters \"Direct link to --reporters\")\n\nRun tests with specified reporters. [Reporter options](https://jestjs.io/docs/29.6/configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`[​](#--resetmocks \"Direct link to --resetmocks\")\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](https://jestjs.io/docs/29.6/jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`[​](#--restoremocks \"Direct link to --restoremocks\")\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](https://jestjs.io/docs/29.6/jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`[​](#--roots \"Direct link to --roots\")\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`[​](#--runinband \"Direct link to --runinband\")\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`[​](#--runtestsbypath \"Direct link to --runtestsbypath\")\n\nRun only the tests that were specified with their exact paths. This avoids converting them into a regular expression and matching it against every single file.\n\nFor example, given the following file structure:\n\n```\n__tests__└── t1.test.js # test└── t2.test.js # test\n```\n\nWhen ran with a pattern, no test is found:\n\n```\njest --runTestsByPath __tests__/t\n```\n\nOutput:\n\nHowever, passing an exact path will execute only the given test:\n\n```\njest --runTestsByPath __tests__/t1.test.js\n```\n\nOutput:\n\n```\nPASS __tests__/t1.test.js\n```\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--seed=<num>`[​](#--seednum \"Direct link to --seednum\")\n\nSets a seed value that can be retrieved in a test file via [`jest.getSeed()`](https://jestjs.io/docs/29.6/jest-object#jestgetseed). The seed value must be between `-0x80000000` and `0x7fffffff` inclusive (`-2147483648` (`-(2 ** 31)`) and `2147483647` (`2 ** 31 - 1`) in decimal).\n\ntip\n\nIf this option is not specified Jest will randomly generate the value. You can use the [`--showSeed`](#--showseed) flag to print the seed in the test report summary.\n\n### `--selectProjects <project1> ... <projectN>`[​](#--selectprojects-project1--projectn \"Direct link to --selectprojects-project1--projectn\")\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`[​](#--setupfilesafterenv-path1--pathn \"Direct link to --setupfilesafterenv-path1--pathn\")\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`[​](#--shard \"Direct link to --shard\")\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](https://jestjs.io/docs/29.6/configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n```\njest --shard=1/3jest --shard=2/3jest --shard=3/3\n```\n\n### `--showConfig`[​](#--showconfig \"Direct link to --showconfig\")\n\nPrint your Jest config and then exits.\n\n### `--showSeed`[​](#--showseed \"Direct link to --showseed\")\n\nPrints the seed value in the test report summary. See [`--seed=<num>`](#--seednum) for the details.\n\nCan also be set in configuration. See [`showSeed`](https://jestjs.io/docs/29.6/configuration#showseed-boolean).\n\n### `--silent`[​](#--silent \"Direct link to --silent\")\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`[​](#--testenvironmentoptionsjson-string \"Direct link to --testenvironmentoptionsjson-string\")\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`[​](#--testlocationinresults \"Direct link to --testlocationinresults\")\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nnote\n\nIn the resulting object `column` is 0-indexed while `line` is not.\n\n```\n{  \"column\": 4,  \"line\": 5}\n```\n\n### `--testMatch glob1 ... globN`[​](#--testmatch-glob1--globn \"Direct link to --testmatch-glob1--globn\")\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](https://jestjs.io/docs/29.6/configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`[​](#--testnamepatternregex \"Direct link to --testnamepatternregex\")\n\nAlias: `-t`. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like `'GET /api/posts with auth'`, then you can use `jest -t=auth`.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`[​](#--testpathignorepatternsregexarray \"Direct link to --testpathignorepatternsregexarray\")\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPattern=<regex>`[​](#--testpathpatternregex \"Direct link to --testpathpatternregex\")\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`[​](#--testrunnerpath \"Direct link to --testrunnerpath\")\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`[​](#--testsequencerpath \"Direct link to --testsequencerpath\")\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](https://jestjs.io/docs/29.6/configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`[​](#--testtimeoutnumber \"Direct link to --testtimeoutnumber\")\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`[​](#--updatesnapshot \"Direct link to --updatesnapshot\")\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`[​](#--usestderr \"Direct link to --usestderr\")\n\nDivert all output to stderr.\n\n### `--verbose`[​](#--verbose \"Direct link to --verbose\")\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`[​](#--version \"Direct link to --version\")\n\nAlias: `-v`. Print the version and exit.\n\n### `--watch`[​](#--watch \"Direct link to --watch\")\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\ntip\n\nUse `--no-watch` (or `--watch=false`) to explicitly disable the watch mode if it was enabled using `--watch`. In most CI environments, this is automatically handled for you.\n\n### `--watchAll`[​](#--watchall \"Direct link to --watchall\")\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\ntip\n\nUse `--no-watchAll` (or `--watchAll=false`) to explicitly disable the watch mode if it was enabled using `--watchAll`. In most CI environments, this is automatically handled for you.\n\n### `--watchman`[​](#--watchman \"Direct link to --watchman\")\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n### `--workerThreads`[​](#--workerthreads \"Direct link to --workerthreads\")\n\nWhether to use [worker threads](https://nodejs.org/dist/latest/docs/api/worker_threads.html) for parallelization. [Child processes](https://nodejs.org/dist/latest/docs/api/child_process.html) are used by default.",
    "title": "Jest CLI Options · Jest",
    "description": "The jest command line runner has a number of useful options. You can run jest --help to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's Configuration options can also be specified through the CLI.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.6/mock-function-api",
    "markdown": "# Mock Functions · Jest\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.6/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`mockFn.getMockName()`](#mockfngetmockname)\n    *   [`mockFn.mock.calls`](#mockfnmockcalls)\n    *   [`mockFn.mock.results`](#mockfnmockresults)\n    *   [`mockFn.mock.instances`](#mockfnmockinstances)\n    *   [`mockFn.mock.contexts`](#mockfnmockcontexts)\n    *   [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n    *   [`mockFn.mockClear()`](#mockfnmockclear)\n    *   [`mockFn.mockReset()`](#mockfnmockreset)\n    *   [`mockFn.mockRestore()`](#mockfnmockrestore)\n    *   [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n    *   [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n    *   [`mockFn.mockName(name)`](#mockfnmocknamename)\n    *   [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n    *   [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n    *   [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n    *   [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n    *   [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n    *   [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n    *   [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n    *   [`mockFn.withImplementation(fn, callback)`](#mockfnwithimplementationfn-callback)\n*   [Replaced Properties](#replaced-properties)\n    *   [`replacedProperty.replaceValue(value)`](#replacedpropertyreplacevaluevalue)\n    *   [`replacedProperty.restore()`](#replacedpropertyrestore)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`jest.fn(implementation?)`](#jestfnimplementation)\n    *   [`jest.Mock<T>`](#jestmockt)\n    *   [`jest.Mocked<Source>`](#jestmockedsource)\n    *   [`jest.Replaced<Source>`](#jestreplacedsource)\n    *   [`jest.mocked(source, options?)`](#jestmockedsource-options)\n    *   [`jest.Spied<Source>`](#jestspiedsource)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `mockFn.getMockName()`[​](#mockfngetmockname \"Direct link to mockfngetmockname\")\n\nReturns the mock name string set by calling [`.mockName()`](#mockfnmocknamename).\n\n### `mockFn.mock.calls`[​](#mockfnmockcalls \"Direct link to mockfnmockcalls\")\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n```\n[  ['arg1', 'arg2'],  ['arg3', 'arg4'],];\n```\n\n### `mockFn.mock.results`[​](#mockfnmockresults \"Direct link to mockfnmockresults\")\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n*   `'return'` - Indicates that the call completed by returning normally.\n*   `'throw'` - Indicates that the call completed by throwing a value.\n*   `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n```\n[  {    type: 'return',    value: 'result1',  },  {    type: 'throw',    value: {      /* Error instance */    },  },  {    type: 'return',    value: 'result2',  },];\n```\n\n### `mockFn.mock.instances`[​](#mockfnmockinstances \"Direct link to mockfnmockinstances\")\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n```\nconst mockFn = jest.fn();const a = new mockFn();const b = new mockFn();mockFn.mock.instances[0] === a; // truemockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`[​](#mockfnmockcontexts \"Direct link to mockfnmockcontexts\")\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n```\nconst mockFn = jest.fn();const boundMockFn = mockFn.bind(thisContext0);boundMockFn('a', 'b');mockFn.call(thisContext1, 'a', 'b');mockFn.apply(thisContext2, ['a', 'b']);mockFn.mock.contexts[0] === thisContext0; // truemockFn.mock.contexts[1] === thisContext1; // truemockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`[​](#mockfnmocklastcall \"Direct link to mockfnmocklastcall\")\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n### `mockFn.mockClear()`[​](#mockfnmockclear \"Direct link to mockfnmockclear\")\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nThe [`clearMocks`](https://jestjs.io/docs/29.6/configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\ncaution\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\n### `mockFn.mockReset()`[​](#mockfnmockreset \"Direct link to mockfnmockreset\")\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also replaces the mock implementation with an empty function, returning `undefined`.\n\nThe [`resetMocks`](https://jestjs.io/docs/29.6/configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`[​](#mockfnmockrestore \"Direct link to mockfnmockrestore\")\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.6/configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\ninfo\n\n`mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\n### `mockFn.mockImplementation(fn)`[​](#mockfnmockimplementationfn \"Direct link to mockfnmockimplementationfn\")\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);mockFn(0); // 42mockFn(1); // 43mockFn.mockImplementation(scalar => 36 + scalar);mockFn(2); // 38mockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n*   JavaScript\n*   TypeScript\n\nSomeClass.js\n\n```\nmodule.exports = class SomeClass {  method(a, b) {}};\n```\n\nSomeClass.test.js\n\n```\nconst SomeClass = require('./SomeClass');jest.mock('./SomeClass'); // this happens automatically with automockingconst mockMethod = jest.fn();SomeClass.mockImplementation(() => {  return {    method: mockMethod,  };});const some = new SomeClass();some.method('a', 'b');console.log('Calls to method:', mockMethod.mock.calls);\n```\n\n### `mockFn.mockImplementationOnce(fn)`[​](#mockfnmockimplementationoncefn \"Direct link to mockfnmockimplementationoncefn\")\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));mockFn((err, val) => console.log(val)); // truemockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n```\nconst mockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`[​](#mockfnmocknamename \"Direct link to mockfnmocknamename\")\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n```\nconst mockFn = jest.fn().mockName('mockedFunction');// mockFn();expect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n```\nexpect(mockedFunction).toHaveBeenCalled()Expected number of calls: >= 1Received number of calls:    0\n```\n\n### `mockFn.mockReturnThis()`[​](#mockfnmockreturnthis \"Direct link to mockfnmockreturnthis\")\n\nShorthand for:\n\n```\njest.fn(function () {  return this;});\n```\n\n### `mockFn.mockReturnValue(value)`[​](#mockfnmockreturnvaluevalue \"Direct link to mockfnmockreturnvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => value);\n```\n\nAccepts a value that will be returned whenever the mock function is called.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mock = jest.fn();mock.mockReturnValue(42);mock(); // 42mock.mockReturnValue(43);mock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`[​](#mockfnmockreturnvalueoncevalue \"Direct link to mockfnmockreturnvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockReturnValue('default')  .mockReturnValueOnce('first call')  .mockReturnValueOnce('second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`[​](#mockfnmockresolvedvaluevalue \"Direct link to mockfnmockresolvedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest.fn().mockResolvedValue(43);  await asyncMock(); // 43});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`[​](#mockfnmockresolvedvalueoncevalue \"Direct link to mockfnmockresolvedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValue('default')    .mockResolvedValueOnce('first call')    .mockResolvedValueOnce('second call');  await asyncMock(); // 'first call'  await asyncMock(); // 'second call'  await asyncMock(); // 'default'  await asyncMock(); // 'default'});\n```\n\n### `mockFn.mockRejectedValue(value)`[​](#mockfnmockrejectedvaluevalue \"Direct link to mockfnmockrejectedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockRejectedValue(new Error('Async error message'));  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`[​](#mockfnmockrejectedvalueoncevalue \"Direct link to mockfnmockrejectedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValueOnce('first call')    .mockRejectedValueOnce(new Error('Async error message'));  await asyncMock(); // 'first call'  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.withImplementation(fn, callback)`[​](#mockfnwithimplementationfn-callback \"Direct link to mockfnwithimplementationfn-callback\")\n\nAccepts a function which should be temporarily used as the implementation of the mock while the callback is being executed.\n\n```\ntest('test', () => {  const mock = jest.fn(() => 'outside callback');  mock.withImplementation(    () => 'inside callback',    () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n`mockFn.withImplementation` can be used regardless of whether or not the callback is asynchronous (returns a `thenable`). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation.\n\n```\ntest('async test', async () => {  const mock = jest.fn(() => 'outside callback');  // We await this call since the callback is async  await mock.withImplementation(    () => 'inside callback',    async () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n## Replaced Properties[​](#replaced-properties \"Direct link to Replaced Properties\")\n\n### `replacedProperty.replaceValue(value)`[​](#replacedpropertyreplacevaluevalue \"Direct link to replacedpropertyreplacevaluevalue\")\n\nChanges the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call [`jest.replaceProperty()`](https://jestjs.io/docs/29.6/jest-object#jestreplacepropertyobject-propertykey-value) multiple times on same property.\n\n### `replacedProperty.restore()`[​](#replacedpropertyrestore \"Direct link to replacedpropertyrestore\")\n\nRestores object's property to the original value.\n\nBeware that `replacedProperty.restore()` only works when the property value was replaced with [`jest.replaceProperty()`](https://jestjs.io/docs/29.6/jest-object#jestreplacepropertyobject-propertykey-value).\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.6/configuration#restoremocks-boolean) configuration option is available to restore replaced properties automatically before each test.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.6/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`[​](#jestfnimplementation \"Direct link to jestfnimplementation\")\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](https://jestjs.io/docs/29.6/jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n```\nimport {expect, jest, test} from '@jest/globals';import type add from './add';import calculate from './calc';test('calculate calls add', () => {  // Create a new mock that can be used in place of `add`.  const mockAdd = jest.fn<typeof add>();  // `.mockImplementation()` now can infer that `a` and `b` are `number`  // and that the returned value is a `number`.  mockAdd.mockImplementation((a, b) => {    // Yes, this mock is still adding two numbers but imagine this    // was a complex function we are mocking.    return a + b;  });  // `mockAdd` is properly typed and therefore accepted by anything  // requiring `add`.  calculate(mockAdd, 1, 2);  expect(mockAdd).toHaveBeenCalledTimes(1);  expect(mockAdd).toHaveBeenCalledWith(1, 2);});\n```\n\n### `jest.Mock<T>`[​](#jestmockt \"Direct link to jestmockt\")\n\nConstructs the type of a mock function, e.g. the return type of `jest.fn()`. It can be useful if you have to defined a recursive mock function:\n\n```\nimport {jest} from '@jest/globals';const sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {  if (value === 0) {    return 0;  } else {    return value + fn(value - 1);  }});\n```\n\n### `jest.Mocked<Source>`[​](#jestmockedsource \"Direct link to jestmockedsource\")\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n```\nimport {expect, jest, test} from '@jest/globals';import type {fetch} from 'node-fetch';jest.mock('node-fetch');let mockedFetch: jest.Mocked<typeof fetch>;afterEach(() => {  mockedFetch.mockClear();});test('makes correct call', () => {  mockedFetch = getMockedFetch();  // ...});test('returns correct data', () => {  mockedFetch = getMockedFetch();  // ...});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.Replaced<Source>`[​](#jestreplacedsource \"Direct link to jestreplacedsource\")\n\nThe `jest.Replaced<Source>` utility type returns the `Source` type wrapped with type definitions of Jest [replaced property](#replaced-properties).\n\nsrc/utils.ts\n\n```\nexport function isLocalhost(): boolean {  return process.env['HOSTNAME'] === 'localhost';}\n```\n\nsrc/\\_\\_tests\\_\\_/utils.test.ts\n\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';import {isLocalhost} from '../utils';let replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;afterEach(() => {  replacedEnv?.restore();});it('isLocalhost should detect localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});  expect(isLocalhost()).toBe(true);});it('isLocalhost should detect non-localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});  expect(isLocalhost()).toBe(false);});\n```\n\n### `jest.mocked(source, options?)`[​](#jestmockedsource-options \"Direct link to jestmockedsource-options\")\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\nsong.ts\n\n```\nexport const song = {  one: {    more: {      time: (t: number) => {        return t;      },    },  },};\n```\n\nsong.test.ts\n\n```\nimport {expect, jest, test} from '@jest/globals';import {song} from './song';jest.mock('./song');jest.spyOn(console, 'log');const mockedSong = jest.mocked(song);// or through `jest.Mocked<Source>`// const mockedSong = song as jest.Mocked<typeof song>;test('deep method is typed correctly', () => {  mockedSong.one.more.time.mockReturnValue(12);  expect(mockedSong.one.more.time(10)).toBe(12);  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);});test('direct usage', () => {  jest.mocked(console.log).mockImplementation(() => {    return;  });  console.log('one more time');  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);});\n```\n\n### `jest.Spied<Source>`[​](#jestspiedsource \"Direct link to jestspiedsource\")\n\nConstructs the type of a spied class or function (i.e. the return type of `jest.spyOn()`).\n\n\\_\\_utils\\_\\_/setDateNow.ts\n\n```\nimport {jest} from '@jest/globals';export function setDateNow(now: number): jest.Spied<typeof Date.now> {  return jest.spyOn(Date, 'now').mockReturnValue(now);}\n```\n\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';import {setDateNow} from './__utils__/setDateNow';let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;afterEach(() => {  spiedDateNow?.mockReset();});test('renders correctly with a given date', () => {  spiedDateNow = setDateNow(1_482_363_367_071);  // ...  expect(spiedDateNow).toHaveBeenCalledTimes(1);});\n```\n\nTypes of a class or function can be passed as type argument to `jest.Spied<Source>`. If you prefer to constrain the input type, use: `jest.SpiedClass<Source>` or `jest.SpiedFunction<Source>`.\n\nUse `jest.SpiedGetter<Source>` or `jest.SpiedSetter<Source>` to create the type of a spied getter or setter respectively.",
    "title": "Mock Functions · Jest",
    "description": "Mock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with jest.fn(). If no implementation is given, the mock function will return undefined when invoked.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/api",
    "markdown": "# Globals · Jest\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.5/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`afterAll(fn, timeout)`](#afterallfn-timeout)\n    *   [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n    *   [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n    *   [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n    *   [`describe(name, fn)`](#describename-fn)\n    *   [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n    *   [`describe.only(name, fn)`](#describeonlyname-fn)\n    *   [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n    *   [`describe.skip(name, fn)`](#describeskipname-fn)\n    *   [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n    *   [`test(name, fn, timeout)`](#testname-fn-timeout)\n    *   [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n    *   [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n    *   [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n    *   [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n    *   [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n    *   [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n    *   [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n    *   [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n    *   [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n    *   [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n    *   [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n    *   [`test.skip(name, fn)`](#testskipname-fn)\n    *   [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n    *   [`test.todo(name)`](#testtodoname)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`.each`](#each)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `afterAll(fn, timeout)`[​](#afterallfn-timeout \"Direct link to afterallfn-timeout\")\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterAll(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`[​](#aftereachfn-timeout \"Direct link to aftereachfn-timeout\")\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterEach(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`[​](#beforeallfn-timeout \"Direct link to beforeallfn-timeout\")\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeAll(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});// Since we only set up the database once in this example, it's important// that our tests don't modify it.test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`[​](#beforeeachfn-timeout \"Direct link to beforeeachfn-timeout\")\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeEach(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`[​](#describename-fn \"Direct link to describename-fn\")\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n```\nconst myBeverage = {  delicious: true,  sour: false,};describe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n```\nconst binaryStringToNumber = binString => {  if (!/^[01]+$/.test(binString)) {    throw new CustomError('Not a binary number.');  }  return parseInt(binString, 2);};describe('binaryStringToNumber', () => {  describe('given an invalid binary string', () => {    test('composed of non-numbers throws CustomError', () => {      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);    });    test('with extra whitespace throws CustomError', () => {      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);    });  });  describe('given a valid binary string', () => {    test('returns the correct number', () => {      expect(binaryStringToNumber('100')).toBe(4);    });  });});\n```\n\n### `describe.each(table)(name, fn, timeout)`[​](#describeeachtablename-fn-timeout \"Direct link to describeeachtablename-fn-timeout\")\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1\\. `describe.each(table)(name, fn, timeout)`[​](#1-describeeachtablename-fn-timeout \"Direct link to 1-describeeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`.\n    \n*   `name`: `String` the title of the test suite.\n    \n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments.\n    \n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n    \n\nExample:\n\n```\ndescribe.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n```\ndescribe.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n#### 2\\. ``describe.each`table`(name, fn, timeout)``[​](#2-describeeachtablename-fn-timeout \"Direct link to 2-describeeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ndescribe.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('$a + $b', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n### `describe.only(name, fn)`[​](#describeonlyname-fn \"Direct link to describeonlyname-fn\")\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n```\ndescribe.only('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe('my other beverage', () => {  // ... will be skipped});\n```\n\n### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn \"Direct link to describeonlyeachtablename-fn\")\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and ``fdescribe.each`table`(name, fn)``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn-1 \"Direct link to describeonlyeachtablename-fn-1\")\n\n```\ndescribe.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.only.each`table`(name, fn)``[​](#describeonlyeachtablename-fn-2 \"Direct link to describeonlyeachtablename-fn-2\")\n\n```\ndescribe.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('passes', () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `describe.skip(name, fn)`[​](#describeskipname-fn \"Direct link to describeskipname-fn\")\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n```\ndescribe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe.skip('my other beverage', () => {  // ... will be skipped});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn \"Direct link to describeskipeachtablename-fn\")\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and ``xdescribe.each`table`(name, fn)``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn-1 \"Direct link to describeskipeachtablename-fn-1\")\n\n```\ndescribe.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.skip.each`table`(name, fn)``[​](#describeskipeachtablename-fn-2 \"Direct link to describeskipeachtablename-fn-2\")\n\n```\ndescribe.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('will not be run', () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test(name, fn, timeout)`[​](#testname-fn-timeout \"Direct link to testname-fn-timeout\")\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n```\ntest('did not rain', () => {  expect(inchesOfRain()).toBe(0);});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nIf a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n```\ntest('has lemon in it', () => {  return fetchBeverageList().then(list => {    expect(list).toContain('lemon');  });});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves. For more details, see [Testing Asynchronous Code](https://jestjs.io/docs/29.5/asynchronous) page.\n\ntip\n\nJest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test [callbacks](https://jestjs.io/docs/29.5/asynchronous#callbacks).\n\n### `test.concurrent(name, fn, timeout)`[​](#testconcurrentname-fn-timeout \"Direct link to testconcurrentname-fn-timeout\")\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\ncaution\n\n`test.concurrent` is considered experimental - see [here](https://github.com/jestjs/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues.\n\nUse `test.concurrent` if you want the test to run concurrently.\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\n```\ntest.concurrent('addition of 2 numbers', async () => {  expect(5 + 3).toBe(8);});test.concurrent('subtraction 2 numbers', async () => {  expect(5 - 3).toBe(2);});\n```\n\ntip\n\nUse the [`maxConcurrency`](https://jestjs.io/docs/29.5/configuration#maxconcurrency-number) configuration option to prevent Jest from executing more than the specified amount of tests at the same time.\n\n### `test.concurrent.each(table)(name, fn, timeout)`[​](#testconcurrenteachtablename-fn-timeout \"Direct link to testconcurrenteachtablename-fn-timeout\")\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1\\. `test.concurrent.each(table)(name, fn, timeout)`[​](#1-testconcurrenteachtablename-fn-timeout \"Direct link to 1-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.concurrent.each`table`(name, fn, timeout)``[​](#2-testconcurrenteachtablename-fn-timeout \"Direct link to 2-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn \"Direct link to testconcurrentonlyeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn-1 \"Direct link to testconcurrentonlyeachtablename-fn-1\")\n\n```\ntest.concurrent.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn \"Direct link to testonlyeachtablename-fn\")\n\n```\ntest.concurrent.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn \"Direct link to testconcurrentskipeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn-1 \"Direct link to testconcurrentskipeachtablename-fn-1\")\n\n```\ntest.concurrent.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.concurrent.skip.each`table`(name, fn)``[​](#testconcurrentskipeachtablename-fn-2 \"Direct link to testconcurrentskipeachtablename-fn-2\")\n\n```\ntest.concurrent.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.each(table)(name, fn, timeout)`[​](#testeachtablename-fn-timeout \"Direct link to testeachtablename-fn-timeout\")\n\nAlso under the alias: `it.each(table)(name, fn)` and ``it.each`table`(name, fn)``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1\\. `test.each(table)(name, fn, timeout)`[​](#1-testeachtablename-fn-timeout \"Direct link to 1-testeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n```\ntest.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.each`table`(name, fn, timeout)``[​](#2-testeachtablename-fn-timeout \"Direct link to 2-testeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.failing(name, fn, timeout)`[​](#testfailingname-fn-timeout \"Direct link to testfailingname-fn-timeout\")\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n```\ntest.failing('it is not equal', () => {  expect(5).toBe(6); // this test will pass});test.failing('it is equal', () => {  expect(10).toBe(10); // this test will fail});\n```\n\n### `test.failing.each(name, fn, timeout)`[​](#testfailingeachname-fn-timeout \"Direct link to testfailingeachname-fn-timeout\")\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and ``it.failing.each`table`(name, fn)``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n```\ntest.failing.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.only.failing(name, fn, timeout)`[​](#testonlyfailingname-fn-timeout \"Direct link to testonlyfailingname-fn-timeout\")\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`[​](#testskipfailingname-fn-timeout \"Direct link to testskipfailingname-fn-timeout\")\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`[​](#testonlyname-fn-timeout \"Direct link to testonlyname-fn-timeout\")\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nFor example, let's say you had these tests:\n\n```\ntest.only('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-1 \"Direct link to testonlyeachtablename-fn-1\")\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, ``it.only.each`table`(name, fn)`` and ``fit.each`table`(name, fn)``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-2 \"Direct link to testonlyeachtablename-fn-2\")\n\n```\ntest.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn-3 \"Direct link to testonlyeachtablename-fn-3\")\n\n```\ntest.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.skip(name, fn)`[​](#testskipname-fn \"Direct link to testskipname-fn\")\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n```\ntest('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test.skip('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn \"Direct link to testskipeachtablename-fn\")\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn-1 \"Direct link to testskipeachtablename-fn-1\")\n\n```\ntest.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.skip.each`table`(name, fn)``[​](#testskipeachtablename-fn-2 \"Direct link to testskipeachtablename-fn-2\")\n\n```\ntest.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.todo(name)`[​](#testtodoname \"Direct link to testtodoname\")\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n```\nconst add = (a, b) => a + b;test.todo('add should be associative');\n```\n\ntip\n\n`test.todo` will throw an error if you pass it a test callback function. Use [`test.skip`](#testskipname-fn) instead, if you already implemented the test, but do not want it to run.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.5/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `.each`[​](#each \"Direct link to each\")\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects[​](#array-of-objects \"Direct link to Array of objects\")\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n```\nimport {test} from '@jest/globals';test.each([  {name: 'a', path: 'path/to/a', count: 1, write: true},  {name: 'b', path: 'path/to/b', count: 3},])('inline table', ({name, path, count, write}) => {  // arguments are typed as expected, e.g. `write: boolean | undefined`});\n```\n\nOr declared separately as a variable:\n\n```\nimport {test} from '@jest/globals';const table = [  {a: 1, b: 2, expected: 'three', extra: true},  {a: 3, b: 4, expected: 'seven', extra: false},  {a: 5, b: 6, expected: 'eleven'},];test.each(table)('table as a variable', ({a, b, expected, extra}) => {  // again everything is typed as expected, e.g. `extra: boolean | undefined`});\n```\n\n#### Array of arrays[​](#array-of-arrays \"Direct link to Array of arrays\")\n\nThe array of arrays style will work smoothly with inlined tables:\n\n```\nimport {test} from '@jest/globals';test.each([  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],])('inline table example', (a, b, expected, extra) => {  // arguments are typed as expected, e.g. `extra: boolean | undefined`});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n```\nimport {test} from '@jest/globals';const table: Array<[number, number, string, boolean?]> = [  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],];test.each(table)('table as a variable example', (a, b, expected, extra) => {  // without the annotation types are incorrect, e.g. `a: number | string | boolean`});\n```\n\n#### Template literal[​](#template-literal \"Direct link to Template literal\")\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${3}  ${3} | ${4} | ${7}  ${5} | ${6} | ${11}`('template literal example', ({a, b, expected}) => {  // all arguments are of type `number`});\n```\n\nOtherwise it will require a generic type argument:\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; b: number; expected: string; extra?: boolean}>`  a    | b    | expected    | extra  ${1} | ${2} | ${'three'}  | ${true}  ${3} | ${4} | ${'seven'}  | ${false}  ${5} | ${6} | ${'eleven'}`('template literal example', ({a, b, expected, extra}) => {  // without the generic argument in this case types would default to `unknown`});\n```",
    "title": "Globals · Jest",
    "description": "In your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do import {describe, expect, test} from '@jest/globals'.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/using-matchers",
    "markdown": "# Using Matchers · Jest\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](https://jestjs.io/docs/29.5/expect).\n\n## Common Matchers[​](#common-matchers \"Direct link to Common Matchers\")\n\nThe simplest way to test a value is with exact equality.\n\n```\ntest('two plus two is four', () => {  expect(2 + 2).toBe(4);});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual`:\n\n```\ntest('object assignment', () => {  const data = {one: 1};  data['two'] = 2;  expect(data).toEqual({one: 1, two: 2});});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\ntip\n\n`toEqual` ignores object keys with `undefined` properties, `undefined` array items, array sparseness, or object type mismatch. To take these into account use `toStrictEqual` instead.\n\nYou can also test for the opposite of a matcher using `not`:\n\n```\ntest('adding positive numbers is not zero', () => {  for (let a = 1; a < 10; a++) {    for (let b = 1; b < 10; b++) {      expect(a + b).not.toBe(0);    }  }});\n```\n\n## Truthiness[​](#truthiness \"Direct link to Truthiness\")\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n*   `toBeNull` matches only `null`\n*   `toBeUndefined` matches only `undefined`\n*   `toBeDefined` is the opposite of `toBeUndefined`\n*   `toBeTruthy` matches anything that an `if` statement treats as true\n*   `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n```\ntest('null', () => {  const n = null;  expect(n).toBeNull();  expect(n).toBeDefined();  expect(n).not.toBeUndefined();  expect(n).not.toBeTruthy();  expect(n).toBeFalsy();});test('zero', () => {  const z = 0;  expect(z).not.toBeNull();  expect(z).toBeDefined();  expect(z).not.toBeUndefined();  expect(z).not.toBeTruthy();  expect(z).toBeFalsy();});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers[​](#numbers \"Direct link to Numbers\")\n\nMost ways of comparing numbers have matcher equivalents.\n\n```\ntest('two plus two', () => {  const value = 2 + 2;  expect(value).toBeGreaterThan(3);  expect(value).toBeGreaterThanOrEqual(3.5);  expect(value).toBeLessThan(5);  expect(value).toBeLessThanOrEqual(4.5);  // toBe and toEqual are equivalent for numbers  expect(value).toBe(4);  expect(value).toEqual(4);});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n```\ntest('adding floating point numbers', () => {  const value = 0.1 + 0.2;  //expect(value).toBe(0.3);           This won't work because of rounding error  expect(value).toBeCloseTo(0.3); // This works.});\n```\n\n## Strings[​](#strings \"Direct link to Strings\")\n\nYou can check strings against regular expressions with `toMatch`:\n\n```\ntest('there is no I in team', () => {  expect('team').not.toMatch(/I/);});test('but there is a \"stop\" in Christoph', () => {  expect('Christoph').toMatch(/stop/);});\n```\n\n## Arrays and iterables[​](#arrays-and-iterables \"Direct link to Arrays and iterables\")\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n```\nconst shoppingList = [  'diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];test('the shopping list has milk on it', () => {  expect(shoppingList).toContain('milk');  expect(new Set(shoppingList)).toContain('milk');});\n```\n\n## Exceptions[​](#exceptions \"Direct link to Exceptions\")\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n```\nfunction compileAndroidCode() {  throw new Error('you are using the wrong JDK!');}test('compiling android goes as expected', () => {  expect(() => compileAndroidCode()).toThrow();  expect(() => compileAndroidCode()).toThrow(Error);  // You can also use a string that must be contained in the error message or a regexp  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');  expect(() => compileAndroidCode()).toThrow(/JDK/);  // Or you can match an exact error message using a regexp like below  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass});\n```\n\ntip\n\nThe function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More[​](#and-more \"Direct link to And More\")\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.5/expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](https://jestjs.io/docs/29.5/asynchronous).",
    "title": "Using Matchers · Jest",
    "description": "Jest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/snapshot-testing",
    "markdown": "# Snapshot Testing · Jest\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest[​](#snapshot-testing-with-jest \"Direct link to Snapshot Testing with Jest\")\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n```\nexports[`renders correctly 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nnote\n\nThe snapshot is directly scoped to the data you render – in our example the `<Link>` component with `page` prop passed to it. This implies that even if any other file has missing props (say, `App.js`) in the `<Link>` component, it will still pass the test as the test doesn't know the usage of `<Link>` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\ninfo\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots[​](#updating-snapshots \"Direct link to Updating Snapshots\")\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n```\n// Updated test case with a Link to a different addressit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nIn that case, Jest will print this output:\n\n![](https://jestjs.io/assets/images/failedSnapshotTest-754bd8c54c17338fe046c6273fd3f9d1.png)\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode[​](#interactive-snapshot-mode \"Direct link to Interactive Snapshot Mode\")\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshot-58ae38e9cae13140c56d8472453f0595.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotUpdate-a17d8d77f94702048b4d0e0e4c580719.gif)\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotDone-59ee291ee320accbc4bfc4f33b22638a.png)\n\n### Inline Snapshots[​](#inline-snapshots \"Direct link to Inline Snapshots\")\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nExample:\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot();});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot(`    <a      className=\"normal\"      href=\"https://example.com\"      onMouseEnter={[Function]}      onMouseLeave={[Function]}    >      Example Site    </a>  `);});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers[​](#property-matchers \"Direct link to Property Matchers\")\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n```\nit('will fail every time', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot();});// Snapshotexports[`will fail every time 1`] = `{  \"createdAt\": 2018-05-19T23:36:09.816Z,  \"id\": 3,  \"name\": \"LeBron James\",}`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n```\nit('will check the matchers and pass', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    id: expect.any(Number),  });});// Snapshotexports[`will check the matchers and pass 1`] = `{  \"createdAt\": Any<Date>,  \"id\": Any<Number>,  \"name\": \"LeBron James\",}`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n```\nit('will check the values and pass', () => {  const user = {    createdAt: new Date(),    name: 'Bond... James Bond',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    name: 'Bond... James Bond',  });});// Snapshotexports[`will check the values and pass 1`] = `{  \"createdAt\": Any<Date>,  \"name\": 'Bond... James Bond',}`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n```\nconst randomNumber = Math.round(Math.random() * 100);const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);expect(stringWithConstantData).toMatchSnapshot();\n```\n\nOther ways this can be done is using the [snapshot serializer](https://jestjs.io/docs/next/configuration#snapshotserializers-arraystring) or [mocking](https://jestjs.io/docs/next/mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1\\. Treat snapshots as code[​](#1-treat-snapshots-as-code \"Direct link to 1. Treat snapshots as code\")\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2\\. Tests should be deterministic[​](#2-tests-should-be-deterministic \"Direct link to 2. Tests should be deterministic\")\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/jestjs/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](https://jestjs.io/docs/next/mock-functions) to return a consistent value every time the test is run:\n\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3\\. Use descriptive snapshot names[​](#3-use-descriptive-snapshot-names \"Direct link to 3. Use descriptive snapshot names\")\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n```\nexports[`<UserName /> should handle some test case`] = `null`;exports[`<UserName /> should handle some other test case`] = `<div>  Alan Turing</div>`;\n```\n\nTo:\n\n```\nexports[`<UserName /> should render null`] = `null`;exports[`<UserName /> should render Alan Turing`] = `<div>  Alan Turing</div>`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n```\nexports[`<UserName /> should render null`] = `<div>  Alan Turing</div>`;exports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions[​](#frequently-asked-questions \"Direct link to Frequently Asked Questions\")\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?[​](#are-snapshots-written-automatically-on-continuous-integration-ci-systems \"Direct link to Are snapshots written automatically on Continuous Integration (CI) systems?\")\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?[​](#should-snapshot-files-be-committed \"Direct link to Should snapshot files be committed?\")\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?[​](#does-snapshot-testing-only-work-with-react-components \"Direct link to Does snapshot testing only work with React components?\")\n\n[React](https://jestjs.io/docs/next/tutorial-react) and [React Native](https://jestjs.io/docs/next/tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/jestjs/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?[​](#whats-the-difference-between-snapshot-testing-and-visual-regression-testing \"Direct link to What's the difference between snapshot testing and visual regression testing?\")\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?[​](#does-snapshot-testing-replace-unit-testing \"Direct link to Does snapshot testing replace unit testing?\")\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?[​](#what-is-the-performance-of-snapshot-testing-regarding-speed-and-size-of-the-generated-files \"Direct link to What is the performance of snapshot testing regarding speed and size of the generated files?\")\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?[​](#how-do-i-resolve-conflicts-within-snapshot-files \"Direct link to How do I resolve conflicts within snapshot files?\")\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?[​](#is-it-possible-to-apply-test-driven-development-principles-with-snapshot-testing \"Direct link to Is it possible to apply test-driven development principles with snapshot testing?\")\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?[​](#does-code-coverage-work-with-snapshot-testing \"Direct link to Does code coverage work with snapshot testing?\")\n\nYes, as well as with any other test.",
    "title": "Snapshot Testing · Jest",
    "description": "Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/asynchronous",
    "markdown": "# Testing Asynchronous Code · Jest\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises[​](#promises \"Direct link to Promises\")\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n```\ntest('the data is peanut butter', () => {  return fetchData().then(data => {    expect(data).toBe('peanut butter');  });});\n```\n\n## Async/Await[​](#asyncawait \"Direct link to Async/Await\")\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n```\ntest('the data is peanut butter', async () => {  const data = await fetchData();  expect(data).toBe('peanut butter');});test('the fetch fails with an error', async () => {  expect.assertions(1);  try {    await fetchData();  } catch (error) {    expect(error).toMatch('error');  }});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n```\ntest('the data is peanut butter', async () => {  await expect(fetchData()).resolves.toBe('peanut butter');});test('the fetch fails with an error', async () => {  await expect(fetchData()).rejects.toMatch('error');});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n```\ntest('the fetch fails with an error', () => {  expect.assertions(1);  return fetchData().catch(error => expect(error).toMatch('error'));});\n```\n\n## Callbacks[​](#callbacks \"Direct link to Callbacks\")\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will _not_ work as intended:\n\n```\n// Don't do this!test('the data is peanut butter', () => {  function callback(error, data) {    if (error) {      throw error;    }    expect(data).toBe('peanut butter');  }  fetchData(callback);});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n```\ntest('the data is peanut butter', done => {  function callback(error, data) {    if (error) {      done(error);      return;    }    try {      expect(data).toBe('peanut butter');      done();    } catch (error) {      done(error);    }  }  fetchData(callback);});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\ncaution\n\nJest will throw an error, if the same test function is passed a `done()` callback and returns a promise. This is done as a precaution to avoid memory leaks in your tests.\n\n## `.resolves` / `.rejects`[​](#resolves--rejects \"Direct link to resolves--rejects\")\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n```\ntest('the data is peanut butter', () => {  return expect(fetchData()).resolves.toBe('peanut butter');});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n```\ntest('the fetch fails with an error', () => {  return expect(fetchData()).rejects.toMatch('error');});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.",
    "title": "Testing Asynchronous Code · Jest",
    "description": "It's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/setup-teardown",
    "markdown": "# Setup and Teardown · Jest\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup[​](#repeating-setup \"Direct link to Repeating Setup\")\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n```\nbeforeEach(() => {  initializeCityDatabase();});afterEach(() => {  clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](https://jestjs.io/docs/29.5/asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n```\nbeforeEach(() => {  return initializeCityDatabase();});\n```\n\n## One-Time Setup[​](#one-time-setup \"Direct link to One-Time Setup\")\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n```\nbeforeAll(() => {  return initializeCityDatabase();});afterAll(() => {  return clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n## Scoping[​](#scoping \"Direct link to Scoping\")\n\nThe top level `before*` and `after*` hooks apply to every test in a file. The hooks declared inside a `describe` block apply only to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n```\n// Applies to all tests in this filebeforeEach(() => {  return initializeCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});describe('matching cities to foods', () => {  // Applies only to tests in this describe block  beforeEach(() => {    return initializeFoodDatabase();  });  test('Vienna <3 veal', () => {    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);  });  test('San Juan <3 plantains', () => {    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);  });});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n```\nbeforeAll(() => console.log('1 - beforeAll'));afterAll(() => console.log('1 - afterAll'));beforeEach(() => console.log('1 - beforeEach'));afterEach(() => console.log('1 - afterEach'));test('', () => console.log('1 - test'));describe('Scoped / Nested block', () => {  beforeAll(() => console.log('2 - beforeAll'));  afterAll(() => console.log('2 - afterAll'));  beforeEach(() => console.log('2 - beforeEach'));  afterEach(() => console.log('2 - afterEach'));  test('', () => console.log('2 - test'));});// 1 - beforeAll// 1 - beforeEach// 1 - test// 1 - afterEach// 2 - beforeAll// 1 - beforeEach// 2 - beforeEach// 2 - test// 2 - afterEach// 1 - afterEach// 2 - afterAll// 1 - afterAll\n```\n\n## Order of Execution[​](#order-of-execution \"Direct link to Order of Execution\")\n\nJest executes all describe handlers in a test file _before_ it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n```\ndescribe('describe outer', () => {  console.log('describe outer-a');  describe('describe inner 1', () => {    console.log('describe inner 1');    test('test 1', () => console.log('test 1'));  });  console.log('describe outer-b');  test('test 2', () => console.log('test 2'));  describe('describe inner 2', () => {    console.log('describe inner 2');    test('test 3', () => console.log('test 3'));  });  console.log('describe outer-c');});// describe outer-a// describe inner 1// describe outer-b// describe inner 2// describe outer-c// test 1// test 2// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n```\nbeforeEach(() => console.log('connection setup'));beforeEach(() => console.log('database setup'));afterEach(() => console.log('database teardown'));afterEach(() => console.log('connection teardown'));test('test 1', () => console.log('test 1'));describe('extra', () => {  beforeEach(() => console.log('extra database setup'));  afterEach(() => console.log('extra database teardown'));  test('test 2', () => console.log('test 2'));});// connection setup// database setup// test 1// database teardown// connection teardown// connection setup// database setup// extra database setup// test 2// extra database teardown// database teardown// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n```\n  beforeEach(() => console.log('connection setup'));+ afterEach(() => console.log('connection teardown'));  beforeEach(() => console.log('database setup'));+ afterEach(() => console.log('database teardown'));- afterEach(() => console.log('database teardown'));- afterEach(() => console.log('connection teardown'));  // ...\n```\n\n## General Advice[​](#general-advice \"Direct link to General Advice\")\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n```\ntest.only('this will be the only test that runs', () => {  expect(true).toBe(false);});test('this test will not run', () => {  expect('A').toBe('A');});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.",
    "title": "Setup and Teardown · Jest",
    "description": "Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/jest-community",
    "markdown": "# Jest Community · Jest\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n*   [vscode-jest](https://github.com/jest-community/vscode-jest)\n*   [jest-extended](https://github.com/jest-community/jest-extended)\n*   [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n*   [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest[​](#awesome-jest \"Direct link to Awesome Jest\")\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.",
    "title": "Jest Community · Jest",
    "description": "The community around Jest is working hard to make the testing experience even greater.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/snapshot-testing",
    "markdown": "# Snapshot Testing · Jest\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest[​](#snapshot-testing-with-jest \"Direct link to Snapshot Testing with Jest\")\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n```\nexports[`renders correctly 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nnote\n\nThe snapshot is directly scoped to the data you render – in our example the `<Link>` component with `page` prop passed to it. This implies that even if any other file has missing props (say, `App.js`) in the `<Link>` component, it will still pass the test as the test doesn't know the usage of `<Link>` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\ninfo\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots[​](#updating-snapshots \"Direct link to Updating Snapshots\")\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n```\n// Updated test case with a Link to a different addressit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nIn that case, Jest will print this output:\n\n![](https://jestjs.io/assets/images/failedSnapshotTest-754bd8c54c17338fe046c6273fd3f9d1.png)\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode[​](#interactive-snapshot-mode \"Direct link to Interactive Snapshot Mode\")\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshot-58ae38e9cae13140c56d8472453f0595.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotUpdate-a17d8d77f94702048b4d0e0e4c580719.gif)\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotDone-59ee291ee320accbc4bfc4f33b22638a.png)\n\n### Inline Snapshots[​](#inline-snapshots \"Direct link to Inline Snapshots\")\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nExample:\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot();});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot(`    <a      className=\"normal\"      href=\"https://example.com\"      onMouseEnter={[Function]}      onMouseLeave={[Function]}    >      Example Site    </a>  `);});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers[​](#property-matchers \"Direct link to Property Matchers\")\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n```\nit('will fail every time', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot();});// Snapshotexports[`will fail every time 1`] = `{  \"createdAt\": 2018-05-19T23:36:09.816Z,  \"id\": 3,  \"name\": \"LeBron James\",}`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n```\nit('will check the matchers and pass', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    id: expect.any(Number),  });});// Snapshotexports[`will check the matchers and pass 1`] = `{  \"createdAt\": Any<Date>,  \"id\": Any<Number>,  \"name\": \"LeBron James\",}`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n```\nit('will check the values and pass', () => {  const user = {    createdAt: new Date(),    name: 'Bond... James Bond',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    name: 'Bond... James Bond',  });});// Snapshotexports[`will check the values and pass 1`] = `{  \"createdAt\": Any<Date>,  \"name\": 'Bond... James Bond',}`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n```\nconst randomNumber = Math.round(Math.random() * 100);const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);expect(stringWithConstantData).toMatchSnapshot();\n```\n\nOther ways this can be done is using the [snapshot serializer](https://jestjs.io/docs/29.5/configuration#snapshotserializers-arraystring) or [mocking](https://jestjs.io/docs/29.5/mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1\\. Treat snapshots as code[​](#1-treat-snapshots-as-code \"Direct link to 1. Treat snapshots as code\")\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2\\. Tests should be deterministic[​](#2-tests-should-be-deterministic \"Direct link to 2. Tests should be deterministic\")\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/jestjs/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](https://jestjs.io/docs/29.5/mock-functions) to return a consistent value every time the test is run:\n\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3\\. Use descriptive snapshot names[​](#3-use-descriptive-snapshot-names \"Direct link to 3. Use descriptive snapshot names\")\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n```\nexports[`<UserName /> should handle some test case`] = `null`;exports[`<UserName /> should handle some other test case`] = `<div>  Alan Turing</div>`;\n```\n\nTo:\n\n```\nexports[`<UserName /> should render null`] = `null`;exports[`<UserName /> should render Alan Turing`] = `<div>  Alan Turing</div>`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n```\nexports[`<UserName /> should render null`] = `<div>  Alan Turing</div>`;exports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions[​](#frequently-asked-questions \"Direct link to Frequently Asked Questions\")\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?[​](#are-snapshots-written-automatically-on-continuous-integration-ci-systems \"Direct link to Are snapshots written automatically on Continuous Integration (CI) systems?\")\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?[​](#should-snapshot-files-be-committed \"Direct link to Should snapshot files be committed?\")\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?[​](#does-snapshot-testing-only-work-with-react-components \"Direct link to Does snapshot testing only work with React components?\")\n\n[React](https://jestjs.io/docs/29.5/tutorial-react) and [React Native](https://jestjs.io/docs/29.5/tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/jestjs/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?[​](#whats-the-difference-between-snapshot-testing-and-visual-regression-testing \"Direct link to What's the difference between snapshot testing and visual regression testing?\")\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?[​](#does-snapshot-testing-replace-unit-testing \"Direct link to Does snapshot testing replace unit testing?\")\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?[​](#what-is-the-performance-of-snapshot-testing-regarding-speed-and-size-of-the-generated-files \"Direct link to What is the performance of snapshot testing regarding speed and size of the generated files?\")\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?[​](#how-do-i-resolve-conflicts-within-snapshot-files \"Direct link to How do I resolve conflicts within snapshot files?\")\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?[​](#is-it-possible-to-apply-test-driven-development-principles-with-snapshot-testing \"Direct link to Is it possible to apply test-driven development principles with snapshot testing?\")\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?[​](#does-code-coverage-work-with-snapshot-testing \"Direct link to Does code coverage work with snapshot testing?\")\n\nYes, as well as with any other test.",
    "title": "Snapshot Testing · Jest",
    "description": "Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/more-resources",
    "markdown": "# More Resources · Jest\n\nVersion: 29.5\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs[​](#browse-the-docs \"Direct link to Browse the docs\")\n\n*   Learn about [Snapshot Testing](https://jestjs.io/docs/29.5/snapshot-testing), [Mock Functions](https://jestjs.io/docs/29.5/mock-functions), and more in our in-depth guides.\n*   Migrate your existing tests to Jest by following our [migration guide](https://jestjs.io/docs/29.5/migration-guide).\n*   Learn how to [configure Jest](https://jestjs.io/docs/29.5/configuration).\n*   Look at the full [API Reference](https://jestjs.io/docs/29.5/api).\n*   [Troubleshoot](https://jestjs.io/docs/29.5/troubleshooting) problems with Jest.\n\n## Learn by example[​](#learn-by-example \"Direct link to Learn by example\")\n\nYou will find a number of example test cases in the [`examples`](https://github.com/jestjs/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/jestjs_) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.",
    "title": "More Resources · Jest",
    "description": "By now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/jest-platform",
    "markdown": "# Jest Platform · Jest\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files[​](#jest-changed-files \"Direct link to jest-changed-files\")\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n*   `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n*   `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example[​](#example \"Direct link to Example\")\n\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');// print the set of modified files since last commit in the current repogetChangedFilesForRoots(['./'], {  lastCommit: true,}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff[​](#jest-diff \"Direct link to jest-diff\")\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example[​](#example-1 \"Direct link to Example\")\n\n```\nconst {diff} = require('jest-diff');const a = {a: {b: {c: 5}}};const b = {a: {b: {c: 6}}};const result = diff(a, b);// print diffconsole.log(result);\n```\n\n## jest-docblock[​](#jest-docblock \"Direct link to jest-docblock\")\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example[​](#example-2 \"Direct link to Example\")\n\n```\nconst {parseWithComments} = require('jest-docblock');const code = `/** * This is a sample * * @flow */ console.log('Hello World!');`;const parsed = parseWithComments(code);// prints an object with two attributes: comments and pragmas.console.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type[​](#jest-get-type \"Direct link to jest-get-type\")\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example[​](#example-3 \"Direct link to Example\")\n\n```\nconst {getType} = require('jest-get-type');const array = [1, 2, 3];const nullValue = null;const undefinedValue = undefined;// prints 'array'console.log(getType(array));// prints 'null'console.log(getType(nullValue));// prints 'undefined'console.log(getType(undefinedValue));\n```\n\n## jest-validate[​](#jest-validate \"Direct link to jest-validate\")\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n*   `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n*   `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example[​](#example-4 \"Direct link to Example\")\n\n```\nconst {validate} = require('jest-validate');const configByUser = {  transform: '<rootDir>/node_modules/my-custom-transform',};const result = validate(configByUser, {  comment: '  Documentation: http://custom-docs.com',  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},});console.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker[​](#jest-worker \"Direct link to jest-worker\")\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example[​](#example-5 \"Direct link to Example\")\n\nheavy-task.js\n\n```\nmodule.exports = {  myHeavyTask: args => {    // long running CPU intensive task.  },};\n```\n\nmain.js\n\n```\nasync function main() {  const worker = new Worker(require.resolve('./heavy-task.js'));  // run 2 tasks in parallel with different arguments  const results = await Promise.all([    worker.myHeavyTask({foo: 'bar'}),    worker.myHeavyTask({bar: 'foo'}),  ]);  console.log(results);}main();\n```\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format[​](#pretty-format \"Direct link to pretty-format\")\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example[​](#example-6 \"Direct link to Example\")\n\n```\nconst {format: prettyFormat} = require('pretty-format');const val = {object: {}};val.circularReference = val;val[Symbol('foo')] = 'foo';val.map = new Map([['prop', 'value']]);val.array = [-0, Infinity, NaN];console.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md).",
    "title": "Jest Platform · Jest",
    "description": "You can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/upgrading-to-jest29",
    "markdown": "# From v28 to v29 · Jest\n\nUpgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.\n\ninfo\n\nSee [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for the full list of changes.\n\nnote\n\nUpgrading from an older version? You can see the upgrade guide from v27 to v28 [here](https://jestjs.io/docs/28.x/upgrading-to-jest28).\n\n## Compatibility[​](#compatibility \"Direct link to Compatibility\")\n\nThe supported Node versions are 14.15, 16.10, 18.0 and above.\n\n## Snapshot format[​](#snapshot-format \"Direct link to Snapshot format\")\n\nAs announced in the [Jest 28 blog post](https://jestjs.io/blog/2022/04/25/jest-28#future), Jest 29 has changed the default snapshot formatting to `{escapeString: false, printBasicPrototype: false}`.\n\nIf you want to keep the old behavior, you can set the `snapshotFormat` property to:\n\n```\n+ snapshotFormat: {+   escapeString: true,+   printBasicPrototype: true+ }\n```\n\n## JSDOM upgrade[​](#jsdom-upgrade \"Direct link to JSDOM upgrade\")\n\n`jest-environment-jsdom` has upgraded `jsdom` from v19 to v20.\n\ninfo\n\nIf you use `jest-environment-jsdom`, the minimum TypeScript version is set to `4.5`.\n\nNotably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `uuid` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n\n## `pretty-format`[​](#pretty-format \"Direct link to pretty-format\")\n\n`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n\n### `jest-mock`[​](#jest-mock \"Direct link to jest-mock\")\n\nExports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n\n## TypeScript[​](#typescript \"Direct link to TypeScript\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.5/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.mocked()`[​](#jestmocked \"Direct link to jestmocked\")\n\nThe [`jest.mocked()`](https://jestjs.io/docs/29.5/mock-function-api#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n\n```\n- const mockedObject = jest.mocked(someObject, true);+ const mockedObject = jest.mocked(someObject);\n```\n\nTo have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n\n```\n- const mockedObject = jest.mocked(someObject);+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```",
    "title": "From v28 to v29 · Jest",
    "description": "Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/tutorial-react",
    "markdown": "# Testing React Apps · Jest\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Setup with Create React App[​](#setup-with-create-react-app \"Direct link to Setup with Create React App\")\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev react-test-renderer\n```\n\n### Setup without Create React App[​](#setup-without-create-react-app \"Direct link to Setup without Create React App\")\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](https://jestjs.io/docs/29.5/getting-started#using-babel).\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n```\n{  \"dependencies\": {    \"react\": \"<current-version>\",    \"react-dom\": \"<current-version>\"  },  \"devDependencies\": {    \"@babel/preset-env\": \"<current-version>\",    \"@babel/preset-react\": \"<current-version>\",    \"babel-jest\": \"<current-version>\",    \"jest\": \"<current-version>\",    \"react-test-renderer\": \"<current-version>\"  },  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    '@babel/preset-env',    ['@babel/preset-react', {runtime: 'automatic'}],  ],};\n```\n\n**And you're good to go!**\n\n### Snapshot Testing[​](#snapshot-testing \"Direct link to Snapshot Testing\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/29.5/snapshot-testing) for a Link component that renders hyperlinks:\n\nLink.js\n\n```\nimport {useState} from 'react';const STATUS = {  HOVERED: 'hovered',  NORMAL: 'normal',};export default function Link({page, children}) {  const [status, setStatus] = useState(STATUS.NORMAL);  const onMouseEnter = () => {    setStatus(STATUS.HOVERED);  };  const onMouseLeave = () => {    setStatus(STATUS.NORMAL);  };  return (    <a      className={status}      href={page || '#'}      onMouseEnter={onMouseEnter}      onMouseLeave={onMouseLeave}    >      {children}    </a>  );}\n```\n\nnote\n\nExamples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\nLink.test.js\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('changes the class when hovered', () => {  const component = renderer.create(    <Link page=\"http://www.facebook.com\">Facebook</Link>,  );  let tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseEnter();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseLeave();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\n```\nexports[`changes the class when hovered 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 2`] = `<a  className=\"hovered\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 3`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/jestjs/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+[​](#snapshot-testing-with-mocks-enzyme-and-react-16 \"Direct link to Snapshot Testing with Mocks, Enzyme and React 16+\")\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.# Or:Warning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n    \n    ```\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n    \n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n    \n    ```\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n    \n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n4.  Disable warnings all together (should be done in your jest setup file):\n    \n    ```\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n    \n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing[​](#dom-testing \"Direct link to DOM Testing\")\n\nIf you'd like to assert, and manipulate your rendered components you can use [react-testing-library](https://github.com/testing-library/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following two examples use react-testing-library and Enzyme.\n\n#### react-testing-library[​](#react-testing-library \"Direct link to react-testing-library\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\nCheckboxWithLabel.js\n\n```\nimport {useState} from 'react';export default function CheckboxWithLabel({labelOn, labelOff}) {  const [isChecked, setIsChecked] = useState(false);  const onChange = () => {    setIsChecked(!isChecked);  };  return (    <label>      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />      {isChecked ? labelOn : labelOff}    </label>  );}\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';import CheckboxWithLabel from '../CheckboxWithLabel';// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher// unmount and cleanup DOM after the test is finished.afterEach(cleanup);it('CheckboxWithLabel changes the text after click', () => {  const {queryByLabelText, getByLabelText} = render(    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,  );  expect(queryByLabelText(/off/i)).toBeTruthy();  fireEvent.click(getByLabelText(/off/i));  expect(queryByLabelText(/on/i)).toBeTruthy();});\n```\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/jestjs/jest/tree/main/examples/react-testing-library).\n\n#### Enzyme[​](#enzyme \"Direct link to Enzyme\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev enzyme\n```\n\nIf you are using a React version below 15.5.0, you will also need to install `react-addons-test-utils`.\n\nLet's rewrite the test from above using Enzyme instead of react-testing-library. We use Enzyme's [shallow renderer](https://enzymejs.github.io/enzyme/docs/api/shallow.html) in this example.\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport Enzyme, {shallow} from 'enzyme';import Adapter from 'enzyme-adapter-react-16';import CheckboxWithLabel from '../CheckboxWithLabel';Enzyme.configure({adapter: new Adapter()});it('CheckboxWithLabel changes the text after click', () => {  // Render a checkbox with label in the document  const checkbox = shallow(<CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />);  expect(checkbox.text()).toBe('Off');  checkbox.find('input').simulate('change');  expect(checkbox.text()).toBe('On');});\n```\n\n### Custom transformers[​](#custom-transformers \"Direct link to Custom transformers\")\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\ncustom-transformer.js\n\n```\n'use strict';const {transform} = require('@babel/core');const jestPreset = require('babel-preset-jest');module.exports = {  process(src, filename) {    const result = transform(src, {      filename,      presets: [jestPreset],    });    return result || src;  },};\n```\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n```\nconst babelJest = require('babel-jest');module.exports = babelJest.createTransformer({  presets: ['my-custom-preset'],});\n```\n\nSee [dedicated docs](https://jestjs.io/docs/29.5/code-transformation#writing-custom-transformers) for more details.",
    "title": "Testing React Apps · Jest",
    "description": "At Facebook, we use Jest to test React applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/mock-functions",
    "markdown": "# Mock Functions · Jest\n\nMock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with `new`, and allowing test-time configuration of return values.\n\nThere are two ways to mock functions: Either by creating a mock function to use in test code, or writing a [`manual mock`](https://jestjs.io/docs/29.5/manual-mocks) to override a module dependency.\n\n## Using a mock function[​](#using-a-mock-function \"Direct link to Using a mock function\")\n\nLet's imagine we're testing an implementation of a function `forEach`, which invokes a callback for each item in a supplied array.\n\nforEach.js\n\n```\nexport function forEach(items, callback) {  for (const item of items) {    callback(item);  }}\n```\n\nTo test this function, we can use a mock function, and inspect the mock's state to ensure the callback is invoked as expected.\n\nforEach.test.js\n\n```\nconst forEach = require('./forEach');const mockCallback = jest.fn(x => 42 + x);test('forEach mock function', () => {  forEach([0, 1], mockCallback);  // The mock function was called twice  expect(mockCallback.mock.calls).toHaveLength(2);  // The first argument of the first call to the function was 0  expect(mockCallback.mock.calls[0][0]).toBe(0);  // The first argument of the second call to the function was 1  expect(mockCallback.mock.calls[1][0]).toBe(1);  // The return value of the first call to the function was 42  expect(mockCallback.mock.results[0].value).toBe(42);});\n```\n\n## `.mock` property[​](#mock-property \"Direct link to mock-property\")\n\nAll mock functions have this special `.mock` property, which is where data about how the function has been called and what the function returned is kept. The `.mock` property also tracks the value of `this` for each call, so it is possible to inspect this as well:\n\n```\nconst myMock1 = jest.fn();const a = new myMock1();console.log(myMock1.mock.instances);// > [ <a> ]const myMock2 = jest.fn();const b = {};const bound = myMock2.bind(b);bound();console.log(myMock2.mock.contexts);// > [ <b> ]\n```\n\nThese mock members are very useful in tests to assert how these functions get called, instantiated, or what they returned:\n\n```\n// The function was called exactly onceexpect(someMockFunction.mock.calls).toHaveLength(1);// The first arg of the first call to the function was 'first arg'expect(someMockFunction.mock.calls[0][0]).toBe('first arg');// The second arg of the first call to the function was 'second arg'expect(someMockFunction.mock.calls[0][1]).toBe('second arg');// The return value of the first call to the function was 'return value'expect(someMockFunction.mock.results[0].value).toBe('return value');// The function was called with a certain `this` context: the `element` object.expect(someMockFunction.mock.contexts[0]).toBe(element);// This function was instantiated exactly twiceexpect(someMockFunction.mock.instances.length).toBe(2);// The object returned by the first instantiation of this function// had a `name` property whose value was set to 'test'expect(someMockFunction.mock.instances[0].name).toBe('test');// The first argument of the last call to the function was 'test'expect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n## Mock Return Values[​](#mock-return-values \"Direct link to Mock Return Values\")\n\nMock functions can also be used to inject test values into your code during a test:\n\n```\nconst myMock = jest.fn();console.log(myMock());// > undefinedmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);console.log(myMock(), myMock(), myMock(), myMock());// > 10, 'x', true, true\n```\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n```\nconst filterTestFn = jest.fn();// Make the mock return `true` for the first call,// and `false` for the second callfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);const result = [11, 12].filter(num => filterTestFn(num));console.log(result);// > [11]console.log(filterTestFn.mock.calls[0][0]); // 11console.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n\n## Mocking Modules[​](#mocking-modules \"Direct link to Mocking Modules\")\n\nSuppose we have a class that fetches users from our API. The class uses [axios](https://github.com/axios/axios) to call the API then returns the `data` attribute which contains all the users:\n\nusers.js\n\n```\nimport axios from 'axios';class Users {  static all() {    return axios.get('/users.json').then(resp => resp.data);  }}export default Users;\n```\n\nNow, in order to test this method without actually hitting the API (and thus creating slow and fragile tests), we can use the `jest.mock(...)` function to automatically mock the axios module.\n\nOnce we mock the module we can provide a `mockResolvedValue` for `.get` that returns the data we want our test to assert against. In effect, we are saying that we want `axios.get('/users.json')` to return a fake response.\n\nusers.test.js\n\n```\nimport axios from 'axios';import Users from './users';jest.mock('axios');test('should fetch users', () => {  const users = [{name: 'Bob'}];  const resp = {data: users};  axios.get.mockResolvedValue(resp);  // or you could use the following depending on your use case:  // axios.get.mockImplementation(() => Promise.resolve(resp))  return Users.all().then(data => expect(data).toEqual(users));});\n```\n\n## Mocking Partials[​](#mocking-partials \"Direct link to Mocking Partials\")\n\nSubsets of a module can be mocked and the rest of the module can keep their actual implementation:\n\nfoo-bar-baz.js\n\n```\nexport const foo = 'foo';export const bar = () => 'bar';export default () => 'baz';\n```\n\n```\n//test.jsimport defaultExport, {bar, foo} from '../foo-bar-baz';jest.mock('../foo-bar-baz', () => {  const originalModule = jest.requireActual('../foo-bar-baz');  //Mock the default export and named export 'foo'  return {    __esModule: true,    ...originalModule,    default: jest.fn(() => 'mocked baz'),    foo: 'mocked foo',  };});test('should do a partial mock', () => {  const defaultExportResult = defaultExport();  expect(defaultExportResult).toBe('mocked baz');  expect(defaultExport).toHaveBeenCalled();  expect(foo).toBe('mocked foo');  expect(bar()).toBe('bar');});\n```\n\n## Mock Implementations[​](#mock-implementations \"Direct link to Mock Implementations\")\n\nStill, there are cases where it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with `jest.fn` or the `mockImplementationOnce` method on mock functions.\n\n```\nconst myMockFn = jest.fn(cb => cb(null, true));myMockFn((err, val) => console.log(val));// > true\n```\n\nThe `mockImplementation` method is useful when you need to define the default implementation of a mock function that is created from another module:\n\nfoo.js\n\n```\nmodule.exports = function () {  // some implementation;};\n```\n\ntest.js\n\n```\njest.mock('../foo'); // this happens automatically with automockingconst foo = require('../foo');// foo is a mock functionfoo.mockImplementation(() => 42);foo();// > 42\n```\n\nWhen you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the `mockImplementationOnce` method:\n\n```\nconst myMockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));myMockFn((err, val) => console.log(val));// > truemyMockFn((err, val) => console.log(val));// > false\n```\n\nWhen the mocked function runs out of implementations defined with `mockImplementationOnce`, it will execute the default implementation set with `jest.fn` (if it is defined):\n\n```\nconst myMockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());// > 'first call', 'second call', 'default', 'default'\n```\n\nFor cases where we have methods that are typically chained (and thus always need to return `this`), we have a sugary API to simplify this in the form of a `.mockReturnThis()` function that also sits on all mocks:\n\n```\nconst myObj = {  myMethod: jest.fn().mockReturnThis(),};// is the same asconst otherObj = {  myMethod: jest.fn(function () {    return this;  }),};\n```\n\n## Mock Names[​](#mock-names \"Direct link to Mock Names\")\n\nYou can optionally provide a name for your mock functions, which will be displayed instead of `'jest.fn()'` in the test error output. Use [`.mockName()`](https://jestjs.io/docs/29.5/mock-function-api#mockfnmocknamename) if you want to be able to quickly identify the mock function reporting an error in your test output.\n\n```\nconst myMockFn = jest  .fn()  .mockReturnValue('default')  .mockImplementation(scalar => 42 + scalar)  .mockName('add42');\n```\n\n## Custom Matchers[​](#custom-matchers \"Direct link to Custom Matchers\")\n\nFinally, in order to make it less demanding to assert how mock functions have been called, we've added some custom matcher functions for you:\n\n```\n// The mock function was called at least onceexpect(mockFunc).toHaveBeenCalled();// The mock function was called at least once with the specified argsexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);// The last call to the mock function was called with the specified argsexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);// All calls and the name of the mock is written as a snapshotexpect(mockFunc).toMatchSnapshot();\n```\n\nThese matchers are sugar for common forms of inspecting the `.mock` property. You can always do this manually yourself if that's more to your taste or if you need to do something more specific:\n\n```\n// The mock function was called at least onceexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);// The mock function was called at least once with the specified argsexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);// The last call to the mock function was called with the specified argsexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([  arg1,  arg2,]);// The first arg of the last call to the mock function was `42`// (note that there is no sugar helper for this specific of an assertion)expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);// A snapshot will check that a mock was invoked the same number of times,// in the same order, with the same arguments. It will also assert on the name.expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);expect(mockFunc.getMockName()).toBe('a mock name');\n```\n\nFor a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.5/expect).",
    "title": "Mock Functions · Jest",
    "description": "Mock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with new, and allowing test-time configuration of return values.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/webpack",
    "markdown": "# Using with webpack · Jest\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack _does_ offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example[​](#a-webpack-example \"Direct link to A webpack example\")\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\nwebpack.config.js\n\n```\nmodule.exports = {  module: {    rules: [      {        test: /\\.jsx?$/,        exclude: ['node_modules'],        use: ['babel-loader'],      },      {        test: /\\.css$/,        use: ['style-loader', 'css-loader'],      },      {        test: /\\.gif$/,        type: 'asset/inline',      },      {        test: /\\.(ttf|eot|svg)$/,        type: 'asset/resource',      },    ],  },  resolve: {    alias: {      config$: './configs/app-config.js',      react: './vendor/react-master',    },    extensions: ['.js', '.jsx'],    modules: [      'node_modules',      'bower_components',      'shared',      '/shared/vendor/modules',    ],  },};\n```\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](https://jestjs.io/docs/29.5/getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](https://jestjs.io/docs/29.5/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets[​](#handling-static-assets \"Direct link to Handling Static Assets\")\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\njest.config.js\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',  },};\n```\n\nAnd the mock files themselves:\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n```\nmodule.exports = 'test-file-stub';\n```\n\n### Mocking CSS Modules[​](#mocking-css-modules \"Direct link to Mocking CSS Modules\")\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](https://jestjs.io/docs/29.5/snapshot-testing).\n\njest.config.js (for CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': 'identity-obj-proxy',  },};\n```\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](https://jestjs.io/docs/29.5/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js (for custom transformers and CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(css|less)$': 'identity-obj-proxy',  },  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n### Configuring Jest to find our files[​](#configuring-jest-to-find-our-files \"Direct link to Configuring Jest to find our files\")\n\nNow that Jest knows how to process our files, we need to tell it how to _find_ them. For webpack's `modules`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\njest.config.js\n\n```\nmodule.exports = {  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nnote\n\n`<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom [`rootDir`](https://jestjs.io/docs/29.5/configuration#rootdir-string) option in your configuration.\n\nSimilarly, Jest's counterpart for Webpack's `resolve.roots` (an alternative to setting `NODE_PATH`) is `modulePaths`.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',    '^react(.*)$': '<rootDir>/vendor/react-master$1',    '^config$': '<rootDir>/configs/app-config.js',  },};\n```\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n## Using with webpack[​](#using-with-webpack \"Direct link to Using with webpack\")\n\nIn addition to installing `babel-jest` as described earlier, you'll need to add `@babel/preset-env` like so:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-env\n```\n\nThen, you'll want to configure Babel as follows:\n\n.babelrc\n\n```\n{  \"presets\": [\"@babel/preset-env\"]}\n```\n\ntip\n\nJest caches files to speed up test execution. If you updated `.babelrc` and Jest is not working as expected, try clearing the cache by running `jest --clearCache`.\n\ntip\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n.babelrc\n\n```\n{  \"presets\": [[\"env\", {\"modules\": false}]],  \"plugins\": [\"syntax-dynamic-import\"],  \"env\": {    \"test\": {      \"plugins\": [\"dynamic-import-node\"]    }  }}\n```\n\nFor an example of how to use Jest with webpack with React, you can view one [here](https://github.com/jenniferabowd/jest_webpack_example).",
    "title": "Using with webpack · Jest",
    "description": "Jest can be used in projects that use webpack to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/using-matchers",
    "markdown": "# Using Matchers · Jest\n\nJest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the [`expect` API doc](https://jestjs.io/docs/29.4/expect).\n\n## Common Matchers[​](#common-matchers \"Direct link to Common Matchers\")\n\nThe simplest way to test a value is with exact equality.\n\n```\ntest('two plus two is four', () => {  expect(2 + 2).toBe(4);});\n```\n\nIn this code, `expect(2 + 2)` returns an \"expectation\" object. You typically won't do much with these expectation objects except call matchers on them. In this code, `.toBe(4)` is the matcher. When Jest runs, it tracks all the failing matchers so that it can print out nice error messages for you.\n\n`toBe` uses `Object.is` to test exact equality. If you want to check the value of an object, use `toEqual`:\n\n```\ntest('object assignment', () => {  const data = {one: 1};  data['two'] = 2;  expect(data).toEqual({one: 1, two: 2});});\n```\n\n`toEqual` recursively checks every field of an object or array.\n\ntip\n\n`toEqual` ignores object keys with `undefined` properties, `undefined` array items, array sparseness, or object type mismatch. To take these into account use `toStrictEqual` instead.\n\nYou can also test for the opposite of a matcher using `not`:\n\n```\ntest('adding positive numbers is not zero', () => {  for (let a = 1; a < 10; a++) {    for (let b = 1; b < 10; b++) {      expect(a + b).not.toBe(0);    }  }});\n```\n\n## Truthiness[​](#truthiness \"Direct link to Truthiness\")\n\nIn tests, you sometimes need to distinguish between `undefined`, `null`, and `false`, but you sometimes do not want to treat these differently. Jest contains helpers that let you be explicit about what you want.\n\n*   `toBeNull` matches only `null`\n*   `toBeUndefined` matches only `undefined`\n*   `toBeDefined` is the opposite of `toBeUndefined`\n*   `toBeTruthy` matches anything that an `if` statement treats as true\n*   `toBeFalsy` matches anything that an `if` statement treats as false\n\nFor example:\n\n```\ntest('null', () => {  const n = null;  expect(n).toBeNull();  expect(n).toBeDefined();  expect(n).not.toBeUndefined();  expect(n).not.toBeTruthy();  expect(n).toBeFalsy();});test('zero', () => {  const z = 0;  expect(z).not.toBeNull();  expect(z).toBeDefined();  expect(z).not.toBeUndefined();  expect(z).not.toBeTruthy();  expect(z).toBeFalsy();});\n```\n\nYou should use the matcher that most precisely corresponds to what you want your code to be doing.\n\n## Numbers[​](#numbers \"Direct link to Numbers\")\n\nMost ways of comparing numbers have matcher equivalents.\n\n```\ntest('two plus two', () => {  const value = 2 + 2;  expect(value).toBeGreaterThan(3);  expect(value).toBeGreaterThanOrEqual(3.5);  expect(value).toBeLessThan(5);  expect(value).toBeLessThanOrEqual(4.5);  // toBe and toEqual are equivalent for numbers  expect(value).toBe(4);  expect(value).toEqual(4);});\n```\n\nFor floating point equality, use `toBeCloseTo` instead of `toEqual`, because you don't want a test to depend on a tiny rounding error.\n\n```\ntest('adding floating point numbers', () => {  const value = 0.1 + 0.2;  //expect(value).toBe(0.3);           This won't work because of rounding error  expect(value).toBeCloseTo(0.3); // This works.});\n```\n\n## Strings[​](#strings \"Direct link to Strings\")\n\nYou can check strings against regular expressions with `toMatch`:\n\n```\ntest('there is no I in team', () => {  expect('team').not.toMatch(/I/);});test('but there is a \"stop\" in Christoph', () => {  expect('Christoph').toMatch(/stop/);});\n```\n\n## Arrays and iterables[​](#arrays-and-iterables \"Direct link to Arrays and iterables\")\n\nYou can check if an array or iterable contains a particular item using `toContain`:\n\n```\nconst shoppingList = [  'diapers',  'kleenex',  'trash bags',  'paper towels',  'milk',];test('the shopping list has milk on it', () => {  expect(shoppingList).toContain('milk');  expect(new Set(shoppingList)).toContain('milk');});\n```\n\n## Exceptions[​](#exceptions \"Direct link to Exceptions\")\n\nIf you want to test whether a particular function throws an error when it's called, use `toThrow`.\n\n```\nfunction compileAndroidCode() {  throw new Error('you are using the wrong JDK!');}test('compiling android goes as expected', () => {  expect(() => compileAndroidCode()).toThrow();  expect(() => compileAndroidCode()).toThrow(Error);  // You can also use a string that must be contained in the error message or a regexp  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');  expect(() => compileAndroidCode()).toThrow(/JDK/);  // Or you can match an exact error message using a regexp like below  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK$/); // Test fails  expect(() => compileAndroidCode()).toThrow(/^you are using the wrong JDK!$/); // Test pass});\n```\n\ntip\n\nThe function that throws an exception needs to be invoked within a wrapping function otherwise the `toThrow` assertion will fail.\n\n## And More[​](#and-more \"Direct link to And More\")\n\nThis is just a taste. For a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.4/expect).\n\nOnce you've learned about the matchers that are available, a good next step is to check out how Jest lets you [test asynchronous code](https://jestjs.io/docs/29.4/asynchronous).",
    "title": "Using Matchers · Jest",
    "description": "Jest uses \"matchers\" to let you test values in different ways. This document will introduce some commonly used matchers. For the full list, see the expect API doc.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/asynchronous",
    "markdown": "# Testing Asynchronous Code · Jest\n\nIt's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.\n\n## Promises[​](#promises \"Direct link to Promises\")\n\nReturn a promise from your test, and Jest will wait for that promise to resolve. If the promise is rejected, the test will fail.\n\nFor example, let's say that `fetchData` returns a promise that is supposed to resolve to the string `'peanut butter'`. We could test it with:\n\n```\ntest('the data is peanut butter', () => {  return fetchData().then(data => {    expect(data).toBe('peanut butter');  });});\n```\n\n## Async/Await[​](#asyncawait \"Direct link to Async/Await\")\n\nAlternatively, you can use `async` and `await` in your tests. To write an async test, use the `async` keyword in front of the function passed to `test`. For example, the same `fetchData` scenario can be tested with:\n\n```\ntest('the data is peanut butter', async () => {  const data = await fetchData();  expect(data).toBe('peanut butter');});test('the fetch fails with an error', async () => {  expect.assertions(1);  try {    await fetchData();  } catch (error) {    expect(error).toMatch('error');  }});\n```\n\nYou can combine `async` and `await` with `.resolves` or `.rejects`.\n\n```\ntest('the data is peanut butter', async () => {  await expect(fetchData()).resolves.toBe('peanut butter');});test('the fetch fails with an error', async () => {  await expect(fetchData()).rejects.toMatch('error');});\n```\n\nIn these cases, `async` and `await` are effectively syntactic sugar for the same logic as the promises example uses.\n\ncaution\n\nBe sure to return (or `await`) the promise - if you omit the `return`/`await` statement, your test will complete before the promise returned from `fetchData` resolves or rejects.\n\nIf you expect a promise to be rejected, use the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise, a fulfilled promise would not fail the test.\n\n```\ntest('the fetch fails with an error', () => {  expect.assertions(1);  return fetchData().catch(error => expect(error).toMatch('error'));});\n```\n\n## Callbacks[​](#callbacks \"Direct link to Callbacks\")\n\nIf you don't use promises, you can use callbacks. For example, let's say that `fetchData`, instead of returning a promise, expects a callback, i.e. fetches some data and calls `callback(null, data)` when it is complete. You want to test that this returned data is the string `'peanut butter'`.\n\nBy default, Jest tests complete once they reach the end of their execution. That means this test will _not_ work as intended:\n\n```\n// Don't do this!test('the data is peanut butter', () => {  function callback(error, data) {    if (error) {      throw error;    }    expect(data).toBe('peanut butter');  }  fetchData(callback);});\n```\n\nThe problem is that the test will complete as soon as `fetchData` completes, before ever calling the callback.\n\nThere is an alternate form of `test` that fixes this. Instead of putting the test in a function with an empty argument, use a single argument called `done`. Jest will wait until the `done` callback is called before finishing the test.\n\n```\ntest('the data is peanut butter', done => {  function callback(error, data) {    if (error) {      done(error);      return;    }    try {      expect(data).toBe('peanut butter');      done();    } catch (error) {      done(error);    }  }  fetchData(callback);});\n```\n\nIf `done()` is never called, the test will fail (with timeout error), which is what you want to happen.\n\nIf the `expect` statement fails, it throws an error and `done()` is not called. If we want to see in the test log why it failed, we have to wrap `expect` in a `try` block and pass the error in the `catch` block to `done`. Otherwise, we end up with an opaque timeout error that doesn't show what value was received by `expect(data)`.\n\ncaution\n\nJest will throw an error, if the same test function is passed a `done()` callback and returns a promise. This is done as a precaution to avoid memory leaks in your tests.\n\n## `.resolves` / `.rejects`[​](#resolves--rejects \"Direct link to resolves--rejects\")\n\nYou can also use the `.resolves` matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.\n\n```\ntest('the data is peanut butter', () => {  return expect(fetchData()).resolves.toBe('peanut butter');});\n```\n\nBe sure to return the assertion—if you omit this `return` statement, your test will complete before the promise returned from `fetchData` is resolved and then() has a chance to execute the callback.\n\nIf you expect a promise to be rejected, use the `.rejects` matcher. It works analogically to the `.resolves` matcher. If the promise is fulfilled, the test will automatically fail.\n\n```\ntest('the fetch fails with an error', () => {  return expect(fetchData()).rejects.toMatch('error');});\n```\n\nNone of these forms is particularly superior to the others, and you can mix and match them across a codebase or even in a single file. It just depends on which style you feel makes your tests simpler.",
    "title": "Testing Asynchronous Code · Jest",
    "description": "It's common in JavaScript for code to run asynchronously. When you have code that runs asynchronously, Jest needs to know when the code it is testing has completed, before it can move on to another test. Jest has several ways to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/mock-function-api",
    "markdown": "# Mock Functions · Jest\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.5/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`mockFn.getMockName()`](#mockfngetmockname)\n    *   [`mockFn.mock.calls`](#mockfnmockcalls)\n    *   [`mockFn.mock.results`](#mockfnmockresults)\n    *   [`mockFn.mock.instances`](#mockfnmockinstances)\n    *   [`mockFn.mock.contexts`](#mockfnmockcontexts)\n    *   [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n    *   [`mockFn.mockClear()`](#mockfnmockclear)\n    *   [`mockFn.mockReset()`](#mockfnmockreset)\n    *   [`mockFn.mockRestore()`](#mockfnmockrestore)\n    *   [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n    *   [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n    *   [`mockFn.mockName(name)`](#mockfnmocknamename)\n    *   [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n    *   [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n    *   [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n    *   [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n    *   [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n    *   [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n    *   [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n    *   [`mockFn.withImplementation(fn, callback)`](#mockfnwithimplementationfn-callback)\n*   [Replaced Properties](#replaced-properties)\n    *   [`replacedProperty.replaceValue(value)`](#replacedpropertyreplacevaluevalue)\n    *   [`replacedProperty.restore()`](#replacedpropertyrestore)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`jest.fn(implementation?)`](#jestfnimplementation)\n    *   [`jest.Mock<T>`](#jestmockt)\n    *   [`jest.Mocked<Source>`](#jestmockedsource)\n    *   [`jest.Replaced<Source>`](#jestreplacedsource)\n    *   [`jest.mocked(source, options?)`](#jestmockedsource-options)\n    *   [`jest.Spied<Source>`](#jestspiedsource)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `mockFn.getMockName()`[​](#mockfngetmockname \"Direct link to mockfngetmockname\")\n\nReturns the mock name string set by calling [`.mockName()`](#mockfnmocknamename).\n\n### `mockFn.mock.calls`[​](#mockfnmockcalls \"Direct link to mockfnmockcalls\")\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n```\n[  ['arg1', 'arg2'],  ['arg3', 'arg4'],];\n```\n\n### `mockFn.mock.results`[​](#mockfnmockresults \"Direct link to mockfnmockresults\")\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n*   `'return'` - Indicates that the call completed by returning normally.\n*   `'throw'` - Indicates that the call completed by throwing a value.\n*   `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n```\n[  {    type: 'return',    value: 'result1',  },  {    type: 'throw',    value: {      /* Error instance */    },  },  {    type: 'return',    value: 'result2',  },];\n```\n\n### `mockFn.mock.instances`[​](#mockfnmockinstances \"Direct link to mockfnmockinstances\")\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n```\nconst mockFn = jest.fn();const a = new mockFn();const b = new mockFn();mockFn.mock.instances[0] === a; // truemockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`[​](#mockfnmockcontexts \"Direct link to mockfnmockcontexts\")\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n```\nconst mockFn = jest.fn();const boundMockFn = mockFn.bind(thisContext0);boundMockFn('a', 'b');mockFn.call(thisContext1, 'a', 'b');mockFn.apply(thisContext2, ['a', 'b']);mockFn.mock.contexts[0] === thisContext0; // truemockFn.mock.contexts[1] === thisContext1; // truemockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`[​](#mockfnmocklastcall \"Direct link to mockfnmocklastcall\")\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n### `mockFn.mockClear()`[​](#mockfnmockclear \"Direct link to mockfnmockclear\")\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nThe [`clearMocks`](https://jestjs.io/docs/29.5/configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\ncaution\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\n### `mockFn.mockReset()`[​](#mockfnmockreset \"Direct link to mockfnmockreset\")\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also replaces the mock implementation with an empty function, returning `undefined`.\n\nThe [`resetMocks`](https://jestjs.io/docs/29.5/configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`[​](#mockfnmockrestore \"Direct link to mockfnmockrestore\")\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.5/configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\ninfo\n\n`mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\n### `mockFn.mockImplementation(fn)`[​](#mockfnmockimplementationfn \"Direct link to mockfnmockimplementationfn\")\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);mockFn(0); // 42mockFn(1); // 43mockFn.mockImplementation(scalar => 36 + scalar);mockFn(2); // 38mockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n*   JavaScript\n*   TypeScript\n\nSomeClass.js\n\n```\nmodule.exports = class SomeClass {  method(a, b) {}};\n```\n\nSomeClass.test.js\n\n```\nconst SomeClass = require('./SomeClass');jest.mock('./SomeClass'); // this happens automatically with automockingconst mockMethod = jest.fn();SomeClass.mockImplementation(() => {  return {    method: mockMethod,  };});const some = new SomeClass();some.method('a', 'b');console.log('Calls to method:', mockMethod.mock.calls);\n```\n\n### `mockFn.mockImplementationOnce(fn)`[​](#mockfnmockimplementationoncefn \"Direct link to mockfnmockimplementationoncefn\")\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));mockFn((err, val) => console.log(val)); // truemockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n```\nconst mockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`[​](#mockfnmocknamename \"Direct link to mockfnmocknamename\")\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n```\nconst mockFn = jest.fn().mockName('mockedFunction');// mockFn();expect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n```\nexpect(mockedFunction).toHaveBeenCalled()Expected number of calls: >= 1Received number of calls:    0\n```\n\n### `mockFn.mockReturnThis()`[​](#mockfnmockreturnthis \"Direct link to mockfnmockreturnthis\")\n\nShorthand for:\n\n```\njest.fn(function () {  return this;});\n```\n\n### `mockFn.mockReturnValue(value)`[​](#mockfnmockreturnvaluevalue \"Direct link to mockfnmockreturnvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => value);\n```\n\nAccepts a value that will be returned whenever the mock function is called.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mock = jest.fn();mock.mockReturnValue(42);mock(); // 42mock.mockReturnValue(43);mock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`[​](#mockfnmockreturnvalueoncevalue \"Direct link to mockfnmockreturnvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockReturnValue('default')  .mockReturnValueOnce('first call')  .mockReturnValueOnce('second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`[​](#mockfnmockresolvedvaluevalue \"Direct link to mockfnmockresolvedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest.fn().mockResolvedValue(43);  await asyncMock(); // 43});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`[​](#mockfnmockresolvedvalueoncevalue \"Direct link to mockfnmockresolvedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValue('default')    .mockResolvedValueOnce('first call')    .mockResolvedValueOnce('second call');  await asyncMock(); // 'first call'  await asyncMock(); // 'second call'  await asyncMock(); // 'default'  await asyncMock(); // 'default'});\n```\n\n### `mockFn.mockRejectedValue(value)`[​](#mockfnmockrejectedvaluevalue \"Direct link to mockfnmockrejectedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockRejectedValue(new Error('Async error message'));  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`[​](#mockfnmockrejectedvalueoncevalue \"Direct link to mockfnmockrejectedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValueOnce('first call')    .mockRejectedValueOnce(new Error('Async error message'));  await asyncMock(); // 'first call'  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.withImplementation(fn, callback)`[​](#mockfnwithimplementationfn-callback \"Direct link to mockfnwithimplementationfn-callback\")\n\nAccepts a function which should be temporarily used as the implementation of the mock while the callback is being executed.\n\n```\ntest('test', () => {  const mock = jest.fn(() => 'outside callback');  mock.withImplementation(    () => 'inside callback',    () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n`mockFn.withImplementation` can be used regardless of whether or not the callback is asynchronous (returns a `thenable`). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation.\n\n```\ntest('async test', async () => {  const mock = jest.fn(() => 'outside callback');  // We await this call since the callback is async  await mock.withImplementation(    () => 'inside callback',    async () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n## Replaced Properties[​](#replaced-properties \"Direct link to Replaced Properties\")\n\n### `replacedProperty.replaceValue(value)`[​](#replacedpropertyreplacevaluevalue \"Direct link to replacedpropertyreplacevaluevalue\")\n\nChanges the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call [`jest.replaceProperty()`](https://jestjs.io/docs/29.5/jest-object#jestreplacepropertyobject-propertykey-value) multiple times on same property.\n\n### `replacedProperty.restore()`[​](#replacedpropertyrestore \"Direct link to replacedpropertyrestore\")\n\nRestores object's property to the original value.\n\nBeware that `replacedProperty.restore()` only works when the property value was replaced with [`jest.replaceProperty()`](https://jestjs.io/docs/29.5/jest-object#jestreplacepropertyobject-propertykey-value).\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.5/configuration#restoremocks-boolean) configuration option is available to restore replaced properties automatically before each test.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.5/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`[​](#jestfnimplementation \"Direct link to jestfnimplementation\")\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](https://jestjs.io/docs/29.5/jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n```\nimport {expect, jest, test} from '@jest/globals';import type add from './add';import calculate from './calc';test('calculate calls add', () => {  // Create a new mock that can be used in place of `add`.  const mockAdd = jest.fn<typeof add>();  // `.mockImplementation()` now can infer that `a` and `b` are `number`  // and that the returned value is a `number`.  mockAdd.mockImplementation((a, b) => {    // Yes, this mock is still adding two numbers but imagine this    // was a complex function we are mocking.    return a + b;  });  // `mockAdd` is properly typed and therefore accepted by anything  // requiring `add`.  calculate(mockAdd, 1, 2);  expect(mockAdd).toHaveBeenCalledTimes(1);  expect(mockAdd).toHaveBeenCalledWith(1, 2);});\n```\n\n### `jest.Mock<T>`[​](#jestmockt \"Direct link to jestmockt\")\n\nConstructs the type of a mock function, e.g. the return type of `jest.fn()`. It can be useful if you have to defined a recursive mock function:\n\n```\nimport {jest} from '@jest/globals';const sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {  if (value === 0) {    return 0;  } else {    return value + fn(value - 1);  }});\n```\n\n### `jest.Mocked<Source>`[​](#jestmockedsource \"Direct link to jestmockedsource\")\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n```\nimport {expect, jest, test} from '@jest/globals';import type {fetch} from 'node-fetch';jest.mock('node-fetch');let mockedFetch: jest.Mocked<typeof fetch>;afterEach(() => {  mockedFetch.mockClear();});test('makes correct call', () => {  mockedFetch = getMockedFetch();  // ...});test('returns correct data', () => {  mockedFetch = getMockedFetch();  // ...});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.Replaced<Source>`[​](#jestreplacedsource \"Direct link to jestreplacedsource\")\n\nThe `jest.Replaced<Source>` utility type returns the `Source` type wrapped with type definitions of Jest [replaced property](#replaced-properties).\n\nsrc/utils.ts\n\n```\nexport function isLocalhost(): boolean {  return process.env['HOSTNAME'] === 'localhost';}\n```\n\nsrc/\\_\\_tests\\_\\_/utils.test.ts\n\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';import {isLocalhost} from '../utils';let replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;afterEach(() => {  replacedEnv?.restore();});it('isLocalhost should detect localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});  expect(isLocalhost()).toBe(true);});it('isLocalhost should detect non-localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});  expect(isLocalhost()).toBe(false);});\n```\n\n### `jest.mocked(source, options?)`[​](#jestmockedsource-options \"Direct link to jestmockedsource-options\")\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\nsong.ts\n\n```\nexport const song = {  one: {    more: {      time: (t: number) => {        return t;      },    },  },};\n```\n\nsong.test.ts\n\n```\nimport {expect, jest, test} from '@jest/globals';import {song} from './song';jest.mock('./song');jest.spyOn(console, 'log');const mockedSong = jest.mocked(song);// or through `jest.Mocked<Source>`// const mockedSong = song as jest.Mocked<typeof song>;test('deep method is typed correctly', () => {  mockedSong.one.more.time.mockReturnValue(12);  expect(mockedSong.one.more.time(10)).toBe(12);  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);});test('direct usage', () => {  jest.mocked(console.log).mockImplementation(() => {    return;  });  console.log('one more time');  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);});\n```\n\n### `jest.Spied<Source>`[​](#jestspiedsource \"Direct link to jestspiedsource\")\n\nConstructs the type of a spied class or function (i.e. the return type of `jest.spyOn()`).\n\n\\_\\_utils\\_\\_/setDateNow.ts\n\n```\nimport {jest} from '@jest/globals';export function setDateNow(now: number): jest.Spied<typeof Date.now> {  return jest.spyOn(Date, 'now').mockReturnValue(now);}\n```\n\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';import {setDateNow} from './__utils__/setDateNow';let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;afterEach(() => {  spiedDateNow?.mockReset();});test('renders correctly with a given date', () => {  spiedDateNow = setDateNow(1_482_363_367_071);  // ...  expect(spiedDateNow).toHaveBeenCalledTimes(1);});\n```\n\nTypes of a class or function can be passed as type argument to `jest.Spied<Source>`. If you prefer to constrain the input type, use: `jest.SpiedClass<Source>` or `jest.SpiedFunction<Source>`.\n\nUse `jest.SpiedGetter<Source>` or `jest.SpiedSetter<Source>` to create the type of a spied getter or setter respectively.",
    "title": "Mock Functions · Jest",
    "description": "Mock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with jest.fn(). If no implementation is given, the mock function will return undefined when invoked.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/api",
    "markdown": "# Globals · Jest\n\nIn your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do `import {describe, expect, test} from '@jest/globals'`.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.4/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`afterAll(fn, timeout)`](#afterallfn-timeout)\n    *   [`afterEach(fn, timeout)`](#aftereachfn-timeout)\n    *   [`beforeAll(fn, timeout)`](#beforeallfn-timeout)\n    *   [`beforeEach(fn, timeout)`](#beforeeachfn-timeout)\n    *   [`describe(name, fn)`](#describename-fn)\n    *   [`describe.each(table)(name, fn, timeout)`](#describeeachtablename-fn-timeout)\n    *   [`describe.only(name, fn)`](#describeonlyname-fn)\n    *   [`describe.only.each(table)(name, fn)`](#describeonlyeachtablename-fn)\n    *   [`describe.skip(name, fn)`](#describeskipname-fn)\n    *   [`describe.skip.each(table)(name, fn)`](#describeskipeachtablename-fn)\n    *   [`test(name, fn, timeout)`](#testname-fn-timeout)\n    *   [`test.concurrent(name, fn, timeout)`](#testconcurrentname-fn-timeout)\n    *   [`test.concurrent.each(table)(name, fn, timeout)`](#testconcurrenteachtablename-fn-timeout)\n    *   [`test.concurrent.only.each(table)(name, fn)`](#testconcurrentonlyeachtablename-fn)\n    *   [`test.concurrent.skip.each(table)(name, fn)`](#testconcurrentskipeachtablename-fn)\n    *   [`test.each(table)(name, fn, timeout)`](#testeachtablename-fn-timeout)\n    *   [`test.failing(name, fn, timeout)`](#testfailingname-fn-timeout)\n    *   [`test.failing.each(name, fn, timeout)`](#testfailingeachname-fn-timeout)\n    *   [`test.only.failing(name, fn, timeout)`](#testonlyfailingname-fn-timeout)\n    *   [`test.skip.failing(name, fn, timeout)`](#testskipfailingname-fn-timeout)\n    *   [`test.only(name, fn, timeout)`](#testonlyname-fn-timeout)\n    *   [`test.only.each(table)(name, fn)`](#testonlyeachtablename-fn-1)\n    *   [`test.skip(name, fn)`](#testskipname-fn)\n    *   [`test.skip.each(table)(name, fn)`](#testskipeachtablename-fn)\n    *   [`test.todo(name)`](#testtodoname)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`.each`](#each)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `afterAll(fn, timeout)`[​](#afterallfn-timeout \"Direct link to afterallfn-timeout\")\n\nRuns a function after all the tests in this file have completed. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some global setup state that is shared across tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterAll(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterAll` ensures that `cleanUpDatabase` is called after all tests run.\n\nIf `afterAll` is inside a `describe` block, it runs at the end of the describe block.\n\nIf you want to run some cleanup after every test instead of after all tests, use `afterEach` instead.\n\n### `afterEach(fn, timeout)`[​](#aftereachfn-timeout \"Direct link to aftereachfn-timeout\")\n\nRuns a function after each one of the tests in this file completes. If the function returns a promise or is a generator, Jest waits for that promise to resolve before continuing.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to clean up some temporary state that is created by each test.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();function cleanUpDatabase(db) {  db.cleanUp();}afterEach(() => {  cleanUpDatabase(globalDatabase);});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `afterEach` ensures that `cleanUpDatabase` is called after each test runs.\n\nIf `afterEach` is inside a `describe` block, it only runs after the tests that are inside this describe block.\n\nIf you want to run some cleanup just once, after all of the tests run, use `afterAll` instead.\n\n### `beforeAll(fn, timeout)`[​](#beforeallfn-timeout \"Direct link to beforeallfn-timeout\")\n\nRuns a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to set up some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeAll(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});// Since we only set up the database once in this example, it's important// that our tests don't modify it.test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});\n```\n\nHere the `beforeAll` ensures that the database is set up before tests run. If setup was synchronous, you could do this without `beforeAll`. The key is that Jest will wait for a promise to resolve, so you can have asynchronous setup as well.\n\nIf `beforeAll` is inside a `describe` block, it runs at the beginning of the describe block.\n\nIf you want to run something before every test instead of before any test runs, use `beforeEach` instead.\n\n### `beforeEach(fn, timeout)`[​](#beforeeachfn-timeout \"Direct link to beforeeachfn-timeout\")\n\nRuns a function before each of the tests in this file runs. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running the test.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nThis is often useful if you want to reset some global state that will be used by many tests.\n\nFor example:\n\n```\nconst globalDatabase = makeGlobalDatabase();beforeEach(() => {  // Clears the database and adds some testing data.  // Jest will wait for this promise to resolve before running tests.  return globalDatabase.clear().then(() => {    return globalDatabase.insert({testData: 'foo'});  });});test('can find things', () => {  return globalDatabase.find('thing', {}, results => {    expect(results.length).toBeGreaterThan(0);  });});test('can insert a thing', () => {  return globalDatabase.insert('thing', makeThing(), response => {    expect(response.success).toBeTruthy();  });});\n```\n\nHere the `beforeEach` ensures that the database is reset for each test.\n\nIf `beforeEach` is inside a `describe` block, it runs for each test in the describe block.\n\nIf you only need to run some setup code once, before any tests run, use `beforeAll` instead.\n\n### `describe(name, fn)`[​](#describename-fn \"Direct link to describename-fn\")\n\n`describe(name, fn)` creates a block that groups together several related tests. For example, if you have a `myBeverage` object that is supposed to be delicious but not sour, you could test it with:\n\n```\nconst myBeverage = {  delicious: true,  sour: false,};describe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});\n```\n\nThis isn't required - you can write the `test` blocks directly at the top level. But this can be handy if you prefer your tests to be organized into groups.\n\nYou can also nest `describe` blocks if you have a hierarchy of tests:\n\n```\nconst binaryStringToNumber = binString => {  if (!/^[01]+$/.test(binString)) {    throw new CustomError('Not a binary number.');  }  return parseInt(binString, 2);};describe('binaryStringToNumber', () => {  describe('given an invalid binary string', () => {    test('composed of non-numbers throws CustomError', () => {      expect(() => binaryStringToNumber('abc')).toThrow(CustomError);    });    test('with extra whitespace throws CustomError', () => {      expect(() => binaryStringToNumber('  100')).toThrow(CustomError);    });  });  describe('given a valid binary string', () => {    test('returns the correct number', () => {      expect(binaryStringToNumber('100')).toBe(4);    });  });});\n```\n\n### `describe.each(table)(name, fn, timeout)`[​](#describeeachtablename-fn-timeout \"Direct link to describeeachtablename-fn-timeout\")\n\nUse `describe.each` if you keep duplicating the same test suites with different data. `describe.each` allows you to write the test suite once and pass data in.\n\n`describe.each` is available with two APIs:\n\n#### 1\\. `describe.each(table)(name, fn, timeout)`[​](#1-describeeachtablename-fn-timeout \"Direct link to 1-describeeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`.\n    \n*   `name`: `String` the title of the test suite.\n    \n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the parameters in each row as function arguments.\n    \n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n    \n\nExample:\n\n```\ndescribe.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n```\ndescribe.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n#### 2\\. ``describe.each`table`(name, fn, timeout)``[​](#2-describeeachtablename-fn-timeout \"Direct link to 2-describeeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test suite, use `$variable` to inject test data into the suite title from the tagged template expressions, and `$#` for the index of the row.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the suite of tests to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ndescribe.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('$a + $b', ({a, b, expected}) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });  test(`returned value not be greater than ${expected}`, () => {    expect(a + b).not.toBeGreaterThan(expected);  });  test(`returned value not be less than ${expected}`, () => {    expect(a + b).not.toBeLessThan(expected);  });});\n```\n\n### `describe.only(name, fn)`[​](#describeonlyname-fn \"Direct link to describeonlyname-fn\")\n\nAlso under the alias: `fdescribe(name, fn)`\n\nYou can use `describe.only` if you want to run only one describe block:\n\n```\ndescribe.only('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe('my other beverage', () => {  // ... will be skipped});\n```\n\n### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn \"Direct link to describeonlyeachtablename-fn\")\n\nAlso under the aliases: `fdescribe.each(table)(name, fn)` and ``fdescribe.each`table`(name, fn)``\n\nUse `describe.only.each` if you want to only run specific tests suites of data driven tests.\n\n`describe.only.each` is available with two APIs:\n\n#### `describe.only.each(table)(name, fn)`[​](#describeonlyeachtablename-fn-1 \"Direct link to describeonlyeachtablename-fn-1\")\n\n```\ndescribe.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.only.each`table`(name, fn)``[​](#describeonlyeachtablename-fn-2 \"Direct link to describeonlyeachtablename-fn-2\")\n\n```\ndescribe.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('passes', () => {    expect(a + b).toBe(expected);  });});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `describe.skip(name, fn)`[​](#describeskipname-fn \"Direct link to describeskipname-fn\")\n\nAlso under the alias: `xdescribe(name, fn)`\n\nYou can use `describe.skip` if you do not want to run the tests of a particular `describe` block:\n\n```\ndescribe('my beverage', () => {  test('is delicious', () => {    expect(myBeverage.delicious).toBeTruthy();  });  test('is not sour', () => {    expect(myBeverage.sour).toBeFalsy();  });});describe.skip('my other beverage', () => {  // ... will be skipped});\n```\n\nUsing `describe.skip` is often a cleaner alternative to temporarily commenting out a chunk of tests. Beware that the `describe` block will still run. If you have some setup that also should be skipped, do it in a `beforeAll` or `beforeEach` block.\n\n### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn \"Direct link to describeskipeachtablename-fn\")\n\nAlso under the aliases: `xdescribe.each(table)(name, fn)` and ``xdescribe.each`table`(name, fn)``\n\nUse `describe.skip.each` if you want to stop running a suite of data driven tests.\n\n`describe.skip.each` is available with two APIs:\n\n#### `describe.skip.each(table)(name, fn)`[​](#describeskipeachtablename-fn-1 \"Direct link to describeskipeachtablename-fn-1\")\n\n```\ndescribe.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  test(`returns ${expected}`, () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``describe.skip.each`table`(name, fn)``[​](#describeskipeachtablename-fn-2 \"Direct link to describeskipeachtablename-fn-2\")\n\n```\ndescribe.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  test('will not be run', () => {    expect(a + b).toBe(expected); // will not be run  });});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test(name, fn, timeout)`[​](#testname-fn-timeout \"Direct link to testname-fn-timeout\")\n\nAlso under the alias: `it(name, fn, timeout)`\n\nAll you need in a test file is the `test` method which runs a test. For example, let's say there's a function `inchesOfRain()` that should be zero. Your whole test could be:\n\n```\ntest('did not rain', () => {  expect(inchesOfRain()).toBe(0);});\n```\n\nThe first argument is the test name; the second argument is a function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nIf a **promise is returned** from `test`, Jest will wait for the promise to resolve before letting the test complete. For example, let's say `fetchBeverageList()` returns a promise that is supposed to resolve to a list that has `lemon` in it. You can test this with:\n\n```\ntest('has lemon in it', () => {  return fetchBeverageList().then(list => {    expect(list).toContain('lemon');  });});\n```\n\nEven though the call to `test` will return right away, the test doesn't complete until the promise resolves. For more details, see [Testing Asynchronous Code](https://jestjs.io/docs/29.4/asynchronous) page.\n\ntip\n\nJest will also wait if you **provide an argument to the test function**, usually called `done`. This could be handy when you want to test [callbacks](https://jestjs.io/docs/29.4/asynchronous#callbacks).\n\n### `test.concurrent(name, fn, timeout)`[​](#testconcurrentname-fn-timeout \"Direct link to testconcurrentname-fn-timeout\")\n\nAlso under the alias: `it.concurrent(name, fn, timeout)`\n\ncaution\n\n`test.concurrent` is considered experimental - see [here](https://github.com/jestjs/jest/labels/Area%3A%20Concurrent) for details on missing features and other issues.\n\nUse `test.concurrent` if you want the test to run concurrently.\n\nThe first argument is the test name; the second argument is an asynchronous function that contains the expectations to test. The third argument (optional) is `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\n```\ntest.concurrent('addition of 2 numbers', async () => {  expect(5 + 3).toBe(8);});test.concurrent('subtraction 2 numbers', async () => {  expect(5 - 3).toBe(2);});\n```\n\ntip\n\nUse the [`maxConcurrency`](https://jestjs.io/docs/29.4/configuration#maxconcurrency-number) configuration option to prevent Jest from executing more than the specified amount of tests at the same time.\n\n### `test.concurrent.each(table)(name, fn, timeout)`[​](#testconcurrenteachtablename-fn-timeout \"Direct link to testconcurrenteachtablename-fn-timeout\")\n\nAlso under the alias: `it.concurrent.each(table)(name, fn, timeout)`\n\nUse `test.concurrent.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in, the tests are all run asynchronously.\n\n`test.concurrent.each` is available with two APIs:\n\n#### 1\\. `test.concurrent.each(table)(name, fn, timeout)`[​](#1-testconcurrenteachtablename-fn-timeout \"Direct link to 1-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.concurrent.each`table`(name, fn, timeout)``[​](#2-testconcurrenteachtablename-fn-timeout \"Direct link to 2-testconcurrenteachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object, **this will have to be an asynchronous function**.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.concurrent.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn \"Direct link to testconcurrentonlyeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.only.each(table)(name, fn)`\n\nUse `test.concurrent.only.each` if you want to only run specific tests with different test data concurrently.\n\n`test.concurrent.only.each` is available with two APIs:\n\n#### `test.concurrent.only.each(table)(name, fn)`[​](#testconcurrentonlyeachtablename-fn-1 \"Direct link to testconcurrentonlyeachtablename-fn-1\")\n\n```\ntest.concurrent.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn \"Direct link to testonlyeachtablename-fn\")\n\n```\ntest.concurrent.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn \"Direct link to testconcurrentskipeachtablename-fn\")\n\nAlso under the alias: `it.concurrent.skip.each(table)(name, fn)`\n\nUse `test.concurrent.skip.each` if you want to stop running a collection of asynchronous data driven tests.\n\n`test.concurrent.skip.each` is available with two APIs:\n\n#### `test.concurrent.skip.each(table)(name, fn)`[​](#testconcurrentskipeachtablename-fn-1 \"Direct link to testconcurrentskipeachtablename-fn-1\")\n\n```\ntest.concurrent.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', async (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.concurrent.skip.each`table`(name, fn)``[​](#testconcurrentskipeachtablename-fn-2 \"Direct link to testconcurrentskipeachtablename-fn-2\")\n\n```\ntest.concurrent.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', async ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.each(table)(name, fn, timeout)`[​](#testeachtablename-fn-timeout \"Direct link to testeachtablename-fn-timeout\")\n\nAlso under the alias: `it.each(table)(name, fn)` and ``it.each`table`(name, fn)``\n\nUse `test.each` if you keep duplicating the same test with different data. `test.each` allows you to write the test once and pass data in.\n\n`test.each` is available with two APIs:\n\n#### 1\\. `test.each(table)(name, fn, timeout)`[​](#1-testeachtablename-fn-timeout \"Direct link to 1-testeachtablename-fn-timeout\")\n\n*   `table`: `Array` of Arrays with the arguments that are passed into the test `fn` for each row. If you pass in a 1D array of primitives, internally it will be mapped to a table i.e. `[1, 2, 3] -> [[1], [2], [3]]`\n*   `name`: `String` the title of the test block.\n    *   Generate unique test titles by positionally injecting parameters with [`printf` formatting](https://nodejs.org/api/util.html#util_util_format_format_args):\n        *   `%p` - [pretty-format](https://www.npmjs.com/package/pretty-format).\n        *   `%s`\\- String.\n        *   `%d`\\- Number.\n        *   `%i` - Integer.\n        *   `%f` - Floating point value.\n        *   `%j` - JSON.\n        *   `%o` - Object.\n        *   `%#` - Index of the test case.\n        *   `%%` - single percent sign ('%'). This does not consume an argument.\n    *   Or generate unique test titles by injecting properties of test case object with `$variable`\n        *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n        *   You can use `$#` to inject the index of the test case\n        *   You cannot use `$variable` with the `printf` formatting except for `%%`\n*   `fn`: `Function` the test to be run, this is the function that will receive the parameters in each row as function arguments.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});\n```\n\n```\ntest.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n#### 2\\. ``test.each`table`(name, fn, timeout)``[​](#2-testeachtablename-fn-timeout \"Direct link to 2-testeachtablename-fn-timeout\")\n\n*   `table`: `Tagged Template Literal`\n    *   First row of variable name column headings separated with `|`\n    *   One or more subsequent rows of data supplied as template literal expressions using `${value}` syntax.\n*   `name`: `String` the title of the test, use `$variable` to inject test data into the test title from the tagged template expressions.\n    *   To inject nested object values use you can supply a keyPath i.e. `$variable.path.to.value`\n*   `fn`: `Function` the test to be run, this is the function that will receive the test data object.\n*   Optionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait for each row before aborting. The default timeout is 5 seconds.\n\nExample:\n\n```\ntest.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.failing(name, fn, timeout)`[​](#testfailingname-fn-timeout \"Direct link to testfailingname-fn-timeout\")\n\nAlso under the alias: `it.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.failing` when you are writing a test and expecting it to fail. These tests will behave the other way normal tests do. If `failing` test will throw any errors then it will pass. If it does not throw it will fail.\n\ntip\n\nYou can use this type of test i.e. when writing code in a BDD way. In that case the tests will not show up as failing until they pass. Then you can just remove the `failing` modifier to make them pass.\n\nIt can also be a nice way to contribute failing tests to a project, even if you don't know how to fix the bug.\n\nExample:\n\n```\ntest.failing('it is not equal', () => {  expect(5).toBe(6); // this test will pass});test.failing('it is equal', () => {  expect(10).toBe(10); // this test will fail});\n```\n\n### `test.failing.each(name, fn, timeout)`[​](#testfailingeachname-fn-timeout \"Direct link to testfailingeachname-fn-timeout\")\n\nAlso under the alias: `it.failing.each(table)(name, fn)` and ``it.failing.each`table`(name, fn)``\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nYou can also run multiple tests at once by adding `each` after `failing`.\n\nExample:\n\n```\ntest.failing.each([  {a: 1, b: 1, expected: 2},  {a: 1, b: 2, expected: 3},  {a: 2, b: 1, expected: 3},])('.add($a, $b)', ({a, b, expected}) => {  expect(a + b).toBe(expected);});\n```\n\n### `test.only.failing(name, fn, timeout)`[​](#testonlyfailingname-fn-timeout \"Direct link to testonlyfailingname-fn-timeout\")\n\nAlso under the aliases: `it.only.failing(name, fn, timeout)`, `fit.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.only.failing` if you want to only run a specific failing test.\n\n### `test.skip.failing(name, fn, timeout)`[​](#testskipfailingname-fn-timeout \"Direct link to testskipfailingname-fn-timeout\")\n\nAlso under the aliases: `it.skip.failing(name, fn, timeout)`, `xit.failing(name, fn, timeout)`, `xtest.failing(name, fn, timeout)`\n\nnote\n\nThis is only available with the default [jest-circus](https://github.com/jestjs/jest/tree/main/packages/jest-circus) runner.\n\nUse `test.skip.failing` if you want to skip running a specific failing test.\n\n### `test.only(name, fn, timeout)`[​](#testonlyname-fn-timeout \"Direct link to testonlyname-fn-timeout\")\n\nAlso under the aliases: `it.only(name, fn, timeout)`, and `fit(name, fn, timeout)`\n\nWhen you are debugging a large test file, you will often only want to run a subset of tests. You can use `.only` to specify which tests are the only ones you want to run in that test file.\n\nOptionally, you can provide a `timeout` (in milliseconds) for specifying how long to wait before aborting. The default timeout is 5 seconds.\n\nFor example, let's say you had these tests:\n\n```\ntest.only('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run in that test file, since it is run with `test.only`.\n\nUsually you wouldn't check code using `test.only` into source control - you would use it for debugging, and remove it once you have fixed the broken tests.\n\n### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-1 \"Direct link to testonlyeachtablename-fn-1\")\n\nAlso under the aliases: `it.only.each(table)(name, fn)`, `fit.each(table)(name, fn)`, ``it.only.each`table`(name, fn)`` and ``fit.each`table`(name, fn)``\n\nUse `test.only.each` if you want to only run specific tests with different test data.\n\n`test.only.each` is available with two APIs:\n\n#### `test.only.each(table)(name, fn)`[​](#testonlyeachtablename-fn-2 \"Direct link to testonlyeachtablename-fn-2\")\n\n```\ntest.only.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.only.each`table`(name, fn)``[​](#testonlyeachtablename-fn-3 \"Direct link to testonlyeachtablename-fn-3\")\n\n```\ntest.only.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected);});test('will not be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.skip(name, fn)`[​](#testskipname-fn \"Direct link to testskipname-fn\")\n\nAlso under the aliases: `it.skip(name, fn)`, `xit(name, fn)`, and `xtest(name, fn)`\n\nWhen you are maintaining a large codebase, you may sometimes find a test that is temporarily broken for some reason. If you want to skip running this test, but you don't want to delete this code, you can use `test.skip` to specify some tests to skip.\n\nFor example, let's say you had these tests:\n\n```\ntest('it is raining', () => {  expect(inchesOfRain()).toBeGreaterThan(0);});test.skip('it is not snowing', () => {  expect(inchesOfSnow()).toBe(0);});\n```\n\nOnly the \"it is raining\" test will run, since the other test is run with `test.skip`.\n\nYou could comment the test out, but it's often a bit nicer to use `test.skip` because it will maintain indentation and syntax highlighting.\n\n### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn \"Direct link to testskipeachtablename-fn\")\n\nAlso under the aliases: `it.skip.each(table)(name, fn)`, `xit.each(table)(name, fn)`, `xtest.each(table)(name, fn)`, ``it.skip.each`table`(name, fn)``, ``xit.each`table`(name, fn)`` and ``xtest.each`table`(name, fn)``\n\nUse `test.skip.each` if you want to stop running a collection of data driven tests.\n\n`test.skip.each` is available with two APIs:\n\n#### `test.skip.each(table)(name, fn)`[​](#testskipeachtablename-fn-1 \"Direct link to testskipeachtablename-fn-1\")\n\n```\ntest.skip.each([  [1, 1, 2],  [1, 2, 3],  [2, 1, 3],])('.add(%i, %i)', (a, b, expected) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n#### ``test.skip.each`table`(name, fn)``[​](#testskipeachtablename-fn-2 \"Direct link to testskipeachtablename-fn-2\")\n\n```\ntest.skip.each`  a    | b    | expected  ${1} | ${1} | ${2}  ${1} | ${2} | ${3}  ${2} | ${1} | ${3}`('returns $expected when $a is added to $b', ({a, b, expected}) => {  expect(a + b).toBe(expected); // will not be run});test('will be run', () => {  expect(1 / 0).toBe(Infinity);});\n```\n\n### `test.todo(name)`[​](#testtodoname \"Direct link to testtodoname\")\n\nAlso under the alias: `it.todo(name)`\n\nUse `test.todo` when you are planning on writing tests. These tests will be highlighted in the summary output at the end so you know how many tests you still need todo.\n\n```\nconst add = (a, b) => a + b;test.todo('add should be associative');\n```\n\ntip\n\n`test.todo` will throw an error if you pass it a test callback function. Use [`test.skip`](#testskipname-fn) instead, if you already implemented the test, but do not want it to run.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.4/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `.each`[​](#each \"Direct link to each\")\n\nThe `.each` modifier offers few different ways to define a table of the test cases. Some of the APIs have caveats related with the type inference of the arguments which are passed to `describe` or `test` callback functions. Let's take a look at each of them.\n\nnote\n\nFor simplicity `test.each` is picked for the examples, but the type inference is identical in all cases where `.each` modifier can be used: `describe.each`, `test.concurrent.only.each`, `test.skip.each`, etc.\n\n#### Array of objects[​](#array-of-objects \"Direct link to Array of objects\")\n\nThe array of objects API is most verbose, but it makes the type inference a painless task. A `table` can be inlined:\n\n```\nimport {test} from '@jest/globals';test.each([  {name: 'a', path: 'path/to/a', count: 1, write: true},  {name: 'b', path: 'path/to/b', count: 3},])('inline table', ({name, path, count, write}) => {  // arguments are typed as expected, e.g. `write: boolean | undefined`});\n```\n\nOr declared separately as a variable:\n\n```\nimport {test} from '@jest/globals';const table = [  {a: 1, b: 2, expected: 'three', extra: true},  {a: 3, b: 4, expected: 'seven', extra: false},  {a: 5, b: 6, expected: 'eleven'},];test.each(table)('table as a variable', ({a, b, expected, extra}) => {  // again everything is typed as expected, e.g. `extra: boolean | undefined`});\n```\n\n#### Array of arrays[​](#array-of-arrays \"Direct link to Array of arrays\")\n\nThe array of arrays style will work smoothly with inlined tables:\n\n```\nimport {test} from '@jest/globals';test.each([  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],])('inline table example', (a, b, expected, extra) => {  // arguments are typed as expected, e.g. `extra: boolean | undefined`});\n```\n\nHowever, if a table is declared as a separate variable, it must be typed as an array of tuples for correct type inference (this is not needed only if all elements of a row are of the same type):\n\n```\nimport {test} from '@jest/globals';const table: Array<[number, number, string, boolean?]> = [  [1, 2, 'three', true],  [3, 4, 'seven', false],  [5, 6, 'eleven'],];test.each(table)('table as a variable example', (a, b, expected, extra) => {  // without the annotation types are incorrect, e.g. `a: number | string | boolean`});\n```\n\n#### Template literal[​](#template-literal \"Direct link to Template literal\")\n\nIf all values are of the same type, the template literal API will type the arguments correctly:\n\n```\nimport {test} from '@jest/globals';test.each`  a    | b    | expected  ${1} | ${2} | ${3}  ${3} | ${4} | ${7}  ${5} | ${6} | ${11}`('template literal example', ({a, b, expected}) => {  // all arguments are of type `number`});\n```\n\nOtherwise it will require a generic type argument:\n\n```\nimport {test} from '@jest/globals';test.each<{a: number; b: number; expected: string; extra?: boolean}>`  a    | b    | expected    | extra  ${1} | ${2} | ${'three'}  | ${true}  ${3} | ${4} | ${'seven'}  | ${false}  ${5} | ${6} | ${'eleven'}`('template literal example', ({a, b, expected, extra}) => {  // without the generic argument in this case types would default to `unknown`});\n```",
    "title": "Globals · Jest",
    "description": "In your test files, Jest puts each of these methods and objects into the global environment. You don't have to require or import anything to use them. However, if you prefer explicit imports, you can do import {describe, expect, test} from '@jest/globals'.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.5/cli",
    "markdown": "# Jest CLI Options · Jest\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](https://jestjs.io/docs/29.5/configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line[​](#running-from-the-command-line \"Direct link to Running from the command line\")\n\nRun all tests (default):\n\nRun only the tests that were specified with a pattern or filename:\n\n```\njest my-test #orjest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\nRun watch mode:\n\n```\njest --watch #runs jest -o by defaultjest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with package manager[​](#using-with-package-manager \"Direct link to Using with package manager\")\n\nIf you run Jest via your package manager, you can still pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\nyou can use:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support[​](#camelcase--dashed-args-support \"Direct link to Camelcase & dashed args support\")\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n```\njest --collect-coveragejest --collectCoverage\n```\n\nArguments can also be mixed:\n\n```\njest --update-snapshot --detectOpenHandles\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nnote\n\nCLI options take precedence over values from the [Configuration](https://jestjs.io/docs/29.5/configuration).\n\n*   [Camelcase & dashed args support](#camelcase--dashed-args-support)\n*   [Options](#options)\n*   [Reference](#reference)\n    *   [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n    *   [`--bail[=<n>]`](#--bailn)\n    *   [`--cache`](#--cache)\n    *   [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n    *   [`--changedSince`](#--changedsince)\n    *   [`--ci`](#--ci)\n    *   [`--clearCache`](#--clearcache)\n    *   [`--clearMocks`](#--clearmocks)\n    *   [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n    *   [`--colors`](#--colors)\n    *   [`--config=<path>`](#--configpath)\n    *   [`--coverage[=<boolean>]`](#--coverageboolean)\n    *   [`--coverageDirectory=<path>`](#--coveragedirectorypath)\n    *   [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n    *   [`--debug`](#--debug)\n    *   [`--detectOpenHandles`](#--detectopenhandles)\n    *   [`--env=<environment>`](#--envenvironment)\n    *   [`--errorOnDeprecated`](#--errorondeprecated)\n    *   [`--expand`](#--expand)\n    *   [`--filter=<file>`](#--filterfile)\n    *   [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n    *   [`--forceExit`](#--forceexit)\n    *   [`--help`](#--help)\n    *   [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n    *   [`--init`](#--init)\n    *   [`--injectGlobals`](#--injectglobals)\n    *   [`--json`](#--json)\n    *   [`--lastCommit`](#--lastcommit)\n    *   [`--listTests`](#--listtests)\n    *   [`--logHeapUsage`](#--logheapusage)\n    *   [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n    *   [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n    *   [`--noStackTrace`](#--nostacktrace)\n    *   [`--notify`](#--notify)\n    *   [`--onlyChanged`](#--onlychanged)\n    *   [`--openHandlesTimeout=<milliseconds>`](#--openhandlestimeoutmilliseconds)\n    *   [`--outputFile=<filename>`](#--outputfilefilename)\n    *   [`--passWithNoTests`](#--passwithnotests)\n    *   [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n    *   [`--randomize`](#--randomize)\n    *   [`--reporters`](#--reporters)\n    *   [`--resetMocks`](#--resetmocks)\n    *   [`--restoreMocks`](#--restoremocks)\n    *   [`--roots`](#--roots)\n    *   [`--runInBand`](#--runinband)\n    *   [`--runTestsByPath`](#--runtestsbypath)\n    *   [`--seed=<num>`](#--seednum)\n    *   [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n    *   [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n    *   [`--shard`](#--shard)\n    *   [`--showConfig`](#--showconfig)\n    *   [`--showSeed`](#--showseed)\n    *   [`--silent`](#--silent)\n    *   [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n    *   [`--testLocationInResults`](#--testlocationinresults)\n    *   [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n    *   [`--testNamePattern=<regex>`](#--testnamepatternregex)\n    *   [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n    *   [`--testPathPattern=<regex>`](#--testpathpatternregex)\n    *   [`--testRunner=<path>`](#--testrunnerpath)\n    *   [`--testSequencer=<path>`](#--testsequencerpath)\n    *   [`--testTimeout=<number>`](#--testtimeoutnumber)\n    *   [`--updateSnapshot`](#--updatesnapshot)\n    *   [`--useStderr`](#--usestderr)\n    *   [`--verbose`](#--verbose)\n    *   [`--version`](#--version)\n    *   [`--watch`](#--watch)\n    *   [`--watchAll`](#--watchall)\n    *   [`--watchman`](#--watchman)\n    *   [`--workerThreads`](#--workerthreads)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `jest <regexForTestFiles>`[​](#jest-regexfortestfiles \"Direct link to jest-regexfortestfiles\")\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`[​](#--bailn \"Direct link to --bailn\")\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`[​](#--cache \"Direct link to --cache\")\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`[​](#--changedfileswithancestor \"Direct link to --changedfileswithancestor\")\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`[​](#--changedsince \"Direct link to --changedsince\")\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`[​](#--ci \"Direct link to --ci\")\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`[​](#--clearcache \"Direct link to --clearcache\")\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`[​](#--clearmocks \"Direct link to --clearmocks\")\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](https://jestjs.io/docs/29.5/jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`[​](#--collectcoveragefromglob \"Direct link to --collectcoveragefromglob\")\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`[​](#--colors \"Direct link to --colors\")\n\nForces test results output highlighting even if stdout is not a TTY.\n\nnote\n\nAlternatively you can set the environment variable `FORCE_COLOR=true` to forcefully enable or `FORCE_COLOR=false` to disable colorized output. The use of `FORCE_COLOR` overrides all other color support checks.\n\n### `--config=<path>`[​](#--configpath \"Direct link to --configpath\")\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`[​](#--coverageboolean \"Direct link to --coverageboolean\")\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageDirectory=<path>`[​](#--coveragedirectorypath \"Direct link to --coveragedirectorypath\")\n\nThe directory where Jest should output its coverage files.\n\n### `--coverageProvider=<provider>`[​](#--coverageproviderprovider \"Direct link to --coverageproviderprovider\")\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\n### `--debug`[​](#--debug \"Direct link to --debug\")\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`[​](#--detectopenhandles \"Direct link to --detectopenhandles\")\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`[​](#--envenvironment \"Direct link to --envenvironment\")\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`[​](#--errorondeprecated \"Direct link to --errorondeprecated\")\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`[​](#--expand \"Direct link to --expand\")\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`[​](#--filterfile \"Direct link to --filterfile\")\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with shape `{ filtered: Array<{ test: string }> }`. Especially useful when used in conjunction with a testing infrastructure to filter known broken tests, e.g.\n\nmy-filter.js\n\n```\nmodule.exports = testPaths => {  const allowedPaths = testPaths    .filter(filteringFunction)    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]  return {    filtered: allowedPaths,  };};\n```\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`[​](#--forceexit \"Direct link to --forceexit\")\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`[​](#--help \"Direct link to --help\")\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`[​](#--ignoreprojects-project1--projectn \"Direct link to --ignoreprojects-project1--projectn\")\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--init`[​](#--init \"Direct link to --init\")\n\nGenerate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.\n\n### `--injectGlobals`[​](#--injectglobals \"Direct link to --injectglobals\")\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n```\nimport {expect, jest, test} from '@jest/globals';jest.useFakeTimers();test('some test', () => {  expect(Date.now()).toBe(0);});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`[​](#--json \"Direct link to --json\")\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`[​](#--lastcommit \"Direct link to --lastcommit\")\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`[​](#--listtests \"Direct link to --listtests\")\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`[​](#--logheapusage \"Direct link to --logheapusage\")\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`[​](#--maxconcurrencynum \"Direct link to --maxconcurrencynum\")\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`[​](#--maxworkersnumstring \"Direct link to --maxworkersnumstring\")\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`[​](#--nostacktrace \"Direct link to --nostacktrace\")\n\nDisables stack trace in test results output.\n\n### `--notify`[​](#--notify \"Direct link to --notify\")\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`[​](#--onlychanged \"Direct link to --onlychanged\")\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--openHandlesTimeout=<milliseconds>`[​](#--openhandlestimeoutmilliseconds \"Direct link to --openhandlestimeoutmilliseconds\")\n\nWhen `--detectOpenHandles` and `--forceExit` are _disabled_, Jest will print a warning if the process has not exited cleanly after this number of milliseconds. A value of `0` disables the warning. Defaults to `1000`.\n\n### `--outputFile=<filename>`[​](#--outputfilefilename \"Direct link to --outputfilefilename\")\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](https://jestjs.io/docs/29.5/configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`[​](#--passwithnotests \"Direct link to --passwithnotests\")\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`[​](#--projects-path1--pathn \"Direct link to --projects-path1--pathn\")\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](https://jestjs.io/docs/29.5/configuration#projects-arraystring--projectconfig) configuration option.\n\nnote\n\nIf configuration files are found in the specified paths, _all_ projects specified within those configuration files will be run.\n\n### `--randomize`[​](#--randomize \"Direct link to --randomize\")\n\nShuffle the order of the tests within a file. The shuffling is based on the seed. See [`--seed=<num>`](#--seednum) for more info.\n\nSeed value is displayed when this option is set. Equivalent to setting the CLI option [`--showSeed`](#--showseed).\n\n```\njest --randomize --seed 1234\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--reporters`[​](#--reporters \"Direct link to --reporters\")\n\nRun tests with specified reporters. [Reporter options](https://jestjs.io/docs/29.5/configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`[​](#--resetmocks \"Direct link to --resetmocks\")\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](https://jestjs.io/docs/29.5/jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`[​](#--restoremocks \"Direct link to --restoremocks\")\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](https://jestjs.io/docs/29.5/jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`[​](#--roots \"Direct link to --roots\")\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`[​](#--runinband \"Direct link to --runinband\")\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`[​](#--runtestsbypath \"Direct link to --runtestsbypath\")\n\nRun only the tests that were specified with their exact paths.\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--seed=<num>`[​](#--seednum \"Direct link to --seednum\")\n\nSets a seed value that can be retrieved in a test file via [`jest.getSeed()`](https://jestjs.io/docs/29.5/jest-object#jestgetseed). The seed value must be between `-0x80000000` and `0x7fffffff` inclusive (`-2147483648` (`-(2 ** 31)`) and `2147483647` (`2 ** 31 - 1`) in decimal).\n\ntip\n\nIf this option is not specified Jest will randomly generate the value. You can use the [`--showSeed`](#--showseed) flag to print the seed in the test report summary.\n\n### `--selectProjects <project1> ... <projectN>`[​](#--selectprojects-project1--projectn \"Direct link to --selectprojects-project1--projectn\")\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`[​](#--setupfilesafterenv-path1--pathn \"Direct link to --setupfilesafterenv-path1--pathn\")\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`[​](#--shard \"Direct link to --shard\")\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](https://jestjs.io/docs/29.5/configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n```\njest --shard=1/3jest --shard=2/3jest --shard=3/3\n```\n\n### `--showConfig`[​](#--showconfig \"Direct link to --showconfig\")\n\nPrint your Jest config and then exits.\n\n### `--showSeed`[​](#--showseed \"Direct link to --showseed\")\n\nPrints the seed value in the test report summary. See [`--seed=<num>`](#--seednum) for the details.\n\nCan also be set in configuration. See [`showSeed`](https://jestjs.io/docs/29.5/configuration#showseed-boolean).\n\n### `--silent`[​](#--silent \"Direct link to --silent\")\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`[​](#--testenvironmentoptionsjson-string \"Direct link to --testenvironmentoptionsjson-string\")\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`[​](#--testlocationinresults \"Direct link to --testlocationinresults\")\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nnote\n\nIn the resulting object `column` is 0-indexed while `line` is not.\n\n```\n{  \"column\": 4,  \"line\": 5}\n```\n\n### `--testMatch glob1 ... globN`[​](#--testmatch-glob1--globn \"Direct link to --testmatch-glob1--globn\")\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](https://jestjs.io/docs/29.5/configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`[​](#--testnamepatternregex \"Direct link to --testnamepatternregex\")\n\nAlias: `-t`. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like `'GET /api/posts with auth'`, then you can use `jest -t=auth`.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`[​](#--testpathignorepatternsregexarray \"Direct link to --testpathignorepatternsregexarray\")\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPattern=<regex>`[​](#--testpathpatternregex \"Direct link to --testpathpatternregex\")\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`[​](#--testrunnerpath \"Direct link to --testrunnerpath\")\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`[​](#--testsequencerpath \"Direct link to --testsequencerpath\")\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](https://jestjs.io/docs/29.5/configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`[​](#--testtimeoutnumber \"Direct link to --testtimeoutnumber\")\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`[​](#--updatesnapshot \"Direct link to --updatesnapshot\")\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`[​](#--usestderr \"Direct link to --usestderr\")\n\nDivert all output to stderr.\n\n### `--verbose`[​](#--verbose \"Direct link to --verbose\")\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`[​](#--version \"Direct link to --version\")\n\nAlias: `-v`. Print the version and exit.\n\n### `--watch`[​](#--watch \"Direct link to --watch\")\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\ntip\n\nUse `--no-watch` (or `--watch=false`) to explicitly disable the watch mode if it was enabled using `--watch`. In most CI environments, this is automatically handled for you.\n\n### `--watchAll`[​](#--watchall \"Direct link to --watchall\")\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\ntip\n\nUse `--no-watchAll` (or `--watchAll=false`) to explicitly disable the watch mode if it was enabled using `--watchAll`. In most CI environments, this is automatically handled for you.\n\n### `--watchman`[​](#--watchman \"Direct link to --watchman\")\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.\n\n### `--workerThreads`[​](#--workerthreads \"Direct link to --workerthreads\")\n\nWhether to use [worker threads](https://nodejs.org/dist/latest/docs/api/worker_threads.html) for parallelization. [Child processes](https://nodejs.org/dist/latest/docs/api/child_process.html) are used by default.",
    "title": "Jest CLI Options · Jest",
    "description": "The jest command line runner has a number of useful options. You can run jest --help to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's Configuration options can also be specified through the CLI.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/setup-teardown",
    "markdown": "# Setup and Teardown · Jest\n\nOften while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.\n\n## Repeating Setup[​](#repeating-setup \"Direct link to Repeating Setup\")\n\nIf you have some work you need to do repeatedly for many tests, you can use `beforeEach` and `afterEach` hooks.\n\nFor example, let's say that several tests interact with a database of cities. You have a method `initializeCityDatabase()` that must be called before each of these tests, and a method `clearCityDatabase()` that must be called after each of these tests. You can do this with:\n\n```\nbeforeEach(() => {  initializeCityDatabase();});afterEach(() => {  clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n`beforeEach` and `afterEach` can handle asynchronous code in the same ways that [tests can handle asynchronous code](https://jestjs.io/docs/29.4/asynchronous) - they can either take a `done` parameter or return a promise. For example, if `initializeCityDatabase()` returned a promise that resolved when the database was initialized, we would want to return that promise:\n\n```\nbeforeEach(() => {  return initializeCityDatabase();});\n```\n\n## One-Time Setup[​](#one-time-setup \"Direct link to One-Time Setup\")\n\nIn some cases, you only need to do setup once, at the beginning of a file. This can be especially bothersome when the setup is asynchronous, so you can't do it inline. Jest provides `beforeAll` and `afterAll` hooks to handle this situation.\n\nFor example, if both `initializeCityDatabase()` and `clearCityDatabase()` returned promises, and the city database could be reused between tests, we could change our test code to:\n\n```\nbeforeAll(() => {  return initializeCityDatabase();});afterAll(() => {  return clearCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});\n```\n\n## Scoping[​](#scoping \"Direct link to Scoping\")\n\nThe top level `before*` and `after*` hooks apply to every test in a file. The hooks declared inside a `describe` block apply only to the tests within that `describe` block.\n\nFor example, let's say we had not just a city database, but also a food database. We could do different setup for different tests:\n\n```\n// Applies to all tests in this filebeforeEach(() => {  return initializeCityDatabase();});test('city database has Vienna', () => {  expect(isCity('Vienna')).toBeTruthy();});test('city database has San Juan', () => {  expect(isCity('San Juan')).toBeTruthy();});describe('matching cities to foods', () => {  // Applies only to tests in this describe block  beforeEach(() => {    return initializeFoodDatabase();  });  test('Vienna <3 veal', () => {    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);  });  test('San Juan <3 plantains', () => {    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);  });});\n```\n\nNote that the top-level `beforeEach` is executed before the `beforeEach` inside the `describe` block. It may help to illustrate the order of execution of all hooks.\n\n```\nbeforeAll(() => console.log('1 - beforeAll'));afterAll(() => console.log('1 - afterAll'));beforeEach(() => console.log('1 - beforeEach'));afterEach(() => console.log('1 - afterEach'));test('', () => console.log('1 - test'));describe('Scoped / Nested block', () => {  beforeAll(() => console.log('2 - beforeAll'));  afterAll(() => console.log('2 - afterAll'));  beforeEach(() => console.log('2 - beforeEach'));  afterEach(() => console.log('2 - afterEach'));  test('', () => console.log('2 - test'));});// 1 - beforeAll// 1 - beforeEach// 1 - test// 1 - afterEach// 2 - beforeAll// 1 - beforeEach// 2 - beforeEach// 2 - test// 2 - afterEach// 1 - afterEach// 2 - afterAll// 1 - afterAll\n```\n\n## Order of Execution[​](#order-of-execution \"Direct link to Order of Execution\")\n\nJest executes all describe handlers in a test file _before_ it executes any of the actual tests. This is another reason to do setup and teardown inside `before*` and `after*` handlers rather than inside the `describe` blocks. Once the `describe` blocks are complete, by default Jest runs all the tests serially in the order they were encountered in the collection phase, waiting for each to finish and be tidied up before moving on.\n\nConsider the following illustrative test file and output:\n\n```\ndescribe('describe outer', () => {  console.log('describe outer-a');  describe('describe inner 1', () => {    console.log('describe inner 1');    test('test 1', () => console.log('test 1'));  });  console.log('describe outer-b');  test('test 2', () => console.log('test 2'));  describe('describe inner 2', () => {    console.log('describe inner 2');    test('test 3', () => console.log('test 3'));  });  console.log('describe outer-c');});// describe outer-a// describe inner 1// describe outer-b// describe inner 2// describe outer-c// test 1// test 2// test 3\n```\n\nJust like the `describe` and `test` blocks Jest calls the `before*` and `after*` hooks in the order of declaration. Note that the `after*` hooks of the enclosing scope are called first. For example, here is how you can set up and tear down resources which depend on each other:\n\n```\nbeforeEach(() => console.log('connection setup'));beforeEach(() => console.log('database setup'));afterEach(() => console.log('database teardown'));afterEach(() => console.log('connection teardown'));test('test 1', () => console.log('test 1'));describe('extra', () => {  beforeEach(() => console.log('extra database setup'));  afterEach(() => console.log('extra database teardown'));  test('test 2', () => console.log('test 2'));});// connection setup// database setup// test 1// database teardown// connection teardown// connection setup// database setup// extra database setup// test 2// extra database teardown// database teardown// connection teardown\n```\n\nnote\n\nIf you are using `jasmine2` test runner, take into account that it calls the `after*` hooks in the reverse order of declaration. To have identical output, the above example should be altered like this:\n\n```\n  beforeEach(() => console.log('connection setup'));+ afterEach(() => console.log('connection teardown'));  beforeEach(() => console.log('database setup'));+ afterEach(() => console.log('database teardown'));- afterEach(() => console.log('database teardown'));- afterEach(() => console.log('connection teardown'));  // ...\n```\n\n## General Advice[​](#general-advice \"Direct link to General Advice\")\n\nIf a test is failing, one of the first things to check should be whether the test is failing when it's the only test that runs. To run only one test with Jest, temporarily change that `test` command to a `test.only`:\n\n```\ntest.only('this will be the only test that runs', () => {  expect(true).toBe(false);});test('this test will not run', () => {  expect('A').toBe('A');});\n```\n\nIf you have a test that often fails when it's run as part of a larger suite, but doesn't fail when you run it alone, it's a good bet that something from a different test is interfering with this one. You can often fix this by clearing some shared state with `beforeEach`. If you're not sure whether some shared state is being modified, you can also try a `beforeEach` that logs data.",
    "title": "Setup and Teardown · Jest",
    "description": "Often while writing tests you have some setup work that needs to happen before tests run, and you have some finishing work that needs to happen after tests run. Jest provides helper functions to handle this.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/mock-functions",
    "markdown": "# Mock Functions · Jest\n\nMock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with `new`, and allowing test-time configuration of return values.\n\nThere are two ways to mock functions: Either by creating a mock function to use in test code, or writing a [`manual mock`](https://jestjs.io/docs/29.4/manual-mocks) to override a module dependency.\n\n## Using a mock function[​](#using-a-mock-function \"Direct link to Using a mock function\")\n\nLet's imagine we're testing an implementation of a function `forEach`, which invokes a callback for each item in a supplied array.\n\nforEach.js\n\n```\nexport function forEach(items, callback) {  for (const item of items) {    callback(item);  }}\n```\n\nTo test this function, we can use a mock function, and inspect the mock's state to ensure the callback is invoked as expected.\n\nforEach.test.js\n\n```\nconst forEach = require('./forEach');const mockCallback = jest.fn(x => 42 + x);test('forEach mock function', () => {  forEach([0, 1], mockCallback);  // The mock function was called twice  expect(mockCallback.mock.calls).toHaveLength(2);  // The first argument of the first call to the function was 0  expect(mockCallback.mock.calls[0][0]).toBe(0);  // The first argument of the second call to the function was 1  expect(mockCallback.mock.calls[1][0]).toBe(1);  // The return value of the first call to the function was 42  expect(mockCallback.mock.results[0].value).toBe(42);});\n```\n\n## `.mock` property[​](#mock-property \"Direct link to mock-property\")\n\nAll mock functions have this special `.mock` property, which is where data about how the function has been called and what the function returned is kept. The `.mock` property also tracks the value of `this` for each call, so it is possible to inspect this as well:\n\n```\nconst myMock1 = jest.fn();const a = new myMock1();console.log(myMock1.mock.instances);// > [ <a> ]const myMock2 = jest.fn();const b = {};const bound = myMock2.bind(b);bound();console.log(myMock2.mock.contexts);// > [ <b> ]\n```\n\nThese mock members are very useful in tests to assert how these functions get called, instantiated, or what they returned:\n\n```\n// The function was called exactly onceexpect(someMockFunction.mock.calls).toHaveLength(1);// The first arg of the first call to the function was 'first arg'expect(someMockFunction.mock.calls[0][0]).toBe('first arg');// The second arg of the first call to the function was 'second arg'expect(someMockFunction.mock.calls[0][1]).toBe('second arg');// The return value of the first call to the function was 'return value'expect(someMockFunction.mock.results[0].value).toBe('return value');// The function was called with a certain `this` context: the `element` object.expect(someMockFunction.mock.contexts[0]).toBe(element);// This function was instantiated exactly twiceexpect(someMockFunction.mock.instances.length).toBe(2);// The object returned by the first instantiation of this function// had a `name` property whose value was set to 'test'expect(someMockFunction.mock.instances[0].name).toBe('test');// The first argument of the last call to the function was 'test'expect(someMockFunction.mock.lastCall[0]).toBe('test');\n```\n\n## Mock Return Values[​](#mock-return-values \"Direct link to Mock Return Values\")\n\nMock functions can also be used to inject test values into your code during a test:\n\n```\nconst myMock = jest.fn();console.log(myMock());// > undefinedmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);console.log(myMock(), myMock(), myMock(), myMock());// > 10, 'x', true, true\n```\n\nMock functions are also very effective in code that uses a functional continuation-passing style. Code written in this style helps avoid the need for complicated stubs that recreate the behavior of the real component they're standing in for, in favor of injecting values directly into the test right before they're used.\n\n```\nconst filterTestFn = jest.fn();// Make the mock return `true` for the first call,// and `false` for the second callfilterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false);const result = [11, 12].filter(num => filterTestFn(num));console.log(result);// > [11]console.log(filterTestFn.mock.calls[0][0]); // 11console.log(filterTestFn.mock.calls[1][0]); // 12\n```\n\nMost real-world examples actually involve getting ahold of a mock function on a dependent component and configuring that, but the technique is the same. In these cases, try to avoid the temptation to implement logic inside of any function that's not directly being tested.\n\n## Mocking Modules[​](#mocking-modules \"Direct link to Mocking Modules\")\n\nSuppose we have a class that fetches users from our API. The class uses [axios](https://github.com/axios/axios) to call the API then returns the `data` attribute which contains all the users:\n\nusers.js\n\n```\nimport axios from 'axios';class Users {  static all() {    return axios.get('/users.json').then(resp => resp.data);  }}export default Users;\n```\n\nNow, in order to test this method without actually hitting the API (and thus creating slow and fragile tests), we can use the `jest.mock(...)` function to automatically mock the axios module.\n\nOnce we mock the module we can provide a `mockResolvedValue` for `.get` that returns the data we want our test to assert against. In effect, we are saying that we want `axios.get('/users.json')` to return a fake response.\n\nusers.test.js\n\n```\nimport axios from 'axios';import Users from './users';jest.mock('axios');test('should fetch users', () => {  const users = [{name: 'Bob'}];  const resp = {data: users};  axios.get.mockResolvedValue(resp);  // or you could use the following depending on your use case:  // axios.get.mockImplementation(() => Promise.resolve(resp))  return Users.all().then(data => expect(data).toEqual(users));});\n```\n\n## Mocking Partials[​](#mocking-partials \"Direct link to Mocking Partials\")\n\nSubsets of a module can be mocked and the rest of the module can keep their actual implementation:\n\nfoo-bar-baz.js\n\n```\nexport const foo = 'foo';export const bar = () => 'bar';export default () => 'baz';\n```\n\n```\n//test.jsimport defaultExport, {bar, foo} from '../foo-bar-baz';jest.mock('../foo-bar-baz', () => {  const originalModule = jest.requireActual('../foo-bar-baz');  //Mock the default export and named export 'foo'  return {    __esModule: true,    ...originalModule,    default: jest.fn(() => 'mocked baz'),    foo: 'mocked foo',  };});test('should do a partial mock', () => {  const defaultExportResult = defaultExport();  expect(defaultExportResult).toBe('mocked baz');  expect(defaultExport).toHaveBeenCalled();  expect(foo).toBe('mocked foo');  expect(bar()).toBe('bar');});\n```\n\n## Mock Implementations[​](#mock-implementations \"Direct link to Mock Implementations\")\n\nStill, there are cases where it's useful to go beyond the ability to specify return values and full-on replace the implementation of a mock function. This can be done with `jest.fn` or the `mockImplementationOnce` method on mock functions.\n\n```\nconst myMockFn = jest.fn(cb => cb(null, true));myMockFn((err, val) => console.log(val));// > true\n```\n\nThe `mockImplementation` method is useful when you need to define the default implementation of a mock function that is created from another module:\n\nfoo.js\n\n```\nmodule.exports = function () {  // some implementation;};\n```\n\ntest.js\n\n```\njest.mock('../foo'); // this happens automatically with automockingconst foo = require('../foo');// foo is a mock functionfoo.mockImplementation(() => 42);foo();// > 42\n```\n\nWhen you need to recreate a complex behavior of a mock function such that multiple function calls produce different results, use the `mockImplementationOnce` method:\n\n```\nconst myMockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));myMockFn((err, val) => console.log(val));// > truemyMockFn((err, val) => console.log(val));// > false\n```\n\nWhen the mocked function runs out of implementations defined with `mockImplementationOnce`, it will execute the default implementation set with `jest.fn` (if it is defined):\n\n```\nconst myMockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');console.log(myMockFn(), myMockFn(), myMockFn(), myMockFn());// > 'first call', 'second call', 'default', 'default'\n```\n\nFor cases where we have methods that are typically chained (and thus always need to return `this`), we have a sugary API to simplify this in the form of a `.mockReturnThis()` function that also sits on all mocks:\n\n```\nconst myObj = {  myMethod: jest.fn().mockReturnThis(),};// is the same asconst otherObj = {  myMethod: jest.fn(function () {    return this;  }),};\n```\n\n## Mock Names[​](#mock-names \"Direct link to Mock Names\")\n\nYou can optionally provide a name for your mock functions, which will be displayed instead of `'jest.fn()'` in the test error output. Use [`.mockName()`](https://jestjs.io/docs/29.4/mock-function-api#mockfnmocknamename) if you want to be able to quickly identify the mock function reporting an error in your test output.\n\n```\nconst myMockFn = jest  .fn()  .mockReturnValue('default')  .mockImplementation(scalar => 42 + scalar)  .mockName('add42');\n```\n\n## Custom Matchers[​](#custom-matchers \"Direct link to Custom Matchers\")\n\nFinally, in order to make it less demanding to assert how mock functions have been called, we've added some custom matcher functions for you:\n\n```\n// The mock function was called at least onceexpect(mockFunc).toHaveBeenCalled();// The mock function was called at least once with the specified argsexpect(mockFunc).toHaveBeenCalledWith(arg1, arg2);// The last call to the mock function was called with the specified argsexpect(mockFunc).toHaveBeenLastCalledWith(arg1, arg2);// All calls and the name of the mock is written as a snapshotexpect(mockFunc).toMatchSnapshot();\n```\n\nThese matchers are sugar for common forms of inspecting the `.mock` property. You can always do this manually yourself if that's more to your taste or if you need to do something more specific:\n\n```\n// The mock function was called at least onceexpect(mockFunc.mock.calls.length).toBeGreaterThan(0);// The mock function was called at least once with the specified argsexpect(mockFunc.mock.calls).toContainEqual([arg1, arg2]);// The last call to the mock function was called with the specified argsexpect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1]).toEqual([  arg1,  arg2,]);// The first arg of the last call to the mock function was `42`// (note that there is no sugar helper for this specific of an assertion)expect(mockFunc.mock.calls[mockFunc.mock.calls.length - 1][0]).toBe(42);// A snapshot will check that a mock was invoked the same number of times,// in the same order, with the same arguments. It will also assert on the name.expect(mockFunc.mock.calls).toEqual([[arg1, arg2]]);expect(mockFunc.getMockName()).toBe('a mock name');\n```\n\nFor a complete list of matchers, check out the [reference docs](https://jestjs.io/docs/29.4/expect).",
    "title": "Mock Functions · Jest",
    "description": "Mock functions allow you to test the links between code by erasing the actual implementation of a function, capturing calls to the function (and the parameters passed in those calls), capturing instances of constructor functions when instantiated with new, and allowing test-time configuration of return values.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/more-resources",
    "markdown": "# More Resources · Jest\n\nVersion: 29.4\n\nBy now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.\n\n## Browse the docs[​](#browse-the-docs \"Direct link to Browse the docs\")\n\n*   Learn about [Snapshot Testing](https://jestjs.io/docs/29.4/snapshot-testing), [Mock Functions](https://jestjs.io/docs/29.4/mock-functions), and more in our in-depth guides.\n*   Migrate your existing tests to Jest by following our [migration guide](https://jestjs.io/docs/29.4/migration-guide).\n*   Learn how to [configure Jest](https://jestjs.io/docs/29.4/configuration).\n*   Look at the full [API Reference](https://jestjs.io/docs/29.4/api).\n*   [Troubleshoot](https://jestjs.io/docs/29.4/troubleshooting) problems with Jest.\n\n## Learn by example[​](#learn-by-example \"Direct link to Learn by example\")\n\nYou will find a number of example test cases in the [`examples`](https://github.com/jestjs/jest/tree/main/examples) folder on GitHub. You can also learn from the excellent tests used by the [React](https://github.com/facebook/react/tree/main/packages/react/src/__tests__), [Relay](https://github.com/facebook/relay/tree/main/packages/react-relay/__tests__), and [React Native](https://github.com/facebook/react-native/tree/main/Libraries/Animated/__tests__) projects.\n\nAsk questions and find answers from other Jest users like you. [Reactiflux](https://discord.gg/j6FKKQQrW9) is a Discord chat where a lot of Jest discussion happens. Check out the `#testing` channel.\n\nFollow the [Jest Twitter account](https://twitter.com/jestjs_) and [blog](https://jestjs.io/blog/) to find out what's happening in the world of Jest.",
    "title": "More Resources · Jest",
    "description": "By now you should have a good idea of how Jest can help you test your applications. If you're interested in learning more, here's some related stuff you might want to check out.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/upgrading-to-jest29",
    "markdown": "# From v28 to v29 · Jest\n\nUpgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.\n\ninfo\n\nSee [changelog](https://github.com/jestjs/jest/blob/main/CHANGELOG.md#2900) for the full list of changes.\n\nnote\n\nUpgrading from an older version? You can see the upgrade guide from v27 to v28 [here](https://jestjs.io/docs/28.x/upgrading-to-jest28).\n\n## Compatibility[​](#compatibility \"Direct link to Compatibility\")\n\nThe supported Node versions are 14.15, 16.10, 18.0 and above.\n\n## Snapshot format[​](#snapshot-format \"Direct link to Snapshot format\")\n\nAs announced in the [Jest 28 blog post](https://jestjs.io/blog/2022/04/25/jest-28#future), Jest 29 has changed the default snapshot formatting to `{escapeString: false, printBasicPrototype: false}`.\n\nIf you want to keep the old behavior, you can set the `snapshotFormat` property to:\n\n```\n+ snapshotFormat: {+   escapeString: true,+   printBasicPrototype: true+ }\n```\n\n## JSDOM upgrade[​](#jsdom-upgrade \"Direct link to JSDOM upgrade\")\n\n`jest-environment-jsdom` has upgraded `jsdom` from v19 to v20.\n\ninfo\n\nIf you use `jest-environment-jsdom`, the minimum TypeScript version is set to `4.5`.\n\nNotably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `uuid` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n\n## `pretty-format`[​](#pretty-format \"Direct link to pretty-format\")\n\n`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n\n### `jest-mock`[​](#jest-mock \"Direct link to jest-mock\")\n\nExports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n\n## TypeScript[​](#typescript \"Direct link to TypeScript\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.4/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.mocked()`[​](#jestmocked \"Direct link to jestmocked\")\n\nThe [`jest.mocked()`](https://jestjs.io/docs/29.4/mock-function-api#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n\n```\n- const mockedObject = jest.mocked(someObject, true);+ const mockedObject = jest.mocked(someObject);\n```\n\nTo have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n\n```\n- const mockedObject = jest.mocked(someObject);+ const mockedObject = jest.mocked(someObject, {shallow: true});\n```",
    "title": "From v28 to v29 · Jest",
    "description": "Upgrading Jest from v28 to v29? This guide aims to help refactoring your configuration and tests.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/snapshot-testing",
    "markdown": "# Snapshot Testing · Jest\n\nSnapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.\n\nA typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component.\n\n## Snapshot Testing with Jest[​](#snapshot-testing-with-jest \"Direct link to Snapshot Testing with Jest\")\n\nA similar approach can be taken when it comes to testing your React components. Instead of rendering the graphical UI, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your React tree. Consider this [example test](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/link.test.js) for a [Link component](https://github.com/jestjs/jest/blob/main/examples/snapshot/Link.js):\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.facebook.com\">Facebook</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/jestjs/jest/blob/main/examples/snapshot/__tests__/__snapshots__/link.test.js.snap) that looks like this:\n\n```\nexports[`renders correctly 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe snapshot artifact should be committed alongside code changes, and reviewed as part of your code review process. Jest uses [pretty-format](https://github.com/jestjs/jest/tree/main/packages/pretty-format) to make snapshots human-readable during code review. On subsequent test runs, Jest will compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the test runner found a bug in your code (in the `<Link>` component in this case) that should be fixed, or the implementation has changed and the snapshot needs to be updated.\n\nnote\n\nThe snapshot is directly scoped to the data you render – in our example the `<Link>` component with `page` prop passed to it. This implies that even if any other file has missing props (say, `App.js`) in the `<Link>` component, it will still pass the test as the test doesn't know the usage of `<Link>` component and it's scoped only to the `Link.js`. Also, rendering the same component with different props in other snapshot tests will not affect the first one, as the tests don't know about each other.\n\ninfo\n\nMore information on how snapshot testing works and why we built it can be found on the [release blog post](https://jestjs.io/blog/2016/07/27/jest-14). We recommend reading [this blog post](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/) to get a good sense of when you should use snapshot testing. We also recommend watching this [egghead video](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) on Snapshot Testing with Jest.\n\n### Updating Snapshots[​](#updating-snapshots \"Direct link to Updating Snapshots\")\n\nIt's straightforward to spot when a snapshot test fails after a bug has been introduced. When that happens, go ahead and fix the issue and make sure your snapshot tests are passing again. Now, let's talk about the case when a snapshot test is failing due to an intentional implementation change.\n\nOne such situation can arise if we intentionally change the address the Link component in our example is pointing to.\n\n```\n// Updated test case with a Link to a different addressit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"http://www.instagram.com\">Instagram</Link>)    .toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nIn that case, Jest will print this output:\n\n![](https://jestjs.io/assets/images/failedSnapshotTest-754bd8c54c17338fe046c6273fd3f9d1.png)\n\nSince we just updated our component to point to a different address, it's reasonable to expect changes in the snapshot for this component. Our snapshot test case is failing because the snapshot for our updated component no longer matches the snapshot artifact for this test case.\n\nTo resolve this, we will need to update our snapshot artifacts. You can run Jest with a flag that will tell it to re-generate snapshots:\n\nGo ahead and accept the changes by running the above command. You may also use the equivalent single-character `-u` flag to re-generate snapshots if you prefer. This will re-generate snapshot artifacts for all failing snapshot tests. If we had any additional failing snapshot tests due to an unintentional bug, we would need to fix the bug before re-generating snapshots to avoid recording snapshots of the buggy behavior.\n\nIf you'd like to limit which snapshot test cases get re-generated, you can pass an additional `--testNamePattern` flag to re-record snapshots only for those tests that match the pattern.\n\nYou can try out this functionality by cloning the [snapshot example](https://github.com/jestjs/jest/tree/main/examples/snapshot), modifying the `Link` component, and running Jest.\n\n### Interactive Snapshot Mode[​](#interactive-snapshot-mode \"Direct link to Interactive Snapshot Mode\")\n\nFailed snapshots can also be updated interactively in watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshot-58ae38e9cae13140c56d8472453f0595.png)\n\nOnce you enter Interactive Snapshot Mode, Jest will step you through the failed snapshots one test at a time and give you the opportunity to review the failed output.\n\nFrom here you can choose to update that snapshot or skip to the next:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotUpdate-a17d8d77f94702048b4d0e0e4c580719.gif)\n\nOnce you're finished, Jest will give you a summary before returning back to watch mode:\n\n![](https://jestjs.io/assets/images/interactiveSnapshotDone-59ee291ee320accbc4bfc4f33b22638a.png)\n\n### Inline Snapshots[​](#inline-snapshots \"Direct link to Inline Snapshots\")\n\nInline snapshots behave identically to external snapshots (`.snap` files), except the snapshot values are written automatically back into the source code. This means you can get the benefits of automatically generated snapshots without having to switch to an external file to make sure the correct value was written.\n\nExample:\n\nFirst, you write a test, calling `.toMatchInlineSnapshot()` with no arguments:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot();});\n```\n\nThe next time you run Jest, `tree` will be evaluated, and a snapshot will be written as an argument to `toMatchInlineSnapshot`:\n\n```\nit('renders correctly', () => {  const tree = renderer    .create(<Link page=\"https://example.com\">Example Site</Link>)    .toJSON();  expect(tree).toMatchInlineSnapshot(`    <a      className=\"normal\"      href=\"https://example.com\"      onMouseEnter={[Function]}      onMouseLeave={[Function]}    >      Example Site    </a>  `);});\n```\n\nThat's all there is to it! You can even update the snapshots with `--updateSnapshot` or using the `u` key in `--watch` mode.\n\nBy default, Jest handles the writing of snapshots into your source code. However, if you're using [prettier](https://www.npmjs.com/package/prettier) in your project, Jest will detect this and delegate the work to prettier instead (including honoring your configuration).\n\n### Property Matchers[​](#property-matchers \"Direct link to Property Matchers\")\n\nOften there are fields in the object you want to snapshot which are generated (like IDs and Dates). If you try to snapshot these objects, they will force the snapshot to fail on every run:\n\n```\nit('will fail every time', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot();});// Snapshotexports[`will fail every time 1`] = `{  \"createdAt\": 2018-05-19T23:36:09.816Z,  \"id\": 3,  \"name\": \"LeBron James\",}`;\n```\n\nFor these cases, Jest allows providing an asymmetric matcher for any property. These matchers are checked before the snapshot is written or tested, and then saved to the snapshot file instead of the received value:\n\n```\nit('will check the matchers and pass', () => {  const user = {    createdAt: new Date(),    id: Math.floor(Math.random() * 20),    name: 'LeBron James',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    id: expect.any(Number),  });});// Snapshotexports[`will check the matchers and pass 1`] = `{  \"createdAt\": Any<Date>,  \"id\": Any<Number>,  \"name\": \"LeBron James\",}`;\n```\n\nAny given value that is not a matcher will be checked exactly and saved to the snapshot:\n\n```\nit('will check the values and pass', () => {  const user = {    createdAt: new Date(),    name: 'Bond... James Bond',  };  expect(user).toMatchSnapshot({    createdAt: expect.any(Date),    name: 'Bond... James Bond',  });});// Snapshotexports[`will check the values and pass 1`] = `{  \"createdAt\": Any<Date>,  \"name\": 'Bond... James Bond',}`;\n```\n\ntip\n\nIf the case concerns a string not an object then you need to replace random part of that string on your own before testing the snapshot.  \nYou can use for that e.g. [`replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n```\nconst randomNumber = Math.round(Math.random() * 100);const stringWithRandomData = `<div id=\"${randomNumber}\">Lorem ipsum</div>`;const stringWithConstantData = stringWithRandomData.replace(/id=\"\\d+\"/, 123);expect(stringWithConstantData).toMatchSnapshot();\n```\n\nOther ways this can be done is using the [snapshot serializer](https://jestjs.io/docs/29.4/configuration#snapshotserializers-arraystring) or [mocking](https://jestjs.io/docs/29.4/mock-functions) the library responsible for generating the random part of the code you're snapshotting.\n\n## Best Practices[​](#best-practices \"Direct link to Best Practices\")\n\nSnapshots are a fantastic tool for identifying unexpected interface changes within your application – whether that interface is an API response, UI, logs, or error messages. As with any testing strategy, there are some best-practices you should be aware of, and guidelines you should follow, in order to use them effectively.\n\n### 1\\. Treat snapshots as code[​](#1-treat-snapshots-as-code \"Direct link to 1. Treat snapshots as code\")\n\nCommit snapshots and review them as part of your regular code review process. This means treating snapshots as you would any other type of test or code in your project.\n\nEnsure that your snapshots are readable by keeping them focused, short, and by using tools that enforce these stylistic conventions.\n\nAs mentioned previously, Jest uses [`pretty-format`](https://yarnpkg.com/en/package/pretty-format) to make snapshots human-readable, but you may find it useful to introduce additional tools, like [`eslint-plugin-jest`](https://yarnpkg.com/en/package/eslint-plugin-jest) with its [`no-large-snapshots`](https://github.com/jest-community/eslint-plugin-jest/blob/main/docs/rules/no-large-snapshots.md) option, or [`snapshot-diff`](https://yarnpkg.com/en/package/snapshot-diff) with its component snapshot comparison feature, to promote committing short, focused assertions.\n\nThe goal is to make it easy to review snapshots in pull requests, and fight against the habit of regenerating snapshots when test suites fail instead of examining the root causes of their failure.\n\n### 2\\. Tests should be deterministic[​](#2-tests-should-be-deterministic \"Direct link to 2. Tests should be deterministic\")\n\nYour tests should be deterministic. Running the same tests multiple times on a component that has not changed should produce the same results every time. You're responsible for making sure your generated snapshots do not include platform specific or other non-deterministic data.\n\nFor example, if you have a [Clock](https://github.com/jestjs/jest/blob/main/examples/snapshot/Clock.js) component that uses `Date.now()`, the snapshot generated from this component will be different every time the test case is run. In this case we can [mock the Date.now() method](https://jestjs.io/docs/29.4/mock-functions) to return a consistent value every time the test is run:\n\n```\nDate.now = jest.fn(() => 1_482_363_367_071);\n```\n\nNow, every time the snapshot test case runs, `Date.now()` will return `1482363367071` consistently. This will result in the same snapshot being generated for this component regardless of when the test is run.\n\n### 3\\. Use descriptive snapshot names[​](#3-use-descriptive-snapshot-names \"Direct link to 3. Use descriptive snapshot names\")\n\nAlways strive to use descriptive test and/or snapshot names for snapshots. The best names describe the expected snapshot content. This makes it easier for reviewers to verify the snapshots during review, and for anyone to know whether or not an outdated snapshot is the correct behavior before updating.\n\nFor example, compare:\n\n```\nexports[`<UserName /> should handle some test case`] = `null`;exports[`<UserName /> should handle some other test case`] = `<div>  Alan Turing</div>`;\n```\n\nTo:\n\n```\nexports[`<UserName /> should render null`] = `null`;exports[`<UserName /> should render Alan Turing`] = `<div>  Alan Turing</div>`;\n```\n\nSince the latter describes exactly what's expected in the output, it's more clear to see when it's wrong:\n\n```\nexports[`<UserName /> should render null`] = `<div>  Alan Turing</div>`;exports[`<UserName /> should render Alan Turing`] = `null`;\n```\n\n## Frequently Asked Questions[​](#frequently-asked-questions \"Direct link to Frequently Asked Questions\")\n\n### Are snapshots written automatically on Continuous Integration (CI) systems?[​](#are-snapshots-written-automatically-on-continuous-integration-ci-systems \"Direct link to Are snapshots written automatically on Continuous Integration (CI) systems?\")\n\nNo, as of Jest 20, snapshots in Jest are not automatically written when Jest is run in a CI system without explicitly passing `--updateSnapshot`. It is expected that all snapshots are part of the code that is run on CI and since new snapshots automatically pass, they should not pass a test run on a CI system. It is recommended to always commit all snapshots and to keep them in version control.\n\n### Should snapshot files be committed?[​](#should-snapshot-files-be-committed \"Direct link to Should snapshot files be committed?\")\n\nYes, all snapshot files should be committed alongside the modules they are covering and their tests. They should be considered part of a test, similar to the value of any other assertion in Jest. In fact, snapshots represent the state of the source modules at any given point in time. In this way, when the source modules are modified, Jest can tell what changed from the previous version. It can also provide a lot of additional context during code review in which reviewers can study your changes better.\n\n### Does snapshot testing only work with React components?[​](#does-snapshot-testing-only-work-with-react-components \"Direct link to Does snapshot testing only work with React components?\")\n\n[React](https://jestjs.io/docs/29.4/tutorial-react) and [React Native](https://jestjs.io/docs/29.4/tutorial-react-native) components are a good use case for snapshot testing. However, snapshots can capture any serializable value and should be used anytime the goal is testing whether the output is correct. The Jest repository contains many examples of testing the output of Jest itself, the output of Jest's assertion library as well as log messages from various parts of the Jest codebase. See an example of [snapshotting CLI output](https://github.com/jestjs/jest/blob/main/e2e/__tests__/console.test.ts) in the Jest repo.\n\n### What's the difference between snapshot testing and visual regression testing?[​](#whats-the-difference-between-snapshot-testing-and-visual-regression-testing \"Direct link to What's the difference between snapshot testing and visual regression testing?\")\n\nSnapshot testing and visual regression testing are two distinct ways of testing UIs, and they serve different purposes. Visual regression testing tools take screenshots of web pages and compare the resulting images pixel by pixel. With Snapshot testing values are serialized, stored within text files, and compared using a diff algorithm. There are different trade-offs to consider and we listed the reasons why snapshot testing was built in the [Jest blog](https://jestjs.io/blog/2016/07/27/jest-14#why-snapshot-testing).\n\n### Does snapshot testing replace unit testing?[​](#does-snapshot-testing-replace-unit-testing \"Direct link to Does snapshot testing replace unit testing?\")\n\nSnapshot testing is only one of more than 20 assertions that ship with Jest. The aim of snapshot testing is not to replace existing unit tests, but to provide additional value and make testing painless. In some scenarios, snapshot testing can potentially remove the need for unit testing for a particular set of functionalities (e.g. React components), but they can work together as well.\n\n### What is the performance of snapshot testing regarding speed and size of the generated files?[​](#what-is-the-performance-of-snapshot-testing-regarding-speed-and-size-of-the-generated-files \"Direct link to What is the performance of snapshot testing regarding speed and size of the generated files?\")\n\nJest has been rewritten with performance in mind, and snapshot testing is not an exception. Since snapshots are stored within text files, this way of testing is fast and reliable. Jest generates a new file for each test file that invokes the `toMatchSnapshot` matcher. The size of the snapshots is pretty small: For reference, the size of all snapshot files in the Jest codebase itself is less than 300 KB.\n\n### How do I resolve conflicts within snapshot files?[​](#how-do-i-resolve-conflicts-within-snapshot-files \"Direct link to How do I resolve conflicts within snapshot files?\")\n\nSnapshot files must always represent the current state of the modules they are covering. Therefore, if you are merging two branches and encounter a conflict in the snapshot files, you can either resolve the conflict manually or update the snapshot file by running Jest and inspecting the result.\n\n### Is it possible to apply test-driven development principles with snapshot testing?[​](#is-it-possible-to-apply-test-driven-development-principles-with-snapshot-testing \"Direct link to Is it possible to apply test-driven development principles with snapshot testing?\")\n\nAlthough it is possible to write snapshot files manually, that is usually not approachable. Snapshots help to figure out whether the output of the modules covered by tests is changed, rather than giving guidance to design the code in the first place.\n\n### Does code coverage work with snapshot testing?[​](#does-code-coverage-work-with-snapshot-testing \"Direct link to Does code coverage work with snapshot testing?\")\n\nYes, as well as with any other test.",
    "title": "Snapshot Testing · Jest",
    "description": "Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/jest-community",
    "markdown": "# Jest Community · Jest\n\nThe community around Jest is working hard to make the testing experience even greater.\n\n[jest-community](https://github.com/jest-community) is a new GitHub organization for high quality Jest additions curated by Jest maintainers and collaborators. It already features some of our favorite projects, to name a few:\n\n*   [vscode-jest](https://github.com/jest-community/vscode-jest)\n*   [jest-extended](https://github.com/jest-community/jest-extended)\n*   [eslint-plugin-jest](https://github.com/jest-community/eslint-plugin-jest)\n*   [awesome-jest](https://github.com/jest-community/awesome-jest)\n\nCommunity projects under one organization are a great way for Jest to experiment with new ideas/techniques and approaches. Encourage contributions from the community and publish contributions independently at a faster pace.\n\n## Awesome Jest[​](#awesome-jest \"Direct link to Awesome Jest\")\n\nThe jest-community org maintains an [awesome-jest](https://github.com/jest-community/awesome-jest) list of great projects and resources related to Jest.\n\nIf you have something awesome to share, feel free to reach out to us! We'd love to share your project on the awesome-jest list ([send a PR here](https://github.com/jest-community/awesome-jest/pulls)) or if you would like to transfer your project to the jest-community org reach out to one of the owners of the org.",
    "title": "Jest Community · Jest",
    "description": "The community around Jest is working hard to make the testing experience even greater.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/tutorial-react",
    "markdown": "# Testing React Apps · Jest\n\nAt Facebook, we use Jest to test [React](https://reactjs.org/) applications.\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Setup with Create React App[​](#setup-with-create-react-app \"Direct link to Setup with Create React App\")\n\nIf you are new to React, we recommend using [Create React App](https://create-react-app.dev/). It is ready to use and [ships with Jest](https://create-react-app.dev/docs/running-tests/#docsNav)! You will only need to add `react-test-renderer` for rendering snapshots.\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev react-test-renderer\n```\n\n### Setup without Create React App[​](#setup-without-create-react-app \"Direct link to Setup without Create React App\")\n\nIf you have an existing application you'll need to install a few packages to make everything work well together. We are using the `babel-jest` package and the `react` babel preset to transform our code inside of the test environment. Also see [using babel](https://jestjs.io/docs/29.4/getting-started#using-babel).\n\nRun\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer\n```\n\nYour `package.json` should look something like this (where `<current-version>` is the actual latest version number for the package). Please add the scripts and jest configuration entries:\n\n```\n{  \"dependencies\": {    \"react\": \"<current-version>\",    \"react-dom\": \"<current-version>\"  },  \"devDependencies\": {    \"@babel/preset-env\": \"<current-version>\",    \"@babel/preset-react\": \"<current-version>\",    \"babel-jest\": \"<current-version>\",    \"jest\": \"<current-version>\",    \"react-test-renderer\": \"<current-version>\"  },  \"scripts\": {    \"test\": \"jest\"  }}\n```\n\nbabel.config.js\n\n```\nmodule.exports = {  presets: [    '@babel/preset-env',    ['@babel/preset-react', {runtime: 'automatic'}],  ],};\n```\n\n**And you're good to go!**\n\n### Snapshot Testing[​](#snapshot-testing \"Direct link to Snapshot Testing\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/29.4/snapshot-testing) for a Link component that renders hyperlinks:\n\nLink.js\n\n```\nimport {useState} from 'react';const STATUS = {  HOVERED: 'hovered',  NORMAL: 'normal',};export default function Link({page, children}) {  const [status, setStatus] = useState(STATUS.NORMAL);  const onMouseEnter = () => {    setStatus(STATUS.HOVERED);  };  const onMouseLeave = () => {    setStatus(STATUS.NORMAL);  };  return (    <a      className={status}      href={page || '#'}      onMouseEnter={onMouseEnter}      onMouseLeave={onMouseLeave}    >      {children}    </a>  );}\n```\n\nnote\n\nExamples are using Function components, but Class components can be tested in the same way. See [React: Function and Class Components](https://reactjs.org/docs/components-and-props.html#function-and-class-components). **Reminders** that with Class components, we expect Jest to be used to test props and not methods directly.\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\nLink.test.js\n\n```\nimport renderer from 'react-test-renderer';import Link from '../Link';it('changes the class when hovered', () => {  const component = renderer.create(    <Link page=\"http://www.facebook.com\">Facebook</Link>,  );  let tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseEnter();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();  // manually trigger the callback  renderer.act(() => {    tree.props.onMouseLeave();  });  // re-rendering  tree = component.toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Link.test.js.snap\n\n```\nexports[`changes the class when hovered 1`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 2`] = `<a  className=\"hovered\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;exports[`changes the class when hovered 3`] = `<a  className=\"normal\"  href=\"http://www.facebook.com\"  onMouseEnter={[Function]}  onMouseLeave={[Function]}>  Facebook</a>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/snapshot](https://github.com/jestjs/jest/tree/main/examples/snapshot).\n\n#### Snapshot Testing with Mocks, Enzyme and React 16+[​](#snapshot-testing-with-mocks-enzyme-and-react-16 \"Direct link to Snapshot Testing with Mocks, Enzyme and React 16+\")\n\nThere's a caveat around snapshot testing when using Enzyme and React 16+. If you mock out a module using the following style:\n\n```\njest.mock('../SomeDirectory/SomeComponent', () => 'SomeComponent');\n```\n\nThen you will see warnings in the console:\n\n```\nWarning: <SomeComponent /> is using uppercase HTML. Always use lowercase HTML tags in React.# Or:Warning: The tag <SomeComponent> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\n```\n\nReact 16 triggers these warnings due to how it checks element types, and the mocked module fails these checks. Your options are:\n\n1.  Render as text. This way you won't see the props passed to the mock component in the snapshot, but it's straightforward:\n    \n    ```\n    jest.mock('./SomeComponent', () => () => 'SomeComponent');\n    ```\n    \n2.  Render as a custom element. DOM \"custom elements\" aren't checked for anything and shouldn't fire warnings. They are lowercase and have a dash in the name.\n    \n    ```\n    jest.mock('./Widget', () => () => <mock-widget />);\n    ```\n    \n3.  Use `react-test-renderer`. The test renderer doesn't care about element types and will happily accept e.g. `SomeComponent`. You could check snapshots using the test renderer, and check component behavior separately using Enzyme.\n4.  Disable warnings all together (should be done in your jest setup file):\n    \n    ```\n    jest.mock('fbjs/lib/warning', () => require('fbjs/lib/emptyFunction'));\n    ```\n    \n    This shouldn't normally be your option of choice as useful warnings could be lost. However, in some cases, for example when testing react-native's components we are rendering react-native tags into the DOM and many warnings are irrelevant. Another option is to swizzle the console.warn and suppress specific warnings.\n\n### DOM Testing[​](#dom-testing \"Direct link to DOM Testing\")\n\nIf you'd like to assert, and manipulate your rendered components you can use [react-testing-library](https://github.com/testing-library/react-testing-library), [Enzyme](https://enzymejs.github.io/enzyme/), or React's [TestUtils](https://reactjs.org/docs/test-utils.html). The following two examples use react-testing-library and Enzyme.\n\n#### react-testing-library[​](#react-testing-library \"Direct link to react-testing-library\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @testing-library/react\n```\n\nLet's implement a checkbox which swaps between two labels:\n\nCheckboxWithLabel.js\n\n```\nimport {useState} from 'react';export default function CheckboxWithLabel({labelOn, labelOff}) {  const [isChecked, setIsChecked] = useState(false);  const onChange = () => {    setIsChecked(!isChecked);  };  return (    <label>      <input type=\"checkbox\" checked={isChecked} onChange={onChange} />      {isChecked ? labelOn : labelOff}    </label>  );}\n```\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport {cleanup, fireEvent, render} from '@testing-library/react';import CheckboxWithLabel from '../CheckboxWithLabel';// Note: running cleanup afterEach is done automatically for you in @testing-library/react@9.0.0 or higher// unmount and cleanup DOM after the test is finished.afterEach(cleanup);it('CheckboxWithLabel changes the text after click', () => {  const {queryByLabelText, getByLabelText} = render(    <CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />,  );  expect(queryByLabelText(/off/i)).toBeTruthy();  fireEvent.click(getByLabelText(/off/i));  expect(queryByLabelText(/on/i)).toBeTruthy();});\n```\n\nThe code for this example is available at [examples/react-testing-library](https://github.com/jestjs/jest/tree/main/examples/react-testing-library).\n\n#### Enzyme[​](#enzyme \"Direct link to Enzyme\")\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev enzyme\n```\n\nIf you are using a React version below 15.5.0, you will also need to install `react-addons-test-utils`.\n\nLet's rewrite the test from above using Enzyme instead of react-testing-library. We use Enzyme's [shallow renderer](https://enzymejs.github.io/enzyme/docs/api/shallow.html) in this example.\n\n\\_\\_tests\\_\\_/CheckboxWithLabel-test.js\n\n```\nimport Enzyme, {shallow} from 'enzyme';import Adapter from 'enzyme-adapter-react-16';import CheckboxWithLabel from '../CheckboxWithLabel';Enzyme.configure({adapter: new Adapter()});it('CheckboxWithLabel changes the text after click', () => {  // Render a checkbox with label in the document  const checkbox = shallow(<CheckboxWithLabel labelOn=\"On\" labelOff=\"Off\" />);  expect(checkbox.text()).toBe('Off');  checkbox.find('input').simulate('change');  expect(checkbox.text()).toBe('On');});\n```\n\n### Custom transformers[​](#custom-transformers \"Direct link to Custom transformers\")\n\nIf you need more advanced functionality, you can also build your own transformer. Instead of using `babel-jest`, here is an example of using `@babel/core`:\n\ncustom-transformer.js\n\n```\n'use strict';const {transform} = require('@babel/core');const jestPreset = require('babel-preset-jest');module.exports = {  process(src, filename) {    const result = transform(src, {      filename,      presets: [jestPreset],    });    return result || src;  },};\n```\n\nDon't forget to install the `@babel/core` and `babel-preset-jest` packages for this example to work.\n\nTo make this work with Jest you need to update your Jest configuration with this: `\"transform\": {\"\\\\.js$\": \"path/to/custom-transformer.js\"}`.\n\nIf you'd like to build a transformer with babel support, you can also use `babel-jest` to compose one and pass in your custom configuration options:\n\n```\nconst babelJest = require('babel-jest');module.exports = babelJest.createTransformer({  presets: ['my-custom-preset'],});\n```\n\nSee [dedicated docs](https://jestjs.io/docs/29.4/code-transformation#writing-custom-transformers) for more details.",
    "title": "Testing React Apps · Jest",
    "description": "At Facebook, we use Jest to test React applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/cli",
    "markdown": "# Jest CLI Options · Jest\n\nThe `jest` command line runner has a number of useful options. You can run `jest --help` to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's [Configuration](https://jestjs.io/docs/29.4/configuration) options can also be specified through the CLI.\n\nHere is a brief overview:\n\n## Running from the command line[​](#running-from-the-command-line \"Direct link to Running from the command line\")\n\nRun all tests (default):\n\nRun only the tests that were specified with a pattern or filename:\n\n```\njest my-test #orjest path/to/my-test.js\n```\n\nRun tests related to changed files based on hg/git (uncommitted files):\n\nRun tests related to `path/to/fileA.js` and `path/to/fileB.js`:\n\n```\njest --findRelatedTests path/to/fileA.js path/to/fileB.js\n```\n\nRun tests that match this spec name (match against the name in `describe` or `test`, basically).\n\nRun watch mode:\n\n```\njest --watch #runs jest -o by defaultjest --watchAll #runs all tests\n```\n\nWatch mode also enables to specify the name or path to a file to focus on a specific set of tests.\n\n## Using with package manager[​](#using-with-package-manager \"Direct link to Using with package manager\")\n\nIf you run Jest via your package manager, you can still pass the command line arguments directly as Jest arguments.\n\nInstead of:\n\nyou can use:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm test -- -u -t=\"ColorPicker\"\n```\n\n## Camelcase & dashed args support[​](#camelcase--dashed-args-support \"Direct link to Camelcase & dashed args support\")\n\nJest supports both camelcase and dashed arg formats. The following examples will have an equal result:\n\n```\njest --collect-coveragejest --collectCoverage\n```\n\nArguments can also be mixed:\n\n```\njest --update-snapshot --detectOpenHandles\n```\n\n## Options[​](#options \"Direct link to Options\")\n\nnote\n\nCLI options take precedence over values from the [Configuration](https://jestjs.io/docs/29.4/configuration).\n\n*   [Camelcase & dashed args support](#camelcase--dashed-args-support)\n*   [Options](#options)\n*   [Reference](#reference)\n    *   [`jest <regexForTestFiles>`](#jest-regexfortestfiles)\n    *   [`--bail[=<n>]`](#--bailn)\n    *   [`--cache`](#--cache)\n    *   [`--changedFilesWithAncestor`](#--changedfileswithancestor)\n    *   [`--changedSince`](#--changedsince)\n    *   [`--ci`](#--ci)\n    *   [`--clearCache`](#--clearcache)\n    *   [`--clearMocks`](#--clearmocks)\n    *   [`--collectCoverageFrom=<glob>`](#--collectcoveragefromglob)\n    *   [`--colors`](#--colors)\n    *   [`--config=<path>`](#--configpath)\n    *   [`--coverage[=<boolean>]`](#--coverageboolean)\n    *   [`--coverageDirectory=<path>`](#--coveragedirectorypath)\n    *   [`--coverageProvider=<provider>`](#--coverageproviderprovider)\n    *   [`--debug`](#--debug)\n    *   [`--detectOpenHandles`](#--detectopenhandles)\n    *   [`--env=<environment>`](#--envenvironment)\n    *   [`--errorOnDeprecated`](#--errorondeprecated)\n    *   [`--expand`](#--expand)\n    *   [`--filter=<file>`](#--filterfile)\n    *   [`--findRelatedTests <spaceSeparatedListOfSourceFiles>`](#--findrelatedtests-spaceseparatedlistofsourcefiles)\n    *   [`--forceExit`](#--forceexit)\n    *   [`--help`](#--help)\n    *   [`--ignoreProjects <project1> ... <projectN>`](#--ignoreprojects-project1--projectn)\n    *   [`--init`](#--init)\n    *   [`--injectGlobals`](#--injectglobals)\n    *   [`--json`](#--json)\n    *   [`--lastCommit`](#--lastcommit)\n    *   [`--listTests`](#--listtests)\n    *   [`--logHeapUsage`](#--logheapusage)\n    *   [`--maxConcurrency=<num>`](#--maxconcurrencynum)\n    *   [`--maxWorkers=<num>|<string>`](#--maxworkersnumstring)\n    *   [`--noStackTrace`](#--nostacktrace)\n    *   [`--notify`](#--notify)\n    *   [`--onlyChanged`](#--onlychanged)\n    *   [`--outputFile=<filename>`](#--outputfilefilename)\n    *   [`--passWithNoTests`](#--passwithnotests)\n    *   [`--projects <path1> ... <pathN>`](#--projects-path1--pathn)\n    *   [`--reporters`](#--reporters)\n    *   [`--resetMocks`](#--resetmocks)\n    *   [`--restoreMocks`](#--restoremocks)\n    *   [`--roots`](#--roots)\n    *   [`--runInBand`](#--runinband)\n    *   [`--runTestsByPath`](#--runtestsbypath)\n    *   [`--seed=<num>`](#--seednum)\n    *   [`--selectProjects <project1> ... <projectN>`](#--selectprojects-project1--projectn)\n    *   [`--setupFilesAfterEnv <path1> ... <pathN>`](#--setupfilesafterenv-path1--pathn)\n    *   [`--shard`](#--shard)\n    *   [`--showConfig`](#--showconfig)\n    *   [`--showSeed`](#--showseed)\n    *   [`--silent`](#--silent)\n    *   [`--testEnvironmentOptions=<json string>`](#--testenvironmentoptionsjson-string)\n    *   [`--testLocationInResults`](#--testlocationinresults)\n    *   [`--testMatch glob1 ... globN`](#--testmatch-glob1--globn)\n    *   [`--testNamePattern=<regex>`](#--testnamepatternregex)\n    *   [`--testPathIgnorePatterns=<regex>|[array]`](#--testpathignorepatternsregexarray)\n    *   [`--testPathPattern=<regex>`](#--testpathpatternregex)\n    *   [`--testRunner=<path>`](#--testrunnerpath)\n    *   [`--testSequencer=<path>`](#--testsequencerpath)\n    *   [`--testTimeout=<number>`](#--testtimeoutnumber)\n    *   [`--updateSnapshot`](#--updatesnapshot)\n    *   [`--useStderr`](#--usestderr)\n    *   [`--verbose`](#--verbose)\n    *   [`--version`](#--version)\n    *   [`--watch`](#--watch)\n    *   [`--watchAll`](#--watchall)\n    *   [`--watchman`](#--watchman)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `jest <regexForTestFiles>`[​](#jest-regexfortestfiles \"Direct link to jest-regexfortestfiles\")\n\nWhen you run `jest` with an argument, that argument is treated as a regular expression to match against files in your project. It is possible to run test suites by providing a pattern. Only the files that the pattern matches will be picked up and executed. Depending on your terminal, you may need to quote this argument: `jest \"my.*(complex)?pattern\"`. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--bail[=<n>]`[​](#--bailn \"Direct link to --bailn\")\n\nAlias: `-b`. Exit the test suite immediately upon `n` number of failing test suite. Defaults to `1`.\n\n### `--cache`[​](#--cache \"Direct link to --cache\")\n\nWhether to use the cache. Defaults to true. Disable the cache using `--no-cache`.\n\ncaution\n\nThe cache should only be disabled if you are experiencing caching related problems. On average, disabling the cache makes Jest at least two times slower.\n\nIf you want to inspect the cache, use `--showConfig` and look at the `cacheDirectory` value. If you need to clear the cache, use `--clearCache`.\n\n### `--changedFilesWithAncestor`[​](#--changedfileswithancestor \"Direct link to --changedfileswithancestor\")\n\nRuns tests related to the current changes and the changes made in the last commit. Behaves similarly to `--onlyChanged`.\n\n### `--changedSince`[​](#--changedsince \"Direct link to --changedsince\")\n\nRuns tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--onlyChanged`.\n\n### `--ci`[​](#--ci \"Direct link to --ci\")\n\nWhen this option is provided, Jest will assume it is running in a CI environment. This changes the behavior when a new snapshot is encountered. Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.\n\n### `--clearCache`[​](#--clearcache \"Direct link to --clearcache\")\n\nDeletes the Jest cache directory and then exits without running tests. Will delete `cacheDirectory` if the option is passed, or Jest's default cache directory. The default cache directory can be found by calling `jest --showConfig`.\n\ncaution\n\nClearing the cache will reduce performance.\n\n### `--clearMocks`[​](#--clearmocks \"Direct link to --clearmocks\")\n\nAutomatically clear mock calls, instances, contexts and results before every test. Equivalent to calling [`jest.clearAllMocks()`](https://jestjs.io/docs/29.4/jest-object#jestclearallmocks) before each test. This does not remove any mock implementation that may have been provided.\n\n### `--collectCoverageFrom=<glob>`[​](#--collectcoveragefromglob \"Direct link to --collectcoveragefromglob\")\n\nA glob pattern relative to `rootDir` matching the files that coverage info needs to be collected from.\n\n### `--colors`[​](#--colors \"Direct link to --colors\")\n\nForces test results output highlighting even if stdout is not a TTY.\n\nnote\n\nAlternatively you can set the environment variable `FORCE_COLOR=true` to forcefully enable or `FORCE_COLOR=false` to disable colorized output. The use of `FORCE_COLOR` overrides all other color support checks.\n\n### `--config=<path>`[​](#--configpath \"Direct link to --configpath\")\n\nAlias: `-c`. The path to a Jest config file specifying how to find and execute tests. If no `rootDir` is set in the config, the directory containing the config file is assumed to be the `rootDir` for the project. This can also be a JSON-encoded value which Jest will use as configuration.\n\n### `--coverage[=<boolean>]`[​](#--coverageboolean \"Direct link to --coverageboolean\")\n\nAlias: `--collectCoverage`. Indicates that test coverage information should be collected and reported in the output. Optionally pass `<boolean>` to override option set in configuration.\n\n### `--coverageDirectory=<path>`[​](#--coveragedirectorypath \"Direct link to --coveragedirectorypath\")\n\nThe directory where Jest should output its coverage files.\n\n### `--coverageProvider=<provider>`[​](#--coverageproviderprovider \"Direct link to --coverageproviderprovider\")\n\nIndicates which provider should be used to instrument code for coverage. Allowed values are `babel` (default) or `v8`.\n\n### `--debug`[​](#--debug \"Direct link to --debug\")\n\nPrint debugging info about your Jest config.\n\n### `--detectOpenHandles`[​](#--detectopenhandles \"Direct link to --detectopenhandles\")\n\nAttempt to collect and print open handles preventing Jest from exiting cleanly. Use this in cases where you need to use `--forceExit` in order for Jest to exit to potentially track down the reason. This implies `--runInBand`, making tests run serially. Implemented using [`async_hooks`](https://nodejs.org/api/async_hooks.html). This option has a significant performance penalty and should only be used for debugging.\n\n### `--env=<environment>`[​](#--envenvironment \"Direct link to --envenvironment\")\n\nThe test environment used for all tests. This can point to any file or node module. Examples: `jsdom`, `node` or `path/to/my-environment.js`.\n\n### `--errorOnDeprecated`[​](#--errorondeprecated \"Direct link to --errorondeprecated\")\n\nMake calling deprecated APIs throw helpful error messages. Useful for easing the upgrade process.\n\n### `--expand`[​](#--expand \"Direct link to --expand\")\n\nAlias: `-e`. Use this flag to show full diffs and errors instead of a patch.\n\n### `--filter=<file>`[​](#--filterfile \"Direct link to --filterfile\")\n\nPath to a module exporting a filtering function. This asynchronous function receives a list of test paths which can be manipulated to exclude tests from running by returning an object with shape `{ filtered: Array<{ test: string }> }`. Especially useful when used in conjunction with a testing infrastructure to filter known broken tests, e.g.\n\nmy-filter.js\n\n```\nmodule.exports = testPaths => {  const allowedPaths = testPaths    .filter(filteringFunction)    .map(test => ({test})); // [{ test: \"path1.spec.js\" }, { test: \"path2.spec.js\" }, etc]  return {    filtered: allowedPaths,  };};\n```\n\nFind and run the tests that cover a space separated list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary. Can be used together with `--coverage` to include a test coverage for the source files, no duplicate `--collectCoverageFrom` arguments needed.\n\n### `--forceExit`[​](#--forceexit \"Direct link to --forceexit\")\n\nForce Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up.\n\ncaution\n\nThis feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use `--detectOpenHandles` to help track it down.\n\n### `--help`[​](#--help \"Direct link to --help\")\n\nShow the help information, similar to this page.\n\n### `--ignoreProjects <project1> ... <projectN>`[​](#--ignoreprojects-project1--projectn \"Direct link to --ignoreprojects-project1--projectn\")\n\nIgnore the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--init`[​](#--init \"Direct link to --init\")\n\nGenerate a basic configuration file. Based on your project, Jest will ask you a few questions that will help to generate a `jest.config.js` file with a short description for each option.\n\n### `--injectGlobals`[​](#--injectglobals \"Direct link to --injectglobals\")\n\nInsert Jest's globals (`expect`, `test`, `describe`, `beforeEach` etc.) into the global environment. If you set this to `false`, you should import from `@jest/globals`, e.g.\n\n```\nimport {expect, jest, test} from '@jest/globals';jest.useFakeTimers();test('some test', () => {  expect(Date.now()).toBe(0);});\n```\n\nnote\n\nThis option is only supported using the default `jest-circus` test runner.\n\n### `--json`[​](#--json \"Direct link to --json\")\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr.\n\n### `--lastCommit`[​](#--lastcommit \"Direct link to --lastcommit\")\n\nRun all tests affected by file changes in the last commit made. Behaves similarly to `--onlyChanged`.\n\n### `--listTests`[​](#--listtests \"Direct link to --listtests\")\n\nLists all test files that Jest will run given the arguments, and exits.\n\n### `--logHeapUsage`[​](#--logheapusage \"Direct link to --logheapusage\")\n\nLogs the heap usage after every test. Useful to debug memory leaks. Use together with `--runInBand` and `--expose-gc` in node.\n\n### `--maxConcurrency=<num>`[​](#--maxconcurrencynum \"Direct link to --maxconcurrencynum\")\n\nPrevents Jest from executing more than the specified amount of tests at the same time. Only affects tests that use `test.concurrent`.\n\n### `--maxWorkers=<num>|<string>`[​](#--maxworkersnumstring \"Direct link to --maxworkersnumstring\")\n\nAlias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n\nFor environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n\n### `--noStackTrace`[​](#--nostacktrace \"Direct link to --nostacktrace\")\n\nDisables stack trace in test results output.\n\n### `--notify`[​](#--notify \"Direct link to --notify\")\n\nActivates notifications for test results. Good for when you don't want your consciousness to be able to focus on anything except JavaScript testing.\n\n### `--onlyChanged`[​](#--onlychanged \"Direct link to --onlychanged\")\n\nAlias: `-o`. Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git/hg repository at the moment and requires a static dependency graph (ie. no dynamic requires).\n\n### `--outputFile=<filename>`[​](#--outputfilefilename \"Direct link to --outputfilefilename\")\n\nWrite test results to a file when the `--json` option is also specified. The returned JSON structure is documented in [testResultsProcessor](https://jestjs.io/docs/29.4/configuration#testresultsprocessor-string).\n\n### `--passWithNoTests`[​](#--passwithnotests \"Direct link to --passwithnotests\")\n\nAllows the test suite to pass when no files are found.\n\n### `--projects <path1> ... <pathN>`[​](#--projects-path1--pathn \"Direct link to --projects-path1--pathn\")\n\nRun tests from one or more projects, found in the specified paths; also takes path globs. This option is the CLI equivalent of the [`projects`](https://jestjs.io/docs/29.4/configuration#projects-arraystring--projectconfig) configuration option.\n\nnote\n\nIf configuration files are found in the specified paths, _all_ projects specified within those configuration files will be run.\n\n### `--reporters`[​](#--reporters \"Direct link to --reporters\")\n\nRun tests with specified reporters. [Reporter options](https://jestjs.io/docs/29.4/configuration#reporters-arraymodulename--modulename-options) are not available via CLI. Example with multiple reporters:\n\n`jest --reporters=\"default\" --reporters=\"jest-junit\"`\n\n### `--resetMocks`[​](#--resetmocks \"Direct link to --resetmocks\")\n\nAutomatically reset mock state before every test. Equivalent to calling [`jest.resetAllMocks()`](https://jestjs.io/docs/29.4/jest-object#jestresetallmocks) before each test. This will lead to any mocks having their fake implementations removed but does not restore their initial implementation.\n\n### `--restoreMocks`[​](#--restoremocks \"Direct link to --restoremocks\")\n\nAutomatically restore mock state and implementation before every test. Equivalent to calling [`jest.restoreAllMocks()`](https://jestjs.io/docs/29.4/jest-object#jestrestoreallmocks) before each test. This will lead to any mocks having their fake implementations removed and restores their initial implementation.\n\n### `--roots`[​](#--roots \"Direct link to --roots\")\n\nA list of paths to directories that Jest should use to search for files in.\n\n### `--runInBand`[​](#--runinband \"Direct link to --runinband\")\n\nAlias: `-i`. Run all tests serially in the current process, rather than creating a worker pool of child processes that run tests. This can be useful for debugging.\n\n### `--runTestsByPath`[​](#--runtestsbypath \"Direct link to --runtestsbypath\")\n\nRun only the tests that were specified with their exact paths.\n\ntip\n\nThe default regex matching works fine on small runs, but becomes slow if provided with multiple patterns and/or against a lot of tests. This option replaces the regex matching logic and by that optimizes the time it takes Jest to filter specific test files.\n\n### `--seed=<num>`[​](#--seednum \"Direct link to --seednum\")\n\nSets a seed value that can be retrieved in a test file via [`jest.getSeed()`](https://jestjs.io/docs/29.4/jest-object#jestgetseed). The seed value must be between `-0x80000000` and `0x7fffffff` inclusive (`-2147483648` (`-(2 ** 31)`) and `2147483647` (`2 ** 31 - 1`) in decimal).\n\ntip\n\nIf this option is not specified Jest will randomly generate the value. You can use the [`--showSeed`](#--showseed) flag to print the seed in the test report summary.\n\n### `--selectProjects <project1> ... <projectN>`[​](#--selectprojects-project1--projectn \"Direct link to --selectprojects-project1--projectn\")\n\nRun the tests of the specified projects. Jest uses the attribute `displayName` in the configuration to identify each project. If you use this option, you should provide a `displayName` to all your projects.\n\n### `--setupFilesAfterEnv <path1> ... <pathN>`[​](#--setupfilesafterenv-path1--pathn \"Direct link to --setupfilesafterenv-path1--pathn\")\n\nA list of paths to modules that run some code to configure or to set up the testing framework before each test. Beware that files imported by the setup scripts will not be mocked during testing.\n\n### `--shard`[​](#--shard \"Direct link to --shard\")\n\nThe test suite shard to execute in a format of `(?<shardIndex>\\d+)/(?<shardCount>\\d+)`.\n\n`shardIndex` describes which shard to select while `shardCount` controls the number of shards the suite should be split into.\n\n`shardIndex` and `shardCount` have to be 1-based, positive numbers, and `shardIndex` has to be lower than or equal to `shardCount`.\n\nWhen `shard` is specified the configured [`testSequencer`](https://jestjs.io/docs/29.4/configuration#testsequencer-string) has to implement a `shard` method.\n\nFor example, to split the suite into three shards, each running one third of the tests:\n\n```\njest --shard=1/3jest --shard=2/3jest --shard=3/3\n```\n\n### `--showConfig`[​](#--showconfig \"Direct link to --showconfig\")\n\nPrint your Jest config and then exits.\n\n### `--showSeed`[​](#--showseed \"Direct link to --showseed\")\n\nPrints the seed value in the test report summary. See [`--seed=<num>`](#--seednum) for the details.\n\nCan also be set in configuration. See [`showSeed`](https://jestjs.io/docs/29.4/configuration#showseed-boolean).\n\n### `--silent`[​](#--silent \"Direct link to --silent\")\n\nPrevent tests from printing messages through the console.\n\n### `--testEnvironmentOptions=<json string>`[​](#--testenvironmentoptionsjson-string \"Direct link to --testenvironmentoptionsjson-string\")\n\nA JSON string with options that will be passed to the `testEnvironment`. The relevant options depend on the environment.\n\n### `--testLocationInResults`[​](#--testlocationinresults \"Direct link to --testlocationinresults\")\n\nAdds a `location` field to test results. Useful if you want to report the location of a test in a reporter.\n\nnote\n\nIn the resulting object `column` is 0-indexed while `line` is not.\n\n```\n{  \"column\": 4,  \"line\": 5}\n```\n\n### `--testMatch glob1 ... globN`[​](#--testmatch-glob1--globn \"Direct link to --testmatch-glob1--globn\")\n\nThe glob patterns Jest uses to detect test files. Please refer to the [`testMatch` configuration](https://jestjs.io/docs/29.4/configuration#testmatch-arraystring) for details.\n\n### `--testNamePattern=<regex>`[​](#--testnamepatternregex \"Direct link to --testnamepatternregex\")\n\nAlias: `-t`. Run only tests with a name that matches the regex. For example, suppose you want to run only tests related to authorization which will have names like `'GET /api/posts with auth'`, then you can use `jest -t=auth`.\n\ntip\n\nThe regex is matched against the full name, which is a combination of the test name and all its surrounding describe blocks.\n\n### `--testPathIgnorePatterns=<regex>|[array]`[​](#--testpathignorepatternsregexarray \"Direct link to --testpathignorepatternsregexarray\")\n\nA single or array of regexp pattern strings that are tested against all tests paths before executing the test. Contrary to `--testPathPattern`, it will only run those tests with a path that does not match with the provided regexp expressions.\n\nTo pass as an array use escaped parentheses and space delimited regexps such as `\\(/node_modules/ /tests/e2e/\\)`. Alternatively, you can omit parentheses by combining regexps into a single regexp like `/node_modules/|/tests/e2e/`. These two examples are equivalent.\n\n### `--testPathPattern=<regex>`[​](#--testpathpatternregex \"Direct link to --testpathpatternregex\")\n\nA regexp pattern string that is matched against all tests paths before executing the test. On Windows, you will need to use `/` as a path separator or escape `\\` as `\\\\`.\n\n### `--testRunner=<path>`[​](#--testrunnerpath \"Direct link to --testrunnerpath\")\n\nLets you specify a custom test runner.\n\n### `--testSequencer=<path>`[​](#--testsequencerpath \"Direct link to --testsequencerpath\")\n\nLets you specify a custom test sequencer. Please refer to the [`testSequencer` configuration](https://jestjs.io/docs/29.4/configuration#testsequencer-string) for details.\n\n### `--testTimeout=<number>`[​](#--testtimeoutnumber \"Direct link to --testtimeoutnumber\")\n\nDefault timeout of a test in milliseconds. Default value: 5000.\n\n### `--updateSnapshot`[​](#--updatesnapshot \"Direct link to --updatesnapshot\")\n\nAlias: `-u`. Use this flag to re-record every snapshot that fails during this test run. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshots.\n\n### `--useStderr`[​](#--usestderr \"Direct link to --usestderr\")\n\nDivert all output to stderr.\n\n### `--verbose`[​](#--verbose \"Direct link to --verbose\")\n\nDisplay individual test results with the test suite hierarchy.\n\n### `--version`[​](#--version \"Direct link to --version\")\n\nAlias: `-v`. Print the version and exit.\n\n### `--watch`[​](#--watch \"Direct link to --watch\")\n\nWatch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watchAll` option instead.\n\ntip\n\nUse `--no-watch` (or `--watch=false`) to explicitly disable the watch mode if it was enabled using `--watch`. In most CI environments, this is automatically handled for you.\n\n### `--watchAll`[​](#--watchall \"Direct link to --watchall\")\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option.\n\ntip\n\nUse `--no-watchAll` (or `--watchAll=false`) to explicitly disable the watch mode if it was enabled using `--watchAll`. In most CI environments, this is automatically handled for you.\n\n### `--watchman`[​](#--watchman \"Direct link to --watchman\")\n\nWhether to use [`watchman`](https://facebook.github.io/watchman/) for file crawling. Defaults to `true`. Disable using `--no-watchman`.",
    "title": "Jest CLI Options · Jest",
    "description": "The jest command line runner has a number of useful options. You can run jest --help to view all available options. Many of the options shown below can also be used together to run tests exactly the way you want. Every one of Jest's Configuration options can also be specified through the CLI.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/tutorial-async",
    "markdown": "# An Async Example · Jest\n\nFirst, enable Babel support in Jest as documented in the [Getting Started](https://jestjs.io/docs/getting-started#using-babel) guide.\n\nLet's implement a module that fetches user data from an API and returns the user name.\n\nuser.js\n\n```\nimport request from './request';export function getUserName(userID) {  return request(`/users/${userID}`).then(user => user.name);}\n```\n\nIn the above implementation, we expect the `request.js` module to return a promise. We chain a call to `then` to receive the user name.\n\nNow imagine an implementation of `request.js` that goes to the network and fetches some user data:\n\nrequest.js\n\n```\nconst http = require('http');export default function request(url) {  return new Promise(resolve => {    // This is an example of an http request, for example to fetch    // user data from an API.    // This module is being mocked in __mocks__/request.js    http.get({path: url}, response => {      let data = '';      response.on('data', _data => (data += _data));      response.on('end', () => resolve(data));    });  });}\n```\n\nBecause we don't want to go to the network in our test, we are going to create a manual mock for our `request.js` module in the `__mocks__` folder (the folder is case-sensitive, `__MOCKS__` will not work). It could look something like this:\n\n\\_\\_mocks\\_\\_/request.js\n\n```\nconst users = {  4: {name: 'Mark'},  5: {name: 'Paul'},};export default function request(url) {  return new Promise((resolve, reject) => {    const userID = parseInt(url.slice('/users/'.length), 10);    process.nextTick(() =>      users[userID]        ? resolve(users[userID])        : reject({            error: `User with ${userID} not found.`,          }),    );  });}\n```\n\nNow let's write a test for our async functionality.\n\n\\_\\_tests\\_\\_/user-test.js\n\n```\njest.mock('../request');import * as user from '../user';// The assertion for a promise must be returned.it('works with promises', () => {  expect.assertions(1);  return user.getUserName(4).then(data => expect(data).toBe('Mark'));});\n```\n\nWe call `jest.mock('../request')` to tell Jest to use our manual mock. `it` expects the return value to be a Promise that is going to be resolved. You can chain as many Promises as you like and call `expect` at any time, as long as you return a Promise at the end.\n\n## `.resolves`[​](#resolves \"Direct link to resolves\")\n\nThere is a less verbose way using `resolves` to unwrap the value of a fulfilled promise together with any other matcher. If the promise is rejected, the assertion will fail.\n\n```\nit('works with resolves', () => {  expect.assertions(1);  return expect(user.getUserName(5)).resolves.toBe('Paul');});\n```\n\n## `async`/`await`[​](#asyncawait \"Direct link to asyncawait\")\n\nWriting tests using the `async`/`await` syntax is also possible. Here is how you'd write the same examples from before:\n\n```\n// async/await can be used.it('works with async/await', async () => {  expect.assertions(1);  const data = await user.getUserName(4);  expect(data).toBe('Mark');});// async/await can also be used with `.resolves`.it('works with async/await and resolves', async () => {  expect.assertions(1);  await expect(user.getUserName(5)).resolves.toBe('Paul');});\n```\n\nTo enable async/await in your project, install [`@babel/preset-env`](https://babeljs.io/docs/en/babel-preset-env) and enable the feature in your `babel.config.js` file.\n\n## Error handling[​](#error-handling \"Direct link to Error handling\")\n\nErrors can be handled using the `.catch` method. Make sure to add `expect.assertions` to verify that a certain number of assertions are called. Otherwise a fulfilled promise would not fail the test:\n\n```\n// Testing for async errors using Promise.catch.it('tests error with promises', () => {  expect.assertions(1);  return user.getUserName(2).catch(error =>    expect(error).toEqual({      error: 'User with 2 not found.',    }),  );});// Or using async/await.it('tests error with async/await', async () => {  expect.assertions(1);  try {    await user.getUserName(1);  } catch (error) {    expect(error).toEqual({      error: 'User with 1 not found.',    });  }});\n```\n\n## `.rejects`[​](#rejects \"Direct link to rejects\")\n\nThe`.rejects` helper works like the `.resolves` helper. If the promise is fulfilled, the test will automatically fail. `expect.assertions(number)` is not required but recommended to verify that a certain number of [assertions](https://jestjs.io/docs/expect#expectassertionsnumber) are called during a test. It is otherwise easy to forget to `return`/`await` the `.resolves` assertions.\n\n```\n// Testing for async errors using `.rejects`.it('tests error with rejects', () => {  expect.assertions(1);  return expect(user.getUserName(3)).rejects.toEqual({    error: 'User with 3 not found.',  });});// Or using async/await with `.rejects`.it('tests error with async/await and rejects', async () => {  expect.assertions(1);  await expect(user.getUserName(3)).rejects.toEqual({    error: 'User with 3 not found.',  });});\n```\n\nThe code for this example is available at [examples/async](https://github.com/jestjs/jest/tree/main/examples/async).\n\nIf you'd like to test timers, like `setTimeout`, take a look at the [Timer mocks](https://jestjs.io/docs/timer-mocks) documentation.",
    "title": "An Async Example · Jest",
    "description": "First, enable Babel support in Jest as documented in the Getting Started guide.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/webpack",
    "markdown": "# Using with webpack · Jest\n\nJest can be used in projects that use [webpack](https://webpack.js.org/) to manage assets, styles, and compilation. webpack _does_ offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.\n\n## A webpack example[​](#a-webpack-example \"Direct link to A webpack example\")\n\nLet's start with a common sort of webpack config file and translate it to a Jest setup.\n\nwebpack.config.js\n\n```\nmodule.exports = {  module: {    rules: [      {        test: /\\.jsx?$/,        exclude: ['node_modules'],        use: ['babel-loader'],      },      {        test: /\\.css$/,        use: ['style-loader', 'css-loader'],      },      {        test: /\\.gif$/,        type: 'asset/inline',      },      {        test: /\\.(ttf|eot|svg)$/,        type: 'asset/resource',      },    ],  },  resolve: {    alias: {      config$: './configs/app-config.js',      react: './vendor/react-master',    },    extensions: ['.js', '.jsx'],    modules: [      'node_modules',      'bower_components',      'shared',      '/shared/vendor/modules',    ],  },};\n```\n\nIf you have JavaScript files that are transformed by Babel, you can [enable support for Babel](https://jestjs.io/docs/29.4/getting-started#using-babel) by installing the `babel-jest` plugin. Non-Babel JavaScript transformations can be handled with Jest's [`transform`](https://jestjs.io/docs/29.4/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option.\n\n### Handling Static Assets[​](#handling-static-assets \"Direct link to Handling Static Assets\")\n\nNext, let's configure Jest to gracefully handle asset files such as stylesheets and images. Usually, these files aren't particularly useful in tests so we can safely mock them out. However, if you are using CSS Modules then it's better to mock a proxy for your className lookups.\n\njest.config.js\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',  },};\n```\n\nAnd the mock files themselves:\n\n\\_\\_mocks\\_\\_/fileMock.js\n\n```\nmodule.exports = 'test-file-stub';\n```\n\n### Mocking CSS Modules[​](#mocking-css-modules \"Direct link to Mocking CSS Modules\")\n\nYou can use an [ES6 Proxy](https://github.com/keyanzhang/identity-obj-proxy) to mock [CSS Modules](https://github.com/css-modules/css-modules):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev identity-obj-proxy\n```\n\nThen all your className lookups on the styles object will be returned as-is (e.g., `styles.foobar === 'foobar'`). This is pretty handy for React [Snapshot Testing](https://jestjs.io/docs/29.4/snapshot-testing).\n\njest.config.js (for CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/__mocks__/fileMock.js',    '\\\\.(css|less)$': 'identity-obj-proxy',  },};\n```\n\nIf `moduleNameMapper` cannot fulfill your requirements, you can use Jest's [`transform`](https://jestjs.io/docs/29.4/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) config option to specify how assets are transformed. For example, a transformer that returns the basename of a file (such that `require('logo.jpg');` returns `'logo'`) can be written as:\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js (for custom transformers and CSS Modules)\n\n```\nmodule.exports = {  moduleNameMapper: {    '\\\\.(css|less)$': 'identity-obj-proxy',  },  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```\n\nWe've told Jest to ignore files matching a stylesheet or image extension, and instead, require our mock files. You can adjust the regular expression to match the file types your webpack config handles.\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n### Configuring Jest to find our files[​](#configuring-jest-to-find-our-files \"Direct link to Configuring Jest to find our files\")\n\nNow that Jest knows how to process our files, we need to tell it how to _find_ them. For webpack's `modules`, and `extensions` options there are direct analogs in Jest's `moduleDirectories` and `moduleFileExtensions` options.\n\njest.config.js\n\n```\nmodule.exports = {  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nnote\n\n`<rootDir>` is a special token that gets replaced by Jest with the root of your project. Most of the time this will be the folder where your `package.json` is located unless you specify a custom [`rootDir`](https://jestjs.io/docs/29.4/configuration#rootdir-string) option in your configuration.\n\nSimilarly, Jest's counterpart for Webpack's `resolve.roots` (an alternative to setting `NODE_PATH`) is `modulePaths`.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',  },};\n```\n\nAnd finally, we have to handle the webpack `alias`. For that, we can make use of the `moduleNameMapper` option again.\n\njest.config.js\n\n```\nmodule.exports = {  modulePaths: ['/shared/vendor/modules'],  moduleFileExtensions: ['js', 'jsx'],  moduleDirectories: ['node_modules', 'bower_components', 'shared'],  moduleNameMapper: {    '\\\\.(css|less)$': '<rootDir>/__mocks__/styleMock.js',    '\\\\.(gif|ttf|eot|svg)$': '<rootDir>/__mocks__/fileMock.js',    '^react(.*)$': '<rootDir>/vendor/react-master$1',    '^config$': '<rootDir>/configs/app-config.js',  },};\n```\n\nThat's it! webpack is a complex and flexible tool, so you may have to make some adjustments to handle your specific application's needs. Luckily for most projects, Jest should be more than flexible enough to handle your webpack config.\n\n## Using with webpack[​](#using-with-webpack \"Direct link to Using with webpack\")\n\nIn addition to installing `babel-jest` as described earlier, you'll need to add `@babel/preset-env` like so:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev @babel/preset-env\n```\n\nThen, you'll want to configure Babel as follows:\n\n.babelrc\n\n```\n{  \"presets\": [\"@babel/preset-env\"]}\n```\n\ntip\n\nJest caches files to speed up test execution. If you updated `.babelrc` and Jest is not working as expected, try clearing the cache by running `jest --clearCache`.\n\ntip\n\nIf you use dynamic imports (`import('some-file.js').then(module => ...)`), you need to enable the `dynamic-import-node` plugin.\n\n.babelrc\n\n```\n{  \"presets\": [[\"env\", {\"modules\": false}]],  \"plugins\": [\"syntax-dynamic-import\"],  \"env\": {    \"test\": {      \"plugins\": [\"dynamic-import-node\"]    }  }}\n```\n\nFor an example of how to use Jest with webpack with React, you can view one [here](https://github.com/jenniferabowd/jest_webpack_example).",
    "title": "Using with webpack · Jest",
    "description": "Jest can be used in projects that use webpack to manage assets, styles, and compilation. webpack does offer some unique challenges over other tools because it integrates directly with your application to allow managing stylesheets, assets like images and fonts, along with the expansive ecosystem of compile-to-JavaScript languages and tools.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/jest-platform",
    "markdown": "# Jest Platform · Jest\n\nYou can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:\n\n## jest-changed-files[​](#jest-changed-files \"Direct link to jest-changed-files\")\n\nTool for identifying modified files in a git/hg repository. Exports two functions:\n\n*   `getChangedFilesForRoots` returns a promise that resolves to an object with the changed files and repos.\n*   `findRepos` returns a promise that resolves to a set of repositories contained in the specified path.\n\n### Example[​](#example \"Direct link to Example\")\n\n```\nconst {getChangedFilesForRoots} = require('jest-changed-files');// print the set of modified files since last commit in the current repogetChangedFilesForRoots(['./'], {  lastCommit: true,}).then(result => console.log(result.changedFiles));\n```\n\nYou can read more about `jest-changed-files` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-changed-files/README.md).\n\n## jest-diff[​](#jest-diff \"Direct link to jest-diff\")\n\nTool for visualizing changes in data. Exports a function that compares two values of any type and returns a \"pretty-printed\" string illustrating the difference between the two arguments.\n\n### Example[​](#example-1 \"Direct link to Example\")\n\n```\nconst {diff} = require('jest-diff');const a = {a: {b: {c: 5}}};const b = {a: {b: {c: 6}}};const result = diff(a, b);// print diffconsole.log(result);\n```\n\n## jest-docblock[​](#jest-docblock \"Direct link to jest-docblock\")\n\nTool for extracting and parsing the comments at the top of a JavaScript file. Exports various functions to manipulate the data inside the comment block.\n\n### Example[​](#example-2 \"Direct link to Example\")\n\n```\nconst {parseWithComments} = require('jest-docblock');const code = `/** * This is a sample * * @flow */ console.log('Hello World!');`;const parsed = parseWithComments(code);// prints an object with two attributes: comments and pragmas.console.log(parsed);\n```\n\nYou can read more about `jest-docblock` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-docblock/README.md).\n\n## jest-get-type[​](#jest-get-type \"Direct link to jest-get-type\")\n\nModule that identifies the primitive type of any JavaScript value. Exports a function that returns a string with the type of the value passed as argument.\n\n### Example[​](#example-3 \"Direct link to Example\")\n\n```\nconst {getType} = require('jest-get-type');const array = [1, 2, 3];const nullValue = null;const undefinedValue = undefined;// prints 'array'console.log(getType(array));// prints 'null'console.log(getType(nullValue));// prints 'undefined'console.log(getType(undefinedValue));\n```\n\n## jest-validate[​](#jest-validate \"Direct link to jest-validate\")\n\nTool for validating configurations submitted by users. Exports a function that takes two arguments: the user's configuration and an object containing an example configuration and other options. The return value is an object with two attributes:\n\n*   `hasDeprecationWarnings`, a boolean indicating whether the submitted configuration has deprecation warnings,\n*   `isValid`, a boolean indicating whether the configuration is correct or not.\n\n### Example[​](#example-4 \"Direct link to Example\")\n\n```\nconst {validate} = require('jest-validate');const configByUser = {  transform: '<rootDir>/node_modules/my-custom-transform',};const result = validate(configByUser, {  comment: '  Documentation: http://custom-docs.com',  exampleConfig: {transform: '<rootDir>/node_modules/babel-jest'},});console.log(result);\n```\n\nYou can read more about `jest-validate` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-validate/README.md).\n\n## jest-worker[​](#jest-worker \"Direct link to jest-worker\")\n\nModule used for parallelization of tasks. Exports a class `JestWorker` that takes the path of Node.js module and lets you call the module's exported methods as if they were class methods, returning a promise that resolves when the specified method finishes its execution in a forked process.\n\n### Example[​](#example-5 \"Direct link to Example\")\n\nheavy-task.js\n\n```\nmodule.exports = {  myHeavyTask: args => {    // long running CPU intensive task.  },};\n```\n\nmain.js\n\n```\nasync function main() {  const worker = new Worker(require.resolve('./heavy-task.js'));  // run 2 tasks in parallel with different arguments  const results = await Promise.all([    worker.myHeavyTask({foo: 'bar'}),    worker.myHeavyTask({bar: 'foo'}),  ]);  console.log(results);}main();\n```\n\nYou can read more about `jest-worker` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/jest-worker/README.md).\n\n## pretty-format[​](#pretty-format \"Direct link to pretty-format\")\n\nExports a function that converts any JavaScript value into a human-readable string. Supports all built-in JavaScript types out of the box and allows extension for application-specific types via user-defined plugins.\n\n### Example[​](#example-6 \"Direct link to Example\")\n\n```\nconst {format: prettyFormat} = require('pretty-format');const val = {object: {}};val.circularReference = val;val[Symbol('foo')] = 'foo';val.map = new Map([['prop', 'value']]);val.array = [-0, Infinity, NaN];console.log(prettyFormat(val));\n```\n\nYou can read more about `pretty-format` in the [readme file](https://github.com/jestjs/jest/blob/main/packages/pretty-format/README.md).",
    "title": "Jest Platform · Jest",
    "description": "You can cherry pick specific features of Jest and use them as standalone packages. Here's a list of the available packages:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/manual-mocks",
    "markdown": "# Manual Mocks · Jest\n\nManual mocks are used to stub out functionality with mock data. For example, instead of accessing a remote resource like a website or a database, you might want to create a manual mock that allows you to use fake data. This ensures your tests will be fast and not flaky.\n\n## Mocking user modules[​](#mocking-user-modules \"Direct link to Mocking user modules\")\n\nManual mocks are defined by writing a module in a `__mocks__/` subdirectory immediately adjacent to the module. For example, to mock a module called `user` in the `models` directory, create a file called `user.js` and put it in the `models/__mocks__` directory.\n\ncaution\n\nThe `__mocks__` folder is case-sensitive, so naming the directory `__MOCKS__` will break on some systems.\n\nnote\n\nWhen we require that module in our tests (meaning we want to use the manual mock instead of the real implementation), explicitly calling `jest.mock('./moduleName')` is **required**.\n\n## Mocking Node modules[​](#mocking-node-modules \"Direct link to Mocking Node modules\")\n\nIf the module you are mocking is a Node module (e.g.: `lodash`), the mock should be placed in the `__mocks__` directory adjacent to `node_modules` (unless you configured [`roots`](https://jestjs.io/docs/configuration#roots-arraystring) to point to a folder other than the project root) and will be **automatically** mocked. There's no need to explicitly call `jest.mock('module_name')`.\n\nScoped modules (also known as [scoped packages](https://docs.npmjs.com/cli/v6/using-npm/scope)) can be mocked by creating a file in a directory structure that matches the name of the scoped module. For example, to mock a scoped module called `@scope/project-name`, create a file at `__mocks__/@scope/project-name.js`, creating the `@scope/` directory accordingly.\n\ncaution\n\nIf we want to mock Node's built-in modules (e.g.: `fs` or `path`), then explicitly calling e.g. `jest.mock('path')` is **required**, because built-in modules are not mocked by default.\n\n## Examples[​](#examples \"Direct link to Examples\")\n\n```\n.├── config├── __mocks__│   └── fs.js├── models│   ├── __mocks__│   │   └── user.js│   └── user.js├── node_modules└── views\n```\n\nWhen a manual mock exists for a given module, Jest's module system will use that module when explicitly calling `jest.mock('moduleName')`. However, when `automock` is set to `true`, the manual mock implementation will be used instead of the automatically created mock, even if `jest.mock('moduleName')` is not called. To opt out of this behavior you will need to explicitly call `jest.unmock('moduleName')` in tests that should use the actual module implementation.\n\ninfo\n\nIn order to mock properly, Jest needs `jest.mock('moduleName')` to be in the same scope as the `require/import` statement.\n\nHere's a contrived example where we have a module that provides a summary of all the files in a given directory. In this case, we use the core (built in) `fs` module.\n\nFileSummarizer.js\n\n```\n'use strict';const fs = require('fs');function summarizeFilesInDirectorySync(directory) {  return fs.readdirSync(directory).map(fileName => ({    directory,    fileName,  }));}exports.summarizeFilesInDirectorySync = summarizeFilesInDirectorySync;\n```\n\nSince we'd like our tests to avoid actually hitting the disk (that's pretty slow and fragile), we create a manual mock for the `fs` module by extending an automatic mock. Our manual mock will implement custom versions of the `fs` APIs that we can build on for our tests:\n\n\\_\\_mocks\\_\\_/fs.js\n\n```\n'use strict';const path = require('path');const fs = jest.createMockFromModule('fs');// This is a custom function that our tests can use during setup to specify// what the files on the \"mock\" filesystem should look like when any of the// `fs` APIs are used.let mockFiles = Object.create(null);function __setMockFiles(newMockFiles) {  mockFiles = Object.create(null);  for (const file in newMockFiles) {    const dir = path.dirname(file);    if (!mockFiles[dir]) {      mockFiles[dir] = [];    }    mockFiles[dir].push(path.basename(file));  }}// A custom version of `readdirSync` that reads from the special mocked out// file list set via __setMockFilesfunction readdirSync(directoryPath) {  return mockFiles[directoryPath] || [];}fs.__setMockFiles = __setMockFiles;fs.readdirSync = readdirSync;module.exports = fs;\n```\n\nNow we write our test. In this case `jest.mock('fs')` must be called explicitly, because `fs` is Node’s built-in module:\n\n\\_\\_tests\\_\\_/FileSummarizer-test.js\n\n```\n'use strict';jest.mock('fs');describe('listFilesInDirectorySync', () => {  const MOCK_FILE_INFO = {    '/path/to/file1.js': 'console.log(\"file1 contents\");',    '/path/to/file2.txt': 'file2 contents',  };  beforeEach(() => {    // Set up some mocked out file info before each test    require('fs').__setMockFiles(MOCK_FILE_INFO);  });  test('includes all files in the directory in the summary', () => {    const FileSummarizer = require('../FileSummarizer');    const fileSummary =      FileSummarizer.summarizeFilesInDirectorySync('/path/to');    expect(fileSummary.length).toBe(2);  });});\n```\n\nThe example mock shown here uses [`jest.createMockFromModule`](https://jestjs.io/docs/jest-object#jestcreatemockfrommodulemodulename) to generate an automatic mock, and overrides its default behavior. This is the recommended approach, but is completely optional. If you do not want to use the automatic mock at all, you can export your own functions from the mock file. One downside to fully manual mocks is that they're manual – meaning you have to manually update them any time the module they are mocking changes. Because of this, it's best to use or extend the automatic mock when it works for your needs.\n\nTo ensure that a manual mock and its real implementation stay in sync, it might be useful to require the real module using [`jest.requireActual(moduleName)`](https://jestjs.io/docs/jest-object#jestrequireactualmodulename) in your manual mock and amending it with mock functions before exporting it.\n\nThe code for this example is available at [examples/manual-mocks](https://github.com/jestjs/jest/tree/main/examples/manual-mocks).\n\n## Using with ES module imports[​](#using-with-es-module-imports \"Direct link to Using with ES module imports\")\n\nIf you're using [ES module imports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) then you'll normally be inclined to put your `import` statements at the top of the test file. But often you need to instruct Jest to use a mock before modules use it. For this reason, Jest will automatically hoist `jest.mock` calls to the top of the module (before any imports). To learn more about this and see it in action, see [this repo](https://github.com/kentcdodds/how-jest-mocking-works).\n\ncaution\n\n`jest.mock` calls cannot be hoisted to the top of the module if you enabled ECMAScript modules support. The ESM module loader always evaluates the static imports before executing code. See [ECMAScriptModules](https://jestjs.io/docs/ecmascript-modules) for details.\n\n## Mocking methods which are not implemented in JSDOM[​](#mocking-methods-which-are-not-implemented-in-jsdom \"Direct link to Mocking methods which are not implemented in JSDOM\")\n\nIf some code uses a method which JSDOM (the DOM implementation used by Jest) hasn't implemented yet, testing it is not easily possible. This is e.g. the case with `window.matchMedia()`. Jest returns `TypeError: window.matchMedia is not a function` and doesn't properly execute the test.\n\nIn this case, mocking `matchMedia` in the test file should solve the issue:\n\n```\nObject.defineProperty(window, 'matchMedia', {  writable: true,  value: jest.fn().mockImplementation(query => ({    matches: false,    media: query,    onchange: null,    addListener: jest.fn(), // deprecated    removeListener: jest.fn(), // deprecated    addEventListener: jest.fn(),    removeEventListener: jest.fn(),    dispatchEvent: jest.fn(),  })),});\n```\n\nThis works if `window.matchMedia()` is used in a function (or method) which is invoked in the test. If `window.matchMedia()` is executed directly in the tested file, Jest reports the same error. In this case, the solution is to move the manual mock into a separate file and include this one in the test **before** the tested file:\n\n```\nimport './matchMedia.mock'; // Must be imported before the tested fileimport {myMethod} from './file-to-test';describe('myMethod()', () => {  // Test the method here...});\n```",
    "title": "Manual Mocks · Jest",
    "description": "Manual mocks are used to stub out functionality with mock data. For example, instead of accessing a remote resource like a website or a database, you might want to create a manual mock that allows you to use fake data. This ensures your tests will be fast and not flaky.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/ecmascript-modules",
    "markdown": "# ECMAScript Modules · Jest\n\nVersion: 29.7\n\ncaution\n\nJest ships with **experimental** support for ECMAScript Modules (ESM).\n\nThe implementation may have bugs and lack features. For the latest status check out the [issue](https://github.com/jestjs/jest/issues/9430) and the [label](https://github.com/jestjs/jest/labels/ES%20Modules) on the issue tracker.\n\nAlso note that the APIs Jest uses to implement ESM support are still [considered experimental by Node](https://nodejs.org/api/vm.html#vm_class_vm_module) (as of version `18.8.0`).\n\nWith the warnings out of the way, this is how you activate ESM support in your tests.\n\n1.  Ensure you either disable [code transforms](https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) by passing `transform: {}` or otherwise configure your transformer to emit ESM rather than the default CommonJS (CJS).\n    \n2.  Execute `node` with `--experimental-vm-modules`, e.g. `node --experimental-vm-modules node_modules/jest/bin/jest.js` or `NODE_OPTIONS=\"$NODE_OPTIONS --experimental-vm-modules\" npx jest` etc.\n    \n    On Windows, you can use [`cross-env`](https://github.com/kentcdodds/cross-env) to be able to set environment variables.\n    \n    If you use Yarn, you can use `yarn node --experimental-vm-modules $(yarn bin jest)`. This command will also work if you use [Yarn Plug'n'Play](https://yarnpkg.com/features/pnp).\n    \n    If your codebase includes ESM imports from `*.wasm` files, you do _not_ need to pass `--experimental-wasm-modules` to `node`. Current implementation of WebAssembly imports in Jest relies on experimental VM modules, however, this may change in the future.\n    \n3.  Beyond that, we attempt to follow `node`'s logic for activating \"ESM mode\" (such as looking at `type` in `package.json` or `.mjs` files), see [their docs](https://nodejs.org/api/esm.html#esm_enabling) for details.\n    \n4.  If you want to treat other file extensions (such as `.jsx` or `.ts`) as ESM, please use the [`extensionsToTreatAsEsm` option](https://jestjs.io/docs/configuration#extensionstotreatasesm-arraystring).\n    \n\n## Differences between ESM and CommonJS[​](#differences-between-esm-and-commonjs \"Direct link to Differences between ESM and CommonJS\")\n\nMost of the differences are explained in [Node's documentation](https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs), but in addition to the things mentioned there, Jest injects a special variable into all executed files - the [`jest` object](https://jestjs.io/docs/jest-object). To access this object in ESM, you need to import it from the `@jest/globals` module or use `import.meta`.\n\n```\nimport {jest} from '@jest/globals';jest.useFakeTimers();// etc.// alternativelyimport.meta.jest.useFakeTimers();// jest === import.meta.jest => true\n```\n\n## Module mocking in ESM[​](#module-mocking-in-esm \"Direct link to Module mocking in ESM\")\n\nSince ESM evaluates static `import` statements before looking at the code, the hoisting of `jest.mock` calls that happens in CJS won't work for ESM. To mock modules in ESM, you need to use `require` or dynamic `import()` after `jest.mock` calls to load the mocked modules - the same applies to modules which load the mocked modules.\n\nESM mocking is supported through `jest.unstable_mockModule`. As the name suggests, this API is still work in progress, please follow [this issue](https://github.com/jestjs/jest/issues/10025) for updates.\n\nThe usage of `jest.unstable_mockModule` is essentially the same as `jest.mock` with two differences: the factory function is required and it can be sync or async:\n\n```\nimport {jest} from '@jest/globals';jest.unstable_mockModule('node:child_process', () => ({  execSync: jest.fn(),  // etc.}));const {execSync} = await import('node:child_process');// etc.\n```\n\nFor mocking CJS modules, you should continue to use `jest.mock`. See the example below:\n\nmain.cjs\n\n```\nconst {BrowserWindow, app} = require('electron');// etc.module.exports = {example};\n```\n\nmain.test.cjs\n\n```\nimport {createRequire} from 'node:module';import {jest} from '@jest/globals';const require = createRequire(import.meta.url);jest.mock('electron', () => ({  app: {    on: jest.fn(),    whenReady: jest.fn(() => Promise.resolve()),  },  BrowserWindow: jest.fn().mockImplementation(() => ({    // partial mocks.  })),}));const {BrowserWindow} = require('electron');const exported = require('./main.cjs');// alternativelyconst {BrowserWindow} = (await import('electron')).default;const exported = await import('./main.cjs');// etc.\n```",
    "title": "ECMAScript Modules · Jest",
    "description": "Jest ships with experimental support for ECMAScript Modules (ESM).",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/timer-mocks",
    "markdown": "# Timer Mocks · Jest\n\nThe native timer functions (i.e., `setTimeout()`, `setInterval()`, `clearTimeout()`, `clearInterval()`) are less than ideal for a testing environment since they depend on real time to elapse. Jest can swap out timers with functions that allow you to control the passage of time. [Great Scott!](https://www.youtube.com/watch?v=QZoJ2Pt27BY)\n\n## Enable Fake Timers[​](#enable-fake-timers \"Direct link to Enable Fake Timers\")\n\nIn the following example we enable fake timers by calling `jest.useFakeTimers()`. This is replacing the original implementation of `setTimeout()` and other timer functions. Timers can be restored to their normal behavior with `jest.useRealTimers()`.\n\ntimerGame.js\n\n```\nfunction timerGame(callback) {  console.log('Ready....go!');  setTimeout(() => {    console.log(\"Time's up -- stop!\");    callback && callback();  }, 1000);}module.exports = timerGame;\n```\n\n\\_\\_tests\\_\\_/timerGame-test.js\n\n```\njest.useFakeTimers();jest.spyOn(global, 'setTimeout');test('waits 1 second before ending the game', () => {  const timerGame = require('../timerGame');  timerGame();  expect(setTimeout).toHaveBeenCalledTimes(1);  expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);});\n```\n\n## Run All Timers[​](#run-all-timers \"Direct link to Run All Timers\")\n\nAnother test we might want to write for this module is one that asserts that the callback is called after 1 second. To do this, we're going to use Jest's timer control APIs to fast-forward time right in the middle of the test:\n\n```\njest.useFakeTimers();test('calls the callback after 1 second', () => {  const timerGame = require('../timerGame');  const callback = jest.fn();  timerGame(callback);  // At this point in time, the callback should not have been called yet  expect(callback).not.toHaveBeenCalled();  // Fast-forward until all timers have been executed  jest.runAllTimers();  // Now our callback should have been called!  expect(callback).toHaveBeenCalled();  expect(callback).toHaveBeenCalledTimes(1);});\n```\n\n## Run Pending Timers[​](#run-pending-timers \"Direct link to Run Pending Timers\")\n\nThere are also scenarios where you might have a recursive timer – that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop, throwing the following error: \"Aborting after running 100000 timers, assuming an infinite loop!\"\n\nIf that is your case, using `jest.runOnlyPendingTimers()` will solve the problem:\n\ninfiniteTimerGame.js\n\n```\nfunction infiniteTimerGame(callback) {  console.log('Ready....go!');  setTimeout(() => {    console.log(\"Time's up! 10 seconds before the next game starts...\");    callback && callback();    // Schedule the next game in 10 seconds    setTimeout(() => {      infiniteTimerGame(callback);    }, 10000);  }, 1000);}module.exports = infiniteTimerGame;\n```\n\n\\_\\_tests\\_\\_/infiniteTimerGame-test.js\n\n```\njest.useFakeTimers();jest.spyOn(global, 'setTimeout');describe('infiniteTimerGame', () => {  test('schedules a 10-second timer after 1 second', () => {    const infiniteTimerGame = require('../infiniteTimerGame');    const callback = jest.fn();    infiniteTimerGame(callback);    // At this point in time, there should have been a single call to    // setTimeout to schedule the end of the game in 1 second.    expect(setTimeout).toHaveBeenCalledTimes(1);    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);    // Fast forward and exhaust only currently pending timers    // (but not any new timers that get created during that process)    jest.runOnlyPendingTimers();    // At this point, our 1-second timer should have fired its callback    expect(callback).toHaveBeenCalled();    // And it should have created a new timer to start the game over in    // 10 seconds    expect(setTimeout).toHaveBeenCalledTimes(2);    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 10000);  });});\n```\n\nnote\n\nFor debugging or any other reason you can change the limit of timers that will be run before throwing an error:\n\n```\njest.useFakeTimers({timerLimit: 100});\n```\n\n## Advance Timers by Time[​](#advance-timers-by-time \"Direct link to Advance Timers by Time\")\n\nAnother possibility is use `jest.advanceTimersByTime(msToRun)`. When this API is called, all timers are advanced by `msToRun` milliseconds. All pending \"macro-tasks\" that have been queued via setTimeout() or setInterval(), and would be executed during this time frame, will be executed. Additionally, if those macro-tasks schedule new macro-tasks that would be executed within the same time frame, those will be executed until there are no more macro-tasks remaining in the queue that should be run within msToRun milliseconds.\n\ntimerGame.js\n\n```\nfunction timerGame(callback) {  console.log('Ready....go!');  setTimeout(() => {    console.log(\"Time's up -- stop!\");    callback && callback();  }, 1000);}module.exports = timerGame;\n```\n\n\\_\\_tests\\_\\_/timerGame-test.js\n\n```\njest.useFakeTimers();it('calls the callback after 1 second via advanceTimersByTime', () => {  const timerGame = require('../timerGame');  const callback = jest.fn();  timerGame(callback);  // At this point in time, the callback should not have been called yet  expect(callback).not.toHaveBeenCalled();  // Fast-forward until all timers have been executed  jest.advanceTimersByTime(1000);  // Now our callback should have been called!  expect(callback).toHaveBeenCalled();  expect(callback).toHaveBeenCalledTimes(1);});\n```\n\nLastly, it may occasionally be useful in some tests to be able to clear all of the pending timers. For this, we have `jest.clearAllTimers()`.\n\n## Selective Faking[​](#selective-faking \"Direct link to Selective Faking\")\n\nSometimes your code may require to avoid overwriting the original implementation of one or another API. If that is the case, you can use `doNotFake` option. For example, here is how you could provide a custom mock function for `performance.mark()` in jsdom environment:\n\n```\n/** * @jest-environment jsdom */const mockPerformanceMark = jest.fn();window.performance.mark = mockPerformanceMark;test('allows mocking `performance.mark()`', () => {  jest.useFakeTimers({doNotFake: ['performance']});  expect(window.performance.mark).toBe(mockPerformanceMark);});\n```",
    "title": "Timer Mocks · Jest",
    "description": "The native timer functions (i.e., setTimeout(), setInterval(), clearTimeout(), clearInterval()) are less than ideal for a testing environment since they depend on real time to elapse. Jest can swap out timers with functions that allow you to control the passage of time. Great Scott!",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/bypassing-module-mocks",
    "markdown": "# Bypassing module mocks · Jest\n\nVersion: 29.7\n\nJest allows you to mock out whole modules in your tests, which can be useful for testing if your code is calling functions from that module correctly. However, sometimes you may want to use parts of a mocked module in your _test file_, in which case you want to access the original implementation, rather than a mocked version.\n\nConsider writing a test case for this `createUser` function:\n\ncreateUser.js\n\n```\nimport fetch from 'node-fetch';export const createUser = async () => {  const response = await fetch('https://website.com/users', {method: 'POST'});  const userId = await response.text();  return userId;};\n```\n\nYour test will want to mock the `fetch` function so that we can be sure that it gets called without actually making the network request. However, you'll also need to mock the return value of `fetch` with a `Response` (wrapped in a `Promise`), as our function uses it to grab the created user's ID. So you might initially try writing a test like this:\n\n```\njest.mock('node-fetch');import fetch, {Response} from 'node-fetch';import {createUser} from './createUser';test('createUser calls fetch with the right args and returns the user id', async () => {  fetch.mockReturnValue(Promise.resolve(new Response('4')));  const userId = await createUser();  expect(fetch).toHaveBeenCalledTimes(1);  expect(fetch).toHaveBeenCalledWith('https://website.com/users', {    method: 'POST',  });  expect(userId).toBe('4');});\n```\n\nHowever, if you ran that test you would find that the `createUser` function would fail, throwing the error: `TypeError: response.text is not a function`. This is because the `Response` class you've imported from `node-fetch` has been mocked (due to the `jest.mock` call at the top of the test file) so it no longer behaves the way it should.\n\nTo get around problems like this, Jest provides the `jest.requireActual` helper. To make the above test work, make the following change to the imports in the test file:\n\n```\n// BEFOREjest.mock('node-fetch');import fetch, {Response} from 'node-fetch';\n```\n\n```\n// AFTERjest.mock('node-fetch');import fetch from 'node-fetch';const {Response} = jest.requireActual('node-fetch');\n```\n\nThis allows your test file to import the actual `Response` object from `node-fetch`, rather than a mocked version. This means the test will now pass correctly.",
    "title": "Bypassing module mocks · Jest",
    "description": "Jest allows you to mock out whole modules in your tests, which can be useful for testing if your code is calling functions from that module correctly. However, sometimes you may want to use parts of a mocked module in your test file, in which case you want to access the original implementation, rather than a mocked version.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/mongodb",
    "markdown": "# Using with MongoDB · Jest\n\n[Jest MongoDB](https://github.com/shelfio/jest-mongodb) provides all required configuration to run your tests using MongoDB.\n\n```\nconst {MongoClient} = require('mongodb');describe('insert', () => {  let connection;  let db;  beforeAll(async () => {    connection = await MongoClient.connect(globalThis.__MONGO_URI__, {      useNewUrlParser: true,      useUnifiedTopology: true,    });    db = await connection.db(globalThis.__MONGO_DB_NAME__);  });  afterAll(async () => {    await connection.close();  });  it('should insert a doc into collection', async () => {    const users = db.collection('users');    const mockUser = {_id: 'some-user-id', name: 'John'};    await users.insertOne(mockUser);    const insertedUser = await users.findOne({_id: 'some-user-id'});    expect(insertedUser).toEqual(mockUser);  });});\n```\n\nThere's no need to load any dependencies.",
    "title": "Using with MongoDB · Jest",
    "description": "With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with MongoDB.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/puppeteer",
    "markdown": "# Using with puppeteer · Jest\n\nVersion: 29.7\n\nWith the [Global Setup/Teardown](https://jestjs.io/docs/configuration#globalsetup-string) and [Async Test Environment](https://jestjs.io/docs/configuration#testenvironment-string) APIs, Jest can work smoothly with [puppeteer](https://github.com/GoogleChrome/puppeteer).\n\nnote\n\nGenerating code coverage for test files using Puppeteer is currently not possible if your test uses `page.$eval`, `page.$$eval` or `page.evaluate` as the passed function is executed outside of Jest's scope. Check out [issue #7962](https://github.com/jestjs/jest/issues/7962#issuecomment-495272339) on GitHub for a workaround.\n\n## Use jest-puppeteer Preset[​](#use-jest-puppeteer-preset \"Direct link to Use jest-puppeteer Preset\")\n\n[Jest Puppeteer](https://github.com/smooth-code/jest-puppeteer) provides all required configuration to run your tests using Puppeteer.\n\n1.  First, install `jest-puppeteer`\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest-puppeteer\n```\n\n2.  Specify preset in your [Jest configuration](https://jestjs.io/docs/configuration):\n\n```\n{  \"preset\": \"jest-puppeteer\"}\n```\n\n3.  Write your test\n\n```\ndescribe('Google', () => {  beforeAll(async () => {    await page.goto('https://google.com');  });  it('should be titled \"Google\"', async () => {    await expect(page.title()).resolves.toMatch('Google');  });});\n```\n\nThere's no need to load any dependencies. Puppeteer's `page` and `browser` classes will automatically be exposed\n\nSee [documentation](https://github.com/smooth-code/jest-puppeteer).\n\n## Custom example without jest-puppeteer preset[​](#custom-example-without-jest-puppeteer-preset \"Direct link to Custom example without jest-puppeteer preset\")\n\nYou can also hook up puppeteer from scratch. The basic idea is to:\n\n1.  launch & file the websocket endpoint of puppeteer with Global Setup\n2.  connect to puppeteer from each Test Environment\n3.  close puppeteer with Global Teardown\n\nHere's an example of the GlobalSetup script\n\nsetup.js\n\n```\nconst {mkdir, writeFile} = require('fs').promises;const os = require('os');const path = require('path');const puppeteer = require('puppeteer');const DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');module.exports = async function () {  const browser = await puppeteer.launch();  // store the browser instance so we can teardown it later  // this global is only available in the teardown but not in TestEnvironments  globalThis.__BROWSER_GLOBAL__ = browser;  // use the file system to expose the wsEndpoint for TestEnvironments  await mkdir(DIR, {recursive: true});  await writeFile(path.join(DIR, 'wsEndpoint'), browser.wsEndpoint());};\n```\n\nThen we need a custom Test Environment for puppeteer\n\npuppeteer\\_environment.js\n\n```\nconst {readFile} = require('fs').promises;const os = require('os');const path = require('path');const puppeteer = require('puppeteer');const NodeEnvironment = require('jest-environment-node').TestEnvironment;const DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');class PuppeteerEnvironment extends NodeEnvironment {  constructor(config) {    super(config);  }  async setup() {    await super.setup();    // get the wsEndpoint    const wsEndpoint = await readFile(path.join(DIR, 'wsEndpoint'), 'utf8');    if (!wsEndpoint) {      throw new Error('wsEndpoint not found');    }    // connect to puppeteer    this.global.__BROWSER_GLOBAL__ = await puppeteer.connect({      browserWSEndpoint: wsEndpoint,    });  }  async teardown() {    if (this.global.__BROWSER_GLOBAL__) {      this.global.__BROWSER_GLOBAL__.disconnect();    }    await super.teardown();  }  getVmContext() {    return super.getVmContext();  }}module.exports = PuppeteerEnvironment;\n```\n\nFinally, we can close the puppeteer instance and clean-up the file\n\nteardown.js\n\n```\nconst fs = require('fs').promises;const os = require('os');const path = require('path');const DIR = path.join(os.tmpdir(), 'jest_puppeteer_global_setup');module.exports = async function () {  // close the browser instance  await globalThis.__BROWSER_GLOBAL__.close();  // clean-up the wsEndpoint file  await fs.rm(DIR, {recursive: true, force: true});};\n```\n\nWith all the things set up, we can now write our tests like this:\n\ntest.js\n\n```\nconst timeout = 5000;describe(  '/ (Home Page)',  () => {    let page;    beforeAll(async () => {      page = await globalThis.__BROWSER_GLOBAL__.newPage();      await page.goto('https://google.com');    }, timeout);    it('should load without error', async () => {      const text = await page.evaluate(() => document.body.textContent);      expect(text).toContain('google');    });  },  timeout,);\n```\n\nFinally, set `jest.config.js` to read from these files. (The `jest-puppeteer` preset does something like this under the hood.)\n\n```\nmodule.exports = {  globalSetup: './setup.js',  globalTeardown: './teardown.js',  testEnvironment: './puppeteer_environment.js',};\n```\n\nHere's the code of [full working example](https://github.com/xfumihiro/jest-puppeteer-example).",
    "title": "Using with puppeteer · Jest",
    "description": "With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with puppeteer.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/es6-class-mocks",
    "markdown": "# ES6 Class Mocks · Jest\n\nJest can be used to mock ES6 classes that are imported into files you want to test.\n\nES6 classes are constructor functions with some syntactic sugar. Therefore, any mock for an ES6 class must be a function or an actual ES6 class (which is, again, another function). So you can mock them using [mock functions](https://jestjs.io/docs/mock-functions).\n\n## An ES6 Class Example[​](#an-es6-class-example \"Direct link to An ES6 Class Example\")\n\nWe'll use a contrived example of a class that plays sound files, `SoundPlayer`, and a consumer class which uses that class, `SoundPlayerConsumer`. We'll mock `SoundPlayer` in our tests for `SoundPlayerConsumer`.\n\nsound-player.js\n\n```\nexport default class SoundPlayer {  constructor() {    this.foo = 'bar';  }  playSoundFile(fileName) {    console.log('Playing sound file ' + fileName);  }}\n```\n\nsound-player-consumer.js\n\n```\nimport SoundPlayer from './sound-player';export default class SoundPlayerConsumer {  constructor() {    this.soundPlayer = new SoundPlayer();  }  playSomethingCool() {    const coolSoundFileName = 'song.mp3';    this.soundPlayer.playSoundFile(coolSoundFileName);  }}\n```\n\n## The 4 ways to create an ES6 class mock[​](#the-4-ways-to-create-an-es6-class-mock \"Direct link to The 4 ways to create an ES6 class mock\")\n\n### Automatic mock[​](#automatic-mock \"Direct link to Automatic mock\")\n\nCalling `jest.mock('./sound-player')` returns a useful \"automatic mock\" you can use to spy on calls to the class constructor and all of its methods. It replaces the ES6 class with a mock constructor, and replaces all of its methods with [mock functions](https://jestjs.io/docs/mock-functions) that always return `undefined`. Method calls are saved in `theAutomaticMock.mock.instances[index].methodName.mock.calls`.\n\nnote\n\nIf you use arrow functions in your classes, they will _not_ be part of the mock. The reason for that is that arrow functions are not present on the object's prototype, they are merely properties holding a reference to a function.\n\nIf you don't need to replace the implementation of the class, this is the easiest option to set up. For example:\n\n```\nimport SoundPlayer from './sound-player';import SoundPlayerConsumer from './sound-player-consumer';jest.mock('./sound-player'); // SoundPlayer is now a mock constructorbeforeEach(() => {  // Clear all instances and calls to constructor and all methods:  SoundPlayer.mockClear();});it('We can check if the consumer called the class constructor', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  expect(SoundPlayer).toHaveBeenCalledTimes(1);});it('We can check if the consumer called a method on the class instance', () => {  // Show that mockClear() is working:  expect(SoundPlayer).not.toHaveBeenCalled();  const soundPlayerConsumer = new SoundPlayerConsumer();  // Constructor should have been called again:  expect(SoundPlayer).toHaveBeenCalledTimes(1);  const coolSoundFileName = 'song.mp3';  soundPlayerConsumer.playSomethingCool();  // mock.instances is available with automatic mocks:  const mockSoundPlayerInstance = SoundPlayer.mock.instances[0];  const mockPlaySoundFile = mockSoundPlayerInstance.playSoundFile;  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);  // Equivalent to above check:  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);  expect(mockPlaySoundFile).toHaveBeenCalledTimes(1);});\n```\n\n### Manual mock[​](#manual-mock \"Direct link to Manual mock\")\n\nCreate a [manual mock](https://jestjs.io/docs/manual-mocks) by saving a mock implementation in the `__mocks__` folder. This allows you to specify the implementation, and it can be used across test files.\n\n\\_\\_mocks\\_\\_/sound-player.js\n\n```\n// Import this named export into your test file:export const mockPlaySoundFile = jest.fn();const mock = jest.fn().mockImplementation(() => {  return {playSoundFile: mockPlaySoundFile};});export default mock;\n```\n\nImport the mock and the mock method shared by all instances:\n\nsound-player-consumer.test.js\n\n```\nimport SoundPlayer, {mockPlaySoundFile} from './sound-player';import SoundPlayerConsumer from './sound-player-consumer';jest.mock('./sound-player'); // SoundPlayer is now a mock constructorbeforeEach(() => {  // Clear all instances and calls to constructor and all methods:  SoundPlayer.mockClear();  mockPlaySoundFile.mockClear();});it('We can check if the consumer called the class constructor', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  expect(SoundPlayer).toHaveBeenCalledTimes(1);});it('We can check if the consumer called a method on the class instance', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  const coolSoundFileName = 'song.mp3';  soundPlayerConsumer.playSomethingCool();  expect(mockPlaySoundFile).toHaveBeenCalledWith(coolSoundFileName);});\n```\n\n### Calling [`jest.mock()`](https://jestjs.io/docs/jest-object#jestmockmodulename-factory-options) with the module factory parameter[​](#calling-jestmock-with-the-module-factory-parameter \"Direct link to calling-jestmock-with-the-module-factory-parameter\")\n\n`jest.mock(path, moduleFactory)` takes a **module factory** argument. A module factory is a function that returns the mock.\n\nIn order to mock a constructor function, the module factory must return a constructor function. In other words, the module factory must be a function that returns a function - a higher-order function (HOF).\n\n```\nimport SoundPlayer from './sound-player';const mockPlaySoundFile = jest.fn();jest.mock('./sound-player', () => {  return jest.fn().mockImplementation(() => {    return {playSoundFile: mockPlaySoundFile};  });});\n```\n\ncaution\n\nSince calls to `jest.mock()` are hoisted to the top of the file, Jest prevents access to out-of-scope variables. By default, you cannot first define a variable and then use it in the factory. Jest will disable this check for variables that start with the word `mock`. However, it is still up to you to guarantee that they will be initialized on time. Be aware of [Temporal Dead Zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz).\n\nFor example, the following will throw an out-of-scope error due to the use of `fake` instead of `mock` in the variable declaration.\n\n```\n// Note: this will failimport SoundPlayer from './sound-player';const fakePlaySoundFile = jest.fn();jest.mock('./sound-player', () => {  return jest.fn().mockImplementation(() => {    return {playSoundFile: fakePlaySoundFile};  });});\n```\n\nThe following will throw a `ReferenceError` despite using `mock` in the variable declaration, as the `mockSoundPlayer` is not wrapped in an arrow function and thus accessed before initialization after hoisting.\n\n```\nimport SoundPlayer from './sound-player';const mockSoundPlayer = jest.fn().mockImplementation(() => {  return {playSoundFile: mockPlaySoundFile};});// results in a ReferenceErrorjest.mock('./sound-player', () => {  return mockSoundPlayer;});\n```\n\n### Replacing the mock using [`mockImplementation()`](https://jestjs.io/docs/mock-function-api#mockfnmockimplementationfn) or [`mockImplementationOnce()`](https://jestjs.io/docs/mock-function-api#mockfnmockimplementationoncefn)[​](#replacing-the-mock-using-mockimplementation-or-mockimplementationonce \"Direct link to replacing-the-mock-using-mockimplementation-or-mockimplementationonce\")\n\nYou can replace all of the above mocks in order to change the implementation, for a single test or all tests, by calling `mockImplementation()` on the existing mock.\n\nCalls to jest.mock are hoisted to the top of the code. You can specify a mock later, e.g. in `beforeAll()`, by calling `mockImplementation()` (or `mockImplementationOnce()`) on the existing mock instead of using the factory parameter. This also allows you to change the mock between tests, if needed:\n\n```\nimport SoundPlayer from './sound-player';import SoundPlayerConsumer from './sound-player-consumer';jest.mock('./sound-player');describe('When SoundPlayer throws an error', () => {  beforeAll(() => {    SoundPlayer.mockImplementation(() => {      return {        playSoundFile: () => {          throw new Error('Test error');        },      };    });  });  it('Should throw an error when calling playSomethingCool', () => {    const soundPlayerConsumer = new SoundPlayerConsumer();    expect(() => soundPlayerConsumer.playSomethingCool()).toThrow();  });});\n```\n\n## In depth: Understanding mock constructor functions[​](#in-depth-understanding-mock-constructor-functions \"Direct link to In depth: Understanding mock constructor functions\")\n\nBuilding your constructor function mock using `jest.fn().mockImplementation()` makes mocks appear more complicated than they really are. This section shows how you can create your own mocks to illustrate how mocking works.\n\n### Manual mock that is another ES6 class[​](#manual-mock-that-is-another-es6-class \"Direct link to Manual mock that is another ES6 class\")\n\nIf you define an ES6 class using the same filename as the mocked class in the `__mocks__` folder, it will serve as the mock. This class will be used in place of the real class. This allows you to inject a test implementation for the class, but does not provide a way to spy on calls.\n\nFor the contrived example, the mock might look like this:\n\n\\_\\_mocks\\_\\_/sound-player.js\n\n```\nexport default class SoundPlayer {  constructor() {    console.log('Mock SoundPlayer: constructor was called');  }  playSoundFile() {    console.log('Mock SoundPlayer: playSoundFile was called');  }}\n```\n\n### Mock using module factory parameter[​](#mock-using-module-factory-parameter \"Direct link to Mock using module factory parameter\")\n\nThe module factory function passed to `jest.mock(path, moduleFactory)` can be a HOF that returns a function\\*. This will allow calling `new` on the mock. Again, this allows you to inject different behavior for testing, but does not provide a way to spy on calls.\n\n#### \\* Module factory function must return a function[​](#-module-factory-function-must-return-a-function \"Direct link to * Module factory function must return a function\")\n\nIn order to mock a constructor function, the module factory must return a constructor function. In other words, the module factory must be a function that returns a function - a higher-order function (HOF).\n\n```\njest.mock('./sound-player', () => {  return function () {    return {playSoundFile: () => {}};  };});\n```\n\nnote\n\nThe mock can't be an arrow function because calling `new` on an arrow function is not allowed in JavaScript. So this won't work:\n\n```\njest.mock('./sound-player', () => {  return () => {    // Does not work; arrow functions can't be called with new    return {playSoundFile: () => {}};  };});\n```\n\nThis will throw **_TypeError: \\_soundPlayer2.default is not a constructor_**, unless the code is transpiled to ES5, e.g. by `@babel/preset-env`. (ES5 doesn't have arrow functions nor classes, so both will be transpiled to plain functions.)\n\n## Mocking a specific method of a class[​](#mocking-a-specific-method-of-a-class \"Direct link to Mocking a specific method of a class\")\n\nLets say that you want to mock or spy on the method `playSoundFile` within the class `SoundPlayer`. A simple example:\n\n```\n// your jest test file belowimport SoundPlayer from './sound-player';import SoundPlayerConsumer from './sound-player-consumer';const playSoundFileMock = jest  .spyOn(SoundPlayer.prototype, 'playSoundFile')  .mockImplementation(() => {    console.log('mocked function');  }); // comment this line if just want to \"spy\"it('player consumer plays music', () => {  const player = new SoundPlayerConsumer();  player.playSomethingCool();  expect(playSoundFileMock).toHaveBeenCalled();});\n```\n\n### Static, getter and setter methods[​](#static-getter-and-setter-methods \"Direct link to Static, getter and setter methods\")\n\nLets imagine our class `SoundPlayer` has a getter method `foo` and a static method `brand`\n\n```\nexport default class SoundPlayer {  constructor() {    this.foo = 'bar';  }  playSoundFile(fileName) {    console.log('Playing sound file ' + fileName);  }  get foo() {    return 'bar';  }  static brand() {    return 'player-brand';  }}\n```\n\nYou can mock/spy on them easily, here is an example:\n\n```\n// your jest test file belowimport SoundPlayer from './sound-player';const staticMethodMock = jest  .spyOn(SoundPlayer, 'brand')  .mockImplementation(() => 'some-mocked-brand');const getterMethodMock = jest  .spyOn(SoundPlayer.prototype, 'foo', 'get')  .mockImplementation(() => 'some-mocked-result');it('custom methods are called', () => {  const player = new SoundPlayer();  const foo = player.foo;  const brand = SoundPlayer.brand();  expect(staticMethodMock).toHaveBeenCalled();  expect(getterMethodMock).toHaveBeenCalled();});\n```\n\n## Keeping track of usage (spying on the mock)[​](#keeping-track-of-usage-spying-on-the-mock \"Direct link to Keeping track of usage (spying on the mock)\")\n\nInjecting a test implementation is helpful, but you will probably also want to test whether the class constructor and methods are called with the correct parameters.\n\n### Spying on the constructor[​](#spying-on-the-constructor \"Direct link to Spying on the constructor\")\n\nIn order to track calls to the constructor, replace the function returned by the HOF with a Jest mock function. Create it with [`jest.fn()`](https://jestjs.io/docs/jest-object#jestfnimplementation), and then specify its implementation with `mockImplementation()`.\n\n```\nimport SoundPlayer from './sound-player';jest.mock('./sound-player', () => {  // Works and lets you check for constructor calls:  return jest.fn().mockImplementation(() => {    return {playSoundFile: () => {}};  });});\n```\n\nThis will let us inspect usage of our mocked class, using `SoundPlayer.mock.calls`: `expect(SoundPlayer).toHaveBeenCalled();` or near-equivalent: `expect(SoundPlayer.mock.calls.length).toBeGreaterThan(0);`\n\n### Mocking non-default class exports[​](#mocking-non-default-class-exports \"Direct link to Mocking non-default class exports\")\n\nIf the class is **not** the default export from the module then you need to return an object with the key that is the same as the class export name.\n\n```\nimport {SoundPlayer} from './sound-player';jest.mock('./sound-player', () => {  // Works and lets you check for constructor calls:  return {    SoundPlayer: jest.fn().mockImplementation(() => {      return {playSoundFile: () => {}};    }),  };});\n```\n\n### Spying on methods of our class[​](#spying-on-methods-of-our-class \"Direct link to Spying on methods of our class\")\n\nOur mocked class will need to provide any member functions (`playSoundFile` in the example) that will be called during our tests, or else we'll get an error for calling a function that doesn't exist. But we'll probably want to also spy on calls to those methods, to ensure that they were called with the expected parameters.\n\nA new object will be created each time the mock constructor function is called during tests. To spy on method calls in all of these objects, we populate `playSoundFile` with another mock function, and store a reference to that same mock function in our test file, so it's available during tests.\n\n```\nimport SoundPlayer from './sound-player';const mockPlaySoundFile = jest.fn();jest.mock('./sound-player', () => {  return jest.fn().mockImplementation(() => {    return {playSoundFile: mockPlaySoundFile};    // Now we can track calls to playSoundFile  });});\n```\n\nThe manual mock equivalent of this would be:\n\n\\_\\_mocks\\_\\_/sound-player.js\n\n```\n// Import this named export into your test fileexport const mockPlaySoundFile = jest.fn();const mock = jest.fn().mockImplementation(() => {  return {playSoundFile: mockPlaySoundFile};});export default mock;\n```\n\nUsage is similar to the module factory function, except that you can omit the second argument from `jest.mock()`, and you must import the mocked method into your test file, since it is no longer defined there. Use the original module path for this; don't include `__mocks__`.\n\n### Cleaning up between tests[​](#cleaning-up-between-tests \"Direct link to Cleaning up between tests\")\n\nTo clear the record of calls to the mock constructor function and its methods, we call [`mockClear()`](https://jestjs.io/docs/mock-function-api#mockfnmockclear) in the `beforeEach()` function:\n\n```\nbeforeEach(() => {  SoundPlayer.mockClear();  mockPlaySoundFile.mockClear();});\n```\n\n## Complete example[​](#complete-example \"Direct link to Complete example\")\n\nHere's a complete test file which uses the module factory parameter to `jest.mock`:\n\nsound-player-consumer.test.js\n\n```\nimport SoundPlayer from './sound-player';import SoundPlayerConsumer from './sound-player-consumer';const mockPlaySoundFile = jest.fn();jest.mock('./sound-player', () => {  return jest.fn().mockImplementation(() => {    return {playSoundFile: mockPlaySoundFile};  });});beforeEach(() => {  SoundPlayer.mockClear();  mockPlaySoundFile.mockClear();});it('The consumer should be able to call new() on SoundPlayer', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  // Ensure constructor created the object:  expect(soundPlayerConsumer).toBeTruthy();});it('We can check if the consumer called the class constructor', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  expect(SoundPlayer).toHaveBeenCalledTimes(1);});it('We can check if the consumer called a method on the class instance', () => {  const soundPlayerConsumer = new SoundPlayerConsumer();  const coolSoundFileName = 'song.mp3';  soundPlayerConsumer.playSomethingCool();  expect(mockPlaySoundFile.mock.calls[0][0]).toBe(coolSoundFileName);});\n```",
    "title": "ES6 Class Mocks · Jest",
    "description": "Jest can be used to mock ES6 classes that are imported into files you want to test.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/29.4/mock-function-api",
    "markdown": "# Mock Functions · Jest\n\nMock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with `jest.fn()`. If no implementation is given, the mock function will return `undefined` when invoked.\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.4/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n## Methods[​](#methods \"Direct link to Methods\")\n\n*   [Reference](#reference)\n    *   [`mockFn.getMockName()`](#mockfngetmockname)\n    *   [`mockFn.mock.calls`](#mockfnmockcalls)\n    *   [`mockFn.mock.results`](#mockfnmockresults)\n    *   [`mockFn.mock.instances`](#mockfnmockinstances)\n    *   [`mockFn.mock.contexts`](#mockfnmockcontexts)\n    *   [`mockFn.mock.lastCall`](#mockfnmocklastcall)\n    *   [`mockFn.mockClear()`](#mockfnmockclear)\n    *   [`mockFn.mockReset()`](#mockfnmockreset)\n    *   [`mockFn.mockRestore()`](#mockfnmockrestore)\n    *   [`mockFn.mockImplementation(fn)`](#mockfnmockimplementationfn)\n    *   [`mockFn.mockImplementationOnce(fn)`](#mockfnmockimplementationoncefn)\n    *   [`mockFn.mockName(name)`](#mockfnmocknamename)\n    *   [`mockFn.mockReturnThis()`](#mockfnmockreturnthis)\n    *   [`mockFn.mockReturnValue(value)`](#mockfnmockreturnvaluevalue)\n    *   [`mockFn.mockReturnValueOnce(value)`](#mockfnmockreturnvalueoncevalue)\n    *   [`mockFn.mockResolvedValue(value)`](#mockfnmockresolvedvaluevalue)\n    *   [`mockFn.mockResolvedValueOnce(value)`](#mockfnmockresolvedvalueoncevalue)\n    *   [`mockFn.mockRejectedValue(value)`](#mockfnmockrejectedvaluevalue)\n    *   [`mockFn.mockRejectedValueOnce(value)`](#mockfnmockrejectedvalueoncevalue)\n    *   [`mockFn.withImplementation(fn, callback)`](#mockfnwithimplementationfn-callback)\n*   [Replaced Properties](#replaced-properties)\n    *   [`replacedProperty.replaceValue(value)`](#replacedpropertyreplacevaluevalue)\n    *   [`replacedProperty.restore()`](#replacedpropertyrestore)\n*   [TypeScript Usage](#typescript-usage)\n    *   [`jest.fn(implementation?)`](#jestfnimplementation)\n    *   [`jest.Mock<T>`](#jestmockt)\n    *   [`jest.Mocked<Source>`](#jestmockedsource)\n    *   [`jest.Replaced<Source>`](#jestreplacedsource)\n    *   [`jest.mocked(source, options?)`](#jestmockedsource-options)\n    *   [`jest.Spied<Source>`](#jestspiedsource)\n\n* * *\n\n## Reference[​](#reference \"Direct link to Reference\")\n\n### `mockFn.getMockName()`[​](#mockfngetmockname \"Direct link to mockfngetmockname\")\n\nReturns the mock name string set by calling [`.mockName()`](#mockfnmocknamename).\n\n### `mockFn.mock.calls`[​](#mockfnmockcalls \"Direct link to mockfnmockcalls\")\n\nAn array containing the call arguments of all calls that have been made to this mock function. Each item in the array is an array of arguments that were passed during the call.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.calls` array that looks like this:\n\n```\n[  ['arg1', 'arg2'],  ['arg3', 'arg4'],];\n```\n\n### `mockFn.mock.results`[​](#mockfnmockresults \"Direct link to mockfnmockresults\")\n\nAn array containing the results of all calls that have been made to this mock function. Each entry in this array is an object containing a `type` property, and a `value` property. `type` will be one of the following:\n\n*   `'return'` - Indicates that the call completed by returning normally.\n*   `'throw'` - Indicates that the call completed by throwing a value.\n*   `'incomplete'` - Indicates that the call has not yet completed. This occurs if you test the result from within the mock function itself, or from within a function that was called by the mock.\n\nThe `value` property contains the value that was thrown or returned. `value` is undefined when `type === 'incomplete'`.\n\nFor example: A mock function `f` that has been called three times, returning `'result1'`, throwing an error, and then returning `'result2'`, would have a `mock.results` array that looks like this:\n\n```\n[  {    type: 'return',    value: 'result1',  },  {    type: 'throw',    value: {      /* Error instance */    },  },  {    type: 'return',    value: 'result2',  },];\n```\n\n### `mockFn.mock.instances`[​](#mockfnmockinstances \"Direct link to mockfnmockinstances\")\n\nAn array that contains all the object instances that have been instantiated from this mock function using `new`.\n\nFor example: A mock function that has been instantiated twice would have the following `mock.instances` array:\n\n```\nconst mockFn = jest.fn();const a = new mockFn();const b = new mockFn();mockFn.mock.instances[0] === a; // truemockFn.mock.instances[1] === b; // true\n```\n\n### `mockFn.mock.contexts`[​](#mockfnmockcontexts \"Direct link to mockfnmockcontexts\")\n\nAn array that contains the contexts for all calls of the mock function.\n\nA context is the `this` value that a function receives when called. The context can be set using `Function.prototype.bind`, `Function.prototype.call` or `Function.prototype.apply`.\n\nFor example:\n\n```\nconst mockFn = jest.fn();const boundMockFn = mockFn.bind(thisContext0);boundMockFn('a', 'b');mockFn.call(thisContext1, 'a', 'b');mockFn.apply(thisContext2, ['a', 'b']);mockFn.mock.contexts[0] === thisContext0; // truemockFn.mock.contexts[1] === thisContext1; // truemockFn.mock.contexts[2] === thisContext2; // true\n```\n\n### `mockFn.mock.lastCall`[​](#mockfnmocklastcall \"Direct link to mockfnmocklastcall\")\n\nAn array containing the call arguments of the last call that was made to this mock function. If the function was not called, it will return `undefined`.\n\nFor example: A mock function `f` that has been called twice, with the arguments `f('arg1', 'arg2')`, and then with the arguments `f('arg3', 'arg4')`, would have a `mock.lastCall` array that looks like this:\n\n### `mockFn.mockClear()`[​](#mockfnmockclear \"Direct link to mockfnmockclear\")\n\nClears all information stored in the [`mockFn.mock.calls`](#mockfnmockcalls), [`mockFn.mock.instances`](#mockfnmockinstances), [`mockFn.mock.contexts`](#mockfnmockcontexts) and [`mockFn.mock.results`](#mockfnmockresults) arrays. Often this is useful when you want to clean up a mocks usage data between two assertions.\n\nThe [`clearMocks`](https://jestjs.io/docs/29.4/configuration#clearmocks-boolean) configuration option is available to clear mocks automatically before each tests.\n\ncaution\n\nBeware that `mockFn.mockClear()` will replace `mockFn.mock`, not just reset the values of its properties! You should, therefore, avoid assigning `mockFn.mock` to other variables, temporary or not, to make sure you don't access stale data.\n\n### `mockFn.mockReset()`[​](#mockfnmockreset \"Direct link to mockfnmockreset\")\n\nDoes everything that [`mockFn.mockClear()`](#mockfnmockclear) does, and also replaces the mock implementation with an empty function, returning `undefined`.\n\nThe [`resetMocks`](https://jestjs.io/docs/29.4/configuration#resetmocks-boolean) configuration option is available to reset mocks automatically before each test.\n\n### `mockFn.mockRestore()`[​](#mockfnmockrestore \"Direct link to mockfnmockrestore\")\n\nDoes everything that [`mockFn.mockReset()`](#mockfnmockreset) does, and also restores the original (non-mocked) implementation.\n\nThis is useful when you want to mock functions in certain test cases and restore the original implementation in others.\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.4/configuration#restoremocks-boolean) configuration option is available to restore mocks automatically before each test.\n\ninfo\n\n`mockFn.mockRestore()` only works when the mock was created with `jest.spyOn()`. Thus you have to take care of restoration yourself when manually assigning `jest.fn()`.\n\n### `mockFn.mockImplementation(fn)`[​](#mockfnmockimplementationfn \"Direct link to mockfnmockimplementationfn\")\n\nAccepts a function that should be used as the implementation of the mock. The mock itself will still record all calls that go into and instances that come from itself – the only difference is that the implementation will also be executed when the mock is called.\n\ntip\n\n`jest.fn(implementation)` is a shorthand for `jest.fn().mockImplementation(implementation)`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest.fn(scalar => 42 + scalar);mockFn(0); // 42mockFn(1); // 43mockFn.mockImplementation(scalar => 36 + scalar);mockFn(2); // 38mockFn(3); // 39\n```\n\n`.mockImplementation()` can also be used to mock class constructors:\n\n*   JavaScript\n*   TypeScript\n\nSomeClass.js\n\n```\nmodule.exports = class SomeClass {  method(a, b) {}};\n```\n\nSomeClass.test.js\n\n```\nconst SomeClass = require('./SomeClass');jest.mock('./SomeClass'); // this happens automatically with automockingconst mockMethod = jest.fn();SomeClass.mockImplementation(() => {  return {    method: mockMethod,  };});const some = new SomeClass();some.method('a', 'b');console.log('Calls to method:', mockMethod.mock.calls);\n```\n\n### `mockFn.mockImplementationOnce(fn)`[​](#mockfnmockimplementationoncefn \"Direct link to mockfnmockimplementationoncefn\")\n\nAccepts a function that will be used as an implementation of the mock for one call to the mocked function. Can be chained so that multiple function calls produce different results.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockImplementationOnce(cb => cb(null, true))  .mockImplementationOnce(cb => cb(null, false));mockFn((err, val) => console.log(val)); // truemockFn((err, val) => console.log(val)); // false\n```\n\nWhen the mocked function runs out of implementations defined with `.mockImplementationOnce()`, it will execute the default implementation set with `jest.fn(() => defaultValue)` or `.mockImplementation(() => defaultValue)` if they were called:\n\n```\nconst mockFn = jest  .fn(() => 'default')  .mockImplementationOnce(() => 'first call')  .mockImplementationOnce(() => 'second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockName(name)`[​](#mockfnmocknamename \"Direct link to mockfnmocknamename\")\n\nAccepts a string to use in test result output in place of `'jest.fn()'` to indicate which mock function is being referenced.\n\nFor example:\n\n```\nconst mockFn = jest.fn().mockName('mockedFunction');// mockFn();expect(mockFn).toHaveBeenCalled();\n```\n\nWill result in this error:\n\n```\nexpect(mockedFunction).toHaveBeenCalled()Expected number of calls: >= 1Received number of calls:    0\n```\n\n### `mockFn.mockReturnThis()`[​](#mockfnmockreturnthis \"Direct link to mockfnmockreturnthis\")\n\nShorthand for:\n\n```\njest.fn(function () {  return this;});\n```\n\n### `mockFn.mockReturnValue(value)`[​](#mockfnmockreturnvaluevalue \"Direct link to mockfnmockreturnvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => value);\n```\n\nAccepts a value that will be returned whenever the mock function is called.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mock = jest.fn();mock.mockReturnValue(42);mock(); // 42mock.mockReturnValue(43);mock(); // 43\n```\n\n### `mockFn.mockReturnValueOnce(value)`[​](#mockfnmockreturnvalueoncevalue \"Direct link to mockfnmockreturnvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => value);\n```\n\nAccepts a value that will be returned for one call to the mock function. Can be chained so that successive calls to the mock function return different values. When there are no more `mockReturnValueOnce` values to use, calls will return a value specified by `mockReturnValue`.\n\n*   JavaScript\n*   TypeScript\n\n```\nconst mockFn = jest  .fn()  .mockReturnValue('default')  .mockReturnValueOnce('first call')  .mockReturnValueOnce('second call');mockFn(); // 'first call'mockFn(); // 'second call'mockFn(); // 'default'mockFn(); // 'default'\n```\n\n### `mockFn.mockResolvedValue(value)`[​](#mockfnmockresolvedvaluevalue \"Direct link to mockfnmockresolvedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.resolve(value));\n```\n\nUseful to mock async functions in async tests:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest.fn().mockResolvedValue(43);  await asyncMock(); // 43});\n```\n\n### `mockFn.mockResolvedValueOnce(value)`[​](#mockfnmockresolvedvalueoncevalue \"Direct link to mockfnmockresolvedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.resolve(value));\n```\n\nUseful to resolve different values over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValue('default')    .mockResolvedValueOnce('first call')    .mockResolvedValueOnce('second call');  await asyncMock(); // 'first call'  await asyncMock(); // 'second call'  await asyncMock(); // 'default'  await asyncMock(); // 'default'});\n```\n\n### `mockFn.mockRejectedValue(value)`[​](#mockfnmockrejectedvaluevalue \"Direct link to mockfnmockrejectedvaluevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementation(() => Promise.reject(value));\n```\n\nUseful to create async mock functions that will always reject:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockRejectedValue(new Error('Async error message'));  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.mockRejectedValueOnce(value)`[​](#mockfnmockrejectedvalueoncevalue \"Direct link to mockfnmockrejectedvalueoncevalue\")\n\nShorthand for:\n\n```\njest.fn().mockImplementationOnce(() => Promise.reject(value));\n```\n\nUseful together with `.mockResolvedValueOnce()` or to reject with different exceptions over multiple async calls:\n\n*   JavaScript\n*   TypeScript\n\n```\ntest('async test', async () => {  const asyncMock = jest    .fn()    .mockResolvedValueOnce('first call')    .mockRejectedValueOnce(new Error('Async error message'));  await asyncMock(); // 'first call'  await asyncMock(); // throws 'Async error message'});\n```\n\n### `mockFn.withImplementation(fn, callback)`[​](#mockfnwithimplementationfn-callback \"Direct link to mockfnwithimplementationfn-callback\")\n\nAccepts a function which should be temporarily used as the implementation of the mock while the callback is being executed.\n\n```\ntest('test', () => {  const mock = jest.fn(() => 'outside callback');  mock.withImplementation(    () => 'inside callback',    () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n`mockFn.withImplementation` can be used regardless of whether or not the callback is asynchronous (returns a `thenable`). If the callback is asynchronous a promise will be returned. Awaiting the promise will await the callback and reset the implementation.\n\n```\ntest('async test', async () => {  const mock = jest.fn(() => 'outside callback');  // We await this call since the callback is async  await mock.withImplementation(    () => 'inside callback',    async () => {      mock(); // 'inside callback'    },  );  mock(); // 'outside callback'});\n```\n\n## Replaced Properties[​](#replaced-properties \"Direct link to Replaced Properties\")\n\n### `replacedProperty.replaceValue(value)`[​](#replacedpropertyreplacevaluevalue \"Direct link to replacedpropertyreplacevaluevalue\")\n\nChanges the value of already replaced property. This is useful when you want to replace property and then adjust the value in specific tests. As an alternative, you can call [`jest.replaceProperty()`](https://jestjs.io/docs/29.4/jest-object#jestreplacepropertyobject-propertykey-value) multiple times on same property.\n\n### `replacedProperty.restore()`[​](#replacedpropertyrestore \"Direct link to replacedpropertyrestore\")\n\nRestores object's property to the original value.\n\nBeware that `replacedProperty.restore()` only works when the property value was replaced with [`jest.replaceProperty()`](https://jestjs.io/docs/29.4/jest-object#jestreplacepropertyobject-propertykey-value).\n\nThe [`restoreMocks`](https://jestjs.io/docs/29.4/configuration#restoremocks-boolean) configuration option is available to restore replaced properties automatically before each test.\n\n## TypeScript Usage[​](#typescript-usage \"Direct link to TypeScript Usage\")\n\ninfo\n\nThe TypeScript examples from this page will only work as documented if you explicitly import Jest APIs:\n\n```\nimport {expect, jest, test} from '@jest/globals';\n```\n\nConsult the [Getting Started](https://jestjs.io/docs/29.4/getting-started#using-typescript) guide for details on how to setup Jest with TypeScript.\n\n### `jest.fn(implementation?)`[​](#jestfnimplementation \"Direct link to jestfnimplementation\")\n\nCorrect mock typings will be inferred if implementation is passed to [`jest.fn()`](https://jestjs.io/docs/29.4/jest-object#jestfnimplementation). There are many use cases where the implementation is omitted. To ensure type safety you may pass a generic type argument (also see the examples above for more reference):\n\n```\nimport {expect, jest, test} from '@jest/globals';import type add from './add';import calculate from './calc';test('calculate calls add', () => {  // Create a new mock that can be used in place of `add`.  const mockAdd = jest.fn<typeof add>();  // `.mockImplementation()` now can infer that `a` and `b` are `number`  // and that the returned value is a `number`.  mockAdd.mockImplementation((a, b) => {    // Yes, this mock is still adding two numbers but imagine this    // was a complex function we are mocking.    return a + b;  });  // `mockAdd` is properly typed and therefore accepted by anything  // requiring `add`.  calculate(mockAdd, 1, 2);  expect(mockAdd).toHaveBeenCalledTimes(1);  expect(mockAdd).toHaveBeenCalledWith(1, 2);});\n```\n\n### `jest.Mock<T>`[​](#jestmockt \"Direct link to jestmockt\")\n\nConstructs the type of a mock function, e.g. the return type of `jest.fn()`. It can be useful if you have to defined a recursive mock function:\n\n```\nimport {jest} from '@jest/globals';const sumRecursively: jest.Mock<(value: number) => number> = jest.fn(value => {  if (value === 0) {    return 0;  } else {    return value + fn(value - 1);  }});\n```\n\n### `jest.Mocked<Source>`[​](#jestmockedsource \"Direct link to jestmockedsource\")\n\nThe `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n\n```\nimport {expect, jest, test} from '@jest/globals';import type {fetch} from 'node-fetch';jest.mock('node-fetch');let mockedFetch: jest.Mocked<typeof fetch>;afterEach(() => {  mockedFetch.mockClear();});test('makes correct call', () => {  mockedFetch = getMockedFetch();  // ...});test('returns correct data', () => {  mockedFetch = getMockedFetch();  // ...});\n```\n\nTypes of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n\n### `jest.Replaced<Source>`[​](#jestreplacedsource \"Direct link to jestreplacedsource\")\n\nThe `jest.Replaced<Source>` utility type returns the `Source` type wrapped with type definitions of Jest [replaced property](#replaced-properties).\n\nsrc/utils.ts\n\n```\nexport function isLocalhost(): boolean {  return process.env['HOSTNAME'] === 'localhost';}\n```\n\nsrc/\\_\\_tests\\_\\_/utils.test.ts\n\n```\nimport {afterEach, expect, it, jest} from '@jest/globals';import {isLocalhost} from '../utils';let replacedEnv: jest.Replaced<typeof process.env> | undefined = undefined;afterEach(() => {  replacedEnv?.restore();});it('isLocalhost should detect localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'localhost'});  expect(isLocalhost()).toBe(true);});it('isLocalhost should detect non-localhost environment', () => {  replacedEnv = jest.replaceProperty(process, 'env', {HOSTNAME: 'example.com'});  expect(isLocalhost()).toBe(false);});\n```\n\n### `jest.mocked(source, options?)`[​](#jestmockedsource-options \"Direct link to jestmockedsource-options\")\n\nThe `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n\nReturns the `source` object.\n\nsong.ts\n\n```\nexport const song = {  one: {    more: {      time: (t: number) => {        return t;      },    },  },};\n```\n\nsong.test.ts\n\n```\nimport {expect, jest, test} from '@jest/globals';import {song} from './song';jest.mock('./song');jest.spyOn(console, 'log');const mockedSong = jest.mocked(song);// or through `jest.Mocked<Source>`// const mockedSong = song as jest.Mocked<typeof song>;test('deep method is typed correctly', () => {  mockedSong.one.more.time.mockReturnValue(12);  expect(mockedSong.one.more.time(10)).toBe(12);  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);});test('direct usage', () => {  jest.mocked(console.log).mockImplementation(() => {    return;  });  console.log('one more time');  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);});\n```\n\n### `jest.Spied<Source>`[​](#jestspiedsource \"Direct link to jestspiedsource\")\n\nConstructs the type of a spied class or function (i.e. the return type of `jest.spyOn()`).\n\n\\_\\_utils\\_\\_/setDateNow.ts\n\n```\nimport {jest} from '@jest/globals';export function setDateNow(now: number): jest.Spied<typeof Date.now> {  return jest.spyOn(Date, 'now').mockReturnValue(now);}\n```\n\n```\nimport {afterEach, expect, type jest, test} from '@jest/globals';import {setDateNow} from './__utils__/setDateNow';let spiedDateNow: jest.Spied<typeof Date.now> | undefined = undefined;afterEach(() => {  spiedDateNow?.mockReset();});test('renders correctly with a given date', () => {  spiedDateNow = setDateNow(1_482_363_367_071);  // ...  expect(spiedDateNow).toHaveBeenCalledTimes(1);});\n```\n\nTypes of a class or function can be passed as type argument to `jest.Spied<Source>`. If you prefer to constrain the input type, use: `jest.SpiedClass<Source>` or `jest.SpiedFunction<Source>`.\n\nUse `jest.SpiedGetter<Source>` or `jest.SpiedSetter<Source>` to create the type of a spied getter or setter respectively.",
    "title": "Mock Functions · Jest",
    "description": "Mock functions are also known as \"spies\", because they let you spy on the behavior of a function that is called indirectly by some other code, rather than only testing the output. You can create a mock function with jest.fn(). If no implementation is given, the mock function will return undefined when invoked.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/dynamodb",
    "markdown": "# Using with DynamoDB · Jest\n\n[Jest DynamoDB](https://github.com/shelfio/jest-dynamodb) provides all required configuration to run your tests using DynamoDB.\n\n```\nmodule.exports = {  tables: [    {      TableName: `files`,      KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],      AttributeDefinitions: [{AttributeName: 'id', AttributeType: 'S'}],      ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},    },    // etc  ],};\n```\n\n```\nconst {DocumentClient} = require('aws-sdk/clients/dynamodb');const isTest = process.env.JEST_WORKER_ID;const config = {  convertEmptyValues: true,  ...(isTest && {    endpoint: 'localhost:8000',    sslEnabled: false,    region: 'local-env',  }),};const ddb = new DocumentClient(config);\n```\n\n```\nit('should insert item into table', async () => {  await ddb    .put({TableName: 'files', Item: {id: '1', hello: 'world'}})    .promise();  const {Item} = await ddb.get({TableName: 'files', Key: {id: '1'}}).promise();  expect(Item).toEqual({    id: '1',    hello: 'world',  });});\n```\n\nThere's no need to load any dependencies.",
    "title": "Using with DynamoDB · Jest",
    "description": "With the Global Setup/Teardown and Async Test Environment APIs, Jest can work smoothly with DynamoDB.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/tutorial-jquery",
    "markdown": "# DOM Manipulation · Jest\n\nVersion: 29.7\n\nAnother class of functions that is often considered difficult to test is code that directly manipulates the DOM. Let's see how we can test the following snippet of jQuery code that listens to a click event, fetches some data asynchronously and sets the content of a span.\n\ndisplayUser.js\n\n```\n'use strict';const $ = require('jquery');const fetchCurrentUser = require('./fetchCurrentUser.js');$('#button').click(() => {  fetchCurrentUser(user => {    const loggedText = 'Logged ' + (user.loggedIn ? 'In' : 'Out');    $('#username').text(user.fullName + ' - ' + loggedText);  });});\n```\n\nAgain, we create a test file in the `__tests__/` folder:\n\n\\_\\_tests\\_\\_/displayUser-test.js\n\n```\n'use strict';jest.mock('../fetchCurrentUser');test('displays a user after a click', () => {  // Set up our document body  document.body.innerHTML =    '<div>' +    '  <span id=\"username\" />' +    '  <button id=\"button\" />' +    '</div>';  // This module has a side-effect  require('../displayUser');  const $ = require('jquery');  const fetchCurrentUser = require('../fetchCurrentUser');  // Tell the fetchCurrentUser mock function to automatically invoke  // its callback with some data  fetchCurrentUser.mockImplementation(cb => {    cb({      fullName: 'Johnny Cash',      loggedIn: true,    });  });  // Use jquery to emulate a click on our button  $('#button').click();  // Assert that the fetchCurrentUser function was called, and that the  // #username span's inner text was updated as we'd expect it to.  expect(fetchCurrentUser).toHaveBeenCalled();  expect($('#username').text()).toBe('Johnny Cash - Logged In');});\n```\n\nWe are mocking `fetchCurrentUser.js` so that our test doesn't make a real network request but instead resolves to mock data locally. This ensures that our test can complete in milliseconds rather than seconds and guarantees a fast unit test iteration speed.\n\nAlso, the function being tested adds an event listener on the `#button` DOM element, so we need to set up our DOM correctly for the test. `jsdom` and the `jest-environment-jsdom` package simulate a DOM environment as if you were in the browser. This means that every DOM API that we call can be observed in the same way it would be observed in a browser!\n\nTo get started with the JSDOM [test environment](https://jestjs.io/docs/configuration#testenvironment-string), the `jest-environment-jsdom` package must be installed if it's not already:\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\nnpm install --save-dev jest-environment-jsdom\n```\n\nThe code for this example is available at [examples/jquery](https://github.com/jestjs/jest/tree/main/examples/jquery).",
    "title": "DOM Manipulation · Jest",
    "description": "Another class of functions that is often considered difficult to test is code that directly manipulates the DOM. Let's see how we can test the following snippet of jQuery code that listens to a click event, fetches some data asynchronously and sets the content of a span.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/migration-guide",
    "markdown": "# Migrating to Jest · Jest\n\nIf you'd like to try out Jest with an existing codebase, there are a number of ways to convert to Jest:\n\n*   If you are using Jasmine, or a Jasmine like API (for example [Mocha](https://mochajs.org/)), Jest should be mostly compatible, which makes it less complicated to migrate to.\n*   If you are using AVA, Expect.js (by Automattic), Jasmine, Mocha, proxyquire, Should.js or Tape you can automatically migrate with Jest Codemods (see below).\n*   If you like [chai](http://chaijs.com/), you can upgrade to Jest and continue using chai. However, we recommend trying out Jest's assertions and their failure messages. Jest Codemods can migrate from chai (see below).\n\n## jest-codemods[​](#jest-codemods \"Direct link to jest-codemods\")\n\nIf you are using [AVA](https://github.com/avajs/ava), [Chai](https://github.com/chaijs/chai), [Expect.js (by Automattic)](https://github.com/Automattic/expect.js), [Jasmine](https://github.com/jasmine/jasmine), [Mocha](https://github.com/mochajs/mocha), [proxyquire](https://github.com/thlorenz/proxyquire), [Should.js](https://github.com/shouldjs/should.js), [Tape](https://github.com/substack/tape), or [Sinon](https://sinonjs.org/) you can use the third-party [jest-codemods](https://github.com/skovhus/jest-codemods) to do most of the dirty migration work. It runs a code transformation on your codebase using [jscodeshift](https://github.com/facebook/jscodeshift).\n\nTo transform your existing tests, navigate to the project containing the tests and run:\n\nMore information can be found at [https://github.com/skovhus/jest-codemods](https://github.com/skovhus/jest-codemods).",
    "title": "Migrating to Jest · Jest",
    "description": "If you'd like to try out Jest with an existing codebase, there are a number of ways to convert to Jest:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/tutorial-react-native",
    "markdown": "# Testing React Native Apps · Jest\n\nAt Facebook, we use Jest to test [React Native](https://reactnative.dev/) applications.\n\nGet a deeper insight into testing a working React Native app example by reading the following series: [Part 1: Jest – Snapshot come into play](https://callstack.com/blog/testing-react-native-with-the-new-jest-part-1-snapshots-come-into-play/) and [Part 2: Jest – Redux Snapshots for your Actions and Reducers](https://callstack.com/blog/testing-react-native-with-the-new-jest-part-2-redux-snapshots-for-your-actions-and-reducers/).\n\n## Setup[​](#setup \"Direct link to Setup\")\n\nStarting from react-native version 0.38, a Jest setup is included by default when running `react-native init`. The following configuration should be automatically added to your package.json file:\n\n```\n{  \"scripts\": {    \"test\": \"jest\"  },  \"jest\": {    \"preset\": \"react-native\"  }}\n```\n\nRun `yarn test` to run tests with Jest.\n\ntip\n\nIf you are upgrading your react-native application and previously used the `jest-react-native` preset, remove the dependency from your `package.json` file and change the preset to `react-native` instead.\n\n## Snapshot Test[​](#snapshot-test \"Direct link to Snapshot Test\")\n\nLet's create a [snapshot test](https://jestjs.io/docs/snapshot-testing) for a small intro component with a few views and text components and some styles:\n\nIntro.js\n\n```\nimport React, {Component} from 'react';import {StyleSheet, Text, View} from 'react-native';class Intro extends Component {  render() {    return (      <View style={styles.container}>        <Text style={styles.welcome}>Welcome to React Native!</Text>        <Text style={styles.instructions}>          This is a React Native snapshot test.        </Text>      </View>    );  }}const styles = StyleSheet.create({  container: {    alignItems: 'center',    backgroundColor: '#F5FCFF',    flex: 1,    justifyContent: 'center',  },  instructions: {    color: '#333333',    marginBottom: 5,    textAlign: 'center',  },  welcome: {    fontSize: 20,    margin: 10,    textAlign: 'center',  },});export default Intro;\n```\n\nNow let's use React's test renderer and Jest's snapshot feature to interact with the component and capture the rendered output and create a snapshot file:\n\n\\_\\_tests\\_\\_/Intro-test.js\n\n```\nimport React from 'react';import renderer from 'react-test-renderer';import Intro from '../Intro';test('renders correctly', () => {  const tree = renderer.create(<Intro />).toJSON();  expect(tree).toMatchSnapshot();});\n```\n\nWhen you run `yarn test` or `jest`, this will produce an output file like this:\n\n\\_\\_tests\\_\\_/\\_\\_snapshots\\_\\_/Intro-test.js.snap\n\n```\nexports[`Intro renders correctly 1`] = `<View  style={    Object {      \"alignItems\": \"center\",      \"backgroundColor\": \"#F5FCFF\",      \"flex\": 1,      \"justifyContent\": \"center\",    }  }>  <Text    style={      Object {        \"fontSize\": 20,        \"margin\": 10,        \"textAlign\": \"center\",      }    }>    Welcome to React Native!  </Text>  <Text    style={      Object {        \"color\": \"#333333\",        \"marginBottom\": 5,        \"textAlign\": \"center\",      }    }>    This is a React Native snapshot test.  </Text></View>`;\n```\n\nThe next time you run the tests, the rendered output will be compared to the previously created snapshot. The snapshot should be committed along with code changes. When a snapshot test fails, you need to inspect whether it is an intended or unintended change. If the change is expected you can invoke Jest with `jest -u` to overwrite the existing snapshot.\n\nThe code for this example is available at [examples/react-native](https://github.com/jestjs/jest/tree/main/examples/react-native).\n\n## Preset configuration[​](#preset-configuration \"Direct link to Preset configuration\")\n\nThe preset sets up the environment and is very opinionated and based on what we found to be useful at Facebook. All of the configuration options can be overwritten just as they can be customized when no preset is used.\n\n### Environment[​](#environment \"Direct link to Environment\")\n\n`react-native` ships with a Jest preset, so the `jest.preset` field of your `package.json` should point to `react-native`. The preset is a node environment that mimics the environment of a React Native app. Because it doesn't load any DOM or browser APIs, it greatly improves Jest's startup time.\n\n### transformIgnorePatterns customization[​](#transformignorepatterns-customization \"Direct link to transformIgnorePatterns customization\")\n\nThe [`transformIgnorePatterns`](https://jestjs.io/docs/configuration#transformignorepatterns-arraystring) option can be used to specify which files shall be transformed by Babel. Many `react-native` npm modules unfortunately don't pre-compile their source code before publishing.\n\nBy default the `jest-react-native` preset only processes the project's own source files and `react-native`. If you have npm dependencies that have to be transformed you can customize this configuration option by including modules other than `react-native` by grouping them and separating them with the `|` operator:\n\n```\n{  \"transformIgnorePatterns\": [    \"node_modules/(?!(react-native|my-project|react-native-button)/)\"  ]}\n```\n\nYou can test which paths would match (and thus be excluded from transformation) with a tool [like this](https://regex101.com/r/JsLIDM/1).\n\n`transformIgnorePatterns` will exclude a file from transformation if the path matches against **any** pattern provided. Splitting into multiple patterns could therefore have unintended results if you are not careful. In the example below, the exclusion (also known as a negative lookahead assertion) for `foo` and `bar` cancel each other out:\n\n```\n{  \"transformIgnorePatterns\": [\"node_modules/(?!foo/)\", \"node_modules/(?!bar/)\"] // not what you want}\n```\n\n### setupFiles[​](#setupfiles \"Direct link to setupFiles\")\n\nIf you'd like to provide additional configuration for every test file, the [`setupFiles` configuration option](https://jestjs.io/docs/configuration#setupfiles-array) can be used to specify setup scripts.\n\n### moduleNameMapper[​](#modulenamemapper \"Direct link to moduleNameMapper\")\n\nThe [`moduleNameMapper`](https://jestjs.io/docs/configuration#modulenamemapper-objectstring-string--arraystring) can be used to map a module path to a different module. By default the preset maps all images to an image stub module but if a module cannot be found this configuration option can help:\n\n```\n{  \"moduleNameMapper\": {    \"my-module.js\": \"<rootDir>/path/to/my-module.js\"  }}\n```\n\n## Tips[​](#tips \"Direct link to Tips\")\n\n### Mock native modules using jest.mock[​](#mock-native-modules-using-jestmock \"Direct link to Mock native modules using jest.mock\")\n\nThe Jest preset built into `react-native` comes with a few default mocks that are applied on a react-native repository. However, some react-native components or third party components rely on native code to be rendered. In such cases, Jest's manual mocking system can help to mock out the underlying implementation.\n\nFor example, if your code depends on a third party native video component called `react-native-video` you might want to stub it out with a manual mock like this:\n\n```\njest.mock('react-native-video', () => 'Video');\n```\n\nThis will render the component as `<Video {...props} />` with all of its props in the snapshot output. See also [caveats around Enzyme and React 16](https://jestjs.io/docs/tutorial-react#snapshot-testing-with-mocks-enzyme-and-react-16).\n\nSometimes you need to provide a more complex manual mock. For example if you'd like to forward the prop types or static fields of a native component to a mock, you can return a different React component from a mock through this helper from jest-react-native:\n\n```\njest.mock('path/to/MyNativeComponent', () => {  const mockComponent = require('react-native/jest/mockComponent');  return mockComponent('path/to/MyNativeComponent');});\n```\n\nOr if you'd like to create your own manual mock, you can do something like this:\n\n```\njest.mock('Text', () => {  const RealComponent = jest.requireActual('Text');  const React = require('react');  class Text extends React.Component {    render() {      return React.createElement('Text', this.props, this.props.children);    }  }  Text.propTypes = RealComponent.propTypes;  return Text;});\n```\n\nIn other cases you may want to mock a native module that isn't a React component. The same technique can be applied. We recommend inspecting the native module's source code and logging the module when running a react native app on a real device and then modeling a manual mock after the real module.\n\nIf you end up mocking the same modules over and over it is recommended to define these mocks in a separate file and add it to the list of `setupFiles`.",
    "title": "Testing React Native Apps · Jest",
    "description": "At Facebook, we use Jest to test React Native applications.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/watch-plugins",
    "markdown": "# Watch Plugins · Jest\n\nThe Jest watch plugin system provides a way to hook into specific parts of Jest and to define watch mode menu prompts that execute code on key press. Combined, these features allow you to develop interactive experiences custom for your workflow.\n\n## Watch Plugin Interface[​](#watch-plugin-interface \"Direct link to Watch Plugin Interface\")\n\n```\nclass MyWatchPlugin {  // Add hooks to Jest lifecycle events  apply(jestHooks) {}  // Get the prompt information for interactive plugins  getUsageInfo(globalConfig) {}  // Executed when the key from `getUsageInfo` is input  run(globalConfig, updateConfigAndRun) {}}\n```\n\n## Hooking into Jest[​](#hooking-into-jest \"Direct link to Hooking into Jest\")\n\nTo connect your watch plugin to Jest, add its path under `watchPlugins` in your Jest configuration:\n\njest.config.js\n\n```\nmodule.exports = {  // ...  watchPlugins: ['path/to/yourWatchPlugin'],};\n```\n\nCustom watch plugins can add hooks to Jest events. These hooks can be added either with or without having an interactive key in the watch mode menu.\n\n### `apply(jestHooks)`[​](#applyjesthooks \"Direct link to applyjesthooks\")\n\nJest hooks can be attached by implementing the `apply` method. This method receives a `jestHooks` argument that allows the plugin to hook into specific parts of the lifecycle of a test run.\n\n```\nclass MyWatchPlugin {  apply(jestHooks) {}}\n```\n\nBelow are the hooks available in Jest.\n\n#### `jestHooks.shouldRunTestSuite(testSuiteInfo)`[​](#jesthooksshouldruntestsuitetestsuiteinfo \"Direct link to jesthooksshouldruntestsuitetestsuiteinfo\")\n\nReturns a boolean (or `Promise<boolean>` for handling asynchronous operations) to specify if a test should be run or not.\n\nFor example:\n\n```\nclass MyWatchPlugin {  apply(jestHooks) {    jestHooks.shouldRunTestSuite(testSuiteInfo => {      return testSuiteInfo.testPath.includes('my-keyword');    });    // or a promise    jestHooks.shouldRunTestSuite(testSuiteInfo => {      return Promise.resolve(testSuiteInfo.testPath.includes('my-keyword'));    });  }}\n```\n\n#### `jestHooks.onTestRunComplete(results)`[​](#jesthooksontestruncompleteresults \"Direct link to jesthooksontestruncompleteresults\")\n\nGets called at the end of every test run. It has the test results as an argument.\n\nFor example:\n\n```\nclass MyWatchPlugin {  apply(jestHooks) {    jestHooks.onTestRunComplete(results => {      this._hasSnapshotFailure = results.snapshot.failure;    });  }}\n```\n\n#### `jestHooks.onFileChange({projects})`[​](#jesthooksonfilechangeprojects \"Direct link to jesthooksonfilechangeprojects\")\n\nGets called whenever there is a change in the file system\n\n*   `projects: Array<config: ProjectConfig, testPaths: Array<string>`: Includes all the test paths that Jest is watching.\n\nFor example:\n\n```\nclass MyWatchPlugin {  apply(jestHooks) {    jestHooks.onFileChange(({projects}) => {      this._projects = projects;    });  }}\n```\n\nCustom watch plugins can also add or override functionality to the watch menu by specifying a key/prompt pair in `getUsageInfo` method and a `run` method for the execution of the key.\n\n### `getUsageInfo(globalConfig)`[​](#getusageinfoglobalconfig \"Direct link to getusageinfoglobalconfig\")\n\nTo add a key to the watch menu, implement the `getUsageInfo` method, returning a key and the prompt:\n\n```\nclass MyWatchPlugin {  getUsageInfo(globalConfig) {    return {      key: 's',      prompt: 'do something',    };  }}\n```\n\nThis will add a line in the watch mode menu _(`› Press s to do something.`)_\n\n```\nWatch Usage › Press p to filter by a filename regex pattern. › Press t to filter by a test name regex pattern. › Press q to quit watch mode. › Press s to do something. // <-- This is our plugin › Press Enter to trigger a test run.\n```\n\nnote\n\nIf the key for your plugin already exists as a default key, your plugin will override that key.\n\n### `run(globalConfig, updateConfigAndRun)`[​](#runglobalconfig-updateconfigandrun \"Direct link to runglobalconfig-updateconfigandrun\")\n\nTo handle key press events from the key returned by `getUsageInfo`, you can implement the `run` method. This method returns a `Promise<boolean>` that can be resolved when the plugin wants to return control to Jest. The `boolean` specifies if Jest should rerun the tests after it gets the control back.\n\n*   [`globalConfig`](https://github.com/jestjs/jest/blob/v29.2.1/packages/jest-types/src/Config.ts#L358-L422): A representation of Jest's current global configuration\n*   `updateConfigAndRun`: Allows you to trigger a test run while the interactive plugin is running.\n\n```\nclass MyWatchPlugin {  run(globalConfig, updateConfigAndRun) {    // do something.  }}\n```\n\nnote\n\nIf you do call `updateConfigAndRun`, your `run` method should not resolve to a truthy value, as that would trigger a double-run.\n\nFor stability and safety reasons, only part of the global configuration keys can be updated with `updateConfigAndRun`. The current white list is as follows:\n\n*   [`bail`](https://jestjs.io/docs/configuration#bail-number--boolean)\n*   [`changedSince`](https://jestjs.io/docs/cli#--changedsince)\n*   [`collectCoverage`](https://jestjs.io/docs/configuration#collectcoverage-boolean)\n*   [`collectCoverageFrom`](https://jestjs.io/docs/configuration#collectcoveragefrom-array)\n*   [`coverageDirectory`](https://jestjs.io/docs/configuration#coveragedirectory-string)\n*   [`coverageReporters`](https://jestjs.io/docs/configuration#coveragereporters-arraystring)\n*   [`notify`](https://jestjs.io/docs/configuration#notify-boolean)\n*   [`notifyMode`](https://jestjs.io/docs/configuration#notifymode-string)\n*   [`onlyFailures`](https://jestjs.io/docs/configuration#onlyfailures-boolean)\n*   [`reporters`](https://jestjs.io/docs/configuration#reporters-arraymodulename--modulename-options)\n*   [`testNamePattern`](https://jestjs.io/docs/cli#--testnamepatternregex)\n*   [`testPathPattern`](https://jestjs.io/docs/cli#--testpathpatternregex)\n*   [`updateSnapshot`](https://jestjs.io/docs/cli#--updatesnapshot)\n*   [`verbose`](https://jestjs.io/docs/configuration#verbose-boolean)\n\n## Customization[​](#customization \"Direct link to Customization\")\n\nPlugins can be customized via your Jest configuration.\n\njest.config.js\n\n```\nmodule.exports = {  // ...  watchPlugins: [    [      'path/to/yourWatchPlugin',      {        key: 'k', // <- your custom key        prompt: 'show a custom prompt',      },    ],  ],};\n```\n\nRecommended config names:\n\n*   `key`: Modifies the plugin key.\n*   `prompt`: Allows user to customize the text in the plugin prompt.\n\nIf the user provided a custom configuration, it will be passed as an argument to the plugin constructor.\n\n```\nclass MyWatchPlugin {  constructor({config}) {}}\n```\n\n## Choosing a good key[​](#choosing-a-good-key \"Direct link to Choosing a good key\")\n\nJest allows third-party plugins to override some of its built-in feature keys, but not all. Specifically, the following keys are **not overwritable** :\n\n*   `c` (clears filter patterns)\n*   `i` (updates non-matching snapshots interactively)\n*   `q` (quits)\n*   `u` (updates all non-matching snapshots)\n*   `w` (displays watch mode usage / available actions)\n\nThe following keys for built-in functionality **can be overwritten** :\n\n*   `p` (test filename pattern)\n*   `t` (test name pattern)\n\nAny key not used by built-in functionality can be claimed, as you would expect. Try to avoid using keys that are difficult to obtain on various keyboards (e.g. `é`, `€`), or not visible by default (e.g. many Mac keyboards do not have visual hints for characters such as `|`, `\\`, `[`, etc.)\n\n### When a conflict happens[​](#when-a-conflict-happens \"Direct link to When a conflict happens\")\n\nShould your plugin attempt to overwrite a reserved key, Jest will error out with a descriptive message, something like:\n\n```\nWatch plugin YourFaultyPlugin attempted to register key `q`, that is reserved internally for quitting watch mode. Please change the configuration key for this plugin.\n```\n\nThird-party plugins are also forbidden to overwrite a key reserved already by another third-party plugin present earlier in the configured plugins list (`watchPlugins` array setting). When this happens, you’ll also get an error message that tries to help you fix that:\n\n```\nWatch plugins YourFaultyPlugin and TheirFaultyPlugin both attempted to register key `x`. Please change the key configuration for one of the conflicting plugins to avoid overlap.\n```",
    "title": "Watch Plugins · Jest",
    "description": "The Jest watch plugin system provides a way to hook into specific parts of Jest and to define watch mode menu prompts that execute code on key press. Combined, these features allow you to develop interactive experiences custom for your workflow.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/architecture",
    "markdown": "# Architecture · Jest\n\nVersion: 29.7\n\nIf you are interested in learning more about how Jest works, understand its architecture, and how Jest is split up into individual reusable packages, check out this video:\n\nIf you'd like to learn how to build a testing framework like Jest from scratch, check out this video:\n\nThere is also a [written guide you can follow](https://cpojer.net/posts/building-a-javascript-testing-framework). It teaches the fundamental concepts of Jest and explains how various parts of Jest can be used to compose a custom testing framework.",
    "title": "Architecture · Jest",
    "description": "If you are interested in learning more about how Jest works, understand its architecture, and how Jest is split up into individual reusable packages, check out this video:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/troubleshooting",
    "markdown": "# Troubleshooting · Jest\n\nUh oh, something went wrong? Use this guide to resolve issues with Jest.\n\n## Tests are Failing and You Don't Know Why[​](#tests-are-failing-and-you-dont-know-why \"Direct link to Tests are Failing and You Don't Know Why\")\n\nTry using the [debugging support](https://nodejs.org/api/debugger.html) built into Node. Place a `debugger;` statement in any of your tests, and then, in your project's directory, run:\n\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]or on Windowsnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\nThis will run Jest in a Node process that an external debugger can connect to. Note that the process will pause until the debugger has connected to it.\n\nTo debug in Google Chrome (or any Chromium-based browser), open your browser and go to `chrome://inspect` and click on \"Open Dedicated DevTools for Node\", which will give you a list of available node instances you can connect to. Click on the address displayed in the terminal (usually something like `localhost:9229`) after running the above command, and you will be able to debug Jest using Chrome's DevTools.\n\nThe Chrome Developer Tools will be displayed, and a breakpoint will be set at the first line of the Jest CLI script (this is done to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a \"play\" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the `debugger` statement, execution will pause and you can examine the current scope and call stack.\n\nnote\n\nThe `--runInBand` cli option makes sure Jest runs the test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.\n\n## Debugging in VS Code[​](#debugging-in-vs-code \"Direct link to Debugging in VS Code\")\n\nThere are multiple ways to debug Jest tests with [Visual Studio Code's](https://code.visualstudio.com/) built-in [debugger](https://code.visualstudio.com/docs/nodejs/nodejs-debugging).\n\nTo attach the built-in debugger, run your tests as aforementioned:\n\n```\nnode --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]or on Windowsnode --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]\n```\n\nThen attach VS Code's debugger using the following `launch.json` config:\n\n```\n{  \"version\": \"0.2.0\",  \"configurations\": [    {      \"type\": \"node\",      \"request\": \"attach\",      \"name\": \"Attach\",      \"port\": 9229    }  ]}\n```\n\nTo automatically launch and attach to a process running your tests, use the following configuration:\n\n```\n{  \"version\": \"0.2.0\",  \"configurations\": [    {      \"name\": \"Debug Jest Tests\",      \"type\": \"node\",      \"request\": \"launch\",      \"runtimeArgs\": [        \"--inspect-brk\",        \"${workspaceRoot}/node_modules/.bin/jest\",        \"--runInBand\"      ],      \"console\": \"integratedTerminal\",      \"internalConsoleOptions\": \"neverOpen\"    }  ]}\n```\n\nor the following for Windows:\n\n```\n{  \"version\": \"0.2.0\",  \"configurations\": [    {      \"name\": \"Debug Jest Tests\",      \"type\": \"node\",      \"request\": \"launch\",      \"runtimeArgs\": [        \"--inspect-brk\",        \"${workspaceRoot}/node_modules/jest/bin/jest.js\",        \"--runInBand\"      ],      \"console\": \"integratedTerminal\",      \"internalConsoleOptions\": \"neverOpen\"    }  ]}\n```\n\nIf you are using Facebook's [`create-react-app`](https://github.com/facebookincubator/create-react-app), you can debug your Jest tests with the following configuration:\n\n```\n{  \"version\": \"0.2.0\",  \"configurations\": [    {      \"name\": \"Debug CRA Tests\",      \"type\": \"node\",      \"request\": \"launch\",      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",      \"args\": [        \"test\",        \"--runInBand\",        \"--no-cache\",        \"--env=jsdom\",        \"--watchAll=false\"      ],      \"cwd\": \"${workspaceRoot}\",      \"console\": \"integratedTerminal\",      \"internalConsoleOptions\": \"neverOpen\"    }  ]}\n```\n\nMore information on Node debugging can be found [here](https://nodejs.org/api/debugger.html).\n\n## Debugging in WebStorm[​](#debugging-in-webstorm \"Direct link to Debugging in WebStorm\")\n\n[WebStorm](https://www.jetbrains.com/webstorm/) has built-in support for Jest. Read [Testing With Jest in WebStorm](https://blog.jetbrains.com/webstorm/2018/10/testing-with-jest-in-webstorm/) to learn more.\n\n## Caching Issues[​](#caching-issues \"Direct link to Caching Issues\")\n\nThe transform script was changed or Babel was updated and the changes aren't being recognized by Jest?\n\nRetry with [`--no-cache`](https://jestjs.io/docs/cli#--cache). Jest caches transformed module files to speed up test execution. If you are using your own custom transformer, consider adding a `getCacheKey` function to it: [getCacheKey in Relay](https://github.com/facebook/relay/blob/58cf36c73769690f0bbf90562707eadb062b029d/scripts/jest/preprocessor.js#L56-L61).\n\n## Unresolved Promises[​](#unresolved-promises \"Direct link to Unresolved Promises\")\n\nIf a promise doesn't resolve at all, this error might be thrown:\n\n```\n- Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.`\n```\n\nMost commonly this is being caused by conflicting Promise implementations. Consider replacing the global promise implementation with your own, for example `globalThis.Promise = jest.requireActual('promise');` and/or consolidate the used Promise libraries to a single one.\n\nIf your test is long running, you may want to consider to increase the timeout by calling `jest.setTimeout`\n\n```\njest.setTimeout(10_000); // 10 second timeout\n```\n\n## Watchman Issues[​](#watchman-issues \"Direct link to Watchman Issues\")\n\nTry running Jest with [`--no-watchman`](https://jestjs.io/docs/cli#--watchman) or set the `watchman` configuration option to `false`.\n\nAlso see [watchman troubleshooting](https://facebook.github.io/watchman/docs/troubleshooting).\n\n## Tests are Extremely Slow on Docker and/or Continuous Integration (CI) server.[​](#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server \"Direct link to Tests are Extremely Slow on Docker and/or Continuous Integration (CI) server.\")\n\nWhile Jest is most of the time extremely fast on modern multi-core computers with fast SSDs, it may be slow on certain setups as our users [have](https://github.com/jestjs/jest/issues/1395) [discovered](https://github.com/jestjs/jest/issues/1524#issuecomment-260246008).\n\nBased on the [findings](https://github.com/jestjs/jest/issues/1524#issuecomment-262366820), one way to mitigate this issue and improve the speed by up to 50% is to run tests sequentially.\n\nIn order to do this you can run tests in the same thread using [`--runInBand`](https://jestjs.io/docs/cli#--runinband):\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\n# Using Jest CLIjest --runInBand# Using your package manager's `test` script (e.g. with create-react-app)npm test -- --runInBand\n```\n\nAnother alternative to expediting test execution time on Continuous Integration Servers such as Travis-CI is to set the max worker pool to ~_4_. Specifically on Travis-CI, this can reduce test execution time in half. Note: The Travis CI _free_ plan available for open source projects only includes 2 CPU cores.\n\n*   npm\n*   Yarn\n*   pnpm\n\n```\n# Using Jest CLIjest --maxWorkers=4# Using your package manager's `test` script (e.g. with create-react-app)npm test -- --maxWorkers=4\n```\n\nIf you use GitHub Actions, you can use [`github-actions-cpu-cores`](https://github.com/SimenB/github-actions-cpu-cores) to detect number of CPUs, and pass that to Jest.\n\n```\n- name: Get number of CPU cores  id: cpu-cores  uses: SimenB/github-actions-cpu-cores@v2- name: run tests  run: yarn jest --max-workers ${{ steps.cpu-cores.outputs.count }}\n```\n\nAnother thing you can do is use the [`shard`](https://jestjs.io/docs/cli#--shard) flag to parallelize the test run across multiple machines.\n\n## `coveragePathIgnorePatterns` seems to not have any effect.[​](#coveragepathignorepatterns-seems-to-not-have-any-effect \"Direct link to coveragepathignorepatterns-seems-to-not-have-any-effect\")\n\nMake sure you are not using the `babel-plugin-istanbul` plugin. Jest wraps Istanbul, and therefore also tells Istanbul what files to instrument with coverage collection. When using `babel-plugin-istanbul`, every file that is processed by Babel will have coverage collection code, hence it is not being ignored by `coveragePathIgnorePatterns`.\n\n## Defining Tests[​](#defining-tests \"Direct link to Defining Tests\")\n\nTests must be defined synchronously for Jest to be able to collect your tests.\n\nAs an example to show why this is the case, imagine we wrote a test like so:\n\n```\n// Don't do this it will not worksetTimeout(() => {  it('passes', () => expect(1).toBe(1));}, 0);\n```\n\nWhen Jest runs your test to collect the `test`s it will not find any because we have set the definition to happen asynchronously on the next tick of the event loop. This means when you are using `test.each` you cannot set the table asynchronously within a `beforeEach` / `beforeAll`.\n\n## Still unresolved?[​](#still-unresolved \"Direct link to Still unresolved?\")\n\nSee [Help](https://jestjs.io/help).",
    "title": "Troubleshooting · Jest",
    "description": "Uh oh, something went wrong? Use this guide to resolve issues with Jest.",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/environment-variables",
    "markdown": "# Environment Variables · Jest\n\nJest sets the following environment variables:\n\n### `NODE_ENV`[​](#node_env \"Direct link to node_env\")\n\nSet to `'test'` if it's not already set to something else.\n\n### `JEST_WORKER_ID`[​](#jest_worker_id \"Direct link to jest_worker_id\")\n\nEach worker process is assigned a unique id (index-based that starts with `1`). This is set to `1` for all tests when [`runInBand`](https://jestjs.io/docs/next/cli#--runinband) is set to true.",
    "title": "Environment Variables · Jest",
    "description": "Jest sets the following environment variables:",
    "languageCode": "en"
  },
  {
    "url": "https://jestjs.io/docs/next/code-transformation",
    "markdown": "# Code Transformation · Jest\n\nJest runs the code in your project as JavaScript, but if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates) then you'll need to transform that code into plain JavaScript, similar to what you would do when building for browsers.\n\nJest supports this via the [`transform`](https://jestjs.io/docs/next/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object) configuration option.\n\nA transformer is a module that provides a method for transforming source files. For example, if you wanted to be able to use a new language feature in your modules or tests that aren't yet supported by Node, you might plug in a code preprocessor that would transpile a future version of JavaScript to a current one.\n\nJest will cache the result of a transformation and attempt to invalidate that result based on a number of factors, such as the source of the file being transformed and changing configuration.\n\n## Defaults[​](#defaults \"Direct link to Defaults\")\n\nJest ships with one transformer out of the box – [`babel-jest`](https://github.com/jestjs/jest/tree/main/packages/babel-jest#setup). It will load your project's Babel configuration and transform any file matching the `/\\.[jt]sx?$/` RegExp (in other words, any `.js`, `.jsx`, `.ts` or `.tsx` file). In addition, `babel-jest` will inject the Babel plugin necessary for mock hoisting talked about in [ES Module mocking](https://jestjs.io/docs/next/manual-mocks#using-with-es-module-imports).\n\ntip\n\nRemember to include the default `babel-jest` transformer explicitly, if you wish to use it alongside with additional code preprocessors:\n\n```\n\"transform\": {  \"\\\\.[jt]sx?$\": \"babel-jest\",  \"\\\\.css$\": \"some-css-transformer\",}\n```\n\n## Writing custom transformers[​](#writing-custom-transformers \"Direct link to Writing custom transformers\")\n\nYou can write your own transformer. The API of a transformer is as follows:\n\n```\ninterface TransformOptions<TransformerConfig = unknown> {  supportsDynamicImport: boolean;  supportsExportNamespaceFrom: boolean;  /**   * The value is:   * - `false` if Jest runs without Node ESM flag `--experimental-vm-modules`   * - `true` if the file extension is defined in [extensionsToTreatAsEsm](Configuration.md#extensionstotreatasesm-arraystring)   * and Jest runs with Node ESM flag `--experimental-vm-modules`   *   * See more at https://jestjs.io/docs/next/ecmascript-modules   */  supportsStaticESM: boolean;  supportsTopLevelAwait: boolean;  instrument: boolean;  /** Cached file system which is used by `jest-runtime` to improve performance. */  cacheFS: Map<string, string>;  /** Jest configuration of currently running project. */  config: ProjectConfig;  /** Stringified version of the `config` - useful in cache busting. */  configString: string;  /** Transformer configuration passed through `transform` option by the user. */  transformerConfig: TransformerConfig;}type TransformedSource = {  code: string;  map?: RawSourceMap | string | null;};interface SyncTransformer<TransformerConfig = unknown> {  canInstrument?: boolean;  getCacheKey?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => string;  getCacheKeyAsync?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => Promise<string>;  process: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => TransformedSource;  processAsync?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => Promise<TransformedSource>;}interface AsyncTransformer<TransformerConfig = unknown> {  canInstrument?: boolean;  getCacheKey?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => string;  getCacheKeyAsync?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => Promise<string>;  process?: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => TransformedSource;  processAsync: (    sourceText: string,    sourcePath: string,    options: TransformOptions<TransformerConfig>,  ) => Promise<TransformedSource>;}type Transformer<TransformerConfig = unknown> =  | SyncTransformer<TransformerConfig>  | AsyncTransformer<TransformerConfig>;type TransformerCreator<  X extends Transformer<TransformerConfig>,  TransformerConfig = unknown,> = (transformerConfig?: TransformerConfig) => X;type TransformerFactory<X extends Transformer> = {  createTransformer: TransformerCreator<X>;};\n```\n\nnote\n\nThe definitions above were trimmed down for brevity. Full code can be found in [Jest repo on GitHub](https://github.com/jestjs/jest/blob/main/packages/jest-transform/src/types.ts) (remember to choose the right tag/commit for your version of Jest).\n\nThere are a couple of ways you can import code into Jest - using Common JS (`require`) or ECMAScript Modules (`import` - which exists in static and dynamic versions). Jest passes files through code transformation on demand (for instance when a `require` or `import` is evaluated). This process, also known as \"transpilation\", might happen _synchronously_ (in the case of `require`), or _asynchronously_ (in the case of `import` or `import()`, the latter of which also works from Common JS modules). For this reason, the interface exposes both pairs of methods for asynchronous and synchronous processes: `process{Async}` and `getCacheKey{Async}`. The latter is called to figure out if we need to call `process{Async}` at all.\n\nAsynchronous transpilation can fall back to the synchronous `process` call if `processAsync` is unimplemented, but synchronous transpilation cannot use the asynchronous `processAsync` call. If your codebase is ESM only, implementing the async variants are sufficient. Otherwise, if any code is loaded through `require` (including `createRequire` from within ESM), then you need to implement the synchronous `process` variant.\n\nBe aware that `node_modules` is not transpiled with default config, the `transformIgnorePatterns` setting must be modified in order to do so.\n\nSemi-related to this are the supports flags we pass (see `CallerTransformOptions` above), but those should be used within the transform to figure out if it should return ESM or CJS, and has no direct bearing on sync vs async\n\nThough not required, we _highly recommend_ implementing `getCacheKey` as well, so we do not waste resources transpiling when we could have read its previous result from disk. You can use [`@jest/create-cache-key-function`](https://www.npmjs.com/package/@jest/create-cache-key-function) to help implement it.\n\nInstead of having your custom transformer implement the `Transformer` interface directly, you can choose to export `createTransformer`, a factory function to dynamically create transformers. This is to allow having a transformer config in your jest config.\n\nnote\n\n[ECMAScript module](https://jestjs.io/docs/next/ecmascript-modules) support is indicated by the passed in `supports*` options. Specifically `supportsDynamicImport: true` means the transformer can return `import()` expressions, which is supported by both ESM and CJS. If `supportsStaticESM: true` it means top level `import` statements are supported and the code will be interpreted as ESM and not CJS. See [Node's docs](https://nodejs.org/api/esm.html#esm_differences_between_es_modules_and_commonjs) for details on the differences.\n\ntip\n\nMake sure `process{Async}` method returns source map alongside with transformed code, so it is possible to report line information accurately in code coverage and test errors. Inline source maps also work but are slower.\n\nDuring the development of a transformer it can be useful to run Jest with `--no-cache` to frequently [delete cache](https://jestjs.io/docs/next/troubleshooting#caching-issues).\n\n### Examples[​](#examples \"Direct link to Examples\")\n\n### TypeScript with type checking[​](#typescript-with-type-checking \"Direct link to TypeScript with type checking\")\n\nWhile `babel-jest` by default will transpile TypeScript files, Babel will not verify the types. If you want that you can use [`ts-jest`](https://github.com/kulshekhar/ts-jest).\n\n#### Transforming images to their path[​](#transforming-images-to-their-path \"Direct link to Transforming images to their path\")\n\nImporting images is a way to include them in your browser bundle, but they are not valid JavaScript. One way of handling it in Jest is to replace the imported value with its filename.\n\nfileTransformer.js\n\n```\nconst path = require('path');module.exports = {  process(sourceText, sourcePath, options) {    return {      code: `module.exports = ${JSON.stringify(path.basename(sourcePath))};`,    };  },};\n```\n\njest.config.js\n\n```\nmodule.exports = {  transform: {    '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':      '<rootDir>/fileTransformer.js',  },};\n```",
    "title": "Code Transformation · Jest",
    "description": "Jest runs the code in your project as JavaScript, but if you use some syntax not supported by Node out of the box (such as JSX, TypeScript, Vue templates) then you'll need to transform that code into plain JavaScript, similar to what you would do when building for browsers.",
    "languageCode": "en"
  }
]