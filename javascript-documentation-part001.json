[
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "markdown": "# Generator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Generator`** object is returned by a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and it conforms to both the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) and the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol).\n\n`Generator` is a subclass of the hidden [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) class.\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\nThere's no JavaScript entity that corresponds to the `Generator` constructor. Instances of `Generator` must be returned from [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*):\n\n```\nfunction* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst gen = generator(); // \"Generator { }\"\n\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n```\n\nThere's only a hidden object which is the prototype object shared by all objects created by generator functions. This object is often stylized as `Generator.prototype` to make it look like a class, but it should be more appropriately called [`GeneratorFunction.prototype.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype), because `GeneratorFunction` is an actual JavaScript entity. To understand the prototype chain of `Generator` instances, see [`GeneratorFunction.prototype.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype).\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Generator.prototype` and shared by all `Generator` instances.\n\n[`Generator.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Generator` instances, the initial value is [`GeneratorFunction.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction).\n\n**Note:** `Generator` objects do not store a reference to the generator function that created them.\n\n[`Generator.prototype[@@toStringTag]`](#generator.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Generator\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n_Also inherits instance methods from its parent [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_.\n\n[`Generator.prototype.next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next)\n\nReturns a value yielded by the [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) expression.\n\n[`Generator.prototype.return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return)\n\nActs as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n[`Generator.prototype.throw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw)\n\nActs as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## [Examples](#examples)\n\n### [An infinite iterator](#an_infinite_iterator)\n\nWith a generator function, values are not evaluated until they are needed. Therefore a generator allows us to define a potentially infinite data structure.\n\n```\nfunction* infinite() {\n  let index = 0;\n\n  while (true) {\n    yield index++;\n  }\n}\n\nconst generator = infinite(); // \"Generator { }\"\n\nconsole.log(generator.next().value); // 0\nconsole.log(generator.next().value); // 1\nconsole.log(generator.next().value); // 2\n// …\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generator-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Generator - JavaScript | MDN",
    "description": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness",
    "markdown": "# Equality comparisons and sameness - JavaScript\n\nJavaScript provides three different value-comparison operations:\n\n*   [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) — strict equality (triple equals)\n*   [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) — loose equality (double equals)\n*   [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\n*   Double equals (`==`) will perform a type conversion when comparing two things, and will handle `NaN`, `-0`, and `+0` specially to conform to IEEE 754 (so `NaN != NaN`, and `-0 == +0`);\n*   Triple equals (`===`) will do the same comparison as double equals (including the special handling for `NaN`, `-0`, and `+0`) but without type conversion; if the types differ, `false` is returned.\n*   `Object.is()` does no type conversion and no special handling for `NaN`, `-0`, and `+0` (giving it the same behavior as `===` except on those special numeric values).\n\nThey correspond to three of four equality algorithms in JavaScript:\n\n*   [IsLooselyEqual](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-islooselyequal): `==`\n*   [IsStrictlyEqual](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isstrictlyequal): `===`\n*   [SameValue](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevalue): `Object.is()`\n*   [SameValueZero](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluezero): used by many built-in operations\n\nNote that the distinction between these all have to do with their handling of primitives; none of them compares whether the parameters are conceptually similar in structure. For any non-primitive objects `x` and `y` which have the same structure but are distinct objects themselves, all of the above forms will evaluate to `false`.\n\n## [Strict equality using ===](#strict_equality_using)\n\nStrict equality compares two values for equality. Neither value is implicitly converted to some other value before being compared. If the values have different types, the values are considered unequal. If the values have the same type, are not numbers, and have the same value, they're considered equal. Finally, if both values are numbers, they're considered equal if they're both not `NaN` and are the same value, or if one is `+0` and one is `-0`.\n\n```\nconst num = 0;\nconst obj = new String(\"0\");\nconst str = \"0\";\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n```\n\nStrict equality is almost always the correct comparison operation to use. For all values except numbers, it uses the obvious semantics: a value is only equal to itself. For numbers it uses slightly different semantics to gloss over two different edge cases. The first is that floating point zero is either positively or negatively signed. This is useful in representing certain mathematical solutions, but as most situations don't care about the difference between `+0` and `-0`, strict equality treats them as the same value. The second is that floating point includes the concept of a not-a-number value, `NaN`, to represent the solution to certain ill-defined mathematical problems: negative infinity added to positive infinity, for example. Strict equality treats `NaN` as unequal to every other value — including itself. (The only case in which `(x !== x)` is `true` is when `x` is `NaN`.)\n\nBesides `===`, strict equality is also used by array index-finding methods including [`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf), [`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf), [`TypedArray.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf), [`TypedArray.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf), and [`case`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\\-matching. This means you cannot use `indexOf(NaN)` to find the index of a `NaN` value in an array, or use `NaN` as a `case` value in a `switch` statement and make it match anything.\n\n```\nconsole.log([NaN].indexOf(NaN)); // -1\nswitch (NaN) {\n  case NaN:\n    console.log(\"Surprise\"); // Nothing is logged\n}\n```\n\n## [Loose equality using ==](#loose_equality_using)\n\nLoose equality is _symmetric_: `A == B` always has identical semantics to `B == A` for any values of `A` and `B` (except for the order of applied conversions). The behavior for performing loose equality using `==` is as follows:\n\n1.  If the operands have the same type, they are compared as follows:\n    *   Object: return `true` only if both operands reference the same object.\n    *   String: return `true` only if both operands have the same characters in the same order.\n    *   Number: return `true` only if both operands have the same value. `+0` and `-0` are treated as the same value. If either operand is `NaN`, return `false`; so `NaN` is never equal to `NaN`.\n    *   Boolean: return `true` only if operands are both `true` or both `false`.\n    *   BigInt: return `true` only if both operands have the same value.\n    *   Symbol: return `true` only if both operands reference the same symbol.\n2.  If one of the operands is `null` or `undefined`, the other must also be `null` or `undefined` to return `true`. Otherwise return `false`.\n3.  If one of the operands is an object and the other is a primitive, [convert the object to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion).\n4.  At this step, both operands are converted to primitives (one of String, Number, Boolean, Symbol, and BigInt). The rest of the conversion is done case-by-case.\n    *   If they are of the same type, compare them using step 1.\n    *   If one of the operands is a Symbol but the other is not, return `false`.\n    *   If one of the operands is a Boolean but the other is not, [convert the boolean to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion): `true` is converted to 1, and `false` is converted to 0. Then compare the two operands loosely again.\n    *   Number to String: [convert the string to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Conversion failure results in `NaN`, which will guarantee the equality to be `false`.\n    *   Number to BigInt: compare by their numeric value. If the number is ±Infinity or `NaN`, return `false`.\n    *   String to BigInt: convert the string to a BigInt using the same algorithm as the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor. If conversion fails, return `false`.\n\nTraditionally, and according to ECMAScript, all primitives and objects are loosely unequal to `undefined` and `null`. But most browsers permit a very narrow class of objects (specifically, the `document.all` object for any page), in some contexts, to act as if they _emulate_ the value `undefined`. Loose equality is one such context: `null == A` and `undefined == A` evaluate to true if, and only if, A is an object that _emulates_ `undefined`. In all other cases an object is never loosely equal to `undefined` or `null`.\n\nIn most cases, using loose equality is discouraged. The result of a comparison using strict equality is easier to predict, and may evaluate more quickly due to the lack of type coercion.\n\nThe following example demonstrates loose equality comparisons involving the number primitive `0`, the bigint primitive `0n`, the string primitive `'0'`, and an object whose `toString()` value is `'0'`.\n\n```\nconst num = 0;\nconst big = 0n;\nconst str = \"0\";\nconst obj = new String(\"0\");\n\nconsole.log(num == str); // true\nconsole.log(big == num); // true\nconsole.log(str == big); // true\n\nconsole.log(num == obj); // true\nconsole.log(big == obj); // true\nconsole.log(str == obj); // true\n```\n\nLoose equality is only used by the `==` operator.\n\n## [Same-value equality using Object.is()](#same-value_equality_using_object.is)\n\nSame-value equality determines whether two values are _functionally identical_ in all contexts. (This use case demonstrates an instance of the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle).) One instance occurs when an attempt is made to mutate an immutable property:\n\n```\n// Add an immutable NEGATIVE_ZERO property to the Number constructor.\nObject.defineProperty(Number, \"NEGATIVE_ZERO\", {\n  value: -0,\n  writable: false,\n  configurable: false,\n  enumerable: false,\n});\n\nfunction attemptMutation(v) {\n  Object.defineProperty(Number, \"NEGATIVE_ZERO\", { value: v });\n}\n```\n\n`Object.defineProperty` will throw an exception when attempting to change an immutable property, but it does nothing if no actual change is requested. If `v` is `-0`, no change has been requested, and no error will be thrown. Internally, when an immutable property is redefined, the newly-specified value is compared against the current value using same-value equality.\n\nSame-value equality is provided by the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) method. It's used almost everywhere in the language where a value of equivalent identity is expected.\n\n## [Same-value-zero equality](#same-value-zero_equality)\n\nSimilar to same-value equality, but +0 and -0 are considered equal.\n\nSame-value-zero equality is not exposed as a JavaScript API, but can be implemented with custom code:\n\n```\nfunction sameValueZero(x, y) {\n  if (typeof x === \"number\" && typeof y === \"number\") {\n    // x and y are equal (may be -0 and 0) or they are both NaN\n    return x === y || (x !== x && y !== y);\n  }\n  return x === y;\n}\n```\n\nSame-value-zero only differs from strict equality by treating `NaN` as equivalent, and only differs from same-value equality by treating `-0` as equivalent to `0`. This makes it usually have the most sensible behavior during searching, especially when working with `NaN`. It's used by [`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes), [`TypedArray.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes), as well as [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) methods for comparing key equality.\n\n## [Comparing equality methods](#comparing_equality_methods)\n\nPeople often compare double equals and triple equals by saying one is an \"enhanced\" version of the other. For example, double equals could be said as an extended version of triple equals, because the former does everything that the latter does, but with type conversion on its operands — for example, `6 == \"6\"`. Alternatively, it can be claimed that double equals is the baseline, and triple equals is an enhanced version, because it requires the two operands to be the same type, so it adds an extra constraint.\n\nHowever, this way of thinking implies that the equality comparisons form a one-dimensional \"spectrum\" where \"totally strict\" lies on one end and \"totally loose\" lies on the other. This model falls short with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is), because it isn't \"looser\" than double equals or \"stricter\" than triple equals, nor does it fit somewhere in between (i.e., being both stricter than double equals, but looser than triple equals). We can see from the sameness comparisons table below that this is due to the way that [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) handles [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). Notice that if `Object.is(NaN, NaN)` evaluated to `false`, we _could_ say that it fits on the loose/strict spectrum as an even stricter form of triple equals, one that distinguishes between `-0` and `+0`. The [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) handling means this is untrue, however. Unfortunately, [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) has to be thought of in terms of its specific characteristics, rather than its looseness or strictness with regard to the equality operators.\n\n| x   | y   | `==` | `===` | `Object.is` | `SameValueZero` |\n| --- | --- | --- | --- | --- | --- |\n| `undefined` | `undefined` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `null` | `null` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `true` | `true` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `false` | `false` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `'foo'` | `'foo'` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `0` | `0` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `+0` | `-0` | `✅ true` | `✅ true` | `❌ false` | `✅ true` |\n| `+0` | `0` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `-0` | `0` | `✅ true` | `✅ true` | `❌ false` | `✅ true` |\n| `0n` | `-0n` | `✅ true` | `✅ true` | `✅ true` | `✅ true` |\n| `0` | `false` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `\"\"` | `false` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `\"\"` | `0` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `'0'` | `0` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `'17'` | `17` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `[1, 2]` | `'1,2'` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `new String('foo')` | `'foo'` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `null` | `undefined` | `✅ true` | `❌ false` | `❌ false` | `❌ false` |\n| `null` | `false` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `undefined` | `false` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `{ foo: 'bar' }` | `{ foo: 'bar' }` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `new String('foo')` | `new String('foo')` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `0` | `null` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `0` | `NaN` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `'foo'` | `NaN` | `❌ false` | `❌ false` | `❌ false` | `❌ false` |\n| `NaN` | `NaN` | `❌ false` | `❌ false` | `✅ true` | `✅ true` |\n\n### [When to use Object.is() versus triple equals](#when_to_use_object.is_versus_triple_equals)\n\nIn general, the only time [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)'s special behavior towards zeros is likely to be of interest is in the pursuit of certain meta-programming schemes, especially regarding property descriptors, when it is desirable for your work to mirror some of the characteristics of [`Object.defineProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). If your use case does not require this, it is suggested to avoid [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) and use [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) instead. Even if your requirements involve having comparisons between two [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values evaluate to `true`, generally it is easier to special-case the [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) checks (using the [`isNaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) method available from previous versions of ECMAScript) than it is to work out how surrounding computations might affect the sign of any zeros you encounter in your comparison.\n\nHere's a non-exhaustive list of built-in methods and operators that might cause a distinction between `-0` and `+0` to manifest itself in your code:\n\n[`-` (unary negation)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)\n\nConsider the following example:\n\n```\nconst stoppingForce = obj.mass * -obj.velocity;\n```\n\nIf `obj.velocity` is `0` (or computes to `0`), a `-0` is introduced at that place and propagates out into `stoppingForce`.\n\n[`Math.atan2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2), [`Math.ceil`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil), [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow), [`Math.round`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n\nIn some cases, it's possible for a `-0` to be introduced into an expression as a return value of these methods even when no `-0` exists as one of the parameters. For example, using [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow) to raise [`-Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) to the power of any negative, odd exponent evaluates to `-0`. Refer to the documentation for the individual methods.\n\n[`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor), [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max), [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min), [`Math.sin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin), [`Math.sqrt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt), [`Math.tan`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan)\n\nIt's possible to get a `-0` return value out of these methods in some cases where a `-0` exists as one of the parameters. E.g., `Math.min(-0, +0)` evaluates to `-0`. Refer to the documentation for the individual methods.\n\n[`~`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT), [`<<`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift), [`>>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)\n\nEach of these operators uses the ToInt32 algorithm internally. Since there is only one representation for 0 in the internal 32-bit integer type, `-0` will not survive a round trip after an inverse operation. E.g., both `Object.is(~~(-0), -0)` and `Object.is(-0 << 2 >> 2, -0)` evaluate to `false`.\n\nRelying on [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) when the signedness of zeros is not taken into account can be hazardous. Of course, when the intent is to distinguish between `-0` and `+0`, it does exactly what's desired.\n\n### [Caveat: Object.is() and NaN](#caveat_object.is_and_nan)\n\nThe [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) specification treats all instances of [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) as the same object. However, since [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays) are available, we can have distinct floating point representations of `NaN` which don't behave identically in all contexts. For example:\n\n```\nconst f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);\nconst b2f = (x) => new Float64Array(x.buffer)[0];\n// Get a byte representation of NaN\nconst n = f2b(NaN);\n// Change the first bit, which is the sign bit and doesn't matter for NaN\nn[0] = 1;\nconst nan2 = b2f(n);\nconsole.log(nan2); // NaN\nconsole.log(Object.is(nan2, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan2)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]\n```\n\n## [See also](#see_also)",
    "title": "Equality comparisons and sameness - JavaScript | MDN",
    "description": "JavaScript provides three different value-comparison operations:",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation",
    "markdown": "# Exponentiation (\\*\\*) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **exponentiation (`**`)** operator returns the result of raising the first operand to the power of the second operand. It is equivalent to [`Math.pow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow), except it also accepts [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) as operands.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `**` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt exponentiation if both operands become BigInts; otherwise, it performs number exponentiation. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nFor both numbers and BigInts, `0` raised to a positive power returns `0`, and `0` raised to a power of `0` returns `1`. For numbers, `0` raised to a negative number returns `Infinity`, while `-0` raised to a negative number returns `-Infinity`.\n\n`NaN ** 0` (and the equivalent `Math.pow(NaN, 0)`) is the only case where [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) doesn't propagate through mathematical operations — it returns `1` despite the operand being `NaN`. In addition, the behavior where `base` is 1 and `exponent` is non-finite (±Infinity or `NaN`) is different from IEEE 754, which specifies that the result should be 1, whereas JavaScript returns `NaN` to preserve backward compatibility with its original behavior.\n\nFor BigInt exponentiation, a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown if the exponent `y` is negative. This is because any negative exponent would likely result in a value between 0 and 1 (unless the base is `1`, `-1`, or `0`), which is rounded to zero, and is likely a developer mistake.\n\nThe exponentiation operator is [right-associative](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence): `a ** b ** c` is equal to `a ** (b ** c)`.\n\nIn most languages, such as PHP, Python, and others that have an exponentiation operator (`**`), the exponentiation operator is defined to have a higher precedence than unary operators, such as unary `+` and unary `-`, but there are a few exceptions. For example, in Bash, the `**` operator is defined to have a lower precedence than unary operators.\n\nIn JavaScript, it is impossible to write an ambiguous exponentiation expression. That is, you cannot put a unary operator (with [precedence 14](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table), including `+`/`-`/`~`/`!`/`++`/`--`/`delete`/`void`/`typeof`/`await`) immediately before the base number; [doing so will cause a SyntaxError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation).\n\nFor example, `-2 ** 2` is 4 in Bash, but is -4 in other languages (such as Python). This is invalid in JavaScript, as the operation is ambiguous. You have to parenthesize either side — for example, as `-(2 ** 2)` — to make the intention unambiguous.\n\nNote that some programming languages use the caret symbol `^` for exponentiation, but JavaScript uses that symbol for the [bitwise XOR operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR).\n\n## [Examples](#examples)\n\n### [Exponentiation using numbers](#exponentiation_using_numbers)\n\n```\n2 ** 3; // 8\n3 ** 2; // 9\n3 ** 2.5; // 15.588457268119896\n10 ** -1; // 0.1\n2 ** 1024; // Infinity\nNaN ** 2; // NaN\nNaN ** 0; // 1\n1 ** Infinity; // NaN\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\n2 ** \"3\"; // 8\n2 ** \"hello\"; // NaN\n```\n\n### [Exponentiation using BigInts](#exponentiation_using_bigints)\n\n```\n2n ** 3n; // 8n\n2n ** 1024n; // A very large number, but not Infinity\n```\n\nYou cannot mix BigInt and number operands in exponentiation.\n\n```\n2n ** 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n2 ** 2n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nTo do exponentiation with a BigInt and a non-BigInt, convert either operand:\n\n```\n2n ** BigInt(2); // 4n\nNumber(2n) ** 2; // 4\n```\n\n### [Associativity](#associativity)\n\n```\n2 ** 3 ** 2; // 512\n2 ** (3 ** 2); // 512\n(2 ** 3) ** 2; // 64\n```\n\n### [Usage with unary operators](#usage_with_unary_operators)\n\nTo invert the sign of the result of an exponentiation expression:\n\nTo force the base of an exponentiation expression to be a negative number:\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-exp-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-exp-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Exponentiation (**) - JavaScript | MDN",
    "description": "The exponentiation (**) operator returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow(), except it also accepts BigInts as operands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "markdown": "# String - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`String`** object is used to represent and manipulate a sequence of characters.\n\n## [Description](#description)\n\nStrings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), to build and concatenate them using the [`+` and `+=` string operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#string_operators), checking for the existence or location of substrings with the [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) method, or extracting substrings with the [`substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) method.\n\n### [Creating strings](#creating_strings)\n\nStrings can be created as primitives, from string literals, or as objects, using the [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) constructor:\n\n```\nconst string1 = \"A string primitive\";\nconst string2 = 'Also a string primitive';\nconst string3 = `Yet another string primitive`;\n```\n\n```\nconst string4 = new String(\"A String object\");\n```\n\nString primitives and string objects share many behaviors, but have other important differences and caveats. See \"[String primitives and String objects](#string_primitives_and_string_objects)\" below.\n\nString literals can be specified using single or double quotes, which are treated identically, or using the backtick character \\`. This last form specifies a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals): with this form you can interpolate expressions. For more information on the syntax of string literals, see [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals).\n\n### [Character access](#character_access)\n\nThere are two ways to access an individual character in a string. The first is the [`charAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt) method:\n\n```\n\"cat\".charAt(1); // gives value \"a\"\n```\n\nThe other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\n```\n\"cat\"[1]; // gives value \"a\"\n```\n\nWhen using bracket notation for character access, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) for more information.)\n\n### [Comparing strings](#comparing_strings)\n\nUse the [less-than and greater-than operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators) to compare strings:\n\n```\nconst a = \"a\";\nconst b = \"b\";\nif (a < b) {\n  // true\n  console.log(`${a} is less than ${b}`);\n} else if (a > b) {\n  console.log(`${a} is greater than ${b}`);\n} else {\n  console.log(`${a} and ${b} are equal.`);\n}\n```\n\nNote that all comparison operators, including [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) and [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality), compare strings case-sensitively. A common way to compare strings case-insensitively is to convert both to the same case (upper or lower) before comparing them.\n\n```\nfunction areEqualCaseInsensitive(str1, str2) {\n  return str1.toUpperCase() === str2.toUpperCase();\n}\n```\n\nThe choice of whether to transform by [`toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) or [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) is mostly arbitrary, and neither one is fully robust when extending beyond the Latin alphabet. For example, the German lowercase letter `ß` and `ss` are both transformed to `SS` by `toUpperCase()`, while the Turkish letter `ı` would be falsely reported as unequal to `I` by `toLowerCase()` unless specifically using [`toLocaleLowerCase(\"tr\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase).\n\n```\nconst areEqualInUpperCase = (str1, str2) =>\n  str1.toUpperCase() === str2.toUpperCase();\nconst areEqualInLowerCase = (str1, str2) =>\n  str1.toLowerCase() === str2.toLowerCase();\n\nareEqualInUpperCase(\"ß\", \"ss\"); // true; should be false\nareEqualInLowerCase(\"ı\", \"I\"); // false; should be true\n```\n\nA locale-aware and robust solution for testing case-insensitive equality is to use the [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) API or the string's [`localeCompare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) method — they share the same interface — with the [`sensitivity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#sensitivity) option set to `\"accent\"` or `\"base\"`.\n\n```\nconst areEqual = (str1, str2, locale = \"en-US\") =>\n  str1.localeCompare(str2, locale, { sensitivity: \"accent\" }) === 0;\n\nareEqual(\"ß\", \"ss\", \"de\"); // false\nareEqual(\"ı\", \"I\", \"tr\"); // true\n```\n\nThe `localeCompare()` method enables string comparison in a similar fashion as `strcmp()` — it allows sorting strings in a locale-aware manner.\n\n### [String primitives and String objects](#string_primitives_and_string_objects)\n\nNote that JavaScript distinguishes between `String` objects and [primitive string](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) values. (The same is true of [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) and [`Numbers`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).)\n\nString literals (denoted by double or single quotes) and strings returned from `String` calls in a non-constructor context (that is, called without using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) keyword) are primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup on the wrapper object instead.\n\n```\nconst strPrim = \"foo\"; // A literal is a string primitive\nconst strPrim2 = String(1); // Coerced into the string primitive \"1\"\nconst strPrim3 = String(true); // Coerced into the string primitive \"true\"\nconst strObj = new String(strPrim); // String with new returns a string wrapper object.\n\nconsole.log(typeof strPrim); // \"string\"\nconsole.log(typeof strPrim2); // \"string\"\nconsole.log(typeof strPrim3); // \"string\"\nconsole.log(typeof strObj); // \"object\"\n```\n\n**Warning:** You should rarely find yourself using `String` as a constructor.\n\nString primitives and `String` objects also give different results when using [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval). Primitives passed to `eval` are treated as source code; `String` objects are treated as all other objects are, by returning the object. For example:\n\n```\nconst s1 = \"2 + 2\"; // creates a string primitive\nconst s2 = new String(\"2 + 2\"); // creates a String object\nconsole.log(eval(s1)); // returns the number 4\nconsole.log(eval(s2)); // returns the string \"2 + 2\"\n```\n\nFor these reasons, the code may break when it encounters `String` objects when it expects a primitive string instead, although generally, authors need not worry about the distinction.\n\nA `String` object can always be converted to its primitive counterpart with the [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf) method.\n\n```\nconsole.log(eval(s2.valueOf())); // returns the number 4\n```\n\n### [String coercion](#string_coercion)\n\nMany built-in operations that expect strings first coerce their arguments to strings (which is largely why `String` objects behave similarly to string primitives). [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tostring) can be summarized as follows:\n\n*   Strings are returned as-is.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into `\"undefined\"`.\n*   [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `\"null\"`.\n*   `true` turns into `\"true\"`; `false` turns into `\"false\"`.\n*   Numbers are converted with the same algorithm as [`toString(10)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString).\n*   [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) are converted with the same algorithm as [`toString(10)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString).\n*   [Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   Objects are first [converted to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling its [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"string\"` as hint), `toString()`, and `valueOf()` methods, in that order. The resulting primitive is then converted to a string.\n\nThere are several ways to achieve nearly the same effect in JavaScript.\n\n*   [Template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals): `` `${x}` `` does exactly the string coercion steps explained above for the embedded expression.\n*   The [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) function: `String(x)` uses the same algorithm to convert `x`, except that [Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) don't throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), but return `\"Symbol(description)\"`, where `description` is the [description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description) of the Symbol.\n*   Using the [`+` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition): `\"\" + x` coerces its operand to a _primitive_ instead of a _string_, and, for some objects, has entirely different behaviors from normal string coercion. See its [reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) for more details.\n\nDepending on your use case, you may want to use `` `${x}` `` (to mimic built-in behavior) or `String(x)` (to handle symbol values without throwing an error), but you should not use `\"\" + x`.\n\n### [UTF-16 characters, Unicode code points, and grapheme clusters](#utf-16_characters_unicode_code_points_and_grapheme_clusters)\n\nStrings are represented fundamentally as sequences of [UTF-16 code units](https://en.wikipedia.org/wiki/UTF-16). In UTF-16 encoding, every code unit is exact 16 bits long. This means there are a maximum of 216, or 65536 possible characters representable as single UTF-16 code units. This character set is called the [basic multilingual plane (BMP)](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane), and includes the most common characters like the Latin, Greek, Cyrillic alphabets, as well as many East Asian characters. Each code unit can be written in a string with `\\u` followed by exactly four hex digits.\n\nHowever, the entire Unicode character set is much, much bigger than 65536. The extra characters are stored in UTF-16 as _surrogate pairs_, which are pairs of 16-bit code units that represent a single character. To avoid ambiguity, the two parts of the pair must be between `0xD800` and `0xDFFF`, and these code units are not used to encode single-code-unit characters. (More precisely, leading surrogates, also called high-surrogate code units, have values between `0xD800` and `0xDBFF`, inclusive, while trailing surrogates, also called low-surrogate code units, have values between `0xDC00` and `0xDFFF`, inclusive.) Each Unicode character, comprised of one or two UTF-16 code units, is also called a _Unicode code point_. Each Unicode code point can be written in a string with `\\u{xxxxxx}` where `xxxxxx` represents 1–6 hex digits.\n\nA \"lone surrogate\" is a 16-bit code unit satisfying one of the descriptions below:\n\n*   It is in the range `0xD800`–`0xDBFF`, inclusive (i.e. is a leading surrogate), but it is the last code unit in the string, or the next code unit is not a trailing surrogate.\n*   It is in the range `0xDC00`–`0xDFFF`, inclusive (i.e. is a trailing surrogate), but it is the first code unit in the string, or the previous code unit is not a leading surrogate.\n\nLone surrogates do not represent any Unicode character. Although most JavaScript built-in methods handle them correctly because they all work based on UTF-16 code units, lone surrogates are often not valid values when interacting with other systems — for example, [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) will throw a [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) for lone surrogates, because URI encoding uses UTF-8 encoding, which does not have any encoding for lone surrogates. Strings not containing any lone surrogates are called _well-formed_ strings, and are safe to be used with functions that do not deal with UTF-16 (such as `encodeURI()` or [`TextEncoder`](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder)). You can check if a string is well-formed with the [`isWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed) method, or sanitize lone surrogates with the [`toWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed) method.\n\nOn top of Unicode characters, there are certain sequences of Unicode characters that should be treated as one visual unit, known as a _grapheme cluster_. The most common case is emojis: many emojis that have a range of variations are actually formed by multiple emojis, usually joined by the <ZWJ> (`U+200D`) character.\n\nYou must be careful which level of characters you are iterating on. For example, [`split(\"\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) will split by UTF-16 code units and will separate surrogate pairs. String indexes also refer to the index of each UTF-16 code unit. On the other hand, [`@@iterator()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) iterates by Unicode code points. Iterating through grapheme clusters will require some custom code.\n\n```\n\"😄\".split(\"\"); // ['\\ud83d', '\\ude04']; splits into two lone surrogates\n\n// \"Backhand Index Pointing Right: Dark Skin Tone\"\n[...\"👉🏿\"]; // ['👉', '🏿']\n// splits into the basic \"Backhand Index Pointing Right\" emoji and\n// the \"Dark skin tone\" emoji\n\n// \"Family: Man, Boy\"\n[...\"👨‍👦\"]; // [ '👨', '‍', '👦' ]\n// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ\n\n// The United Nations flag\n[...\"🇺🇳\"]; // [ '🇺', '🇳' ]\n// splits into two \"region indicator\" letters \"U\" and \"N\".\n// All flag emojis are formed by joining two region indicator letters\n```\n\n## [Constructor](#constructor)\n\n[`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String)\n\nCreates `String` objects. When called as a function, it returns primitive values of type String.\n\n## [Static methods](#static_methods)\n\n[`String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\n\nReturns a string created by using the specified sequence of Unicode values.\n\n[`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n\nReturns a string created by using the specified sequence of code points.\n\n[`String.raw()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw)\n\nReturns a string created from a raw template string.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `String.prototype` and shared by all `String` instances.\n\n[`String.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `String` instances, the initial value is the [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) constructor.\n\nThese properties are own properties of each `String` instance.\n\n[`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n\nReflects the `length` of the string. Read-only.\n\n## [Instance methods](#instance_methods)\n\n[`String.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at)\n\nReturns the character (exactly one UTF-16 code unit) at the specified `index`. Accepts negative integers, which count back from the last string character.\n\n[`String.prototype.charAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\n\nReturns the character (exactly one UTF-16 code unit) at the specified `index`.\n\n[`String.prototype.charCodeAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n\nReturns a number that is the UTF-16 code unit value at the given `index`.\n\n[`String.prototype.codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\n\nReturns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified `pos`.\n\n[`String.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\n\nCombines the text of two (or more) strings and returns a new string.\n\n[`String.prototype.endsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\n\nDetermines whether a string ends with the characters of the string `searchString`.\n\n[`String.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\n\nDetermines whether the calling string contains `searchString`.\n\n[`String.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\n\nReturns the index within the calling [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object of the first occurrence of `searchValue`, or `-1` if not found.\n\n[`String.prototype.isWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed)\n\nReturns a boolean indicating whether this string contains any [lone surrogates](#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n[`String.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\n\nReturns the index within the calling [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) object of the last occurrence of `searchValue`, or `-1` if not found.\n\n[`String.prototype.localeCompare()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)\n\nReturns a number indicating whether the reference string `compareString` comes before, after, or is equivalent to the given string in sort order.\n\n[`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n\nUsed to match regular expression `regexp` against a string.\n\n[`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)\n\nReturns an iterator of all `regexp`'s matches.\n\n[`String.prototype.normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n\nReturns the Unicode Normalization Form of the calling string value.\n\n[`String.prototype.padEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd)\n\nPads the current string from the end with a given string and returns a new string of the length `targetLength`.\n\n[`String.prototype.padStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart)\n\nPads the current string from the start with a given string and returns a new string of the length `targetLength`.\n\n[`String.prototype.repeat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\n\nReturns a string consisting of the elements of the object repeated `count` times.\n\n[`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\nUsed to replace occurrences of `searchFor` using `replaceWith`. `searchFor` may be a string or Regular Expression, and `replaceWith` may be a string or function.\n\n[`String.prototype.replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll)\n\nUsed to replace all occurrences of `searchFor` using `replaceWith`. `searchFor` may be a string or Regular Expression, and `replaceWith` may be a string or function.\n\n[`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\n\nSearch for a match between a regular expression `regexp` and the calling string.\n\n[`String.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)\n\nExtracts a section of a string and returns a new string.\n\n[`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\nReturns an array of strings populated by splitting the calling string at occurrences of the substring `sep`.\n\n[`String.prototype.startsWith()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\n\nDetermines whether the calling string begins with the characters of string `searchString`.\n\n[`String.prototype.substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) Deprecated\n\nReturns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.\n\n[`String.prototype.substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring)\n\nReturns a new string containing characters of the calling string from (or between) the specified index (or indices).\n\n[`String.prototype.toLocaleLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\n\nThe characters within a string are converted to lowercase while respecting the current locale.\n\nFor most languages, this will return the same as [`toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase).\n\n[`String.prototype.toLocaleUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\n\nThe characters within a string are converted to uppercase while respecting the current locale.\n\nFor most languages, this will return the same as [`toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase).\n\n[`String.prototype.toLowerCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n\nReturns the calling string value converted to lowercase.\n\n[`String.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString)\n\nReturns a string representing the specified object. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`String.prototype.toUpperCase()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\n\nReturns the calling string value converted to uppercase.\n\n[`String.prototype.toWellFormed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed)\n\nReturns a string where all [lone surrogates](#utf-16_characters_unicode_code_points_and_grapheme_clusters) of this string are replaced with the Unicode replacement character U+FFFD.\n\n[`String.prototype.trim()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\n\nTrims whitespace from the beginning and end of the string.\n\n[`String.prototype.trimEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd)\n\nTrims whitespace from the end of the string.\n\n[`String.prototype.trimStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart)\n\nTrims whitespace from the beginning of the string.\n\n[`String.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf)\n\nReturns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n[`String.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n\nReturns a new iterator object that iterates over the code points of a String value, returning each code point as a String value.\n\n### [HTML wrapper methods](#html_wrapper_methods)\n\n**Warning:** Deprecated. Avoid these methods.\n\nThey are of limited use, as they are based on a very old HTML standard and provide only a subset of the currently available HTML tags and attributes. Many of them create deprecated or non-standard markup today. In addition, they do simple string concatenation without any validation or sanitation, which makes them a potential security threat when directly inserted using [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML). Use [DOM APIs](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) instead.\n\n[`String.prototype.anchor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor) Deprecated\n\n[`<a name=\"name\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#name) (hypertext target)\n\n[`String.prototype.big()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big) Deprecated\n\n[`<big>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big)\n\n[`String.prototype.blink()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink) Deprecated\n\n`<blink>`\n\n[`String.prototype.bold()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold) Deprecated\n\n[`<b>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)\n\n[`String.prototype.fixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed) Deprecated\n\n[`<tt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt)\n\n[`String.prototype.fontcolor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor) Deprecated\n\n[`<font color=\"color\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#color)\n\n[`String.prototype.fontsize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize) Deprecated\n\n[`<font size=\"size\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#size)\n\n[`String.prototype.italics()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics) Deprecated\n\n[`<i>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)\n\n[`String.prototype.link()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link) Deprecated\n\n[`<a href=\"url\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href) (link to URL)\n\n[`String.prototype.small()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small) Deprecated\n\n[`<small>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small)\n\n[`String.prototype.strike()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike) Deprecated\n\n[`<strike>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike)\n\n[`String.prototype.sub()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub) Deprecated\n\n[`<sub>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub)\n\n[`String.prototype.sup()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup) Deprecated\n\n[`<sup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup)\n\nNote that these methods do not check if the string itself contains HTML tags, so it's possible to create invalid HTML:\n\n```\n\"</b>\".bold(); // <b></b></b>\n```\n\nThe only escaping they do is to replace `\"` in the attribute value (for [`anchor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor), [`fontcolor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor), [`fontsize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize), and [`link()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)) with `&quot;`.\n\n```\n\"foo\".anchor('\"Hello\"'); // <a name=\"&quot;Hello&quot;\">foo</a>\n```\n\n## [Examples](#examples)\n\n### [String conversion](#string_conversion)\n\nThe `String()` function is a more reliable way of converting values to strings than calling the `toString()` method of the value, as the former works when used on [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). For example:\n\n```\n// You cannot access properties on null or undefined\n\nconst nullVar = null;\nnullVar.toString(); // TypeError: Cannot read properties of null\nString(nullVar); // \"null\"\n\nconst undefinedVar = undefined;\nundefinedVar.toString(); // TypeError: Cannot read properties of undefined\nString(undefinedVar); // \"undefined\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-string-objects](https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "String - JavaScript | MDN",
    "description": "The String object is used to represent and manipulate a\n  sequence of characters.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "markdown": "# Error - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**`Error`** objects are thrown when runtime errors occur. The `Error` object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.\n\n## [Description](#description)\n\nRuntime errors result in new `Error` objects being created and thrown.\n\n`Error` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n### [Error types](#error_types)\n\nBesides the generic `Error` constructor, there are other core error constructors in JavaScript. For client-side exceptions, see [Exception handling statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements).\n\n[`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError)\n\nCreates an instance representing an error that occurs regarding the global function [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval).\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nCreates an instance representing an error that occurs when a numeric variable or parameter is outside its valid range.\n\n[`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)\n\nCreates an instance representing an error that occurs when de-referencing an invalid reference.\n\n[`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)\n\nCreates an instance representing a syntax error.\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nCreates an instance representing an error that occurs when a variable or parameter is not of a valid type.\n\n[`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError)\n\nCreates an instance representing an error that occurs when [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) or [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) are passed invalid parameters.\n\n[`AggregateError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError)\n\nCreates an instance representing several errors wrapped in a single error when multiple errors need to be reported by an operation, for example by [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any).\n\n[`InternalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError) Non-standard\n\nCreates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\n\n## [Constructor](#constructor)\n\n[`Error()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error)\n\nCreates a new `Error` object.\n\n## [Static methods](#static_methods)\n\n[`Error.captureStackTrace()`](#error.capturestacktrace) Non-standard\n\nA non-standard V8 function that creates the [`stack`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack) property on an Error instance.\n\n[`Error.stackTraceLimit`](#error.stacktracelimit) Non-standard\n\nA non-standard V8 numerical property that limits how many stack frames to include in an error stacktrace.\n\n[`Error.prepareStackTrace()`](#error.preparestacktrace) Non-standard Optional\n\nA non-standard V8 function that, if provided by usercode, is called by the V8 JavaScript engine for thrown exceptions, allowing the user to provide custom formatting for stacktraces.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Error.prototype` and shared by all `Error` instances.\n\n[`Error.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Error` instances, the initial value is the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor.\n\n[`Error.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `Error.prototype.name`, the initial value is `\"Error\"`. Subclasses like [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) provide their own `name` properties.\n\n[`Error.prototype.stack`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack) Non-standard\n\nA non-standard property for a stack trace.\n\nThese properties are own properties of each `Error` instance.\n\n[`cause`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause)\n\nError cause indicating the reason why the current error is thrown — usually another caught error. For user-created `Error` objects, this is the value provided as the `cause` property of the constructor's second argument.\n\n[`columnNumber`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber) Non-standard\n\nA non-standard Mozilla property for the column number in the line that raised this error.\n\n[`fileName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName) Non-standard\n\nA non-standard Mozilla property for the path to the file that raised this error.\n\n[`lineNumber`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber) Non-standard\n\nA non-standard Mozilla property for the line number in the file that raised this error.\n\n[`message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message)\n\nError message. For user-created `Error` objects, this is the string provided as the constructor's first argument.\n\n## [Instance methods](#instance_methods)\n\n[`Error.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString)\n\nReturns a string representing the specified object. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n## [Examples](#examples)\n\n### [Throwing a generic error](#throwing_a_generic_error)\n\nUsually you create an `Error` object with the intention of raising it using the [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) keyword. You can handle the error using the [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) construct:\n\n```\ntry {\n  throw new Error(\"Whoops!\");\n} catch (e) {\n  console.error(`${e.name}: ${e.message}`);\n}\n```\n\n### [Handling a specific error type](#handling_a_specific_error_type)\n\nYou can choose to handle only specific error types by testing the error type with the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) keyword:\n\n```\ntry {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.error(`${e.name}: ${e.message}`);\n  } else if (e instanceof RangeError) {\n    console.error(`${e.name}: ${e.message}`);\n  }\n  // etc.\n  else {\n    // If none of our cases matched leave the Error unhandled\n    throw e;\n  }\n}\n```\n\n### [Differentiate between similar errors](#differentiate_between_similar_errors)\n\nSometimes a block of code can fail for reasons that require different handling, but which throw very similar errors (i.e. with the same type and message).\n\nIf you don't have control over the original errors that are thrown, one option is to catch them and throw new `Error` objects that have more specific messages. The original error should be passed to the new `Error` in the constructor's [`options`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error#options) parameter as its `cause` property. This ensures that the original error and stack trace are available to higher-level try/catch blocks.\n\nThe example below shows this for two methods that would otherwise fail with similar errors (`doFailSomeWay()` and `doFailAnotherWay()`):\n\n```\nfunction doWork() {\n  try {\n    doFailSomeWay();\n  } catch (err) {\n    throw new Error(\"Failed in some way\", { cause: err });\n  }\n  try {\n    doFailAnotherWay();\n  } catch (err) {\n    throw new Error(\"Failed in another way\", { cause: err });\n  }\n}\n\ntry {\n  doWork();\n} catch (err) {\n  switch (err.message) {\n    case \"Failed in some way\":\n      handleFailSomeWay(err.cause);\n      break;\n    case \"Failed in another way\":\n      handleFailAnotherWay(err.cause);\n      break;\n  }\n}\n```\n\n**Note:** If you are making a library, you should prefer to use error cause to discriminate between different errors emitted — rather than asking your consumers to parse the error message. See the [error cause page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause#providing_structured_data_as_the_error_cause) for an example.\n\n[Custom error types](#custom_error_types) can also use the `cause` property, provided the subclasses' constructor passes the `options` parameter when calling `super()`. The `Error()` base class constructor will read `options.cause` and define the `cause` property on the new error instance.\n\n```\nclass MyError extends Error {\n  constructor(message, options) {\n    // Need to pass `options` as the second parameter to install the \"cause\" property.\n    super(message, options);\n  }\n}\n\nconsole.log(new MyError(\"test\", { cause: new Error(\"cause\") }).cause);\n// Error: cause\n```\n\n### [Custom error types](#custom_error_types)\n\nYou might want to define your own error types deriving from `Error` to be able to `throw new MyError()` and use `instanceof MyError` to check the kind of error in the exception handler. This results in cleaner and more consistent error handling code.\n\nSee [\"What's a good way to extend Error in JavaScript?\"](https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript) on StackOverflow for an in-depth discussion.\n\n**Note:** Some browsers include the `CustomError` constructor in the stack trace when using ES2015 classes.\n\n```\nclass CustomError extends Error {\n  constructor(foo = \"bar\", ...params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError);\n    }\n\n    this.name = \"CustomError\";\n    // Custom debugging information\n    this.foo = foo;\n    this.date = new Date();\n  }\n}\n\ntry {\n  throw new CustomError(\"baz\", \"bazMessage\");\n} catch (e) {\n  console.error(e.name); // CustomError\n  console.error(e.foo); // baz\n  console.error(e.message); // bazMessage\n  console.error(e.stack); // stacktrace\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-error-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Error - JavaScript | MDN",
    "description": "Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment",
    "markdown": "# Exponentiation assignment (\\*\\*=) - JavaScript\n\nThe **exponentiation assignment (`**=`)** operator performs [exponentiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x **= y` is equivalent to `x = x ** y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Exponentiation assignment using numbers](#exponentiation_assignment_using_numbers)\n\n```\nlet bar = 5;\nbar **= 2; // 25\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\nlet baz = 5;\nbaz **= \"foo\"; // NaN\n```\n\n### [Exponentiation assignment using BigInts](#exponentiation_assignment_using_bigints)\n\n```\nlet foo = 3n;\nfoo **= 2n; // 9n\nfoo **= 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Exponentiation assignment (**=) - JavaScript | MDN",
    "description": "The exponentiation assignment (**=) operator performs exponentiation on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "markdown": "# Symbol - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**`Symbol`** is a built-in object whose constructor returns a `symbol` [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) — also called a **Symbol value** or just a **Symbol** — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak [encapsulation](https://developer.mozilla.org/en-US/docs/Glossary/Encapsulation), or a weak form of [information hiding](https://en.wikipedia.org/wiki/Information_hiding).\n\nEvery `Symbol()` call is guaranteed to return a unique Symbol. Every `Symbol.for(\"key\")` call will always return the same Symbol for a given value of `\"key\"`. When `Symbol.for(\"key\")` is called, if a Symbol with the given key can be found in the global Symbol registry, that Symbol is returned. Otherwise, a new Symbol is created, added to the global Symbol registry under the given key, and returned.\n\n## [Description](#description)\n\nTo create a new primitive Symbol, you write `Symbol()` with an optional string as its description:\n\n```\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n```\n\nThe above code creates three new Symbols. Note that `Symbol(\"foo\")` does not coerce the string `\"foo\"` into a Symbol. It creates a new Symbol each time:\n\n```\nSymbol(\"foo\") === Symbol(\"foo\"); // false\n```\n\nThe following syntax with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError):\n\n```\nconst sym = new Symbol(); // TypeError\n```\n\nThis prevents authors from creating an explicit `Symbol` wrapper object instead of a new Symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, `new Boolean`, `new String` and `new Number`).\n\nIf you really want to create a `Symbol` wrapper object, you can use the `Object()` function:\n\n```\nconst sym = Symbol(\"foo\");\ntypeof sym; // \"symbol\"\nconst symObj = Object(sym);\ntypeof symObj; // \"object\"\n```\n\nBecause symbols are the only primitive data type that has reference identity (that is, you cannot create the same symbol twice), they behave like objects in some way. For example, they are garbage collectable and can therefore be stored in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap), [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet), [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef), and [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) objects.\n\n### [Shared Symbols in the global Symbol registry](#shared_symbols_in_the_global_symbol_registry)\n\nThe above syntax using the `Symbol()` function will create a Symbol whose value remains unique throughout the lifetime of the program. To create Symbols available across files and even across realms (each of which has its own global scope), use the methods [`Symbol.for()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for) and [`Symbol.keyFor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor) to set and retrieve Symbols from the global Symbol registry.\n\nNote that the \"global Symbol registry\" is only a fictitious concept and may not correspond to any internal data structure in the JavaScript engine — and even if such a registry exists, its content is not available to the JavaScript code, except through the `for()` and `keyFor()` methods.\n\nThe method `Symbol.for(tokenString)` takes a string key and returns a symbol value from the registry, while `Symbol.keyFor(symbolValue)` takes a symbol value and returns the string key corresponding to it. Each is the other's inverse, so the following is `true`:\n\n```\nSymbol.keyFor(Symbol.for(\"tokenString\")) === \"tokenString\"; // true\n```\n\nBecause registered symbols can be arbitrarily created anywhere, they behave almost exactly like the strings they wrap. Therefore, they are not guaranteed to be unique and are not garbage collectable. Therefore, registered symbols are disallowed in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap), [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet), [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef), and [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) objects.\n\n### [Well-known Symbols](#well-known_symbols)\n\nAll static properties of the `Symbol` constructor are Symbols themselves, whose values are constant across realms. They are known as _well-known Symbols_, and their purpose is to serve as \"protocols\" for certain built-in JavaScript operations, allowing users to customize the language's behavior. For example, if a constructor function has a method with [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) as its name, this method will encode its behavior with the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\nPrior to well-known Symbols, JavaScript used normal properties to implement certain built-in operations. For example, the [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) function will attempt to call each object's `toJSON()` method, and the [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) function will call the object's `toString()` and `valueOf()` methods. However, as more operations are added to the language, designating each operation a \"magic property\" can break backward compatibility and make the language's behavior harder to reason with. Well-known Symbols allow the customizations to be \"invisible\" from normal code, which typically only read string properties.\n\nIn MDN and other sources, well-known symbol values are stylized by prefixing `@@`. For example, [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) is written as `@@hasInstance`. This is because symbols don't have actual literal formats, but using `Symbol.hasInstance` does not reflect the ability of using other aliases to refer to the same symbol. This is like the difference between `Function.name` and `\"Function\"`.\n\nWell-known symbols do not have the concept of garbage collectability, because they come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as `Array.prototype`, so they are also allowed in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap), [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet), [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef), and [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) objects.\n\n### [Finding Symbol properties on objects](#finding_symbol_properties_on_objects)\n\nThe method [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) returns an array of Symbols and lets you find Symbol properties on a given object. Note that every object is initialized with no own Symbol properties, so that this array will be empty unless you've set Symbol properties on the object.\n\n## [Constructor](#constructor)\n\n[`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol)\n\nReturns primitive values of type Symbol. Throws an error when called with `new`.\n\n## [Static properties](#static_properties)\n\nThe static properties are all well-known Symbols. In these Symbols' descriptions, we will use language like \"`Symbol.hasInstance` is a method determining…\", but bear in mind that this is referring to the semantic of an object's method having this Symbol as the method name (because well-known Symbols act as \"protocols\"), not describing the value of the Symbol itself.\n\n[`Symbol.asyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator)\n\nA method that returns the default AsyncIterator for an object. Used by [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of).\n\n[`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance)\n\nA method determining if a constructor object recognizes an object as its instance. Used by [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof).\n\n[`Symbol.isConcatSpreadable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable)\n\nA Boolean value indicating if an object should be flattened to its array elements. Used by [`Array.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat).\n\n[`Symbol.iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator)\n\nA method returning the default iterator for an object. Used by [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of).\n\n[`Symbol.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match)\n\nA method that matches against a string, also used to determine if an object may be used as a regular expression. Used by [`String.prototype.match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n\n[`Symbol.matchAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll)\n\nA method that returns an iterator, that yields matches of the regular expression against a string. Used by [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll).\n\n[`Symbol.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace)\n\nA method that replaces matched substrings of a string. Used by [`String.prototype.replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace).\n\n[`Symbol.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search)\n\nA method that returns the index within a string that matches the regular expression. Used by [`String.prototype.search()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search).\n\n[`Symbol.species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species)\n\nA constructor function that is used to create derived objects.\n\n[`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\n\nA method that splits a string at the indices that match a regular expression. Used by [`String.prototype.split()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split).\n\n[`Symbol.toPrimitive`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)\n\nA method converting an object to a primitive value.\n\n[`Symbol.toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag)\n\nA string value used for the default description of an object. Used by [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n[`Symbol.unscopables`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables)\n\nAn object value of whose own and inherited property names are excluded from the [`with`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with) environment bindings of the associated object.\n\n## [Static methods](#static_methods)\n\n[`Symbol.for()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for)\n\nSearches for existing registered Symbols in the global Symbol registry with the given `key` and returns it if found. Otherwise a new Symbol gets created and registered with `key`.\n\n[`Symbol.keyFor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor)\n\nRetrieves a shared Symbol key from the global Symbol registry for the given Symbol.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Symbol.prototype` and shared by all `Symbol` instances.\n\n[`Symbol.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Symbol` instances, the initial value is the [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) constructor.\n\n[`Symbol.prototype.description`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description)\n\nA read-only string containing the description of the Symbol.\n\n[`Symbol.prototype[@@toStringTag]`](#symbol.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Symbol\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). However, because `Symbol` also has its own [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a symbol as `thisArg`.\n\n## [Instance methods](#instance_methods)\n\n[`Symbol.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString)\n\nReturns a string containing the description of the Symbol. Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Symbol.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf)\n\nReturns the Symbol. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n[`Symbol.prototype[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive)\n\nReturns the Symbol.\n\n## [Examples](#examples)\n\n### [Using the typeof operator with Symbols](#using_the_typeof_operator_with_symbols)\n\nThe [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator can help you to identify Symbols.\n\n```\ntypeof Symbol() === \"symbol\";\ntypeof Symbol(\"foo\") === \"symbol\";\ntypeof Symbol.iterator === \"symbol\";\n```\n\n### [Symbol type conversions](#symbol_type_conversions)\n\nSome things to note when working with type conversion of Symbols.\n\n*   When trying to convert a Symbol to a number, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown (e.g. `+sym` or `sym | 0`).\n*   When using loose equality, `Object(sym) == sym` returns `true`.\n*   `Symbol(\"foo\") + \"bar\"` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) (can't convert Symbol to string). This prevents you from silently creating a new string property name from a Symbol, for example.\n*   The [\"safer\" `String(sym)` conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_conversion) works like a call to [`Symbol.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString) with Symbols, but note that `new String(sym)` will throw.\n\n### [Symbols and for...in iteration](#symbols_and_for...in_iteration)\n\nSymbols are not enumerable in [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) iterations. In addition, [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) will not return Symbol object properties, however, you can use [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) to get these.\n\n```\nconst obj = {};\n\nobj[Symbol(\"a\")] = \"a\";\nobj[Symbol.for(\"b\")] = \"b\";\nobj[\"c\"] = \"c\";\nobj.d = \"d\";\n\nfor (const i in obj) {\n  console.log(i);\n}\n// \"c\" \"d\"\n```\n\n### [Symbols and JSON.stringify()](#symbols_and_json.stringify)\n\nSymbol-keyed properties will be completely ignored when using `JSON.stringify()`:\n\n```\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" });\n// '{}'\n```\n\nFor more details, see [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n### [Symbol wrapper objects as property keys](#symbol_wrapper_objects_as_property_keys)\n\nWhen a Symbol wrapper object is used as a property key, this object will be coerced to its wrapped Symbol:\n\n```\nconst sym = Symbol(\"foo\");\nconst obj = { [sym]: 1 };\nobj[sym]; // 1\nobj[Object(sym)]; // still 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-symbol-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Symbol - JavaScript | MDN",
    "description": "Symbol is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak encapsulation, or a weak form of information hiding.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "markdown": "# GeneratorFunction - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`GeneratorFunction`** object provides methods for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*). In JavaScript, every generator function is actually a `GeneratorFunction` object.\n\nNote that `GeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```\nconst GeneratorFunction = function* () {}.constructor;\n```\n\n`GeneratorFunction` is a subclass of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function).\n\n## [Try it](#try_it)\n\n## [Constructor](#constructor)\n\n[`GeneratorFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction)\n\nCreates a new `GeneratorFunction` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\nThese properties are defined on `GeneratorFunction.prototype` and shared by all `GeneratorFunction` instances.\n\n[`GeneratorFunction.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `GeneratorFunction` instances, the initial value is the [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction) constructor.\n\n[`GeneratorFunction.prototype.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype)\n\nAll generator functions share the same [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which is [`Generator.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator). Each generator function created with the `function*` syntax or the `GeneratorFunction()` constructor also has its own `prototype` property, whose prototype is `GeneratorFunction.prototype.prototype`. When the generator function is called, its `prototype` property becomes the prototype of the returned generator object.\n\n[`GeneratorFunction.prototype[@@toStringTag]`](#generatorfunction.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"GeneratorFunction\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\nThese properties are own properties of each `GeneratorFunction` instance.\n\n[`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/prototype)\n\nUsed when the function is used as a constructor with the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)_.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generatorfunction-objects](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-generatorfunction-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "GeneratorFunction - JavaScript | MDN",
    "description": "The GeneratorFunction object provides methods for generator functions. In JavaScript, every generator function is actually a GeneratorFunction object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties",
    "markdown": "# Enumerability and ownership of properties - JavaScript\n\nEvery property in JavaScript objects can be classified by three factors:\n\n*   Enumerable or non-enumerable;\n*   String or [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol);\n*   Own property or inherited property from the prototype chain.\n\n_Enumerable properties_ are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via [`Object.defineProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and such are not enumerable by default. Most iteration means (such as [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops and [`Object.keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.\n\nAll properties, enumerable or not, string or symbol, own or inherited, can be accessed with [dot notation or bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). In this section, we will focus on the means provided by JavaScript to visit a group of object properties one-by-one.\n\n## [Querying object properties](#querying_object_properties)\n\nThere are four built-in ways to query a property of an object. They all support both string and symbol keys. The following table summarizes when each method returns `true`.\n\n|     | Enumerable, own | Enumerable, inherited | Non-enumerable, own | Non-enumerable, inherited |\n| --- | --- | --- | --- | --- |\n| [`propertyIsEnumerable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) | `true ✅` | `false ❌` | `false ❌` | `false ❌` |\n| [`hasOwnProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) | `true ✅` | `false ❌` | `true ✅` | `false ❌` |\n| [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) | `true ✅` | `false ❌` | `true ✅` | `false ❌` |\n| [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) | `true ✅` | `true ✅` | `true ✅` | `true ✅` |\n\n## [Traversing object properties](#traversing_object_properties)\n\nThere are many methods in JavaScript that traverse a group of properties of an object. Sometimes, these properties are returned as an array; sometimes, they are iterated one-by-one in a loop; sometimes, they are used for constructing or mutating another object. The following table summarizes when a property may be visited.\n\nMethods that only visit string properties or only symbol properties will have an extra note. ✅ means a property of this type will be visited; ❌ means it will not.\n\n|     | Enumerable, own | Enumerable, inherited | Non-enumerable, own | Non-enumerable, inherited |\n| --- | --- | --- | --- | --- |\n| [`Object.keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)  <br>[`Object.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values)  <br>[`Object.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) | ✅  <br>(strings) | ❌   | ❌   | ❌   |\n| [`Object.getOwnPropertyNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) | ✅  <br>(strings) | ❌   | ✅  <br>(strings) | ❌   |\n| [`Object.getOwnPropertySymbols`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) | ✅  <br>(symbols) | ❌   | ✅  <br>(symbols) | ❌   |\n| [`Object.getOwnPropertyDescriptors`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors) | ✅   | ❌   | ✅   | ❌   |\n| [`Reflect.ownKeys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys) | ✅   | ❌   | ✅   | ❌   |\n| [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) | ✅  <br>(strings) | ✅  <br>(strings) | ❌   | ❌   |\n| [`Object.assign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)  <br>(After the first parameter) | ✅   | ❌   | ❌   | ❌   |\n| [Object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) | ✅   | ❌   | ❌   | ❌   |\n\n## [Obtaining properties by enumerability/ownership](#obtaining_properties_by_enumerabilityownership)\n\nNote that this is not the most efficient algorithm for all cases, but useful for a quick demonstration.\n\n*   Detection can occur by `SimplePropertyRetriever.theGetMethodYouWant(obj).includes(prop)`\n*   Iteration can occur by `SimplePropertyRetriever.theGetMethodYouWant(obj).forEach((value, prop) => {});` (or use `filter()`, `map()`, etc.)\n\n```\nconst SimplePropertyRetriever = {\n  getOwnEnumerables(obj) {\n    return this._getPropertyNames(obj, true, false, this._enumerable);\n    // Or could use for...in filtered with Object.hasOwn or just this: return Object.keys(obj);\n  },\n  getOwnNonenumerables(obj) {\n    return this._getPropertyNames(obj, true, false, this._notEnumerable);\n  },\n  getOwnEnumerablesAndNonenumerables(obj) {\n    return this._getPropertyNames(\n      obj,\n      true,\n      false,\n      this._enumerableAndNotEnumerable,\n    );\n    // Or just use: return Object.getOwnPropertyNames(obj);\n  },\n  getPrototypeEnumerables(obj) {\n    return this._getPropertyNames(obj, false, true, this._enumerable);\n  },\n  getPrototypeNonenumerables(obj) {\n    return this._getPropertyNames(obj, false, true, this._notEnumerable);\n  },\n  getPrototypeEnumerablesAndNonenumerables(obj) {\n    return this._getPropertyNames(\n      obj,\n      false,\n      true,\n      this._enumerableAndNotEnumerable,\n    );\n  },\n  getOwnAndPrototypeEnumerables(obj) {\n    return this._getPropertyNames(obj, true, true, this._enumerable);\n    // Or could use unfiltered for...in\n  },\n  getOwnAndPrototypeNonenumerables(obj) {\n    return this._getPropertyNames(obj, true, true, this._notEnumerable);\n  },\n  getOwnAndPrototypeEnumerablesAndNonenumerables(obj) {\n    return this._getPropertyNames(\n      obj,\n      true,\n      true,\n      this._enumerableAndNotEnumerable,\n    );\n  },\n  // Private static property checker callbacks\n  _enumerable(obj, prop) {\n    return Object.prototype.propertyIsEnumerable.call(obj, prop);\n  },\n  _notEnumerable(obj, prop) {\n    return !Object.prototype.propertyIsEnumerable.call(obj, prop);\n  },\n  _enumerableAndNotEnumerable(obj, prop) {\n    return true;\n  },\n  // Inspired by http://stackoverflow.com/a/8024294/271577\n  _getPropertyNames(obj, iterateSelf, iteratePrototype, shouldInclude) {\n    const props = [];\n    do {\n      if (iterateSelf) {\n        Object.getOwnPropertyNames(obj).forEach((prop) => {\n          if (props.indexOf(prop) === -1 && shouldInclude(obj, prop)) {\n            props.push(prop);\n          }\n        });\n      }\n      if (!iteratePrototype) {\n        break;\n      }\n      iterateSelf = true;\n      obj = Object.getPrototypeOf(obj);\n    } while (obj);\n    return props;\n  },\n};\n```\n\n## [See also](#see_also)",
    "title": "Enumerability and ownership of properties - JavaScript | MDN",
    "description": "Every property in JavaScript objects can be classified by three factors:",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape",
    "markdown": "# escape() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** `escape()` is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use [`encodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) or [`encodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) if possible.\n\nThe **`escape()`** function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA string to be encoded.\n\n### [Return value](#return_value)\n\nA new string in which certain characters have been escaped.\n\n## [Description](#description)\n\n`escape()` is a function property of the global object.\n\nThe `escape()` function replaces all characters with escape sequences, with the exception of [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII) word characters (A–Z, a–z, 0–9, \\_) and `@\\*_+-./`. Characters are escaped by UTF-16 code units. If the code unit's value is less than 256, it is represented by a two-digit hexadecimal number in the format `%XX`, left-padded with 0 if necessary. Otherwise, it is represented by a four-digit hexadecimal number in the format `%uXXXX`, left-padded with 0 if necessary.\n\n**Note:** This function was used mostly for [URL encoding](https://en.wikipedia.org/wiki/URL_encoding) and is partly based on the escape format in [RFC 1738](https://datatracker.ietf.org/doc/html/rfc1738). The escape format is _not_ an [escape sequence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) in string literals. You can replace `%XX` with `\\xXX` and `%uXXXX` with `\\uXXXX` to get a string containing actual string-literal escape sequences.\n\n## [Examples](#examples)\n\n### [Using escape()](#using_escape)\n\n```\nescape(\"abc123\"); // \"abc123\"\nescape(\"äöü\"); // \"%E4%F6%FC\"\nescape(\"ć\"); // \"%u0107\"\n\n// special characters\nescape(\"@*_+-./\"); // \"@*_+-./\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-escape-string](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-escape-string) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "escape() - JavaScript | MDN",
    "description": "The escape() function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",
    "markdown": "# Closures - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **closure** is the combination of a function bundled together (enclosed) with references to its surrounding state (the **lexical environment**). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\n\n## [Lexical scoping](#lexical_scoping)\n\nConsider the following example code:\n\n```\nfunction init() {\n  var name = \"Mozilla\"; // name is a local variable created by init\n  function displayName() {\n    // displayName() is the inner function, that forms the closure\n    console.log(name); // use variable declared in the parent function\n  }\n  displayName();\n}\ninit();\n```\n\n`init()` creates a local variable called `name` and a function called `displayName()`. The `displayName()` function is an inner function that is defined inside `init()` and is available only within the body of the `init()` function. Note that the `displayName()` function has no local variables of its own. However, since inner functions have access to the variables of outer functions, `displayName()` can access the variable `name` declared in the parent function, `init()`.\n\nRun the code using [this JSFiddle link](https://jsfiddle.net/3dxck52m/) and notice that the `console.log()` statement within the `displayName()` function successfully displays the value of the `name` variable, which is declared in its parent function. This is an example of _lexical scoping_, which describes how a parser resolves variable names when functions are nested. The word _lexical_ refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.\n\nIn this particular example, the scope is called a _function scope_, because the variable is accessible and only accessible within the function body where it's declared.\n\n### [Scoping with let and const](#scoping_with_let_and_const)\n\nTraditionally (before ES6), JavaScript only had two kinds of scopes: _function scope_ and _global scope_. Variables declared with `var` are either function-scoped or global-scoped, depending on whether they are declared within a function or outside a function. This can be tricky, because blocks with curly braces do not create scopes:\n\n```\nif (Math.random() > 0.5) {\n  var x = 1;\n} else {\n  var x = 2;\n}\nconsole.log(x);\n```\n\nFor people from other languages (e.g. C, Java) where blocks create scopes, the above code should throw an error on the `console.log` line, because we are outside the scope of `x` in either block. However, because blocks don't create scopes for `var`, the `var` statements here actually create a global variable. There is also [a practical example](#creating_closures_in_loops_a_common_mistake) introduced below that illustrates how this can cause actual bugs when combined with closures.\n\nIn ES6, JavaScript introduced the `let` and `const` declarations, which, among other things like [temporal dead zones](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz), allow you to create block-scoped variables.\n\n```\nif (Math.random() > 0.5) {\n  const x = 1;\n} else {\n  const x = 2;\n}\nconsole.log(x); // ReferenceError: x is not defined\n```\n\nIn essence, blocks are finally treated as scopes in ES6, but only if you declare variables with `let` or `const`. In addition, ES6 introduced [modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), which introduced another kind of scope. Closures are able to capture variables in all these scopes, which we will introduce later.\n\n## [Closure](#closure)\n\nConsider the following code example:\n\n```\nfunction makeFunc() {\n  const name = \"Mozilla\";\n  function displayName() {\n    console.log(name);\n  }\n  return displayName;\n}\n\nconst myFunc = makeFunc();\nmyFunc();\n```\n\nRunning this code has exactly the same effect as the previous example of the `init()` function above. What's different (and interesting) is that the `displayName()` inner function is returned from the outer function _before being executed_.\n\nAt first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once `makeFunc()` finishes executing, you might expect that the `name` variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.\n\nThe reason is that functions in JavaScript form closures. A _closure_ is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created. In this case, `myFunc` is a reference to the instance of the function `displayName` that is created when `makeFunc` is run. The instance of `displayName` maintains a reference to its lexical environment, within which the variable `name` exists. For this reason, when `myFunc` is invoked, the variable `name` remains available for use, and \"Mozilla\" is passed to `console.log`.\n\nHere's a slightly more interesting example—a `makeAdder` function:\n\n```\nfunction makeAdder(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nconst add5 = makeAdder(5);\nconst add10 = makeAdder(10);\n\nconsole.log(add5(2)); // 7\nconsole.log(add10(2)); // 12\n```\n\nIn this example, we have defined a function `makeAdder(x)`, that takes a single argument `x`, and returns a new function. The function it returns takes a single argument `y`, and returns the sum of `x` and `y`.\n\nIn essence, `makeAdder` is a function factory. It creates functions that can add a specific value to their argument. In the above example, the function factory creates two new functions—one that adds five to its argument, and one that adds 10.\n\n`add5` and `add10` both form closures. They share the same function body definition, but store different lexical environments. In `add5`'s lexical environment, `x` is 5, while in the lexical environment for `add10`, `x` is 10.\n\n## [Practical closures](#practical_closures)\n\nClosures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods.\n\nConsequently, you can use a closure anywhere that you might normally use an object with only a single method.\n\nSituations where you might want to do this are particularly common on the web. Much of the code written in front-end JavaScript is event-based. You define some behavior, and then attach it to an event that is triggered by the user (such as a click or a keypress). The code is attached as a callback (a single function that is executed in response to the event).\n\nFor instance, suppose we want to add buttons to a page to adjust the text size. One way of doing this is to specify the font-size of the `body` element (in pixels), and then set the size of the other elements on the page (such as headers) using the relative `em` unit:\n\n```\nbody {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n```\n\nSuch interactive text size buttons can change the `font-size` property of the `body` element, and the adjustments are picked up by other elements on the page thanks to the relative units.\n\nHere's the JavaScript:\n\n```\nfunction makeSizer(size) {\n  return function () {\n    document.body.style.fontSize = `${size}px`;\n  };\n}\n\nconst size12 = makeSizer(12);\nconst size14 = makeSizer(14);\nconst size16 = makeSizer(16);\n```\n\n`size12`, `size14`, and `size16` are now functions that resize the body text to 12, 14, and 16 pixels, respectively. You can attach them to buttons as demonstrated in the following code example.\n\n```\ndocument.getElementById(\"size-12\").onclick = size12;\ndocument.getElementById(\"size-14\").onclick = size14;\ndocument.getElementById(\"size-16\").onclick = size16;\n```\n\n```\n<button id=\"size-12\">12</button>\n<button id=\"size-14\">14</button>\n<button id=\"size-16\">16</button>\n```\n\nRun the code using [JSFiddle](https://jsfiddle.net/hotae160/).\n\n## [Emulating private methods with closures](#emulating_private_methods_with_closures)\n\nLanguages such as Java allow you to declare methods as private, meaning that they can be called only by other methods in the same class.\n\nJavaScript, prior to [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), didn't have a native way of declaring [private methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#private_methods), but it was possible to emulate private methods using closures. Private methods aren't just useful for restricting access to code. They also provide a powerful way of managing your global namespace.\n\nThe following code illustrates how to use closures to define public functions that can access private functions and variables. Note that these closures follow the [Module Design Pattern](https://www.google.com/search?q=javascript+module+pattern).\n\n```\nconst counter = (function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // 0.\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // 2.\n\ncounter.decrement();\nconsole.log(counter.value()); // 1.\n```\n\nIn previous examples, each closure had its own lexical environment. Here though, there is a single lexical environment that is shared by the three functions: `counter.increment`, `counter.decrement`, and `counter.value`.\n\nThe shared lexical environment is created in the body of an anonymous function, _which is executed as soon as it has been defined_ (also known as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)). The lexical environment contains two private items: a variable called `privateCounter`, and a function called `changeBy`. You can't access either of these private members from outside the anonymous function. Instead, you can access them using the three public functions that are returned from the anonymous wrapper.\n\nThose three public functions form closures that share the same lexical environment. Thanks to JavaScript's lexical scoping, they each have access to the `privateCounter` variable and the `changeBy` function.\n\n```\nconst makeCounter = function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n};\n\nconst counter1 = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter1.value()); // 0.\n\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2.\n\ncounter1.decrement();\nconsole.log(counter1.value()); // 1.\nconsole.log(counter2.value()); // 0.\n```\n\nNotice how the two counters maintain their independence from one another. Each closure references a different version of the `privateCounter` variable through its own closure. Each time one of the counters is called, its lexical environment changes by changing the value of this variable. Changes to the variable value in one closure don't affect the value in the other closure.\n\n**Note:** Using closures in this way provides benefits that are normally associated with object-oriented programming. In particular, _data hiding_ and _encapsulation_.\n\n## [Closure scope chain](#closure_scope_chain)\n\nEvery closure has three scopes:\n\n*   Local scope (Own scope)\n*   Enclosing scope (can be block, function, or module scope)\n*   Global scope\n\nA common mistake is not realizing that in the case where the outer function is itself a nested function, access to the outer function's scope includes the enclosing scope of the outer function—effectively creating a chain of function scopes. To demonstrate, consider the following example code.\n\n```\n// global scope\nconst e = 10;\nfunction sum(a) {\n  return function (b) {\n    return function (c) {\n      // outer functions scope\n      return function (d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconsole.log(sum(1)(2)(3)(4)); // 20\n```\n\nYou can also write without anonymous functions:\n\n```\n// global scope\nconst e = 10;\nfunction sum(a) {\n  return function sum2(b) {\n    return function sum3(c) {\n      // outer functions scope\n      return function sum4(d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconst sum2 = sum(1);\nconst sum3 = sum2(2);\nconst sum4 = sum3(3);\nconst result = sum4(4);\nconsole.log(result); // 20\n```\n\nIn the example above, there's a series of nested functions, all of which have access to the outer functions' scope. In this context, we can say that closures have access to _all_ outer function scopes.\n\nClosures can capture variables in block scopes and module scopes as well. For example, the following creates a closure over the block-scoped variable `y`:\n\n```\nfunction outer() {\n  let getY;\n  {\n    const y = 6;\n    getY = () => y;\n  }\n  console.log(typeof y); // undefined\n  console.log(getY()); // 6\n}\n\nouter();\n```\n\nClosures over modules can be more interesting.\n\n```\n// myModule.js\nlet x = 5;\nexport const getX = () => x;\nexport const setX = (val) => {\n  x = val;\n};\n```\n\nHere, the module exports a pair of getter-setter functions, which close over the module-scoped variable `x`. Even when `x` is not directly accessible from other modules, it can be read and written with the functions.\n\n```\nimport { getX, setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 5\nsetX(6);\nconsole.log(getX()); // 6\n```\n\nClosures can close over imported values as well, which are regarded as _live [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding)_, because when the original value changes, the imported one changes accordingly.\n\n```\n// myModule.js\nexport let x = 1;\nexport const setX = (val) => {\n  x = val;\n};\n```\n\n```\n// closureCreator.js\nimport { x } from \"./myModule.js\";\n\nexport const getX = () => x; // Close over an imported live binding\n```\n\n```\nimport { getX } from \"./closureCreator.js\";\nimport { setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 1\nsetX(2);\nconsole.log(getX()); // 2\n```\n\n## [Creating closures in loops: A common mistake](#creating_closures_in_loops_a_common_mistake)\n\nPrior to the introduction of the [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) keyword, a common problem with closures occurred when you created them inside a loop. To demonstrate, consider the following example code.\n\n```\n<p id=\"help\">Helpful notes will appear here</p>\n<p>Email: <input type=\"text\" id=\"email\" name=\"email\" /></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\" /></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\" /></p>\n```\n\n```\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    // Culprit is the use of `var` on this line\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n\nTry running the code in [JSFiddle](https://jsfiddle.net/v7gjv/8164/).\n\nThe `helpText` array defines three helpful hints, each associated with the ID of an input field in the document. The loop cycles through these definitions, hooking up an `onfocus` event to each one that shows the associated help method.\n\nIf you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.\n\nThe reason for this is that the functions assigned to `onfocus` form closures; they consist of the function definition and the captured environment from the `setupHelp` function's scope. Three closures have been created by the loop, but each one shares the same single lexical environment, which has a variable with changing values (`item`). This is because the variable `item` is declared with `var` and thus has function scope due to hoisting. The value of `item.help` is determined when the `onfocus` callbacks are executed. Because the loop has already run its course by that time, the `item` variable object (shared by all three closures) has been left pointing to the last entry in the `helpText` list.\n\nOne solution in this case is to use more closures: in particular, to use a function factory as described earlier:\n\n```\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction makeHelpCallback(help) {\n  return function () {\n    showHelp(help);\n  };\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n\nsetupHelp();\n```\n\nRun the code using [this JSFiddle link](https://jsfiddle.net/v7gjv/9573/).\n\nThis works as expected. Rather than the callbacks all sharing a single lexical environment, the `makeHelpCallback` function creates _a new lexical environment_ for each callback, in which `help` refers to the corresponding string from the `helpText` array.\n\nOne other way to write the above using anonymous closures is:\n\n```\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    (function () {\n      var item = helpText[i];\n      document.getElementById(item.id).onfocus = function () {\n        showHelp(item.help);\n      };\n    })(); // Immediate event listener attachment with the current value of item (preserved until iteration).\n  }\n}\n\nsetupHelp();\n```\n\nIf you don't want to use more closures, you can use the [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) keyword:\n\n```\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  const helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (let i = 0; i < helpText.length; i++) {\n    const item = helpText[i];\n    document.getElementById(item.id).onfocus = () => {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n\nThis example uses `const` instead of `var`, so every closure binds the block-scoped variable, meaning that no additional closures are required.\n\nAnother alternative could be to use `forEach()` to iterate over the `helpText` array and attach a listener to each [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input), as shown:\n\n```\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  helpText.forEach(function (text) {\n    document.getElementById(text.id).onfocus = function () {\n      showHelp(text.help);\n    };\n  });\n}\n\nsetupHelp();\n```\n\n## [Performance considerations](#performance_considerations)\n\nAs mentioned previously, each function instance manages its own scope and closure. Therefore, it is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.\n\nFor instance, when creating a new object/class, methods should normally be associated to the object's prototype rather than defined into the object constructor. The reason is that whenever the constructor is called, the methods would get reassigned (that is, for every object creation).\n\nConsider the following case:\n\n```\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function () {\n    return this.name;\n  };\n\n  this.getMessage = function () {\n    return this.message;\n  };\n}\n```\n\nBecause the previous code does not take advantage of the benefits of using closures in this particular instance, we could instead rewrite it to avoid using closures as follows:\n\n```\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype = {\n  getName() {\n    return this.name;\n  },\n  getMessage() {\n    return this.message;\n  },\n};\n```\n\nHowever, redefining the prototype is not recommended. The following example instead appends to the existing prototype:\n\n```\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function () {\n  return this.name;\n};\nMyObject.prototype.getMessage = function () {\n  return this.message;\n};\n```\n\nIn the two previous examples, the inherited prototype can be shared by all objects and the method definitions need not occur at every object creation. See [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) for more.",
    "title": "Closures - JavaScript | MDN",
    "description": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
    "markdown": "# eval() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Warning:** Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. See [Never use direct eval()!](#never_use_direct_eval!), below.\n\nThe **`eval()`** function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`script`](#script)\n\nA string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declarations (which can only exist in modules) are not allowed.\n\n### [Return value](#return_value)\n\nThe completion value of evaluating the given code. If the completion value is empty, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned. If `script` is not a string primitive, `eval()` returns the argument unchanged.\n\n### [Exceptions](#exceptions)\n\nThrows any exception that occurs during evaluation of the code, including [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) if `script` fails to be parsed as a script.\n\n## [Description](#description)\n\n`eval()` is a function property of the global object.\n\nThe argument of the `eval()` function is a string. It will evaluate the source string as a script body, which means both statements and expressions are allowed. It returns the completion value of the code. For expressions, it's the value the expression evaluates to. Many statements and declarations have completion values as well, but the result may be surprising (for example, the completion value of an assignment is the assigned value, but the completion value of [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) is undefined), so it's recommended to not rely on statements' completion values.\n\nIn strict mode, declaring a variable named `eval` or re-assigning `eval` is a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\n```\n\"use strict\";\n\nconst eval = 1; // SyntaxError: Unexpected eval or arguments in strict mode\n```\n\nIf the argument of `eval()` is not a string, `eval()` returns the argument unchanged. In the following example, passing a `String` object instead of a primitive causes `eval()` to return the `String` object rather than evaluating the string.\n\n```\neval(new String(\"2 + 2\")); // returns a String object containing \"2 + 2\"\neval(\"2 + 2\"); // returns 4\n```\n\nTo work around the issue in a generic fashion, you can [coerce the argument to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) yourself before passing it to `eval()`.\n\n```\nconst expression = new String(\"2 + 2\");\neval(String(expression)); // returns 4\n```\n\n### [Direct and indirect eval](#direct_and_indirect_eval)\n\nThere are two modes of `eval()` calls: _direct_ eval and _indirect_ eval. Direct eval, as the name implies, refers to _directly_ calling the global `eval` function with `eval(...)`. Everything else, including invoking it via an aliased variable, via a member access or other expression, or through the optional chaining [`?.`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) operator, is indirect.\n\n```\n// Direct call\neval(\"x + y\");\n\n// Indirect call using the comma operator to return eval\n(0, eval)(\"x + y\");\n\n// Indirect call through optional chaining\neval?.(\"x + y\");\n\n// Indirect call using a variable to store and return eval\nconst geval = eval;\ngeval(\"x + y\");\n\n// Indirect call through member access\nconst obj = { eval };\nobj.eval(\"x + y\");\n```\n\nIndirect eval can be seen as if the code is evaluated within a separate `<script>` tag. This means:\n\n*   Indirect eval works in the global scope rather than the local scope, and the code being evaluated doesn't have access to local variables within the scope where it's being called.\n    \n    ```\n    function test() {\n      const x = 2;\n      const y = 4;\n      // Direct call, uses local scope\n      console.log(eval(\"x + y\")); // Result is 6\n      // Indirect call, uses global scope\n      console.log(eval?.(\"x + y\")); // Throws because x is not defined in global scope\n    }\n    ```\n    \n*   Indirect `eval` does not inherit the strictness of the surrounding context, and is only in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) if the source string itself has a `\"use strict\"` directive.\n    \n    ```\n    function nonStrictContext() {\n      eval?.(`with (Math) console.log(PI);`);\n    }\n    function strictContext() {\n      \"use strict\";\n      eval?.(`with (Math) console.log(PI);`);\n    }\n    function strictContextStrictEval() {\n      \"use strict\";\n      eval?.(`\"use strict\"; with (Math) console.log(PI);`);\n    }\n    nonStrictContext(); // Logs 3.141592653589793\n    strictContext(); // Logs 3.141592653589793\n    strictContextStrictEval(); // Uncaught SyntaxError: Strict mode code may not include a with statement\n    ```\n    \n    On the other hand, direct eval inherits the strictness of the invoking context.\n    \n    ```\n    function nonStrictContext() {\n      eval(`with (Math) console.log(PI);`);\n    }\n    function strictContext() {\n      \"use strict\";\n      eval(`with (Math) console.log(PI);`);\n    }\n    function strictContextStrictEval() {\n      \"use strict\";\n      eval(`\"use strict\"; with (Math) console.log(PI);`);\n    }\n    nonStrictContext(); // Logs 3.141592653589793\n    strictContext(); // Uncaught SyntaxError: Strict mode code may not include a with statement\n    strictContextStrictEval(); // Uncaught SyntaxError: Strict mode code may not include a with statement\n    ```\n    \n*   `var`\\-declared variables and [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) would go into the surrounding scope if the source string is not interpreted in strict mode — for indirect eval, they become global variables. If it's a direct eval in a strict mode context, or if the `eval` source string itself is in strict mode, then `var` and function declarations do not \"leak\" into the surrounding scope.\n    \n    ```\n    // Neither context nor source string is strict,\n    // so var creates a variable in the surrounding scope\n    eval(\"var a = 1;\");\n    console.log(a); // 1\n    // Context is not strict, but eval source is strict,\n    // so b is scoped to the evaluated script\n    eval(\"'use strict'; var b = 1;\");\n    console.log(b); // ReferenceError: b is not defined\n    \n    function strictContext() {\n      \"use strict\";\n      // Context is strict, but this is indirect and the source\n      // string is not strict, so c is still global\n      eval?.(\"var c = 1;\");\n      // Direct eval in a strict context, so d is scoped\n      eval(\"var d = 1;\");\n    }\n    strictContext();\n    console.log(c); // 1\n    console.log(d); // ReferenceError: d is not defined\n    ```\n    \n    [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) and [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) declarations within the evaluated string are always scoped to that script.\n*   Direct eval may have access to additional contextual expressions. For example, in a function's body, one can use [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target):\n    \n    ```\n    function Ctor() {\n      eval(\"console.log(new.target)\");\n    }\n    new Ctor(); // [Function: Ctor]\n    ```\n    \n\n### [Never use direct eval()!](#never_use_direct_eval!)\n\nUsing direct `eval()` suffers from multiple problems:\n\n*   `eval()` executes the code it's passed with the privileges of the caller. If you run `eval()` with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, allowing third-party code to access the scope in which `eval()` was invoked (if it's a direct eval) can lead to possible attacks that reads or changes local variables.\n*   `eval()` is slower than the alternatives, since it has to invoke the JavaScript interpreter, while many other constructs are optimized by modern JS engines.\n*   Modern JavaScript interpreters convert JavaScript to machine code. This means that any concept of variable naming gets obliterated. Thus, any use of `eval()` will force the browser to do long expensive variable name lookups to figure out where the variable exists in the machine code and set its value. Additionally, new things can be introduced to that variable through `eval()`, such as changing the type of that variable, forcing the browser to re-evaluate all of the generated machine code to compensate.\n*   Minifiers give up on any minification if the scope is transitively depended on by `eval()`, because otherwise `eval()` cannot read the correct variable at runtime.\n\nThere are many cases where the use of `eval()` or related methods can be optimized or avoided altogether.\n\n#### Using indirect eval()\n\nConsider this code:\n\n```\nfunction looseJsonParse(obj) {\n  return eval(`(${obj})`);\n}\nconsole.log(looseJsonParse(\"{ a: 4 - 1, b: function () {}, c: new Date() }\"));\n```\n\nSimply using indirect eval and forcing strict mode can make the code much better:\n\n```\nfunction looseJsonParse(obj) {\n  return eval?.(`\"use strict\";(${obj})`);\n}\nconsole.log(looseJsonParse(\"{ a: 4 - 1, b: function () {}, c: new Date() }\"));\n```\n\nThe two code snippets above may seem to work the same way, but they do not; the first one using direct eval suffers from multiple problems.\n\n*   It is a great deal slower, due to more scope inspections. Notice `c: new Date()` in the evaluated string. In the indirect eval version, the object is being evaluated in the global scope, so it is safe for the interpreter to assume that `Date` refers to the global `Date()` constructor instead of a local variable called `Date`. However, in the code using direct eval, the interpreter cannot assume this. For example, in the following code, `Date` in the evaluated string doesn't refer to `window.Date()`.\n    \n    ```\n    function looseJsonParse(obj) {\n      function Date() {}\n      return eval(`(${obj})`);\n    }\n    console.log(looseJsonParse(`{ a: 4 - 1, b: function () {}, c: new Date() }`));\n    ```\n    \n    Thus, in the `eval()` version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called `Date()`.\n*   If not using strict mode, `var` declarations within the `eval()` source becomes variables in the surrounding scope. This leads to hard-to-debug issues if the string is acquired from external input, especially if there's an existing variable with the same name.\n*   Direct eval can read and mutate bindings in the surrounding scope, which may lead to external input corrupting local data.\n*   When using direct `eval`, especially when the eval source cannot be proven to be in strict mode, the engine — and build tools — have to disable all optimizations related to inlining, because the `eval()` source can depend on any variable name in its surrounding scope.\n\nHowever, using indirect `eval()` does not allow passing extra bindings other than existing global variables for the evaluated source to read. If you need to specify additional variables that the evaluated source should have access to, consider using the `Function()` constructor.\n\n#### Using the Function() constructor\n\nThe [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) constructor is very similar to the indirect eval example above: it also evaluates the JavaScript source passed to it in the global scope without reading or mutating any local bindings, and therefore allows engines to do more optimizations than direct `eval()`.\n\nThe difference between `eval()` and `Function()` is that the source string passed to `Function()` is parsed as a function body, not as a script. There are a few nuances — for example, you can use `return` statements at the top level of a function body, but not in a script.\n\nThe `Function()` constructor is useful if you wish to create local bindings within your eval source, by passing the variables as parameter bindings.\n\n```\nfunction Date(n) {\n  return [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ][n % 7 || 0];\n}\nfunction runCodeWithDateFunction(obj) {\n  return Function(\"Date\", `\"use strict\";return (${obj});`)(Date);\n}\nconsole.log(runCodeWithDateFunction(\"Date(5)\")); // Saturday\n```\n\nBoth `eval()` and `Function()` implicitly evaluate arbitrary code, and are forbidden in strict [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) settings. There are also additional safer (and faster!) alternatives to `eval()` or `Function()` for common use-cases.\n\n#### Using bracket accessors\n\nYou should not use `eval()` to access properties dynamically. Consider the following example where the property of the object to be accessed is not known until the code is executed. This can be done with `eval()`:\n\n```\nconst obj = { a: 20, b: 30 };\nconst propName = getPropName(); // returns \"a\" or \"b\"\n\nconst result = eval(`obj.${propName}`);\n```\n\nHowever, `eval()` is not necessary here — in fact, it's more error-prone, because if `propName` is not a valid identifier, it leads to a syntax error. Moreover, if `getPropName` is not a function you control, this may lead to execution of arbitrary code. Instead, use the [property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), which are much faster and safer:\n\n```\nconst obj = { a: 20, b: 30 };\nconst propName = getPropName(); // returns \"a\" or \"b\"\nconst result = obj[propName]; // obj[\"a\"] is the same as obj.a\n```\n\nYou can even use this method to access descendant properties. Using `eval()`, this would look like:\n\n```\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\n\nconst result = eval(`obj.${propPath}`); // 0\n```\n\nAvoiding `eval()` here could be done by splitting the property path and looping through the different properties:\n\n```\nfunction getDescendantProp(obj, desc) {\n  const arr = desc.split(\".\");\n  while (arr.length) {\n    obj = obj[arr.shift()];\n  }\n  return obj;\n}\n\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\nconst result = getDescendantProp(obj, propPath); // 0\n```\n\nSetting a property that way works similarly:\n\n```\nfunction setDescendantProp(obj, desc, value) {\n  const arr = desc.split(\".\");\n  while (arr.length > 1) {\n    obj = obj[arr.shift()];\n  }\n  return (obj[arr[0]] = value);\n}\n\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\nconst result = setDescendantProp(obj, propPath, 1); // obj.a.b.c is now 1\n```\n\nHowever, beware that using bracket accessors with unconstrained input is not safe either — it may lead to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\n#### Using callbacks\n\nJavaScript has [first-class functions](https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function), which means you can pass functions as arguments to other APIs, store them in variables and objects' properties, and so on. Many DOM APIs are designed with this in mind, so you can (and should) write:\n\n```\n// Instead of setTimeout(\"…\", 1000) use:\nsetTimeout(() => {\n  // …\n}, 1000);\n\n// Instead of elt.setAttribute(\"onclick\", \"…\") use:\nelt.addEventListener(\"click\", () => {\n  // …\n});\n```\n\n[Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) are also helpful as a way to create parameterized functions without concatenating strings.\n\n#### Using JSON\n\nIf the string you're calling `eval()` on contains data (for example, an array: `\"[1, 2, 3]\"`), as opposed to code, you should consider switching to [JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON), which allows the string to use a subset of JavaScript syntax to represent data.\n\nNote that since JSON syntax is limited compared to JavaScript syntax, many valid JavaScript literals will not parse as JSON. For example, trailing commas are not allowed in JSON, and property names (keys) in object literals must be enclosed in quotes. Be sure to use a JSON serializer to generate strings that will be later parsed as JSON.\n\nPassing carefully constrained data instead of arbitrary code is a good idea in general. For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in [XPath](https://developer.mozilla.org/en-US/docs/Web/XPath) instead of JavaScript code.\n\n## [Examples](#examples)\n\n### [Using eval()](#using_eval)\n\nIn the following code, both of the statements containing `eval()` return 42. The first evaluates the string `\"x + y + 1\"`; the second evaluates the string `\"42\"`.\n\n```\nconst x = 2;\nconst y = 39;\nconst z = \"42\";\neval(\"x + y + 1\"); // 42\neval(z); // 42\n```\n\n### [eval() returns the completion value of statements](#eval_returns_the_completion_value_of_statements)\n\n`eval()` returns the completion value of statements. For `if`, it would be the last expression or statement evaluated.\n\n```\nconst str = \"if (a) { 1 + 1 } else { 1 + 2 }\";\nlet a = true;\nlet b = eval(str);\n\nconsole.log(`b is: ${b}`); // b is: 2\n\na = false;\nb = eval(str);\n\nconsole.log(`b is: ${b}`); // b is: 3\n```\n\nThe following example uses `eval()` to evaluate the string `str`. This string consists of JavaScript statements that assign `z` a value of 42 if `x` is five, and assign 0 to `z` otherwise. When the second statement is executed, `eval()` will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to `z`, because the completion value of an assignment is the assigned value.\n\n```\nconst x = 5;\nconst str = `if (x === 5) {\n  console.log(\"z is 42\");\n  z = 42;\n} else {\n  z = 0;\n}`;\n\nconsole.log(\"z is \", eval(str)); // z is 42  z is 42\n```\n\nIf you assign multiple values then the last value is returned.\n\n```\nlet x = 5;\nconst str = `if (x === 5) {\n  console.log(\"z is 42\");\n  z = 42;\n  x = 420;\n} else {\n  z = 0;\n}`;\n\nconsole.log(\"x is\", eval(str)); // z is 42  x is 420\n```\n\n### [eval() as a string defining function requires \"(\" and \")\" as prefix and suffix](#eval_as_a_string_defining_function_requires_and_as_prefix_and_suffix)\n\n```\n// This is a function declaration\nconst fctStr1 = \"function a() {}\";\n// This is a function expression\nconst fctStr2 = \"(function b() {})\";\nconst fct1 = eval(fctStr1); // return undefined, but `a` is available as a global function now\nconst fct2 = eval(fctStr2); // return the function `b`\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-eval-x](https://tc39.es/ecma262/multipage/global-object.html#sec-eval-x) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "eval() - JavaScript | MDN",
    "description": "The eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
    "markdown": "# function expression - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`function`** keyword can be used to define a function inside an expression.\n\nYou can also define functions using the [`function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) or the [arrow syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction (param0) {\n  statements\n}\nfunction (param0, param1) {\n  statements\n}\nfunction (param0, param1, /* …, */ paramN) {\n  statements\n}\n\nfunction name(param0) {\n  statements\n}\nfunction name(param0, param1) {\n  statements\n}\nfunction name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the keyword `function` to avoid ambiguity with a [`function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function). The `function` keyword only begins an expression when it appears in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n[`name`](#name) Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n[`paramN`](#paramn) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nA `function` expression is very similar to, and has almost the same syntax as, a [`function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function). The main difference between a `function` expression and a `function` declaration is the _function name_, which can be omitted in `function` expressions to create _anonymous_ functions. A `function` expression can be used as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined. See also the chapter about [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n### [Function expression hoisting](#function_expression_hoisting)\n\nFunction expressions in JavaScript are not hoisted, unlike [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#hoisting). You can't use function expressions before you create them:\n\n```\nconsole.log(notHoisted); // undefined\n// Even though the variable name is hoisted,\n// the definition isn't. so it's undefined.\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function () {\n  console.log(\"bar\");\n};\n```\n\n### [Named function expression](#named_function_expression)\n\nIf you want to refer to the current function inside the function body, you need to create a named function expression. This name is then local only to the function body (scope). This avoids using the deprecated [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) property to call the function recursively.\n\n```\nconst math = {\n  factit: function factorial(n) {\n    console.log(n);\n    if (n <= 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  },\n};\n\nmath.factit(3); //3;2;1;\n```\n\nIf a function expression is named, the [`name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name) property of the function is set to that name, instead of the implicit name inferred from syntax (such as the variable the function is assigned to).\n\nUnlike declarations, the name of the function expressions is read-only.\n\n```\nfunction foo() {\n  foo = 1;\n}\nfoo();\nconsole.log(foo); // 1\n(function foo() {\n  foo = 1; // TypeError: Assignment to constant variable.\n})();\n```\n\n## [Examples](#examples)\n\n### [Using function expression](#using_function_expression)\n\nThe following example defines an unnamed function and assigns it to `x`. The function returns the square of its argument:\n\n```\nconst x = function (y) {\n  return y * y;\n};\n```\n\n### [Using a function as a callback](#using_a_function_as_a_callback)\n\nMore commonly it is used as a [callback](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function):\n\n```\nbutton.addEventListener(\"click\", function (event) {\n  console.log(\"button is clicked!\");\n});\n```\n\n### [Using an Immediately Invoked Function Expression (IIFE)](#using_an_immediately_invoked_function_expression_iife)\n\nAn anonymous function is created and called:\n\n```\n(function () {\n  console.log(\"Code runs!\");\n})();\n\n// or\n\n!function () {\n  console.log(\"Code runs!\");\n}();\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "function expression - JavaScript | MDN",
    "description": "The function keyword can be used to define a function inside an expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "markdown": "# SyntaxError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`SyntaxError`** object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\n\n`SyntaxError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`SyntaxError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`SyntaxError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError)\n\nCreates a new `SyntaxError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `SyntaxError.prototype` and shared by all `SyntaxError` instances.\n\n[`SyntaxError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `SyntaxError` instances, the initial value is the [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError) constructor.\n\n[`SyntaxError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `SyntaxError.prototype.name`, the initial value is `\"SyntaxError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Catching a SyntaxError](#catching_a_syntaxerror)\n\n```\ntry {\n  eval(\"hoo bar\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message);\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a SyntaxError](#creating_a_syntaxerror)\n\n```\ntry {\n  throw new SyntaxError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-syntaxerror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-syntaxerror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "SyntaxError - JavaScript | MDN",
    "description": "The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
    "markdown": "# globalThis - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`globalThis`** global property contains the [global `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context) value, which is usually akin to the [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe global `this` object.\n\n| Property attributes of `globalThis` |     |\n| --- | --- |\n| Writable | yes |\n| Enumerable | no  |\n| Configurable | yes |\n\n**Note:** The `globalThis` property is configurable and writable so that code authors can hide it when executing untrusted code and prevent exposing the global object.\n\n## [Description](#description)\n\nHistorically, accessing the global object has required different syntax in different JavaScript environments. On the web you can use [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/window \"window\"), [`self`](https://developer.mozilla.org/en-US/docs/Web/API/Window/self \"self\"), or [`frames`](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames \"frames\") - but in [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) only `self` will work. In Node.js none of these work, and you must instead use `global`. The `this` keyword could be used inside functions running in non–strict mode, but `this` will be `undefined` in modules and inside functions running in strict mode. You can also use `Function('return this')()`, but environments that disable [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval), like [CSP](https://developer.mozilla.org/en-US/docs/Glossary/CSP) in browsers, prevent use of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) in this way.\n\nThe `globalThis` property provides a standard way of accessing the global `this` value (and hence the global object itself) across environments. Unlike similar properties such as `window` and `self`, it's guaranteed to work in window and non-window contexts. In this way, you can access the global object in a consistent manner without having to know which environment the code is being run in. To help you remember the name, just remember that in global scope the `this` value is `globalThis`.\n\n**Note:** `globalThis` is generally the same concept as the global object (i.e. adding properties to `globalThis` makes them global variables) — this is the case for browsers and Node — but hosts are allowed to provide a different value for `globalThis` that's unrelated to the global object.\n\n### [HTML and the WindowProxy](#html_and_the_windowproxy)\n\nIn many engines `globalThis` will be a reference to the actual global object, but in web browsers, due to iframe and cross-window security considerations, it references a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) around the actual global object (which you can't directly access). This distinction is rarely relevant in common usage, but important to be aware of.\n\n### [Naming](#naming)\n\nSeveral other popular name choices such as `self` and `global` were removed from consideration because of their potential to break compatibility with existing code. See the [language proposal's \"naming\" document](https://github.com/tc39/proposal-global/blob/master/NAMING.md) for more details.\n\n`globalThis` is, quite literally, the global `this` value. It's the same value as the `this` value in a non-strict function called without an object. It's also the value of `this` in the global scope of a script.\n\n## [Examples](#examples)\n\n### [Search for the global across environments](#search_for_the_global_across_environments)\n\nUsually, the global object does not need to be explicitly specified — its properties are automatically accessible as global variables.\n\n```\nconsole.log(window.Math === Math); // true\n```\n\nHowever, one case where one needs to explicitly access the global object is when _writing_ to it, usually for the purpose of [polyfills](https://developer.mozilla.org/en-US/docs/Glossary/Polyfill).\n\nPrior to `globalThis`, the only reliable cross-platform way to get the global object for an environment was `Function('return this')()`. However, this causes [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) violations in some settings, so authors would use a piecewise definition like this (slightly adapted from the [original core-js source](https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js)):\n\n```\nfunction check(it) {\n  // Math is known to exist as a global in every environment.\n  return it && it.Math === Math && it;\n}\n\nconst globalObject =\n  check(typeof window === \"object\" && window) ||\n  check(typeof self === \"object\" && self) ||\n  check(typeof global === \"object\" && global) ||\n  // This returns undefined when running in strict mode\n  (function () {\n    return this;\n  })() ||\n  Function(\"return this\")();\n```\n\nAfter obtaining the global object, we can define new globals on it. For example, adding an implementation for [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl):\n\n```\nif (typeof globalObject.Intl === \"undefined\") {\n  // No Intl in this environment; define our own on the global scope\n  Object.defineProperty(globalObject, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n```\n\nWith `globalThis` available, the additional search for the global across environments is not necessary anymore:\n\n```\nif (typeof globalThis.Intl === \"undefined\") {\n  Object.defineProperty(globalThis, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-globalthis](https://tc39.es/ecma262/multipage/global-object.html#sec-globalthis) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "globalThis - JavaScript | MDN",
    "description": "The globalThis global property contains the global this value, which is usually akin to the global object.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "markdown": "# EvalError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`EvalError`** object indicates an error regarding the global [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) function. This exception is not thrown by JavaScript anymore, however the `EvalError` object remains for compatibility.\n\n`EvalError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`EvalError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`EvalError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/EvalError)\n\nCreates a new `EvalError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `EvalError.prototype` and shared by all `EvalError` instances.\n\n[`EvalError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `EvalError` instances, the initial value is the [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/EvalError) constructor.\n\n[`EvalError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `EvalError.prototype.name`, the initial value is `\"EvalError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Creating an EvalError](#creating_an_evalerror)\n\n```\ntry {\n  throw new EvalError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof EvalError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"EvalError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-evalerror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-evalerror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "EvalError - JavaScript | MDN",
    "description": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
    "markdown": "# function\\* expression - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`function*`** keyword can be used to define a generator function inside an expression.\n\nYou can also define generator functions using the [`function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction* (param0) {\n  statements\n}\nfunction* (param0, param1) {\n  statements\n}\nfunction* (param0, param1, /* …, */ paramN) {\n  statements\n}\n\nfunction* name(param0) {\n  statements\n}\nfunction* name(param0, param1) {\n  statements\n}\nfunction* name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the keyword `function` to avoid ambiguity with a [`function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*). The `function` keyword only begins an expression when it appears in a context that cannot accept statements.\n\n### [Parameters](#parameters)\n\n[`name`](#name) Optional\n\nThe function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n\n[`paramN`](#paramn) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nA `function*` expression is very similar to, and has almost the same syntax as, a [`function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*). The main difference between a `function*` expression and a `function*` declaration is the _function name_, which can be omitted in `function*` expressions to create _anonymous_ functions. A `function*` expression can be used as an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expression) which runs as soon as it is defined, allowing you to create an ad-hoc [iterable iterator object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). See also the chapter about [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) for more information.\n\n## [Examples](#examples)\n\n### [Using function\\* expression](#using_function_expression)\n\nThe following example defines an unnamed generator function and assigns it to `x`. The function yields the square of its argument:\n\n```\nconst x = function* (y) {\n  yield y * y;\n};\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-generator-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "function* expression - JavaScript | MDN",
    "description": "The function* keyword can be used to define a generator function inside an expression.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "markdown": "# Infinity - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Infinity`** global property is a numeric value representing infinity.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe same number value as [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY).\n\n| Property attributes of `Infinity` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`Infinity` is a property of the _global object_. In other words, it is a variable in global scope.\n\nThe value `Infinity` (positive infinity) is greater than any other number.\n\nThis value behaves slightly differently than mathematical infinity; see [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) for details.\n\n## [Examples](#examples)\n\n### [Using Infinity](#using_infinity)\n\n```\nconsole.log(Infinity); /* Infinity */\nconsole.log(Infinity + 1); /* Infinity */\nconsole.log(Math.pow(10, 1000)); /* Infinity */\nconsole.log(Math.log(0)); /* -Infinity */\nconsole.log(1 / Infinity); /* 0 */\nconsole.log(1 / 0); /* Infinity */\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-value-properties-of-the-global-object-infinity](https://tc39.es/ecma262/multipage/global-object.html#sec-value-properties-of-the-global-object-infinity) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Infinity - JavaScript | MDN",
    "description": "The Infinity global property is a numeric value representing infinity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",
    "markdown": "# Inheritance and the prototype chain - JavaScript\n\nIn programming, _inheritance_ refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using [objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects). Each object has an internal link to another object called its _prototype_. That prototype object has a prototype of its own, and so on until an object is reached with `null` as its prototype. By definition, `null` has no prototype and acts as the final link in this **prototype chain**. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like [static dispatching](https://en.wikipedia.org/wiki/Static_dispatch) do not exist in JavaScript.\n\nJavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is [dynamic](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#dynamic_and_weak_typing) and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.\n\n## [Inheritance with the prototype chain](#inheritance_with_the_prototype_chain)\n\n### [Inheriting properties](#inheriting_properties)\n\nJavaScript objects are dynamic \"bags\" of properties (referred to as **own properties**). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.\n\n**Note:** Following the ECMAScript standard, the notation `someObject.[[Prototype]]` is used to designate the prototype of `someObject`. The `[[Prototype]]` internal slot can be accessed and modified with the [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) and [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) functions respectively. This is equivalent to the JavaScript accessor [`__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) which is non-standard but de-facto implemented by many JavaScript engines. To prevent confusion while keeping it succinct, in our notation we will avoid using `obj.__proto__` but use `obj.[[Prototype]]` instead. This corresponds to `Object.getPrototypeOf(obj)`.\n\nIt should not be confused with the `func.prototype` property of functions, which instead specifies the `[[Prototype]]` to be assigned to all _instances_ of objects created by the given function when used as a constructor. We will discuss the `prototype` property of constructor functions in [a later section](#constructors).\n\nThere are several ways to specify the `[[Prototype]]` of an object, which are listed in [a later section](#different_ways_of_creating_and_mutating_prototype_chains). For now, we will use the [`__proto__` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) for illustration. It's worth noting that the `{ __proto__: ... }` syntax is different from the `obj.__proto__` accessor: the former is standard and not deprecated.\n\nIn an object literal like `{ a: 1, b: 2, __proto__: c }`, the value `c` (which has to be either `null` or another object) will become the `[[Prototype]]` of the object represented by the literal, while the other keys like `a` and `b` will become the _own properties_ of the object. This syntax reads very naturally, since `[[Prototype]]` is just an \"internal property\" of the object.\n\nHere is what happens when trying to access a property:\n\n```\nconst o = {\n  a: 1,\n  b: 2,\n  // __proto__ sets the [[Prototype]]. It's specified here\n  // as another object literal.\n  __proto__: {\n    b: 3,\n    c: 4,\n  },\n};\n\n// o.[[Prototype]] has properties b and c.\n// o.[[Prototype]].[[Prototype]] is Object.prototype (we will explain\n// what that means later).\n// Finally, o.[[Prototype]].[[Prototype]].[[Prototype]] is null.\n// This is the end of the prototype chain, as null,\n// by definition, has no [[Prototype]].\n// Thus, the full prototype chain looks like:\n// { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> Object.prototype ---> null\n\nconsole.log(o.a); // 1\n// Is there an 'a' own property on o? Yes, and its value is 1.\n\nconsole.log(o.b); // 2\n// Is there a 'b' own property on o? Yes, and its value is 2.\n// The prototype also has a 'b' property, but it's not visited.\n// This is called Property Shadowing\n\nconsole.log(o.c); // 4\n// Is there a 'c' own property on o? No, check its prototype.\n// Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4.\n\nconsole.log(o.d); // undefined\n// Is there a 'd' own property on o? No, check its prototype.\n// Is there a 'd' own property on o.[[Prototype]]? No, check its prototype.\n// o.[[Prototype]].[[Prototype]] is Object.prototype and\n// there is no 'd' property by default, check its prototype.\n// o.[[Prototype]].[[Prototype]].[[Prototype]] is null, stop searching,\n// no property found, return undefined.\n```\n\nSetting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when it's intercepted by a [getter or setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters).\n\nSimilarly, you can create longer prototype chains, and a property will be sought on all of them.\n\n```\nconst o = {\n  a: 1,\n  b: 2,\n  // __proto__ sets the [[Prototype]]. It's specified here\n  // as another object literal.\n  __proto__: {\n    b: 3,\n    c: 4,\n    __proto__: {\n      d: 5,\n    },\n  },\n};\n\n// { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> { d: 5 } ---> Object.prototype ---> null\n\nconsole.log(o.d); // 5\n```\n\n### [Inheriting \"methods\"](#inheriting_methods)\n\nJavaScript does not have \"[methods](https://developer.mozilla.org/en-US/docs/Glossary/Method)\" in the form that class-based languages define them. In JavaScript, any function can be added to an object in the form of a property. An inherited function acts just as any other property, including property shadowing as shown above (in this case, a form of _method overriding_).\n\nWhen an inherited function is executed, the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) points to the inheriting object, not to the prototype object where the function is an own property.\n\n```\nconst parent = {\n  value: 2,\n  method() {\n    return this.value + 1;\n  },\n};\n\nconsole.log(parent.method()); // 3\n// When calling parent.method in this case, 'this' refers to parent\n\n// child is an object that inherits from parent\nconst child = {\n  __proto__: parent,\n};\nconsole.log(child.method()); // 3\n// When child.method is called, 'this' refers to child.\n// So when child inherits the method of parent,\n// The property 'value' is sought on child. However, since child\n// doesn't have an own property called 'value', the property is\n// found on the [[Prototype]], which is parent.value.\n\nchild.value = 4; // assign the value 4 to the property 'value' on child.\n// This shadows the 'value' property on parent.\n// The child object now looks like:\n// { value: 4, __proto__: { value: 2, method: [Function] } }\nconsole.log(child.method()); // 5\n// Since child now has the 'value' property, 'this.value' means\n// child.value instead\n```\n\n## [Constructors](#constructors)\n\nThe power of prototypes is that we can reuse a set of properties if they should be present on every instance — especially for methods. Suppose we are to create a series of boxes, where each box is an object that contains a value which can be accessed through a `getValue` function. A naive implementation would be:\n\n```\nconst boxes = [\n  { value: 1, getValue() { return this.value; } },\n  { value: 2, getValue() { return this.value; } },\n  { value: 3, getValue() { return this.value; } },\n];\n```\n\nThis is subpar, because each instance has its own function property that does the same thing, which is redundant and unnecessary. Instead, we can move `getValue` to the `[[Prototype]]` of all boxes:\n\n```\nconst boxPrototype = {\n  getValue() {\n    return this.value;\n  },\n};\n\nconst boxes = [\n  { value: 1, __proto__: boxPrototype },\n  { value: 2, __proto__: boxPrototype },\n  { value: 3, __proto__: boxPrototype },\n];\n```\n\nThis way, all boxes' `getValue` method will refer to the same function, lowering memory usage. However, manually binding the `__proto__` for every object creation is still very inconvenient. This is when we would use a _constructor_ function, which automatically sets the `[[Prototype]]` for every object manufactured. Constructors are functions called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).\n\n```\n// A constructor function\nfunction Box(value) {\n  this.value = value;\n}\n\n// Properties all boxes created from the Box() constructor\n// will have\nBox.prototype.getValue = function () {\n  return this.value;\n};\n\nconst boxes = [new Box(1), new Box(2), new Box(3)];\n```\n\nWe say that `new Box(1)` is an _instance_ created from the `Box` constructor function. `Box.prototype` is not much different from the `boxPrototype` object we created previously — it's just a plain object. Every instance created from a constructor function will automatically have the constructor's [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property as its `[[Prototype]]` — that is, `Object.getPrototypeOf(new Box()) === Box.prototype`. `Constructor.prototype` by default has one own property: [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor), which references the constructor function itself — that is, `Box.prototype.constructor === Box`. This allows one to access the original constructor from any instance.\n\n**Note:** If a non-primitive is returned from the constructor function, that value will become the result of the `new` expression. In this case the `[[Prototype]]` may not be correctly bound — but this should not happen much in practice.\n\nThe above constructor function can be rewritten in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) as:\n\n```\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  // Methods are created on Box.prototype\n  getValue() {\n    return this.value;\n  }\n}\n```\n\nClasses are syntax sugar over constructor functions, which means you can still manipulate `Box.prototype` to change the behavior of all instances. However, because classes are designed to be an abstraction over the underlying prototype mechanism, we will use the more-lightweight constructor function syntax for this tutorial to fully demonstrate how prototypes work.\n\nBecause `Box.prototype` references the same object as the `[[Prototype]]` of all instances, we can change the behavior of all instances by mutating `Box.prototype`.\n\n```\nfunction Box(value) {\n  this.value = value;\n}\nBox.prototype.getValue = function () {\n  return this.value;\n};\nconst box = new Box(1);\n\n// Mutate Box.prototype after an instance has already been created\nBox.prototype.getValue = function () {\n  return this.value + 1;\n};\nbox.getValue(); // 2\n```\n\nA corollary is, _re-assigning_ `Constructor.prototype` (`Constructor.prototype = ...`) is a bad idea for two reasons:\n\n*   The `[[Prototype]]` of instances created before the reassignment is now referencing a different object from the `[[Prototype]]` of instances created after the reassignment — mutating one's `[[Prototype]]` no longer mutates the other.\n*   Unless you manually re-set the `constructor` property, the constructor function can no longer be traced from `instance.constructor`, which may break user expectation. Some built-in operations will read the `constructor` property as well, and if it is not set, they may not work as expected.\n\n`Constructor.prototype` is only useful when constructing instances. It has nothing to do with `Constructor.[[Prototype]]`, which is the constructor function's _own_ prototype, which is `Function.prototype` — that is, `Object.getPrototypeOf(Constructor) === Function.prototype`.\n\n### [Implicit constructors of literals](#implicit_constructors_of_literals)\n\nSome literal syntaxes in JavaScript create instances that implicitly set the `[[Prototype]]`. For example:\n\n```\n// Object literals (without the `__proto__` key) automatically\n// have `Object.prototype` as their `[[Prototype]]`\nconst object = { a: 1 };\nObject.getPrototypeOf(object) === Object.prototype; // true\n\n// Array literals automatically have `Array.prototype` as their `[[Prototype]]`\nconst array = [1, 2, 3];\nObject.getPrototypeOf(array) === Array.prototype; // true\n\n// RegExp literals automatically have `RegExp.prototype` as their `[[Prototype]]`\nconst regexp = /abc/;\nObject.getPrototypeOf(regexp) === RegExp.prototype; // true\n```\n\nWe can \"de-sugar\" them into their constructor form.\n\n```\nconst array = new Array(1, 2, 3);\nconst regexp = new RegExp(\"abc\");\n```\n\nFor example, \"array methods\" like [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) are simply methods defined on `Array.prototype`, which is why they are automatically available on all array instances.\n\n**Warning:** There is one misfeature that used to be prevalent — extending `Object.prototype` or one of the other built-in prototypes. An example of this misfeature is, defining `Array.prototype.myMethod = function () {...}` and then using `myMethod` on all array instances.\n\nThis misfeature is called _monkey patching_. Doing monkey patching risks forward compatibility, because if the language adds this method in the future but with a different signature, your code will break. It has led to incidents like the [SmooshGate](https://developer.chrome.com/blog/smooshgate/), and can be a great nuisance for the language to advance since JavaScript tries to \"not break the web\".\n\nThe **only** good reason for extending a built-in prototype is to backport the features of newer JavaScript engines, like `Array.prototype.forEach`.\n\nIt may be interesting to note that due to historical reasons, some built-in constructors' `prototype` property are instances themselves. For example, `Number.prototype` is a number 0, `Array.prototype` is an empty array, and `RegExp.prototype` is `/(?:)/`.\n\n```\nNumber.prototype + 1; // 1\nArray.prototype.map((x) => x + 1); // []\nString.prototype + \"a\"; // \"a\"\nRegExp.prototype.source; // \"(?:)\"\nFunction.prototype(); // Function.prototype is a no-op function by itself\n```\n\nHowever, this is not the case for user-defined constructors, nor for modern constructors like `Map`.\n\n```\nMap.prototype.get(1);\n// Uncaught TypeError: get method called on incompatible Map.prototype\n```\n\n### [Building longer inheritance chains](#building_longer_inheritance_chains)\n\nThe `Constructor.prototype` property will become the `[[Prototype]]` of the constructor's instances, as-is — including `Constructor.prototype`'s own `[[Prototype]]`. By default, `Constructor.prototype` is a _plain object_ — that is, `Object.getPrototypeOf(Constructor.prototype) === Object.prototype`. The only exception is `Object.prototype` itself, whose `[[Prototype]]` is `null` — that is, `Object.getPrototypeOf(Object.prototype) === null`. Therefore, a typical constructor will build the following prototype chain:\n\n```\nfunction Constructor() {}\n\nconst obj = new Constructor();\n// obj ---> Constructor.prototype ---> Object.prototype ---> null\n```\n\nTo build longer prototype chains, we can set the `[[Prototype]]` of `Constructor.prototype` via the [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) function.\n\n```\nfunction Base() {}\nfunction Derived() {}\n// Set the `[[Prototype]]` of `Derived.prototype`\n// to `Base.prototype`\nObject.setPrototypeOf(Derived.prototype, Base.prototype);\n\nconst obj = new Derived();\n// obj ---> Derived.prototype ---> Base.prototype ---> Object.prototype ---> null\n```\n\nIn class terms, this is equivalent to using the [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) syntax.\n\n```\nclass Base {}\nclass Derived extends Base {}\n\nconst obj = new Derived();\n// obj ---> Derived.prototype ---> Base.prototype ---> Object.prototype ---> null\n```\n\nYou may also see some legacy code using [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) to build the inheritance chain. However, because this reassigns the `prototype` property and removes the [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property, it can be more error-prone, while performance gains may not be apparent if the constructors haven't created any instances yet.\n\n```\nfunction Base() {}\nfunction Derived() {}\n// Re-assigns `Derived.prototype` to a new object\n// with `Base.prototype` as its `[[Prototype]]`\n// DON'T DO THIS — use Object.setPrototypeOf to mutate it instead\nDerived.prototype = Object.create(Base.prototype);\n```\n\n## [Inspecting prototypes: a deeper dive](#inspecting_prototypes_a_deeper_dive)\n\nLet's look at what happens behind the scenes in a bit more detail.\n\nIn JavaScript, as mentioned above, functions are able to have properties. All functions have a special property named `prototype`. Please note that the code below is free-standing (it is safe to assume there is no other JavaScript on the webpage other than the below code). For the best learning experience, it is highly recommended that you open a console, navigate to the \"console\" tab, copy-and-paste in the below JavaScript code, and run it by pressing the Enter/Return key. (The console is included in most web browser's Developer Tools. More information is available for [Firefox Developer Tools](https://firefox-source-docs.mozilla.org/devtools-user/index.html), [Chrome DevTools](https://developer.chrome.com/docs/devtools/), and [Edge DevTools](https://docs.microsoft.com/archive/microsoft-edge/legacy/developer/).)\n\n```\nfunction doSomething() {}\nconsole.log(doSomething.prototype);\n// It does not matter how you declare the function; a\n// function in JavaScript will always have a default\n// prototype property — with one exception: an arrow\n// function doesn't have a default prototype property:\nconst doSomethingFromArrowFunction = () => {};\nconsole.log(doSomethingFromArrowFunction.prototype);\n```\n\nAs seen above, `doSomething()` has a default `prototype` property, as demonstrated by the console. After running this code, the console should have displayed an object that looks similar to this.\n\n{\n  constructor: ƒ doSomething(),\n  \\[\\[Prototype\\]\\]: {\n    constructor: ƒ Object(),\n    hasOwnProperty: ƒ hasOwnProperty(),\n    isPrototypeOf: ƒ isPrototypeOf(),\n    propertyIsEnumerable: ƒ propertyIsEnumerable(),\n    toLocaleString: ƒ toLocaleString(),\n    toString: ƒ toString(),\n    valueOf: ƒ valueOf()\n  }\n}\n\n**Note:** The Chrome console uses `[[Prototype]]` to denote the object's prototype, following the spec's terms; Firefox uses `<prototype>`. For consistency we will use `[[Prototype]]`.\n\nWe can add properties to the prototype of `doSomething()`, as shown below.\n\n```\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\";\nconsole.log(doSomething.prototype);\n```\n\nThis results in:\n\n{\n  foo: \"bar\",\n  constructor: ƒ doSomething(),\n  \\[\\[Prototype\\]\\]: {\n    constructor: ƒ Object(),\n    hasOwnProperty: ƒ hasOwnProperty(),\n    isPrototypeOf: ƒ isPrototypeOf(),\n    propertyIsEnumerable: ƒ propertyIsEnumerable(),\n    toLocaleString: ƒ toLocaleString(),\n    toString: ƒ toString(),\n    valueOf: ƒ valueOf()\n  }\n}\n\nWe can now use the `new` operator to create an instance of `doSomething()` based on this prototype. To use the new operator, call the function normally except prefix it with `new`. Calling a function with the `new` operator returns an object that is an instance of the function. Properties can then be added onto this object.\n\nTry the following code:\n\n```\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\"; // add a property onto the prototype\nconst doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\"; // add a property onto the object\nconsole.log(doSomeInstancing);\n```\n\nThis results in an output similar to the following:\n\n{\n  prop: \"some value\",\n  \\[\\[Prototype\\]\\]: {\n    foo: \"bar\",\n    constructor: ƒ doSomething(),\n    \\[\\[Prototype\\]\\]: {\n      constructor: ƒ Object(),\n      hasOwnProperty: ƒ hasOwnProperty(),\n      isPrototypeOf: ƒ isPrototypeOf(),\n      propertyIsEnumerable: ƒ propertyIsEnumerable(),\n      toLocaleString: ƒ toLocaleString(),\n      toString: ƒ toString(),\n      valueOf: ƒ valueOf()\n    }\n  }\n}\n\nAs seen above, the `[[Prototype]]` of `doSomeInstancing` is `doSomething.prototype`. But, what does this do? When you access a property of `doSomeInstancing`, the runtime first looks to see if `doSomeInstancing` has that property.\n\nIf `doSomeInstancing` does not have the property, then the runtime looks for the property in `doSomeInstancing.[[Prototype]]` (a.k.a. `doSomething.prototype`). If `doSomeInstancing.[[Prototype]]` has the property being looked for, then that property on `doSomeInstancing.[[Prototype]]` is used.\n\nOtherwise, if `doSomeInstancing.[[Prototype]]` does not have the property, then `doSomeInstancing.[[Prototype]].[[Prototype]]` is checked for the property. By default, the `[[Prototype]]` of any function's `prototype` property is `Object.prototype`. So, `doSomeInstancing.[[Prototype]].[[Prototype]]` (a.k.a. `doSomething.prototype.[[Prototype]]` (a.k.a. `Object.prototype`)) is then looked through for the property being searched for.\n\nIf the property is not found in `doSomeInstancing.[[Prototype]].[[Prototype]]`, then `doSomeInstancing.[[Prototype]].[[Prototype]].[[Prototype]]` is looked through. However, there is a problem: `doSomeInstancing.[[Prototype]].[[Prototype]].[[Prototype]]` does not exist, because `Object.prototype.[[Prototype]]` is `null`. Then, and only then, after the entire prototype chain of `[[Prototype]]`'s is looked through, the runtime asserts that the property does not exist and conclude that the value at the property is `undefined`.\n\nLet's try entering some more code into the console:\n\n```\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\";\nconst doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\";\nconsole.log(\"doSomeInstancing.prop:     \", doSomeInstancing.prop);\nconsole.log(\"doSomeInstancing.foo:      \", doSomeInstancing.foo);\nconsole.log(\"doSomething.prop:          \", doSomething.prop);\nconsole.log(\"doSomething.foo:           \", doSomething.foo);\nconsole.log(\"doSomething.prototype.prop:\", doSomething.prototype.prop);\nconsole.log(\"doSomething.prototype.foo: \", doSomething.prototype.foo);\n```\n\nThis results in the following:\n\ndoSomeInstancing.prop:      some value\ndoSomeInstancing.foo:       bar\ndoSomething.prop:           undefined\ndoSomething.foo:            undefined\ndoSomething.prototype.prop: undefined\ndoSomething.prototype.foo:  bar\n\n## [Different ways of creating and mutating prototype chains](#different_ways_of_creating_and_mutating_prototype_chains)\n\nWe have encountered many ways to create objects and change their prototype chains. We will systematically summarize the different ways, comparing each approach's pros and cons.\n\n### [Objects created with syntax constructs](#objects_created_with_syntax_constructs)\n\n```\nconst o = { a: 1 };\n// The newly created object o has Object.prototype as its [[Prototype]]\n// Object.prototype has null as its prototype.\n// o ---> Object.prototype ---> null\n\nconst b = [\"yo\", \"whadup\", \"?\"];\n// Arrays inherit from Array.prototype\n// (which has methods indexOf, forEach, etc.)\n// The prototype chain looks like:\n// b ---> Array.prototype ---> Object.prototype ---> null\n\nfunction f() {\n  return 2;\n}\n// Functions inherit from Function.prototype\n// (which has methods call, bind, etc.)\n// f ---> Function.prototype ---> Object.prototype ---> null\n\nconst p = { b: 2, __proto__: o };\n// It is possible to point the newly created object's [[Prototype]] to\n// another object via the __proto__ literal property. (Not to be confused\n// with Object.prototype.__proto__ accessors)\n// p ---> o ---> Object.prototype ---> null\n```\n\nWhen using the `__proto__` key in [object initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), pointing the `__proto__` key to something that is not an object only fails silently without throwing an exception. Contrary to the [`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) setter, `__proto__` in object literal initializers is standardized and optimized, and can even be more performant than [`Object.create`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create). Declaring extra own properties on the object at creation is more ergonomic than [`Object.create`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).\n\n### [With constructor functions](#with_constructor_functions)\n\n```\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype.addVertex = function (v) {\n  this.vertices.push(v);\n};\n\nconst g = new Graph();\n// g is an object with own properties 'vertices' and 'edges'.\n// g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed.\n```\n\nConstructor functions have been available since very early JavaScript. Therefore, it is very fast, very standard, and very JIT-optimizable. However, it's also hard to \"do properly\" because methods added this way are enumerable by default, which is inconsistent with the class syntax or how built-in methods behave. Doing longer inheritance chains is also error-prone, as previously demonstrated.\n\n### [With Object.create()](#with_object.create)\n\nCalling [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) creates a new object. The `[[Prototype]]` of this object is the first argument of the function:\n\n```\nconst a = { a: 1 };\n// a ---> Object.prototype ---> null\n\nconst b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (inherited)\n\nconst c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nconst d = Object.create(null);\n// d ---> null (d is an object that has null directly as its prototype)\nconsole.log(d.hasOwnProperty);\n// undefined, because d doesn't inherit from Object.prototype\n```\n\nSimilar to the `__proto__` key in object initializers, `Object.create()` allows directly setting the prototype of an object at creation time, which permits the runtime to further optimize the object. It also allows the creation of objects with `null` prototype, using `Object.create(null)`. The second parameter of `Object.create()` allows you to precisely specify the attributes of each property in the new object, which can be a double-edged sword:\n\n*   It allows you to create non-enumerable properties, etc., during object creation, which is not possible with object literals.\n*   It is much more verbose and error-prone than object literals.\n*   It may be slower than object literals, especially when creating many properties.\n\n### [With classes](#with_classes)\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.name = \"Rectangle\";\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass FilledRectangle extends Rectangle {\n  constructor(height, width, color) {\n    super(height, width);\n    this.name = \"Filled rectangle\";\n    this.color = color;\n  }\n}\n\nconst filledRectangle = new FilledRectangle(5, 10, \"blue\");\n// filledRectangle ---> FilledRectangle.prototype ---> Rectangle.prototype ---> Object.prototype ---> null\n```\n\nClasses offer the highest readability and maintainability when defining complex inheritance structures. [Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) are a feature with no trivial replacement in prototypal inheritance. However, classes are less optimized than traditional constructor functions and are not supported in older environments.\n\n### [With Object.setPrototypeOf()](#with_object.setprototypeof)\n\nWhile all methods above will set the prototype chain at object creation time, [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) allows mutating the `[[Prototype]]` internal property of an existing object. It can even force a prototype on a prototype-less object created with `Object.create(null)` or remove the prototype of an object by setting it to `null`.\n\n```\nconst obj = { a: 1 };\nconst anotherObj = { b: 2 };\nObject.setPrototypeOf(obj, anotherObj);\n// obj ---> anotherObj ---> Object.prototype ---> null\n```\n\nHowever, you should set the prototype during creation if possible, because setting the prototype dynamically disrupts all optimizations that engines have made to the prototype chain. It might cause some engines to recompile your code for de-optimization, to make it work according to the specs.\n\n### [With the \\_\\_proto\\_\\_ accessor](#with_the___proto___accessor)\n\nAll objects inherit the [`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) setter, which can be used to set the `[[Prototype]]` of an existing object (if the `__proto__` key is not overridden on the object).\n\n**Warning:** `Object.prototype.__proto__` accessors are **non-standard** and deprecated. You should almost always use `Object.setPrototypeOf` instead.\n\n```\nconst obj = {};\n// DON'T USE THIS: for example only.\nobj.__proto__ = { barProp: \"bar val\" };\nobj.__proto__.__proto__ = { fooProp: \"foo val\" };\nconsole.log(obj.fooProp);\nconsole.log(obj.barProp);\n```\n\nCompared to `Object.setPrototypeOf`, setting `__proto__` to something that is not an object fails silently without throwing an exception. It also has slightly better browser support. However, it is non-standard and deprecated. You should almost always use `Object.setPrototypeOf` instead.\n\n## [Performance](#performance)\n\nThe lookup time for properties that are high up on the prototype chain can have a negative impact on the performance, and this may be significant in the code where performance is critical. Additionally, trying to access nonexistent properties will always traverse the full prototype chain.\n\nAlso, when iterating over the properties of an object, **every** enumerable property that is on the prototype chain will be enumerated. To check whether an object has a property defined on _itself_ and not somewhere on its prototype chain, it is necessary to use the [`hasOwnProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) or [`Object.hasOwn`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) methods. All objects, except those with `null` as `[[Prototype]]`, inherit [`hasOwnProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) from `Object.prototype` — unless it has been overridden further down the prototype chain. To give you a concrete example, let's take the above graph example code to illustrate it:\n\n```\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype.addVertex = function (v) {\n  this.vertices.push(v);\n};\n\nconst g = new Graph();\n// g ---> Graph.prototype ---> Object.prototype ---> null\n\ng.hasOwnProperty(\"vertices\"); // true\nObject.hasOwn(g, \"vertices\"); // true\n\ng.hasOwnProperty(\"nope\"); // false\nObject.hasOwn(g, \"nope\"); // false\n\ng.hasOwnProperty(\"addVertex\"); // false\nObject.hasOwn(g, \"addVertex\"); // false\n\nObject.getPrototypeOf(g).hasOwnProperty(\"addVertex\"); // true\n```\n\nNote: It is **not** enough to check whether a property is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). The property might very well exist, but its value just happens to be set to `undefined`.\n\n## [Conclusion](#conclusion)\n\nJavaScript may be a bit confusing for developers coming from Java or C++, as it's all dynamic, all runtime, and it has no static types at all. Everything is either an object (instance) or a function (constructor), and even functions themselves are instances of the `Function` constructor. Even the \"classes\" as syntax constructs are just constructor functions at runtime.\n\nAll constructor functions in JavaScript have a special property called `prototype`, which works with the `new` operator. The reference to the prototype object is copied to the internal `[[Prototype]]` property of the new instance. For example, when you do `const a1 = new A()`, JavaScript (after creating the object in memory and before running function `A()` with `this` defined to it) sets `a1.[[Prototype]] = A.prototype`. When you then access properties of the instance, JavaScript first checks whether they exist on that object directly, and if not, it looks in `[[Prototype]]`. `[[Prototype]]` is looked at _recursively_, i.e. `a1.doSomething`, `Object.getPrototypeOf(a1).doSomething`, `Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething` etc., until it's found or `Object.getPrototypeOf` returns `null`. This means that all properties defined on `prototype` are effectively shared by all instances, and you can even later change parts of `prototype` and have the changes appear in all existing instances.\n\nIf, in the example above, you do `const a1 = new A(); const a2 = new A();`, then `a1.doSomething` would actually refer to `Object.getPrototypeOf(a1).doSomething` — which is the same as the `A.prototype.doSomething` you defined, i.e. `Object.getPrototypeOf(a1).doSomething === Object.getPrototypeOf(a2).doSomething === A.prototype.doSomething`.\n\nIt is essential to understand the prototypal inheritance model before writing complex code that makes use of it. Also, be aware of the length of the prototype chains in your code and break them up if necessary to avoid possible performance problems. Further, the native prototypes should **never** be extended unless it is for the sake of compatibility with newer JavaScript features.",
    "title": "Inheritance and the prototype chain - JavaScript | MDN",
    "description": "In programming, inheritance refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype and acts as the final link in this prototype chain. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like static dispatching do not exist in JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
    "markdown": "# TypedArray - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nA **_TypedArray_** object describes an array-like view of an underlying [binary data buffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). There is no global property named `TypedArray`, nor is there a directly visible `TypedArray` constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `TypedArray` constructor (often referred to as `%TypedArray%` to indicate its \"intrinsicness\", since it does not correspond to any global exposed to a JavaScript program) serves as the common superclass of all `TypedArray` subclasses. Think about `%TypedArray%` as an \"abstract class\" providing a common interface of utility methods for all typed array subclasses. This constructor is not directly exposed: there is no global `TypedArray` property. It is only accessible through `Object.getPrototypeOf(Int8Array)` and similar.\n\nWhen creating an instance of a `TypedArray` subclass (e.g. `Int8Array`), an array buffer is created internally in memory or, if an `ArrayBuffer` object is given as constructor argument, that `ArrayBuffer` is used instead. The buffer address is saved as an internal property of the instance and all the methods of `%TypedArray%.prototype` will set and get values based on that array buffer address.\n\n### [TypedArray objects](#typedarray_objects)\n\n| Type | Value Range | Size in bytes | Web IDL type |\n| --- | --- | --- | --- |\n| [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) | \\-128 to 127 | 1   | `byte` |\n| [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) | 0 to 255 | 1   | `octet` |\n| [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) | 0 to 255 | 1   | `octet` |\n| [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) | \\-32768 to 32767 | 2   | `short` |\n| [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) | 0 to 65535 | 2   | `unsigned short` |\n| [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) | \\-2147483648 to 2147483647 | 4   | `long` |\n| [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) | 0 to 4294967295 | 4   | `unsigned long` |\n| [`Float16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array) | `-65504` to `65504` | 2   | N/A |\n| [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) | `-3.4e38` to `3.4e38` | 4   | `unrestricted float` |\n| [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) | `-1.8e308` to `1.8e308` | 8   | `unrestricted double` |\n| [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) | \\-263 to 263 - 1 | 8   | `bigint` |\n| [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array) | 0 to 264 - 1 | 8   | `bigint` |\n\n### [Value encoding and normalization](#value_encoding_and_normalization)\n\nAll typed arrays operate on `ArrayBuffer`s, where you can observe the exact byte representation of each element, so how the numbers are encoded in binary format is significant.\n\n*   Unsigned integer arrays (`Uint8Array`, `Uint16Array`, `Uint32Array`, and `BigUint64Array`) store the number directly in binary.\n*   Signed integer arrays (`Int8Array`, `Int16Array`, `Int32Array`, and `BigInt64Array`) store the number using [two's complement](https://en.wikipedia.org/wiki/Two's_complement).\n*   Floating-point arrays (`Float16Array`, `Float32Array`, and `Float64Array`) store the number using [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) floating-point format. The [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding) reference has more information about the exact format. JavaScript numbers use double precision floating point format by default, which is the same as `Float64Array`. `Float32Array` uses 23 (instead of 52) bits for the mantissa and 8 (instead of 11) bits for the exponent. `Float16Array` uses 10 bits for the mantissa and 5 bits for the exponent. Note that the spec requires all [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values to use the same bit encoding, but the exact bit pattern is implementation-dependent.\n*   `Uint8ClampedArray` is a special case. It stores the number in binary like `Uint8Array` does, but when you store a number outside the range, it _clamps_ the number to the range 0 to 255 by mathematical value, instead of truncating the most significant bits.\n\nAll typed arrays except `Int8Array`, `Uint8Array`, and `Uint8ClampedArray` store each element using multiple bytes. These bytes can either be ordered from most significant to least significant (big-endian) or from least significant to most significant (little-endian). See [Endianness](https://developer.mozilla.org/en-US/docs/Glossary/Endianness) for more explanation. Typed arrays always use the platform's native byte order. If you want to specify the endianness when writing and reading from buffers, you should use a [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead.\n\nWhen writing to these typed arrays, values that are outside the representable range are normalized.\n\n*   All integer arrays (except `Uint8ClampedArray`) use [fixed-width number conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion), which first truncates the decimal part of the number and then takes the lowest bits.\n*   `Uint8ClampedArray` first clamps the number to the range 0 to 255 (values greater than 255 become 255 and values less than 0 become 0). It then _rounds_ (instead of flooring) the result to the nearest integer, with half-to-even; meaning if the number is exactly between two integers, it rounds to the nearest even integer. For example, `0.5` becomes `0`, `1.5` becomes `2`, and `2.5` becomes `2`.\n*   `Float16Array` and `Float32Array` perform a \"round to even\" to convert 64-bit floating point numbers to 32-bit and 16-bit. This is the same algorithm as provided by [`Math.fround()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround) and [`Math.f16round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/f16round).\n\n### [Behavior when viewing a resizable buffer](#behavior_when_viewing_a_resizable_buffer)\n\nWhen a `TypedArray` is created as a view of a [resizable buffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#resizing_arraybuffers), resizing the underlying buffer will have different effects on the size of the `TypedArray` depending on whether the `TypedArray` is constructed as length-tracking.\n\nIf a typed array is created without a specific size by omitting the third parameter or passing `undefined`, the typed array will become _length-tracking_, and will automatically resize to fit the underlying `buffer` as the latter is resized:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\n\nbuffer.resize(12);\n\nconsole.log(float32.byteLength); // 12\nconsole.log(float32.length); // 3\n```\n\nIf a typed array is created with a specific size using the third `length` parameter, it won't resize to contain the `buffer` as the latter is grown:\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 0, 2);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0, the initial value\n\nbuffer.resize(12);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0, the initial value\n```\n\nWhen a `buffer` is shrunk, the viewing typed array may become out of bounds, in which case the typed array's observed size will decrease to 0. This is the only case where a non-length-tracking typed array's length may change.\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 0, 2);\n\nbuffer.resize(7);\n\nconsole.log(float32.byteLength); // 0\nconsole.log(float32.length); // 0\nconsole.log(float32[0]); // undefined\n```\n\nIf you then grow the `buffer` again to bring the typed array back in bounds, the typed array's size will be restored to its original value.\n\n```\nbuffer.resize(8);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0 - back in bounds again!\n```\n\nThe same can happen for length-tracking typed arrays as well, if the buffer is shrunk beyond the `byteOffset`.\n\n```\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 4);\n// float32 is length-tracking, but it only extends from the 4th byte\n// to the end of the buffer, so if the buffer is resized to be shorter\n// than 4 bytes, the typed array will become out of bounds\nbuffer.resize(3);\nconsole.log(float32.byteLength); // 0\n```\n\n## [Constructor](#constructor)\n\nThis object cannot be instantiated directly — attempting to construct it with `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n```\nnew (Object.getPrototypeOf(Int8Array))();\n// TypeError: Abstract class TypedArray not directly constructable\n```\n\nInstead, you create an instance of a typed array of a particular type, such as an [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) or a [`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array). These objects all have a common syntax for their constructors:\n\n```\nnew TypedArray()\nnew TypedArray(length)\nnew TypedArray(typedArray)\nnew TypedArray(object)\n\nnew TypedArray(buffer)\nnew TypedArray(buffer, byteOffset)\nnew TypedArray(buffer, byteOffset, length)\n```\n\nWhere `TypedArray` is a constructor for one of the concrete types.\n\n**Note:** All `TypedArray` subclasses' constructors can only be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call one without `new` throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n\n### [Parameters](#parameters)\n\n[`typedArray`](#typedarray)\n\nWhen called with an instance of a `TypedArray` subclass, the `typedArray` gets copied into a new typed array. For a non-[bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) `TypedArray` constructor, the `typedArray` parameter can only be of one of the non-[bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) types (such as [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)). Similarly, for a [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) `TypedArray` constructor ([`BigInt64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array) or [`BigUint64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)), the `typedArray` parameter can only be of one of the [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) types. Each value in `typedArray` is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the `typedArray` argument.\n\n[`object`](#object)\n\nWhen called with an object that's not a `TypedArray` instance, a new typed array is created in the same way as the [`TypedArray.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from) method.\n\n[`length`](#length) Optional\n\nWhen called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size `length` multiplied by [`BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT) bytes, filled with zeros. Omitting all parameters is equivalent to using `0` as `length`.\n\n[`buffer`](#buffer), `byteOffset` Optional, `length` Optional\n\nWhen called with an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance, and optionally a `byteOffset` and a `length` argument, a new typed array view is created that views the specified buffer. The `byteOffset` (in bytes) and `length` (in number of elements, each occupying [`BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT) bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of `buffer` is viewed; if only `length` is omitted, the remainder of `buffer` starting from `byteOffset` is viewed. If `length` is omitted, the typed array becomes [length-tracking](#behavior_when_viewing_a_resizable_buffer).\n\n### [Exceptions](#exceptions)\n\nAll `TypeArray` subclass constructors operate in the same way. They would all throw the following exceptions:\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown in one of the following cases:\n\n*   A `typedArray` is passed but it is a [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type while the current constructor is not, or vice versa.\n*   A `typedArray` is passed but the buffer it's viewing is detached, or a detached `buffer` is directly passed.\n\n[`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError)\n\nThrown in one of the following cases:\n\n*   The new typed array's length is too large.\n*   The length of `buffer` (if the `length` parameter is not specified) or `byteOffset` is not an integral multiple of the new typed array's element size.\n*   `byteOffset` is not a valid array index (an integer between 0 and 253 - 1).\n*   When creating a view from a buffer, the bounds are outside the buffer. In other words, `byteOffset + length * TypedArray.BYTES_PER_ELEMENT > buffer.byteLength`.\n\n## [Static properties](#static_properties)\n\nThese properties are defined on the `TypedArray` constructor object and are thus shared by all `TypedArray` subclass constructors.\n\n[`TypedArray[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species)\n\nThe constructor function used to create derived objects.\n\nAll `TypedArray` subclasses also have the following static properties:\n\n[`TypedArray.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size for the different `TypedArray` objects.\n\n## [Static methods](#static_methods)\n\nThese methods are defined on the `TypedArray` constructor object and are thus shared by all `TypedArray` subclass constructors.\n\n[`TypedArray.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)\n\nCreates a new `TypedArray` from an array-like or iterable object. See also [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n[`TypedArray.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of)\n\nCreates a new `TypedArray` with a variable number of arguments. See also [`Array.of()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `TypedArray.prototype` and shared by all `TypedArray` subclass instances.\n\n[`TypedArray.prototype.buffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer)\n\nReturns the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) referenced by the typed array.\n\n[`TypedArray.prototype.byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength)\n\nReturns the length (in bytes) of the typed array.\n\n[`TypedArray.prototype.byteOffset`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset)\n\nReturns the offset (in bytes) of the typed array from the start of its [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\n\n[`TypedArray.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. `TypedArray.prototype.constructor` is the hidden `TypedArray` constructor function, but each typed array subclass also defines its own `constructor` property.\n\n[`TypedArray.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length)\n\nReturns the number of elements held in the typed array.\n\n[`TypedArray.prototype[@@toStringTag]`](#typedarray.prototypetostringtag)\n\nThe initial value of the [`TypedArray.prototype[@@toStringTag]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is a getter that returns the same string as the typed array constructor's name. It returns `undefined` if the `this` value is not one of the typed array subclasses. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). However, because `TypedArray` also has its own [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a typed array as `thisArg`.\n\nAll `TypedArray` subclasses also have the following instance properties:\n\n[`TypedArray.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size for the different `TypedArray` objects.\n\n## [Instance methods](#instance_methods)\n\nThese methods are defined on the `TypedArray` prototype object and are thus shared by all `TypedArray` subclass instances.\n\n[`TypedArray.prototype.at()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at)\n\nTakes an integer value and returns the item at that index. This method allows for negative integers, which count back from the last item.\n\n[`TypedArray.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin)\n\nCopies a sequence of array elements within the array. See also [`Array.prototype.copyWithin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).\n\n[`TypedArray.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries)\n\nReturns a new _array iterator_ object that contains the key/value pairs for each index in the array. See also [`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).\n\n[`TypedArray.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every)\n\nTests whether all elements in the array pass the test provided by a function. See also [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\n[`TypedArray.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill)\n\nFills all the elements of an array from a start index to an end index with a static value. See also [`Array.prototype.fill()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).\n\n[`TypedArray.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter)\n\nCreates a new array with all of the elements of this array for which the provided filtering function returns `true`. See also [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\n[`TypedArray.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find)\n\nReturns the first `element` in the array that satisfies a provided testing function, or `undefined` if no appropriate element is found. See also [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\n[`TypedArray.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex)\n\nReturns the first index value in the array that has an element that satisfies a provided testing function, or `-1` if no appropriate element was found. See also [`Array.prototype.findIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n\n[`TypedArray.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLast)\n\nReturns the value of the last element in the array that satisfies a provided testing function, or `undefined` if no appropriate element is found. See also [`Array.prototype.findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast).\n\n[`TypedArray.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex)\n\nReturns the index of the last element in the array that satisfies a provided testing function, or `-1` if no appropriate element was found. See also [`Array.prototype.findLastIndex()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex).\n\n[`TypedArray.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach)\n\nCalls a function for each element in the array. See also [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\n[`TypedArray.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes)\n\nDetermines whether a typed array includes a certain element, returning `true` or `false` as appropriate. See also [`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).\n\n[`TypedArray.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf)\n\nReturns the first (least) index of an element within the array equal to the specified value, or `-1` if none is found. See also [`Array.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).\n\n[`TypedArray.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join)\n\nJoins all elements of an array into a string. See also [`Array.prototype.join()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).\n\n[`TypedArray.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys)\n\nReturns a new array iterator that contains the keys for each index in the array. See also [`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).\n\n[`TypedArray.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf)\n\nReturns the last (greatest) index of an element within the array equal to the specified value, or `-1` if none is found. See also [`Array.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).\n\n[`TypedArray.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map)\n\nCreates a new array with the results of calling a provided function on every element in this array. See also [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\n[`TypedArray.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce)\n\nApply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\n[`TypedArray.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight)\n\nApply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also [`Array.prototype.reduceRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).\n\n[`TypedArray.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse)\n\nReverses the order of the elements of an array — the first becomes the last, and the last becomes the first. See also [`Array.prototype.reverse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).\n\n[`TypedArray.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set)\n\nStores multiple values in the typed array, reading input values from a specified array.\n\n[`TypedArray.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice)\n\nExtracts a section of an array and returns a new array. See also [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\n[`TypedArray.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some)\n\nReturns `true` if at least one element in this array satisfies the provided testing function. See also [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\n[`TypedArray.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort)\n\nSorts the elements of an array in place and returns the array. See also [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\n[`TypedArray.prototype.subarray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray)\n\nReturns a new `TypedArray` from the given start and end element index.\n\n[`TypedArray.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString)\n\nReturns a localized string representing the array and its elements. See also [`Array.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString).\n\n[`TypedArray.prototype.toReversed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toReversed)\n\nReturns a new array with the elements in reversed order, without modifying the original array.\n\n[`TypedArray.prototype.toSorted()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted)\n\nReturns a new array with the elements sorted in ascending order, without modifying the original array.\n\n[`TypedArray.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString)\n\nReturns a string representing the array and its elements. See also [`Array.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).\n\n[`TypedArray.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values)\n\nReturns a new _array iterator_ object that contains the values for each index in the array. See also [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).\n\n[`TypedArray.prototype.with()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/with)\n\nReturns a new array with the element at the given index replaced with the given value, without modifying the original array.\n\n[`TypedArray.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n\nReturns a new _array iterator_ object that contains the values for each index in the array.\n\n## [Examples](#examples)\n\n### [Property access](#property_access)\n\nYou can reference elements in the array using standard array index syntax (that is, using bracket notation). However, getting or setting indexed properties on typed arrays will not search in the prototype chain for this property, even when the indices are out of bound. Indexed properties will consult the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and will never look at object properties. You can still use named properties, just like with all objects.\n\n```\n// Setting and getting using standard array syntax\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\n\n// Indexed properties on prototypes are not consulted (Fx 25)\nInt8Array.prototype[20] = \"foo\";\nnew Int8Array(32)[20]; // 0\n// even when out of bound\nInt8Array.prototype[20] = \"foo\";\nnew Int8Array(8)[20]; // undefined\n// or with negative integers\nInt8Array.prototype[-1] = \"foo\";\nnew Int8Array(8)[-1]; // undefined\n\n// Named properties are allowed, though (Fx 30)\nInt8Array.prototype.foo = \"bar\";\nnew Int8Array(32).foo; // \"bar\"\n```\n\n### [Cannot be frozen](#cannot_be_frozen)\n\n`TypedArray`s that aren't empty cannot be frozen, as their underlying `ArrayBuffer` could be mutated through another `TypedArray` view of the buffer. This would mean that the object would never genuinely be frozen.\n\n```\nconst i8 = Int8Array.of(1, 2, 3);\nObject.freeze(i8);\n// TypeError: Cannot freeze array buffer views with elements\n```\n\n### [ByteOffset must be aligned](#byteoffset_must_be_aligned)\n\nWhen constructing a `TypedArray` as a view onto an `ArrayBuffer`, the `byteOffset` argument must be aligned to its element size; in other words, the offset must be a multiple of `BYTES_PER_ELEMENT`.\n\n```\nconst i32 = new Int32Array(new ArrayBuffer(4), 1);\n// RangeError: start offset of Int32Array should be a multiple of 4\n```\n\n```\nconst i32 = new Int32Array(new ArrayBuffer(4), 0);\n```\n\n### [ByteLength must be aligned](#bytelength_must_be_aligned)\n\nLike the `byteOffset` parameter, the `byteLength` property of an `ArrayBuffer` passed to a `TypedArray`'s constructor must be a multiple of the constructor's `BYTES_PER_ELEMENT`.\n\n```\nconst i32 = new Int32Array(new ArrayBuffer(3));\n// RangeError: byte length of Int32Array should be a multiple of 4\n```\n\n```\nconst i32 = new Int32Array(new ArrayBuffer(4));\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-typedarray-objects](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypedArray - JavaScript | MDN",
    "description": "A TypedArray object describes an array-like view of an\n  underlying binary data buffer.\n  There is no global property named TypedArray, nor is there a\n  directly visible TypedArray constructor. Instead, there are a number of\n  different global properties, whose values are typed array constructors for specific\n  element types, listed below. On the following pages you will find common properties and\n  methods that can be used with any typed array containing elements of any type.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "markdown": "# Int16Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int16Array`** typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int16Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Int16Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)\n\nCreates a new `Int16Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Int16Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of `Int16Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Int16Array.prototype` and shared by all `Int16Array` instances.\n\n[`Int16Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of a `Int16Array`.\n\n[`Int16Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Int16Array` instances, the initial value is the [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create an Int16Array](#different_ways_to_create_an_int16array)\n\n```\n// From a length\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\nconsole.log(int16.length); // 2\nconsole.log(int16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Int16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Int16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int16FromIterable = new Int16Array(iterable);\nconsole.log(int16FromIterable);\n// Int16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Int16Array - JavaScript | MDN",
    "description": "The Int16Array typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management",
    "markdown": "# Memory management - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nLow-level languages like C, have manual memory management primitives such as [`malloc()`](https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html) and [`free()`](https://en.wikipedia.org/wiki/C_dynamic_memory_allocation#Overview_of_functions). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (_garbage collection_). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.\n\n## [Memory life cycle](#memory_life_cycle)\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\n1.  Allocate the memory you need\n2.  Use the allocated memory (read, write)\n3.  Release the allocated memory when it is not needed anymore\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.\n\n### [Allocation in JavaScript](#allocation_in_javascript)\n\n#### Value initialization\n\nIn order to not bother the programmer with allocations, JavaScript will automatically allocate memory when values are initially declared.\n\n```\nconst n = 123; // allocates memory for a number\nconst s = \"azerty\"; // allocates memory for a string\n\nconst o = {\n  a: 1,\n  b: null,\n}; // allocates memory for an object and contained values\n\n// (like object) allocates memory for the array and\n// contained values\nconst a = [1, null, \"abra\"];\n\nfunction f(a) {\n  return a + 2;\n} // allocates a function (which is a callable object)\n\n// function expressions also allocate an object\nsomeElement.addEventListener(\n  \"click\",\n  () => {\n    someElement.style.backgroundColor = \"blue\";\n  },\n  false,\n);\n```\n\n#### Allocation via function calls\n\nSome function calls result in object allocation.\n\n```\nconst d = new Date(); // allocates a Date object\n\nconst e = document.createElement(\"div\"); // allocates a DOM element\n```\n\nSome methods allocate new values or objects:\n\n```\nconst s = \"azerty\";\nconst s2 = s.substr(0, 3); // s2 is a new string\n// Since strings are immutable values,\n// JavaScript may decide to not allocate memory,\n// but just store the [0, 3] range.\n\nconst a = [\"ouais ouais\", \"nan nan\"];\nconst a2 = [\"generation\", \"nan nan\"];\nconst a3 = a.concat(a2);\n// new array with 4 elements being\n// the concatenation of a and a2 elements.\n```\n\n### [Using values](#using_values)\n\nUsing values basically means reading and writing in allocated memory. This can be done by reading or writing the value of a variable or an object property or even passing an argument to a function.\n\n### [Release when the memory is not needed anymore](#release_when_the_memory_is_not_needed_anymore)\n\nThe majority of memory management issues occur at this phase. The most difficult aspect of this stage is determining when the allocated memory is no longer needed.\n\nLow-level languages require the developer to manually determine at which point in the program the allocated memory is no longer needed and to release it.\n\nSome high-level languages, such as JavaScript, utilize a form of automatic memory management known as [garbage collection](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it. This automatic process is an approximation since the general problem of determining whether or not a specific piece of memory is still needed is [undecidable](https://en.wikipedia.org/wiki/Decidability_%28logic%29).\n\n## [Garbage collection](#garbage_collection)\n\nAs stated above, the general problem of automatically finding whether some memory \"is not needed anymore\" is undecidable. As a consequence, garbage collectors implement a restriction of a solution to the general problem. This section will explain the concepts that are necessary for understanding the main garbage collection algorithms and their respective limitations.\n\n### [References](#references)\n\nThe main concept that garbage collection algorithms rely on is the concept of _reference_. Within the context of memory management, an object is said to reference another object if the former has access to the latter (either implicitly or explicitly). For instance, a JavaScript object has a reference to its [prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) (implicit reference) and to its properties values (explicit reference).\n\nIn this context, the notion of an \"object\" is extended to something broader than regular JavaScript objects and also contain function scopes (or the global lexical scope).\n\n### [Reference-counting garbage collection](#reference-counting_garbage_collection)\n\n**Note:** no modern JavaScript engine uses reference-counting for garbage collection anymore.\n\nThis is the most naïve garbage collection algorithm. This algorithm reduces the problem from determining whether or not an object is still needed to determining if an object still has any other objects referencing it. An object is said to be \"garbage\", or collectible if there are zero references pointing to it.\n\nFor example:\n\n```\nlet x = {\n  a: {\n    b: 2,\n  },\n};\n// 2 objects are created. One is referenced by the other as one of its properties.\n// The other is referenced by virtue of being assigned to the 'x' variable.\n// Obviously, none can be garbage-collected.\n\nlet y = x;\n// The 'y' variable is the second thing that has a reference to the object.\n\nx = 1;\n// Now, the object that was originally in 'x' has a unique reference\n// embodied by the 'y' variable.\n\nlet z = y.a;\n// Reference to 'a' property of the object.\n// This object now has 2 references: one as a property,\n// the other as the 'z' variable.\n\ny = \"mozilla\";\n// The object that was originally in 'x' has now zero\n// references to it. It can be garbage-collected.\n// However its 'a' property is still referenced by\n// the 'z' variable, so it cannot be freed.\n\nz = null;\n// The 'a' property of the object originally in x\n// has zero references to it. It can be garbage collected.\n```\n\nThere is a limitation when it comes to circular references. In the following example, two objects are created with properties that reference one another, thus creating a cycle. They will go out of scope after the function call has completed. At that point they become unneeded and their allocated memory should be reclaimed. However, the reference-counting algorithm will not consider them reclaimable since each of the two objects has at least one reference pointing to them, resulting in neither of them being marked for garbage collection. Circular references are a common cause of memory leaks.\n\n```\nfunction f() {\n  const x = {};\n  const y = {};\n  x.a = y; // x references y\n  y.a = x; // y references x\n\n  return \"azerty\";\n}\n\nf();\n```\n\n### [Mark-and-sweep algorithm](#mark-and-sweep_algorithm)\n\nThis algorithm reduces the definition of \"an object is no longer needed\" to \"an object is unreachable\".\n\nThis algorithm assumes the knowledge of a set of objects called _roots._ In JavaScript, the root is the global object. Periodically, the garbage collector will start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all _reachable_ objects and collect all non-reachable objects.\n\nThis algorithm is an improvement over the previous one since an object having zero references is effectively unreachable. The opposite does not hold true as we have seen with circular references.\n\nCurrently, all modern engines ship a mark-and-sweep garbage collector. All improvements made in the field of JavaScript garbage collection (generational/incremental/concurrent/parallel garbage collection) over the last few years are implementation improvements of this algorithm, but not improvements over the garbage collection algorithm itself nor its reduction of the definition of when \"an object is no longer needed\".\n\nThe immediate benefit of this approach is that cycles are no longer a problem. In the first example above, after the function call returns, the two objects are no longer referenced by any resource that is reachable from the global object. Consequently, they will be found unreachable by the garbage collector and have their allocated memory reclaimed.\n\nHowever, the inability to manually control garbage collection remains. There are times when it would be convenient to manually decide when and what memory is released. In order to release the memory of an object, it needs to be made explicitly unreachable. It is also not possible to programmatically trigger garbage collection in JavaScript — and will likely never be within the core language, although engines may expose APIs behind opt-in flags.\n\n## [Configuring an engine's memory model](#configuring_an_engines_memory_model)\n\nJavaScript engines typically offer flags that expose the memory model. For example, Node.js offers additional options and tools that expose the underlying V8 mechanisms for configuring and debugging memory issues. This configuration may not be available in browsers, and even less so for web pages (via HTTP headers, etc.).\n\nThe max amount of available heap memory can be increased with a flag:\n\n```\nnode --max-old-space-size=6000 index.js\n```\n\nWe can also expose the garbage collector for debugging memory issues using a flag and the [Chrome Debugger](https://nodejs.org/en/docs/guides/debugging-getting-started/):\n\n```\nnode --expose-gc --inspect index.js\n```\n\n## [Data structures aiding memory management](#data_structures_aiding_memory_management)\n\nAlthough JavaScript does not directly expose the garbage collector API, the language offers several data structures that indirectly observe garbage collection and can be used to manage memory usage.\n\n### [WeakMaps and WeakSets](#weakmaps_and_weaksets)\n\n[`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) and [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) are data structures whose APIs closely mirror their non-weak counterparts: [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set). `WeakMap` allows you to maintain a collection of key-value pairs, while `WeakSet` allows you to maintain a collection of unique values, both with performant addition, deletion, and querying.\n\n`WeakMap` and `WeakSet` got the name from the concept of _weakly held_ values. If `x` is weakly held by `y`, it means that although you can access the value of `x` via `y`, the mark-and-sweep algorithm won't consider `x` as reachable if nothing else _strongly holds_ to it. Most data structures, except the ones discussed here, strongly holds to the objects passed in so that you can retrieve them at any time. The keys of `WeakMap` and `WeakSet` can be garbage-collected (for `WeakMap` objects, the values would then be eligible for garbage collection as well) as long as nothing else in the program is referencing the key. This is ensured by two characteristics:\n\n*   `WeakMap` and `WeakSet` can only store objects or symbols. This is because only objects are garbage collected — primitive values can always be forged (that is, `1 === 1` but `{} !== {}`), making them stay in the collection forever. [Registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) (like `Symbol.for(\"key\")`) can also be forged and thus not garbage collectable, but symbols created with `Symbol(\"key\")` are garbage collectable. [Well-known symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) like `Symbol.iterator` come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as `Array.prototype`, so they are also allowed as keys.\n*   `WeakMap` and `WeakSet` are not iterable. This prevents you from using `Array.from(map.keys()).length` to observe the liveliness of objects, or get hold of an arbitrary key which should otherwise be eligible for garbage collection. (Garbage collection should be as invisible as possible.)\n\nIn typical explanations of `WeakMap` and `WeakSet` (such as the one above), it's often implied that the key is garbage-collected first, freeing the value for garbage collection as well. However, consider the case of the value referencing the key:\n\n```\nconst wm = new WeakMap();\nconst key = {};\nwm.set(key, { key });\n// Now `key` cannot be garbage collected,\n// because the value holds a reference to the key,\n// and the value is strongly held in the map!\n```\n\nIf `key` is stored as an actual reference, it would create a cyclic reference and make both the key and value ineligible for garbage collection, even when nothing else references `key` — because if `key` is garbage collected, it means that at some particular instant, `value.key` would point to a non-existent address, which is not legal. To fix this, the entries of `WeakMap` and `WeakSet` aren't actual references, but [ephemerons](https://dl.acm.org/doi/pdf/10.1145/263700.263733), an enhancement to the mark-and-sweep mechanism. [Barros et al.](https://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak/jucs_14_21_3481_3497_barros.pdf) offers a good summary of the algorithm (page 4). To quote a paragraph:\n\n> Ephemerons are a refinement of weak pairs where neither the key nor the value can be classified as weak or strong. The connectivity of the key determines the connectivity of the value, but the connectivity of the value does not affect the connectivity of the key. \\[…\\] when the garbage collection offers support to ephemerons, it occurs in three phases instead of two (mark and sweep).\n\nAs a rough mental model, think of a `WeakMap` as the following implementation:\n\n**Warning:** This is not a polyfill nor is anywhere close to how it's implemented in the engine (which hooks into the garbage collection mechanism).\n\n```\nclass MyWeakMap {\n  #marker = Symbol(\"MyWeakMapData\");\n  get(key) {\n    return key[this.#marker];\n  }\n  set(key, value) {\n    key[this.#marker] = value;\n  }\n  has(key) {\n    return this.#marker in key;\n  }\n  delete(key) {\n    delete key[this.#marker];\n  }\n}\n```\n\nAs you can see, the `MyWeakMap` never actually holds a collection of keys. It simply adds metadata to each object being passed in. The object is then garbage-collectable via mark-and-sweep. Therefore, it's not possible to iterate over the keys in a `WeakMap`, nor clear the `WeakMap` (as that also relies on the knowledge of the entire key collection).\n\nFor more information on their APIs, see the [keyed collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections) guide.\n\n### [WeakRefs and FinalizationRegistry](#weakrefs_and_finalizationregistry)\n\n**Note:** `WeakRef` and `FinalizationRegistry` offer direct introspection into the garbage collection machinery. [Avoid using them where possible](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#avoid_where_possible) because the runtime semantics are almost completely unguaranteed.\n\nAll variables with an object as value are references to that object. However, such references are _strong_ — their existence would prevent the garbage collector from marking the object as eligible for collection. A [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) is a _weak reference_ to an object that allows the object to be garbage collected, while still retaining the ability to read the object's content during its lifetime.\n\nOne use case for `WeakRef` is a cache system which maps string URLs to large objects. We cannot use a `WeakMap` for this purpose, because `WeakMap` objects have their _keys_ weakly held, but not their _values_ — if you access a key, you would always deterministically get the value (since having access to the key means it's still alive). Here, we are okay to get `undefined` for a key (if the corresponding value is no longer alive) since we can just re-compute it, but we don't want unreachable objects to stay in the cache. In this case, we can use a normal `Map`, but with each value being a `WeakRef` of the object instead of the actual object value.\n\n```\nfunction cached(getter) {\n  // A Map from string URLs to WeakRefs of results\n  const cache = new Map();\n  return async (key) => {\n    if (cache.has(key)) {\n      const dereferencedValue = cache.get(key).deref();\n      if (dereferencedValue !== undefined) {\n        return dereferencedValue;\n      }\n    }\n    const value = await getter(key);\n    cache.set(key, new WeakRef(value));\n    return value;\n  };\n}\n\nconst getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```\n\n[`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) provides an even stronger mechanism to observe garbage collection. It allows you to register objects and be notified when they are garbage collected. For example, for the cache system exemplified above, even when the blobs themselves are free for collection, the `WeakRef` objects that hold them are not — and over time, the `Map` may accumulate a lot of useless entries. Using a `FinalizationRegistry` allows one to perform cleanup in this case.\n\n```\nfunction cached(getter) {\n  // A Map from string URLs to WeakRefs of results\n  const cache = new Map();\n  // Every time after a value is garbage collected, the callback is\n  // called with the key in the cache as argument, allowing us to remove\n  // the cache entry\n  const registry = new FinalizationRegistry((key) => {\n    // Note: it's important to test that the WeakRef is indeed empty.\n    // Otherwise, the callback may be called after a new object has been\n    // added with this key, and that new, alive object gets deleted\n    if (!cache.get(key)?.deref()) {\n      cache.delete(key);\n    }\n  });\n  return async (key) => {\n    if (cache.has(key)) {\n      return cache.get(key).deref();\n    }\n    const value = await getter(key);\n    cache.set(key, new WeakRef(value));\n    registry.register(value, key);\n    return value;\n  };\n}\n\nconst getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```\n\nDue to performance and security concerns, there is no guarantee of when the callback will be called, or if it will be called at all. It should only be used for cleanup — and non-critical cleanup. There are other ways for more deterministic resource management, such as [`try...finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), which will always execute the `finally` block. `WeakRef` and `FinalizationRegistry` exist solely for optimization of memory usage in long-running programs.\n\nFor more information on the API of [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) and [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), see their reference pages.",
    "title": "Memory management - JavaScript | MDN",
    "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "markdown": "# TypeError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`TypeError`** object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.\n\nA `TypeError` may be thrown when:\n\n*   an operand or argument passed to a function is incompatible with the type expected by that operator or function; or\n*   when attempting to modify a value that cannot be changed; or\n*   when attempting to use a value in an inappropriate way.\n\n`TypeError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`TypeError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`TypeError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/TypeError)\n\nCreates a new `TypeError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `TypeError.prototype` and shared by all `TypeError` instances.\n\n[`TypeError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `TypeError` instances, the initial value is the [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/TypeError) constructor.\n\n[`TypeError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `TypeError.prototype.name`, the initial value is `\"TypeError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Catching a TypeError](#catching_a_typeerror)\n\n```\ntry {\n  null.f();\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"null has no properties\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating a TypeError](#creating_a_typeerror)\n\n```\ntry {\n  throw new TypeError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-typeerror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-typeerror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "TypeError - JavaScript | MDN",
    "description": "The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "markdown": "# Int32Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int32Array`** typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int32Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Int32Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)\n\nCreates a new `Int32Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Int32Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of `Int32Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Int32Array.prototype` and shared by all `Int32Array` instances.\n\n[`Int32Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of a `Int32Array`.\n\n[`Int32Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Int32Array` instances, the initial value is the [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create an Int32Array](#different_ways_to_create_an_int32array)\n\n```\n// From a length\nconst int32 = new Int32Array(2);\nint32[0] = 42;\nconsole.log(int32[0]); // 42\nconsole.log(int32.length); // 2\nconsole.log(int32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Int32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Int32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int32FromIterable = new Int32Array(iterable);\nconsole.log(int32FromIterable);\n// Int32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Int32Array - JavaScript | MDN",
    "description": "The Int32Array typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "markdown": "# InternalError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Non-standard:** This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.\n\nThe **`InternalError`** object indicates an error that occurred internally in the JavaScript engine.\n\nExample cases are mostly when something is too large, e.g.:\n\n*   \"too many switch cases\",\n*   \"too many parentheses in regular expression\",\n*   \"array initializer too large\",\n*   \"too much recursion\".\n\n`InternalError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`InternalError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/InternalError) Non-standard\n\nCreates a new `InternalError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `InternalError.prototype` and shared by all `InternalError` instances.\n\n[`InternalError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `InternalError` instances, the initial value is the [`InternalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/InternalError) constructor.\n\n[`InternalError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `InternalError.prototype.name`, the initial value is `\"InternalError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Too much recursion](#too_much_recursion)\n\nThis recursive function runs 10 times, as per the exit condition.\n\n```\nfunction loop(x) {\n  // \"x >= 10\" is the exit condition\n  if (x >= 10) return;\n\n  // do stuff\n  loop(x + 1); // the recursive call\n}\nloop(0);\n```\n\nSetting this condition to an extremely high value, may not work:\n\n```\nfunction loop(x) {\n  if (x >= 1000000000000) return;\n\n  // do stuff\n  loop(x + 1);\n}\nloop(0);\n\n// InternalError: too much recursion\n```\n\nFor more information, see [InternalError: too much recursion.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion)\n\n## [Specifications](#specifications)\n\nNot part of any standard.\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "InternalError - JavaScript | MDN",
    "description": "The InternalError object indicates an error that occurred internally in the JavaScript engine.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "markdown": "# Uint8ClampedArray - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8ClampedArray`** typed array represents an array of 8-bit unsigned integers clamped to 0–255. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint8ClampedArray` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Uint8ClampedArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)\n\nCreates a new `Uint8ClampedArray` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Uint8ClampedArray.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of `Uint8ClampedArray`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Uint8ClampedArray.prototype` and shared by all `Uint8ClampedArray` instances.\n\n[`Uint8ClampedArray.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of a `Uint8ClampedArray`.\n\n[`Uint8ClampedArray.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Uint8ClampedArray` instances, the initial value is the [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8ClampedArray](#different_ways_to_create_a_uint8clampedarray)\n\n```\n// From a length\nconst uint8c = new Uint8ClampedArray(2);\nuint8c[0] = 42;\nuint8c[1] = 1337;\nconsole.log(uint8c[0]); // 42\nconsole.log(uint8c[1]); // 255 (clamped)\nconsole.log(uint8c.length); // 2\nconsole.log(uint8c.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8ClampedArray([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8ClampedArray(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8cFromIterable = new Uint8ClampedArray(iterable);\nconsole.log(uint8cFromIterable);\n// Uint8ClampedArray [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint8ClampedArray - JavaScript | MDN",
    "description": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0–255. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "markdown": "# Uint32Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint32Array`** typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint32Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Uint32Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)\n\nCreates a new `Uint32Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Uint32Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of `Uint32Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Uint32Array.prototype` and shared by all `Uint32Array` instances.\n\n[`Uint32Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `4` in the case of a `Uint32Array`.\n\n[`Uint32Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Uint32Array` instances, the initial value is the [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint32Array](#different_ways_to_create_a_uint32array)\n\n```\n// From a length\nconst uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Uint32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Uint32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint32FromIterable = new Uint32Array(iterable);\nconsole.log(uint32FromIterable);\n// Uint32Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint32Array - JavaScript | MDN",
    "description": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "markdown": "# Uint16Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint16Array`** typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instead. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint16Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Uint16Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)\n\nCreates a new `Uint16Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Uint16Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of `Uint16Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Uint16Array.prototype` and shared by all `Uint16Array` instances.\n\n[`Uint16Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `2` in the case of a `Uint16Array`.\n\n[`Uint16Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Uint16Array` instances, the initial value is the [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint16Array](#different_ways_to_create_a_uint16array)\n\n```\n// From a length\nconst uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Uint16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Uint16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint16FromIterable = new Uint16Array(iterable);\nconsole.log(uint16FromIterable);\n// Uint16Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint16Array - JavaScript | MDN",
    "description": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "markdown": "# Int8Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Int8Array`** typed array represents an array of 8-bit signed integers. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int8Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Int8Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)\n\nCreates a new `Int8Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Int8Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of `Int8Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Int8Array.prototype` and shared by all `Int8Array` instances.\n\n[`Int8Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of a `Int8Array`.\n\n[`Int8Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Int8Array` instances, the initial value is the [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create an Int8Array](#different_ways_to_create_an_int8array)\n\n```\n// From a length\nconst int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Int8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Int8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int8FromIterable = new Int8Array(iterable);\nconsole.log(int8FromIterable);\n// Int8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Int8Array - JavaScript | MDN",
    "description": "The Int8Array typed array represents an array of 8-bit signed integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "markdown": "# Uint8Array - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Uint8Array`** typed array represents an array of 8-bit unsigned integers. The contents are initialized to `0` unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint8Array` is a subclass of the hidden [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) class.\n\n## [Constructor](#constructor)\n\n[`Uint8Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)\n\nCreates a new `Uint8Array` object.\n\n## [Static properties](#static_properties)\n\n_Also inherits static properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n[`Uint8Array.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of `Uint8Array`.\n\n## [Static methods](#static_methods)\n\n_Inherits static methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\nThese properties are defined on `Uint8Array.prototype` and shared by all `Uint8Array` instances.\n\n[`Uint8Array.prototype.BYTES_PER_ELEMENT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\n\nReturns a number value of the element size. `1` in the case of a `Uint8Array`.\n\n[`Uint8Array.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Uint8Array` instances, the initial value is the [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array) constructor.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)_.\n\n## [Examples](#examples)\n\n### [Different ways to create a Uint8Array](#different_ways_to_create_a_uint8array)\n\n```\n// From a length\nconst uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8FromIterable = new Uint8Array(iterable);\nconsole.log(uint8FromIterable);\n// Uint8Array [1, 2, 3]\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# table-49](https://tc39.es/ecma262/multipage/indexed-collections.html#table-49) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Uint8Array - JavaScript | MDN",
    "description": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0 unless initialization data is explicitly provided. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
    "markdown": "# Intl - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Intl`** namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.\n\n## [Description](#description)\n\nUnlike most global objects, `Intl` is not a constructor. You cannot use it with the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Intl` object as a function. All properties and methods of `Intl` are static (just like the [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object).\n\nThe internationalization constructors as well as several language sensitive methods of other constructors (listed under [See also](#see_also)) use a common pattern for identifying locales and determining the one they will actually use: they all accept `locales` and `options` arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the `options.localeMatcher` property.\n\n### [locales argument](#locales_argument)\n\nThe `locales` argument is used to determine the locale used in a given operation. The JavaScript implementation examines `locales`, and then computes a locale it understands that comes closest to satisfying the expressed preference. `locales` may be:\n\n*   `undefined` (or omitted): The implementation's default locale will be used.\n*   A locale: A locale identifier or an [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object that wraps a locale identifier.\n*   A list of locales: Any other value, that will be converted into an object and then treated as an array of locales.\n\nIn the latter two cases, the actual locale used is the best-supported locale determined by [locale negotiation](#locale_identification_and_negotiation). If a locale identifier is not a string or an object, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown. If a locale identifier is a string that's syntactically invalid, a [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) is thrown. If a locale identifier is well-formed but the implementation doesn't recognize it, it is ignored and the next locale in the list is considered, eventually falling back to the system's locale. However, you shouldn't rely on a particular locale name being ignored, because the implementation may add data for any locale in the future. For example, `new Intl.DateTimeFormat(\"default\")` uses the implementation's default locale only because `\"default\"` is syntactically valid but not recognized as any locale.\n\nA locale identifier is a string that consists of:\n\n1.  A language subtag with 2–3 or 5–8 letters\n2.  A script subtag with 4 letters Optional\n3.  A region subtag with either 2 letters or 3 digits Optional\n4.  One or more variant subtags (all of which must be unique), each with either 5–8 alphanumerals or a digit followed by 3 alphanumerals Optional\n5.  One or more BCP 47 extension sequences Optional\n6.  A private-use extension sequence Optional\n\nEach subtag and sequence are separated by hyphens. Locale identifiers are case-insensitive [ASCII](https://developer.mozilla.org/en-US/docs/Glossary/ASCII). However, it's conventional to use title case (the first letter is capitalized, successive letters are lower case) for script subtags, upper case for region subtags, and lower case for everything else. For example:\n\n*   `\"hi\"`: Hindi (language)\n*   `\"de-AT\"`: German (language) as used in Austria (region)\n*   `\"zh-Hans-CN\"`: Chinese (language) written in simplified characters (script) as used in China (region)\n*   `\"en-emodeng\"`: English (language) in the \"Early modern English\" dialect (variant)\n\nSubtags identifying languages, scripts, regions (including countries), and (rarely used) variants are registered in the [IANA Language Subtag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry). This registry is periodically updated over time, and implementations may not always be up to date, so don't rely too much on subtags being universally supported.\n\nBCP 47 extension sequences consist of a single digit or letter (other than `\"x\"`) and one or more two- to eight-letter or digit subtags separated by hyphens. Only one sequence is permitted for each digit or letter: `\"de-a-foo-a-foo\"` is invalid. BCP 47 extension subtags are defined in the [Unicode CLDR Project](https://github.com/unicode-org/cldr/tree/main/common/bcp47). Currently only two extensions have defined semantics:\n\n*   The `\"u\"` (Unicode) extension can be used to request additional customization of `Intl` API objects. Examples:\n    *   `\"de-DE-u-co-phonebk\"`: Use the phonebook variant of the German sort order, which interprets umlauted vowels as corresponding character pairs: ä → ae, ö → oe, ü → ue.\n    *   `\"th-TH-u-nu-thai\"`: Use Thai digits (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙) in number formatting.\n    *   `\"ja-JP-u-ca-japanese\"`: Use the Japanese calendar in date and time formatting, so that 2013 is expressed as the year 25 of the Heisei period, or 平成 25.\n    *   `\"en-GB-u-ca-islamic\"`: use British English with the Islamic (Hijri) calendar, where the Gregorian date 14 October, 2017 is the Hijri date 24 Muharram, 1439.\n*   The `\"t\"` (transformed) extension indicates transformed content: for example, text that was translated from another locale. No `Intl` functionality currently considers the `\"t\"` extension. However, this extension sometimes contains a nested locale (with no extensions): for example, the transformed extension in `\"de-t-en\"` contains the locale identifier for English. If a nested locale is present, it must be a valid locale identifier. For example, because `\"en-emodeng-emodeng\"` is invalid (because it contains a duplicate `emodeng` variant subtag), `\"de-t-en-emodeng-emodeng\"` is also invalid.\n\nFinally, a private-use extension sequence using the letter `\"x\"` may appear, followed by one or more one- to eight-letter or digit subtags separated by hyphens. This allows applications to encode information for their own private use, that will be ignored by all `Intl` operations.\n\n### [options argument](#options_argument)\n\nThe `options` argument must be an object with properties that vary between constructors and functions. If the `options` argument is not provided or is undefined, default values are used for all properties.\n\nOne property is supported by all language sensitive constructors and functions: The `localeMatcher` property, whose value must be a string `\"lookup\"` or `\"best fit\"` and which selects one of the locale matching algorithms described below.\n\n### [Locale identification and negotiation](#locale_identification_and_negotiation)\n\nThe list of locales specified by the `locales` argument, after Unicode extensions have been removed from them, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the `\"lookup\"` matcher follows the Lookup algorithm specified in [BCP 47](https://datatracker.ietf.org/doc/html/rfc4647#section-3.4); the `\"best fit\"` matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a `locales` argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the `options` argument (see below).\n\nIf the selected locale identifier had a Unicode extension sequence, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the locale identifier. For example, the `\"co\"` key (collation) is only supported by [`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), and its `\"phonebk\"` value is only supported for German.\n\n## [Static properties](#static_properties)\n\n[`Intl.Collator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator)\n\nConstructor for collators, which are objects that enable language-sensitive string comparison.\n\n[`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n\nConstructor for objects that enable language-sensitive date and time formatting.\n\n[`Intl.DisplayNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n\nConstructor for objects that enable the consistent translation of language, region and script display names.\n\n[`Intl.DurationFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat) Experimental\n\nConstructor for objects that enable locale-sensitive duration formatting.\n\n[`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat)\n\nConstructor for objects that enable language-sensitive list formatting.\n\n[`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n\nConstructor for objects that represents a Unicode locale identifier.\n\n[`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)\n\nConstructor for objects that enable language-sensitive number formatting.\n\n[`Intl.PluralRules`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules)\n\nConstructor for objects that enable plural-sensitive formatting and language-specific rules for plurals.\n\n[`Intl.RelativeTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat)\n\nConstructor for objects that enable language-sensitive relative time formatting.\n\n[`Intl.Segmenter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter)\n\nConstructor for objects that enable locale-sensitive text segmentation.\n\n[`Intl[@@toStringTag]`](#intltostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Static methods](#static_methods)\n\n[`Intl.getCanonicalLocales()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales)\n\nReturns canonical locale names.\n\n[`Intl.supportedValuesOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf)\n\nReturns a sorted array containing the supported unique calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\n## [Examples](#examples)\n\n### [Formatting dates and numbers](#formatting_dates_and_numbers)\n\nYou can use `Intl` to format dates and numbers in a form that's conventional for a specific language and region:\n\n```\nconst count = 26254.39;\nconst date = new Date(\"2012-05-24\");\n\nfunction log(locale) {\n  console.log(\n    `${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(\n      locale,\n    ).format(count)}`,\n  );\n}\n\nlog(\"en-US\"); // 5/24/2012 26,254.39\n\nlog(\"de-DE\"); // 24.5.2012 26.254,39\n```\n\n### [Using the browser's preferred language](#using_the_browsers_preferred_language)\n\nInstead of passing a hardcoded locale name to the `Intl` methods, you can use the user's preferred language provided by [`navigator.language`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language):\n\n```\nconst date = new Date(\"2012-05-24\");\n\nconst formattedDate = new Intl.DateTimeFormat(navigator.language).format(date);\n```\n\nAlternatively, the [`navigator.languages`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) property provides a sorted list of the user's preferred languages. This list can be passed directly to the `Intl` constructors to implement preference-based fallback selection of locales. The [locale negotiation](#locale_identification_and_negotiation) process is used to pick the most appropriate locale available:\n\n```\nconst count = 26254.39;\n\nconst formattedCount = new Intl.NumberFormat(navigator.languages).format(count);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Internationalization API Specification  <br>\\# intl-object](https://tc39.es/ecma402/#intl-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Intl - JavaScript | MDN",
    "description": "The Intl namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "markdown": "# URIError - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`URIError`** object represents an error when a global URI handling function was used in a wrong way.\n\n`URIError` is a [serializable object](https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object), so it can be cloned with [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) or copied between [Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker) using [`postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage \"postMessage()\").\n\n`URIError` is a subclass of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n## [Constructor](#constructor)\n\n[`URIError()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError)\n\nCreates a new `URIError` object.\n\n## [Instance properties](#instance_properties)\n\n_Also inherits instance properties from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\nThese properties are defined on `URIError.prototype` and shared by all `URIError` instances.\n\n[`URIError.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `URIError` instances, the initial value is the [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError) constructor.\n\n[`URIError.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name)\n\nRepresents the name for the type of error. For `URIError.prototype.name`, the initial value is `\"URIError\"`.\n\n## [Instance methods](#instance_methods)\n\n_Inherits instance methods from its parent [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)_.\n\n## [Examples](#examples)\n\n### [Catching an URIError](#catching_an_urierror)\n\n```\ntry {\n  decodeURIComponent(\"%\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"malformed URI sequence\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### [Creating an URIError](#creating_an_urierror)\n\n```\ntry {\n  throw new URIError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-native-error-types-used-in-this-standard-urierror](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-native-error-types-used-in-this-standard-urierror) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "URIError - JavaScript | MDN",
    "description": "The URIError object represents an error when a global URI handling function was used in a wrong way.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
    "markdown": "# isFinite() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`isFinite()`** function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) or ±[`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity). Because coercion inside the `isFinite()` function can be [surprising](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description), you may prefer to use [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be tested.\n\n### [Return value](#return_value)\n\n`false` if the given value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity), or `-Infinity` after being [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion); otherwise, `true`.\n\n## [Description](#description)\n\n`isFinite()` is a function property of the global object.\n\nWhen the argument to the `isFinite()` function is not of type [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type), the value is first coerced to a number, and the resulting value is then compared against `NaN` and ±Infinity. This is as confusing as the behavior of [`isNaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) — for example, `isFinite(\"1\")` is `true`.\n\n[`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) is a more reliable way to test whether a value is a finite number value, because it returns `false` for any non-number input.\n\n## [Examples](#examples)\n\n### [Using isFinite()](#using_isfinite)\n\n```\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\n\nisFinite(0); // true\nisFinite(2e64); // true\nisFinite(910); // true\n\n// Would've been false with the more robust Number.isFinite():\nisFinite(null); // true\nisFinite(\"0\"); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-isfinite-number](https://tc39.es/ecma262/multipage/global-object.html#sec-isfinite-number) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "isFinite() - JavaScript | MDN",
    "description": "The isFinite() function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not NaN or ±Infinity. Because coercion inside the isFinite() function can be surprising, you may prefer to use Number.isFinite().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "markdown": "# undefined - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`undefined`** global property represents the primitive value [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type). It is one of JavaScript's [primitive types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe primitive value [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type).\n\n| Property attributes of `undefined` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`undefined` is a property of the _global object_. That is, it is a variable in global scope.\n\nIn all non-legacy browsers, `undefined` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nA variable that has not been assigned a value is of type `undefined`. A method or statement also returns `undefined` if the variable that is being evaluated does not have an assigned value. A function returns `undefined` if a value was not [`returned`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return).\n\n**Note:** While you can use `undefined` as an [identifier](https://developer.mozilla.org/en-US/docs/Glossary/Identifier) (variable name) in any scope other than the global scope (because `undefined` is not a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words)), doing so is a very bad idea that will make your code difficult to maintain and debug.\n\n```\n// DON'T DO THIS\n\n(() => {\n  const undefined = \"foo\";\n  console.log(undefined, typeof undefined); // foo string\n})();\n\n((undefined) => {\n  console.log(undefined, typeof undefined); // foo string\n})(\"foo\");\n```\n\n## [Examples](#examples)\n\n### [Strict equality and undefined](#strict_equality_and_undefined)\n\nYou can use `undefined` and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable `x` is not initialized, and the `if` statement evaluates to true.\n\n```\nlet x;\nif (x === undefined) {\n  // these statements execute\n} else {\n  // these statements do not execute\n}\n```\n\n**Note:** The _strict equality_ operator (as opposed to the _standard equality_ operator) must be used here, because `x == undefined` also checks whether `x` is `null`, while strict equality doesn't. This is because `null` is not equivalent to `undefined`.\n\nSee [Equality comparison and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) for details.\n\n### [typeof operator and undefined](#typeof_operator_and_undefined)\n\nAlternatively, [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) can be used:\n\n```\nlet x;\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n```\n\nOne reason to use [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) is that it does not throw an error if the variable has not been declared.\n\n```\n// x has not been declared before\n// evaluates to true without errors\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n\n// Throws a ReferenceError\nif (x === undefined) {\n}\n```\n\nHowever, there is another alternative. JavaScript is a statically scoped language, so knowing if a variable is declared can be read by seeing whether it is declared in an enclosing context.\n\nThe global scope is bound to the [global object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis), so checking the existence of a variable in the global context can be done by checking the existence of a property on the _global object_, using the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, for instance:\n\n```\nif (\"x\" in window) {\n  // These statements execute only if x is defined globally\n}\n```\n\n### [void operator and undefined](#void_operator_and_undefined)\n\nThe [`void`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void) operator is a third alternative.\n\n```\nlet x;\nif (x === void 0) {\n  // these statements execute\n}\n\n// y has not been declared before\nif (y === void 0) {\n  // throws Uncaught ReferenceError: y is not defined\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-undefined](https://tc39.es/ecma262/multipage/global-object.html#sec-undefined) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "undefined - JavaScript | MDN",
    "description": "The undefined global property represents the primitive\n  value undefined. It is one of JavaScript's\n  primitive types.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
    "markdown": "# isNaN() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`isNaN()`** function determines whether a value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), first converting the value to a number if necessary. Because coercion inside the `isNaN()` function can be [surprising](#description), you may prefer to use [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`value`](#value)\n\nThe value to be tested.\n\n### [Return value](#return_value)\n\n`true` if the given value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) after being [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion); otherwise, `false`.\n\n## [Description](#description)\n\n`isNaN()` is a function property of the global object.\n\nFor number values, `isNaN()` tests if the number is the value [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). When the argument to the `isNaN()` function is not of type [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type), the value is first coerced to a number, and the resulting value is then compared against [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\nThis behavior of `isNaN()` for non-numeric arguments can be confusing! For example, an empty string is coerced to 0, while a boolean is coerced to 0 or 1; both values are intuitively \"not numbers\", but they don't evaluate to `NaN`, so `isNaN()` returns `false`. Therefore, `isNaN()` answers neither the question \"is the input the floating point [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) value\" nor the question \"is the input not a number\".\n\n[`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) is a more reliable way to test whether a value is the number value `NaN` or not. Alternatively, the expression `x !== x` can be used, and neither of the solutions is subject to the false positives that make the global `isNaN()` unreliable. To test if a value is a number, use [`typeof x === \"number\"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\n\nThe `isNaN()` function answers the question \"is the input functionally equivalent to [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) when used in a number context\". If `isNaN(x)` returns `false`, you can use `x` in an arithmetic expression as if it's a valid number that's not `NaN`. If `isNaN(x)` returns `true`, `x` will get coerced to `NaN` and make most arithmetic expressions return `NaN` (because `NaN` propagates). You can use this, for example, to test whether an argument to a function is arithmetically processable (usable \"like\" a number), and handle values that are not number-like by throwing an error, providing a default value, etc. This way, you can have a function that makes use of the full versatility JavaScript provides by implicitly converting values depending on context.\n\n**Note:** The [`+` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) performs both number addition and string concatenation. Therefore, even if `isNaN()` returns `false` for both operands, the `+` operator may still return a string, because it's not used as an arithmetic operator. For example, `isNaN(\"1\")` returns `false`, but `\"1\" + 1` returns `\"11\"`. To be sure that you are working with numbers, [coerce the value to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) and use [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) to test the result.\n\n## [Examples](#examples)\n\nNote how `isNaN()` returns `true` for values that are not the value `NaN` but are not numbers either:\n\n```\nisNaN(NaN); // true\nisNaN(undefined); // true\nisNaN({}); // true\n\nisNaN(true); // false\nisNaN(null); // false\nisNaN(37); // false\n\n// Strings\nisNaN(\"37\"); // false: \"37\" is converted to the number 37 which is not NaN\nisNaN(\"37.37\"); // false: \"37.37\" is converted to the number 37.37 which is not NaN\nisNaN(\"37,5\"); // true\nisNaN(\"123ABC\"); // true: Number(\"123ABC\") is NaN\nisNaN(\"\"); // false: the empty string is converted to 0 which is not NaN\nisNaN(\" \"); // false: a string with spaces is converted to 0 which is not NaN\n\n// Dates\nisNaN(new Date()); // false; Date objects can be converted to a number (timestamp)\nisNaN(new Date().toString()); // true; the string representation of a Date object cannot be parsed as a number\n\n// Arrays\nisNaN([]); // false; the primitive representation is \"\", which coverts to the number 0\nisNaN([1]); // false; the primitive representation is \"1\"\nisNaN([1, 2]); // true; the primitive representation is \"1,2\", which cannot be parsed as number\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-isnan-number](https://tc39.es/ecma262/multipage/global-object.html#sec-isnan-number) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "isNaN() - JavaScript | MDN",
    "description": "The isNaN() function determines whether a value is NaN, first converting the value to a number if necessary. Because coercion inside the isNaN() function can be surprising, you may prefer to use Number.isNaN().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator",
    "markdown": "# Iterator - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAn **`Iterator`** object is an object that conforms to the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) by providing a `next()` method that returns an iterator result object. All built-in iterators inherit from the `Iterator` class. The `Iterator` class provides a [`@@iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator) method that returns the iterator object itself, making the iterator also [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). It also provides some helper methods for working with iterators.\n\n## [Description](#description)\n\nThe following are all built-in JavaScript iterators:\n\n*   The _Array Iterator_ returned by [`Array.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values), [`Array.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys), [`Array.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries), [`Array.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator), [`TypedArray.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values), [`TypedArray.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys), [`TypedArray.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries), [`TypedArray.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator), and [`arguments[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator).\n*   The _String Iterator_ returned by [`String.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator).\n*   The _Map Iterator_ returned by [`Map.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values), [`Map.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys), [`Map.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries), and [`Map.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator).\n*   The _Set Iterator_ returned by [`Set.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values), [`Set.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys), [`Set.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries), and [`Set.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator).\n*   The _RegExp String Iterator_ returned by [`RegExp.prototype[@@matchAll]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll) and [`String.prototype.matchAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll).\n*   The [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object returned by [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n*   The _Segments Iterator_ returned by the [`[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator) method of the [`Segments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object returned by [`Intl.Segmenter.prototype.segment()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment).\n*   The _Iterator Helper_ returned by iterator helper methods such as [`Iterator.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter) and [`Iterator.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map).\n\nEach of these iterators have a distinct prototype object, which defines the `next()` method used by the particular iterator. For example, all string iterator objects inherit from a hidden object `StringIteratorPrototype`, which has a `next()` method that iterates this string by code points. `StringIteratorPrototype` also has a [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property whose initial value is the string `\"String Iterator\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). Similarly, other iterator prototypes also have their own `@@toStringTag` values, which are the same as the names given above.\n\nAll of these prototype objects inherit from `Iterator.prototype`, which provides a [`@@iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method that returns the iterator object itself, making the iterator also [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol).\n\n### [Iterator helpers](#iterator_helpers)\n\n**Note:** These methods are _iterator_ helpers, not _iterable_ helpers, because the only requirement for an object to be iterable is just the presence of a `@@iterator` method. There is no shared prototype to install these methods on.\n\nThe `Iterator` class itself provides some helper methods for working with iterators. For example, you may be tempted to do the following:\n\n```\nconst nameToDeposit = new Map([\n  [\"Anne\", 1000],\n  [\"Bert\", 1500],\n  [\"Carl\", 2000],\n]);\n\nconst totalDeposit = [...nameToDeposit.values()].reduce((a, b) => a + b);\n```\n\nThis first converts the iterator returned by [`Map.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values) to an array, then uses the [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) method to calculate the sum. However, this both creates an intermediate array and iterates the array twice. Instead, you can use the `reduce()` method of the iterator itself:\n\n```\nconst totalDeposit = nameToDeposit.values().reduce((a, b) => a + b);\n```\n\nThis method is more efficient, because it only iterates the iterator once, without memorizing any intermediate values. Iterator helper methods are necessary to work with infinite iterators:\n\n```\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci();\nconst firstThreeDigitTerm = seq.find((n) => n >= 100);\n```\n\nYou cannot convert `seq` to an array, because it is infinite. Instead, you can use the `find()` method of the iterator itself, which only iterates `seq` as far as necessary to find the first value that satisfies the condition.\n\nYou will find many iterator methods analogous to array methods, such as:\n\n| Iterator method | Array method |\n| --- | --- |\n| [`Iterator.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/every) | [`Array.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) |\n| [`Iterator.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter) | [`Array.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) |\n| [`Iterator.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/find) | [`Array.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) |\n| [`Iterator.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap) | [`Array.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) |\n| [`Iterator.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/forEach) | [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) |\n| [`Iterator.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map) | [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) |\n| [`Iterator.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/reduce) | [`Array.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) |\n| [`Iterator.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/some) | [`Array.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) |\n\n[`Iterator.prototype.drop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop) and [`Iterator.prototype.take()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take) combined are somewhat analogous to [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\nAmong these methods, [`filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter), [`flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map), [`drop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop), and [`take()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take) return a new _Iterator Helper_ object. The iterator helper is also an `Iterator` instance, making the helper methods chainable. All iterator helper objects inherit from a common prototype object, which implements the iterator protocol:\n\n[`next()`](#next)\n\nCalls the `next()` method of the underlying iterator, applies the helper method to the result, and returns the result.\n\n[`return()`](#return)\n\nCalls the `return()` method of the underlying iterator, and returns the result.\n\nThe iterator helper shares the same data source as the underlying iterator, so iterating the iterator helper causes the underlying iterator to be iterated as well. There is no way to \"fork\" an iterator to allow it to be iterated multiple times.\n\n```\nconst it = [1, 2, 3].values();\nconst it2 = it.drop(0); // Essentially a copy\nconsole.log(it.next().value); // 1\nconsole.log(it2.next().value); // 2\nconsole.log(it.next().value); // 3\n```\n\n### [Proper iterators](#proper_iterators)\n\nThere are two kinds of \"iterators\": objects that conform to the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) (which, at its minimum, only requires the presence of a `next()` method), and objects that inherit from the `Iterator` class, which enjoy the helper methods. They do not entail each other — objects that inherit from `Iterator` do not automatically become iterators, because the `Iterator` class does not define a `next()` method. Instead, the object needs to define a `next()` method itself. A _proper iterator_ is one that both conforms to the iterator protocol and inherits from `Iterator`, and most code expect iterators to be proper iterators and iterables to return proper iterators. To create proper iterators, define a class that extends [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/Iterator), or use the [`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from) method.\n\n```\nclass MyIterator extends Iterator {\n  next() {\n    // …\n  }\n}\n\nconst myIterator = Iterator.from({\n  next() {\n    // …\n  },\n});\n```\n\n## [Constructor](#constructor)\n\n[`Iterator()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/Iterator) Experimental\n\nIntended to be [extended](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) by other classes that create iterators. Throws an error when constructed by itself.\n\n## [Static methods](#static_methods)\n\n[`Iterator.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/from) Experimental\n\nCreates a new `Iterator` object from an iterator or iterable object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Iterator.prototype` and shared by all `Iterator` instances.\n\n[`Iterator.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Iterator` instances, the initial value is the [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/Iterator) constructor.\n\n[`Iterator.prototype[@@toStringTag]`](#iterator.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Iterator\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n**Note:** Unlike the `@@toStringTag` on most built-in classes, `Iterator.prototype[@@toStringTag]` is writable for web compatibility reasons.\n\n## [Instance methods](#instance_methods)\n\n[`Iterator.prototype.drop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop) Experimental\n\nReturns a new iterator helper that skips the given number of elements at the start of this iterator.\n\n[`Iterator.prototype.every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/every) Experimental\n\nTests whether all elements produced by the iterator pass the test implemented by the provided function.\n\n[`Iterator.prototype.filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter) Experimental\n\nReturns a new iterator helper that yields only those elements of the iterator for which the provided callback function returns `true`.\n\n[`Iterator.prototype.find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/find) Experimental\n\nReturns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) is returned.\n\n[`Iterator.prototype.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap) Experimental\n\nReturns a new iterator helper that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).\n\n[`Iterator.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/forEach) Experimental\n\nExecutes a provided function once for each element produced by the iterator.\n\n[`Iterator.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map) Experimental\n\nReturns a new iterator helper that yields elements of the iterator, each transformed by a mapping function.\n\n[`Iterator.prototype.reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/reduce) Experimental\n\nExecutes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.\n\n[`Iterator.prototype.some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/some) Experimental\n\nTests whether at least one element in the iterator passes the test implemented by the provided function. It returns a boolean value.\n\n[`Iterator.prototype.take()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take) Experimental\n\nReturns a new iterator helper that yields the given number of elements in this iterator and then terminates.\n\n[`Iterator.prototype.toArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/toArray) Experimental\n\nCreates a new [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instance populated with the elements yielded from the iterator.\n\n[`Iterator.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator)\n\nReturns the iterator object itself. This allows iterator objects to also be iterable.\n\n## [Examples](#examples)\n\n### [Using an iterator as an iterable](#using_an_iterator_as_an_iterable)\n\nAll built-in iterators are also iterable, so you can use them in a `for...of` loop:\n\n```\nconst arrIterator = [1, 2, 3].values();\nfor (const value of arrIterator) {\n  console.log(value);\n}\n// Logs: 1, 2, 3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-%iteratorprototype%-object](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-%iteratorprototype%-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Iterator - JavaScript | MDN",
    "description": "An Iterator object is an object that conforms to the iterator protocol by providing a next() method that returns an iterator result object. All built-in iterators inherit from the Iterator class. The Iterator class provides a @@iterator method that returns the iterator object itself, making the iterator also iterable. It also provides some helper methods for working with iterators.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "markdown": "# WeakMap - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`WeakMap`** is a collection of key/value pairs whose keys must be objects or [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), with values of any arbitrary [JavaScript type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures), and which does not create strong references to its keys. That is, an object's presence as a key in a `WeakMap` does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any `WeakMap` become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a `WeakMap` key is symbol — more specifically, [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) — because non-registered symbols are guaranteed to be unique and cannot be re-created.\n\n`WeakMap` allows associating data to objects in a way that doesn't prevent the key objects from being collected, even if the values reference the keys. However, a `WeakMap` doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration; if a `WeakMap` exposed any method to obtain a list of its keys, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) rather than a `WeakMap`.\n\nYou can learn more about `WeakMap` in the [WeakMap object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object) section of the [Keyed collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections) guide.\n\n## [Description](#description)\n\nKeys of WeakMaps must be garbage-collectable. Most [primitive data types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) can be arbitrarily created and don't have a lifetime, so they cannot be used as keys. Objects and [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) can be used as keys because they are garbage-collectable.\n\n### [Why WeakMap?](#why_weakmap)\n\nA map API _could_ be implemented in JavaScript with two arrays (one for keys, one for values) shared by the four API methods. Setting elements on this map would involve pushing a key and value onto the end of each of those arrays simultaneously. As a result, the indices of the key and value would correspond to both arrays. Getting values from the map would involve iterating through all keys to find a match, then using the index of this match to retrieve the corresponding value from the array of values.\n\nSuch an implementation would have two main inconveniences:\n\n1.  The first one is an `O(n)` set and search (_n_ being the number of keys in the map) since both operations must iterate through the list of keys to find a matching value.\n2.  The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.\n\nBy contrast, in a `WeakMap`, a key object refers strongly to its contents as long as the key is not garbage collected, but weakly from then on. As such, a `WeakMap`:\n\n*   does not prevent garbage collection, which eventually removes references to the key object\n*   allows garbage collection of any values if their key objects are not referenced from somewhere other than a `WeakMap`\n\nA `WeakMap` can be a particularly useful construct when mapping keys to information about the key that is valuable _only if_ the key has not been garbage collected.\n\nBut because a `WeakMap` doesn't allow observing the liveness of its keys, its keys are not enumerable. There is no method to obtain a list of the keys. If there were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map).\n\n## [Constructor](#constructor)\n\n[`WeakMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap)\n\nCreates a new `WeakMap` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `WeakMap.prototype` and shared by all `WeakMap` instances.\n\n[`WeakMap.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `WeakMap` instances, the initial value is the [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap) constructor.\n\n[`WeakMap.prototype[@@toStringTag]`](#weakmap.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakMap\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`WeakMap.prototype.delete()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete)\n\nRemoves any value associated to the `key`. `WeakMap.prototype.has(key)` will return `false` afterwards.\n\n[`WeakMap.prototype.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get)\n\nReturns the value associated to the `key`, or `undefined` if there is none.\n\n[`WeakMap.prototype.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has)\n\nReturns a Boolean asserting whether a value has been associated to the `key` in the `WeakMap` object or not.\n\n[`WeakMap.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set)\n\nSets the `value` for the `key` in the `WeakMap` object. Returns the `WeakMap` object.\n\n## [Examples](#examples)\n\n### [Using WeakMap](#using_weakmap)\n\n```\nconst wm1 = new WeakMap();\nconst wm2 = new WeakMap();\nconst wm3 = new WeakMap();\nconst o1 = {};\nconst o2 = function () {};\nconst o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o2, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because that is the set value\nwm2.get(o3); // undefined, because there is no key for o3 on wm2\n\nwm1.has(o2); // true\nwm2.has(o2); // true (even if the value itself is 'undefined')\nwm2.has(o3); // false\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n```\n\n### [Implementing a WeakMap-like class with a .clear() method](#implementing_a_weakmap-like_class_with_a_.clear_method)\n\n```\nclass ClearableWeakMap {\n  #wm;\n  constructor(init) {\n    this.#wm = new WeakMap(init);\n  }\n  clear() {\n    this.#wm = new WeakMap();\n  }\n  delete(k) {\n    return this.#wm.delete(k);\n  }\n  get(k) {\n    return this.#wm.get(k);\n  }\n  has(k) {\n    return this.#wm.has(k);\n  }\n  set(k, v) {\n    this.#wm.set(k, v);\n    return this;\n  }\n}\n```\n\n### [Emulating private members](#emulating_private_members)\n\nDevelopers can use a `WeakMap` to associate private data to an object, with the following benefits:\n\n*   Compared to a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), a WeakMap does not hold strong references to the object used as the key, so the metadata shares the same lifetime as the object itself, avoiding memory leaks.\n*   Compared to using non-enumerable and/or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties, a WeakMap is external to the object and there is no way for user code to retrieve the metadata through reflective methods like [`Object.getOwnPropertySymbols`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols).\n*   Compared to a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures), the same WeakMap can be reused for all instances created from a constructor, making it more memory-efficient, and allows different instances of the same class to read the private members of each other.\n\n```\nlet Thing;\n\n{\n  const privateScope = new WeakMap();\n  let counter = 0;\n\n  Thing = function () {\n    this.someProperty = \"foo\";\n\n    privateScope.set(this, {\n      hidden: ++counter,\n    });\n  };\n\n  Thing.prototype.showPublic = function () {\n    return this.someProperty;\n  };\n\n  Thing.prototype.showPrivate = function () {\n    return privateScope.get(this).hidden;\n  };\n}\n\nconsole.log(typeof privateScope);\n// \"undefined\"\n\nconst thing = new Thing();\n\nconsole.log(thing);\n// Thing {someProperty: \"foo\"}\n\nthing.showPublic();\n// \"foo\"\n\nthing.showPrivate();\n// 1\n```\n\nThis is roughly equivalent to the following, using [private fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties):\n\n```\nclass Thing {\n  static #counter = 0;\n  #hidden;\n  constructor() {\n    this.someProperty = \"foo\";\n    this.#hidden = ++Thing.#counter;\n  }\n  showPublic() {\n    return this.someProperty;\n  }\n  showPrivate() {\n    return this.#hidden;\n  }\n}\n\nconsole.log(thing);\n// Thing {someProperty: \"foo\"}\n\nthing.showPublic();\n// \"foo\"\n\nthing.showPrivate();\n// 1\n```\n\n### [Associating metadata](#associating_metadata)\n\nA [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) can be used to associate metadata with an object, without affecting the lifetime of the object itself. This is very similar to the private members example, since private members are also modelled as external metadata that doesn't participate in [prototypical inheritance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nThis use case can be extended to already-created objects. For example, on the web, we may want to associate extra data with a DOM element, which the DOM element may access later. A common approach is to attach the data as a property:\n\n```\nconst buttons = document.querySelectorAll(\".button\");\nbuttons.forEach((button) => {\n  button.clicked = false;\n  button.addEventListener(\"click\", () => {\n    button.clicked = true;\n    const currentButtons = [...document.querySelectorAll(\".button\")];\n    if (currentButtons.every((button) => button.clicked)) {\n      console.log(\"All buttons have been clicked!\");\n    }\n  });\n});\n```\n\nThis approach works, but it has a few pitfalls:\n\n*   The `clicked` property is enumerable, so it will show up in [`Object.keys(button)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops, etc. This can be mitigated by using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), but that makes the code more verbose.\n*   The `clicked` property is a normal string property, so it can be accessed and overwritten by other code. This can be mitigated by using a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) key, but the key would still be accessible via [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols).\n\nUsing a `WeakMap` fixes these:\n\n```\nconst buttons = document.querySelectorAll(\".button\");\nconst clicked = new WeakMap();\nbuttons.forEach((button) => {\n  clicked.set(button, false);\n  button.addEventListener(\"click\", () => {\n    clicked.set(button, true);\n    const currentButtons = [...document.querySelectorAll(\".button\")];\n    if (currentButtons.every((button) => clicked.get(button))) {\n      console.log(\"All buttons have been clicked!\");\n    }\n  });\n});\n```\n\nHere, only code that has access to `clicked` knows the clicked state of each button, and external code can't modify the states. In addition, if any of the buttons gets removed from the DOM, the associated metadata will automatically get garbage-collected.\n\n### [Caching](#caching)\n\nYou can associate objects passed to a function with the result of the function, so that if the same object is passed again, the cached result can be returned without re-executing the function. This is useful if the function is pure (i.e. it doesn't mutate any outside objects or cause other observable side effects).\n\n```\nconst cache = new WeakMap();\nfunction handleObjectValues(obj) {\n  if (cache.has(obj)) {\n    return cache.get(obj);\n  }\n  const result = Object.values(obj).map(heavyComputation);\n  cache.set(obj, result);\n  return result;\n}\n```\n\nThis only works if your function's input is an object. Moreover, even if the input is never passed in again, the result still remains forever in the cache as long as the key (input) is alive. A more effective way is to use a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) paired with [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) objects, which allows you to associate any type of input value with its respective (potentially large) computation result. See the [WeakRefs and FinalizationRegistry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management#weakrefs_and_finalizationregistry) example for more details.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakmap-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakmap-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakMap - JavaScript | MDN",
    "description": "A WeakMap is a collection of key/value pairs whose keys must be objects or non-registered symbols, with values of any arbitrary JavaScript type, and which does not create strong references to its keys. That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any WeakMap become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a WeakMap key is symbol — more specifically, non-registered symbols — because non-registered symbols are guaranteed to be unique and cannot be re-created.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "markdown": "# JSON - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`JSON`** namespace object contains static methods for parsing values from and converting values to [JavaScript Object Notation](https://json.org/) ([JSON](https://developer.mozilla.org/en-US/docs/Glossary/JSON)).\n\n## [Description](#description)\n\nUnlike most global objects, `JSON` is not a constructor. You cannot use it with the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `JSON` object as a function. All properties and methods of `JSON` are static (just like the [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object).\n\n### [JavaScript and JSON differences](#javascript_and_json_differences)\n\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null). It is based upon JavaScript syntax, but is distinct from JavaScript: most of JavaScript is _not_ JSON. For example:\n\n[Objects and Arrays](#objects_and_arrays)\n\nProperty names must be double-quoted strings; [trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas) are forbidden.\n\n[Numbers](#numbers)\n\nLeading zeros are prohibited. A decimal point must be followed by at least one digit. `NaN` and `Infinity` are unsupported.\n\nAny JSON text is a valid JavaScript expression, but only after the [JSON superset](https://github.com/tc39/proposal-json-superset) revision. Before the revision, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but the same use in JavaScript string literals is a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\nOther differences include allowing only double-quoted strings and no support for [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) or comments. For those who wish to use a more human-friendly configuration format based on JSON, there is [JSON5](https://json5.org/), used by the Babel compiler, and the more commonly used [YAML](https://en.wikipedia.org/wiki/YAML).\n\nThe same text may represent different values in JavaScript object literals vs. JSON as well. For more information, see [Object literal syntax vs. JSON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#object_literal_syntax_vs._json).\n\n### [Full JSON grammar](#full_json_grammar)\n\nValid JSON syntax is formally defined by the following grammar, expressed in [ABNF](https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form), and copied from [IETF JSON standard (RFC)](https://datatracker.ietf.org/doc/html/rfc8259):\n\nJSON-text = object / array\nbegin-array     = ws %x5B ws  ; \\[ left square bracket\nbegin-object    = ws %x7B ws  ; { left curly bracket\nend-array       = ws %x5D ws  ; \\] right square bracket\nend-object      = ws %x7D ws  ; } right curly bracket\nname-separator  = ws %x3A ws  ; : colon\nvalue-separator = ws %x2C ws  ; , comma\nws = \\*(\n     %x20 /              ; Space\n     %x09 /              ; Horizontal tab\n     %x0A /              ; Line feed or New line\n     %x0D                ; Carriage return\n     )\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65   ; false\nnull  = %x6e.75.6c.6c      ; null\ntrue  = %x74.72.75.65      ; true\nobject = begin-object \\[ member \\*( value-separator member ) \\]\n         end-object\nmember = string name-separator value\narray = begin-array \\[ value \\*( value-separator value ) \\] end-array\nnumber = \\[ minus \\] int \\[ frac \\] \\[ exp \\]\ndecimal-point = %x2E       ; .\ndigit1-9 = %x31-39         ; 1-9\ne = %x65 / %x45            ; e E\nexp = e \\[ minus / plus \\] 1\\*DIGIT\nfrac = decimal-point 1\\*DIGIT\nint = zero / ( digit1-9 \\*DIGIT )\nminus = %x2D               ; -\nplus = %x2B                ; +\nzero = %x30                ; 0\nstring = quotation-mark \\*char quotation-mark\nchar = unescaped /\n    escape (\n        %x22 /          ; \"    quotation mark  U+0022\n        %x5C /          ; \\\\    reverse solidus U+005C\n        %x2F /          ; /    solidus         U+002F\n        %x62 /          ; b    backspace       U+0008\n        %x66 /          ; f    form feed       U+000C\n        %x6E /          ; n    line feed       U+000A\n        %x72 /          ; r    carriage return U+000D\n        %x74 /          ; t    tab             U+0009\n        %x75 4HEXDIG )  ; uXXXX                U+XXXX\nescape = %x5C              ; \\\\\nquotation-mark = %x22      ; \"\nunescaped = %x20-21 / %x23-5B / %x5D-10FFFF\nHEXDIG = DIGIT / %x41-46 / %x61-66   ; 0-9, A-F, or a-f\n       ; HEXDIG equivalent to HEXDIG rule in \\[RFC5234\\]\nDIGIT = %x30-39            ; 0-9\n      ; DIGIT equivalent to DIGIT rule in \\[RFC5234\\]\n\nInsignificant [whitespace](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) may be present anywhere except within a `JSONNumber` (numbers must contain no whitespace) or `JSONString` (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character ([U+0009](https://symbl.cc/en/0009/)), carriage return ([U+000D](https://symbl.cc/en/000D/)), line feed ([U+000A](https://symbl.cc/en/000A/)), and space ([U+0020](https://symbl.cc/en/0020/)) characters are the only valid whitespace characters.\n\n## [Static properties](#static_properties)\n\n[`JSON[@@toStringTag]`](#jsontostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"JSON\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Static methods](#static_methods)\n\n[`JSON.isRawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/isRawJSON) Experimental\n\nTests whether a value is an object returned by [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON).\n\n[`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\nParse a piece of string text as JSON, optionally transforming the produced value and its properties, and return the value.\n\n[`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON) Experimental\n\nCreates a \"raw JSON\" object containing a piece of JSON text. When serialized to JSON, the raw JSON object is treated as if it is already a piece of JSON. This text is required to be valid JSON.\n\n[`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\nReturn a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.\n\n## [Examples](#examples)\n\n### [Example JSON](#example_json)\n\n```\n{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}\n```\n\nYou can use the [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) method to convert the above JSON string into a JavaScript object:\n\n```\nconst jsonText = `{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}`;\n\nconsole.log(JSON.parse(jsonText));\n```\n\n### [Lossless number serialization](#lossless_number_serialization)\n\nJSON can contain number literals of arbitrary precision. However, it is not possible to represent all JSON numbers exactly in JavaScript, because JavaScript uses floating point representation which has a fixed precision. For example, `12345678901234567890 === 12345678901234567000` in JavaScript because they have the same floating point representation. This means there is no JavaScript number that corresponds precisely to the `12345678901234567890` JSON number.\n\nLet's assume you have a exact representation of some number (either via [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) or a custom library):\n\n```\nconst data = {\n  // Using a BigInt here to store the exact value,\n  // but it can also be a custom high-precision number library,\n  // if the number might not be an integer.\n  gross_gdp: 12345678901234567890n,\n};\n```\n\nYou want to serialize it and then parse to the same exact number. There are several difficulties:\n\n*   On the serialization side, in order to obtain a number in JSON, you have to pass a number to `JSON.stringify`, either via the `replacer` function or via the `toJSON` method. But, in either case, you have already lost precision during number conversion. If you pass a string to `JSON.stringify`, it will be serialized as a string, not a number.\n*   On the parsing side, not all numbers can be represented exactly. For example, `JSON.parse(\"12345678901234567890\")` returns `12345678901234568000` because the number is rounded to the nearest representable number. Even if you use a `reviver` function, the number will already be rounded before the `reviver` function is called.\n\nThere are, in general, two ways to ensure that numbers are losslessly converted to JSON and parsed back: one involves a JSON number, another involves a JSON string. JSON is a _communication format_, so if you use JSON, you are likely communicating with another system (HTTP request, storing in database, etc.). The best solution to choose depends on the recipient system.\n\n#### Using JSON strings\n\nIf the recipient system does not have same JSON-handling capabilities as JavaScript, and does not support high precision numbers, you may want to serialize the number as a string, and then handle it as a string on the recipient side. This is also the only option in older JavaScript.\n\nTo specify how custom data types (including `BigInt`) should be serialized to JSON, either add a `toJSON` method to your data type, or use the `replacer` function of [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n```\n// Using toJSON() method\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\nconst str1 = JSON.stringify(data);\n\n// Using JSON.stringify() with replacer\nconst str2 = JSON.stringify(data, (key, value) => {\n  if (key === \"gross_gdp\") {\n    return value.toString();\n  }\n  return value;\n});\n```\n\nIn either case, the JSON text will look like `{\"gross_gdp\":\"12345678901234567890\"}`, where the value is a string, not a number. Then, on the recipient side, you can parse the JSON and handle the string.\n\n#### Using JSON numbers\n\nIf the recipient of this message natively supports high precision numbers (such as Python integers), passing numbers as JSON numbers is obviously better, because they can directly parse to the high precision type instead of parsing a string from JSON, and then parsing a number from the string. In JavaScript, you can serialize arbitrary data types to JSON numbers without producing a number value first (resulting in loss of precision) by using [`JSON.rawJSON()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/rawJSON) to precisely specify what the JSON source text should be.\n\n```\n// Using toJSON() method\nBigInt.prototype.toJSON = function () {\n  return JSON.rawJSON(this.toString());\n};\nconst str1 = JSON.stringify(data);\n\n// Using JSON.stringify() with replacer\nconst str2 = JSON.stringify(data, (key, value) => {\n  if (key === \"gross_gdp\") {\n    return JSON.rawJSON(value.toString());\n  }\n  return value;\n});\n```\n\nThe text passed to `JSON.rawJSON` is treated as if it is already a piece of JSON, so it won't be serialized again as a string. Therefore, the JSON text will look like `{\"gross_gdp\":12345678901234567890}`, where the value is a number. This JSON can then be parsed by the recipient without any extra processing, provided that the recipient system does not have the same precision limitations as JavaScript.\n\nWhen parsing JSON containing high-precision numbers in JavaScript, take extra care because when `JSON.parse()` invokes the `reviver` function, the value you receive is already parsed (and has lost precision). You can use the `context.source` parameter of the [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) `reviver` function to re-parse the number yourself.\n\n```\nconst parsedData = JSON.parse(str, (key, value, context) => {\n  if (key === \"gross_gdp\") {\n    // Or use the constructor of your custom high-precision number library\n    return BigInt(context.source);\n  }\n  return value;\n});\n// { gross_gdp: 12345678901234567890n }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-json-object](https://tc39.es/ecma262/multipage/structured-data.html#sec-json-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "JSON - JavaScript | MDN",
    "description": "The JSON namespace object contains static methods for parsing values from and converting values to JavaScript Object Notation (JSON).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
    "markdown": "# Math - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Math`** namespace object contains static properties and methods for mathematical constants and functions.\n\n`Math` works with the [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) type. It doesn't work with [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n## [Description](#description)\n\nUnlike most global objects, `Math` is not a constructor. You cannot use it with the [`new` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Math` object as a function. All properties and methods of `Math` are static.\n\n**Note:** Many `Math` functions have a precision that's _implementation-dependent_.\n\nThis means that different browsers can give a different result. Even the same JavaScript engine on a different OS or architecture can give different results!\n\n## [Static properties](#static_properties)\n\n[`Math.E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)\n\nEuler's number and the base of natural logarithms; approximately `2.718`.\n\n[`Math.LN10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10)\n\nNatural logarithm of `10`; approximately `2.303`.\n\n[`Math.LN2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2)\n\nNatural logarithm of `2`; approximately `0.693`.\n\n[`Math.LOG10E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E)\n\nBase-10 logarithm of `E`; approximately `0.434`.\n\n[`Math.LOG2E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E)\n\nBase-2 logarithm of `E`; approximately `1.443`.\n\n[`Math.PI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI)\n\nRatio of a circle's circumference to its diameter; approximately `3.14159`.\n\n[`Math.SQRT1_2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2)\n\nSquare root of ½; approximately `0.707`.\n\n[`Math.SQRT2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2)\n\nSquare root of `2`; approximately `1.414`.\n\n[`Math[@@toStringTag]`](#mathtostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Math\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Static methods](#static_methods)\n\n[`Math.abs()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs)\n\nReturns the absolute value of the input.\n\n[`Math.acos()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos)\n\nReturns the arccosine of the input.\n\n[`Math.acosh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh)\n\nReturns the hyperbolic arccosine of the input.\n\n[`Math.asin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin)\n\nReturns the arcsine of the input.\n\n[`Math.asinh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh)\n\nReturns the hyperbolic arcsine of a number.\n\n[`Math.atan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan)\n\nReturns the arctangent of the input.\n\n[`Math.atan2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2)\n\nReturns the arctangent of the quotient of its arguments.\n\n[`Math.atanh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh)\n\nReturns the hyperbolic arctangent of the input.\n\n[`Math.cbrt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt)\n\nReturns the cube root of the input.\n\n[`Math.ceil()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n\nReturns the smallest integer greater than or equal to the input.\n\n[`Math.clz32()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32)\n\nReturns the number of leading zero bits of the 32-bit integer input.\n\n[`Math.cos()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos)\n\nReturns the cosine of the input.\n\n[`Math.cosh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh)\n\nReturns the hyperbolic cosine of the input.\n\n[`Math.exp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp)\n\nReturns ex, where x is the argument, and e is Euler's number (`2.718`…, the base of the natural logarithm).\n\n[`Math.expm1()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1)\n\nReturns subtracting `1` from `exp(x)`.\n\n[`Math.floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\nReturns the largest integer less than or equal to the input.\n\n[`Math.f16round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/f16round)\n\nReturns the nearest [half precision](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) float representation of the input.\n\n[`Math.fround()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround)\n\nReturns the nearest [single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of the input.\n\n[`Math.hypot()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot)\n\nReturns the square root of the sum of squares of its arguments.\n\n[`Math.imul()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul)\n\nReturns the result of the 32-bit integer multiplication of the inputs.\n\n[`Math.log()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log)\n\nReturns the natural logarithm (㏒e; also, ㏑) of the input.\n\n[`Math.log10()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10)\n\nReturns the base-10 logarithm of the input.\n\n[`Math.log1p()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)\n\nReturns the natural logarithm (㏒e; also ㏑) of `1 + x` for the number `x`.\n\n[`Math.log2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2)\n\nReturns the base-2 logarithm of the input.\n\n[`Math.max()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n\nReturns the largest of zero or more numbers.\n\n[`Math.min()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n\nReturns the smallest of zero or more numbers.\n\n[`Math.pow()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow)\n\nReturns base `x` to the exponent power `y` (that is, `x``y`).\n\n[`Math.random()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n\nReturns a pseudo-random number between `0` and `1`.\n\n[`Math.round()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n\nReturns the value of the input rounded to the nearest integer.\n\n[`Math.sign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign)\n\nReturns the sign of the input, indicating whether it is positive, negative, or zero.\n\n[`Math.sin()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin)\n\nReturns the sine of the input.\n\n[`Math.sinh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh)\n\nReturns the hyperbolic sine of the input.\n\n[`Math.sqrt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt)\n\nReturns the positive square root of the input.\n\n[`Math.tan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan)\n\nReturns the tangent of the input.\n\n[`Math.tanh()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh)\n\nReturns the hyperbolic tangent of the input.\n\n[`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc)\n\nReturns the integer portion of the input, removing any fractional digits.\n\n## [Examples](#examples)\n\n### [Converting between degrees and radians](#converting_between_degrees_and_radians)\n\nThe trigonometric functions `sin()`, `cos()`, `tan()`, `asin()`, `acos()`, `atan()`, and `atan2()` expect (and return) angles in _radians_.\n\nSince humans tend to think in degrees, and some functions (such as CSS transforms) can accept degrees, it is a good idea to keep functions handy that convert between the two:\n\n```\nfunction degToRad(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\nfunction radToDeg(rad) {\n  return rad / (Math.PI / 180);\n}\n```\n\n### [Calculating the height of an equilateral triangle](#calculating_the_height_of_an_equilateral_triangle)\n\nIf we want to calculate the height of an equilateral triangle, and we know its side length is 100, we can use the formulae _length of the adjacent multiplied by the tangent of the angle is equal to the opposite._\n\n![An equilateral triangle where a perpendicular of one edge is drawn from the opposite vertex, forming a right triangle with three sides marked as \"adjacent\", \"opposite\", and \"hypotenuse\". The angle between the \"adjacent\" and \"hypotenuse\" sides is 60 degrees.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trigonometry.png)\n\nIn JavaScript, we can do this with the following:\n\n```\n50 * Math.tan(degToRad(60));\n```\n\nWe use our `degToRad()` function to convert 60 degrees to radians, as [`Math.tan()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan) expects an input value in radians.\n\n### [Returning a random integer between two bounds](#returning_a_random_integer_between_two_bounds)\n\nThis can be achieved with a combination of [`Math.random()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) and [`Math.floor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor):\n\n```\nfunction random(min, max) {\n  const num = Math.floor(Math.random() * (max - min + 1)) + min;\n  return num;\n}\n\nrandom(1, 10);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-math-object](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math-object) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Math - JavaScript | MDN",
    "description": "The Math namespace object contains static properties and methods for mathematical constants and functions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef",
    "markdown": "# WeakRef - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`WeakRef`** object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.\n\n## [Description](#description)\n\nA `WeakRef` object contains a weak reference to an object, which is called its _target_ or _referent_. A _weak reference_ to an object is a reference that does not prevent the object from being reclaimed by the garbage collector. In contrast, a normal (or _strong_) reference keeps an object in memory. When an object no longer has any strong references to it, the JavaScript engine's garbage collector may destroy the object and reclaim its memory. If that happens, you can't get the object from a weak reference anymore.\n\nBecause [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) are also garbage collectable, they can also be used as the target of a `WeakRef` object. However, the use case of this is limited.\n\n### [Avoid where possible](#avoid_where_possible)\n\nCorrect use of `WeakRef` takes careful thought, and it's best avoided if possible. It's also important to avoid relying on any specific behaviors not guaranteed by the specification. When, how, and whether garbage collection occurs is down to the implementation of any given JavaScript engine. Any behavior you observe in one engine may be different in another engine, in another version of the same engine, or even in a slightly different situation with the same version of the same engine. Garbage collection is a hard problem that JavaScript engine implementers are constantly refining and improving their solutions to.\n\nHere are some specific points included by the authors in the [proposal](https://github.com/tc39/proposal-weakrefs) that introduced `WeakRef`:\n\n> [Garbage collectors](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) are complicated. If an application or library depends on GC cleaning up a WeakRef or calling a finalizer \\[cleanup callback\\] in a timely, predictable manner, it's likely to be disappointed: the cleanup may happen much later than expected, or not at all. Sources of variability include:\n> \n> *   One object might be garbage-collected much sooner than another object, even if they become unreachable at the same time, e.g., due to generational collection.\n> *   Garbage collection work can be split up over time using incremental and concurrent techniques.\n> *   Various runtime heuristics can be used to balance memory usage, responsiveness.\n> *   The JavaScript engine may hold references to things which look like they are unreachable (e.g., in closures, or inline caches).\n> *   Different JavaScript engines may do these things differently, or the same engine may change its algorithms across versions.\n> *   Complex factors may lead to objects being held alive for unexpected amounts of time, such as use with certain APIs.\n\n### [Notes on WeakRefs](#notes_on_weakrefs)\n\n*   If your code has just created a `WeakRef` for a target object, or has gotten a target object from a `WeakRef`'s `deref` method, that target object will not be reclaimed until the end of the current JavaScript [job](https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#job) (including any promise reaction jobs that run at the end of a script job). That is, you can only \"see\" an object get reclaimed between turns of the event loop. This is primarily to avoid making the behavior of any given JavaScript engine's garbage collector apparent in code — because if it were, people would write code relying on that behavior, which would break when the garbage collector's behavior changed. (Garbage collection is a hard problem; JavaScript engine implementers are constantly refining and improving how it works.)\n*   If multiple `WeakRef`s have the same target, they're consistent with one another. The result of calling `deref` on one of them will match the result of calling `deref` on another of them (in the same job), you won't get the target object from one of them but `undefined` from another.\n*   If the target of a `WeakRef` is also in a [`FinalizationRegistry`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), the `WeakRef`'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls `deref` on a `WeakRef` for the object, it will receive `undefined`.\n*   You cannot change the target of a `WeakRef`, it will always only ever be the original target object or `undefined` when that target has been reclaimed.\n*   A `WeakRef` might never return `undefined` from `deref`, even if nothing strongly holds the target, because the garbage collector may never decide to reclaim the object.\n\n## [Constructor](#constructor)\n\n[`WeakRef()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef)\n\nCreates a new `WeakRef` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `WeakRef.prototype` and shared by all `WeakRef` instances.\n\n[`WeakRef.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) Optional\n\nThe constructor function that created the instance object. For `WeakRef` instances, the initial value is the [`WeakRef`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef) constructor.\n\n**Note:** This property is marked as \"normative optional\" in the specification, which means a conforming implementation may not expose the `constructor` property. This prevents arbitrary code from obtaining the `WeakRef` constructor and being able to observe garbage collection. However, all major engines do expose it by default.\n\n[`WeakRef.prototype[@@toStringTag]`](#weakref.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakRef\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`WeakRef.prototype.deref()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref)\n\nReturns the `WeakRef` object's target object, or `undefined` if the target object has been reclaimed.\n\n## [Examples](#examples)\n\n### [Using a WeakRef object](#using_a_weakref_object)\n\nThis example starts a counter shown in a DOM element, stopping when the element doesn't exist anymore:\n\n```\nclass Counter {\n  constructor(element) {\n    // Remember a weak reference to the DOM element\n    this.ref = new WeakRef(element);\n    this.start();\n  }\n\n  start() {\n    if (this.timer) {\n      return;\n    }\n\n    this.count = 0;\n\n    const tick = () => {\n      // Get the element from the weak reference, if it still exists\n      const element = this.ref.deref();\n      if (element) {\n        element.textContent = ++this.count;\n      } else {\n        // The element doesn't exist anymore\n        console.log(\"The element is gone.\");\n        this.stop();\n        this.ref = null;\n      }\n    };\n\n    tick();\n    this.timer = setInterval(tick, 1000);\n  }\n\n  stop() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = 0;\n    }\n  }\n}\n\nconst counter = new Counter(document.getElementById(\"counter\"));\nsetTimeout(() => {\n  document.getElementById(\"counter\").remove();\n}, 5000);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weak-ref-objects](https://tc39.es/ecma262/multipage/managing-memory.html#sec-weak-ref-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakRef - JavaScript | MDN",
    "description": "A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "markdown": "# WeakSet - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **`WeakSet`** is a collection of garbage-collectable values, including objects and [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). A value in the `WeakSet` may only occur once. It is unique in the `WeakSet`'s collection.\n\n## [Description](#description)\n\nValues of WeakSets must be garbage-collectable. Most [primitive data types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) can be arbitrarily created and don't have a lifetime, so they cannot be stored. Objects and [non-registered symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) can be stored because they are garbage-collectable.\n\nThe main differences to the [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object are:\n\n*   `WeakSet`s are collections of **objects and symbols only**. They cannot contain arbitrary values of any type, as [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)s can.\n*   The `WeakSet` is _weak_, meaning references to objects in a `WeakSet` are held _weakly_. If no other references to a value stored in the `WeakSet` exist, those values can be garbage collected.\n    \n    **Note:** This also means that there is no list of current values stored in the collection. `WeakSets` are not enumerable.\n    \n\n### [Use case: Detecting circular references](#use_case_detecting_circular_references)\n\nFunctions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.\n\n`WeakSet`s are ideal for this purpose:\n\n```\n// Execute a callback on everything stored inside an object\nfunction execRecursively(fn, subject, _refs = new WeakSet()) {\n  // Avoid infinite recursion\n  if (_refs.has(subject)) {\n    return;\n  }\n\n  fn(subject);\n  if (typeof subject === \"object\" && subject) {\n    _refs.add(subject);\n    for (const key in subject) {\n      execRecursively(fn, subject[key], _refs);\n    }\n    _refs.delete(subject);\n  }\n}\n\nconst foo = {\n  foo: \"Foo\",\n  bar: {\n    bar: \"Bar\",\n  },\n};\n\nfoo.bar.baz = foo; // Circular reference!\nexecRecursively((obj) => console.log(obj), foo);\n```\n\nHere, a `WeakSet` is created on the first run, and passed along with every subsequent function call (using the internal `_refs` parameter).\n\nThe number of objects or their traversal order is immaterial, so a `WeakSet` is more suitable (and performant) than a [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) for tracking object references, especially if a very large number of objects is involved.\n\n## [Constructor](#constructor)\n\n[`WeakSet()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet)\n\nCreates a new `WeakSet` object.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `WeakSet.prototype` and shared by all `WeakSet` instances.\n\n[`WeakSet.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `WeakSet` instances, the initial value is the [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet) constructor.\n\n[`WeakSet.prototype[@@toStringTag]`](#weakset.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakSet\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`WeakSet.prototype.add()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add)\n\nAppends `value` to the `WeakSet` object.\n\n[`WeakSet.prototype.delete()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete)\n\nRemoves `value` from the `WeakSet`. `WeakSet.prototype.has(value)` will return `false` afterwards.\n\n[`WeakSet.prototype.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has)\n\nReturns a boolean asserting whether `value` is present in the `WeakSet` object or not.\n\n## [Examples](#examples)\n\n### [Using the WeakSet object](#using_the_weakset_object)\n\n```\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not **the same object**_. And so they are both added to the set.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-weakset-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-weakset-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "WeakSet - JavaScript | MDN",
    "description": "A WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols. A value in the WeakSet may only occur once. It is unique in the WeakSet's collection.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "markdown": "# Map - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`Map`** object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and [primitive values](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)) may be used as either a key or a value.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\n`Map` objects are collections of key-value pairs. A key in the `Map` **may only occur once**; it is unique in the `Map`'s collection. A `Map` object is iterated by key-value pairs — a [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop returns a 2-member array of `[key, value]` for each iteration. Iteration happens in _insertion order_, which corresponds to the order in which each key-value pair was first inserted into the map by the [`set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) method (that is, there wasn't a key with the same value already in the map when `set()` was called).\n\nThe specification requires maps to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### [Key equality](#key_equality)\n\nValue equality is based on the [SameValueZero](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. (It used to use [SameValue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser_compatibility).) This means [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### [Objects vs. Maps](#objects_vs._maps)\n\n[`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) is similar to `Map`—both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), `Object` has been used as `Map` historically.\n\nHowever, there are important differences that make `Map` preferable in some cases:\n\n|     | Map | Object |\n| --- | --- | --- |\n| Accidental Keys | A `Map` does not contain any keys by default. It only contains what is explicitly put into it. | An `Object` has a prototype, so it contains default keys that could collide with your own keys if you're not careful.<br><br>**Note:** This can be bypassed by using [`Object.create(null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create), but this is seldom done. |\n| Security | A `Map` is safe to use with user-provided keys and values. | Setting user-provided key-value pairs on an `Object` may allow an attacker to override the object's prototype, which can lead to [object injection attacks](https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md) . Like the accidental keys issue, this can also be mitigated by using a `null`\\-prototype object. |\n| Key Types | A `Map`'s keys can be any value (including functions, objects, or any primitive). | The keys of an `Object` must be either a [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). |\n| Key Order | The keys in `Map` are ordered in a simple, straightforward way: A `Map` object iterates entries, keys, and values in the order of entry insertion. | Although the keys of an ordinary `Object` are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.<br><br>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. But note that no single mechanism iterates **all** of an object's properties; the various mechanisms each include different subsets of properties. ([`for-in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) includes only enumerable string-keyed properties; [`Object.keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) includes only own, enumerable, string-keyed properties; [`Object.getOwnPropertyNames`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames) includes own, string-keyed properties even if non-enumerable; [`Object.getOwnPropertySymbols`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols) does the same for just `Symbol`\\-keyed properties, etc.) |\n| Size | The number of items in a `Map` is easily retrieved from its [`size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size) property. | Determining the number of items in an `Object` is more roundabout and less efficient. A common way to do it is through the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) of the array returned from [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). |\n| Iteration | A `Map` is an [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols), so it can be directly iterated. | `Object` does not implement an [iteration protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and so objects are not directly iterable using the JavaScript [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) statement (by default).<br><br>**Note:**<br><br>*   An object can implement the iteration protocol, or you can get an iterable for an object using [`Object.keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) or [`Object.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries).<br>*   The [for...in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) statement allows you to iterate over the _enumerable_ properties of an object. |\n| Performance | Performs better in scenarios involving frequent additions and removals of key-value pairs. | Not optimized for frequent additions and removals of key-value pairs. |\n| Serialization and parsing | No native support for serialization or parsing.<br><br>(But you can build your own serialization and parsing support for `Map` by using [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) with its _replacer_ argument, and by using [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) with its _reviver_ argument. See the Stack Overflow question [How do you JSON.stringify an ES6 Map?](https://stackoverflow.com/q/29085197/)). | Native support for serialization from [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) to JSON, using [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).<br><br>Native support for parsing from JSON to [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object), using [`JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse). |\n\n### [Setting object properties](#setting_object_properties)\n\nSetting Object properties works for Map objects as well, and can cause considerable confusion.\n\nTherefore, this appears to work in a way:\n\n```\nconst wrongMap = new Map();\nwrongMap[\"bla\"] = \"blaa\";\nwrongMap[\"bla2\"] = \"blaaa2\";\n\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n```\n\nBut that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:\n\n```\nwrongMap.has(\"bla\"); // false\nwrongMap.delete(\"bla\"); // false\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n```\n\nThe correct usage for storing data in the Map is through the `set(key, value)` method.\n\n```\nconst contacts = new Map();\ncontacts.set(\"Jessie\", { phone: \"213-555-1234\", address: \"123 N 1st Ave\" });\ncontacts.has(\"Jessie\"); // true\ncontacts.get(\"Hilary\"); // undefined\ncontacts.set(\"Hilary\", { phone: \"617-555-4321\", address: \"321 S 2nd St\" });\ncontacts.get(\"Jessie\"); // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete(\"Raymond\"); // false\ncontacts.delete(\"Jessie\"); // true\nconsole.log(contacts.size); // 1\n```\n\n### [Map-like browser APIs](#map-like_browser_apis)\n\n**Browser `Map`\\-like objects** (or \"maplike objects\") are [Web API](https://developer.mozilla.org/en-US/docs/Web/API) interfaces that behave in many ways like a `Map`.\n\nJust like `Map`, entries can be iterated in the same order that they were added to the object. `Map`\\-like objects and `Map` also have properties and methods that share the same name and behavior. However unlike `Map` they only allow specific predefined types for the keys and values of each entry.\n\nThe allowed types are set in the specification IDL definition. For example, [`RTCStatsReport`](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport) is a `Map`\\-like object that must use strings for keys and objects for values. This is defined in the specification IDL below:\n\n```\ninterface RTCStatsReport {\n  readonly maplike<DOMString, object>;\n};\n```\n\n`Map`\\-like objects are either read-only or read-writable (see the `readonly` keyword in the IDL above).\n\n*   Read-only `Map`\\-like objects have the property [`size`](#map.prototype.size), and the methods: [`entries()`](#map.prototype.entries), [`forEach()`](#map.prototype.foreach), [`get()`](#map.prototype.get), [`has()`](#map.prototype.has), [`keys()`](#map.prototype.keys), [`values()`](#map.prototype.values), and [`@@iterator`](#map.prototypeiterator).\n*   Writeable `Map`\\-like objects additionally have the methods: [`clear()`](#map.prototype.clear), [`delete()`](#map.prototype.delete), and [`set()`](#map.prototype.set).\n\nThe methods and properties have the same behavior as the equivalent entities in `Map`, except for the restriction on the types of the keys and values.\n\nThe following are examples of read-only `Map`\\-like browser objects:\n\n*   [`AudioParamMap`](https://developer.mozilla.org/en-US/docs/Web/API/AudioParamMap)\n*   [`RTCStatsReport`](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport)\n*   [`EventCounts`](https://developer.mozilla.org/en-US/docs/Web/API/EventCounts)\n*   [`KeyboardLayoutMap`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardLayoutMap)\n*   [`MIDIInputMap`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap)\n*   [`MIDIOutputMap`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap)\n\n## [Constructor](#constructor)\n\n[`Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map)\n\nCreates a new `Map` object.\n\n## [Static properties](#static_properties)\n\n[`Map[@@species]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species)\n\nThe constructor function that is used to create derived objects.\n\n## [Static methods](#static_methods)\n\n[`Map.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/groupBy)\n\nGroups the elements of a given iterable using the values returned by a provided callback function. The final returned `Map` uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Map.prototype` and shared by all `Map` instances.\n\n[`Map.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Map` instances, the initial value is the [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) constructor.\n\n[`Map.prototype.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size)\n\nReturns the number of key/value pairs in the `Map` object.\n\n[`Map.prototype[@@toStringTag]`](#map.prototypetostringtag)\n\nThe initial value of the [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Map\"`. This property is used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n## [Instance methods](#instance_methods)\n\n[`Map.prototype.clear()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear)\n\nRemoves all key-value pairs from the `Map` object.\n\n[`Map.prototype.delete()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete)\n\nReturns `true` if an element in the `Map` object existed and has been removed, or `false` if the element does not exist. `map.has(key)` will return `false` afterwards.\n\n[`Map.prototype.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries)\n\nReturns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n\n[`Map.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach)\n\nCalls `callbackFn` once for each key-value pair present in the `Map` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.\n\n[`Map.prototype.get()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get)\n\nReturns the value associated to the passed key, or `undefined` if there is none.\n\n[`Map.prototype.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has)\n\nReturns a boolean indicating whether a value has been associated with the passed key in the `Map` object or not.\n\n[`Map.prototype.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys)\n\nReturns a new Iterator object that contains the keys for each element in the `Map` object in insertion order.\n\n[`Map.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set)\n\nSets the value for the passed key in the `Map` object. Returns the `Map` object.\n\n[`Map.prototype.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values)\n\nReturns a new Iterator object that contains the values for each element in the `Map` object in insertion order.\n\n[`Map.prototype[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator)\n\nReturns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n\n## [Examples](#examples)\n\n### [Using the Map object](#using_the_map_object)\n\n```\nconst myMap = new Map();\n\nconst keyString = \"a string\";\nconst keyObj = {};\nconst keyFunc = function () {};\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\");\nmyMap.set(keyObj, \"value associated with keyObj\");\nmyMap.set(keyFunc, \"value associated with keyFunc\");\n\nconsole.log(myMap.size); // 3\n\n// getting the values\nconsole.log(myMap.get(keyString)); // \"value associated with 'a string'\"\nconsole.log(myMap.get(keyObj)); // \"value associated with keyObj\"\nconsole.log(myMap.get(keyFunc)); // \"value associated with keyFunc\"\n\nconsole.log(myMap.get(\"a string\")); // \"value associated with 'a string'\", because keyString === 'a string'\nconsole.log(myMap.get({})); // undefined, because keyObj !== {}\nconsole.log(myMap.get(function () {})); // undefined, because keyFunc !== function () {}\n```\n\n### [Using NaN as Map keys](#using_nan_as_map_keys)\n\n[`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) can also be used as a key. Even though every `NaN` is not equal to itself (`NaN !== NaN` is true), the following example works because `NaN`s are indistinguishable from each other:\n\n```\nconst myMap = new Map();\nmyMap.set(NaN, \"not a number\");\n\nmyMap.get(NaN);\n// \"not a number\"\n\nconst otherNaN = Number(\"foo\");\nmyMap.get(otherNaN);\n// \"not a number\"\n```\n\n### [Iterating Map with for...of](#iterating_map_with_for...of)\n\nMaps can be iterated using a `for...of` loop:\n\n```\nconst myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\n\nfor (const [key, value] of myMap) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n\nfor (const key of myMap.keys()) {\n  console.log(key);\n}\n// 0\n// 1\n\nfor (const value of myMap.values()) {\n  console.log(value);\n}\n// zero\n// one\n\nfor (const [key, value] of myMap.entries()) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n```\n\n### [Iterating Map with forEach()](#iterating_map_with_foreach)\n\nMaps can be iterated using the [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach) method:\n\n```\nmyMap.forEach((value, key) => {\n  console.log(`${key} = ${value}`);\n});\n// 0 = zero\n// 1 = one\n```\n\n### [Relation with Array objects](#relation_with_array_objects)\n\n```\nconst kvArray = [\n  [\"key1\", \"value1\"],\n  [\"key2\", \"value2\"],\n];\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nconst myMap = new Map(kvArray);\n\nconsole.log(myMap.get(\"key1\")); // \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)); // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap]);\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())); // [\"key1\", \"key2\"]\n```\n\n### [Cloning and merging Maps](#cloning_and_merging_maps)\n\nJust like `Array`s, `Map`s can be cloned:\n\n```\nconst original = new Map([[1, \"one\"]]);\n\nconst clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false (useful for shallow comparison)\n```\n\n**Note:** Keep in mind that _the data itself_ is not cloned.\n\nMaps can be merged, maintaining key uniqueness:\n\n```\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge two maps. The last repeated key wins.\n// Spread syntax essentially converts a Map to an Array\nconst merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\nMaps can be merged with Arrays, too:\n\n```\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge maps with an array. The last repeated key wins.\nconst merged = new Map([...first, ...second, [1, \"eins\"]]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-map-objects](https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Map - JavaScript | MDN",
    "description": "The Map object holds key-value pairs and remembers the original insertion order of the keys.\n  Any value (both objects and primitive values) may be used as either a key or a value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape",
    "markdown": "# unescape() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** `unescape()` is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use [`decodeURIComponent()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) or [`decodeURI()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) if possible.\n\nThe **`unescape()`** function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like [`escape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape).\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`str`](#str)\n\nA string to be decoded.\n\n### [Return value](#return_value)\n\nA new string in which certain characters have been unescaped.\n\n## [Description](#description)\n\n`unescape()` is a function property of the global object.\n\nThe `unescape()` function replaces any escape sequence with the character that it represents. Specifically, it replaces any escape sequence of the form `%XX` or `%uXXXX` (where `X` represents one hexadecimal digit) with the character that has the hexadecimal value `XX`/`XXXX`. If the escape sequence is not a valid escape sequence (for example, if `%` is followed by one or no hex digit), it is left as-is.\n\n**Note:** This function was used mostly for [URL encoding](https://en.wikipedia.org/wiki/URL_encoding) and is partly based on the escape format in [RFC 1738](https://datatracker.ietf.org/doc/html/rfc1738). The `unescape()` function does _not_ evaluate [escape sequences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) in string literals. You can replace `\\xXX` with `%XX` and `\\uXXXX` with `%uXXXX` to get a string that can be handled by `unescape()`.\n\n## [Examples](#examples)\n\n### [Using unescape()](#using_unescape)\n\n```\nunescape(\"abc123\"); // \"abc123\"\nunescape(\"%E4%F6%FC\"); // \"äöü\"\nunescape(\"%u0107\"); // \"ć\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-unescape-string](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-unescape-string) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "unescape() - JavaScript | MDN",
    "description": "The unescape() function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like escape().",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "markdown": "# NaN - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`NaN`** global property is a value representing Not-A-Number.\n\n## [Try it](#try_it)\n\n## [Value](#value)\n\nThe same number value as [`Number.NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN).\n\n| Property attributes of `NaN` |     |\n| --- | --- |\n| Writable | no  |\n| Enumerable | no  |\n| Configurable | no  |\n\n## [Description](#description)\n\n`NaN` is a property of the _global object_. In other words, it is a variable in global scope.\n\nIn modern browsers, `NaN` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nThere are five different types of operations that return `NaN`:\n\n*   Failed number conversion (e.g. explicit ones like `parseInt(\"blabla\")`, `Number(undefined)`, or implicit ones like `Math.abs(undefined)`)\n*   Math operation where the result is not a real number (e.g. `Math.sqrt(-1)`)\n*   Indeterminate form (e.g. `0 * Infinity`, `1 ** Infinity`, `Infinity / Infinity`, `Infinity - Infinity`)\n*   A method or expression whose operand is or gets coerced to `NaN` (e.g. `7 ** NaN`, `7 * \"blabla\"`) — this means `NaN` is contagious\n*   Other cases where an invalid value is to be represented as a number (e.g. an invalid [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) `new Date(\"blabla\").getTime()`, `\"\".charCodeAt(1)`)\n\n`NaN` and its behaviors are not invented by JavaScript. Its semantics in floating point arithmetic (including that `NaN !== NaN`) are specified by [IEEE 754](https://en.wikipedia.org/wiki/Double_precision_floating-point_format). `NaN`'s behaviors include:\n\n*   If `NaN` is involved in a mathematical operation (but not [bitwise operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators)), the result is usually also `NaN`. (See [counter-example](#silently_escaping_nan) below.)\n*   When `NaN` is one of the operands of any relational comparison (`>`, `<`, `>=`, `<=`), the result is always `false`.\n*   `NaN` compares unequal (via [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality), [`!=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality), [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality), and [`!==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)) to any other value — including to another `NaN` value.\n\n`NaN` is also one of the [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values in JavaScript.\n\n## [Examples](#examples)\n\n### [Testing against NaN](#testing_against_nan)\n\nTo tell if a value is `NaN`, use [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) or [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) to most clearly determine whether a value is `NaN` — or, since `NaN` is the only value that compares unequal to itself, you can perform a self-comparison like `x !== x`.\n\n```\nNaN === NaN; // false\nNumber.NaN === NaN; // false\nisNaN(NaN); // true\nisNaN(Number.NaN); // true\nNumber.isNaN(NaN); // true\n\nfunction valueIsNaN(v) {\n  return v !== v;\n}\nvalueIsNaN(1); // false\nvalueIsNaN(NaN); // true\nvalueIsNaN(Number.NaN); // true\n```\n\nHowever, do note the difference between `isNaN()` and `Number.isNaN()`: the former will return `true` if the value is currently `NaN`, or if it is going to be `NaN` after it is coerced to a number, while the latter will return `true` only if the value is currently `NaN`:\n\n```\nisNaN(\"hello world\"); // true\nNumber.isNaN(\"hello world\"); // false\n```\n\nFor the same reason, using a BigInt value will throw an error with `isNaN()` and not with `Number.isNaN()`:\n\n```\nisNaN(1n); // TypeError: Conversion from 'BigInt' to 'number' is not allowed.\nNumber.isNaN(1n); // false\n```\n\nAdditionally, some array methods cannot find `NaN`, while others can. Namely, the index-finding ones ([`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf), [`lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)) cannot find `NaN`, while the value-finding ones ([`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)) can:\n\n```\nconst arr = [2, 4, NaN, 12];\narr.indexOf(NaN); // -1\narr.includes(NaN); // true\n\n// Methods accepting a properly defined predicate can always find NaN\narr.findIndex((n) => Number.isNaN(n)); // 2\n```\n\nFor more information about `NaN` and its comparison, see [Equality comparison and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness).\n\n### [Observably distinct NaN values](#observably_distinct_nan_values)\n\nThere's a motivation for `NaN` being unequal to itself. It's possible to produce two floating point numbers with different binary representations but are both `NaN`, because in [IEEE 754 encoding](https://en.wikipedia.org/wiki/NaN#Floating_point), any floating point number with exponent `0x7ff` and a non-zero mantissa is `NaN`. In JavaScript, you can do bit-level manipulation using [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Typed_arrays).\n\n```\nconst f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);\nconst b2f = (x) => new Float64Array(x.buffer)[0];\n// Get a byte representation of NaN\nconst n = f2b(NaN);\nconst m = f2b(NaN);\n// Change the sign bit, which doesn't matter for NaN\nn[7] += 2 ** 7;\n// n[0] += 2**7; for big endian processors\nconst nan2 = b2f(n);\nconsole.log(nan2); // NaN\nconsole.log(Object.is(nan2, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan2)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 255]\n// Change the first bit, which is the least significant bit of the mantissa and doesn't matter for NaN\nm[0] = 1;\n// m[7] = 1; for big endian processors\nconst nan3 = b2f(m);\nconsole.log(nan3); // NaN\nconsole.log(Object.is(nan3, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan3)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]\n```\n\n### [Silently escaping NaN](#silently_escaping_nan)\n\n`NaN` propagates through mathematical operations, so it's usually sufficient to test for `NaN` once at the end of calculation to detect error conditions. The only case where `NaN` gets silently escaped is when using [exponentiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) with an exponent of `0`, which immediately returns `1` without testing the base's value.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-value-properties-of-the-global-object-nan](https://tc39.es/ecma262/multipage/global-object.html#sec-value-properties-of-the-global-object-nan) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "NaN - JavaScript | MDN",
    "description": "The NaN global property is a value representing Not-A-Number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators",
    "markdown": "# Expressions and operators - JavaScript\n\nThis chapter documents all the JavaScript language operators, expressions and keywords.\n\n## [Expressions and operators by category](#expressions_and_operators_by_category)\n\nFor an alphabetical listing see the sidebar on the left.\n\n### [Primary expressions](#primary_expressions)\n\nBasic keywords and general expressions in JavaScript. These expressions have the highest precedence (higher than [operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence)).\n\n[`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)\n\nThe `this` keyword refers to a special property of an execution context.\n\n[Literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#literals)\n\nBasic `null`, boolean, number, and string literals.\n\n[`[]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\nArray initializer/literal syntax.\n\n[`{}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n\nObject initializer/literal syntax.\n\n[`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)\n\nThe `function` keyword defines a function expression.\n\n[`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class)\n\nThe `class` keyword defines a class expression.\n\n[`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n\nThe `function*` keyword defines a generator function expression.\n\n[`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function)\n\nThe `async function` defines an async function expression.\n\n[`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*)\n\nThe `async function*` keywords define an async generator function expression.\n\n[`/ab+c/i`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\nRegular expression literal syntax.\n\n[`` `string` ``](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nTemplate literal syntax.\n\n[`( )`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping)\n\nGrouping operator.\n\n### [Left-hand-side expressions](#left-hand-side_expressions)\n\nLeft values are the destination of an assignment.\n\n[Property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors)\n\nMember operators provide access to a property or method of an object (`object.property` and `object[\"property\"]`).\n\n[`?.`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n\nThe optional chaining operator returns `undefined` instead of causing an error if a reference is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) ([`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)).\n\n[`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new)\n\nThe `new` operator creates an instance of a constructor.\n\n[`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target)\n\nIn constructors, `new.target` refers to the constructor that was invoked by [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).\n\n[`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)\n\nAn object exposing context-specific metadata to a JavaScript module.\n\n[`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)\n\nThe `super` keyword calls the parent constructor or allows accessing properties of the parent object.\n\n[`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import)\n\nThe `import()` syntax allows loading a module asynchronously and dynamically into a potentially non-module environment.\n\n### [Increment and decrement](#increment_and_decrement)\n\nPostfix/prefix increment and postfix/prefix decrement operators.\n\n[`A++`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment)\n\nPostfix increment operator.\n\n[`A--`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)\n\nPostfix decrement operator.\n\n[`++A`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment)\n\nPrefix increment operator.\n\n[`--A`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement)\n\nPrefix decrement operator.\n\n### [Unary operators](#unary_operators)\n\nA unary operation is an operation with only one operand.\n\n[`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n\nThe `delete` operator deletes a property from an object.\n\n[`void`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void)\n\nThe `void` operator evaluates an expression and discards its return value.\n\n[`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n\nThe `typeof` operator determines the type of a given object.\n\n[`+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus)\n\nThe unary plus operator converts its operand to Number type.\n\n[`-`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)\n\nThe unary negation operator converts its operand to Number type and then negates it.\n\n[`~`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT)\n\nBitwise NOT operator.\n\n[`!`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT)\n\nLogical NOT operator.\n\n[`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)\n\nPause and resume an async function and wait for the promise's fulfillment/rejection.\n\n### [Arithmetic operators](#arithmetic_operators)\n\nArithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value.\n\n[`**`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)\n\nExponentiation operator.\n\n[`*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication)\n\nMultiplication operator.\n\n[`/`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division)\n\nDivision operator.\n\n[`%`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)\n\nRemainder operator.\n\n[`+`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition) (Plus)\n\nAddition operator.\n\n[`-`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction)\n\nSubtraction operator.\n\n### [Relational operators](#relational_operators)\n\nA comparison operator compares its operands and returns a boolean value based on whether the comparison is true.\n\n[`<`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) (Less than)\n\nLess than operator.\n\n[`>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than) (Greater than)\n\nGreater than operator.\n\n[`<=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal)\n\nLess than or equal operator.\n\n[`>=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal)\n\nGreater than or equal operator.\n\n[`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n\nThe `instanceof` operator determines whether an object is an instance of another object.\n\n[`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)\n\nThe `in` operator determines whether an object has a given property.\n\n**Note:** `=>` is not an operator, but the notation for [Arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n### [Equality operators](#equality_operators)\n\nThe result of evaluating an equality operator is always of type boolean based on whether the comparison is true.\n\n[`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality)\n\nEquality operator.\n\n[`!=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality)\n\nInequality operator.\n\n[`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\n\nStrict equality operator.\n\n[`!==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)\n\nStrict inequality operator.\n\n### [Bitwise shift operators](#bitwise_shift_operators)\n\nOperations to shift all bits of the operand.\n\n[`<<`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift)\n\nBitwise left shift operator.\n\n[`>>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)\n\nBitwise right shift operator.\n\n[`>>>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift)\n\nBitwise unsigned right shift operator.\n\n### [Binary bitwise operators](#binary_bitwise_operators)\n\nBitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values.\n\n[`&`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND)\n\nBitwise AND.\n\n[`|`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR)\n\nBitwise OR.\n\n[`^`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR)\n\nBitwise XOR.\n\n### [Binary logical operators](#binary_logical_operators)\n\nLogical operators implement boolean (logical) values and have [short-circuiting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#short-circuiting) behavior.\n\n[`&&`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND)\n\nLogical AND.\n\n[`||`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)\n\nLogical OR.\n\n[`??`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing)\n\nNullish Coalescing Operator.\n\n### [Conditional (ternary) operator](#conditional_ternary_operator)\n\n[`(condition ? ifTrue : ifFalse)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator)\n\nThe conditional operator returns one of two values based on the logical value of the condition.\n\n### [Assignment operators](#assignment_operators)\n\nAn assignment operator assigns a value to its left operand based on the value of its right operand.\n\n[`=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)\n\nAssignment operator.\n\n[`*=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment)\n\nMultiplication assignment.\n\n[`/=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment)\n\nDivision assignment.\n\n[`%=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment)\n\nRemainder assignment.\n\n[`+=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment)\n\nAddition assignment.\n\n[`-=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment)\n\nSubtraction assignment\n\n[`<<=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment)\n\nLeft shift assignment.\n\n[`>>=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment)\n\nRight shift assignment.\n\n[`>>>=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment)\n\nUnsigned right shift assignment.\n\n[`&=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment)\n\nBitwise AND assignment.\n\n[`^=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment)\n\nBitwise XOR assignment.\n\n[`|=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment)\n\nBitwise OR assignment.\n\n[`**=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment)\n\nExponentiation assignment.\n\n[`&&=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment)\n\nLogical AND assignment.\n\n[`||=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment)\n\nLogical OR assignment.\n\n[`??=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment)\n\nNullish coalescing assignment.\n\n[`[a, b] = arr`, `{ a, b } = obj`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\nDestructuring assignment allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals.\n\n### [Yield operators](#yield_operators)\n\n[`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield)\n\nPause and resume a generator function.\n\n[`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\nDelegate to another generator function or iterable object.\n\n### [Spread syntax](#spread_syntax)\n\n[`...obj`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n\nSpread syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.\n\n### [Comma operator](#comma_operator)\n\n[`,`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator)\n\nThe comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-addition-operator-plus](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-addition-operator-plus) |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n| [ECMAScript Language Specification  <br>\\# sec-async-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-function-definitions) |\n| [ECMAScript Language Specification  <br>\\# sec-async-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-generator-function-definitions) |\n| [ECMAScript Language Specification  <br>\\# prod-BitwiseANDExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-BitwiseANDExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-bitwise-not-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-bitwise-not-operator) |\n| [ECMAScript Language Specification  <br>\\# prod-BitwiseORExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-BitwiseORExpression) |\n| [ECMAScript Language Specification  <br>\\# prod-BitwiseXORExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-BitwiseXORExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n| [ECMAScript Language Specification  <br>\\# sec-comma-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-comma-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-conditional-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-conditional-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-postfix-decrement-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-postfix-decrement-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-delete-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-delete-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-destructuring-assignment](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-destructuring-assignment) |\n| [ECMAScript Language Specification  <br>\\# sec-destructuring-binding-patterns](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-destructuring-binding-patterns) |\n| [ECMAScript Language Specification  <br>\\# sec-multiplicative-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-multiplicative-operators) |\n| [ECMAScript Language Specification  <br>\\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n| [ECMAScript Language Specification  <br>\\# sec-exp-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-exp-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n| [ECMAScript Language Specification  <br>\\# sec-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-generator-function-definitions) |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n| [ECMAScript Language Specification  <br>\\# sec-grouping-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-grouping-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-import-calls](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-import-calls) |\n| [ECMAScript Language Specification  <br>\\# prod-ImportMeta](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ImportMeta) |\n| [HTML Standard  <br>\\# hostgetimportmetaproperties](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) |\n| [ECMAScript Language Specification  <br>\\# sec-postfix-increment-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-postfix-increment-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-left-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-left-shift-operator) |\n| [ECMAScript Language Specification  <br>\\# prod-LogicalANDExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalANDExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-logical-not-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-logical-not-operator) |\n| [ECMAScript Language Specification  <br>\\# prod-LogicalORExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalORExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-new-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-new-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-built-in-function-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-built-in-function-objects) |\n| [ECMAScript Language Specification  <br>\\# sec-null-value](https://tc39.es/ecma262/multipage/overview.html#sec-null-value) |\n| [ECMAScript Language Specification  <br>\\# prod-CoalesceExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-CoalesceExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-object-initializer](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-object-initializer) |\n| [ECMAScript Language Specification  <br>\\# prod-OptionalExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-OptionalExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-property-accessors](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-property-accessors) |\n| [ECMAScript Language Specification  <br>\\# sec-signed-right-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-signed-right-shift-operator) |\n| [ECMAScript Language Specification  <br>\\# prod-SpreadElement](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-SpreadElement) |\n| [ECMAScript Language Specification  <br>\\# prod-ArgumentList](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ArgumentList) |\n| [ECMAScript Language Specification  <br>\\# prod-PropertyDefinition](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-PropertyDefinition) |\n| [ECMAScript Language Specification  <br>\\# sec-subtraction-operator-minus](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-subtraction-operator-minus) |\n| [ECMAScript Language Specification  <br>\\# sec-super-keyword](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-super-keyword) |\n| [ECMAScript Language Specification  <br>\\# sec-this-keyword](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-this-keyword) |\n| [ECMAScript Language Specification  <br>\\# sec-typeof-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-typeof-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-unary-minus-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unary-minus-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-unary-plus-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unary-plus-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-unsigned-right-shift-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-unsigned-right-shift-operator) |\n| [ECMAScript Language Specification  <br>\\# sec-void-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-void-operator) |\n| [ECMAScript Language Specification  <br>\\# prod-YieldExpression](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-YieldExpression) |\n| [ECMAScript Language Specification  <br>\\# sec-generator-function-definitions-runtime-semantics-evaluation](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-generator-function-definitions-runtime-semantics-evaluation) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Expressions and operators - JavaScript | MDN",
    "description": "This chapter documents all the JavaScript language operators, expressions and keywords.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
    "markdown": "# parseFloat() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`parseFloat()`** function parses a string argument and returns a floating point number.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nThe value to parse, [coerced to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading [whitespace](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) in this argument is ignored.\n\n### [Return value](#return_value)\n\nA floating point number parsed from the given `string`, or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) when the first non-whitespace character cannot be converted to a number.\n\n**Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) and `parseFloat()` only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) 42.\n\n## [Description](#description)\n\nThe `parseFloat` function converts its first argument to a string, parses that string as a decimal number literal, then returns a number or `NaN`. The number syntax it accepts can be summarized as:\n\n*   The characters accepted by `parseFloat()` are plus sign (`+`), minus sign (`-` U+002D HYPHEN-MINUS), decimal digits (`0` – `9`), decimal point (`.`), exponent indicator (`e` or `E`), and the `\"Infinity\"` literal.\n*   The `+`/`-` signs can only appear strictly at the beginning of the string, or immediately following the `e`/`E` character. The decimal point can only appear once, and only before the `e`/`E` character. The `e`/`E` character can only appear once, and only if there is at least one digit before it.\n*   Leading spaces in the argument are trimmed and ignored.\n*   `parseFloat()` can also parse and return [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity) or `-Infinity` if the string starts with `\"Infinity\"` or `\"-Infinity\"` preceded by none or more white spaces.\n*   `parseFloat()` picks the longest substring starting from the beginning that generates a valid number literal. If it encounters an invalid character, it returns the number represented up to that point, ignoring the invalid character and all characters following it.\n*   If the argument's first character can't start a legal number literal per the syntax above, `parseFloat` returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\nSyntax-wise, `parseFloat()` parses a subset of the syntax that the [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function accepts. Namely, `parseFloat()` does not support non-decimal literals with `0x`, `0b`, or `0o` prefixes but supports everything else. However, `parseFloat()` is more lenient than `Number()` because it ignores trailing invalid characters, which would cause `Number()` to return `NaN`.\n\nSimilar to number literals and `Number()`, the number returned from `parseFloat()` may not be exactly equal to the number represented by the string, due to floating point range and inaccuracy. For numbers outside the `-1.7976931348623158e+308` – `1.7976931348623158e+308` range (see [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)), `-Infinity` or `Infinity` is returned.\n\n## [Examples](#examples)\n\n### [Using parseFloat()](#using_parsefloat)\n\nThe following examples all return `3.14`:\n\n```\nparseFloat(3.14);\nparseFloat(\"3.14\");\nparseFloat(\"  3.14  \");\nparseFloat(\"314e-2\");\nparseFloat(\"0.0314E+2\");\nparseFloat(\"3.14some non-digit characters\");\nparseFloat({\n  toString() {\n    return \"3.14\";\n  },\n});\n```\n\n### [parseFloat() returning NaN](#parsefloat_returning_nan)\n\nThe following example returns `NaN`:\n\nAnecdotally, because the string `NaN` itself is invalid syntax as accepted by `parseFloat()`, passing `\"NaN\"` returns `NaN` as well.\n\n```\nparseFloat(\"NaN\"); // NaN\n```\n\n### [Returning Infinity](#returning_infinity)\n\nInfinity values are returned when the number is outside the double-precision 64-bit IEEE 754-2019 format range:\n\n```\nparseFloat(\"1.7976931348623159e+308\"); // Infinity\nparseFloat(\"-1.7976931348623159e+308\"); // -Infinity\n```\n\nInfinity is also returned when the string starts with `\"Infinity\"` or `\"-Infinity\"`:\n\n```\nparseFloat(\"Infinity\"); // Infinity\nparseFloat(\"-Infinity\"); // -Infinity\n```\n\n### [Interaction with BigInt values](#interaction_with_bigint_values)\n\n`parseFloat()` does not handle [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision. If a BigInt value is passed to `parseFloat()`, it will be converted to a string, and the string will be parsed as a floating-point number, which may result in loss of precision as well.\n\n```\nparseFloat(900719925474099267n); // 900719925474099300\nparseFloat(\"900719925474099267n\"); // 900719925474099300\n```\n\nYou should pass the string to the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-parsefloat-string](https://tc39.es/ecma262/multipage/global-object.html#sec-parsefloat-string) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "parseFloat() - JavaScript | MDN",
    "description": "The parseFloat() function parses a string argument and returns a floating point number.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "markdown": "# Object - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`Object`** type represents one of [JavaScript's data types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures). It is used to store various keyed collections and more complex entities. Objects can be created using the [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object) constructor or the [object initializer / literal syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).\n\n## [Description](#description)\n\nNearly all [objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects) in JavaScript are instances of `Object`; a typical object inherits properties (including methods) from `Object.prototype`, although these properties may be shadowed (a.k.a. overridden). The only objects that don't inherit from `Object.prototype` are those with [`null` prototype](#null-prototype_objects), or descended from other `null` prototype objects.\n\nChanges to the `Object.prototype` object are seen by **all** objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior. To make it more secure, `Object.prototype` is the only object in the core JavaScript language that has [immutable prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf#description) — the prototype of `Object.prototype` is always `null` and not changeable.\n\n### [Object prototype properties](#object_prototype_properties)\n\nYou should avoid calling any `Object.prototype` method directly from the instance, especially those that are not intended to be polymorphic (i.e. only its initial behavior makes sense and no descending object could override it in a meaningful way). All objects descending from `Object.prototype` may define a custom own property that has the same name, but with entirely different semantics from what you expect. Furthermore, these properties are not inherited by [`null`\\-prototype objects](#null-prototype_objects). All modern JavaScript utilities for working with objects are [static](#static_methods). More specifically:\n\n*   [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString), and [`toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) exist to be polymorphic and you should expect the object to define its own implementation with sensible behaviors, so you can call them as instance methods. However, `valueOf()` and `toString()` are usually implicitly called through [type conversion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion) and you don't need to call them yourself in your code.\n*   [`__defineGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), [`__defineSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__), [`__lookupGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), and [`__lookupSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__) are deprecated and should not be used. Use the static alternatives [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) instead.\n*   The [`__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) property is deprecated and should not be used. The [`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf) and [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) alternatives are static methods.\n*   The [`propertyIsEnumerable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) and [`hasOwnProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) methods can be replaced with the [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) and [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) static methods, respectively.\n*   The [`isPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf) method can usually be replaced with [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), if you are checking the `prototype` property of a constructor.\n\nIn case where a semantically equivalent static method doesn't exist, or if you really want to use the `Object.prototype` method, you should directly [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) the `Object.prototype` method on your target object instead, to prevent the object from having an overriding property that produces unexpected results.\n\n```\nconst obj = {\n  foo: 1,\n  // You should not define such a method on your own object,\n  // but you may not be able to prevent it from happening if\n  // you are receiving the object from external input\n  propertyIsEnumerable() {\n    return false;\n  },\n};\n\nobj.propertyIsEnumerable(\"foo\"); // false; unexpected result\nObject.prototype.propertyIsEnumerable.call(obj, \"foo\"); // true; expected result\n```\n\n### [Deleting a property from an object](#deleting_a_property_from_an_object)\n\nThere isn't any method in an Object itself to delete its own properties (such as [`Map.prototype.delete()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete)). To do so, one must use the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator.\n\n### [null-prototype objects](#null-prototype_objects)\n\nAlmost all objects in JavaScript ultimately inherit from `Object.prototype` (see [inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)). However, you may create `null`\\-prototype objects using [`Object.create(null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) or the [object initializer syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) with `__proto__: null` (note: the `__proto__` key in object literals is different from the deprecated [`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) property). You can also change the prototype of an existing object to `null` by calling [`Object.setPrototypeOf(obj, null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\n```\nconst obj = Object.create(null);\nconst obj2 = { __proto__: null };\n```\n\nAn object with a `null` prototype can behave in unexpected ways, because it doesn't inherit any object methods from `Object.prototype`. This is especially true when debugging, since common object-property converting/detecting utility functions may generate errors, or lose information (especially if using silent error-traps that ignore errors).\n\nFor example, the lack of [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) often makes debugging intractable:\n\n```\nconst normalObj = {}; // create a normal object\nconst nullProtoObj = Object.create(null); // create an object with \"null\" prototype\n\nconsole.log(`normalObj is: ${normalObj}`); // shows \"normalObj is: [object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // throws error: Cannot convert object to primitive value\n\nalert(normalObj); // shows [object Object]\nalert(nullProtoObj); // throws error: Cannot convert object to primitive value\n```\n\nOther methods will fail as well.\n\n```\nnormalObj.valueOf(); // shows {}\nnullProtoObj.valueOf(); // throws error: nullProtoObj.valueOf is not a function\n\nnormalObj.hasOwnProperty(\"p\"); // shows \"true\"\nnullProtoObj.hasOwnProperty(\"p\"); // throws error: nullProtoObj.hasOwnProperty is not a function\n\nnormalObj.constructor; // shows \"Object() { [native code] }\"\nnullProtoObj.constructor; // shows \"undefined\"\n```\n\nWe can add the `toString` method back to the null-prototype object by assigning it one:\n\n```\nnullProtoObj.toString = Object.prototype.toString; // since new object lacks toString, add the original generic one back\n\nconsole.log(nullProtoObj.toString()); // shows \"[object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // shows \"nullProtoObj is: [object Object]\"\n```\n\nUnlike normal objects, in which `toString()` is on the object's prototype, the `toString()` method here is an own property of `nullProtoObj`. This is because `nullProtoObj` has no (`null`) prototype.\n\nYou can also revert a null-prototype object back to an ordinary object using [`Object.setPrototypeOf(nullProtoObj, Object.prototype)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\nIn practice, objects with `null` prototype are usually used as a cheap substitute for [maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). The presence of `Object.prototype` properties will cause some bugs:\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return name in ages;\n}\n\nfunction getAge(name) {\n  return ages[name];\n}\n\nhasPerson(\"hasOwnProperty\"); // true\ngetAge(\"toString\"); // [Function: toString]\n```\n\nUsing a null-prototype object removes this hazard without introducing too much complexity to the `hasPerson` and `getAge` functions:\n\n```\nconst ages = Object.create(null, {\n  alice: { value: 18, enumerable: true },\n  bob: { value: 27, enumerable: true },\n});\n\nhasPerson(\"hasOwnProperty\"); // false\ngetAge(\"toString\"); // undefined\n```\n\nIn such case, the addition of any method should be done cautiously, as they can be confused with the other key-value pairs stored as data.\n\nMaking your object not inherit from `Object.prototype` also prevents prototype pollution attacks. If a malicious script adds a property to `Object.prototype`, it will be accessible on every object in your program, except objects that have null prototype.\n\n```\nconst user = {};\n\n// A malicious script:\nObject.prototype.authenticated = true;\n\n// Unexpectedly allowing unauthenticated user to pass through\nif (user.authenticated) {\n  // access confidential data\n}\n```\n\nJavaScript also has built-in APIs that produce `null`\\-prototype objects, especially those that use objects as ad hoc key-value collections. For example:\n\n*   The return value of [`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy)\n*   The `groups` and `indices.groups` properties of the result of [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)\n*   [`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables) (all `@@unscopables` objects should have `null`\\-prototype)\n*   [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)\n*   Module namespace objects, obtained through [`import * as ns from \"module\";`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import) or [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import)\n\nThe term \"`null`\\-prototype object\" often also includes any object without `Object.prototype` in its prototype chain. Such objects can be created with [`extends null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending_null) when using classes.\n\n### [Object coercion](#object_coercion)\n\nMany built-in operations that expect objects first coerce their arguments to objects. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toobject) can be summarized as follows:\n\n*   Objects are returned as-is.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) primitives are wrapped into their corresponding object wrappers.\n\nThere are two ways to achieve nearly the same effect in JavaScript.\n\n*   [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf): `Object.prototype.valueOf.call(x)` does exactly the object coercion steps explained above to convert `x`.\n*   The [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object) function: `Object(x)` uses the same algorithm to convert `x`, except that `undefined` and `null` don't throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), but return a plain object.\n\nPlaces that use object coercion include:\n\n*   The `object` parameter of [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops.\n*   The `this` value of [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) methods.\n*   Parameters of `Object` methods such as [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys).\n*   Auto-boxing when a property is accessed on a primitive value, since primitives do not have properties.\n*   The [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) value when calling a non-strict function. Primitives are boxed while `null` and `undefined` are replaced with the [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object).\n\nUnlike [conversion to primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion), the object coercion process itself is not observable in any way, since it doesn't invoke custom code like `toString` or `valueOf` methods.\n\n## [Constructor](#constructor)\n\n[`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object)\n\nTurns the input into an object.\n\n## [Static methods](#static_methods)\n\n[`Object.assign()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\nCopies the values of all enumerable own properties from one or more source objects to a target object.\n\n[`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n\nCreates a new object with the specified prototype object and properties.\n\n[`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n\nAdds the named properties described by the given descriptors to an object.\n\n[`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\nAdds the named property described by a given descriptor to an object.\n\n[`Object.entries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n\nReturns an array containing all of the `[key, value]` pairs of a given object's **own** enumerable string properties.\n\n[`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\nFreezes an object. Other code cannot delete or change its properties.\n\n[`Object.fromEntries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries)\n\nReturns a new object from an iterable of `[key, value]` pairs. (This is the reverse of [`Object.entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)).\n\n[`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\nReturns a property descriptor for a named property on an object.\n\n[`Object.getOwnPropertyDescriptors()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors)\n\nReturns an object containing all own property descriptors for an object.\n\n[`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n\nReturns an array containing the names of all of the given object's **own** enumerable and non-enumerable properties.\n\n[`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)\n\nReturns an array of all symbol properties found directly upon a given object.\n\n[`Object.getPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf)\n\nReturns the prototype (internal `[[Prototype]]` property) of the specified object.\n\n[`Object.groupBy()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/groupBy)\n\nGroups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.\n\n[`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)\n\nReturns `true` if the specified object has the indicated property as its _own_ property, or `false` if the property is inherited or does not exist.\n\n[`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\nCompares if two values are the same value. Equates all `NaN` values (which differs from both `IsLooselyEqual` used by [`==`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) and `IsStrictlyEqual` used by [`===`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)).\n\n[`Object.isExtensible()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n\nDetermines if extending of an object is allowed.\n\n[`Object.isFrozen()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n\nDetermines if an object was frozen.\n\n[`Object.isSealed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n\nDetermines if an object is sealed.\n\n[`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n\nReturns an array containing the names of all of the given object's **own** enumerable string properties.\n\n[`Object.preventExtensions()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n\nPrevents any extensions of an object.\n\n[`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n\nPrevents other code from deleting properties of an object.\n\n[`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n\nSets the object's prototype (its internal `[[Prototype]]` property).\n\n[`Object.values()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values)\n\nReturns an array containing the values that correspond to all of a given object's **own** enumerable string properties.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Object.prototype` and shared by all `Object` instances.\n\n[`Object.prototype.__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) Deprecated\n\nPoints to the object which was used as prototype when the object was instantiated.\n\n[`Object.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For plain `Object` instances, the initial value is the [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object) constructor. Instances of other constructors each inherit the `constructor` property from their respective `Constructor.prototype` object.\n\n## [Instance methods](#instance_methods)\n\n[`Object.prototype.__defineGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__) Deprecated\n\nAssociates a function with a property that, when accessed, executes that function and returns its return value.\n\n[`Object.prototype.__defineSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) Deprecated\n\nAssociates a function with a property that, when set, executes that function which modifies the property.\n\n[`Object.prototype.__lookupGetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__) Deprecated\n\nReturns the function bound as a getter to the specified property.\n\n[`Object.prototype.__lookupSetter__()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__) Deprecated\n\nReturns the function bound as a setter to the specified property.\n\n[`Object.prototype.hasOwnProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\n\nReturns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.\n\n[`Object.prototype.isPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf)\n\nReturns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.\n\n[`Object.prototype.propertyIsEnumerable()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable)\n\nReturns a boolean indicating whether the specified property is the object's [enumerable own](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) property.\n\n[`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString)\n\nCalls [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\n[`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n\nReturns a string representation of the object.\n\n[`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)\n\nReturns the primitive value of the specified object.\n\n## [Examples](#examples)\n\n### [Constructing empty objects](#constructing_empty_objects)\n\nThe following example creates empty objects using the `new` keyword with different arguments:\n\n```\nconst o1 = new Object();\nconst o2 = new Object(undefined);\nconst o3 = new Object(null);\n```\n\n### [Using Object() constructor to turn primitives into an Object of their respective type](#using_object_constructor_to_turn_primitives_into_an_object_of_their_respective_type)\n\nYou can use the [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object) constructor to create an object wrapper of a primitive value.\n\nThe following examples create variables `o1` and `o2` which are objects storing [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) and [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values:\n\n```\n// Equivalent to const o1 = new Boolean(true)\nconst o1 = new Object(true);\n\n// No equivalent because BigInt() can't be called as a constructor,\n// and calling it as a regular function won't create an object\nconst o2 = new Object(1n);\n```\n\n### [Object prototypes](#object_prototypes)\n\nWhen altering the behavior of existing `Object.prototype` methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.\n\nWhen modifying prototypes with hooks, pass `this` and the arguments (the call state) to the current behavior by calling `apply()` on the function. This pattern can be used for any prototype, such as `Node.prototype`, `Function.prototype`, etc.\n\n```\nconst current = Object.prototype.valueOf;\n\n// Since my property \"-prop-value\" is cross-cutting and isn't always\n// on the same prototype chain, I want to modify Object.prototype:\nObject.prototype.valueOf = function (...args) {\n  if (Object.hasOwn(this, \"-prop-value\")) {\n    return this[\"-prop-value\"];\n  } else {\n    // It doesn't look like one of my objects, so let's fall back on\n    // the default behavior by reproducing the current behavior as best we can.\n    // The apply behaves like \"super\" in some other languages.\n    // Even though valueOf() doesn't take arguments, some other hook may.\n    return current.apply(this, args);\n  }\n};\n```\n\n**Warning:** Modifying the `prototype` property of any built-in constructor is considered a bad practice and risks forward compatibility.\n\nYou can read more about prototypes in [Inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-object-objects](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Object - JavaScript | MDN",
    "description": "The Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition",
    "markdown": "# Addition (+) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **addition (`+`)** operator produces the sum of numeric operands or string concatenation.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `+` operator is overloaded for two distinct operations: numeric addition and string concatenation. When evaluating, it first [coerces both operands to primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion). Then, the two operands' types are tested:\n\n*   If one side is a string, the other operand is also [converted to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) and they are concatenated.\n*   If they are both [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), BigInt addition is performed. If one side is a BigInt but the other is not, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n*   Otherwise, both sides are [converted to numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), and numeric addition is performed.\n\nString concatenation is often thought to be equivalent with [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) or [`String.prototype.concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat), but they are not. Addition coerces the expression to a _primitive_, which calls [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) in priority; on the other hand, template literals and `concat()` coerce the expression to a _string_, which calls [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) in priority. If the expression has a [`@@toPrimitive`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, string concatenation calls it with `\"default\"` as hint, while template literals use `\"string\"`. This is important for objects that have different string and primitive representations — such as [Temporal](https://github.com/tc39/proposal-temporal), whose `valueOf()` method throws.\n\n```\nconst t = Temporal.Now.instant();\n\"\" + t; // Throws TypeError\n`${t}`; // '2022-07-31T04:48:56.113918308Z'\n\"\".concat(t); // '2022-07-31T04:48:56.113918308Z'\n```\n\nYou are advised to not use `\"\" + x` to perform [string coercion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\n## [Examples](#examples)\n\n### [Addition using numbers](#addition_using_numbers)\n\nOther non-string, non-BigInt values are coerced to numbers:\n\n```\ntrue + 1; // 2\nfalse + false; // 0\n```\n\n### [Addion using BigInts](#addion_using_bigints)\n\nYou cannot mix BigInt and number operands in addition.\n\n```\n1n + 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n2 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n\"1\" + 2n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nTo do addition with a BigInt and a non-BigInt, convert either operand:\n\n```\n1n + BigInt(2); // 3n\nNumber(1n) + 2; // 3\n```\n\n### [Addition using strings](#addition_using_strings)\n\nIf one of the operands is a string, the other is converted to a string and they are concatenated:\n\n```\n\"foo\" + \"bar\"; // \"foobar\"\n5 + \"foo\"; // \"5foo\"\n\"foo\" + false; // \"foofalse\"\n\"2\" + 2; // \"22\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-addition-operator-plus](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-addition-operator-plus) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Addition (+) - JavaScript | MDN",
    "description": "The addition (+) operator produces the sum of numeric operands or string concatenation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
    "markdown": "# parseInt() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`parseInt()`** function parses a string argument and returns an integer of the specified [radix](https://en.wikipedia.org/wiki/Radix) (the base in mathematical numeral systems).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nparseInt(string)\nparseInt(string, radix)\n```\n\n### [Parameters](#parameters)\n\n[`string`](#string)\n\nA string starting with an integer. Leading [whitespace](https://developer.mozilla.org/en-US/docs/Glossary/Whitespace) in this argument is ignored.\n\n[`radix`](#radix) Optional\n\nAn integer between `2` and `36` that represents the _radix_ (the base in mathematical numeral systems) of the `string`. It is converted to a [32-bit integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion); if it's nonzero and outside the range of \\[2, 36\\] after conversion, the function will always return `NaN`. If `0` or not provided, the radix will be inferred based on `string`'s value. Be careful — this does _not_ always default to `10`! The [description below](#description) explains in more detail what happens when `radix` is not provided.\n\n### [Return value](#return_value)\n\nAn integer parsed from the given `string`, or [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) when\n\n*   the `radix` as a 32-bit integer is smaller than `2` or bigger than `36`, or\n*   the first non-whitespace character cannot be converted to a number.\n\n**Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. `parseInt()` and [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) 42.\n\n## [Description](#description)\n\nThe `parseInt` function [converts its first argument to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), parses that string, then returns an integer or `NaN`.\n\nIf not `NaN`, the return value will be the integer that is the first argument taken as a number in the specified `radix`. (For example, a `radix` of `10` converts from a decimal number, `8` converts from octal, `16` from hexadecimal, and so on.)\n\nThe `radix` argument is [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). If it's unprovided, or if the value becomes 0, `NaN` or `Infinity` (`undefined` is coerced to `NaN`), JavaScript assumes the following:\n\n1.  If the input `string`, with leading whitespace and possible `+`/`-` signs removed, begins with `0x` or `0X` (a zero, followed by lowercase or uppercase X), `radix` is assumed to be `16` and the rest of the string is parsed as a hexadecimal number.\n2.  If the input `string` begins with any other value, the radix is `10` (decimal).\n\n**Note:** Other prefixes like `0b`, which are valid in [number literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#binary), are treated as normal digits by `parseInt()`. `parseInt()` does _not_ treat strings beginning with a `0` character as octal values either. The only prefix that `parseInt()` recognizes is `0x` or `0X` for hexadecimal values — everything else is parsed as a decimal value if `radix` is missing. [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) or [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) can be used instead to parse these prefixes.\n\nIf the radix is `16`, `parseInt()` allows the string to be optionally prefixed by `0x` or `0X` after the optional sign character (`+`/`-`).\n\nIf the radix value (coerced if necessary) is not in range \\[2, 36\\] (inclusive) `parseInt` returns `NaN`.\n\nFor radices above `10`, letters of the English alphabet indicate numerals greater than `9`. For example, for hexadecimal numbers (base `16`), `A` through `F` are used. The letters are case-insensitive.\n\n`parseInt` understands exactly two signs: `+` for positive, and `-` for negative. It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.\n\nIf `parseInt` encounters a character that is not a numeral in the specified `radix`, it ignores it and all succeeding characters and returns the integer value parsed up to that point. For example, although `1e3` technically encodes an integer (and will be correctly parsed to the integer `1000` by [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)), `parseInt(\"1e3\", 10)` returns `1`, because `e` is not a valid numeral in base 10. Because `.` is not a numeral either, the return value will always be an integer.\n\nIf the first character cannot be converted to a number with the radix in use, `parseInt` returns `NaN`. Leading whitespace is allowed.\n\nFor arithmetic purposes, the `NaN` value is not a number in any radix. You can call the [`Number.isNaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) function to determine if the result of `parseInt` is `NaN`. If `NaN` is passed on to arithmetic operations, the operation result will also be `NaN`.\n\nBecause large numbers use the `e` character in their string representation (e.g. `6.022e23` for 6.022 × 1023), using `parseInt` to truncate numbers will produce unexpected results when used on very large or very small numbers. `parseInt` should _not_ be used as a substitute for [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc).\n\nTo convert a number to its string literal in a particular radix, use [`thatNumber.toString(radix)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString).\n\nBecause `parseInt()` returns a number, it may suffer from loss of precision if the integer represented by the string is [outside the safe range](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger). The [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function supports parsing integers of arbitrary length accurately, by returning a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\n## [Examples](#examples)\n\n### [Using parseInt()](#using_parseint)\n\nThe following examples all return `15`:\n\n```\nparseInt(\"0xF\", 16);\nparseInt(\"F\", 16);\nparseInt(\"17\", 8);\nparseInt(\"015\", 10);\nparseInt(\"15,123\", 10);\nparseInt(\"FXX123\", 16);\nparseInt(\"1111\", 2);\nparseInt(\"15 * 3\", 10);\nparseInt(\"15e2\", 10);\nparseInt(\"15px\", 10);\nparseInt(\"12\", 13);\n```\n\nThe following examples all return `NaN`:\n\n```\nparseInt(\"Hello\", 8); // Not a number at all\nparseInt(\"546\", 2); // Digits other than 0 or 1 are invalid for binary radix\n```\n\nThe following examples all return `-15`:\n\n```\nparseInt(\"-F\", 16);\nparseInt(\"-0F\", 16);\nparseInt(\"-0XF\", 16);\nparseInt(\"-17\", 8);\nparseInt(\"-15\", 10);\nparseInt(\"-1111\", 2);\nparseInt(\"-15e1\", 10);\nparseInt(\"-12\", 13);\n```\n\nThe following example returns `224`:\n\n`parseInt()` does not handle [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision.\n\n```\nparseInt(\"900719925474099267n\");\n// 900719925474099300\n```\n\nYou should pass the string to the [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n```\n\n`parseInt` doesn't work with [numeric separators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators):\n\n```\nparseInt(\"123_456\"); // 123\n```\n\n### [Using parseInt() on non-strings](#using_parseint_on_non-strings)\n\n`parseInt()` can have interesting results when working on non-strings combined with a high radix; for example, `36` (which makes all alphanumeric characters valid numeric digits).\n\n```\nparseInt(null, 36); // 1112745: The string \"null\" is 1112745 in base 36\nparseInt(undefined, 36); // 86464843759093: The string \"undefined\" is 86464843759093 in base 36\n```\n\nIn general, it's a bad idea to use `parseInt()` on non-strings, especially to use it as a substitution for [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc). It may work on small numbers:\n\n```\nparseInt(15.99, 10); // 15\nparseInt(-15.1, 10); // -15\n```\n\nHowever, it only happens to work because the string representation of these numbers uses basic fractional notation (`\"15.99\"`, `\"-15.1\"`), where `parseInt()` stops at the decimal point. Numbers greater than or equal to 1e+21 or less than or equal to 1e-7 use exponential notation (`\"1.5e+22\"`, `\"1.51e-8\"`) in their string representation, and `parseInt()` will stop at the `e` character or decimal point, which always comes after the first digit. This means for large and small numbers, `parseInt()` will return a one-digit integer:\n\n```\nparseInt(4.7 * 1e22, 10); // Very large number becomes 4\nparseInt(0.00000000000434, 10); // Very small number becomes 4\n\nparseInt(0.0000001, 10); // 1\nparseInt(0.000000123, 10); // 1\nparseInt(1e-7, 10); // 1\nparseInt(1000000000000000000000, 10); // 1\nparseInt(123000000000000000000000, 10); // 1\nparseInt(1e21, 10); // 1\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-parseint-string-radix](https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "parseInt() - JavaScript | MDN",
    "description": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than",
    "markdown": "# Greater than (>) - JavaScript\n\nThe **greater than (`>`)** operator returns `true` if the left operand is greater than the right operand, and `false` otherwise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe operands are compared using the same algorithm as the [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) operator, except the two operands are swapped. `x > y` is generally equivalent to `y < x`, except that `x > y` coerces `x` to a primitive before `y`, while `y < x` coerces `y` to a primitive before `x`. Because coercion may have side effects, the order of the operands may matter.\n\n## [Examples](#examples)\n\n### [String to string comparison](#string_to_string_comparison)\n\n```\n\"a\" > \"b\"; // false\n\"a\" > \"a\"; // false\n\"a\" > \"3\"; // true\n```\n\n### [String to number comparison](#string_to_number_comparison)\n\n```\n\"5\" > 3; // true\n\"3\" > 3; // false\n\"3\" > 5; // false\n\n\"hello\" > 5; // false\n5 > \"hello\"; // false\n\n\"5\" > 3n; // true\n\"3\" > 5n; // false\n```\n\n### [Number to Number comparison](#number_to_number_comparison)\n\n```\n5 > 3; // true\n3 > 3; // false\n3 > 5; // false\n```\n\n### [Number to BigInt comparison](#number_to_bigint_comparison)\n\n```\n5n > 3; // true\n3 > 5n; // false\n```\n\n### [Comparing Boolean, null, undefined, NaN](#comparing_boolean_null_undefined_nan)\n\n```\ntrue > false; // true\nfalse > true; // false\n\ntrue > 0; // true\ntrue > 1; // false\n\nnull > 0; // false\n1 > null; // true\n\nundefined > 3; // false\n3 > undefined; // false\n\n3 > NaN; // false\nNaN > 3; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Greater than (>) - JavaScript | MDN",
    "description": "The greater than (>) operator returns true if the left\n  operand is greater than the right operand, and false otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal",
    "markdown": "# Greater than or equal (>=) - JavaScript\n\nThe **greater than or equal (`>=`)** operator returns `true` if the left operand is greater than or equal to the right operand, and `false` otherwise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe operands are compared using the same algorithm as the [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) operator, with the result negated. `x >= y` is generally equivalent to `!(x < y)`, except for two cases where `x >= y` and `x < y` are both `false`:\n\n*   If one of the operands gets converted to a BigInt, while the other gets converted to a string that cannot be converted to a BigInt value (it throws a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax) when passed to [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)).\n*   If one of the operands gets converted to `NaN`. (For example, strings that cannot be converted to numbers, or `undefined`.)\n\n`x >= y` is generally equivalent to `x > y || x == y`, except for a few cases:\n\n*   When one of `x` or `y` is `null`, and the other is something that's not `null` and becomes 0 when [coerced to numeric](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) (including `0`, `0n`, `false`, `\"\"`, `\"0\"`, `new Date(0)`, etc.): `x >= y` is `true`, while `x > y || x == y` is `false`.\n*   When one of `x` or `y` is `undefined`, and the other is one of `null` or `undefined`: `x >= y` is `false`, while `x == y` is `true`.\n*   When `x` and `y` are the same object that becomes `NaN` after the first step of [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) (such as `new Date(NaN)`): `x >= y` is `false`, while `x == y` is `true`.\n*   When `x` and `y` are different objects that become the same value after the first step of [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than): `x >= y` is `true`, while `x > y || x == y` is `false`.\n\n## [Examples](#examples)\n\n### [String to string comparison](#string_to_string_comparison)\n\n```\n\"a\" >= \"b\"; // false\n\"a\" >= \"a\"; // true\n\"a\" >= \"3\"; // true\n```\n\n### [String to number comparison](#string_to_number_comparison)\n\n```\n\"5\" >= 3; // true\n\"3\" >= 3; // true\n\"3\" >= 5; // false\n\n\"hello\" >= 5; // false\n5 >= \"hello\"; // false\n```\n\n### [Number to Number comparison](#number_to_number_comparison)\n\n```\n5 >= 3; // true\n3 >= 3; // true\n3 >= 5; // false\n```\n\n### [Number to BigInt comparison](#number_to_bigint_comparison)\n\n```\n5n >= 3; // true\n3 >= 3n; // true\n3 >= 5n; // false\n```\n\n### [Comparing Boolean, null, undefined, NaN](#comparing_boolean_null_undefined_nan)\n\n```\ntrue >= false; // true\ntrue >= true; // true\nfalse >= true; // false\n\ntrue >= 0; // true\ntrue >= 1; // true\n\nnull >= 0; // true\n1 >= null; // true\n\nundefined >= 3; // false\n3 >= undefined; // false\n\n3 >= NaN; // false\nNaN >= 3; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Greater than or equal (>=) - JavaScript | MDN",
    "description": "The greater than or equal (>=) operator returns true if\n  the left operand is greater than or equal to the right operand, and false\n  otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta",
    "markdown": "# import.meta - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`import.meta`** meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.\n\n## [Syntax](#syntax)\n\n### [Value](#value)\n\nThe `import.meta` object is created by the host environment, as an extensible [`null`\\-prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) object where all properties are writable, configurable, and enumerable. The spec doesn't specify any properties to be defined on it, but hosts usually implement the following properties:\n\n[`url`](#url)\n\nThe full URL to the module, includes query parameters and/or hash (following the `?` or `#`). In browsers, this is either the URL from which the script was obtained (for external scripts), or the URL of the containing document (for inline scripts). In Node.js, this is the file path (including the `file://` protocol).\n\n[`resolve`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve)\n\nResolves a module specifier to a URL using the current module's URL as base.\n\n## [Description](#description)\n\nThe `import.meta` syntax consists of the keyword `import`, a dot, and the identifier `meta`. Because `import` is a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words), not an identifier, this is not a [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), but a special expression syntax.\n\nThe `import.meta` meta-property is available in JavaScript modules; using `import.meta` outside of a module (including [direct `eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eval) within a module) is a syntax error.\n\n## [Examples](#examples)\n\n### [Passing query parameters](#passing_query_parameters)\n\nUsing query parameters in the `import` specifier allows module-specific argument passing, which may be complementary to reading parameters from the application-wide [`window.location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location) (or on Node.js, through `process.argv`). For example, with the following HTML:\n\n```\n<script type=\"module\">\n  import \"./index.mjs?someURLInfo=5\";\n</script>\n```\n\nThe `index.mjs` module is able to retrieve the `someURLInfo` parameter through `import.meta`:\n\n```\n// index.mjs\nnew URL(import.meta.url).searchParams.get(\"someURLInfo\"); // 5\n```\n\nThe same applies when a module imports another:\n\n```\n// index.mjs\nimport \"./index2.mjs?someURLInfo=5\";\n\n// index2.mjs\nnew URL(import.meta.url).searchParams.get(\"someURLInfo\"); // 5\n```\n\nThe ES module implementation in Node.js supports resolving module specifiers containing query parameters (or the hash), as in the latter example. However, you cannot use queries or hashes when the module is specified through the CLI command (like `node index.mjs?someURLInfo=5`), because the CLI entrypoint uses a more CommonJS-like resolution mode, treating the path as a file path rather than a URL. To pass parameters to the entrypoint module, use CLI arguments and read them through `process.argv` instead (like `node index.mjs --someURLInfo=5`).\n\n### [Resolving a file relative to the current one](#resolving_a_file_relative_to_the_current_one)\n\nIn Node.js CommonJS modules, there's a `__dirname` variable that contains the absolute path to the folder containing current module, which is useful for resolving relative paths. However, ES modules cannot have contextual variables except for `import.meta`. Therefore, to resolve a relative file you can use `import.meta.url`. Note that this uses URLs rather than filesystem paths.\n\nBefore (CommonJS):\n\n```\nconst fs = require(\"fs/promises\");\nconst path = require(\"path\");\n\nconst filePath = path.join(__dirname, \"someFile.txt\");\nfs.readFile(filePath, \"utf8\").then(console.log);\n```\n\nAfter (ES modules):\n\n```\nimport fs from \"node:fs/promises\";\n\nconst fileURL = new URL(\"./someFile.txt\", import.meta.url);\nfs.readFile(fileURL, \"utf8\").then(console.log);\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-ImportMeta](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-ImportMeta) |\n| [HTML Standard  <br>\\# hostgetimportmetaproperties](https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "import.meta - JavaScript | MDN",
    "description": "The import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import",
    "markdown": "# import() - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`import()`** syntax, commonly called _dynamic import_, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.\n\nUnlike the [declaration-style counterpart](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import), dynamic imports are only evaluated when needed, and permit greater syntactic flexibility.\n\n## [Syntax](#syntax)\n\nThe `import()` call is a syntax that closely resembles a function call, but `import` itself is a keyword, not a function. You cannot alias it like `const myImport = import`, which will throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).\n\n### [Parameters](#parameters)\n\n[`moduleName`](#modulename)\n\nThe module to import from. The evaluation of the specifier is host-specified, but always follows the same algorithm as static [import declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import).\n\n### [Return value](#return_value)\n\nReturns a promise which:\n\n*   If the referenced module is loaded and evaluated successfully, fulfills to a [module namespace object](#module_namespace_object): an object containing all exports from `moduleName`.\n*   If the [coercion to string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) of `moduleName` throws, rejects with the thrown error.\n*   If `moduleName` refers to a module that doesn't exist, rejects with an implementation-defined error (Node uses a generic `Error`, while all browsers use `TypeError`).\n*   If evaluation of the referenced module throws, rejects with the thrown error.\n\n**Note:** `import()` never synchronously throws an error.\n\n## [Description](#description)\n\nThe import declaration syntax (`import something from \"somewhere\"`) is static and will always result in the imported module being evaluated at load time. Dynamic imports allow one to circumvent the syntactic rigidity of import declarations and load a module conditionally or on demand. The following are some reasons why you might need to use dynamic import:\n\n*   When importing statically significantly slows the loading of your code or increases your program's memory usage, and there is a low likelihood that you will need the code you are importing, or you will not need it until a later time.\n*   When the module you are importing does not exist at load time.\n*   When the import specifier string needs to be constructed dynamically. (Static import only supports static specifiers.)\n*   When the module being imported has side effects, and you do not want those side effects unless some condition is true. (It is recommended not to have any side effects in a module, but you sometimes cannot control this in your module dependencies.)\n*   When you are in a non-module environment (for example, `eval` or a script file).\n\nUse dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and [tree shaking](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking).\n\nIf your file is not run as a module (if it's referenced in an HTML file, the script tag must have `type=\"module\"`), you will not be able to use static import declarations, but the asynchronous dynamic import syntax will always be available, allowing you to import modules into non-module environments.\n\nDynamic module import is not permitted in all execution contexts. For example, `import()` can be used in the main thread, a shared worker, or a dedicated worker, but will throw if called within a [service worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) or a [worklet](https://developer.mozilla.org/en-US/docs/Web/API/Worklet).\n\n### [Module namespace object](#module_namespace_object)\n\nA _module namespace object_ is an object that describes all exports from a module. It is a static object that is created when the module is evaluated. There are two ways to access the module namespace object of a module: through a [namespace import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import) (`import * as name from moduleName`), or through the fulfillment value of a dynamic import.\n\nThe module namespace object is a [sealed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed) object with [`null` prototype](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). This means all string keys of the object correspond to the exports of the module and there are never extra keys. All keys are [enumerable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) in lexicographic order (i.e. the default behavior of [`Array.prototype.sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description)), with the default export available as a key called `default`. In addition, the module namespace object has a [`@@toStringTag`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property with the value `\"Module\"`, used in [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).\n\nThe string properties are non-configurable and writable when you use [`Object.getOwnPropertyDescriptors()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors) to get their descriptors. However, they are effectively read-only, because you cannot re-assign a property to a new value. This behavior mirrors the fact that static imports create \"[live bindings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter)\" — the values can be re-assigned by the module exporting them, but not by the module importing them. The writability of the properties reflects the possibility of the values changing, because non-configurable and non-writable properties must be constant. For example, you can re-assign the exported value of a variable, and the new value can be observed in the module namespace object.\n\nEach module specifier corresponds to a unique module namespace object, so the following is generally true:\n\n```\nimport * as mod from \"/my-module.js\";\n\nimport(\"/my-module.js\").then((mod2) => {\n  console.log(mod === mod2); // true\n});\n```\n\nExcept in one curious case: because a promise never fulfills to a [thenable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables), if the `my-module.js` module exports a function called `then()`, that function will automatically get called when the dynamic import's promise is fulfilled, as part of the [promise resolution](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function) process.\n\n```\n// my-module.js\nexport function then(resolve) {\n  console.log(\"then() called\");\n  resolve(1);\n}\n```\n\n```\n// main.js\nimport * as mod from \"/my-module.js\";\n\nimport(\"/my-module.js\").then((mod2) => {\n  // Logs \"then() called\"\n  console.log(mod === mod2); // false\n});\n```\n\n**Warning:** Do not export a function called `then()` from a module. This will cause the module to behave differently when imported dynamically than when imported statically.\n\n## [Examples](#examples)\n\n### [Import a module for its side effects only](#import_a_module_for_its_side_effects_only)\n\n```\n(async () => {\n  if (somethingIsTrue) {\n    // import module for side effects\n    await import(\"/modules/my-module.js\");\n  }\n})();\n```\n\nIf your project uses packages that export ESM, you can also import them for side effects only. This will run the code in the package entry point file (and any files it imports) only.\n\n### [Importing defaults](#importing_defaults)\n\nYou need to destructure and rename the \"default\" key from the returned object.\n\n```\n(async () => {\n  if (somethingIsTrue) {\n    const {\n      default: myDefault,\n      foo,\n      bar,\n    } = await import(\"/modules/my-module.js\");\n  }\n})();\n```\n\n### [Importing on-demand in response to user action](#importing_on-demand_in_response_to_user_action)\n\nThis example shows how to load functionality on to a page based on a user action, in this case a button click, and then call a function within that module. This is not the only way to implement this functionality. The `import()` function also supports `await`.\n\n```\nconst main = document.querySelector(\"main\");\nfor (const link of document.querySelectorAll(\"nav > a\")) {\n  link.addEventListener(\"click\", (e) => {\n    e.preventDefault();\n\n    import(\"/modules/my-module.js\")\n      .then((module) => {\n        module.loadPageInto(main);\n      })\n      .catch((err) => {\n        main.textContent = err.message;\n      });\n  });\n}\n```\n\n### [Importing different modules based on environment](#importing_different_modules_based_on_environment)\n\nIn processes such as server-side rendering, you may need to load different logic on server or in browser because they interact with different globals or modules (for example, browser code has access to web APIs like `document` and `navigator`, while server code has access to the server file system). You can do so through a conditional dynamic import.\n\n```\nlet myModule;\n\nif (typeof window === \"undefined\") {\n  myModule = await import(\"module-used-on-server\");\n} else {\n  myModule = await import(\"module-used-in-browser\");\n}\n```\n\n### [Importing modules with a non-literal specifier](#importing_modules_with_a_non-literal_specifier)\n\nDynamic imports allow any expression as the module specifier, not necessarily string literals.\n\nHere, we load 10 modules, `/modules/module-0.js`, `/modules/module-1.js`, etc., concurrently, and call the `load` functions that each one exports.\n\n```\nPromise.all(\n  Array.from({ length: 10 }).map(\n    (_, index) => import(`/modules/module-${index}.js`),\n  ),\n).then((modules) => modules.forEach((module) => module.load()));\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-import-calls](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-import-calls) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "import() - JavaScript | MDN",
    "description": "The import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
    "markdown": "# Grouping operator ( ) - JavaScript\n\nThe **grouping `( )`** operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`expression`](#expression)\n\nAny [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators) to be evaluated, including [comma-joined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) expressions.\n\n## [Description](#description)\n\nThe grouping operator consists of a pair of parentheses around an expression that groups the contents. The operator overrides the normal [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence), so that operators with lower precedence (as low as the [comma](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) operator) can be evaluated before an operator with higher precedence.\n\n## [Examples](#examples)\n\n### [Using the grouping operator](#using_the_grouping_operator)\n\nEvaluating addition and subtraction before multiplication and division.\n\n```\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// default precedence\na + b * c; // 7\n// evaluated by default like this\na + (b * c); // 7\n\n// now overriding precedence\n// addition before multiplication\n(a + b) * c; // 9\n\n// which is equivalent to\na * c + b * c; // 9\n```\n\nNotice in these examples that the order in which the _operators_ evaluate has changed, but the order in which the _operands_ evaluate has not. For example, in this code, the function invocations `a()`, `b()`, and `c()` are evaluated left-to-right (the normal order of evaluation) before the operator order is considered.\n\nThe function `a` will be called before the function `b`, which will be called before the function `c`. For more on operator precedence, see its [reference page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence).\n\n### [Using the grouping operator to eliminate parsing ambiguity](#using_the_grouping_operator_to_eliminate_parsing_ambiguity)\n\nAn [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot start with the keyword `function`, because the parser would see it as the start of a [function declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function). This means the following [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) syntax is invalid:\n\n```\nfunction () {\n  // code\n}();\n```\n\nThe grouping operator can be used to eliminate this ambiguity, since when the parser sees the left parenthesis, it knows that what follows must be an expression instead of a declaration.\n\n```\n(function () {\n  // code\n})();\n```\n\nYou may also use the [`void`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#immediately_invoked_function_expressions) operator to eliminate ambiguity.\n\nIn an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) expression body (one that directly returns an expression without the keyword `return`), the grouping operator can be used to return an object literal expression, because otherwise the left curly brace would be interpreted as the start of the function body.\n\n```\nconst f = () => ({ a: 1 });\n```\n\nIf a property is accessed on a number literal, the [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) dot `.` may be ambiguous with a decimal point, unless the number already has a decimal point. You can wrap integer literals in parentheses to eliminate this ambiguity.\n\n### [Grouping operator and automatic semicolon insertion](#grouping_operator_and_automatic_semicolon_insertion)\n\nThe grouping operator can mitigate [automatic semicolon insertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) (ASI) pitfalls. For example, the `return` keyword and the returned expression cannot have a line break in between:\n\n```\nfunction sum(a, b) {\n  return\n    a + b;\n}\n```\n\nThis code will return `undefined`, because a semicolon is inserted directly after the `return` keyword, which causes the function to return immediately without evaluating `a + b`. In case the returned expression is long and you want to keep it well-formatted, you may use the grouping operator to signify that the `return` keyword is followed by an expression and prevent semicolon insertion:\n\n```\nfunction sum(a, b) {\n  return (\n    a + b\n  );\n}\n```\n\nHowever, grouping may also _introduce_ ASI hazards. When a line starts with a left parenthesis and the previous line ends with an expression, the parser will not insert a semicolon before the line break, because it could be the middle of a function call. For example:\n\n```\nconst a = 1\n(1).toString()\n```\n\nThis code would be parsed as:\n\n```\nconst a = 1(1).toString();\n```\n\nWhich throws \"TypeError: 1 is not a function\". If your coding style does not use semicolons, remember that when a line starts with a left parenthesis, _prefix_ it with a semicolon. This practice is recommended by several formatters and/or style guides, including [Prettier](https://prettier.io/docs/en/rationale.html#semicolons) and [standard](https://standardjs.com/rules.html#semicolons).\n\n```\nconst a = 1\n;(1).toString()\n```\n\nFor more advice on working with ASI, see its [reference section](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-grouping-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-grouping-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Grouping operator ( ) - JavaScript | MDN",
    "description": "The grouping ( ) operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
    "markdown": "# in - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`in`** operator returns `true` if the specified property is in the specified object or its prototype chain.\n\nThe `in` operator cannot be used to search for values in other collections. To test if a certain value exists in an array, use [`Array.prototype.includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes). For sets, use [`Set.prototype.has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nprop in object\n#prop in object\n```\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nA string or symbol representing a property name (non-symbols will be [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion)). Can also be a [private property identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n\n[`object`](#object)\n\nObject to check if it (or its prototype chain) contains the property with specified name (`prop`).\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `object` is not an object (i.e. a primitive).\n\n## [Description](#description)\n\nThe `in` operator tests if a string or symbol property is present in an object or its prototype chain. If you want to check for only _non-inherited_ properties, use [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) instead.\n\nA property may be present in an object but have value `undefined`. Therefore, `x in obj` is not the same as `obj.x !== undefined`. To make `in` return `false` after a property is added, use the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator instead of setting that property's value to `undefined`.\n\nYou can also use the `in` operator to check whether a particular [private class field or method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) has been defined in an object. The operator returns `true` if the property is defined, and `false` otherwise. This is known as a _branded check_, because it returns `true` if and only if the object was created with that class constructor, after which you can safely access other private properties as well.\n\nThis is a special syntax — the left-hand side of the `in` operator is a property identifier instead of an expression, but unquoted (because otherwise it's a string property, not a private property).\n\nBecause accessing private properties on objects unrelated to the current class throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) instead of returning `undefined`, this syntax allows you to shorten:\n\n```\nclass C {\n  #x;\n  static isC(obj) {\n    try {\n      obj.#x;\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n```\n\nTo:\n\n```\nclass C {\n  #x;\n  static isC(obj) {\n    return #x in obj;\n  }\n}\n```\n\nIt also generally avoids the need for dealing with error handling just to access a private property that may be nonexistent.\n\nHowever, the `in` operator still requires the private property to be declared beforehand in the enclosing class — otherwise, it would throw a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) (\"Private field '#x' must be declared in an enclosing class\"), the same one as when you try to access an undeclared private property.\n\n```\nclass C {\n  foo() {\n    #x in this;\n  }\n}\n\nnew C().foo(); // SyntaxError: Private field '#x' must be declared in an enclosing class\n```\n\n## [Examples](#examples)\n\n### [Basic usage](#basic_usage)\n\nThe following examples show some uses of the `in` operator.\n\n```\n// Arrays\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\n0 in trees; // returns true\n3 in trees; // returns true\n6 in trees; // returns false\n\"bay\" in trees; // returns false (you must specify the index number, not the value at that index)\n\"length\" in trees; // returns true (length is an Array property)\nSymbol.iterator in trees; // returns true\n\n// Predefined objects\n\"PI\" in Math; // returns true\n\n// Custom objects\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\n\"make\" in mycar; // returns true\n\"model\" in mycar; // returns true\n```\n\nYou must specify an object on the right side of the `in` operator. For example, you can specify a string created with the `String` constructor, but you cannot specify a string literal.\n\n```\nconst color1 = new String(\"green\");\n\"length\" in color1; // returns true\n\nconst color2 = \"coral\";\n// generates an error (color2 is not a String object)\n\"length\" in color2;\n```\n\n### [Using the in operator with deleted or undefined properties](#using_the_in_operator_with_deleted_or_undefined_properties)\n\nIf you delete a property with the [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator, the `in` operator returns `false` for that property.\n\n```\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\ndelete mycar.make;\n\"make\" in mycar; // returns false\n\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ndelete trees[3];\n3 in trees; // returns false\n```\n\nIf you set a property to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) but do not delete it, the `in` operator returns true for that property.\n\n```\nconst mycar = { make: \"Honda\", model: \"Accord\", year: 1998 };\nmycar.make = undefined;\n\"make\" in mycar; // returns true\n```\n\n```\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\ntrees[3] = undefined;\n3 in trees; // returns true\n```\n\nThe `in` operator will return `false` for [empty array slots](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), even if accessing it directly returns `undefined`.\n\n```\nconst empties = new Array(3);\nempties[2]; // returns undefined\n2 in empties; // returns false\n```\n\nTo avoid this, make sure a new array is always filled with non-empty values or not write to indexes past the end of array.\n\n```\nconst empties = new Array(3).fill(undefined);\n2 in empties; // returns true\n```\n\n### [Inherited properties](#inherited_properties)\n\nThe `in` operator returns `true` for properties in the prototype chain. This may be undesirable if you are using objects to store arbitrary key-value pairs.\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return name in ages;\n}\n\nhasPerson(\"hasOwnProperty\"); // true\n```\n\nYou can use [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) to check if the object has the key.\n\n```\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return Object.hasOwn(ages, name);\n}\n\nhasPerson(\"hasOwnProperty\"); // false\n```\n\nAlternatively, you should consider using a [null prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) or a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) for storing `ages`, to avoid other bugs.\n\n```\nconst ages = new Map([\n  [\"alice\", 18],\n  [\"bob\", 27],\n]);\n\nfunction hasPerson(name) {\n  return ages.has(name);\n}\n\nhasPerson(\"hasOwnProperty\"); // false\n```\n\n### [Using the in operator to implement branded checks](#using_the_in_operator_to_implement_branded_checks)\n\nThe code fragment below demonstrates a static function that tells if an object was created with the `Person` constructor and therefore can perform other methods safely.\n\n```\nclass Person {\n  #age;\n  constructor(age) {\n    this.#age = age;\n  }\n  static isPerson(o) {\n    return #age in o;\n  }\n  ageDifference(other) {\n    return this.#age - other.#age;\n  }\n}\n\nconst p1 = new Person(20);\nconst p2 = new Person(30);\nconsole.log(p1.ageDifference(p2)); // -10\nconsole.log(Person.isPerson(p1)); // true\n\nif (Person.isPerson(p1) && Person.isPerson(p2)) {\n  console.log(p1.ageDifference(p2)); // -10\n}\n```\n\nIt helps to prevent the following case:\n\n```\nconst p2 = {};\n\np1.ageDifference(p2); // TypeError: Cannot read private member #age from an object whose class did not declare it\n```\n\nWithout the `in` operator, you would have to use a `try...catch` block to check if the object has the private property.\n\nYou can also implement this as a [`@@hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method of the class, so that you can use the [`instanceof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator to perform the same check (which, by default, only checks for the existence of `Person.prototype` in the object's prototype chain).\n\n```\nclass Person {\n  #age;\n  constructor(age) {\n    this.#age = age;\n  }\n  static [Symbol.hasInstance](o) {\n    // Testing `this` to prevent false-positives when\n    // calling `instanceof SubclassOfPerson`\n    return this === Person && #age in o;\n  }\n  ageDifference(other) {\n    return this.#age - other.#age;\n  }\n}\n\nconst p1 = new Person(20);\nconst p2 = new Person(30);\n\nif (p1 instanceof Person && p2 instanceof Person) {\n  console.log(p1.ageDifference(p2)); // -10\n}\n```\n\nFor more examples, see [Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) and the [class guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes#private_fields).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "in - JavaScript | MDN",
    "description": "The in operator returns true if the specified property is in the specified object or its prototype chain.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment",
    "markdown": "# Increment (++) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **increment (`++`)** operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `++` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces the operand to a numeric value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the type of it. It performs BigInt increment if the operand becomes a BigInt; otherwise, it performs number increment.\n\nIf used postfix, with operator after operand (for example, `x++`), the increment operator increments and returns the value before incrementing.\n\nIf used prefix, with operator before operand (for example, `++x`), the increment operator increments and returns the value after incrementing.\n\nThe increment operator can only be applied on operands that are references (variables and object properties; i.e. valid [assignment targets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)). `++x` itself evaluates to a value, not a reference, so you cannot chain multiple increment operators together.\n\n```\n++(++x); // SyntaxError: Invalid left-hand side expression in prefix operation\n```\n\n## [Examples](#examples)\n\n### [Postfix increment](#postfix_increment)\n\n```\nlet x = 3;\nconst y = x++;\n// x is 4; y is 3\n\nlet x2 = 3n;\nconst y2 = x2++;\n// x2 is 4n; y2 is 3n\n```\n\n### [Prefix increment](#prefix_increment)\n\n```\nlet x = 3;\nconst y = ++x;\n// x is 4; y is 4\n\nlet x2 = 3n;\nconst y2 = ++x2;\n// x2 is 4n; y2 is 4n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-postfix-increment-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-postfix-increment-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Increment (++) - JavaScript | MDN",
    "description": "The increment (++) operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality",
    "markdown": "# Inequality (!=) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **inequality (`!=`)** operator checks whether its two operands are not equal, returning a Boolean result. Unlike the [strict inequality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality) operator, it attempts to convert and compare operands that are of different types.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe inequality operator checks whether its operands are not equal. It is the negation of the [equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator so the following two lines will always give the same result:\n\nFor details of the comparison algorithm, see the page for the [equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator.\n\nLike the equality operator, the inequality operator will attempt to convert and compare operands of different types:\n\nTo prevent this, and require that different types are considered to be different, use the [strict inequality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality) operator instead:\n\n## [Examples](#examples)\n\n### [Comparison with no type conversion](#comparison_with_no_type_conversion)\n\n```\n1 != 2; // true\n\"hello\" != \"hola\"; // true\n\n1 != 1; // false\n\"hello\" != \"hello\"; // false\n```\n\n### [Comparison with type conversion](#comparison_with_type_conversion)\n\n```\n\"1\" != 1; // false\n1 != \"1\"; // false\n0 != false; // false\n0 != null; // true\n0 != undefined; // true\n0 != !!null; // false, look at Logical NOT operator\n0 != !!undefined; // false, look at Logical NOT operator\nnull != undefined; // false\n\nconst number1 = new Number(3);\nconst number2 = new Number(3);\nnumber1 != 3; // false\nnumber1 != number2; // true\n```\n\n### [Comparison of objects](#comparison_of_objects)\n\n```\nconst object1 = {\n  key: \"value\",\n};\n\nconst object2 = {\n  key: \"value\",\n};\n\nconsole.log(object1 != object2); // true\nconsole.log(object1 != object1); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-equality-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-equality-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Inequality (!=) - JavaScript | MDN",
    "description": "The inequality (!=) operator checks whether its two operands are not\n  equal, returning a Boolean result.\n  Unlike the strict inequality operator,\n  it attempts to convert and compare operands that are of different types.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment",
    "markdown": "# Left shift assignment (<<=) - JavaScript\n\nThe **left shift assignment (`<<=`)** operator performs [left shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x <<= y` is equivalent to `x = x << y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Using left shift assignment](#using_left_shift_assignment)\n\n```\nlet a = 5;\n// 00000000000000000000000000000101\n\na <<= 2; // 20\n// 00000000000000000000000000010100\n\nlet b = 5n;\nb <<= 2n; // 20n\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Left shift assignment (<<=) - JavaScript | MDN",
    "description": "The left shift assignment (<<=) operator performs left shift on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
    "markdown": "# instanceof - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`instanceof`** operator tests to see if the `prototype` property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nobject instanceof constructor\n```\n\n### [Parameters](#parameters)\n\n[`object`](#object)\n\nThe object to test.\n\n[`constructor`](#constructor)\n\nConstructor to test against.\n\n### [Exceptions](#exceptions)\n\n[`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)\n\nThrown if `constructor` is not an object. If `constructor` doesn't have a [`@@hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method, it must also be a function.\n\n## [Description](#description)\n\nThe `instanceof` operator tests the presence of `constructor.prototype` in `object`'s prototype chain. This usually (though [not always](#overriding_the_behavior_of_instanceof)) means `object` was constructed with `constructor`.\n\n```\n// defining constructors\nfunction C() {}\nfunction D() {}\n\nconst o = new C();\n\n// true, because: Object.getPrototypeOf(o) === C.prototype\no instanceof C;\n\n// false, because D.prototype is nowhere in o's prototype chain\no instanceof D;\n\no instanceof Object; // true, because:\nC.prototype instanceof Object; // true\n\n// Re-assign `constructor.prototype`: you should\n// rarely do this in practice.\nC.prototype = {};\nconst o2 = new C();\n\no2 instanceof C; // true\n\n// false, because C.prototype is nowhere in\n// o's prototype chain anymore\no instanceof C;\n\nD.prototype = new C(); // add C to [[Prototype]] linkage of D\nconst o3 = new D();\no3 instanceof D; // true\no3 instanceof C; // true since C.prototype is now in o3's prototype chain\n```\n\nNote that the value of an `instanceof` test can change if `constructor.prototype` is re-assigned after creating the object (which is usually discouraged). It can also be changed by changing `object`'s prototype using [`Object.setPrototypeOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\nClasses behave in the same way, because classes also have the `prototype` property.\n\n```\nclass A {}\nclass B extends A {}\n\nconst o1 = new A();\n// true, because Object.getPrototypeOf(o1) === A.prototype\no1 instanceof A;\n// false, because B.prototype is nowhere in o1's prototype chain\no1 instanceof B;\n\nconst o2 = new B();\n// true, because Object.getPrototypeOf(Object.getPrototypeOf(o2)) === A.prototype\no2 instanceof A;\n// true, because Object.getPrototypeOf(o2) === B.prototype\no2 instanceof B;\n```\n\nFor [bound functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind), `instanceof` looks up for the `prototype` property on the target function, since bound functions don't have `prototype`.\n\n```\nclass Base {}\nconst BoundBase = Base.bind(null, 1, 2);\nconsole.log(new Base() instanceof BoundBase); // true\n```\n\n### [instanceof and @@hasInstance](#instanceof_and_hasinstance)\n\nIf `constructor` has a [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method, the method will be called in priority, with `object` as its only argument and `constructor` as `this`.\n\n```\n// This class allows plain objects to be disguised as this class's instance,\n// as long as the object has a particular flag as its property.\nclass Forgeable {\n  static isInstanceFlag = Symbol(\"isInstanceFlag\");\n\n  static [Symbol.hasInstance](obj) {\n    return Forgeable.isInstanceFlag in obj;\n  }\n}\n\nconst obj = { [Forgeable.isInstanceFlag]: true };\nconsole.log(obj instanceof Forgeable); // true\n```\n\nBecause all functions inherit from `Function.prototype` by default, most of the time, the [`Function.prototype[@@hasInstance]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance) method specifies the behavior of `instanceof` when the right-hand side is a function. See the [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) page for the exact algorithm of `instanceof`.\n\n### [instanceof and multiple realms](#instanceof_and_multiple_realms)\n\nJavaScript execution environments (windows, frames, etc.) are each in their own _realm_. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, `[] instanceof window.frames[0].Array` will return `false`, because `Array.prototype !== window.frames[0].Array.prototype` and arrays in the current realm inherit from the former.\n\nThis may not make sense at first, but for scripts dealing with multiple frames or windows, and passing objects from one context to another via functions, this will be a valid and strong issue. For instance, you can securely check if a given object is in fact an Array using [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray), neglecting which realm it comes from.\n\nFor example, to check if a [`Node`](https://developer.mozilla.org/en-US/docs/Web/API/Node) is an [`SVGElement`](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) in a different context, you can use `myNode instanceof myNode.ownerDocument.defaultView.SVGElement`.\n\n## [Examples](#examples)\n\n### [Using instanceof with String](#using_instanceof_with_string)\n\nThe following example shows the behavior of `instanceof` with `String` objects.\n\n```\nconst literalString = \"This is a literal string\";\nconst stringObject = new String(\"String created with constructor\");\n\nliteralString instanceof String; // false, string primitive is not a String\nstringObject instanceof String; // true\n\nliteralString instanceof Object; // false, string primitive is not an Object\nstringObject instanceof Object; // true\n\nstringObject instanceof Date; // false\n```\n\n### [Using instanceof with Date](#using_instanceof_with_date)\n\nThe following example shows the behavior of `instanceof` with `Date` objects.\n\n```\nconst myDate = new Date();\n\nmyDate instanceof Date; // true\nmyDate instanceof Object; // true\nmyDate instanceof String; // false\n```\n\n### [Objects created using Object.create()](#objects_created_using_object.create)\n\nThe following example shows the behavior of `instanceof` with objects created using [`Object.create()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).\n\n```\nfunction Shape() {}\n\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\nRectangle.prototype = Object.create(Shape.prototype);\n\nRectangle.prototype.constructor = Rectangle;\n\nconst rect = new Rectangle();\n\nrect instanceof Object; // true\nrect instanceof Shape; // true\nrect instanceof Rectangle; // true\nrect instanceof String; // false\n\nconst literalObject = {};\nconst nullObject = Object.create(null);\nnullObject.name = \"My object\";\n\nliteralObject instanceof Object; // true, every object literal has Object.prototype as prototype\n({}) instanceof Object; // true, same case as above\nnullObject instanceof Object; // false, prototype is end of prototype chain (null)\n```\n\n### [Demonstrating that mycar is of type Car and type Object](#demonstrating_that_mycar_is_of_type_car_and_type_object)\n\nThe following code creates an object type `Car` and an instance of that object type, `mycar`. The `instanceof` operator demonstrates that the `mycar` object is of type `Car` and of type `Object`.\n\n```\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nconst mycar = new Car(\"Honda\", \"Accord\", 1998);\nconst a = mycar instanceof Car; // returns true\nconst b = mycar instanceof Object; // returns true\n```\n\n### [Not an instanceof](#not_an_instanceof)\n\nTo test if an object is not an `instanceof` a specific constructor, you can do:\n\n```\nif (!(mycar instanceof Car)) {\n  // Do something, like:\n  // mycar = new Car(mycar)\n}\n```\n\nThis is really different from:\n\n```\nif (!mycar instanceof Car) {\n  // unreachable code\n}\n```\n\nThis will always be `false`. (`!mycar` will be evaluated before `instanceof`, so you always try to know if a boolean is an instance of `Car`).\n\n### [Overriding the behavior of instanceof](#overriding_the_behavior_of_instanceof)\n\nA common pitfall of using `instanceof` is believing that, if `x instanceof C`, then `x` was created using `C` as constructor. This is not true, because `x` could be directly assigned with `C.prototype` as its prototype. In this case, if your code reads [private fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) of `C` from `x`, it would still fail:\n\n```\nclass C {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst x = { __proto__: C.prototype };\n\nif (x instanceof C) {\n  console.log(C.getValue(x)); // TypeError: Cannot read private member #value from an object whose class did not declare it\n}\n```\n\nTo avoid this, you can override the behavior of `instanceof` by adding a `Symbol.hasInstance` method to `C`, so that it does a branded check with [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in):\n\n```\nclass C {\n  #value = \"foo\";\n\n  static [Symbol.hasInstance](x) {\n    return #value in x;\n  }\n\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst x = { __proto__: C.prototype };\n\nif (x instanceof C) {\n  // Doesn't run, because x is not a C\n  console.log(C.getValue(x));\n}\n```\n\nNote that you may want to limit this behavior to the current class; otherwise, it could lead to false positives for subclasses:\n\n```\nclass D extends C {}\nconsole.log(new C() instanceof D); // true; because D inherits @@hasInstance from C\n```\n\nYou could do this by checking that `this` is the current constructor:\n\n```\nclass C {\n  #value = \"foo\";\n\n  static [Symbol.hasInstance](x) {\n    return this === C && #value in x;\n  }\n}\n\nclass D extends C {}\nconsole.log(new C() instanceof D); // false\nconsole.log(new C() instanceof C); // true\nconsole.log({ __proto__: C.prototype } instanceof C); // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "instanceof - JavaScript | MDN",
    "description": "The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with Symbol.hasInstance.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift",
    "markdown": "# Left shift (<<) - JavaScript\n\nThe `<<` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). For numbers, the operator returns a 32-bit integer. For BigInts, the operator returns a BigInt. It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt left shift if both operands become BigInts; otherwise, it converts both operands to [32-bit integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion) and performs number left shift. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\nThe operator operates on the left operand's bit representation in [two's complement](https://en.wikipedia.org/wiki/Two's_complement). For example, `9 << 2` yields 36:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n\nBitwise a 32-bit integer `x` to the left by `y` bits yields `x * 2 ** y`. So for example, `9 << 3` is equivalent to `9 * (2 ** 3) = 9 * (8) = 72`.\n\nIf the left operand is a number with more than 32 bits, it will get the most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\nBefore: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n\nThe right operand will be converted to an unsigned 32-bit integer and then taken modulo 32, so the actual shift offset will always be a positive integer between 0 and 31, inclusive. For example, `100 << 32` is the same as `100 << 0` (and produces `100`) because 32 modulo 32 is 0.\n\nFor BigInts, there's no truncation. Conceptually, understand positive BigInts as having an infinite number of leading `0` bits, and negative BigInts having an infinite number of leading `1` bits.\n\nLeft shifting any number `x` by `0` returns `x` converted to a 32-bit integer. Do not use `<< 0` to truncate numbers to integers; use [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers) instead.",
    "title": "Left shift (<<) - JavaScript | MDN",
    "description": "The left shift (<<) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the left. Excess bits shifted off to the left are discarded, and zero bits are shifted in from the right.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than",
    "markdown": "# Less than (<) - JavaScript\n\nThe **less than (`<`)** operator returns `true` if the left operand is less than the right operand, and `false` otherwise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe operands are compared with multiple rounds of coercion, which can be summarized as follows:\n\n*   First, objects are [converted to primitives](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling its [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), [`valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), and [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) methods, in that order. The left operand is always coerced before the right one. Note that although `[@@toPrimitive]()` is called with the `\"number\"` hint (meaning there's a slight preference for the object to become a number), the return value is not [converted to a number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), since strings are still specially handled.\n*   If both values are strings, they are compared as strings, based on the values of the UTF-16 code units (not Unicode code points) they contain.\n*   Otherwise JavaScript attempts to convert non-numeric types to numeric values:\n    *   Boolean values `true` and `false` are converted to 1 and 0 respectively.\n    *   `null` is converted to 0.\n    *   `undefined` is converted to `NaN`.\n    *   Strings are converted based on the values they contain, and are converted as `NaN` if they do not contain numeric values.\n*   If either value is [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), the operator returns `false`.\n*   Otherwise the values are compared as numeric values. BigInt and number values can be compared together.\n\nOther operators, including [`>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than), [`>=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal), and [`<=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal), use the same algorithm as `<`. There are two cases where all four operators return `false`:\n\n*   If one of the operands gets converted to a BigInt, while the other gets converted to a string that cannot be converted to a BigInt value (it throws a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax) when passed to [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)).\n*   If one of the operands gets converted to `NaN`. (For example, strings that cannot be converted to numbers, or `undefined`.)\n\nFor all other cases, the four operators have the following relationships:\n\n```\nx < y === !(x >= y);\nx <= y === !(x > y);\nx > y === y < x;\nx >= y === y <= x;\n```\n\n**Note:** One observable difference between `<` and `>` is the order of coercion, especially if the coercion to primitive has side effects. All comparison operators coerce the left operand before the right operand.\n\n## [Examples](#examples)\n\n### [String to string comparison](#string_to_string_comparison)\n\n```\n\"a\" < \"b\"; // true\n\"a\" < \"a\"; // false\n\"a\" < \"3\"; // false\n\n\"\\uD855\\uDE51\" < \"\\uFF3A\"; // true\n```\n\n### [String to number comparison](#string_to_number_comparison)\n\n```\n\"5\" < 3; // false\n\"3\" < 3; // false\n\"3\" < 5; // true\n\n\"hello\" < 5; // false\n5 < \"hello\"; // false\n\n\"5\" < 3n; // false\n\"3\" < 5n; // true\n```\n\n### [Number to Number comparison](#number_to_number_comparison)\n\n```\n5 < 3; // false\n3 < 3; // false\n3 < 5; // true\n```\n\n### [Number to BigInt comparison](#number_to_bigint_comparison)\n\n```\n5n < 3; // false\n3 < 5n; // true\n```\n\n### [Comparing Boolean, null, undefined, NaN](#comparing_boolean_null_undefined_nan)\n\n```\ntrue < false; // false\nfalse < true; // true\n\n0 < true; // true\ntrue < 1; // false\n\nnull < 0; // false\nnull < 1; // true\n\nundefined < 3; // false\n3 < undefined; // false\n\n3 < NaN; // false\nNaN < 3; // false\n```\n\n### [Comparison with side effects](#comparison_with_side_effects)\n\nComparisons always coerce their operands to primitives. This means the same object may end up having different values within one comparison expression. For example, you may have two values that are both greater than and less than the other.\n\n```\nclass Mystery {\n  static #coercionCount = -1;\n  valueOf() {\n    Mystery.#coercionCount++;\n    // The left operand is coerced first, so this will return 0\n    // Then it returns 1 for the right operand\n    return Mystery.#coercionCount % 2;\n  }\n}\n\nconst l = new Mystery();\nconst r = new Mystery();\nconsole.log(l < r && r < l);\n// true\n```\n\n**Warning:** This can be a source of confusion. If your objects provide custom primitive conversion logic, make sure it is _idempotent_: multiple coercions should return the same value.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Less than (<) - JavaScript | MDN",
    "description": "The less than (<) operator returns true if the left operand is less than the right operand, and false otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",
    "markdown": "# Logical AND (&&) - JavaScript\n\nThe **logical AND (`&&`)** (logical conjunction) operator for a set of boolean operands will be `true` if and only if all the operands are `true`. Otherwise it will be `false`.\n\nMore generally, the operator returns the value of the first [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) operand encountered when evaluating from left to right, or the value of the last operand if they are all [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nLogical AND (`&&`) evaluates operands from left to right, returning immediately with the value of the first [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) operand it encounters; if all values are [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), the value of the last operand is returned.\n\nIf a value can be converted to `true`, the value is so-called [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). If a value can be converted to `false`, the value is so-called [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nExamples of expressions that can be converted to false are:\n\n*   `false`;\n*   `null`;\n*   `NaN`;\n*   `0`;\n*   empty string (`\"\"` or `''` or ` `` `);\n*   `undefined`.\n\nThe AND operator preserves non-Boolean values and returns them as they are:\n\n```\nresult = \"\" && \"foo\"; // result is assigned \"\" (empty string)\nresult = 2 && 0; // result is assigned 0\nresult = \"foo\" && 4; // result is assigned 4\n```\n\nEven though the `&&` operator can be used with non-Boolean operands, it is still considered a boolean operator since its return value can always be converted to a [boolean primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type). To explicitly convert its return value (or any expression in general) to the corresponding boolean value, use a double [`NOT operator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT) or the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) constructor.\n\n### [Short-circuit evaluation](#short-circuit_evaluation)\n\nThe logical AND expression is a short-circuit operator. As each operand is converted to a boolean, if the result of one conversion is found to be `false`, the AND operator stops and returns the original value of that falsy operand; it does **not** evaluate any of the remaining operands.\n\nConsider the pseudocode below.\n\n(some falsy expression) && expr\n\nThe `expr` part is **never evaluated** because the first operand `(some falsy expression)` is evaluated as [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy). If `expr` is a function, the function is never called. See the example below:\n\n```\nfunction A() {\n  console.log(\"called A\");\n  return false;\n}\nfunction B() {\n  console.log(\"called B\");\n  return true;\n}\n\nconsole.log(A() && B());\n// Logs \"called A\" to the console due to the call for function A,\n// && evaluates to false (function A returns false), then false is logged to the console;\n// the AND operator short-circuits here and ignores function B\n```\n\n### [Operator precedence](#operator_precedence)\n\nThe AND operator has a higher precedence than the OR operator, meaning the `&&` operator is executed before the `||` operator (see [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence)).\n\n```\ntrue || false && false; // true\ntrue && (false || false); // false\n(2 === 3) || (4 < 0) && (1 === 1); // false\n```\n\n## [Examples](#examples)\n\n### [Using AND](#using_and)\n\nThe following code shows examples of the `&&` (logical AND) operator.\n\n```\na1 = true && true; // t && t returns true\na2 = true && false; // t && f returns false\na3 = false && true; // f && t returns false\na4 = false && 3 === 4; // f && f returns false\na5 = \"Cat\" && \"Dog\"; // t && t returns \"Dog\"\na6 = false && \"Cat\"; // f && t returns false\na7 = \"Cat\" && false; // t && f returns false\na8 = \"\" && false; // f && f returns \"\"\na9 = false && \"\"; // f && f returns false\n```\n\n### [Conversion rules for booleans](#conversion_rules_for_booleans)\n\n#### Converting AND to OR\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 && bCondition2\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2)\n```\n\n#### Converting OR to AND\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 || bCondition2\n```\n\nis always equal to:\n\n```\n!(!bCondition1 && !bCondition2)\n```\n\n### [Removing nested parentheses](#removing_nested_parentheses)\n\nAs logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression provided that certain rules are followed.\n\nThe following composite operation involving **booleans**:\n\n```\nbCondition1 || (bCondition2 && bCondition3)\n```\n\nis always equal to:\n\n```\nbCondition1 || bCondition2 && bCondition3\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-LogicalANDExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalANDExpression) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Logical AND (&&) - JavaScript | MDN",
    "description": "The logical AND (&&) (logical conjunction) operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "markdown": "# Number - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**`Number`** values represent floating-point numbers like `37` or `-9.25`.\n\nThe `Number` constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the `Number()` function.\n\n## [Description](#description)\n\nNumbers are most commonly expressed in literal forms like `255` or `3.14159`. The [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals) contains a more detailed reference.\n\n```\n255; // two-hundred and fifty-five\n255.0; // same number\n255 === 255.0; // true\n255 === 0xff; // true (hexadecimal notation)\n255 === 0b11111111; // true (binary notation)\n255 === 0.255e3; // true (decimal exponential notation)\n```\n\nA number literal like `37` in JavaScript code is a floating-point value, not an integer. There is no separate integer type in common everyday use. (JavaScript also has a [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type, but it's not designed to replace Number for everyday uses. `37` is still a number, not a BigInt.)\n\nWhen used as a function, `Number(value)` converts a string or other value to the Number type. If the value can't be converted, it returns [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n```\nNumber(\"123\"); // returns the number 123\nNumber(\"123\") === 123; // true\n\nNumber(\"unicorn\"); // NaN\nNumber(undefined); // NaN\n```\n\n### [Number encoding](#number_encoding)\n\nThe JavaScript `Number` type is a [double-precision 64-bit binary format IEEE 754](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) value, like `double` in Java or C#. This means it can represent fractional values, but there are some limits to the stored number's magnitude and precision. Very briefly, an IEEE 754 double-precision number uses 64 bits to represent 3 parts:\n\n*   1 bit for the _sign_ (positive or negative)\n*   11 bits for the _exponent_ (-1022 to 1023)\n*   52 bits for the _mantissa_ (representing a number between 0 and 1)\n\nThe mantissa (also called _significand_) is the part of the number representing the actual value (significant digits). The exponent is the power of 2 that the mantissa should be multiplied by. Thinking about it as scientific notation:\n\nNumber \\= ( − 1 ) sign ⋅ ( 1 + mantissa ) ⋅ 2 exponent \\\\text{Number} = ({-1})^{\\\\text{sign}} \\\\cdot (1 + \\\\text{mantissa}) \\\\cdot 2^{\\\\text{exponent}}\n\nThe mantissa is stored with 52 bits, interpreted as digits after `1.…` in a binary fractional number. Therefore, the mantissa's precision is 2\\-52 (obtainable via [`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON)), or about 15 to 17 decimal places; arithmetic above that level of precision is subject to [rounding](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding).\n\nThe largest value a number can hold is 21023 × (2 - 2\\-52) (with the exponent being 1023 and the mantissa being 0.1111… in base 2), which is obtainable via [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE). Values higher than that are replaced with the special number constant [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity).\n\nIntegers can only be represented without loss of precision in the range -253 + 1 to 253 - 1, inclusive (obtainable via [`Number.MIN_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) and [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)), because the mantissa can only hold 53 bits (including the leading 1).\n\nMore details on this are described in the [ECMAScript standard](https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-ecmascript-language-types-number-type).\n\n### [Number coercion](#number_coercion)\n\nMany built-in operations that expect numbers first coerce their arguments to numbers (which is largely why `Number` objects behave similarly to number primitives). [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber) can be summarized as follows:\n\n*   Numbers are returned as-is.\n*   [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n*   [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `0`.\n*   `true` turns into `1`; `false` turns into `0`.\n*   Strings are converted by parsing them as if they contain a [number literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals). Parsing failure results in `NaN`. There are some minor differences compared to an actual number literal:\n    *   Leading and trailing whitespace/line terminators are ignored.\n    *   A leading `0` digit does not cause the number to become an octal literal (or get rejected in strict mode).\n    *   `+` and `-` are allowed at the start of the string to indicate its sign. (In actual code, they \"look like\" part of the literal, but are actually separate unary operators.) However, the sign can only appear once, and must not be followed by whitespace.\n    *   `Infinity` and `-Infinity` are recognized as literals. In actual code, they are global variables.\n    *   Empty or whitespace-only strings are converted to `0`.\n    *   [Numeric separators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators) are not allowed.\n*   [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) to prevent unintended implicit coercion causing loss of precision.\n*   [Symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError).\n*   Objects are first [converted to a primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling their [`[@@toPrimitive]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a number.\n\nThere are two ways to achieve nearly the same effect in JavaScript.\n\n*   [Unary plus](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus): `+x` does exactly the number coercion steps explained above to convert `x`.\n*   The [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function: `Number(x)` uses the same algorithm to convert `x`, except that [BigInts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) don't throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), but return their number value, with possible loss of precision.\n\n[`Number.parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat) and [`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) are similar to `Number()` but only convert strings, and have slightly different parsing rules. For example, `parseInt()` doesn't recognize the decimal point, and `parseFloat()` doesn't recognize the `0x` prefix.\n\n#### Integer conversion\n\nSome operations expect integers, most notably those that work with array/string indices, date/time components, and number radixes. After performing the number coercion steps above, the result is [truncated](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) to an integer (by discarding the fractional part). If the number is ±Infinity, it's returned as-is. If the number is `NaN` or `-0`, it's returned as `0`. The result is therefore always an integer (which is not `-0`) or ±Infinity.\n\nNotably, when converted to integers, both `undefined` and `null` become `0`, because `undefined` is converted to `NaN`, which also becomes `0`.\n\n#### Fixed-width number conversion\n\nJavaScript has some lower-level functions that deal with the binary encoding of integer numbers, most notably [bitwise operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators) and [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) objects. Bitwise operators always convert the operands to 32-bit integers. In these cases, after converting the value to a number, the number is then normalized to the given width by first [truncating](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) the fractional part and then taking the lowest bits in the integer's two's complement encoding.\n\n```\nnew Int32Array([1.1, 1.9, -1.1, -1.9]); // Int32Array(4) [ 1, 1, -1, -1 ]\n\nnew Int8Array([257, -257]); // Int8Array(2) [ 1, -1 ]\n// 257 = 0001 0000 0001\n//     =      0000 0001 (mod 2^8)\n//     = 1\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = -1 (as signed integer)\n\nnew Uint8Array([257, -257]); // Uint8Array(2) [ 1, 255 ]\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = 255 (as unsigned integer)\n```\n\n## [Constructor](#constructor)\n\n[`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number)\n\nCreates `Number` objects. When called as a function, it returns primitive values of type Number.\n\n## [Static properties](#static_properties)\n\n[`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON)\n\nThe smallest interval between two representable numbers.\n\n[`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\n\nThe maximum safe integer in JavaScript (253 - 1).\n\n[`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)\n\nThe largest positive representable number.\n\n[`Number.MIN_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)\n\nThe minimum safe integer in JavaScript (-(253 - 1)).\n\n[`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE)\n\nThe smallest positive representable number—that is, the positive number closest to zero (without actually being zero).\n\n[`Number.NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN)\n\nSpecial \"**N**ot **a** **N**umber\" value.\n\n[`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY)\n\nSpecial value representing negative infinity. Returned on overflow.\n\n[`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)\n\nSpecial value representing infinity. Returned on overflow.\n\n## [Static methods](#static_methods)\n\n[`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite)\n\nDetermine whether the passed value is a finite number.\n\n[`Number.isInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger)\n\nDetermine whether the passed value is an integer.\n\n[`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)\n\nDetermine whether the passed value is `NaN`.\n\n[`Number.isSafeInteger()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger)\n\nDetermine whether the passed value is a safe integer (number between -(253 - 1) and 253 - 1).\n\n[`Number.parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat)\n\nThis is the same as the global [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) function.\n\n[`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt)\n\nThis is the same as the global [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) function.\n\n## [Instance properties](#instance_properties)\n\nThese properties are defined on `Number.prototype` and shared by all `Number` instances.\n\n[`Number.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n\nThe constructor function that created the instance object. For `Number` instances, the initial value is the [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) constructor.\n\n## [Instance methods](#instance_methods)\n\n[`Number.prototype.toExponential()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\n\nReturns a string representing the number in exponential notation.\n\n[`Number.prototype.toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\n\nReturns a string representing the number in fixed-point notation.\n\n[`Number.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString)\n\nReturns a string with a language sensitive representation of this number. Overrides the [`Object.prototype.toLocaleString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n\n[`Number.prototype.toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)\n\nReturns a string representing the number to a specified precision in fixed-point or exponential notation.\n\n[`Number.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\n\nReturns a string representing the specified object in the specified _radix_ (\"base\"). Overrides the [`Object.prototype.toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n\n[`Number.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf)\n\nReturns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n## [Examples](#examples)\n\n### [Using the Number object to assign values to numeric variables](#using_the_number_object_to_assign_values_to_numeric_variables)\n\nThe following example uses the `Number` object's properties to assign values to several numeric variables:\n\n```\nconst biggestNum = Number.MAX_VALUE;\nconst smallestNum = Number.MIN_VALUE;\nconst infiniteNum = Number.POSITIVE_INFINITY;\nconst negInfiniteNum = Number.NEGATIVE_INFINITY;\nconst notANum = Number.NaN;\n```\n\n### [Integer range for Number](#integer_range_for_number)\n\nThe following example shows the minimum and maximum integer values that can be represented as `Number` object.\n\n```\nconst biggestInt = Number.MAX_SAFE_INTEGER; // (2**53 - 1) => 9007199254740991\nconst smallestInt = Number.MIN_SAFE_INTEGER; // -(2**53 - 1) => -9007199254740991\n```\n\nWhen parsing data that has been serialized to JSON, integer values falling outside of this range can be expected to become corrupted when JSON parser coerces them to `Number` type.\n\nA possible workaround is to use [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) instead.\n\nLarger numbers can be represented using the [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type.\n\n### [Using Number() to convert a Date object](#using_number_to_convert_a_date_object)\n\nThe following example converts the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object to a numerical value using `Number` as a function:\n\n```\nconst d = new Date(\"1995-12-17T03:24:00\");\nconsole.log(Number(d));\n```\n\nThis logs `819199440000`.\n\n### [Convert numeric strings and null to numbers](#convert_numeric_strings_and_null_to_numbers)\n\n```\nNumber(\"123\"); // 123\nNumber(\"123\") === 123; // true\nNumber(\"12.3\"); // 12.3\nNumber(\"12.00\"); // 12\nNumber(\"123e-1\"); // 12.3\nNumber(\"\"); // 0\nNumber(null); // 0\nNumber(\"0x11\"); // 17\nNumber(\"0b11\"); // 3\nNumber(\"0o11\"); // 9\nNumber(\"foo\"); // NaN\nNumber(\"100a\"); // NaN\nNumber(\"-Infinity\"); // -Infinity\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-number-objects](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-number-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Number - JavaScript | MDN",
    "description": "Number values represent floating-point numbers like 37 or -9.25.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal",
    "markdown": "# Less than or equal (<=) - JavaScript\n\nThe **less than or equal (`<=`)** operator returns `true` if the left operand is less than or equal to the right operand, and `false` otherwise.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe operands are compared using the same algorithm as the [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) operator, with the operands swapped and the result negated. `x <= y` is generally equivalent to `!(y < x)`, except for two cases where `x <= y` and `x > y` are both `false`:\n\n*   If one of the operands gets converted to a BigInt, while the other gets converted to a string that cannot be converted to a BigInt value (it throws a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax) when passed to [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)).\n*   If one of the operands gets converted to `NaN`. (For example, strings that cannot be converted to numbers, or `undefined`.)\n\nIn addition, `x <= y` coerces `x` to a primitive before `y`, while `y < x` coerces `y` to a primitive before `x`. Because coercion may have side effects, the order of the operands may matter.\n\n`x <= y` is generally equivalent to `x < y || x == y`, except for a few cases:\n\n*   When one of `x` or `y` is `null`, and the other is something that's not `null` and becomes 0 when [coerced to numeric](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) (including `0`, `0n`, `false`, `\"\"`, `\"0\"`, `new Date(0)`, etc.): `x <= y` is `true`, while `x < y || x == y` is `false`.\n*   When one of `x` or `y` is `undefined`, and the other is one of `null` or `undefined`: `x <= y` is `false`, while `x == y` is `true`.\n*   When `x` and `y` are the same object that becomes `NaN` after the first step of [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) (such as `new Date(NaN)`): `x <= y` is `false`, while `x == y` is `true`.\n*   When `x` and `y` are different objects that become the same value after the first step of [Less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than): `x <= y` is `true`, while `x < y || x == y` is `false`.\n\n## [Examples](#examples)\n\n### [String to string comparison](#string_to_string_comparison)\n\n```\n\"a\" <= \"b\"; // true\n\"a\" <= \"a\"; // true\n\"a\" <= \"3\"; // false\n```\n\n### [String to number comparison](#string_to_number_comparison)\n\n```\n\"5\" <= 3; // false\n\"3\" <= 3; // true\n\"3\" <= 5; // true\n\n\"hello\" <= 5; // false\n5 <= \"hello\"; // false\n```\n\n### [Number to Number comparison](#number_to_number_comparison)\n\n```\n5 <= 3; // false\n3 <= 3; // true\n3 <= 5; // true\n```\n\n### [Number to BigInt comparison](#number_to_bigint_comparison)\n\n```\n5n <= 3; // false\n3 <= 3n; // true\n3 <= 5n; // true\n```\n\n### [Comparing Boolean, null, undefined, NaN](#comparing_boolean_null_undefined_nan)\n\n```\ntrue <= false; // false\ntrue <= true; // true\nfalse <= true; // true\n\ntrue <= 0; // false\ntrue <= 1; // true\n\nnull <= 0; // true\n1 <= null; // false\n\nundefined <= 3; // false\n3 <= undefined; // false\n\n3 <= NaN; // false\nNaN <= 3; // false\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-relational-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-relational-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Less than or equal (<=) - JavaScript | MDN",
    "description": "The less than or equal (<=) operator returns true if the left operand is less than or equal to the right operand, and false otherwise.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",
    "markdown": "# Logical AND assignment (&&=) - JavaScript\n\nThe **logical AND assignment (`&&=`)** operator only evaluates the right operand and assigns to the left if the left operand is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nLogical AND assignment [_short-circuits_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#short-circuiting), meaning that `x &&= y` is equivalent to `x && (x = y)`, except that the expression `x` is only evaluated once.\n\nNo assignment is performed if the left-hand side is not truthy, due to short-circuiting of the [logical AND](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) operator. For example, the following does not throw an error, despite `x` being `const`:\n\nNeither would the following trigger the setter:\n\n```\nconst x = {\n  get value() {\n    return 0;\n  },\n  set value(v) {\n    console.log(\"Setter called\");\n  },\n};\n\nx.value &&= 2;\n```\n\nIn fact, if `x` is not truthy, `y` is not evaluated at all.\n\n```\nconst x = 0;\nx &&= console.log(\"y evaluated\");\n// Logs nothing\n```\n\n## [Examples](#examples)\n\n### [Using logical AND assignment](#using_logical_and_assignment)\n\n```\nlet x = 0;\nlet y = 1;\n\nx &&= 0; // 0\nx &&= 1; // 0\ny &&= 1; // 1\ny &&= 0; // 0\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Logical AND assignment (&&=) - JavaScript | MDN",
    "description": "The logical AND assignment (&&=) operator only evaluates the right operand and assigns to the left if the left operand is truthy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR",
    "markdown": "# Logical OR (||) - JavaScript\n\nThe **logical OR (`||`)** (logical disjunction) operator for a set of operands is true if and only if one or more of its operands is true. It is typically used with boolean (logical) values. When it is, it returns a Boolean value. However, the `||` operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nIf `x` can be converted to `true`, returns `x`; else, returns `y`.\n\nIf a value can be converted to `true`, the value is so-called [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). If a value can be converted to `false`, the value is so-called [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nExamples of expressions that can be converted to false are:\n\n*   `null`;\n*   `NaN`;\n*   `0`;\n*   empty string (`\"\"` or `''` or ` `` `);\n*   `undefined`.\n\nEven though the `||` operator can be used with operands that are not Boolean values, it can still be considered a boolean operator since its return value can always be converted to a [boolean primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type). To explicitly convert its return value (or any expression in general) to the corresponding boolean value, use a double [NOT operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT) or the [`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) constructor.\n\n### [Short-circuit evaluation](#short-circuit_evaluation)\n\nThe logical OR expression is evaluated left to right, it is tested for possible \"short-circuit\" evaluation using the following rule:\n\n`(some truthy expression) || expr` is short-circuit evaluated to the truthy expression.\n\nShort circuit means that the `expr` part above is **not evaluated**, hence any side effects of doing so do not take effect (e.g., if `expr` is a function call, the calling never takes place). This happens because the value of the operator is already determined after the evaluation of the first operand. See example:\n\n```\nfunction A() {\n  console.log(\"called A\");\n  return false;\n}\nfunction B() {\n  console.log(\"called B\");\n  return true;\n}\n\nconsole.log(B() || A());\n// Logs \"called B\" due to the function call,\n// then logs true (which is the resulting value of the operator)\n```\n\n### [Operator precedence](#operator_precedence)\n\nThe following expressions might seem equivalent, but they are not, because the `&&` operator is executed before the `||` operator (see [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence)).\n\n```\ntrue || false && false; // returns true, because && is executed first\n(true || false) && false; // returns false, because grouping has the highest precedence\n```\n\n## [Examples](#examples)\n\n### [Using OR](#using_or)\n\nThe following code shows examples of the `||` (logical OR) operator.\n\n```\ntrue || true; // t || t returns true\nfalse || true; // f || t returns true\ntrue || false; // t || f returns true\nfalse || 3 === 4; // f || f returns false\n\"Cat\" || \"Dog\"; // t || t returns \"Cat\"\nfalse || \"Cat\"; // f || t returns \"Cat\"\n\"Cat\" || false; // t || f returns \"Cat\"\n\"\" || false; // f || f returns false\nfalse || \"\"; // f || f returns \"\"\nfalse || varObject; // f || object returns varObject\n```\n\n**Note:** If you use this operator to provide a default value to some variable, be aware that any _falsy_ value will not be used. If you only need to filter out [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), consider using [the nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing).\n\n### [Conversion rules for booleans](#conversion_rules_for_booleans)\n\n#### Converting AND to OR\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 && bCondition2\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2)\n```\n\n#### Converting OR to AND\n\nThe following operation involving **booleans**:\n\n```\nbCondition1 || bCondition2\n```\n\nis always equal to:\n\n```\n!(!bCondition1 && !bCondition2)\n```\n\n### [Removing nested parentheses](#removing_nested_parentheses)\n\nAs logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression following some rules.\n\nThe following composite operation involving **booleans**:\n\n```\nbCondition1 && (bCondition2 || bCondition3)\n```\n\nis always equal to:\n\n```\n!(!bCondition1 || !bCondition2 && !bCondition3)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-LogicalORExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-LogicalORExpression) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Logical OR (||) - JavaScript | MDN",
    "description": "The logical OR (||) (logical disjunction) operator for a set of operands\n  is true if and only if one or more of its operands is true. It is typically used with\n  boolean (logical) values. When it is, it returns a Boolean value. However,\n  the || operator actually returns the value of one of the specified\n  operands, so if this operator is used with non-Boolean values, it will return a\n  non-Boolean value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
    "markdown": "# Logical NOT (!) - JavaScript\n\nThe **logical NOT (`!`)** (logical complement, negation) operator takes truth to falsity and vice versa. It is typically used with boolean (logical) values. When used with non-Boolean values, it returns `false` if its single operand can be converted to `true`; otherwise, returns `true`.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nReturns `false` if its single operand can be converted to `true`; otherwise, returns `true`.\n\nIf a value can be converted to `true`, the value is so-called [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). If a value can be converted to `false`, the value is so-called [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nExamples of expressions that can be converted to false are:\n\n*   `null`;\n*   `NaN`;\n*   `0`;\n*   empty string (`\"\"` or `''` or ` `` `);\n*   `undefined`.\n\nEven though the `!` operator can be used with operands that are not Boolean values, it can still be considered a boolean operator since its return value can always be converted to a [boolean primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type). To explicitly convert its return value (or any expression in general) to the corresponding boolean value, use a double NOT operator (`!!`) or the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) constructor.\n\n## [Examples](#examples)\n\n### [Using NOT](#using_not)\n\nThe following code shows examples of the `!` (logical NOT) operator.\n\n```\n!true; // !t returns false\n!false; // !f returns true\n!\"\"; // !f returns true\n!\"Cat\"; // !t returns false\n```\n\n### [Double NOT (`!!`)](#double_not_!!)\n\nIt is possible to use a couple of NOT operators in series to explicitly force the conversion of any value to the corresponding [boolean primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type). The conversion is based on the \"truthyness\" or \"falsyness\" of the value (see [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)).\n\nThe same conversion can be done through the [`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) function.\n\n```\n!!true; // !!truthy returns true\n!!{}; // !!truthy returns true: any object is truthy...\n!!new Boolean(false); // ...even Boolean objects with a false .valueOf()!\n!!false; // !!falsy returns false\n!!\"\"; // !!falsy returns false\n!!Boolean(false); // !!falsy returns false\n```\n\n### [Converting between NOTs](#converting_between_nots)\n\nThe following operation involving **booleans**:\n\nis always equal to:\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-logical-not-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-logical-not-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Logical NOT (!) - JavaScript | MDN",
    "description": "The logical NOT (!) (logical complement, negation) operator takes truth to\n  falsity and vice versa. It is typically used with boolean (logical)\n  values. When used with non-Boolean values, it returns false if its single\n  operand can be converted to true; otherwise, returns true.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment",
    "markdown": "# Logical OR assignment (||=) - JavaScript\n\nThe **logical OR assignment (`||=`)** operator only evaluates the right operand and assigns to the left if the left operand is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nLogical OR assignment [_short-circuits_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#short-circuiting), meaning that `x ||= y` is equivalent to `x || (x = y)`, except that the expression `x` is only evaluated once.\n\nNo assignment is performed if the left-hand side is not falsy, due to short-circuiting of the [logical OR](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR) operator. For example, the following does not throw an error, despite `x` being `const`:\n\nNeither would the following trigger the setter:\n\n```\nconst x = {\n  get value() {\n    return 1;\n  },\n  set value(v) {\n    console.log(\"Setter called\");\n  },\n};\n\nx.value ||= 2;\n```\n\nIn fact, if `x` is not falsy, `y` is not evaluated at all.\n\n```\nconst x = 1;\nx ||= console.log(\"y evaluated\");\n// Logs nothing\n```\n\n## [Examples](#examples)\n\n### [Setting default content](#setting_default_content)\n\nIf the \"lyrics\" element is empty, display a default value:\n\n```\ndocument.getElementById(\"lyrics\").textContent ||= \"No lyrics.\";\n```\n\nHere the short-circuit is especially beneficial, since the element will not be updated unnecessarily and won't cause unwanted side-effects such as additional parsing or rendering work, or loss of focus, etc.\n\nNote: Pay attention to the value returned by the API you're checking against. If an empty string is returned (a [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value), `||=` must be used, so that \"No lyrics.\" is displayed instead of a blank space. However, if the API returns [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) in case of blank content, [`??=`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment) should be used instead.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Logical OR assignment (||=) - JavaScript | MDN",
    "description": "The logical OR assignment (||=) operator only evaluates the right operand and assigns to the left if the left operand is falsy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication",
    "markdown": "# Multiplication (\\*) - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **multiplication (`*`)** operator produces the product of the operands.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe `*` operator is overloaded for two types of operands: number and [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt). It first [coerces both operands to numeric values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and tests the types of them. It performs BigInt multiplication if both operands become BigInts; otherwise, it performs number multiplication. A [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown if one operand becomes a BigInt but the other becomes a number.\n\n## [Examples](#examples)\n\n### [Multiplication using numbers](#multiplication_using_numbers)\n\n```\n2 * 2; // 4\n-2 * 2; // -4\n\nInfinity * 0; // NaN\nInfinity * Infinity; // Infinity\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\n\"foo\" * 2; // NaN\n\"2\" * 2; // 4\n```\n\n### [Multiplication using BigInts](#multiplication_using_bigints)\n\n```\n2n * 2n; // 4n\n-2n * 2n; // -4n\n```\n\nYou cannot mix BigInt and number operands in multiplication.\n\n```\n2n * 2; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n2 * 2n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\nTo do multiplication with a BigInt and a non-BigInt, convert either operand:\n\n```\n2n * BigInt(2); // 4n\nNumber(2n) * 2; // 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-multiplicative-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-multiplicative-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Multiplication (*) - JavaScript | MDN",
    "description": "The multiplication (*) operator produces the product of the operands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null",
    "markdown": "# null - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`null`** value represents the intentional absence of any object value. It is one of JavaScript's [primitive values](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) and is treated as [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) for boolean operations.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe value `null` is written with a literal: `null`. `null` is not an identifier for a property of the global object, like [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) can be. Instead, `null` expresses a lack of identification, indicating that a variable points to no object. In APIs, `null` is often retrieved in a place where an object can be expected but no object is relevant.\n\n```\n// foo does not exist. It is not defined and has never been initialized:\nfoo; //ReferenceError: foo is not defined\n```\n\n```\n// foo is known to exist now but it has no type or value:\nconst foo = null;\nfoo; //null\n```\n\n## [Examples](#examples)\n\n### [Difference between `null` and `undefined`](#difference_between_null_and_undefined)\n\nWhen checking for `null` or `undefined`, beware of the [differences between equality (==) and identity (===) operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators), as the former performs type-conversion.\n\n```\ntypeof null; // \"object\" (not \"null\" for legacy reasons)\ntypeof undefined; // \"undefined\"\nnull === undefined; // false\nnull == undefined; // true\nnull === null; // true\nnull == null; // true\n!null; // true\nNumber.isNaN(1 + null); // false\nNumber.isNaN(1 + undefined); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-null-value](https://tc39.es/ecma262/multipage/overview.html#sec-null-value) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "null - JavaScript | MDN",
    "description": "The null value represents the intentional absence of any object value. It\n  is one of JavaScript's primitive values and\n  is treated as falsy for boolean operations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
    "markdown": "# new - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`new`** operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nnew constructor\nnew constructor()\nnew constructor(arg1)\nnew constructor(arg1, arg2)\nnew constructor(arg1, arg2, /* …, */ argN)\n```\n\n### [Parameters](#parameters)\n\n[`constructor`](#constructor)\n\nA class or function that specifies the type of the object instance. The expression can be anything with sufficient [precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table), including an identifier, a [property access](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), or another `new` expression, but [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) is not allowed.\n\n[`arg1`](#arg1), `arg2`, …, `argN`\n\nA list of values that the `constructor` will be called with. `new Foo` is equivalent to `new Foo()`, i.e. if no argument list is specified, `Foo` is called without arguments.\n\n## [Description](#description)\n\nWhen a function is called with the **`new`** keyword, the function will be used as a constructor. `new` will do the following things:\n\n1.  Creates a blank, plain JavaScript object. For convenience, let's call it `newInstance`.\n2.  Points `newInstance`'s \\[\\[Prototype\\]\\] to the constructor function's `prototype` property, if the `prototype` is an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). Otherwise, `newInstance` stays as a plain object with `Object.prototype` as its \\[\\[Prototype\\]\\].\n    \n    **Note:** Properties/objects added to the constructor function's `prototype` property are therefore accessible to all instances created from the constructor function.\n    \n3.  Executes the constructor function with the given arguments, binding `newInstance` as the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) context (i.e. all references to `this` in the constructor function now refer to `newInstance`).\n4.  If the constructor function returns a [non-primitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values), this return value becomes the result of the whole `new` expression. Otherwise, if the constructor function doesn't return anything or returns a primitive, `newInstance` is returned instead. (Normally constructors don't return a value, but they can choose to do so to override the normal object creation process.)\n\n[Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) can only be instantiated with the `new` operator — attempting to call a class without `new` will throw a `TypeError`.\n\nCreating an object with a user-defined constructor function requires two steps:\n\n1.  Define the object type by writing a function that specifies its name and properties. For example, a constructor function to create an object `Foo` might look like this:\n    \n    ```\n    function Foo(bar1, bar2) {\n      this.bar1 = bar1;\n      this.bar2 = bar2;\n    }\n    ```\n    \n2.  Create an instance of the object with `new`.\n    \n    ```\n    const myFoo = new Foo(\"Bar 1\", 2021);\n    ```\n    \n\n**Note:** An object can have a property that is itself another object. See the examples below.\n\nYou can always add a property to a previously defined object instance. For example, the statement `car1.color = \"black\"` adds a property `color` to `car1`, and assigns it a value of `\"black\"`.\n\nHowever, this does not affect any other objects. To add the new property to all objects of the same type, you must add the property to the constructor's `prototype` property. This defines a property that is shared by all objects created with that function, rather than by just one instance of the object type. The following code adds a `color` property with value `\"original color\"` to all objects of type `Car`, and then overwrites that value with the string `\"black\"` only in the instance object `car1`. For more information, see [prototype](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes).\n\n```\nfunction Car() {}\nconst car1 = new Car();\nconst car2 = new Car();\n\nconsole.log(car1.color); // undefined\n\nCar.prototype.color = \"original color\";\nconsole.log(car1.color); // 'original color'\n\ncar1.color = \"black\";\nconsole.log(car1.color); // 'black'\n\nconsole.log(Object.getPrototypeOf(car1).color); // 'original color'\nconsole.log(Object.getPrototypeOf(car2).color); // 'original color'\nconsole.log(car1.color); // 'black'\nconsole.log(car2.color); // 'original color'\n```\n\n**Note:** While the constructor function can be invoked like any regular function (i.e. without the `new` operator), in this case a new object is not created and the value of `this` is also different.\n\nA function can know whether it is invoked with `new` by checking [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target). `new.target` is only `undefined` when the function is invoked without `new`. For example, you can have a function that behaves differently when it's called versus when it's constructed:\n\n```\nfunction Car(color) {\n  if (!new.target) {\n    // Called as function.\n    return `${color} car`;\n  }\n  // Called with new.\n  this.color = color;\n}\n\nconst a = Car(\"red\"); // a is \"red car\"\nconst b = new Car(\"red\"); // b is `Car { color: \"red\" }`\n```\n\nPrior to ES6, which introduced [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), most JavaScript built-ins are both callable and constructible, although many of them exhibit different behaviors. To name a few:\n\n*   [`Array()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array), [`Error()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error), and [`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) behave the same when called as a function or a constructor.\n*   [`Boolean()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean), [`Number()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number), and [`String()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) coerce their argument to the respective primitive type when called, and return wrapper objects when constructed.\n*   [`Date()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) returns a string representing the current date when called, equivalent to `new Date().toString()`.\n\nAfter ES6, the language is stricter about which are constructors and which are functions. For example:\n\n*   [`Symbol()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) and [`BigInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) can only be called without `new`. Attempting to construct them will throw a `TypeError`.\n*   [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) and [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) can only be constructed with `new`. Attempting to call them will throw a `TypeError`.\n\n## [Examples](#examples)\n\n### [Object type and object instance](#object_type_and_object_instance)\n\nSuppose you want to create an object type for cars. You want this type of object to be called `Car`, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\n```\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\nNow you can create an object called `myCar` as follows:\n\n```\nconst myCar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n```\n\nThis statement creates `myCar` and assigns it the specified values for its properties. Then the value of `myCar.make` is the string \"Eagle\", `myCar.year` is the integer 1993, and so on.\n\nYou can create any number of `car` objects by calls to `new`. For example:\n\n```\nconst kensCar = new Car(\"Nissan\", \"300ZX\", 1992);\n```\n\n### [Object property that is itself another object](#object_property_that_is_itself_another_object)\n\nSuppose you define an object called `Person` as follows:\n\n```\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\n```\n\nAnd then instantiate two new `Person` objects as follows:\n\n```\nconst rand = new Person(\"Rand McNally\", 33, \"M\");\nconst ken = new Person(\"Ken Jones\", 39, \"M\");\n```\n\nThen you can rewrite the definition of `Car` to include an `owner` property that takes a `Person` object, as follows:\n\n```\nfunction Car(make, model, year, owner) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n  this.owner = owner;\n}\n```\n\nTo instantiate the new objects, you then use the following:\n\n```\nconst car1 = new Car(\"Eagle\", \"Talon TSi\", 1993, rand);\nconst car2 = new Car(\"Nissan\", \"300ZX\", 1992, ken);\n```\n\nInstead of passing a literal string or integer value when creating the new objects, the above statements pass the objects `rand` and `ken` as the parameters for the owners. To find out the name of the owner of `car2`, you can access the following property:\n\n### [Using `new` with classes](#using_new_with_classes)\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst p = new Person(\"Caroline\");\np.greet(); // Hello, my name is Caroline\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-new-operator](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-new-operator) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "new - JavaScript | MDN",
    "description": "The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
    "markdown": "# new.target - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`new.target`** meta-property lets you detect whether a function or constructor was called using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. In constructors and functions invoked using the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator, `new.target` returns a reference to the constructor or function that `new` was called upon. In normal function calls, `new.target` is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n### [Value](#value)\n\n`new.target` is guaranteed to be a constructable function value or `undefined`.\n\n*   In class constructors, it refers to the class that `new` was called upon, which may be a subclass of the current constructor, because subclasses transitively call the superclass's constructor through [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super).\n*   In ordinary functions, if the function is constructed directly with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new), `new.target` refers to the function itself. If the function is called without `new`, `new.target` is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). Functions can be used as the base class for [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends), in which case `new.target` may refer to the subclass.\n*   If a constructor (class or function) is called via [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct), then `new.target` refers to the value passed as `newTarget` (which defaults to `target`).\n*   In [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), `new.target` is inherited from the surrounding scope. If the arrow function is not defined within another class or function which has a `new.target` [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding), then a syntax error is thrown.\n*   In [static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), `new.target` is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n## [Description](#description)\n\nThe `new.target` syntax consists of the keyword `new`, a dot, and the identifier `target`. Because `new` is a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words), not an identifier, this is not a [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), but a special expression syntax.\n\nThe `new.target` meta-property is available in all function/class bodies; using `new.target` outside of functions or classes is a syntax error.\n\n## [Examples](#examples)\n\n### [new.target in function calls](#new.target_in_function_calls)\n\nIn normal function calls (as opposed to constructor function calls), `new.target` is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). This lets you detect whether a function was called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) as a constructor.\n\n```\nfunction Foo() {\n  if (!new.target) {\n    throw new Error(\"Foo() must be called with new\");\n  }\n  console.log(\"Foo instantiated with new\");\n}\n\nnew Foo(); // Logs \"Foo instantiated with new\"\nFoo(); // Throws \"Foo() must be called with new\"\n```\n\n### [new.target in constructors](#new.target_in_constructors)\n\nIn class constructors, `new.target` refers to the constructor that was directly invoked by `new`. This is also the case if the constructor is in a parent class and was delegated from a child constructor. `new.target` points to the class that `new` was called upon. For example, when `b` was initialized using `new B()`, the name of `B` was printed; and similarly, in case of `a`, the name of class `A` was printed.\n\n```\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\nconst a = new A(); // Logs \"A\"\nconst b = new B(); // Logs \"B\"\n```\n\n### [new.target using Reflect.construct()](#new.target_using_reflect.construct)\n\nBefore [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct) or classes, it was common to implement inheritance by passing the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), and letting the base constructor mutate it.\n\n```\nfunction Base() {\n  this.name = \"Base\";\n}\n\nfunction Extended() {\n  // Only way to make the Base() constructor work on the existing\n  // `this` value instead of a new object that `new` creates.\n  Base.call(this);\n  this.otherProperty = \"Extended\";\n}\n\nObject.setPrototypeOf(Extended.prototype, Base.prototype);\nObject.setPrototypeOf(Extended, Base);\n\nconsole.log(new Extended()); // Extended { name: 'Base', otherProperty: 'Extended' }\n```\n\nHowever, [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) and [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) actually _call_ the function instead of _constructing_ it, so `new.target` has value `undefined`. This means that if `Base()` checks whether it's constructed with `new`, an error will be thrown, or it may behave in other unexpected ways. For example, you can't extend [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) this way, because the `Map()` constructor cannot be called without `new`.\n\nAll built-in constructors directly construct the entire prototype chain of the new instance by reading `new.target.prototype`. So to make sure that (1) `Base` is constructed with `new`, and (2) `new.target` points to the subclass instead of `Base` itself, we need to use [`Reflect.construct()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct).\n\n```\nfunction BetterMap(entries) {\n  // Call the base class constructor, but setting `new.target` to the subclass,\n  // so that the instance created has the correct prototype chain.\n  return Reflect.construct(Map, [entries], BetterMap);\n}\n\nBetterMap.prototype.upsert = function (key, actions) {\n  if (this.has(key)) {\n    this.set(key, actions.update(this.get(key)));\n  } else {\n    this.set(key, actions.insert());\n  }\n};\n\nObject.setPrototypeOf(BetterMap.prototype, Map.prototype);\nObject.setPrototypeOf(BetterMap, Map);\n\nconst map = new BetterMap([[\"a\", 1]]);\nmap.upsert(\"a\", {\n  update: (value) => value + 1,\n  insert: () => 1,\n});\nconsole.log(map.get(\"a\")); // 2\n```\n\n**Note:** In fact, due to the lack of `Reflect.construct()`, it is not possible to properly subclass built-ins (like [`Error` subclassing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types)) when transpiling to pre-ES6 code.\n\nHowever, if you are writing ES6 code, prefer using classes and `extends` instead, as it's more readable and less error-prone.\n\n```\nclass BetterMap extends Map {\n  // The constructor is omitted because it's just the default one\n\n  upsert(key, actions) {\n    if (this.has(key)) {\n      this.set(key, actions.update(this.get(key)));\n    } else {\n      this.set(key, actions.insert());\n    }\n  }\n}\n\nconst map = new BetterMap([[\"a\", 1]]);\nmap.upsert(\"a\", {\n  update: (value) => value + 1,\n  insert: () => 1,\n});\nconsole.log(map.get(\"a\")); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-built-in-function-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-built-in-function-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "new.target - JavaScript | MDN",
    "description": "The new.target meta-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function that new was called upon. In normal function calls, new.target is undefined.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment",
    "markdown": "# Multiplication assignment (\\*=) - JavaScript\n\nThe **multiplication assignment (`*=`)** operator performs [multiplication](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication) on the two operands and assigns the result to the left operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`x *= y` is equivalent to `x = x * y`, except that the expression `x` is only evaluated once.\n\n## [Examples](#examples)\n\n### [Multiplication assignment using numbers](#multiplication_assignment_using_numbers)\n\n```\nlet bar = 5;\nbar *= 2; // 10\n```\n\nOther non-BigInt values are coerced to numbers:\n\n```\nlet bar = 5;\nbar *= \"foo\"; // NaN\n```\n\n### [Multiplication assignment using BigInts](#multiplication_assignment_using_bigints)\n\n```\nlet foo = 3n;\nfoo *= 2n; // 6n\nfoo *= 1; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Multiplication assignment (*=) - JavaScript | MDN",
    "description": "The multiplication assignment (*=) operator performs multiplication on the two operands and assigns the result to the left operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
    "markdown": "# Nullish coalescing operator (??) - JavaScript\n\nThe **nullish coalescing (`??`)** operator is a logical operator that returns its right-hand side operand when its left-hand side operand is [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), and otherwise returns its left-hand side operand.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe nullish coalescing operator can be seen as a special case of the [logical OR (`||`) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR). The latter returns the right-hand side operand if the left operand is _any_ [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value, not only `null` or `undefined`. In other words, if you use `||` to provide some default value to another variable `foo`, you may encounter unexpected behaviors if you consider some falsy values as usable (e.g., `''` or `0`). See [below](#assigning_a_default_value_to_a_variable) for more examples.\n\nThe nullish coalescing operator has the fifth-lowest [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence), directly lower than `||` and directly higher than the [conditional (ternary) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator).\n\nIt is not possible to combine both the AND (`&&`) and OR operators (`||`) directly with `??`. A [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized) will be thrown in such cases.\n\n```\nnull || undefined ?? \"foo\"; // raises a SyntaxError\ntrue && undefined ?? \"foo\"; // raises a SyntaxError\n```\n\nInstead, provide parenthesis to explicitly indicate precedence:\n\n```\n(null || undefined) ?? \"foo\"; // returns \"foo\"\n```\n\n## [Examples](#examples)\n\n### [Using the nullish coalescing operator](#using_the_nullish_coalescing_operator)\n\nIn this example, we will provide default values but keep values other than `null` or `undefined`.\n\n```\nconst nullValue = null;\nconst emptyText = \"\"; // falsy\nconst someNumber = 42;\n\nconst valA = nullValue ?? \"default for A\";\nconst valB = emptyText ?? \"default for B\";\nconst valC = someNumber ?? 0;\n\nconsole.log(valA); // \"default for A\"\nconsole.log(valB); // \"\" (as the empty string is not null or undefined)\nconsole.log(valC); // 42\n```\n\n### [Assigning a default value to a variable](#assigning_a_default_value_to_a_variable)\n\nEarlier, when one wanted to assign a default value to a variable, a common pattern was to use the logical OR operator ([`||`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR)):\n\n```\nlet foo;\n\n// foo is never assigned any value so it is still undefined\nconst someDummyText = foo || \"Hello!\";\n```\n\nHowever, due to `||` being a boolean logical operator, the left-hand-side operand was coerced to a boolean for the evaluation and any _falsy_ value (including `0`, `''`, `NaN`, `false`, etc.) was not returned. This behavior may cause unexpected consequences if you consider `0`, `''`, or `NaN` as valid values.\n\n```\nconst count = 0;\nconst text = \"\";\n\nconst qty = count || 42;\nconst message = text || \"hi!\";\nconsole.log(qty); // 42 and not 0\nconsole.log(message); // \"hi!\" and not \"\"\n```\n\nThe nullish coalescing operator avoids this pitfall by only returning the second operand when the first one evaluates to either `null` or `undefined` (but no other falsy values):\n\n```\nconst myText = \"\"; // An empty string (which is also a falsy value)\n\nconst notFalsyText = myText || \"Hello world\";\nconsole.log(notFalsyText); // Hello world\n\nconst preservingFalsy = myText ?? \"Hi neighborhood\";\nconsole.log(preservingFalsy); // '' (as myText is neither undefined nor null)\n```\n\n### [Short-circuiting](#short-circuiting)\n\nLike the OR and AND logical operators, the right-hand side expression is not evaluated if the left-hand side proves to be neither `null` nor `undefined`.\n\n```\nfunction a() {\n  console.log(\"a was called\");\n  return undefined;\n}\nfunction b() {\n  console.log(\"b was called\");\n  return false;\n}\nfunction c() {\n  console.log(\"c was called\");\n  return \"foo\";\n}\n\nconsole.log(a() ?? c());\n// Logs \"a was called\" then \"c was called\" and then \"foo\"\n// as a() returned undefined so both expressions are evaluated\n\nconsole.log(b() ?? c());\n// Logs \"b was called\" then \"false\"\n// as b() returned false (and not null or undefined), the right\n// hand side expression was not evaluated\n```\n\n### [Relationship with the optional chaining operator (?.)](#relationship_with_the_optional_chaining_operator)\n\nThe nullish coalescing operator treats `undefined` and `null` as specific values. So does the [optional chaining operator (`?.`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining), which is useful to access a property of an object which may be `null` or `undefined`. Combining them, you can safely access a property of an object which may be nullish and provide a default value if it is.\n\n```\nconst foo = { someFooProp: \"hi\" };\n\nconsole.log(foo.someFooProp?.toUpperCase() ?? \"not available\"); // \"HI\"\nconsole.log(foo.someBarProp?.toUpperCase() ?? \"not available\"); // \"not available\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-CoalesceExpression](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-CoalesceExpression) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Nullish coalescing operator (??) - JavaScript | MDN",
    "description": "The nullish coalescing (??) operator is a logical\n  operator that returns its right-hand side operand when its left-hand side operand is\n  null or undefined, and otherwise returns its left-hand side\n  operand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*",
    "markdown": "# async function\\* - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`async function*`** declaration creates a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) of a new async generator function to a given name.\n\nYou can also define async generator functions using the [`async function*` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nasync function* name(param0) {\n  statements\n}\nasync function* name(param0, param1) {\n  statements\n}\nasync function* name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** Async generator functions do not have arrow function counterparts.\n\n**Note:** `function` and `*` are separate tokens, so they can be separated by [whitespace or line terminators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space). However, there cannot be a line terminator between `async` and `function`, otherwise a semicolon is [automatically inserted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion), causing `async` to become an identifier and the rest to become a `function*` declaration.\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nThe function name.\n\n[`param`](#param) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements comprising the body of the function.\n\n## [Description](#description)\n\nAn `async function*` declaration creates an [`AsyncGeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction) object. Each time when an async generator function is called, it returns a new [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) object, which conforms to the [async iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols). Every call to `next()` returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves to the iterator result object.\n\nAn async generator function combines the features of [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*). You can use both the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) and [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) keywords within the function body. This empowers you to handle asynchronous tasks ergonomically with `await`, while leveraging the lazy nature of generator functions.\n\nWhen a promise is yielded from an async generator, the iterator result promise's eventual state will match that of the yielded promise. For example:\n\n```\nasync function* foo() {\n  yield Promise.reject(1);\n}\n\nfoo()\n  .next()\n  .catch((e) => console.error(e));\n```\n\n`1` will be logged, because if the yielded promise rejects, the iterator result will reject as well. The `value` property of an async generator's resolved result will not be another promise.\n\n`async function*` declarations behave similar to [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) declarations — they are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) to the top of their scope and can be called anywhere in their scope, and they can be redeclared only in certain contexts.\n\n## [Examples](#examples)\n\n### [Declaring an async generator function](#declaring_an_async_generator_function)\n\nAsync generator functions always produce promises of results — even when each `yield` step is synchronous.\n\n```\nasync function* myGenerator(step) {\n  await new Promise((resolve) => setTimeout(resolve, 10));\n  yield 0;\n  yield step;\n  yield step * 2;\n}\n\nconst gen = myGenerator(2);\ngen\n  .next()\n  .then((res) => {\n    console.log(res); // { value: 0, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: 2, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: 4, done: false }\n    return gen.next();\n  })\n  .then((res) => {\n    console.log(res); // { value: undefined, done: true }\n    return gen.next();\n  });\n```\n\n### [Using an async generator function to read a series of files](#using_an_async_generator_function_to_read_a_series_of_files)\n\nIn this example, we read a series of files and only access its content when requested, using Node's [`fs/promises`](https://nodejs.org/dist/latest-v18.x/docs/api/fs.html) module.\n\n```\nasync function* readFiles(directory) {\n  const files = await fs.readdir(directory);\n  for (const file of files) {\n    const stats = await fs.stat(file);\n    if (stats.isFile()) {\n      yield {\n        name: file,\n        content: await fs.readFile(file, \"utf8\"),\n      };\n    }\n  }\n}\n\nconst files = readFiles(\".\");\nconsole.log((await files.next()).value);\n// Possible output: { name: 'file1.txt', content: '...' }\nconsole.log((await files.next()).value);\n// Possible output: { name: 'file2.txt', content: '...' }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-async-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-generator-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "async function* - JavaScript | MDN",
    "description": "The async function* declaration creates a binding of a new async generator function to a given name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
    "markdown": "# var - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`var`** statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nvar name1;\nvar name1 = value1;\nvar name1 = value1, name2 = value2;\nvar name1, name2 = value2;\nvar name1 = value1, name2, /* …, */ nameN = valueN;\n```\n\n[`nameN`](#namen)\n\nThe name of the variable to declare. Each must be a legal JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) or a [destructuring binding pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n[`valueN`](#valuen) Optional\n\nInitial value of the variable. It can be any legal expression. Default value is `undefined`.\n\n## [Description](#description)\n\nThe scope of a variable declared with `var` is one of the following curly-brace-enclosed syntaxes that most closely contains the `var` statement:\n\n*   Function body\n*   [Static initialization block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks)\n\nOr if none of the above applies:\n\n*   The current [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), for code running in module mode\n*   The global scope, for code running in script mode.\n\n```\nfunction foo() {\n  var x = 1;\n  function bar() {\n    var y = 2;\n    console.log(x); // 1 (function `bar` closes over `x`)\n    console.log(y); // 2 (`y` is in scope)\n  }\n  bar();\n  console.log(x); // 1 (`x` is in scope)\n  console.log(y); // ReferenceError, `y` is scoped to `bar`\n}\n\nfoo();\n```\n\nImportantly, other block constructs, including [block statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block), [`try...catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), headers of [one of the `for` statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#iterations), do not create scopes for `var`, and variables declared with `var` inside such a block can continue to be referenced outside the block.\n\n```\nfor (var a of [1, 2, 3]);\nconsole.log(a); // 3\n```\n\nIn a script, a variable declared using `var` is added as a non-configurable property of the global object. This means its property descriptor cannot be changed and it cannot be deleted using [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete). JavaScript has automatic memory management, and it would make no sense to be able to use the `delete` operator on a global variable.\n\n```\n\"use strict\";\nvar x = 1;\nObject.hasOwn(globalThis, \"x\"); // true\ndelete globalThis.x; // TypeError in strict mode. Fails silently otherwise.\ndelete x; // SyntaxError in strict mode. Fails silently otherwise.\n```\n\nIn both NodeJS [CommonJS](https://www.commonjs.org/) modules and native [ECMAScript modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules), top-level variable declarations are scoped to the module, and are not added as properties to the global object.\n\nThe list that follows the `var` keyword is called a _[binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) list_ and is separated by commas, where the commas are _not_ [comma operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) and the `=` signs are _not_ [assignment operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment). Initializers of later variables can refer to earlier variables in the list and get the initialized value.\n\n### [Hoisting](#hoisting)\n\n`var` declarations, wherever they occur in a script, are processed before any code within the script is executed. Declaring a variable anywhere in the code is equivalent to declaring it at the top. This also means that a variable can appear to be used before it's declared. This behavior is called [_hoisting_](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting), as it appears that the variable declaration is moved to the top of the function, static initialization block, or script source in which it occurs.\n\n**Note:** `var` declarations are only hoisted to the top of the current script. If you have two `<script>` elements within one HTML, the first script cannot access variables declared by the second before the second script has been processed and executed.\n\nThis is implicitly understood as:\n\nFor that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are scoped to the current function.\n\nOnly a variable's declaration is hoisted, not its initialization. The initialization happens only when the assignment statement is reached. Until then the variable remains `undefined` (but declared):\n\n```\nfunction doSomething() {\n  console.log(bar); // undefined\n  var bar = 111;\n  console.log(bar); // 111\n}\n```\n\nThis is implicitly understood as:\n\n```\nfunction doSomething() {\n  var bar;\n  console.log(bar); // undefined\n  bar = 111;\n  console.log(bar); // 111\n}\n```\n\n### [Redeclarations](#redeclarations)\n\nDuplicate variable declarations using `var` will not trigger an error, even in strict mode, and the variable will not lose its value, unless the declaration has an initializer.\n\n```\nvar a = 1;\nvar a = 2;\nconsole.log(a); // 2\nvar a;\nconsole.log(a); // 2; not undefined\n```\n\n`var` declarations can also be in the same scope as a `function` declaration. In this case, the `var` declaration's initializer always overrides the function's value, regardless of their relative position. This is because function declarations are hoisted before any initializer gets evaluated, so the initializer comes later and overrides the value.\n\n```\nvar a = 1;\nfunction a() {}\nconsole.log(a); // 1\n```\n\n`var` declarations cannot be in the same scope as a [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), or [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declaration.\n\n```\nvar a = 1;\nlet a = 2; // SyntaxError: Identifier 'a' has already been declared\n```\n\nBecause `var` declarations are not scoped to blocks, this also applies to the following case:\n\n```\nlet a = 1;\n{\n  var a = 1; // SyntaxError: Identifier 'a' has already been declared\n}\n```\n\nIt does not apply to the following case, where `let` is in a child scope of `var`, not the same scope:\n\n```\nvar a = 1;\n{\n  let a = 2;\n}\n```\n\nA `var` declaration within a function's body can have the same name as a parameter.\n\n```\nfunction foo(a) {\n  var a = 1;\n  console.log(a);\n}\n\nfoo(2); // Logs 1\n```\n\nA `var` declaration within a `catch` block can have the same name as the `catch`\\-bound identifier, but only if the `catch` binding is a simple identifier, not a destructuring pattern. This is a [deprecated syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#statements) and you should not rely on it. In this case, the declaration is hoisted to outside the `catch` block, but any value assigned within the `catch` block is not visible outside.\n\n```\ntry {\n  throw 1;\n} catch (e) {\n  var e = 2; // Works\n}\nconsole.log(e); // undefined\n```\n\n## [Examples](#examples)\n\n### [Declaring and initializing two variables](#declaring_and_initializing_two_variables)\n\n### [Assigning two variables with single string value](#assigning_two_variables_with_single_string_value)\n\nThis is equivalent to:\n\nBe mindful of the order:\n\n```\nvar x = y,\n  y = \"A\";\nconsole.log(x, y); // undefined A\n```\n\nHere, `x` and `y` are declared before any code is executed, but the assignments occur later. At the time `x = y` is evaluated, `y` exists so no `ReferenceError` is thrown and its value is `undefined`. So, `x` is assigned the undefined value. Then, `y` is assigned the value `\"A\"`.\n\n### [Initialization of several variables](#initialization_of_several_variables)\n\nBe careful of the `var x = y = 1` syntax — `y` is not actually declared as a variable, so `y = 1` is an [unqualified identifier assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment#unqualified_identifier_assignment), which creates a global variable in non-strict mode.\n\n```\nvar x = 0;\nfunction f() {\n  var x = y = 1; // Declares x locally; declares y globally.\n}\nf();\n\nconsole.log(x, y); // 0 1\n\n// In non-strict mode:\n// x is the global one as expected;\n// y is leaked outside of the function, though!\n```\n\nThe same example as above but with a strict mode:\n\n```\n\"use strict\";\n\nvar x = 0;\nfunction f() {\n  var x = y = 1; // ReferenceError: y is not defined\n}\nf();\n\nconsole.log(x, y);\n```\n\n### [Implicit globals and outer function scope](#implicit_globals_and_outer_function_scope)\n\nVariables that appear to be implicit globals may be references to variables in an outer function scope:\n\n```\nvar x = 0; // Declares x within file scope, then assigns it a value of 0.\n\nconsole.log(typeof z); // \"undefined\", since z doesn't exist yet\n\nfunction a() {\n  var y = 2; // Declares y within scope of function a, then assigns it a value of 2.\n\n  console.log(x, y); // 0 2\n\n  function b() {\n    x = 3; // Assigns 3 to existing file scoped x.\n    y = 4; // Assigns 4 to existing outer y.\n    z = 5; // Creates a new global variable z, and assigns it a value of 5.\n    // (Throws a ReferenceError in strict mode.)\n  }\n\n  b(); // Creates z as a global variable.\n  console.log(x, y, z); // 3 4 5\n}\n\na(); // Also calls b.\nconsole.log(x, z); // 3 5\nconsole.log(typeof y); // \"undefined\", as y is local to function a\n```\n\n### [Declaration with destructuring](#declaration_with_destructuring)\n\nThe left-hand side of each `=` can also be a binding pattern. This allows creating multiple variables at once.\n\n```\nconst result = /(a+)(b+)(c+)/.exec(\"aaabcc\");\nvar [, a, b, c] = result;\nconsole.log(a, b, c); // \"aaa\" \"b\" \"cc\"\n```\n\nFor more information, see [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-variable-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-variable-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "var - JavaScript | MDN",
    "description": "The var statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block",
    "markdown": "# Block statement - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nA **block statement** is used to group zero or more statements. The block is delimited by a pair of braces (\"curly braces\") and contains a list of zero or more statements and declarations.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n[`StatementList`](#statementlist)\n\nStatements and declarations grouped within the block statement.\n\n## [Description](#description)\n\nThe block statement is often called the _compound statement_ in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript, especially when used in association with control flow statements like [`if...else`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) and [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for). The opposite behavior is possible using an [empty statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty), where you provide no statement, although one is required.\n\nIn addition, combined with block-scoped declarations like [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), and [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), blocks can prevent temporary variables from polluting the global namespace, just like [IIFEs](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) do.\n\n### [Block scoping rules with var or function declaration in non-strict mode](#block_scoping_rules_with_var_or_function_declaration_in_non-strict_mode)\n\nVariables declared with `var` or created by [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) in non-strict mode **do not** have block scope. Variables introduced within a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. For example:\n\n```\nvar x = 1;\n{\n  var x = 2;\n}\nconsole.log(x); // 2\n```\n\nThis logs 2 because the `var x` statement within the block is in the same scope as the `var x` statement before the block.\n\nIn non-strict code, function declarations inside blocks behave strangely. Do not use them.\n\n### [Block scoping rules with let, const, class, or function declaration in strict mode](#block_scoping_rules_with_let_const_class_or_function_declaration_in_strict_mode)\n\nBy contrast, identifiers declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), and [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) do have block scope:\n\n```\nlet x = 1;\n{\n  let x = 2;\n}\nconsole.log(x); // 1\n```\n\nThe `x = 2` is limited in scope to the block in which it was defined.\n\nThe same is true of `const`:\n\n```\nconst c = 1;\n{\n  const c = 2;\n}\nconsole.log(c); // 1; does not throw SyntaxError\n```\n\nNote that the block-scoped `const c = 2` _does not_ throw a `SyntaxError: Identifier 'c' has already been declared` because it can be declared uniquely within the block.\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), function declarations inside blocks are scoped to that block and are hoisted to the top of the block.\n\n```\n\"use strict\";\n\n{\n  foo(); // Logs \"foo\"\n  function foo() {\n    console.log(\"foo\");\n  }\n}\n\nfoo(); // ReferenceError: foo is not defined\n```\n\n## [Examples](#examples)\n\n### [Using a block statement as the body of a for loop](#using_a_block_statement_as_the_body_of_a_for_loop)\n\nA [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop accepts a single statement as its body.\n\n```\nfor (let i = 0; i < 10; i++) console.log(i);\n```\n\nIf you want to use more than one statement in the loop body, you can group them into one block statement:\n\n```\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n  console.log(i ** 2);\n}\n```\n\n### [Using a block statement to encapsulate data](#using_a_block_statement_to_encapsulate_data)\n\n`let` and `const` declarations are scoped to the containing block. This allows you to hide data from the global scope without wrapping it in a function.\n\n```\nlet sector;\n{\n  // These variables are scoped to this block and are not\n  // accessible after the block\n  const angle = Math.PI / 3;\n  const radius = 10;\n  sector = {\n    radius,\n    angle,\n    area: (angle / 2) * radius ** 2,\n    perimeter: 2 * radius + angle * radius,\n  };\n}\nconsole.log(sector);\n// {\n//   radius: 10,\n//   angle: 1.0471975511965976,\n//   area: 52.35987755982988,\n//   perimeter: 30.471975511965976\n// }\nconsole.log(typeof radius); // \"undefined\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-block](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-block) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Block statement - JavaScript | MDN",
    "description": "A block statement is used to group zero or more statements. The block is delimited by a pair of braces (\"curly braces\") and contains a list of zero or more statements and declarations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
    "markdown": "# while - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`while`** statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nwhile (condition)\n  statement\n```\n\n[`condition`](#condition)\n\nAn expression evaluated _before_ each pass through the loop. If this condition [evaluates to true](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), `statement` is executed. When condition [evaluates to false](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), execution continues with the statement after the `while` loop.\n\n[`statement`](#statement)\n\nA statement that is executed as long as the condition evaluates to true. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nLike other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and re-evaluates `condition`.\n\n## [Examples](#examples)\n\n### [Using while](#using_while)\n\nThe following `while` loop iterates as long as `n` is less than three.\n\n```\nlet n = 0;\nlet x = 0;\n\nwhile (n < 3) {\n  n++;\n  x += n;\n}\n```\n\nEach iteration, the loop increments `n` and adds it to `x`. Therefore, `x` and `n` take on the following values:\n\n*   After the first pass: `n` = 1 and `x` = 1\n*   After the second pass: `n` = 2 and `x` = 3\n*   After the third pass: `n` = 3 and `x` = 6\n\nAfter completing the third pass, the condition `n` < 3 is no longer true, so the loop terminates.\n\n### [Using an assignment as a condition](#using_an_assignment_as_a_condition)\n\nIn some cases, it can make sense to use an assignment as a condition. This comes with readability tradeoffs, so there are certain stylistic recommendations that would make the pattern more obvious for everyone.\n\nConsider the following example, which iterates over a document's comments, logging them to the console.\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nlet currentNode;\nwhile (currentNode = iterator.nextNode()) {\n  console.log(currentNode.textContent.trim());\n}\n```\n\nThat's not completely a good-practice example, due to the following line specifically:\n\n```\nwhile (currentNode = iterator.nextNode()) {\n```\n\nThe _effect_ of that line is fine — in that, each time a comment node is found:\n\n1.  `iterator.nextNode()` returns that comment node, which gets assigned to `currentNode`.\n2.  The value of `currentNode = iterator.nextNode()` is therefore [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy).\n3.  So the `console.log()` call executes and the loop continues.\n\n…and then, when there are no more comment nodes in the document:\n\n1.  `iterator.nextNode()` returns [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null).\n2.  The value of `currentNode = iterator.nextNode()` is therefore also `null`, which is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n3.  So the loop ends.\n\nThe problem with this line is: conditions typically use [comparison operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#comparison_operators) such as `===`, but the `=` in that line isn't a comparison operator — instead, it's an [assignment operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#assignment_operators). So that `=` _looks like_ it's a typo for `===` — even though it's _not_ actually a typo.\n\nTherefore, in cases like that one, some [code-linting tools](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain#code_linting_tools) such as ESLint's [`no-cond-assign`](https://eslint.org/docs/latest/rules/no-cond-assign) rule — in order to help you catch a possible typo so that you can fix it — will report a warning such as the following:\n\n> Expected a conditional expression and instead saw an assignment.\n\nMany style guides recommend more explicitly indicating the intention for the condition to be an assignment. You can do that minimally by putting additional parentheses as a [grouping operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) around the assignment:\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nlet currentNode;\nwhile ((currentNode = iterator.nextNode())) {\n  console.log(currentNode.textContent.trim());\n}\n```\n\nIn fact, this is the style enforced by ESLint's `no-cond-assign`'s default configuration, as well as [Prettier](https://prettier.io/), so you'll likely see this pattern a lot in the wild.\n\nSome people may further recommend adding a comparison operator to turn the condition into an explicit comparison:\n\n```\nwhile ((currentNode = iterator.nextNode()) !== null) {\n```\n\nThere are other ways to write this pattern, such as:\n\n```\nwhile ((currentNode = iterator.nextNode()) && currentNode) {\n```\n\nOr, forgoing the idea of using a `while` loop altogether:\n\n```\nconst iterator = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT);\nfor (\n  let currentNode = iterator.nextNode();\n  currentNode;\n  currentNode = iterator.nextNode()\n) {\n  console.log(currentNode.textContent.trim());\n}\n```\n\nIf the reader is sufficiently familiar with the assignment as condition pattern, all these variations should have equivalent readability. Otherwise, the last form is probably the most readable, albeit the most verbose.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-while-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-while-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "while - JavaScript | MDN",
    "description": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
    "markdown": "# with - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Deprecated:** This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the [compatibility table](#browser_compatibility) at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.\n\n**Note:** Use of the `with` statement is not recommended, as it may be the source of confusing bugs and compatibility issues, makes optimization impossible, and is forbidden in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). The recommended alternative is to assign the object whose properties you want to access to a temporary variable.\n\nThe **`with`** statement extends the scope chain for a statement.\n\n## [Syntax](#syntax)\n\n```\nwith (expression)\n  statement\n```\n\n[`expression`](#expression)\n\nAdds the given expression to the scope chain used when evaluating the statement. The parentheses around the expression are required.\n\n[`statement`](#statement)\n\nAny statement. To execute multiple statements, use a [block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) statement (`{ ... }`) to group those statements.\n\n## [Description](#description)\n\nThere are two types of identifiers: a _qualified_ identifier and an _unqualified_ identifier. An unqualified identifier is one that does not indicate where it comes from.\n\n```\nfoo; // unqualified identifier\nfoo.bar; // bar is a qualified identifier\n```\n\nNormally, an unqualified identifier is resolved by searching the scope chain for a variable with that name, while a qualified identifier is resolved by searching the prototype chain of an object for a property with that name.\n\n```\nconst foo = { bar: 1 };\nconsole.log(foo.bar);\n// foo is found in the scope chain as a variable;\n// bar is found in foo as a property\n```\n\nOne exception to this is the [global object](https://developer.mozilla.org/en-US/docs/Glossary/Global_object), which sits on top of the scope chain, and whose properties automatically become global variables that can be referred to without qualifiers.\n\n```\nconsole.log(globalThis.Math === Math); // true\n```\n\nThe `with` statement adds the given object to the head of this scope chain during the evaluation of its statement body. Every unqualified name would first be searched within the object (through a [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) check) before searching in the upper scope chain.\n\nNote that if the unqualified reference refers to a method of the object, the method is called with the object as its `this` value.\n\n```\nwith ([1, 2, 3]) {\n  console.log(toString()); // 1,2,3\n}\n```\n\nThe object may have an [`@@unscopables`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables) property, which defines a list of properties that should not be added to the scope chain (for backward compatibility). See the [`Symbol.unscopables`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables) documentation for more information.\n\nThe reasons to use a `with` statement include saving one temporary variable and reducing file size by avoiding repeating a lengthy object reference. However, there are far more reasons why `with` statements are not desirable:\n\n*   Performance: The `with` statement forces the specified object to be searched first for all name lookups. Therefore, all identifiers that aren't members of the specified object will be found more slowly in a `with` block. Moreover, the optimizer cannot make any assumptions about what each unqualified identifier refers to, so it must repeat the same property lookup every time the identifier is used.\n*   Readability: The `with` statement makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. For example:\n    \n    ```\n    function f(x, o) {\n      with (o) {\n        console.log(x);\n      }\n    }\n    ```\n    \n    If you look just at the definition of `f`, it's impossible to tell what the `x` in the `with` body refers to. Only when `f` is called can `x` be determined to be `o.x` or `f`'s first formal parameter. If you forget to define `x` in the object you pass as the second parameter, you won't get an error — instead you'll just get unexpected results. It's also unclear what the actual intent of such code would be.\n*   Forward compatibility: Code using `with` may not be forward compatible, especially when used with something other than a plain object, which may gain more properties in the future. Consider this example:\n    \n    ```\n    function f(foo, values) {\n      with (foo) {\n        console.log(values);\n      }\n    }\n    ```\n    \n    If you call `f([1, 2, 3], obj)` in an ECMAScript 5 environment, the `values` reference inside the `with` statement will resolve to `obj`. However, ECMAScript 2015 introduces a [`values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) property on `Array.prototype` (so it will be available on every array). So, after upgrading the environment, the `values` reference inside the `with` statement resolves to `[1, 2, 3].values` instead, and is likely to cause bugs. In this particular example, `values` is defined as unscopable through [`Array.prototype[@@unscopables]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables), so it still correctly resolves to the `values` parameter. If it were not defined as unscopable, one can see how this would be a difficult issue to debug.\n\n## [Examples](#examples)\n\n### [Using the with statement](#using_the_with_statement)\n\nThe following `with` statement specifies that the [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object is the default object. The statements following the `with` statement refer to the [`PI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI) property and the [`cos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos) and [`sin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin) methods, without specifying an object. JavaScript assumes the `Math` object for these references.\n\n```\nlet a, x, y;\nconst r = 10;\n\nwith (Math) {\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI / 2);\n}\n```\n\n### [Avoiding the with statement by destructuring properties into the current scope](#avoiding_the_with_statement_by_destructuring_properties_into_the_current_scope)\n\nYou can usually avoid using `with` through [property destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). Here we create an extra block to mimic the behavior of `with` creating an extra scope — but in actual usage, this block can usually be omitted.\n\n```\nlet a, x, y;\nconst r = 10;\n\n{\n  const { PI, cos, sin } = Math;\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI / 2);\n}\n```\n\n### [Avoiding the with statement by using an IIFE](#avoiding_the_with_statement_by_using_an_iife)\n\nIf you're producing an expression that must reuse a long-named reference multiple times, and your goal is to eliminate that lengthy name within your expression, you can wrap the expression in an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) and provide the long name as an argument.\n\n```\nconst objectHavingAnEspeciallyLengthyName = { foo: true, bar: false };\n\nif (((o) => o.foo && !o.bar)(objectHavingAnEspeciallyLengthyName)) {\n  // This branch runs.\n}\n```\n\n### [Creating dynamic namespaces using the with statement and a proxy](#creating_dynamic_namespaces_using_the_with_statement_and_a_proxy)\n\n`with` will transform every variable lookup to a property lookup, while [Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) allow trapping every property lookup call. You can create a dynamic namespace by combining them.\n\n```\nconst namespace = new Proxy(\n  {},\n  {\n    has(target, key) {\n      // Avoid trapping global properties like `console`\n      if (key in globalThis) {\n        return false;\n      }\n      // Trap all property lookups\n      return true;\n    },\n    get(target, key) {\n      return key;\n    },\n  },\n);\n\nwith (namespace) {\n  console.log(a, b, c); // \"a\" \"b\" \"c\"\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-with-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-with-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "with - JavaScript | MDN",
    "description": "The with statement extends the scope chain for a statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
    "markdown": "# break - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`break`** statement terminates the current loop or [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement and transfers program control to the statement following the terminated statement. It can also be used to jump past a [labeled statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) when used within that labeled statement.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n[`label`](#label) Optional\n\nIdentifier associated with the label of the statement to break to. If the `break` statement is not nested within a loop or [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch), then the label identifier is required.\n\n## [Description](#description)\n\nWhen `break;` is encountered, the program breaks out of the innermost `switch` or [looping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#iterations) statement and continues executing the next statement after that.\n\nWhen `break label;` is encountered, the program breaks out of the statement labeled with `label` and continues executing the next statement after that. The `break` statement needs to be nested within the referenced label. The labeled statement can be any statement (commonly a [block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) statement); it does not have to be another loop statement.\n\nA `break` statement, with or without a following label, cannot be used at the top level of a script, module, function's body, or [static initialization block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), even when the function or class is further contained within a loop.\n\n## [Examples](#examples)\n\n### [break in while loop](#break_in_while_loop)\n\nThe following function has a `break` statement that terminates the [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loop when `i` is 3, and then returns the value `3 * x`.\n\n```\nfunction testBreak(x) {\n  let i = 0;\n\n  while (i < 6) {\n    if (i === 3) {\n      break;\n    }\n    i += 1;\n  }\n\n  return i * x;\n}\n```\n\n### [break in switch statements](#break_in_switch_statements)\n\nThe following code has a `break` statement that terminates the [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement when a case is matched and the corresponding code has run.\n\n```\nconst food = \"sushi\";\n\nswitch (food) {\n  case \"sushi\":\n    console.log(\"Sushi is originally from Japan.\");\n    break;\n  case \"pizza\":\n    console.log(\"Pizza is originally from Italy.\");\n    break;\n  default:\n    console.log(\"I have never heard of that dish.\");\n    break;\n}\n```\n\n### [break in labeled blocks](#break_in_labeled_blocks)\n\nThe following code uses `break` statements with labeled blocks. By using `break outerBlock`, control is transferred to the end of the block statement marked as `outerBlock`.\n\n```\nouterBlock: {\n  innerBlock: {\n    console.log(\"1\");\n    break outerBlock; // breaks out of both innerBlock and outerBlock\n    console.log(\":-(\"); // skipped\n  }\n  console.log(\"2\"); // skipped\n}\n```\n\n### [Unsyntactic break statements](#unsyntactic_break_statements)\n\nA `break` statement must be nested within any label it references. The following code also uses `break` statements with labeled blocks, but generates a syntax error because its `break` statement references `block2` but it's not nested within `block2`.\n\n```\nblock1: {\n  console.log(\"1\");\n  break block2; // SyntaxError: label not found\n}\n\nblock2: {\n  console.log(\"2\");\n}\n```\n\nSyntax errors are also generated in the following code examples which use `break` statements within functions that are nested within a loop, or labeled block that the `break` statements are intended to break out of.\n\n```\nfunction testBreak(x) {\n  let i = 0;\n\n  while (i < 6) {\n    if (i === 3) {\n      (() => {\n        break;\n      })();\n    }\n    i += 1;\n  }\n\n  return i * x;\n}\n\ntestBreak(1); // SyntaxError: Illegal break statement\n```\n\n```\nblock1: {\n  console.log(\"1\");\n  (() => {\n    break block1; // SyntaxError: Undefined label 'block1'\n  })();\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-break-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-break-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "break - JavaScript | MDN",
    "description": "The break statement terminates the current loop or switch statement and transfers program control to the statement following the terminated statement. It can also be used to jump past a labeled statement when used within that labeled statement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment",
    "markdown": "# Nullish coalescing assignment (??=) - JavaScript\n\nThe **nullish coalescing assignment (`??=`)** operator, also known as the **logical nullish assignment** operator, only evaluates the right operand and assigns to the left if the left operand is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) (`null` or `undefined`).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nNullish coalescing assignment [_short-circuits_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#short-circuiting), meaning that `x ??= y` is equivalent to `x ?? (x = y)`, except that the expression `x` is only evaluated once.\n\nNo assignment is performed if the left-hand side is not nullish, due to short-circuiting of the [nullish coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) operator. For example, the following does not throw an error, despite `x` being `const`:\n\nNeither would the following trigger the setter:\n\n```\nconst x = {\n  get value() {\n    return 1;\n  },\n  set value(v) {\n    console.log(\"Setter called\");\n  },\n};\n\nx.value ??= 2;\n```\n\nIn fact, if `x` is not nullish, `y` is not evaluated at all.\n\n```\nconst x = 1;\nx ??= console.log(\"y evaluated\");\n// Logs nothing\n```\n\n## [Examples](#examples)\n\n### [Using nullish coalescing assignment](#using_nullish_coalescing_assignment)\n\nYou can use the nullish coalescing assignment operator to apply default values to object properties. Compared to using destructuring and [default values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value), `??=` also applies the default value if the property has value `null`.\n\n```\nfunction config(options) {\n  options.duration ??= 100;\n  options.speed ??= 25;\n  return options;\n}\n\nconfig({ duration: 125 }); // { duration: 125, speed: 25 }\nconfig({}); // { duration: 100, speed: 25 }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-assignment-operators](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Nullish coalescing assignment (??=) - JavaScript | MDN",
    "description": "The nullish coalescing assignment (??=) operator, also known as the logical nullish assignment operator, only evaluates the right operand and assigns to the left if the left operand is nullish (null or undefined).",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
    "markdown": "# const - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`const`** declaration declares block-scoped local variables. The value of a constant can't be changed through reassignment using the [assignment operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment), but if a constant is an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects), its properties can be added, updated, or removed.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nconst name1 = value1;\nconst name1 = value1, name2 = value2;\nconst name1 = value1, name2 = value2, /* …, */ nameN = valueN;\n```\n\n[`nameN`](#namen)\n\nThe name of the variable to declare. Each must be a legal JavaScript [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) or a [destructuring binding pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n[`valueN`](#valuen)\n\nInitial value of the variable. It can be any legal expression.\n\n## [Description](#description)\n\nThe `const` declaration is very similar to [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let):\n\n*   `const` declarations are scoped to blocks as well as functions.\n*   `const` declarations can only be accessed after the place of declaration is reached (see [temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)). For this reason, `const` declarations are commonly regarded as [non-hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).\n*   `const` declarations do not create properties on [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) when declared at the top level of a script.\n*   `const` declarations cannot be [redeclared](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#redeclarations) by any other declaration in the same scope.\n*   `const` begins [_declarations_, not _statements_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#difference_between_statements_and_declarations). That means you cannot use a lone `const` declaration as the body of a block (which makes sense, since there's no way to access the variable).\n    \n    ```\n    if (true) const a = 1; // SyntaxError: Lexical declaration cannot appear in a single-statement context\n    ```\n    \n\nAn initializer for a constant is required. You must specify its value in the same declaration. (This makes sense, given that it can't be changed later.)\n\n```\nconst FOO; // SyntaxError: Missing initializer in const declaration\n```\n\nThe `const` declaration creates an immutable reference to a value. It does _not_ mean the value it holds is immutable — just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered. You should understand `const` declarations as \"create a variable whose _identity_ remains constant\", not \"whose _value_ remains constant\" — or, \"create immutable [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding)\", not \"immutable values\".\n\nMany style guides (including [MDN's](https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript#variable_declarations)) recommend using `const` over [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) whenever a variable is not reassigned in its scope. This makes the intent clear that a variable's type (or value, in the case of a primitive) can never change. Others may prefer `let` for non-primitives that are mutated.\n\nThe list that follows the `const` keyword is called a _[binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) list_ and is separated by commas, where the commas are _not_ [comma operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) and the `=` signs are _not_ [assignment operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment). Initializers of later variables can refer to earlier variables in the list.\n\n## [Examples](#examples)\n\n### [Basic const usage](#basic_const_usage)\n\nConstants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters, especially for primitives because they are truly immutable.\n\n```\n// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\nconsole.log(\"my favorite number is: \" + MY_FAV);\n```\n\n```\n// Re-assigning to a constant variable throws an error\nMY_FAV = 20; // TypeError: Assignment to constant variable\n\n// Redeclaring a constant throws an error\nconst MY_FAV = 20; // SyntaxError: Identifier 'MY_FAV' has already been declared\nvar MY_FAV = 20; // SyntaxError: Identifier 'MY_FAV' has already been declared\nlet MY_FAV = 20; // SyntaxError: Identifier 'MY_FAV' has already been declared\n```\n\n### [Block scoping](#block_scoping)\n\nIt's important to note the nature of block scoping.\n\n```\nconst MY_FAV = 7;\n\nif (MY_FAV === 7) {\n  // This is fine because it's in a new block scope\n  const MY_FAV = 20;\n  console.log(MY_FAV); // 20\n\n  // var declarations are not scoped to blocks so this throws an error\n  var MY_FAV = 20; // SyntaxError: Identifier 'MY_FAV' has already been declared\n}\n\nconsole.log(MY_FAV); // 7\n```\n\n### [const in objects and arrays](#const_in_objects_and_arrays)\n\n`const` also works on objects and arrays. Attempting to overwrite the object throws an error \"Assignment to constant variable\".\n\n```\nconst MY_OBJECT = { key: \"value\" };\nMY_OBJECT = { OTHER_KEY: \"value\" };\n```\n\nHowever, object keys are not protected, so the following statement is executed without problem.\n\n```\nMY_OBJECT.key = \"otherValue\";\n```\n\nYou would need to use [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) to make an object immutable.\n\nThe same applies to arrays. Assigning a new array to the variable throws an error \"Assignment to constant variable\".\n\n```\nconst MY_ARRAY = [];\nMY_ARRAY = [\"B\"];\n```\n\nStill, it's possible to push items into the array and thus mutate it.\n\n```\nMY_ARRAY.push(\"A\"); // [\"A\"]\n```\n\n### [Declaration with destructuring](#declaration_with_destructuring)\n\nThe left-hand side of each `=` can also be a binding pattern. This allows creating multiple variables at once.\n\n```\nconst result = /(a+)(b+)(c+)/.exec(\"aaabcc\");\nconst [, a, b, c] = result;\nconsole.log(a, b, c); // \"aaa\" \"b\" \"cc\"\n```\n\nFor more information, see [Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-let-and-const-declarations](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-let-and-const-declarations) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "const - JavaScript | MDN",
    "description": "The const declaration declares block-scoped local variables. The value of a constant can't be changed through reassignment using the assignment operator, but if a constant is an object, its properties can be added, updated, or removed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class",
    "markdown": "# class - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`class`** declaration creates a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) of a new [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) to a given name.\n\nYou can also define classes using the [`class` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nclass name {\n  // class body\n}\nclass name extends otherName {\n  // class body\n}\n```\n\n## [Description](#description)\n\nThe class body of a class declaration is executed in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). The `class` declaration is very similar to [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let):\n\n*   `class` declarations are scoped to blocks as well as functions.\n*   `class` declarations can only be accessed after the place of declaration is reached (see [temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)). For this reason, `class` declarations are commonly regarded as [non-hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) (unlike [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)).\n*   `class` declarations do not create properties on [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) when declared at the top level of a script (unlike [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)).\n*   `class` declarations cannot be [redeclared](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#redeclarations) by any other declaration in the same scope.\n\nOutside the class body, `class` declarations can be re-assigned like `let`, but you should avoid doing so. Within the class body, the binding is constant like `const`.\n\n```\nclass Foo {\n  static {\n    Foo = 1; // TypeError: Assignment to constant variable.\n  }\n}\n\nclass Foo2 {\n  bar = (Foo2 = 1); // TypeError: Assignment to constant variable.\n}\n\nclass Foo3 {}\nFoo3 = 1;\nconsole.log(Foo3); // 1\n```\n\n## [Examples](#examples)\n\n### [A simple class declaration](#a_simple_class_declaration)\n\nIn the following example, we first define a class named `Rectangle`, then extend it to create a class named `FilledRectangle`.\n\nNote that `super()`, used in the `constructor`, can only be used in constructors, and _must_ be called _before_ the `this` keyword can be used.\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.name = \"Rectangle\";\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass FilledRectangle extends Rectangle {\n  constructor(height, width, color) {\n    super(height, width);\n    this.name = \"Filled rectangle\";\n    this.color = color;\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "class - JavaScript | MDN",
    "description": "The class declaration creates a binding of a new class to a given name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters",
    "markdown": "# Default parameters - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Default function parameters** allow named parameters to be initialized with default values if no value or `undefined` is passed.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction fnName(param1 = defaultValue1, /* …, */ paramN = defaultValueN) {\n  // …\n}\n```\n\n## [Description](#description)\n\nIn JavaScript, function parameters default to [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). However, it's often useful to set a different default value. This is where default parameters can help.\n\nIn the following example, if no value is provided for `b` when `multiply` is called, `b`'s value would be `undefined` when evaluating `a * b` and `multiply` would return `NaN`.\n\n```\nfunction multiply(a, b) {\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // NaN !\n```\n\nIn the past, the general strategy for setting defaults was to test parameter values in the function body and assign a value if they are `undefined`. In the following example, `b` is set to `1` if `multiply` is called with only one argument:\n\n```\nfunction multiply(a, b) {\n  b = typeof b !== \"undefined\" ? b : 1;\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // 5\n```\n\nWith default parameters, checks in the function body are no longer necessary. Now, you can assign `1` as the default value for `b` in the function head:\n\n```\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5); // 5\nmultiply(5, undefined); // 5\n```\n\nParameters are still set left-to-right, overwriting default parameters even if there are later parameters without defaults.\n\n```\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf(); // [1, undefined]\nf(2); // [2, undefined]\n```\n\n**Note:** The first default parameter and all parameters after it will not contribute to the function's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length).\n\nThe default parameter initializers live in their own scope, which is a parent of the scope created for the function body.\n\nThis means that earlier parameters can be referred to in the initializers of later parameters. However, functions and variables declared in the function body cannot be referred to from default value parameter initializers; attempting to do so throws a run-time [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError). This also includes [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var)\\-declared variables in the function body.\n\nFor example, the following function will throw a `ReferenceError` when invoked, because the default parameter value does not have access to the child scope of the function body:\n\n```\nfunction f(a = go()) {\n  function go() {\n    return \":P\";\n  }\n}\n\nf(); // ReferenceError: go is not defined\n```\n\nThis function will print the value of the _parameter_ `a`, because the variable `var a` is hoisted only to the top of the scope created for the function body, not the parent scope created for the parameter list, so its value is not visible to `b`.\n\n```\nfunction f(a, b = () => console.log(a)) {\n  var a = 1;\n  b();\n}\n\nf(); // undefined\nf(5); // 5\n```\n\nThe default parameter allows any expression, but you cannot use [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) or [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) that would pause the evaluation of the default expression. The parameter must be initialized _synchronously_.\n\n```\nasync function f(a = await Promise.resolve(1)) {\n  return a;\n}\n```\n\n**Note:** Because the default parameter is evaluated when the function is called, not when the function is defined, the validity of the `await` and `yield` operators depends on the function itself, not its surrounding function. For example, if the current function is not `async`, `await` will be parsed as an identifier and follow normal [identifier syntax rules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers), even when this function is nested in an `async` function.\n\n## [Examples](#examples)\n\n### [Passing undefined vs. other falsy values](#passing_undefined_vs._other_falsy_values)\n\nIn the second call in this example, even if the first argument is set explicitly to `undefined` (though not `null` or other [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values), the value of the `num` argument is still the default.\n\n```\nfunction test(num = 1) {\n  console.log(typeof num);\n}\n\ntest(); // 'number' (num is set to 1)\ntest(undefined); // 'number' (num is set to 1 too)\n\n// test with other falsy values:\ntest(\"\"); // 'string' (num is set to '')\ntest(null); // 'object' (num is set to null)\n```\n\n### [Evaluated at call time](#evaluated_at_call_time)\n\nThe default argument is evaluated at _call time_. Unlike with Python (for example), a new object is created each time the function is called.\n\n```\nfunction append(value, array = []) {\n  array.push(value);\n  return array;\n}\n\nappend(1); // [1]\nappend(2); // [2], not [1, 2]\n```\n\nThis even applies to functions and variables:\n\n```\nfunction callSomething(thing = something()) {\n  return thing;\n}\n\nlet numberOfTimesCalled = 0;\nfunction something() {\n  numberOfTimesCalled += 1;\n  return numberOfTimesCalled;\n}\n\ncallSomething(); // 1\ncallSomething(); // 2\n```\n\n### [Earlier parameters are available to later default parameters](#earlier_parameters_are_available_to_later_default_parameters)\n\nParameters defined earlier (to the left) are available to later default parameters:\n\n```\nfunction greet(name, greeting, message = `${greeting} ${name}`) {\n  return [name, greeting, message];\n}\n\ngreet(\"David\", \"Hi\"); // [\"David\", \"Hi\", \"Hi David\"]\ngreet(\"David\", \"Hi\", \"Happy Birthday!\"); // [\"David\", \"Hi\", \"Happy Birthday!\"]\n```\n\nThis functionality can be approximated like this, which demonstrates how many edge cases are handled:\n\n```\nfunction go() {\n  return \":P\";\n}\n\nfunction withDefaults(\n  a,\n  b = 5,\n  c = b,\n  d = go(),\n  e = this,\n  f = arguments,\n  g = this.value,\n) {\n  return [a, b, c, d, e, f, g];\n}\n\nfunction withoutDefaults(a, b, c, d, e, f, g) {\n  switch (arguments.length) {\n    case 0:\n    case 1:\n      b = 5;\n    case 2:\n      c = b;\n    case 3:\n      d = go();\n    case 4:\n      e = this;\n    case 5:\n      f = arguments;\n    case 6:\n      g = this.value;\n  }\n  return [a, b, c, d, e, f, g];\n}\n\nwithDefaults.call({ value: \"=^_^=\" });\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n\nwithoutDefaults.call({ value: \"=^_^=\" });\n// [undefined, 5, 5, \":P\", {value:\"=^_^=\"}, arguments, \"=^_^=\"]\n```\n\n### [Destructured parameter with default value assignment](#destructured_parameter_with_default_value_assignment)\n\nYou can use default value assignment with the [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) syntax.\n\nA common way of doing that is to set an empty object/array as the default value for the destructured parameter; for example: `[x = 1, y = 2] = []`. This makes it possible to pass nothing to the function and still have those values prefilled:\n\n```\nfunction preFilledArray([x = 1, y = 2] = []) {\n  return x + y;\n}\n\npreFilledArray(); // 3\npreFilledArray([]); // 3\npreFilledArray([2]); // 4\npreFilledArray([2, 3]); // 5\n\n// Works the same for objects:\nfunction preFilledObject({ z = 3 } = {}) {\n  return z;\n}\n\npreFilledObject(); // 3\npreFilledObject({}); // 3\npreFilledObject({ z: 2 }); // 2\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Default parameters - JavaScript | MDN",
    "description": "Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
    "markdown": "# debugger - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`debugger`** statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.\n\n## [Syntax](#syntax)\n\n## [Examples](#examples)\n\n### [Using the debugger statement](#using_the_debugger_statement)\n\nThe following example shows code where a `debugger` statement has been inserted, to invoke a debugger (if one exists) when the function is called.\n\n```\nfunction potentiallyBuggyCode() {\n  debugger;\n  // do potentially buggy stuff to examine, step through, etc.\n}\n```\n\nWhen the debugger is invoked, execution is paused at the `debugger` statement. It is like a breakpoint in the script source.\n\n![A browser with developer tools open to the debugger panel showing how execution is paused at the debugger statement to allow close inspection of variables, scopes, events, etc.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger/screen_shot_2014-02-07_at_9.14.35_am.png)\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-debugger-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-debugger-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "debugger - JavaScript | MDN",
    "description": "The debugger statement invokes any available debugging\n  functionality, such as setting a breakpoint. If no debugging functionality is available,\n  this statement has no effect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
    "markdown": "# continue - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`continue`** statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ncontinue;\ncontinue label;\n```\n\n[`label`](#label) Optional\n\nIdentifier associated with the label of the statement.\n\n## [Description](#description)\n\nIn contrast to the [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement, `continue` does not terminate the execution of the loop entirely, but instead:\n\n*   In a [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) or [`do...while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while) loop, it jumps back to the condition.\n*   In a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop, it jumps to the update expression.\n*   In a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in), [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of), or [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loop, it jumps to the next iteration.\n\nThe `continue` statement can include an optional label that allows the program to jump to the next iteration of a labeled loop statement instead of the innermost loop. In this case, the `continue` statement needs to be nested within this labeled statement.\n\nA `continue` statement, with or without a following label, cannot be used at the top level of a script, module, function's body, or [static initialization block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), even when the function or class is further contained within a loop.\n\n## [Examples](#examples)\n\n### [Using continue with while](#using_continue_with_while)\n\nThe following example shows a [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loop that has a `continue` statement that executes when the value of `i` is 3. Thus, `n` takes on the values 1, 3, 7, and 12.\n\n```\nlet i = 0;\nlet n = 0;\n\nwhile (i < 5) {\n  i++;\n\n  if (i === 3) {\n    continue;\n  }\n\n  n += i;\n}\n```\n\n### [Using continue with a label](#using_continue_with_a_label)\n\nIn the following example, a statement labeled `checkIAndJ` contains a statement labeled `checkJ`. If `continue` is encountered, the program continues at the top of the `checkJ` statement. Each time `continue` is encountered, `checkJ` reiterates until its condition returns false. When false is returned, the remainder of the `checkIAndJ` statement is completed.\n\nIf `continue` had a label of `checkIAndJ`, the program would continue at the top of the `checkIAndJ` statement.\n\n```\nlet i = 0;\nlet j = 8;\n\ncheckIAndJ: while (i < 4) {\n  console.log(`i: ${i}`);\n  i += 1;\n\n  checkJ: while (j > 4) {\n    console.log(`j: ${j}`);\n    j -= 1;\n\n    if (j % 2 === 0) continue checkJ;\n    console.log(`${j} is odd.`);\n  }\n  console.log(`i = ${i}`);\n  console.log(`j = ${j}`);\n}\n```\n\nOutput:\n\ni: 0\n\n// start checkj\nj: 8\n7 is odd.\nj: 7\nj: 6\n5 is odd.\nj: 5\n// end checkj\n\ni = 1\nj = 4\n\ni: 1\ni = 2\nj = 4\n\ni: 2\ni = 3\nj = 4\n\ni: 3\ni = 4\nj = 4\n\n### [Unsyntactic continue statements](#unsyntactic_continue_statements)\n\n`continue` cannot be used within loops across function boundaries.\n\n```\nfor (let i = 0; i < 10; i++) {\n  (() => {\n    continue; // SyntaxError: Illegal continue statement: no surrounding iteration statement\n  })();\n}\n```\n\nWhen referencing a label, the labeled statement must contain the `continue` statement.\n\n```\nlabel: for (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\nfor (let i = 0; i < 10; i++) {\n  continue label; // SyntaxError: Undefined label 'label'\n}\n```\n\nThe labeled statement must be a loop.\n\n```\nlabel: {\n  for (let i = 0; i < 10; i++) {\n    continue label; // SyntaxError: Illegal continue statement: 'label' does not denote an iteration statement\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-continue-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-continue-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "continue - JavaScript | MDN",
    "description": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
    "markdown": "# Arrow function expressions - JavaScript\n\nAn **arrow function expression** is a compact alternative to a traditional [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function), with some semantic differences and deliberate limitations in usage:\n\n*   Arrow functions don't have their own [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding) to [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments), or [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super), and should not be used as [methods](https://developer.mozilla.org/en-US/docs/Glossary/Method).\n*   Arrow functions cannot be used as [constructors](https://developer.mozilla.org/en-US/docs/Glossary/Constructor). Calling them with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError). They also don't have access to the [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target) keyword.\n*   Arrow functions cannot use [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) within their body and cannot be created as generator functions.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\n() => expression\n\nparam => expression\n\n(param) => expression\n\n(param1, paramN) => expression\n\n() => {\n  statements\n}\n\nparam => {\n  statements\n}\n\n(param1, paramN) => {\n  statements\n}\n```\n\n[Rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), and [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) within params are supported, and always require parentheses:\n\n```\n(a, b, ...r) => expression\n(a = 400, b = 20, c) => expression\n([a, b] = [10, 20]) => expression\n({ a, b } = { a: 10, b: 20 }) => expression\n```\n\nArrow functions can be [`async`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) by prefixing the expression with the `async` keyword.\n\n```\nasync param => expression\nasync (param1, param2, ...paramN) => {\n  statements\n}\n```\n\n## [Description](#description)\n\nLet's decompose a traditional anonymous function down to the simplest arrow function step-by-step. Each step along the way is a valid arrow function.\n\n**Note:** Traditional function expressions and arrow functions have more differences than their syntax. We will introduce their behavior differences in more detail in the next few subsections.\n\n```\n// Traditional anonymous function\n(function (a) {\n  return a + 100;\n});\n\n// 1. Remove the word \"function\" and place arrow between the argument and opening body brace\n(a) => {\n  return a + 100;\n};\n\n// 2. Remove the body braces and word \"return\" — the return is implied.\n(a) => a + 100;\n\n// 3. Remove the parameter parentheses\na => a + 100;\n```\n\nIn the example above, both the parentheses around the parameter and the braces around the function body may be omitted. However, they can only be omitted in certain cases.\n\nThe parentheses can only be omitted if the function has a single simple parameter. If it has multiple parameters, no parameters, or default, destructured, or rest parameters, the parentheses around the parameter list are required.\n\n```\n// Traditional anonymous function\n(function (a, b) {\n  return a + b + 100;\n});\n\n// Arrow function\n(a, b) => a + b + 100;\n\nconst a = 4;\nconst b = 2;\n\n// Traditional anonymous function (no parameters)\n(function () {\n  return a + b + 100;\n});\n\n// Arrow function (no parameters)\n() => a + b + 100;\n```\n\nThe braces can only be omitted if the function directly returns an expression. If the body has statements, the braces are required — and so is the `return` keyword. Arrow functions cannot guess what or when you want to return.\n\n```\n// Traditional anonymous function\n(function (a, b) {\n  const chuck = 42;\n  return a + b + chuck;\n});\n\n// Arrow function\n(a, b) => {\n  const chuck = 42;\n  return a + b + chuck;\n};\n```\n\nArrow functions are not inherently associated with a name. If the arrow function needs to call itself, use a named function expression instead. You can also assign the arrow function to a variable, allowing you to refer to it through that variable.\n\n```\n// Traditional Function\nfunction bob(a) {\n  return a + 100;\n}\n\n// Arrow Function\nconst bob2 = (a) => a + 100;\n```\n\n### [Function body](#function_body)\n\nArrow functions can have either an _expression body_ or the usual _block body_.\n\nIn an expression body, only a single expression is specified, which becomes the implicit return value. In a block body, you must use an explicit `return` statement.\n\n```\nconst func = (x) => x * x;\n// expression body syntax, implied \"return\"\n\nconst func2 = (x, y) => {\n  return x + y;\n};\n// with block body, explicit \"return\" needed\n```\n\nReturning object literals using the expression body syntax `(params) => { object: literal }` does not work as expected.\n\n```\nconst func = () => { foo: 1 };\n// Calling func() returns undefined!\n\nconst func2 = () => { foo: function () {} };\n// SyntaxError: function statement requires a name\n\nconst func3 = () => { foo() {} };\n// SyntaxError: Unexpected token '{'\n```\n\nThis is because JavaScript only sees the arrow function as having an expression body if the token following the arrow is not a left brace, so the code inside braces ({}) is parsed as a sequence of statements, where `foo` is a [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label), not a key in an object literal.\n\nTo fix this, wrap the object literal in parentheses:\n\n```\nconst func = () => ({ foo: 1 });\n```\n\n### [Cannot be used as methods](#cannot_be_used_as_methods)\n\nArrow function expressions should only be used for non-method functions because they do not have their own `this`. Let's see what happens when we try to use them as methods:\n\n```\n\"use strict\";\n\nconst obj = {\n  i: 10,\n  b: () => console.log(this.i, this),\n  c() {\n    console.log(this.i, this);\n  },\n};\n\nobj.b(); // logs undefined, Window { /* … */ } (or the global object)\nobj.c(); // logs 10, Object { /* … */ }\n```\n\nAnother example involving [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty):\n\n```\n\"use strict\";\n\nconst obj = {\n  a: 10,\n};\n\nObject.defineProperty(obj, \"b\", {\n  get: () => {\n    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window { /* … */ } (or the global object)\n    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'\n  },\n});\n```\n\nBecause a [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)'s body has a `this` context, arrow functions as [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) close over the class's `this` context, and the `this` inside the arrow function's body will correctly point to the instance (or the class itself, for [static fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)). However, because it is a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures), not the function's own binding, the value of `this` will not change based on the execution context.\n\n```\nclass C {\n  a = 1;\n  autoBoundMethod = () => {\n    console.log(this.a);\n  };\n}\n\nconst c = new C();\nc.autoBoundMethod(); // 1\nconst { autoBoundMethod } = c;\nautoBoundMethod(); // 1\n// If it were a normal method, it should be undefined in this case\n```\n\nArrow function properties are often said to be \"auto-bound methods\", because the equivalent with normal methods is:\n\n```\nclass C {\n  a = 1;\n  constructor() {\n    this.method = this.method.bind(this);\n  }\n  method() {\n    console.log(this.a);\n  }\n}\n```\n\n**Note:** Class fields are defined on the _instance_, not on the _prototype_, so every instance creation would create a new function reference and allocate a new closure, potentially leading to more memory usage than a normal unbound method.\n\nFor similar reasons, the [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), and [`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) methods are not useful when called on arrow functions, because arrow functions establish `this` based on the scope the arrow function is defined within, and the `this` value does not change based on how the function is invoked.\n\n### [No binding of arguments](#no_binding_of_arguments)\n\nArrow functions do not have their own [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object. Thus, in this example, `arguments` is a reference to the arguments of the enclosing scope:\n\n```\nfunction foo(n) {\n  const f = () => arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n\n  return f();\n}\n\nfoo(3); // 3 + 3 = 6\n```\n\n**Note:** You cannot declare a variable called `arguments` in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#making_eval_and_arguments_simpler), so the code above would be a syntax error. This makes the scoping effect of `arguments` much easier to comprehend.\n\nIn most cases, using [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) is a good alternative to using an `arguments` object.\n\n```\nfunction foo(n) {\n  const f = (...args) => args[0] + n;\n  return f(10);\n}\n\nfoo(1); // 11\n```\n\n### [Cannot be used as constructors](#cannot_be_used_as_constructors)\n\nArrow functions cannot be used as constructors and will throw an error when called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). They also do not have a [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property.\n\n```\nconst Foo = () => {};\nconst foo = new Foo(); // TypeError: Foo is not a constructor\nconsole.log(\"prototype\" in Foo); // false\n```\n\n### [Cannot be used as generators](#cannot_be_used_as_generators)\n\nThe [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) keyword cannot be used in an arrow function's body (except when used within generator functions further nested within the arrow function). As a consequence, arrow functions cannot be used as generators.\n\n### [Line break before arrow](#line_break_before_arrow)\n\nAn arrow function cannot contain a line break between its parameters and its arrow.\n\n```\nconst func = (a, b, c)\n  => 1;\n// SyntaxError: Unexpected token '=>'\n```\n\nFor the purpose of formatting, you may put the line break after the arrow or use parentheses/braces around the function body, as shown below. You can also put line breaks between parameters.\n\n```\nconst func = (a, b, c) =>\n  1;\n\nconst func2 = (a, b, c) => (\n  1\n);\n\nconst func3 = (a, b, c) => {\n  return 1;\n};\n\nconst func4 = (\n  a,\n  b,\n  c,\n) => 1;\n```\n\n### [Precedence of arrow](#precedence_of_arrow)\n\nAlthough the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with [operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) compared to regular functions.\n\n```\nlet callback;\n\ncallback = callback || () => {};\n// SyntaxError: invalid arrow-function arguments\n```\n\nBecause `=>` has a lower precedence than most operators, parentheses are necessary to avoid `callback || ()` being parsed as the arguments list of the arrow function.\n\n```\ncallback = callback || (() => {});\n```\n\n## [Examples](#examples)\n\n### [Using arrow functions](#using_arrow_functions)\n\n```\n// An empty arrow function returns undefined\nconst empty = () => {};\n\n(() => \"foobar\")();\n// Returns \"foobar\"\n// (this is an Immediately Invoked Function Expression)\n\nconst simple = (a) => (a > 15 ? 15 : a);\nsimple(16); // 15\nsimple(10); // 10\n\nconst max = (a, b) => (a > b ? a : b);\n\n// Easy array filtering, mapping, etc.\nconst arr = [5, 6, 13, 0, 1, 18, 23];\n\nconst sum = arr.reduce((a, b) => a + b);\n// 66\n\nconst even = arr.filter((v) => v % 2 === 0);\n// [6, 0, 18]\n\nconst double = arr.map((v) => v * 2);\n// [10, 12, 26, 0, 2, 36, 46]\n\n// More concise promise chains\npromise\n  .then((a) => {\n    // …\n  })\n  .then((b) => {\n    // …\n  });\n\n// Parameterless arrow functions that are visually easier to parse\nsetTimeout(() => {\n  console.log(\"I happen sooner\");\n  setTimeout(() => {\n    // deeper code\n    console.log(\"I happen later\");\n  }, 1);\n}, 1);\n```\n\n### [Using call, bind, and apply](#using_call_bind_and_apply)\n\nThe [`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call), [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply), and [`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) methods work as expected with traditional functions, because we establish the scope for each of the methods:\n\n```\nconst obj = {\n  num: 100,\n};\n\n// Setting \"num\" on globalThis to show how it is NOT used.\nglobalThis.num = 42;\n\n// A simple traditional function to operate on \"this\"\nconst add = function (a, b, c) {\n  return this.num + a + b + c;\n};\n\nconsole.log(add.call(obj, 1, 2, 3)); // 106\nconsole.log(add.apply(obj, [1, 2, 3])); // 106\nconst boundAdd = add.bind(obj);\nconsole.log(boundAdd(1, 2, 3)); // 106\n```\n\nWith arrow functions, since our `add` function is essentially created on the `globalThis` (global) scope, it will assume `this` is the `globalThis`.\n\n```\nconst obj = {\n  num: 100,\n};\n\n// Setting \"num\" on globalThis to show how it gets picked up.\nglobalThis.num = 42;\n\n// Arrow function\nconst add = (a, b, c) => this.num + a + b + c;\n\nconsole.log(add.call(obj, 1, 2, 3)); // 48\nconsole.log(add.apply(obj, [1, 2, 3])); // 48\nconst boundAdd = add.bind(obj);\nconsole.log(boundAdd(1, 2, 3)); // 48\n```\n\nPerhaps the greatest benefit of using arrow functions is with methods like [`setTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) and [`EventTarget.prototype.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener \"EventTarget.prototype.addEventListener()\") that usually require some kind of closure, `call()`, `apply()`, or `bind()` to ensure that the function is executed in the proper scope.\n\nWith traditional function expressions, code like this does not work as expected:\n\n```\nconst obj = {\n  count: 10,\n  doSomethingLater() {\n    setTimeout(function () {\n      // the function executes on the window scope\n      this.count++;\n      console.log(this.count);\n    }, 300);\n  },\n};\n\nobj.doSomethingLater(); // logs \"NaN\", because the property \"count\" is not in the window scope.\n```\n\nWith arrow functions, the `this` scope is more easily preserved:\n\n```\nconst obj = {\n  count: 10,\n  doSomethingLater() {\n    // The method syntax binds \"this\" to the \"obj\" context.\n    setTimeout(() => {\n      // Since the arrow function doesn't have its own binding and\n      // setTimeout (as a function call) doesn't create a binding\n      // itself, the \"obj\" context of the outer method is used.\n      this.count++;\n      console.log(this.count);\n    }, 300);\n  },\n};\n\nobj.doSomethingLater(); // logs 11\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arrow-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-arrow-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Arrow function expressions - JavaScript | MDN",
    "description": "An arrow function expression is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
    "markdown": "# Functions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nGenerally speaking, a function is a \"subprogram\" that can be _called_ by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the _function body_. Values can be _passed_ to a function as parameters, and the function will _return_ a value.\n\nIn JavaScript, functions are [first-class objects](https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function), because they can be passed to other functions, returned from functions, and assigned to variables and properties. They can also have properties and methods just like any other object. What distinguishes them from other objects is that functions can be called.\n\nFor more examples and explanations, see the [JavaScript guide about functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions).\n\n## [Description](#description)\n\nFunction values are typically instances of [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function). See [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) for information on properties and methods of `Function` objects. Callable values cause [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) to return `\"function\"` instead of `\"object\"`.\n\n**Note:** Not all callable values are `instanceof Function`. For example, the `Function.prototype` object is callable but not an instance of `Function`. You can also manually set the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) of your function so it no longer inherits from `Function.prototype`. However, such cases are extremely rare.\n\n### [Return value](#return_value)\n\nBy default, if a function's execution doesn't end at a [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement, or if the `return` keyword doesn't have an expression after it, then the return value is [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). The `return` statement allows you to return an arbitrary value from the function. One function call can only return one value, but you can simulate the effect of returning multiple values by returning an object or array and [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) the result.\n\n**Note:** Constructors called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) have a different set of logic to determine their return values.\n\n### [Passing arguments](#passing_arguments)\n\n[Parameters and arguments](https://en.wikipedia.org/wiki/Parameter_(computer_programming)#Parameters_and_arguments) have slightly different meanings, but in MDN web docs, we often use them interchangeably. For a quick reference:\n\n```\nfunction formatNumber(num) {\n  return num.toFixed(2);\n}\n\nformatNumber(2);\n```\n\nIn this example, the `num` variable is called the function's _parameter_: it's declared in the parenthesis-enclosed list of the function's definition. The function expects the `num` parameter to be a number — although this is not enforceable in JavaScript without writing runtime validation code. In the `formatNumber(2)` call, the number `2` is the function's _argument_: it's the value that is actually passed to the function in the function call. The argument value can be accessed inside the function body through the corresponding parameter name or the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\nArguments are always [_passed by value_](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_reference) and never _passed by reference_. This means that if a function reassigns a parameter, the value won't change outside the function. More precisely, object arguments are [_passed by sharing_](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing), which means if the object's properties are mutated, the change will impact the outside of the function. For example:\n\n```\nfunction updateBrand(obj) {\n  // Mutating the object is visible outside the function\n  obj.brand = \"Toyota\";\n  // Try to reassign the parameter, but this won't affect\n  // the variable's value outside the function\n  obj = null;\n}\n\nconst car = {\n  brand: \"Honda\",\n  model: \"Accord\",\n  year: 1998,\n};\n\nconsole.log(car.brand); // Honda\n\n// Pass object reference to the function\nupdateBrand(car);\n\n// updateBrand mutates car\nconsole.log(car.brand); // Toyota\n```\n\nThe [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) keyword refers to the object that the function is accessed on — it does not refer to the currently executing function, so you must refer to the function value by name, even within the function body.\n\n### [Defining functions](#defining_functions)\n\nBroadly speaking, JavaScript has four kinds of functions:\n\n*   Regular function: can return anything; always runs to completion after invocation\n*   Generator function: returns a [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object; can be paused and resumed with the [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) operator\n*   Async function: returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise); can be paused and resumed with the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) operator\n*   Async generator function: returns an [`AsyncGenerator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator) object; both the `await` and `yield` operators can be used\n\nFor every kind of function, there are three ways to define it:\n\n[Declaration](#declaration)\n\n[`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function), [`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*), [`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), [`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n\n[Expression](#expression)\n\n[`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function), [`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*), [`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function), [`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*)\n\n[Constructor](#constructor)\n\n[`Function()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function), [`GeneratorFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction), [`AsyncFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction), [`AsyncGeneratorFunction()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction)\n\nIn addition, there are special syntaxes for defining [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) and [methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions), which provide more precise semantics for their usage. [Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) are conceptually not functions (because they throw an error when called without `new`), but they also inherit from `Function.prototype` and have `typeof MyClass === \"function\"`.\n\n```\n// Constructor\nconst multiply = new Function(\"x\", \"y\", \"return x * y\");\n\n// Declaration\nfunction multiply(x, y) {\n  return x * y;\n} // No need for semicolon here\n\n// Expression; the function is anonymous but assigned to a variable\nconst multiply = function (x, y) {\n  return x * y;\n};\n// Expression; the function has its own name\nconst multiply = function funcName(x, y) {\n  return x * y;\n};\n\n// Arrow function\nconst multiply = (x, y) => x * y;\n\n// Method\nconst obj = {\n  multiply(x, y) {\n    return x * y;\n  },\n};\n```\n\nAll syntaxes do approximately the same thing, but there are some subtle behavior differences.\n\n*   The `Function()` constructor, `function` expression, and `function` declaration syntaxes create full-fledged function objects, which can be constructed with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new). However, arrow functions and methods cannot be constructed. Async functions, generator functions, and async generator functions are not constructible regardless of syntax.\n*   The `function` declaration creates functions that are [_hoisted_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_hoisting). Other syntaxes do not hoist the function and the function value is only visible after the definition.\n*   The arrow function and `Function()` constructor always create _anonymous_ functions, which means they can't easily call themselves recursively. One way to call an arrow function recursively is by assigning it to a variable.\n*   The arrow function syntax does not have access to `arguments` or `this`.\n*   The `Function()` constructor cannot access any local variables — it only has access to the global scope.\n*   The `Function()` constructor causes runtime compilation and is often slower than other syntaxes.\n\nFor `function` expressions, there is a distinction between the function name and the variable the function is assigned to. The function name cannot be changed, while the variable the function is assigned to can be reassigned. The function name can be different from the variable the function is assigned to — they have no relation to each other. The function name can be used only within the function's body. Attempting to use it outside the function's body results in an error (or gets another value, if the same name is declared elsewhere). For example:\n\n```\nconst y = function x() {};\nconsole.log(x); // ReferenceError: x is not defined\n```\n\nOn the other hand, the variable the function is assigned to is limited only by its scope, which is guaranteed to include the scope in which the function is declared.\n\nA function declaration also creates a variable with the same name as the function name. Thus, unlike those defined by function expressions, functions defined by function declarations can be accessed by their name in the scope they were defined in, as well as in their own body.\n\nA function defined by `new Function` will dynamically have its source assembled, which is observable when you serialize it. For example, `console.log(new Function().toString())` gives:\n\n```\nfunction anonymous(\n) {\n\n}\n```\n\nThis is the actual source used to compile the function. However, although the `Function()` constructor will create the function with name `anonymous`, this name is not added to the scope of the body. The body only ever has access to global variables. For example, the following would result in an error:\n\n```\nnew Function(\"alert(anonymous);\")();\n```\n\nA function defined by a function expression or by a function declaration inherits the current scope. That is, the function forms a closure. On the other hand, a function defined by a `Function` constructor does not inherit any scope other than the global scope (which all functions inherit).\n\n```\n// p is a global variable\nglobalThis.p = 5;\nfunction myFunc() {\n  // p is a local variable\n  const p = 9;\n\n  function decl() {\n    console.log(p);\n  }\n  const expr = function () {\n    console.log(p);\n  };\n  const cons = new Function(\"\\tconsole.log(p);\");\n\n  decl();\n  expr();\n  cons();\n}\nmyFunc();\n\n// Logs:\n// 9 (for 'decl' by function declaration (current scope))\n// 9 (for 'expr' by function expression (current scope))\n// 5 (for 'cons' by Function constructor (global scope))\n```\n\nFunctions defined by function expressions and function declarations are parsed only once, while a function defined by the `Function` constructor parses the string passed to it each and every time the constructor is called. Although a function expression creates a closure every time, the function body is not reparsed, so function expressions are still faster than `new Function(...)`. Therefore the `Function` constructor should generally be avoided whenever possible.\n\nA function declaration may be unintentionally turned into a function expression when it appears in an expression context.\n\n```\n// A function declaration\nfunction foo() {\n  console.log(\"FOO!\");\n}\n\ndoSomething(\n  // A function expression passed as an argument\n  function foo() {\n    console.log(\"FOO!\");\n  },\n);\n```\n\nOn the other hand, a function expression may also be turned into a function declaration. An [expression statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement) cannot begin with the `function` or `async function` keywords, which is a common mistake when implementing [IIFEs](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) (Immediately Invoked Function Expressions).\n\n```\nfunction () { // SyntaxError: Function statements require a function name\n  console.log(\"FOO!\");\n}();\n\nfunction foo() {\n  console.log(\"FOO!\");\n}(); // SyntaxError: Unexpected token ')'\n```\n\nInstead, start the expression statement with something else, so that the `function` keyword unambiguously starts a function expression. Common options include [grouping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping) and using [`void`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void).\n\n```\n(function () {\n  console.log(\"FOO!\");\n})();\n\nvoid function () {\n  console.log(\"FOO!\");\n}();\n```\n\n### [Function parameters](#function_parameters)\n\nEach function parameter is a simple identifier that you can access in the local scope.\n\n```\nfunction myFunc(a, b, c) {\n  // You can access the values of a, b, and c here\n}\n```\n\nThere are three special parameter syntaxes:\n\n*   [_Default parameters_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) allow formal parameters to be initialized with default values if no value or `undefined` is passed.\n*   The [_rest parameter_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) allows representing an indefinite number of arguments as an array.\n*   [_Destructuring_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) allows unpacking elements from arrays, or properties from objects, into distinct variables.\n\n```\nfunction myFunc({ a, b }, c = 1, ...rest) {\n  // You can access the values of a, b, c, and rest here\n}\n```\n\nThere are some consequences if one of the above non-simple parameter syntaxes is used:\n\n*   You cannot apply `\"use strict\"` to the function body — this causes a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params).\n*   Even if the function is not in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), certain strict mode function features apply, including that the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object stops syncing with the named parameters, [`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) throws an error when accessed, and duplicate parameter names are not allowed.\n\n### [The arguments object](#the_arguments_object)\n\nYou can refer to a function's arguments within the function by using the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object.\n\n[`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)\n\nAn array-like object containing the arguments passed to the currently executing function.\n\n[`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n\nThe currently executing function.\n\n[`arguments.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length)\n\nThe number of arguments passed to the function.\n\n### [Getter and setter functions](#getter_and_setter_functions)\n\nYou can define accessor properties on any standard built-in object or user-defined object that supports the addition of new properties. Within [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) and [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes), you can use special syntaxes to define the getter and setter of an accessor property.\n\n[get](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n\nBinds an object property to a function that will be called when that property is looked up.\n\n[set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)\n\nBinds an object property to a function to be called when there is an attempt to set that property.\n\nNote that these syntaxes create an _object property_, not a _method_. The getter and setter functions themselves can only be accessed using reflective APIs such as [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor).\n\n### [Block-level functions](#block-level_functions)\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), functions inside blocks are scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.\n\n```\n\"use strict\";\n\nfunction f() {\n  return 1;\n}\n\n{\n  function f() {\n    return 2;\n  }\n}\n\nf() === 1; // true\n\n// f() === 2 in non-strict mode\n```\n\n### [Block-level functions in non-strict code](#block-level_functions_in_non-strict_code)\n\nIn a word: **Don't.**\n\nIn non-strict code, function declarations inside blocks behave strangely. For example:\n\n```\nif (shouldDefineZero) {\n  function zero() {\n    // DANGER: compatibility risk\n    console.log(\"This is zero.\");\n  }\n}\n```\n\nThe semantics of this in strict mode are well-specified — `zero` only ever exists within that scope of the `if` block. If `shouldDefineZero` is false, then `zero` should never be defined, since the block never executes. However, historically, this was left unspecified, so different browsers implemented it differently in non-strict mode. For more information, see the [`function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#block-level_function_declaration) reference.\n\nA safer way to define functions conditionally is to assign a function expression to a variable:\n\n```\n// Using a var makes it available as a global variable,\n// with closer behavior to a top-level function declaration\nvar zero;\nif (shouldDefineZero) {\n  zero = function () {\n    console.log(\"This is zero.\");\n  };\n}\n```\n\n## [Examples](#examples)\n\n### [Returning a formatted number](#returning_a_formatted_number)\n\nThe following function returns a string containing the formatted representation of a number padded with leading zeros.\n\n```\n// This function returns a string padded with leading zeros\nfunction padZeros(num, totalLen) {\n  let numStr = num.toString(); // Initialize return value as string\n  const numZeros = totalLen - numStr.length; // Calculate no. of zeros\n  for (let i = 1; i <= numZeros; i++) {\n    numStr = `0${numStr}`;\n  }\n  return numStr;\n}\n```\n\nThe following statements call the `padZeros` function.\n\n```\nlet result;\nresult = padZeros(42, 4); // returns \"0042\"\nresult = padZeros(42, 2); // returns \"42\"\nresult = padZeros(5, 4); // returns \"0005\"\n```\n\n### [Determining whether a function exists](#determining_whether_a_function_exists)\n\nYou can determine whether a function exists by using the [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator. In the following example, a test is performed to determine if the `window` object has a property called `noFunc` that is a function. If so, it is used; otherwise, some other action is taken.\n\n```\nif (typeof window.noFunc === \"function\") {\n  // use noFunc()\n} else {\n  // do something else\n}\n```\n\nNote that in the `if` test, a reference to `noFunc` is used — there are no parentheses `()` after the function name so the actual function is not called.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Functions - JavaScript | MDN",
    "description": "Generally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
    "markdown": "# export - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`export`** declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declaration or [dynamic import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import). The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.\n\nIn order to use the `export` declaration in a source file, the file must be interpreted by the runtime as a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). In HTML, this is done by adding `type=\"module\"` to the [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) tag, or by being imported by another module. Modules are automatically interpreted in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n## [Syntax](#syntax)\n\n```\n// Exporting declarations\nexport let name1, name2/*, … */; // also var\nexport const name1 = 1, name2 = 2/*, … */; // also var, let\nexport function functionName() { /* … */ }\nexport class ClassName { /* … */ }\nexport function* generatorFunctionName() { /* … */ }\nexport const { name1, name2: bar } = o;\nexport const [ name1, name2 ] = array;\n\n// Export list\nexport { name1, /* …, */ nameN };\nexport { variable1 as name1, variable2 as name2, /* …, */ nameN };\nexport { variable1 as \"string name\" };\nexport { name1 as default /*, … */ };\n\n// Default exports\nexport default expression;\nexport default function functionName() { /* … */ }\nexport default class ClassName { /* … */ }\nexport default function* generatorFunctionName() { /* … */ }\nexport default function () { /* … */ }\nexport default class { /* … */ }\nexport default function* () { /* … */ }\n\n// Aggregating modules\nexport * from \"module-name\";\nexport * as name1 from \"module-name\";\nexport { name1, /* …, */ nameN } from \"module-name\";\nexport { import1 as name1, import2 as name2, /* …, */ nameN } from \"module-name\";\nexport { default, /* …, */ } from \"module-name\";\nexport { default as name1 } from \"module-name\";\n```\n\n[`nameN`](#namen)\n\nIdentifier to be exported (so that it can be imported via [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) in another script). If you use an alias with `as`, the actual exported name can be specified as a string literal, which may not be a valid identifier.\n\n## [Description](#description)\n\nEvery module can have two different types of export, _named export_ and _default export_. You can have multiple named exports per module but only one default export. Each type corresponds to one of the above syntax.\n\nNamed exports:\n\n```\n// export features declared elsewhere\nexport { myFunction2, myVariable2 };\n\n// export individual features (can export var, let,\n// const, function, class)\nexport let myVariable = Math.sqrt(2);\nexport function myFunction() {\n  // …\n}\n```\n\nAfter the `export` keyword, you can use `let`, `const`, and `var` declarations, as well as function or class declarations. You can also use the `export { name1, name2 }` syntax to export a list of names declared elsewhere. Note that `export {}` does not export an empty object — it's a no-op declaration that exports nothing (an empty name list).\n\nExport declarations are not subject to [temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) rules. You can declare that the module exports `X` before the name `X` itself is declared.\n\n```\nexport { x };\nconst x = 1;\n// This works, because `export` is only a declaration, but doesn't\n// utilize the value of `x`.\n```\n\nDefault exports:\n\n```\n// export feature declared elsewhere as default\nexport { myFunction as default };\n// This is equivalent to:\nexport default myFunction;\n\n// export individual features as default\nexport default function () { /* … */ }\nexport default class { /* … */ }\n```\n\n**Note:** Names for export declarations must be distinct from each other. Having exports with duplicate names or using more than one `default` export will result in a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) and prevent the module from being evaluated.\n\nThe `export default` syntax allows any expression.\n\nAs a special case, functions and classes are exported as _declarations_, not expressions, and these declarations can be anonymous. This means functions will be hoisted.\n\n```\n// Works because `foo` is a function declaration,\n// not a function expression\nfoo();\n\nexport default function foo() {\n  console.log(\"Hi\");\n}\n\n// It's still technically a declaration, but it's allowed\n// to be anonymous\nexport default function () {\n  console.log(\"Hi\");\n}\n```\n\nNamed exports are useful when you need to export several values. When importing this module, named exports must be referred to by the exact same name (optionally renaming it with `as`), but the default export can be imported with any name. For example:\n\n```\n// file test.js\nconst k = 12;\nexport default k;\n```\n\n```\n// some other file\nimport m from \"./test\"; // note that we have the freedom to use import m instead of import k, because k was default export\nconsole.log(m); // 12\n```\n\nYou can also rename named exports to avoid naming conflicts:\n\n```\nexport { myFunction as function1, myVariable as variable };\n```\n\nYou can rename a name to something that's not a valid identifier by using a string literal. For example:\n\n```\nexport { myFunction as \"my-function\" };\n```\n\n### [Re-exporting / Aggregating](#re-exporting_aggregating)\n\nA module can also \"relay\" values exported from other modules without the hassle of writing two separate import/export statements. This is often useful when creating a single module concentrating various exports from various modules (usually called a \"barrel module\").\n\nThis can be achieved with the \"export from\" syntax:\n\n```\nexport { default as function1, function2 } from \"bar.js\";\n```\n\nWhich is comparable to a combination of import and export, except that `function1` and `function2` do not become available inside the current module:\n\n```\nimport { default as function1, function2 } from \"bar.js\";\nexport { function1, function2 };\n```\n\nMost of the \"import from\" syntaxes have \"export from\" counterparts.\n\n```\nexport { x } from \"mod\";\nexport { x as v } from \"mod\";\nexport * as ns from \"mod\";\n```\n\nThere is also `export * from \"mod\"`, although there's no `import * from \"mod\"`. This re-exports all **named** exports from `mod` as the named exports of the current module, but the default export of `mod` is not re-exported. If there are two wildcard exports statements that implicitly re-export the same name, neither one is re-exported.\n\n```\n// -- mod1.js --\nexport const a = 1;\n\n// -- mod2.js --\nexport const a = 3;\n\n// -- barrel.js --\nexport * from \"./mod1.js\";\nexport * from \"./mod2.js\";\n\n// -- main.js --\nimport * as ns from \"./barrel.js\";\nconsole.log(ns.a); // undefined\n```\n\nAttempting to import the duplicate name directly will throw an error.\n\n```\nimport { a } from \"./barrel.js\";\n// SyntaxError: The requested module './barrel.js' contains conflicting star exports for name 'a'\n```\n\nThe following is syntactically invalid despite its import equivalent:\n\n```\nexport DefaultExport from \"bar.js\"; // Invalid\n```\n\nThe correct way of doing this is to rename the export:\n\n```\nexport { default as DefaultExport } from \"bar.js\";\n```\n\nThe \"export from\" syntax allows the `as` token to be omitted, which makes the default export still re-exported as default export.\n\n```\nexport { default, function2 } from \"bar.js\";\n```\n\n## [Examples](#examples)\n\n### [Using named exports](#using_named_exports)\n\nIn a module `my-module.js`, we could include the following code:\n\n```\n// module \"my-module.js\"\nfunction cube(x) {\n  return x * x * x;\n}\n\nconst foo = Math.PI + Math.SQRT2;\n\nconst graph = {\n  options: {\n    color: \"white\",\n    thickness: \"2px\",\n  },\n  draw() {\n    console.log(\"From graph draw function\");\n  },\n};\n\nexport { cube, foo, graph };\n```\n\nThen in the top-level module included in your HTML page, we could have:\n\n```\nimport { cube, foo, graph } from \"./my-module.js\";\n\ngraph.options = {\n  color: \"blue\",\n  thickness: \"3px\",\n};\n\ngraph.draw(); // Logs \"From graph draw function\"\nconsole.log(cube(3)); // 27\nconsole.log(foo); // 4.555806215962888\n```\n\nIt is important to note the following:\n\n*   You need to include this script in your HTML with a [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) element of `type=\"module\"`, so that it gets recognized as a module and dealt with appropriately.\n*   You can't run JS modules via a `file://` URL — you'll get [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) errors. You need to run it via an HTTP server.\n\n### [Using the default export](#using_the_default_export)\n\nIf we want to export a single value or to have a fallback value for your module, you could use a default export:\n\n```\n// module \"my-module.js\"\n\nexport default function cube(x) {\n  return x * x * x;\n}\n```\n\nThen, in another script, it is straightforward to import the default export:\n\n```\nimport cube from \"./my-module.js\";\nconsole.log(cube(3)); // 27\n```\n\n### [Using export from](#using_export_from)\n\nLet's take an example where we have the following hierarchy:\n\n*   `childModule1.js`: exporting `myFunction` and `myVariable`\n*   `childModule2.js`: exporting `MyClass`\n*   `parentModule.js`: acting as an aggregator (and doing nothing else)\n*   top level module: consuming the exports of `parentModule.js`\n\nThis is what it would look like using code snippets:\n\n```\n// In childModule1.js\nfunction myFunction() {\n  console.log(\"Hello!\");\n}\nconst myVariable = 1;\nexport { myFunction, myVariable };\n```\n\n```\n// In childModule2.js\nclass MyClass {\n  constructor(x) {\n    this.x = x;\n  }\n}\n\nexport { MyClass };\n```\n\n```\n// In parentModule.js\n// Only aggregating the exports from childModule1 and childModule2\n// to re-export them\nexport { myFunction, myVariable } from \"childModule1.js\";\nexport { MyClass } from \"childModule2.js\";\n```\n\n```\n// In top-level module\n// We can consume the exports from a single module since parentModule\n// \"collected\"/\"bundled\" them in a single source\nimport { myFunction, myVariable, MyClass } from \"parentModule.js\";\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-exports](https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-modules.html#sec-exports) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "export - JavaScript | MDN",
    "description": "The export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
    "markdown": "# do...while - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`do...while`** statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\ndo\n  statement\nwhile (condition);\n```\n\n[`statement`](#statement)\n\nA statement that is executed at least once and re-executed as long as the condition evaluates to true. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n[`condition`](#condition)\n\nAn expression evaluated _after_ each pass through the loop. If this condition [evaluates to true](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), `statement` is re-executed. When condition [evaluates to false](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), execution continues with the statement after the `do...while` loop.\n\n## [Description](#description)\n\nLike other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and re-evaluates `condition`.\n\nThe `do...while` statement syntax requires a semicolon at the end, but the [automatic semicolon insertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) process may insert one for you if the lack of a semicolon results in invalid syntax.\n\n## [Examples](#examples)\n\n### [Using do...while](#using_do...while)\n\nIn the following example, the `do...while` loop iterates at least once and reiterates until `i` is no longer less than 5.\n\n```\nlet result = \"\";\nlet i = 0;\ndo {\n  i += 1;\n  result += `${i} `;\n} while (i > 0 && i < 5);\n// Despite i === 0 this will still loop as it starts off without the test\n\nconsole.log(result);\n```\n\n### [Using false as do...while condition](#using_false_as_do...while_condition)\n\nBecause the statement is always executed once, `do...while (false)` is the same as executing the statement itself. This is a common idiom in C-like languages, which allows you to use `break` to break out of branching logic early.\n\n```\ndo {\n  if (!user.loggedIn) {\n    console.log(\"You are not logged in\");\n    break;\n  }\n  const friends = user.getFriends();\n  if (!friends.length) {\n    console.log(\"No friends found\");\n    break;\n  }\n  for (const friend of friends) {\n    handleFriend(friend);\n  }\n} while (false);\n// The rest of code\n```\n\nIn JavaScript, there are some alternatives, such as using a [labeled block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) with `break`:\n\n```\nhandleFriends: {\n  if (!user.loggedIn) {\n    console.log(\"You are not logged in\");\n    break handleFriends;\n  }\n  const friends = user.getFriends();\n  if (!friends.length) {\n    console.log(\"No friends found\");\n    break handleFriends;\n  }\n  for (const friend of friends) {\n    handleFriend(friend);\n  }\n}\n```\n\nOr using a function:\n\n```\nfunction handleFriends() {\n  if (!user.loggedIn) {\n    console.log(\"You are not logged in\");\n    return;\n  }\n  const friends = user.getFriends();\n  if (!friends.length) {\n    console.log(\"No friends found\");\n    return;\n  }\n  for (const friend of friends) {\n    handleFriend(friend);\n  }\n}\n```\n\n### [Using an assignment as a condition](#using_an_assignment_as_a_condition)\n\nIn some cases, it can make sense to use an assignment as a condition, such as this:\n\n```\ndo {\n  // …\n} while ((match = regexp.exec(str)));\n```\n\nBut when you do, there are readability tradeoffs. The [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) documentation has a [Using an assignment as a condition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while#using_an_assignment_as_a_condition) section with our recommendations.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-do-while-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-do-while-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "do...while - JavaScript | MDN",
    "description": "The do...while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
    "markdown": "# Rest parameters - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **rest parameter** syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent [variadic functions](https://en.wikipedia.org/wiki/Variadic_function) in JavaScript.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction f(a, b, ...theArgs) {\n  // …\n}\n```\n\nThere are some additional syntax restrictions:\n\n*   A function definition can only have one rest parameter.\n*   The rest parameter must be the last parameter in the function definition.\n*   [Trailing commas](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas) are not allowed after the rest parameter.\n*   The rest parameter cannot have a [default value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters).\n\n## [Description](#description)\n\nA function definition's last parameter can be prefixed with `...` (three U+002E FULL STOP characters), which will cause all remaining (user supplied) parameters to be placed within an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) object.\n\n```\nfunction myFun(a, b, ...manyMoreArgs) {\n  console.log(\"a\", a);\n  console.log(\"b\", b);\n  console.log(\"manyMoreArgs\", manyMoreArgs);\n}\n\nmyFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n\n// Console Output:\n// a, one\n// b, two\n// manyMoreArgs, [\"three\", \"four\", \"five\", \"six\"]\n```\n\nThe rest parameter may be [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), which allows you to ignore certain parameter positions.\n\n```\nfunction ignoreFirst(...[, b, c]) {\n  return b + c;\n}\n```\n\nHowever, the following are all syntax errors:\n\n```\nfunction wrong1(...one, ...wrong) {}\nfunction wrong2(...wrong, arg2, arg3) {}\nfunction wrong3(...wrong,) {}\nfunction wrong4(...wrong = []) {}\n```\n\nThe rest parameter is not counted towards the function's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) property.\n\n### [The difference between rest parameters and the arguments object](#the_difference_between_rest_parameters_and_the_arguments_object)\n\nThere are three main differences between rest parameters and the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object:\n\n*   The `arguments` object is **not a real array**, while rest parameters are [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) instances, meaning methods like [`sort()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) or [`pop()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) can be applied on it directly.\n*   The `arguments` object has the additional (deprecated) [`callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) property.\n*   In a non-strict function with simple parameters, the `arguments` object [syncs its indices with the values of parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#assigning_to_indices). The rest parameter array never updates its value when the named parameters are re-assigned.\n*   The rest parameter bundles all the _extra_ parameters into a single array, but does not contain any named argument defined _before_ the `...restParam`. The `arguments` object contains all of the parameters — including the parameters in the `...restParam` array — bundled into one array-like object.\n\n## [Examples](#examples)\n\n### [Using rest parameters](#using_rest_parameters)\n\nIn this example, the first argument is mapped to `a` and the second to `b`, so these named arguments are used as normal.\n\nHowever, the third argument, `manyMoreArgs`, will be an array that contains the third, fourth, fifth, sixth, …, nth — as many arguments as the user specifies.\n\n```\nfunction myFun(a, b, ...manyMoreArgs) {\n  console.log(\"a\", a);\n  console.log(\"b\", b);\n  console.log(\"manyMoreArgs\", manyMoreArgs);\n}\n\nmyFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n\n// a, \"one\"\n// b, \"two\"\n// manyMoreArgs, [\"three\", \"four\", \"five\", \"six\"] <-- an array\n```\n\nBelow, even though there is just one value, the last argument still gets put into an array.\n\n```\n// Using the same function definition from example above\n\nmyFun(\"one\", \"two\", \"three\");\n\n// a, \"one\"\n// b, \"two\"\n// manyMoreArgs, [\"three\"] <-- an array with just one value\n```\n\nBelow, the third argument isn't provided, but `manyMoreArgs` is still an array (albeit an empty one).\n\n```\n// Using the same function definition from example above\n\nmyFun(\"one\", \"two\");\n\n// a, \"one\"\n// b, \"two\"\n// manyMoreArgs, [] <-- still an array\n```\n\nBelow, only one argument is provided, so `b` gets the default value `undefined`, but `manyMoreArgs` is still an empty array.\n\n```\n// Using the same function definition from example above\n\nmyFun(\"one\");\n\n// a, \"one\"\n// b, undefined\n// manyMoreArgs, [] <-- still an array\n```\n\n### [Argument length](#argument_length)\n\nSince `theArgs` is an array, a count of its elements is given by the [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property. If the function's only parameter is a rest parameter, `restParams.length` will be equal to [`arguments.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length).\n\n```\nfunction fun1(...theArgs) {\n  console.log(theArgs.length);\n}\n\nfun1(); // 0\nfun1(5); // 1\nfun1(5, 6, 7); // 3\n```\n\n### [Using rest parameters in combination with ordinary parameters](#using_rest_parameters_in_combination_with_ordinary_parameters)\n\nIn the next example, a rest parameter is used to collect all parameters after the first parameter into an array. Each one of the parameter values collected into the array is then multiplied by the first parameter, and the array is returned:\n\n```\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map((element) => multiplier * element);\n}\n\nconst arr = multiply(2, 15, 25, 42);\nconsole.log(arr); // [30, 50, 84]\n```\n\n### [From arguments to an array](#from_arguments_to_an_array)\n\n[`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) methods can be used on rest parameters, but not on the `arguments` object:\n\n```\nfunction sortRestArgs(...theArgs) {\n  const sortedArgs = theArgs.sort();\n  return sortedArgs;\n}\n\nconsole.log(sortRestArgs(5, 3, 7, 1)); // 1, 3, 5, 7\n\nfunction sortArguments() {\n  const sortedArgs = arguments.sort();\n  return sortedArgs; // this will never happen\n}\n\nconsole.log(sortArguments(5, 3, 7, 1));\n// throws a TypeError (arguments.sort is not a function)\n```\n\nRest parameters were introduced to reduce the boilerplate code that was commonly used for converting a set of arguments to an array.\n\nBefore rest parameters, `arguments` need to be converted to a normal array before calling array methods on them:\n\n```\nfunction fn(a, b) {\n  const normalArray = Array.prototype.slice.call(arguments);\n  // — or —\n  const normalArray2 = [].slice.call(arguments);\n  // — or —\n  const normalArrayFrom = Array.from(arguments);\n\n  const first = normalArray.shift(); // OK, gives the first argument\n  const firstBad = arguments.shift(); // ERROR (arguments is not a normal array)\n}\n```\n\nNow, you can easily gain access to a normal array using a rest parameter:\n\n```\nfunction fn(...args) {\n  const normalArray = args;\n  const first = normalArray.shift(); // OK, gives the first argument\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Rest parameters - JavaScript | MDN",
    "description": "The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",
    "markdown": "# set - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`set`** syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\n{ set prop(val) { /* … */ } }\n{ set [expression](val) { /* … */ } }\n```\n\nThere are some additional syntax restrictions:\n\n*   A setter must have exactly one parameter.\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nThe name of the property to bind to the given function. In the same way as other properties in [object initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), it can be a string literal, a number literal, or an identifier.\n\n[`val`](#val)\n\nAn alias for the variable that holds the value attempted to be assigned to `prop`.\n\n[`expression`](#expression)\n\nYou can also use expressions for a computed property name to bind to the given function.\n\n## [Description](#description)\n\nIn JavaScript, a setter can be used to execute a function whenever an attempt is made to change a property's value. Setters are most often used in conjunction with getters.\n\nAn object property is either a data property or an accessor property, but it cannot simultaneously be both. Read [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) for more information. The setter syntax allows you to specify the setter function in an object initializer.\n\n```\nconst obj = {\n  set prop() {\n    // setter, the code executed when setting obj.prop\n  },\n}\n```\n\nProperties defined using this syntax are own properties of the created object, and they are configurable and enumerable.\n\n## [Examples](#examples)\n\n### [Defining a setter on new objects in object initializers](#defining_a_setter_on_new_objects_in_object_initializers)\n\nThe following example defines a pseudo-property `current` of object `language`. When `current` is assigned a value, it updates `log` with that value:\n\n```\nconst language = {\n  set current(name) {\n    this.log.push(name);\n  },\n  log: [],\n};\n\nlanguage.current = \"EN\";\nconsole.log(language.log); // ['EN']\n\nlanguage.current = \"FA\";\nconsole.log(language.log); // ['EN', 'FA']\n```\n\nNote that `current` is not defined, and any attempts to access it will result in `undefined`.\n\n### [Using setters in classes](#using_setters_in_classes)\n\nYou can use the exact same syntax to define public instance setters that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithGetSet {\n  #msg = \"hello world\";\n  get msg() {\n    return this.#msg;\n  }\n  set msg(x) {\n    this.#msg = `hello ${x}`;\n  }\n}\n\nconst instance = new ClassWithGetSet();\nconsole.log(instance.msg); // \"hello world\"\n\ninstance.msg = \"cake\";\nconsole.log(instance.msg); // \"hello cake\"\n```\n\nSetter properties are defined on the `prototype` property of the class and are thus shared by all instances of the class. Unlike setter properties in object literals, setter properties in classes are not enumerable.\n\nStatic setters and private setters use similar syntaxes, which are described in the [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) pages.\n\n### [Removing a setter with the `delete` operator](#removing_a_setter_with_the_delete_operator)\n\nIf you want to remove the setter, you can just [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) it:\n\n### [Defining a setter on existing objects using `defineProperty`](#defining_a_setter_on_existing_objects_using_defineproperty)\n\nTo append a setter to an _existing_ object, use [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n```\nconst o = { a: 0 };\n\nObject.defineProperty(o, \"b\", {\n  set(x) {\n    this.a = x / 2;\n  },\n});\n\no.b = 10;\n// Runs the setter, which assigns 10 / 2 (5) to the 'a' property\n\nconsole.log(o.a); // 5\n```\n\n### [Using a computed property name](#using_a_computed_property_name)\n\n```\nconst expr = \"foo\";\n\nconst obj = {\n  baz: \"bar\",\n  set [expr](v) {\n    this.baz = v;\n  },\n};\n\nconsole.log(obj.baz); // \"bar\"\n\nobj.foo = \"baz\";\n// Run the setter\n\nconsole.log(obj.baz); // \"baz\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "set - JavaScript | MDN",
    "description": "The set syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in classes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions",
    "markdown": "# Method definitions - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Method definition** is a shorter syntax for defining a function property in an object initializer. It can also be used in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\n({\n  property(parameters) {},\n  *generator(parameters) {},\n  async property(parameters) {},\n  async *generator(parameters) {},\n\n  // with computed keys\n  [expression](parameters) {},\n  *[expression](parameters) {},\n  async [expression](parameters) {},\n  async *[expression](parameters) {},\n})\n```\n\n## [Description](#description)\n\nThe shorthand syntax is similar to the [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) syntax.\n\nGiven the following code:\n\n```\nconst obj = {\n  foo: function () {\n    // …\n  },\n  bar: function () {\n    // …\n  },\n};\n```\n\nYou are now able to shorten this to:\n\n```\nconst obj = {\n  foo() {\n    // …\n  },\n  bar() {\n    // …\n  },\n};\n```\n\nProperties defined using this syntax are own properties of the created object, and they are configurable, enumerable, and writable, just like normal properties.\n\n[`function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*), [`async function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), and [`async function*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*) properties all have their respective method syntaxes; see examples below.\n\nHowever, note that the method syntax is not equivalent to a normal property with a function as its value — there are semantic differences. This makes methods defined in object literals more consistent with methods in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\n### [Method definitions are not constructable](#method_definitions_are_not_constructable)\n\nMethods cannot be constructors! They will throw a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) if you try to instantiate them. On the other hand, a property created as a function can be used as a constructor.\n\n```\nconst obj = {\n  method() {},\n};\nnew obj.method(); // TypeError: obj.method is not a constructor\n```\n\n### [Using super in method definitions](#using_super_in_method_definitions)\n\nOnly functions defined as methods have access to the [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword. `super.prop` looks up the property on the prototype of the object that the method was initialized on.\n\n```\nconst obj = {\n  __proto__: {\n    prop: \"foo\",\n  },\n  notAMethod: function () {\n    console.log(super.prop); // SyntaxError: 'super' keyword unexpected here\n  },\n};\n```\n\n## [Examples](#examples)\n\n### [Using method definitions](#using_method_definitions)\n\n```\nconst obj = {\n  a: \"foo\",\n  b() {\n    return this.a;\n  },\n};\nconsole.log(obj.b()); // \"foo\"\n```\n\n### [Method definitions in classes](#method_definitions_in_classes)\n\nYou can use the exact same syntax to define public instance methods that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithPublicInstanceMethod {\n  publicMethod() {\n    return \"hello world\";\n  }\n  secondPublicMethod() {\n    return \"goodbye world\";\n  }\n}\n\nconst instance = new ClassWithPublicInstanceMethod();\nconsole.log(instance.publicMethod()); // \"hello world\"\n```\n\nPublic instance methods are defined on the `prototype` property of the class and are thus shared by all instances of the class. They are writable, non-enumerable, and configurable.\n\nInside instance methods, [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) and [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) work like in normal methods. Usually, `this` refers to the instance itself. In subclasses, `super` lets you access the prototype of the object that the method is attached to, allowing you to call methods from the superclass.\n\n```\nclass BaseClass {\n  msg = \"hello world\";\n  basePublicMethod() {\n    return this.msg;\n  }\n}\n\nclass SubClass extends BaseClass {\n  subPublicMethod() {\n    return super.basePublicMethod();\n  }\n}\n\nconst instance = new SubClass();\nconsole.log(instance.subPublicMethod()); // \"hello world\"\n```\n\nStatic methods and private methods use similar syntaxes, which are described in the [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) pages.\n\n### [Computed property names](#computed_property_names)\n\nThe method syntax also supports [computed property names](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names).\n\n```\nconst bar = {\n  foo0: function () {\n    return 0;\n  },\n  foo1() {\n    return 1;\n  },\n  [\"foo\" + 2]() {\n    return 2;\n  },\n};\n\nconsole.log(bar.foo0()); // 0\nconsole.log(bar.foo1()); // 1\nconsole.log(bar.foo2()); // 2\n```\n\n### [Generator methods](#generator_methods)\n\nNote that the asterisk (`*`) in the generator method syntax must be _before_ the generator property name. (That is, `* g(){}` will work, but `g *(){}` will not.)\n\n```\n// Using a named property\nconst obj = {\n  g: function* () {\n    let index = 0;\n    while (true) {\n      yield index++;\n    }\n  },\n};\n\n// The same object using shorthand syntax\nconst obj2 = {\n  *g() {\n    let index = 0;\n    while (true) {\n      yield index++;\n    }\n  },\n};\n\nconst it = obj2.g();\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\n```\n\n### [Async methods](#async_methods)\n\n```\n// Using a named property\nconst obj = {\n  f: async function () {\n    await somePromise;\n  },\n};\n\n// The same object using shorthand syntax\nconst obj2 = {\n  async f() {\n    await somePromise;\n  },\n};\n```\n\n### [Async generator methods](#async_generator_methods)\n\n```\n// Using a named property\nconst obj = {\n  f: async function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\n// The same object using shorthand syntax\nconst obj2 = {\n  async *f() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Method definitions - JavaScript | MDN",
    "description": "Method definition is a shorter syntax for defining a function property in an object initializer. It can also be used in classes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",
    "markdown": "# get - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`get`** syntax binds an object property to a function that will be called when that property is looked up. It can also be used in [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\n{ get prop() { /* … */ } }\n{ get [expression]() { /* … */ } }\n```\n\nThere are some additional syntax restrictions:\n\n*   A getter must have exactly zero parameters.\n\n### [Parameters](#parameters)\n\n[`prop`](#prop)\n\nThe name of the property to bind to the given function. In the same way as other properties in [object initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), it can be a string literal, a number literal, or an identifier.\n\n[`expression`](#expression)\n\nYou can also use expressions for a computed property name to bind to the given function.\n\n## [Description](#description)\n\nSometimes, it is desirable to allow access to a property that returns a dynamically computed value, or you may want to reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a _getter_.\n\nAn object property is either a data property or an accessor property, but it cannot simultaneously be both. Read [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) for more information. The getter syntax allows you to specify the getter function in an object initializer.\n\n```\nconst obj = {\n  get prop() {\n    // getter, the code executed when reading obj.prop\n    return someValue;\n  },\n};\n```\n\nProperties defined using this syntax are own properties of the created object, and they are configurable and enumerable.\n\n## [Examples](#examples)\n\n### [Defining a getter on new objects in object initializers](#defining_a_getter_on_new_objects_in_object_initializers)\n\nThis will create a pseudo-property `latest` for object `obj`, which will return the last array item in `log`.\n\n```\nconst obj = {\n  log: [\"example\", \"test\"],\n  get latest() {\n    return this.log.at(-1);\n  },\n};\nconsole.log(obj.latest); // \"test\"\n```\n\nNote that attempting to assign a value to `latest` will not change it.\n\n### [Using getters in classes](#using_getters_in_classes)\n\nYou can use the exact same syntax to define public instance getters that are available on class instances. In classes, you don't need the comma separator between methods.\n\n```\nclass ClassWithGetSet {\n  #msg = \"hello world\";\n  get msg() {\n    return this.#msg;\n  }\n  set msg(x) {\n    this.#msg = `hello ${x}`;\n  }\n}\n\nconst instance = new ClassWithGetSet();\nconsole.log(instance.msg); // \"hello world\"\n\ninstance.msg = \"cake\";\nconsole.log(instance.msg); // \"hello cake\"\n```\n\nGetter properties are defined on the `prototype` property of the class and are thus shared by all instances of the class. Unlike getter properties in object literals, getter properties in classes are not enumerable.\n\nStatic getters and private getters use similar syntaxes, which are described in the [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) and [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) pages.\n\n### [Deleting a getter using the `delete` operator](#deleting_a_getter_using_the_delete_operator)\n\nIf you want to remove the getter, you can just [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete) it:\n\n### [Defining a getter on existing objects using `defineProperty`](#defining_a_getter_on_existing_objects_using_defineproperty)\n\nTo append a getter to an existing object later at any time, use [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n```\nconst o = { a: 0 };\n\nObject.defineProperty(o, \"b\", {\n  get() {\n    return this.a + 1;\n  },\n});\n\nconsole.log(o.b); // Runs the getter, which yields a + 1 (which is 1)\n```\n\n### [Using a computed property name](#using_a_computed_property_name)\n\n```\nconst expr = \"foo\";\n\nconst obj = {\n  get [expr]() {\n    return \"bar\";\n  },\n};\n\nconsole.log(obj.foo); // \"bar\"\n```\n\n### [Defining static getters](#defining_static_getters)\n\n```\nclass MyConstants {\n  static get foo() {\n    return \"foo\";\n  }\n}\n\nconsole.log(MyConstants.foo); // 'foo'\nMyConstants.foo = \"bar\";\nconsole.log(MyConstants.foo); // 'foo', a static getter's value cannot be changed\n```\n\n### [Smart / self-overwriting / lazy getters](#smart_self-overwriting_lazy_getters)\n\nGetters give you a way to _define_ a property of an object, but they do not _calculate_ the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.\n\nAn additional optimization technique to lazify or delay the calculation of a property value and cache it for later access are _smart_ (or _[memoized](https://en.wikipedia.org/wiki/Memoization)_) getters. The value is calculated the first time the getter is called and is then cached so subsequent accesses return the cached value without recalculating it. This is useful in the following situations:\n\n*   If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc.).\n*   If the value isn't needed just now. It will be used later, or in some cases, it's not used at all.\n*   If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.\n\n**Note:** This means that you shouldn't write a lazy getter for a property whose value you expect to change, because if the getter is lazy, then it will not recalculate the value.\n\nNote that getters are not \"lazy\" or \"memoized\" by nature; you must implement this technique if you desire this behavior.\n\nIn the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally, the value gets returned.\n\n```\nconst obj = {\n  get notifier() {\n    delete this.notifier;\n    this.notifier = document.getElementById(\"bookmarked-notification-anchor\");\n    return this.notifier;\n  },\n};\n```\n\n### [get vs. defineProperty](#get_vs._defineproperty)\n\nWhile using the `get` keyword and [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) have similar results, there is a subtle difference between the two when used on [`classes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\nWhen using `get` the property will be defined on the instance's prototype, while using [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) the property will be defined on the instance it is applied to.\n\n```\nclass Example {\n  get hello() {\n    return \"world\";\n  }\n}\n\nconst obj = new Example();\nconsole.log(obj.hello);\n// \"world\"\n\nconsole.log(Object.getOwnPropertyDescriptor(obj, \"hello\"));\n// undefined\n\nconsole.log(\n  Object.getOwnPropertyDescriptor(Object.getPrototypeOf(obj), \"hello\"),\n);\n// { configurable: true, enumerable: false, get: function get hello() { return 'world'; }, set: undefined }\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-method-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-method-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "get - JavaScript | MDN",
    "description": "The get syntax binds an object property to a function that will be called when that property is looked up. It can also be used in classes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty",
    "markdown": "# Empty statement - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAn **empty statement** is used to provide no statement, although the JavaScript syntax would expect one.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\nThe empty statement is a semicolon (`;`) indicating that no statement will be executed, even if JavaScript syntax requires one.\n\nThe opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block), which combines several statements into a single one.\n\n## [Examples](#examples)\n\n### [Empty loop body](#empty_loop_body)\n\nThe empty statement is sometimes used with loop statements. See the following example with an empty loop body:\n\n```\nconst arr = [1, 2, 3];\n\n// Assign all array values to 0\nfor (let i = 0; i < arr.length; arr[i++] = 0) /* empty statement */ ;\n\nconsole.log(arr);\n// [0, 0, 0]\n```\n\n### [Unintentional usage](#unintentional_usage)\n\nIt is a good idea to comment _intentional_ use of the empty statement, as it is not really obvious to distinguish from a normal semicolon.\n\nIn the following example, the usage is probably not intentional:\n\n```\nif (condition);      // Caution, this \"if\" does nothing!\n  killTheUniverse(); // So this always gets executed!!!\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-empty-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-empty-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Empty statement - JavaScript | MDN",
    "description": "An empty statement is used to provide no statement, although the\n  JavaScript syntax would expect one.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
    "markdown": "# The arguments object - JavaScript\n\n**`arguments`** is an array-like object accessible inside [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions) that contains the values of the arguments passed to that function.\n\n## [Try it](#try_it)\n\n## [Description](#description)\n\nThe `arguments` object is a local variable available within all non-[arrow](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) functions. You can refer to a function's arguments inside that function by using its `arguments` object. It has entries for each argument the function was called with, with the first entry's index at `0`.\n\nFor example, if a function is passed 3 arguments, you can access them as follows:\n\n```\narguments[0]; // first argument\narguments[1]; // second argument\narguments[2]; // third argument\n```\n\nThe `arguments` object is useful for functions called with more arguments than they are formally declared to accept, called [_variadic functions_](https://en.wikipedia.org/wiki/Variadic_function), such as [`Math.min()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min). This example function accepts any number of string arguments and returns the longest one:\n\n```\nfunction longestString() {\n  let longest = \"\";\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i].length > longest.length) {\n      longest = arguments[i];\n    }\n  }\n  return longest;\n}\n```\n\nYou can use [`arguments.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length) to count how many arguments the function was called with. If you instead want to count how many parameters a function is declared to accept, inspect that function's [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) property.\n\n### [Assigning to indices](#assigning_to_indices)\n\nEach argument index can also be set or reassigned:\n\n```\narguments[1] = \"new value\";\n```\n\nNon-strict functions that only have simple parameters (that is, no rest, default, or destructured parameters) will sync the new value of parameters with the `arguments` object, and vice versa:\n\n```\nfunction func(a) {\n  arguments[0] = 99; // updating arguments[0] also updates a\n  console.log(a);\n}\nfunc(10); // 99\n\nfunction func2(a) {\n  a = 99; // updating a also updates arguments[0]\n  console.log(arguments[0]);\n}\nfunc2(10); // 99\n```\n\nNon-strict functions that _are_ passed [rest](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), [default](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), or [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) parameters will not sync new values assigned to parameters in the function body with the `arguments` object. Instead, the `arguments` object in non-strict functions with complex parameters will always reflect the values passed to the function when the function was called.\n\n```\nfunction funcWithDefault(a = 55) {\n  arguments[0] = 99; // updating arguments[0] does not also update a\n  console.log(a);\n}\nfuncWithDefault(10); // 10\n\nfunction funcWithDefault2(a = 55) {\n  a = 99; // updating a does not also update arguments[0]\n  console.log(arguments[0]);\n}\nfuncWithDefault2(10); // 10\n\n// An untracked default parameter\nfunction funcWithDefault3(a = 55) {\n  console.log(arguments[0]);\n  console.log(arguments.length);\n}\nfuncWithDefault3(); // undefined; 0\n```\n\nThis is the same behavior exhibited by all [strict-mode functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#making_eval_and_arguments_simpler), regardless of the type of parameters they are passed. That is, assigning new values to parameters in the body of the function never affects the `arguments` object, nor will assigning new values to the `arguments` indices affect the value of parameters, even when the function only has simple parameters.\n\n**Note:** You cannot write a `\"use strict\";` directive in the body of a function definition that accepts rest, default, or destructured parameters. Doing so will throw [a syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Strict_non_simple_params).\n\n### [arguments is an array-like object](#arguments_is_an_array-like_object)\n\n`arguments` is an array-like object, which means that `arguments` has a [`length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length) property and properties indexed from zero, but it doesn't have [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)'s built-in methods like [`forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) or [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map). However, it can be converted to a real `Array`, using one of [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from), or [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\n```\nconst args = Array.prototype.slice.call(arguments);\n// or\nconst args = Array.from(arguments);\n// or\nconst args = [...arguments];\n```\n\nFor common use cases, using it as an array-like object is sufficient, since it both [is iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator) and has `length` and number indices. For example, [`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) accepts array-like objects.\n\n```\nfunction midpoint() {\n  return (\n    (Math.min.apply(null, arguments) + Math.max.apply(null, arguments)) / 2\n  );\n}\n\nconsole.log(midpoint(3, 1, 4, 1, 5)); // 3\n```\n\n## [Properties](#properties)\n\n[`arguments.callee`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) Deprecated\n\nReference to the currently executing function that the arguments belong to. Forbidden in strict mode.\n\n[`arguments.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length)\n\nThe number of arguments that were passed to the function.\n\n[`arguments[@@iterator]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator)\n\nReturns a new [Array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator) object that contains the values for each index in `arguments`.\n\n## [Examples](#examples)\n\n### [Defining a function that concatenates several strings](#defining_a_function_that_concatenates_several_strings)\n\nThis example defines a function that concatenates several strings. The function's only formal argument is a string containing the characters that separate the items to concatenate.\n\n```\nfunction myConcat(separator) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  return args.join(separator);\n}\n```\n\nYou can pass as many arguments as you like to this function. It returns a string list using each argument in the list:\n\n```\nmyConcat(\", \", \"red\", \"orange\", \"blue\");\n// \"red, orange, blue\"\n\nmyConcat(\"; \", \"elephant\", \"giraffe\", \"lion\", \"cheetah\");\n// \"elephant; giraffe; lion; cheetah\"\n\nmyConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\");\n// \"sage. basil. oregano. pepper. parsley\"\n```\n\n### [Defining a function that creates HTML lists](#defining_a_function_that_creates_html_lists)\n\nThis example defines a function that creates a string containing HTML for a list. The only formal argument for the function is a string that is `\"u\"` if the list is to be [unordered (bulleted)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul), or `\"o\"` if the list is to be [ordered (numbered)](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol). The function is defined as follows:\n\n```\nfunction list(type) {\n  let html = `<${type}l><li>`;\n  const args = Array.prototype.slice.call(arguments, 1);\n  html += args.join(\"</li><li>\");\n  html += `</li></${type}l>`; // end list\n  return html;\n}\n```\n\nYou can pass any number of arguments to this function, and it adds each argument as a list item to a list of the type indicated. For example:\n\n```\nlist(\"u\", \"One\", \"Two\", \"Three\");\n// \"<ul><li>One</li><li>Two</li><li>Three</li></ul>\"\n```\n\n### [Using typeof with arguments](#using_typeof_with_arguments)\n\nThe [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator returns `'object'` when used with `arguments`\n\n```\nconsole.log(typeof arguments); // 'object'\n```\n\nThe type of individual arguments can be determined by indexing `arguments`:\n\n```\nconsole.log(typeof arguments[0]); // returns the type of the first argument\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-arguments-exotic-objects](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-arguments-exotic-objects) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "The arguments object - JavaScript | MDN",
    "description": "arguments is an array-like object accessible inside functions that contains the values of the arguments passed to that function.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
    "markdown": "# for - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`for`** statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)) to be executed in the loop.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfor (initialization; condition; afterthought)\n  statement\n```\n\n[`initialization`](#initialization) Optional\n\nAn expression (including [assignment expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)) or variable declaration evaluated once before the loop begins. Typically used to initialize a counter variable. This expression may optionally declare new variables with `var` or `let` keywords. Variables declared with `var` are not local to the loop, i.e. they are in the same scope the `for` loop is in. Variables declared with `let` are local to the statement.\n\nThe result of this expression is discarded.\n\n[`condition`](#condition) Optional\n\nAn expression to be evaluated before each loop iteration. If this expression [evaluates to true](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), `statement` is executed. If the expression [evaluates to false](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), execution exits the loop and goes to the first statement after the `for` construct.\n\nThis conditional test is optional. If omitted, the condition always evaluates to true.\n\n[`afterthought`](#afterthought) Optional\n\nAn expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of `condition`. Generally used to update or increment the counter variable.\n\n[`statement`](#statement)\n\nA statement that is executed as long as the condition evaluates to true. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements. To execute no statement within the loop, use an [empty statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty) (`;`).\n\n## [Description](#description)\n\nLike other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and re-evaluates `afterthought` then `condition`.\n\n## [Examples](#examples)\n\n### [Using for](#using_for)\n\nThe following `for` statement starts by declaring the variable `i` and initializing it to `0`. It checks that `i` is less than nine, performs the two succeeding statements, and increments `i` by 1 after each pass through the loop.\n\n```\nfor (let i = 0; i < 9; i++) {\n  console.log(i);\n  // more statements\n}\n```\n\n### [Initialization block syntax](#initialization_block_syntax)\n\nThe initialization block accepts both expressions and variable declarations. However, expressions cannot use the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator unparenthesized, because that is ambiguous with a [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\n```\nfor (let i = \"start\" in window ? window.start : 0; i < 9; i++) {\n  console.log(i);\n}\n// SyntaxError: 'for-in' loop variable declaration may not have an initializer.\n```\n\n```\n// Parenthesize the whole initializer\nfor (let i = (\"start\" in window ? window.start : 0); i < 9; i++) {\n  console.log(i);\n}\n\n// Parenthesize the `in` expression\nfor (let i = (\"start\" in window) ? window.start : 0; i < 9; i++) {\n  console.log(i);\n}\n```\n\n### [Optional for expressions](#optional_for_expressions)\n\nAll three expressions in the head of the `for` loop are optional. For example, it is not required to use the `initialization` block to initialize variables:\n\n```\nlet i = 0;\nfor (; i < 9; i++) {\n  console.log(i);\n  // more statements\n}\n```\n\nLike the `initialization` block, the `condition` part is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.\n\n```\nfor (let i = 0; ; i++) {\n  console.log(i);\n  if (i > 3) break;\n  // more statements\n}\n```\n\nYou can also omit all three expressions. Again, make sure to use a [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.\n\n```\nlet i = 0;\n\nfor (;;) {\n  if (i > 3) break;\n  console.log(i);\n  i++;\n}\n```\n\nHowever, in the case where you are not fully using all three expression positions — especially if you are not declaring variables with the first expression but mutating something in the upper scope — consider using a [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loop instead, which makes the intention clearer.\n\n```\nlet i = 0;\n\nwhile (i <= 3) {\n  console.log(i);\n  i++;\n}\n```\n\n### [Lexical declarations in the initialization block](#lexical_declarations_in_the_initialization_block)\n\nDeclaring a variable within the initialization block has important differences from declaring it in the upper [scope](https://developer.mozilla.org/en-US/docs/Glossary/Scope), especially when creating a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) within the loop body. For example, for the code below:\n\n```\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n```\n\nIt logs `0`, `1`, and `2`, as expected. However, if the variable is defined in the upper scope:\n\n```\nlet i = 0;\nfor (; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n```\n\nIt logs `3`, `3`, and `3`. The reason is that each `setTimeout` creates a new closure that closes over the `i` variable, but if the `i` is not scoped to the loop body, all closures will reference the same variable when they eventually get called — and due to the asynchronous nature of [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout), it will happen after the loop has already exited, causing the value of `i` in all queued callbacks' bodies to have the value of `3`.\n\nThis also happens if you use a `var` statement as the initialization, because variables declared with `var` are only function-scoped, but not lexically scoped (i.e. they can't be scoped to the loop body).\n\n```\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n// Logs 3, 3, 3\n```\n\nThe scoping effect of the initialization block can be understood as if the declaration happens within the loop body, but just happens to be accessible within the `condition` and `afterthought` parts. More precisely, `let` declarations are special-cased by `for` loops — if `initialization` is a `let` declaration, then every time, after the loop body is evaluated, the following happens:\n\n1.  A new lexical scope is created with new `let`\\-declared variables.\n2.  The binding values from the last iteration are used to re-initialize the new variables.\n3.  `afterthought` is evaluated in the new scope.\n\nSo re-assigning the new variables within `afterthought` does not affect the bindings from the previous iteration.\n\nA new lexical scope is also created after `initialization`, just before `condition` is evaluated for the first time. These details can be observed by creating closures, which allow to get hold of a binding at any particular point. For example, in this code a closure created within the `initialization` section does not get updated by re-assignments of `i` in the `afterthought`:\n\n```\nfor (let i = 0, getI = () => i; i < 3; i++) {\n  console.log(getI());\n}\n// Logs 0, 0, 0\n```\n\nThis does not log \"0, 1, 2\", like what would happen if `getI` is declared in the loop body. This is because `getI` is not re-evaluated on each iteration — rather, the function is created once and closes over the `i` variable, which refers to the variable declared when the loop was first initialized. Subsequent updates to the value of `i` actually create new variables called `i`, which `getI` does not see. A way to fix this is to re-compute `getI` every time `i` updates:\n\n```\nfor (let i = 0, getI = () => i; i < 3; i++, getI = () => i) {\n  console.log(getI());\n}\n// Logs 0, 1, 2\n```\n\nThe `i` variable inside the `initialization` is distinct from the `i` variable inside every iteration, including the first. So, in this example, `getI` returns 0, even though the value of `i` inside the iteration is incremented beforehand:\n\n```\nfor (let i = 0, getI = () => i; i < 3; ) {\n  i++;\n  console.log(getI());\n}\n// Logs 0, 0, 0\n```\n\nIn fact, you can capture this initial binding of the `i` variable and re-assign it later, and this updated value will not be visible to the loop body, which sees the next new binding of `i`.\n\n```\nfor (\n  let i = 0, getI = () => i, incrementI = () => i++;\n  getI() < 3;\n  incrementI()\n) {\n  console.log(i);\n}\n// Logs 0, 0, 0\n```\n\nThis logs \"0, 0, 0\", because the `i` variable in each loop evaluation is actually a separate variable, but `getI` and `incrementI` both read and write the _initial_ binding of `i`, not what was subsequently declared.\n\n### [Using for without a body](#using_for_without_a_body)\n\nThe following `for` cycle calculates the offset position of a node in the `afterthought` section, and therefore it does not require the use of a `statement` section, a semicolon is used instead.\n\n```\nfunction showOffsetPos(id) {\n  let left = 0;\n  let top = 0;\n  for (\n    let itNode = document.getElementById(id); // initialization\n    itNode; // condition\n    left += itNode.offsetLeft,\n      top += itNode.offsetTop,\n      itNode = itNode.offsetParent // afterthought\n  ); // semicolon\n\n  console.log(\n    `Offset position of \"${id}\" element:\nleft: ${left}px;\ntop: ${top}px;`,\n  );\n}\n\nshowOffsetPos(\"content\");\n\n// Logs:\n// Offset position of \"content\" element:\n// left: 0px;\n// top: 153px;\n```\n\nNote that the semicolon after the `for` statement is mandatory, because it stands as an [empty statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty). Otherwise, the `for` statement acquires the following `console.log` line as its `statement` section, which makes the `log` execute multiple times.\n\n### [Using for with two iterating variables](#using_for_with_two_iterating_variables)\n\nYou can create two counters that are updated simultaneously in a for loop using the [comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator). Multiple `let` and `var` declarations can also be joined with commas.\n\n```\nconst arr = [1, 2, 3, 4, 5, 6];\nfor (let l = 0, r = arr.length - 1; l < r; l++, r--) {\n  console.log(arr[l], arr[r]);\n}\n// 1 6\n// 2 5\n// 3 4\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-for-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "for - JavaScript | MDN",
    "description": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends",
    "markdown": "# extends - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`extends`** keyword is used in [class declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) or [class expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class) to create a class that is a child of another class.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nclass ChildClass extends ParentClass { /* … */ }\n```\n\n[`ParentClass`](#parentclass)\n\nAn expression that evaluates to a constructor function (including a class) or `null`.\n\n## [Description](#description)\n\nThe `extends` keyword can be used to subclass custom classes as well as built-in objects.\n\nAny constructor that can be called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) and has the [`prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property can be the candidate for the parent class. The two conditions must both hold — for example, [bound functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) and [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) can be constructed, but they don't have a `prototype` property, so they cannot be subclassed.\n\n```\nfunction OldStyleClass() {\n  this.someProperty = 1;\n}\nOldStyleClass.prototype.someMethod = function () {};\n\nclass ChildClass extends OldStyleClass {}\n\nclass ModernClass {\n  someProperty = 1;\n  someMethod() {}\n}\n\nclass AnotherChildClass extends ModernClass {}\n```\n\nThe `prototype` property of the `ParentClass` must be an [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) or [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null), but you would rarely worry about this in practice, because a non-object `prototype` doesn't behave as it should anyway. (It's ignored by the [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.)\n\n```\nfunction ParentClass() {}\nParentClass.prototype = 3;\n\nclass ChildClass extends ParentClass {}\n// Uncaught TypeError: Class extends value does not have valid prototype property 3\n\nconsole.log(Object.getPrototypeOf(new ParentClass()));\n// [Object: null prototype] {}\n// Not actually a number!\n```\n\n`extends` sets the prototype for both `ChildClass` and `ChildClass.prototype`.\n\n|     | Prototype of `ChildClass` | Prototype of `ChildClass.prototype` |\n| --- | --- | --- |\n| `extends` clause absent | `Function.prototype` | `Object.prototype` |\n| [`extends null`](#extending_null) | `Function.prototype` | `null` |\n| `extends ParentClass` | `ParentClass` | `ParentClass.prototype` |\n\n```\nclass ParentClass {}\nclass ChildClass extends ParentClass {}\n\n// Allows inheritance of static properties\nObject.getPrototypeOf(ChildClass) === ParentClass;\n// Allows inheritance of instance properties\nObject.getPrototypeOf(ChildClass.prototype) === ParentClass.prototype;\n```\n\nThe right-hand side of `extends` does not have to be an identifier. You can use any expression that evaluates to a constructor. This is often useful to create [mixins](#mix-ins). The `this` value in the `extends` expression is the `this` surrounding the class definition, and referring to the class's name is a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) because the class is not initialized yet. [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) and [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) work as expected in this expression.\n\n```\nclass SomeClass extends class {\n  constructor() {\n    console.log(\"Base class\");\n  }\n} {\n  constructor() {\n    super();\n    console.log(\"Derived class\");\n  }\n}\n\nnew SomeClass();\n// Base class\n// Derived class\n```\n\nWhile the base class may return anything from its constructor, the derived class must return an object or `undefined`, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown.\n\n```\nclass ParentClass {\n  constructor() {\n    return 1;\n  }\n}\n\nconsole.log(new ParentClass()); // ParentClass {}\n// The return value is ignored because it's not an object\n// This is consistent with function constructors\n\nclass ChildClass extends ParentClass {\n  constructor() {\n    super();\n    return 1;\n  }\n}\n\nconsole.log(new ChildClass()); // TypeError: Derived constructors may only return object or undefined\n```\n\nIf the parent class constructor returns an object, that object will be used as the `this` value for the derived class when further initializing [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields). This trick is called [\"return overriding\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#returning_overriding_object), which allows a derived class's fields (including [private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) ones) to be defined on unrelated objects.\n\n### [Subclassing built-ins](#subclassing_built-ins)\n\n**Warning:** The standard committee now holds the position that the built-in subclassing mechanism in previous spec versions is over-engineered and causes non-negligible performance and security impacts. New built-in methods consider less about subclasses, and engine implementers are [investigating whether to remove certain subclassing mechanisms](https://github.com/tc39/proposal-rm-builtin-subclassing). Consider using composition instead of inheritance when enhancing built-ins.\n\nHere are some things you may expect when extending a class:\n\n*   When calling a static factory method (like [`Promise.resolve()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) or [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)) on a subclass, the returned instance is always an instance of the subclass.\n*   When calling an instance method that returns a new instance (like [`Promise.prototype.then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) or [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) on a subclass, the returned instance is always an instance of the subclass.\n*   Instance methods try to delegate to a minimal set of primitive methods where possible. For example, for a subclass of [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), overriding [`then()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) automatically causes the behavior of [`catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) to change; or for a subclass of [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), overriding [`set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) automatically causes the behavior of the [`Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) constructor to change.\n\nHowever, the above expectations take non-trivial efforts to implement properly.\n\n*   The first one requires the static method to read the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) to get the constructor for constructing the returned instance. This means `[p1, p2, p3].map(Promise.resolve)` throws an error because the `this` inside `Promise.resolve` is `undefined`. A way to fix this is to fall back to the base class if `this` is not a constructor, like [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) does, but that still means the base class is special-cased.\n*   The second one requires the instance method to read [`this.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) to get the constructor function. However, `new this.constructor()` may break legacy code, because the `constructor` property is both writable and configurable and is not protected in any way. Therefore, many copying built-in methods use the constructor's [`@@species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species) property instead (which by default just returns `this`, the constructor itself). However, `@@species` allows running arbitrary code and creating instances of arbitrary type, which poses a security concern and greatly complicates subclassing semantics.\n*   The third one leads to visible invocations of custom code, which makes a lot of optimizations harder to implement. For example, if the `Map()` constructor is called with an iterable of _x_ elements, then it must visibly invoke the `set()` method _x_ times, instead of just copying the elements into the internal storage.\n\nThese problems are not unique to built-in classes. For your own classes, you will likely have to make the same decisions. However, for built-in classes, optimizability and security are a much bigger concern. New built-in methods always construct the base class and call as few custom methods as possible. If you want to subclass built-ins while achieving the above expectations, you need to override all methods that have the default behavior baked into them. Any addition of new methods on the base class may also break the semantics of your subclass because they are inherited by default. Therefore, a better way to extend built-ins is to use [_composition_](#avoiding_inheritance).\n\n### [Extending null](#extending_null)\n\n`extends null` was designed to allow easy creation of [objects that do not inherit from `Object.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). However, due to unsettled decisions about whether `super()` should be called within the constructor, it's not possible to construct such a class in practice using any constructor implementation that doesn't return an object. [The TC39 committee is working on re-enabling this feature](https://github.com/tc39/ecma262/pull/1321).\n\n```\nnew (class extends null {})();\n// TypeError: Super constructor null of anonymous class is not a constructor\n\nnew (class extends null {\n  constructor() {}\n})();\n// ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor\n\nnew (class extends null {\n  constructor() {\n    super();\n  }\n})();\n// TypeError: Super constructor null of anonymous class is not a constructor\n```\n\nInstead, you need to explicitly return an instance from the constructor.\n\n```\nclass NullClass extends null {\n  constructor() {\n    // Using new.target allows derived classes to\n    // have the correct prototype chain\n    return Object.create(new.target.prototype);\n  }\n}\n\nconst proto = Object.getPrototypeOf;\nconsole.log(proto(proto(new NullClass()))); // null\n```\n\n## [Examples](#examples)\n\n### [Using extends](#using_extends)\n\nThe first example creates a class called `Square` from a class called `Polygon`. This example is extracted from this [live demo](https://googlechrome.github.io/samples/classes-es6/index.html) [(source)](https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html).\n\n```\nclass Square extends Polygon {\n  constructor(length) {\n    // Here, it calls the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.height * this.width;\n  }\n}\n```\n\n### [Extending plain objects](#extending_plain_objects)\n\nClasses cannot extend regular (non-constructible) objects. If you want to inherit from a regular object by making all properties of this object available on inherited instances, you can instead use [`Object.setPrototypeOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf):\n\n```\nconst Animal = {\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  },\n};\n\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nObject.setPrototypeOf(Dog.prototype, Animal);\n\nconst d = new Dog(\"Mitzie\");\nd.speak(); // Mitzie makes a noise.\n```\n\n### [Extending built-in objects](#extending_built-in_objects)\n\nThis example extends the built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. This example is extracted from this [live demo](https://googlechrome.github.io/samples/classes-es6/index.html) [(source)](https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html).\n\n```\nclass MyDate extends Date {\n  getFormattedDate() {\n    const months = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n    ];\n    return `${this.getDate()}-${months[this.getMonth()]}-${this.getFullYear()}`;\n  }\n}\n```\n\n### [Extending `Object`](#extending_object)\n\nAll JavaScript objects inherit from `Object.prototype` by default, so writing `extends Object` at first glance seems redundant. The only difference from not writing `extends` at all is that the constructor itself inherits static methods from `Object`, such as [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). However, because no `Object` static method uses the `this` value, there's still no value in inheriting these static methods.\n\nThe [`Object()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object) constructor special-cases the subclassing scenario. If it's implicitly called via [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super), it always initializes a new object with `new.target.prototype` as its prototype. Any value passed to `super()` is ignored.\n\n```\nclass C extends Object {\n  constructor(v) {\n    super(v);\n  }\n}\n\nconsole.log(new C(1) instanceof Number); // false\nconsole.log(C.keys({ a: 1, b: 2 })); // [ 'a', 'b' ]\n```\n\nCompare this behavior with a custom wrapper that does not special-case subclassing:\n\n```\nfunction MyObject(v) {\n  return new Object(v);\n}\nclass D extends MyObject {\n  constructor(v) {\n    super(v);\n  }\n}\nconsole.log(new D(1) instanceof Number); // true\n```\n\n### [Species](#species)\n\nYou might want to return [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) objects in your derived array class `MyArray`. The species pattern lets you override default constructors.\n\nFor example, when using methods such as [`Array.prototype.map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) that return the default constructor, you want these methods to return a parent `Array` object, instead of the `MyArray` object. The [`Symbol.species`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species) symbol lets you do this:\n\n```\nclass MyArray extends Array {\n  // Overwrite species to the parent Array constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\n\nconst a = new MyArray(1, 2, 3);\nconst mapped = a.map((x) => x * x);\n\nconsole.log(mapped instanceof MyArray); // false\nconsole.log(mapped instanceof Array); // true\n```\n\nThis behavior is implemented by many built-in copying methods. For caveats of this feature, see the [subclassing built-ins](#subclassing_built-ins) discussion.\n\n### [Mix-ins](#mix-ins)\n\nAbstract subclasses or _mix-ins_ are templates for classes. A class can only have a single superclass, so multiple inheritance from tooling classes, for example, is not possible. The functionality must be provided by the superclass.\n\nA function with a superclass as input and a subclass extending that superclass as output can be used to implement mix-ins:\n\n```\nconst calculatorMixin = (Base) =>\n  class extends Base {\n    calc() {}\n  };\n\nconst randomizerMixin = (Base) =>\n  class extends Base {\n    randomize() {}\n  };\n```\n\nA class that uses these mix-ins can then be written like this:\n\n```\nclass Foo {}\nclass Bar extends calculatorMixin(randomizerMixin(Foo)) {}\n```\n\n### [Avoiding inheritance](#avoiding_inheritance)\n\nInheritance is a very strong coupling relationship in object-oriented programming. It means all behaviors of the base class are inherited by the subclass by default, which may not always be what you want. For example, consider the implementation of a `ReadOnlyMap`:\n\n```\nclass ReadOnlyMap extends Map {\n  set() {\n    throw new TypeError(\"A read-only map must be set at construction time.\");\n  }\n}\n```\n\nIt turns out that `ReadOnlyMap` is not constructible, because the [`Map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map) constructor calls the instance's `set()` method.\n\n```\nconst m = new ReadOnlyMap([[\"a\", 1]]); // TypeError: A read-only map must be set at construction time.\n```\n\nWe may get around this by using a private flag to indicate whether the instance is being constructed. However, a more significant problem with this design is that it breaks the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle), which states that a subclass should be substitutable for its superclass. If a function expects a `Map` object, it should be able to use a `ReadOnlyMap` object as well, which will break here.\n\nInheritance often leads to [the circle-ellipse problem](https://en.wikipedia.org/wiki/Circle%E2%80%93ellipse_problem), because neither type perfectly entails the behavior of the other, although they share a lot of common traits. In general, unless there's a very good reason to use inheritance, it's better to use composition instead. Composition means that a class has a reference to an object of another class, and only uses that object as an implementation detail.\n\n```\nclass ReadOnlyMap {\n  #data;\n  constructor(values) {\n    this.#data = new Map(values);\n  }\n  get(key) {\n    return this.#data.get(key);\n  }\n  has(key) {\n    return this.#data.has(key);\n  }\n  get size() {\n    return this.#data.size;\n  }\n  *keys() {\n    yield* this.#data.keys();\n  }\n  *values() {\n    yield* this.#data.values();\n  }\n  *entries() {\n    yield* this.#data.entries();\n  }\n  *[Symbol.iterator]() {\n    yield* this.#data[Symbol.iterator]();\n  }\n}\n```\n\nIn this case, the `ReadOnlyMap` class is not a subclass of `Map`, but it still implements most of the same methods. This means more code duplication, but it also means that the `ReadOnlyMap` class is not strongly coupled to the `Map` class, and does not easily break if the `Map` class is changed, avoiding the [semantic issues of built-in subclassing](#subclassing_built-ins). For example, if the `Map` class adds an [`emplace()`](https://github.com/tc39/proposal-upsert) method that does not call `set()`, it would cause the `ReadOnlyMap` class to no longer be read-only unless the latter is updated accordingly to override `emplace()` as well. Moreover, `ReadOnlyMap` objects do not have the `set` method at all, which is more accurate than throwing an error at runtime.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "extends - JavaScript | MDN",
    "description": "The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor",
    "markdown": "# constructor - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`constructor`** method is a special method of a [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) for creating and initializing an object instance of that class.\n\n**Note:** This page introduces the `constructor` syntax. For the `constructor` property present on all objects, see [`Object.prototype.constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nconstructor() { /* … */ }\nconstructor(argument0) { /* … */ }\nconstructor(argument0, argument1) { /* … */ }\nconstructor(argument0, argument1, /* …, */ argumentN) { /* … */ }\n```\n\nThere are some additional syntax restrictions:\n\n*   A class method called `constructor` cannot be a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set), [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), or [generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n*   A class cannot have more than one `constructor` method.\n\n## [Description](#description)\n\nA constructor enables you to provide any custom initialization that must be done before any other methods can be called on an instantiated object.\n\n```\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  introduce() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst otto = new Person(\"Otto\");\n\notto.introduce(); // Hello, my name is Otto\n```\n\nIf you don't provide your own constructor, then a default constructor will be supplied for you. If your class is a base class, the default constructor is empty:\n\nIf your class is a derived class, the default constructor calls the parent constructor, passing along any arguments that were provided:\n\n```\nconstructor(...args) {\n  super(...args);\n}\n```\n\n**Note:** The difference between an explicit constructor like the one above and the default constructor is that the latter doesn't actually invoke [the array iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator) through [argument spreading](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\nThat enables code like this to work:\n\n```\nclass ValidationError extends Error {\n  printCustomerMessage() {\n    return `Validation failed :-( (details: ${this.message})`;\n  }\n}\n\ntry {\n  throw new ValidationError(\"Not a valid phone number\");\n} catch (error) {\n  if (error instanceof ValidationError) {\n    console.log(error.name); // This is Error instead of ValidationError!\n    console.log(error.printCustomerMessage());\n  } else {\n    console.log(\"Unknown error\", error);\n    throw error;\n  }\n}\n```\n\nThe `ValidationError` class doesn't need an explicit constructor, because it doesn't need to do any custom initialization. The default constructor then takes care of initializing the parent `Error` from the argument it is given.\n\nHowever, if you provide your own constructor, and your class derives from some parent class, then you must explicitly call the parent class constructor using [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super). For example:\n\n```\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message); // call parent class constructor\n    this.name = \"ValidationError\";\n    this.code = \"42\";\n  }\n\n  printCustomerMessage() {\n    return `Validation failed :-( (details: ${this.message}, code: ${this.code})`;\n  }\n}\n\ntry {\n  throw new ValidationError(\"Not a valid phone number\");\n} catch (error) {\n  if (error instanceof ValidationError) {\n    console.log(error.name); // Now this is ValidationError!\n    console.log(error.printCustomerMessage());\n  } else {\n    console.log(\"Unknown error\", error);\n    throw error;\n  }\n}\n```\n\nUsing [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) on a class goes through the following steps:\n\n1.  (If it's a derived class) The `constructor` body before the `super()` call is evaluated. This part should not access `this` because it's not yet initialized.\n2.  (If it's a derived class) The `super()` call is evaluated, which initializes the parent class through the same process.\n3.  The current class's [fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) are initialized.\n4.  The `constructor` body after the `super()` call (or the entire body, if it's a base class) is evaluated.\n\nWithin the `constructor` body, you can access the object being created through [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) and access the class that is called with [`new`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new) through [`new.target`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target). Note that methods (including [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)) and the [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) are already initialized on `this` before the `constructor` is executed, so you can even access methods of the subclass from the constructor of the superclass. However, if those methods use `this`, the `this` will not have been fully initialized yet. This means reading public fields of the derived class will result in `undefined`, while reading private fields will result in a `TypeError`.\n\n```\nnew (class C extends class B {\n  constructor() {\n    console.log(this.foo());\n  }\n} {\n  #a = 1;\n  foo() {\n    return this.#a; // TypeError: Cannot read private member #a from an object whose class did not declare it\n    // It's not really because the class didn't declare it,\n    // but because the private field isn't initialized yet\n    // when the superclass constructor is running\n  }\n})();\n```\n\nThe `constructor` method may have a return value. While the base class may return anything from its constructor, the derived class must return an object or `undefined`, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) will be thrown.\n\n```\nclass ParentClass {\n  constructor() {\n    return 1;\n  }\n}\n\nconsole.log(new ParentClass()); // ParentClass {}\n// The return value is ignored because it's not an object\n// This is consistent with function constructors\n\nclass ChildClass extends ParentClass {\n  constructor() {\n    return 1;\n  }\n}\n\nconsole.log(new ChildClass()); // TypeError: Derived constructors may only return object or undefined\n```\n\nIf the parent class constructor returns an object, that object will be used as the `this` value on which [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) of the derived class will be defined. This trick is called [\"return overriding\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties#returning_overriding_object), which allows a derived class's fields (including [private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) ones) to be defined on unrelated objects.\n\nThe `constructor` follows normal [method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) syntax, so [parameter default values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), etc. can all be used.\n\n```\nclass Person {\n  constructor(name = \"Anonymous\") {\n    this.name = name;\n  }\n  introduce() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n\nconst person = new Person();\nperson.introduce(); // Hello, my name is Anonymous\n```\n\nThe constructor must be a literal name. [Computed properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names) cannot become constructors.\n\n```\nclass Foo {\n  // This is a computed property. It will not be picked up as a constructor.\n  [\"constructor\"]() {\n    console.log(\"called\");\n    this.a = 1;\n  }\n}\n\nconst foo = new Foo(); // No log\nconsole.log(foo); // Foo {}\nfoo.constructor(); // Logs \"called\"\nconsole.log(foo); // Foo { a: 1 }\n```\n\nAsync methods, generator methods, accessors, and class fields are forbidden from being called `constructor`. Private names cannot be called `#constructor`. Any member named `constructor` must be a plain method.\n\n## [Examples](#examples)\n\n### [Using the constructor](#using_the_constructor)\n\nThis code snippet is taken from the [classes sample](https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html) ([live demo](https://googlechrome.github.io/samples/classes-es6/index.html)).\n\n```\nclass Square extends Polygon {\n  constructor(length) {\n    // Here, it calls the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // NOTE: In derived classes, `super()` must be called before you\n    // can use `this`. Leaving this out will cause a ReferenceError.\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n    this.height = value ** 0.5;\n    this.width = value ** 0.5;\n  }\n}\n```\n\n### [Calling super in a constructor bound to a different prototype](#calling_super_in_a_constructor_bound_to_a_different_prototype)\n\n`super()` calls the constructor that's the prototype of the current class. If you change the prototype of the current class itself, `super()` will call the constructor that's the new prototype. Changing the prototype of the current class's `prototype` property doesn't affect which constructor `super()` calls.\n\n```\nclass Polygon {\n  constructor() {\n    this.name = \"Polygon\";\n  }\n}\n\nclass Rectangle {\n  constructor() {\n    this.name = \"Rectangle\";\n  }\n}\n\nclass Square extends Polygon {\n  constructor() {\n    super();\n  }\n}\n\n// Make Square extend Rectangle (which is a base class) instead of Polygon\nObject.setPrototypeOf(Square, Rectangle);\n\nconst newInstance = new Square();\n\n// newInstance is still an instance of Polygon, because we didn't\n// change the prototype of Square.prototype, so the prototype chain\n// of newInstance is still\n//   newInstance --> Square.prototype --> Polygon.prototype\nconsole.log(newInstance instanceof Polygon); // true\nconsole.log(newInstance instanceof Rectangle); // false\n\n// However, because super() calls Rectangle as constructor, the name property\n// of newInstance is initialized with the logic in Rectangle\nconsole.log(newInstance.name); // Rectangle\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-static-semantics-constructormethod](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-static-semantics-constructormethod) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "constructor - JavaScript | MDN",
    "description": "The constructor method is a special method of a class for creating and initializing an object instance of that class.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
    "markdown": "# Classes - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nClasses are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on [prototypes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) but also have some syntax and semantics that are unique to classes.\n\nFor more examples and explanations, see the [Using classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes) guide.\n\n## [Description](#description)\n\n### [Defining classes](#defining_classes)\n\nClasses are in fact \"special [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions)\", and just as you can define [function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) and [function declarations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function), a class can be defined in two ways: a [class expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class) or a [class declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class).\n\n```\n// Declaration\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n// Expression; the class is anonymous but assigned to a variable\nconst Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// Expression; the class has its own name\nconst Rectangle = class Rectangle2 {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n```\n\nLike function expressions, class expressions may be anonymous, or have a name that's different from the variable that it's assigned to. However, unlike function declarations, class declarations have the same [temporal dead zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) restrictions as `let` or `const` and behave as if they are [not hoisted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes#class_declaration_hoisting).\n\n### [Class body](#class_body)\n\nThe body of a class is the part that is in curly braces `{}`. This is where you define class members, such as methods or constructor.\n\nThe body of a class is executed in [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) even without the `\"use strict\"` directive.\n\nA class element can be characterized by three aspects:\n\n*   Kind: Getter, setter, method, or field\n*   Location: Static or instance\n*   Visibility: Public or private\n\nTogether, they add up to 16 possible combinations. To divide the reference more logically and avoid overlapping content, the different elements are introduced in detail in different pages:\n\n[Method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions)\n\nPublic instance method\n\n[getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n\nPublic instance getter\n\n[setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)\n\nPublic instance setter\n\n[Public class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields)\n\nPublic instance field\n\n[`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)\n\nPublic static method, getter, setter, and field\n\n[Private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties)\n\nEverything that's private\n\n**Note:** Private properties have the restriction that all property names declared in the same class must be unique. All other public properties do not have this restriction — you can have multiple public properties with the same name, and the last one overwrites the others. This is the same behavior as in [object initializers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#duplicate_property_names).\n\nIn addition, there are two special class element syntaxes: [`constructor`](#constructor) and [static initialization blocks](#static_initialization_blocks), with their own references.\n\n#### Constructor\n\nThe [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) method is a special method for creating and initializing an object created with a class. There can only be one special method with the name \"constructor\" in a class — a [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) is thrown if the class contains more than one occurrence of a `constructor` method.\n\nA constructor can use the [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword to call the constructor of the super class.\n\nYou can create instance properties inside the constructor:\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n```\n\nAlternatively, if your instance properties' values do not depend on the constructor's arguments, you can define them as [class fields](#field_declarations).\n\n#### Static initialization blocks\n\n[Static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks) allow flexible initialization of [static properties](#static_methods_and_fields), including the evaluation of statements during initialization, while granting access to the private scope.\n\nMultiple static blocks can be declared, and these can be interleaved with the declaration of static fields and methods (all static items are evaluated in declaration order).\n\n#### Methods\n\nMethods are defined on the prototype of each class instance and are shared by all instances. Methods can be plain functions, async functions, generator functions, or async generator functions. For more information, see [method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions).\n\n```\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n  *getSides() {\n    yield this.height;\n    yield this.width;\n    yield this.height;\n    yield this.width;\n  }\n}\n\nconst square = new Rectangle(10, 10);\n\nconsole.log(square.area); // 100\nconsole.log([...square.getSides()]); // [10, 10, 10, 10]\n```\n\n#### Static methods and fields\n\nThe [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) keyword defines a static method or field for a class. Static properties (fields and methods) are defined on the class itself instead of each instance. Static methods are often used to create utility functions for an application, whereas static fields are useful for caches, fixed-configuration, or any other data that doesn't need to be replicated across instances.\n\n```\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static displayName = \"Point\";\n  static distance(a, b) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n\n    return Math.hypot(dx, dy);\n  }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\np1.displayName; // undefined\np1.distance; // undefined\np2.displayName; // undefined\np2.distance; // undefined\n\nconsole.log(Point.displayName); // \"Point\"\nconsole.log(Point.distance(p1, p2)); // 7.0710678118654755\n```\n\n#### Field declarations\n\nWith the class field declaration syntax, the [constructor](#constructor) example can be written as:\n\n```\nclass Rectangle {\n  height = 0;\n  width;\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n```\n\nClass fields are similar to object properties, not variables, so we don't use keywords such as `const` to declare them. In JavaScript, [private properties](#private_properties_2) use a special identifier syntax, so modifier keywords like `public` and `private` should not be used either.\n\nAs seen above, the fields can be declared with or without a default value. Fields without default values default to `undefined`. By declaring fields up-front, class definitions become more self-documenting, and the fields are always present, which help with optimizations.\n\nSee [public class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) for more information.\n\n#### Private properties\n\nUsing private fields, the definition can be refined as below.\n\n```\nclass Rectangle {\n  #height = 0;\n  #width;\n  constructor(height, width) {\n    this.#height = height;\n    this.#width = width;\n  }\n}\n```\n\nIt's an error to reference private fields from outside of the class; they can only be read or written within the class body. By defining things that are not visible outside of the class, you ensure that your classes' users can't depend on internals, which may change from version to version.\n\nPrivate fields can only be declared up-front in a field declaration. They cannot be created later through assigning to them, the way that normal properties can.\n\nFor more information, see [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n\n### [Inheritance](#inheritance)\n\nThe [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) keyword is used in _class declarations_ or _class expressions_ to create a class as a child of another constructor (either a class or a function).\n\n```\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst d = new Dog(\"Mitzie\");\nd.speak(); // Mitzie barks.\n```\n\nIf there is a constructor present in the subclass, it needs to first call `super()` before using `this`. The [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) keyword can also be used to call corresponding methods of super class.\n\n```\nclass Cat {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(`${this.name} roars.`);\n  }\n}\n\nconst l = new Lion(\"Fuzzy\");\nl.speak();\n// Fuzzy makes a noise.\n// Fuzzy roars.\n```\n\n### [Evaluation order](#evaluation_order)\n\nWhen a [`class` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class) or [`class` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class) is evaluated, its various components are evaluated in the following order:\n\n1.  The [`extends`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends) clause, if present, is first evaluated. It must evaluate to a valid constructor function or `null`, or a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown.\n2.  The [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) method is extracted, substituted with a default implementation if `constructor` is not present. However, because the `constructor` definition is only a method definition, this step is not observable.\n3.  The class elements' property keys are evaluated in the order of declaration. If the property key is computed, the computed expression is evaluated, with the `this` value set to the `this` value surrounding the class (not the class itself). None of the property values are evaluated yet.\n4.  Methods and accessors are installed in the order of declaration. Instance methods and accessors are installed on the `prototype` property of the current class, and static methods and accessors are installed on the class itself. Private instance methods and accessors are saved to be installed on the instance directly later. This step is not observable.\n5.  The class is now initialized with the prototype specified by `extends` and implementation specified by `constructor`. For all steps above, if an evaluated expression tries to access the name of the class, a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) is thrown because the class is not initialized yet.\n6.  The class elements' values are evaluated in the order of declaration:\n    *   For each [instance field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) (public or private), its initializer expression is saved. The initializer is evaluated during instance creation, at the start of the constructor (for base classes) or immediately before the `super()` call returns (for derived classes).\n    *   For each [static field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static) (public or private), its initializer is evaluated with `this` set to the class itself, and the property is created on the class.\n    *   [Static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks) are evaluated with `this` set to the class itself.\n7.  The class is now fully initialized and can be used as a constructor function.\n\nFor how instances are created, see the [`constructor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) reference.\n\n## [Examples](#examples)\n\n### [Binding this with instance and static methods](#binding_this_with_instance_and_static_methods)\n\nWhen a static or instance method is called without a value for [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this), such as by assigning the method to a variable and then calling it, the `this` value will be `undefined` inside the method. This behavior is the same even if the [`\"use strict\"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) directive isn't present, because code within the `class` body is always executed in strict mode.\n\n```\nclass Animal {\n  speak() {\n    return this;\n  }\n  static eat() {\n    return this;\n  }\n}\n\nconst obj = new Animal();\nobj.speak(); // the Animal object\nconst speak = obj.speak;\nspeak(); // undefined\n\nAnimal.eat(); // class Animal\nconst eat = Animal.eat;\neat(); // undefined\n```\n\nIf we rewrite the above using traditional function-based syntax in non–strict mode, then `this` method calls are automatically bound to [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). In strict mode, the value of `this` remains as `undefined`.\n\n```\nfunction Animal() {}\n\nAnimal.prototype.speak = function () {\n  return this;\n};\n\nAnimal.eat = function () {\n  return this;\n};\n\nconst obj = new Animal();\nconst speak = obj.speak;\nspeak(); // global object (in non–strict mode)\n\nconst eat = Animal.eat;\neat(); // global object (in non-strict mode)\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Classes - JavaScript | MDN",
    "description": "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement",
    "markdown": "# Expression statement - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nAn **expression statement** is an expression used in a place where a statement is expected. The expression is evaluated and its result is discarded — therefore, it makes sense only for expressions that have side effects, such as executing a function or updating a variable.\n\n## [Syntax](#syntax)\n\n[`expression`](#expression)\n\nAn arbitrary [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators) to be evaluated. There are [certain expressions](#forbidden_expressions) that may be ambiguous with other statements and are thus forbidden.\n\n## [Description](#description)\n\nApart from the [dedicated statement syntaxes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements), you can also use almost any [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators) as a statement on its own. The expression statement syntax requires a semicolon at the end, but the [automatic semicolon insertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) process may insert one for you if the lack of a semicolon results in invalid syntax.\n\nBecause the expression is evaluated and then discarded, the result of the expression is not available. Therefore, the expression must have some side effect for it to be useful. Expression statements are commonly:\n\n*   Function calls (`console.log(\"Hello\");`, `[1, 2, 3].forEach((i) => console.log(i));`)\n*   [Tagged template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates)\n*   [Assignment expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators), including compound assignments\n*   [Increment and decrement operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement)\n*   [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n*   [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import)\n*   [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) and [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\nOthers may also have side effects if they invoke [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) or trigger [type coercions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion).\n\n### [Forbidden expressions](#forbidden_expressions)\n\nIn order for an expression to be used as a statement, it must not be ambiguous with other statement syntaxes. Therefore, the expression must not start with any of the following tokens:\n\n*   `function`: which would be a [`function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) or [`function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*), not a [`function` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) or [`function*` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n*   `async function`: which would be an [`async function` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) or [`async function*` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*), not an [`async function` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function) or [`async function*` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*)\n*   `class`: which would be a [`class` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), not a [`class` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class)\n*   `let[`: which would be a [`let` declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) with [array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), not a [property accessor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) on a variable called `let` (`let` can only be an identifier in [non-strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#extra_reserved_words))\n*   `{`: which would be a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block), not an [object literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n\nTherefore, all of the following are invalid:\n\n```\nfunction foo() {\n  console.log(\"foo\");\n}(); // SyntaxError: Unexpected token '('\n\n// For some reason, you have a variable called `let`\nvar let = [1, 2, 3];\nlet[0] = 4; // SyntaxError: Invalid destructuring assignment target\n\n{\n  foo: 1,\n  bar: 2, // SyntaxError: Unexpected token ':'\n};\n```\n\nMore dangerously, sometimes the code happens to be valid syntax, but is not what you intend.\n\n```\n// For some reason, you have a variable called `let`\nvar let = [1, 2, 3];\n\nfunction setIndex(index, value) {\n  if (index >= 0) {\n    // Intend to assign to the array `let`, but instead creates an extra variable!\n    let[index] = value;\n  }\n}\n\nsetIndex(0, [1, 2]);\nconsole.log(let); // [1, 2, 3]\n\n// This is not an object literal, but a block statement,\n// where `foo` is a label and `1` is an expression statement.\n// This often happens in the console\n{ foo: 1 };\n```\n\nTo avoid these problems, you can use parentheses, so that the statement is unambiguously an expression statement.\n\n```\n(function foo() {\n  console.log(\"foo\");\n})();\n```\n\n## [Examples](#examples)\n\n### [Avoiding control flow statements](#avoiding_control_flow_statements)\n\nYou can avoid almost all use of control flow statements using expression statements. For example, `if...else` can be replaced with [ternary operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator) and [logical operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators). Iterative statements like `for` or `for...of` can be replaced with [array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods).\n\n```\n// Using control flow statements\nfunction range(start, end) {\n  if (start > end) {\n    [start, end] = [end, start];\n  }\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n// Using expression statements\nfunction range2(start, end) {\n  start > end && ([start, end] = [end, start]);\n  return Array.from({ length: end - start }, (_, i) => start + i);\n}\n```\n\n**Warning:** This only demonstrates a capability of the language. Excessive use of expression statements as a substitute for control-flow statements can make code much less readable.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-expression-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-expression-statement) |\n\n## [See also](#see_also)",
    "title": "Expression statement - JavaScript | MDN",
    "description": "An expression statement is an expression used in a place where a statement is expected. The expression is evaluated and its result is discarded — therefore, it makes sense only for expressions that have side effects, such as executing a function or updating a variable.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
    "markdown": "# for await...of - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`for await...of`** statement creates a loop iterating over [async iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) as well as [sync iterables](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). This statement can only be used in contexts where [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) can be used, which includes inside an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) body and in a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfor await (variable of iterable)\n  statement\n```\n\n[`variable`](#variable)\n\nReceives a value from the sequence on each iteration. May be either a declaration with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), or an [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) target (e.g. a previously declared variable, an object property, or a [destructuring assignment pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)). Variables declared with `var` are not local to the loop, i.e. they are in the same scope the `for await...of` loop is in.\n\n[`iterable`](#iterable)\n\nAn async iterable or sync iterable. The source of the sequence of values on which the loop operates.\n\n[`statement`](#statement)\n\nA statement to be executed on every iteration. May reference `variable`. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nWhen a `for await...of` loop iterates over an iterable, it first gets the iterable's [`[@@asyncIterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator) method and calls it, which returns an [async iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols). If the `@asyncIterator` method does not exist, it then looks for an [`[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method, which returns a [sync iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol). The sync iterator returned is then wrapped into an async iterator by wrapping every object returned from the `next()`, `return()`, and `throw()` methods into a resolved or rejected promise, with the `value` property resolved if it's also a promise. The loop then repeatedly calls the final async iterator's [`next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) method and [awaits](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) the returned promise, producing the sequence of values to be assigned to `variable`.\n\nA `for await...of` loop exits when the iterator has completed (the awaited `next()` result is an object with `done: true`). Like other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and goes to the next iteration of the loop.\n\nIf the `for await...of` loop exited early (e.g. a `break` statement is encountered or an error is thrown), the [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) method of the iterator is called to perform any cleanup. The returned promise is awaited before the loop exits.\n\n`for await...of` generally functions the same as the [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop and shares many of the same syntax and semantics. There are a few differences:\n\n*   `for await...of` works on both sync and async iterables, while `for...of` only works on sync iterables.\n*   `for await...of` can only be used in contexts where [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) can be used, which includes inside an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) body and in a [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). Even when the iterable is sync, the loop still awaits the return value for every iteration, leading to slower execution due to repeated promise unwrapping.\n*   If the `iterable` is a sync iterable that yields promises, `for await...of` would produce a sequence of resolved values, while `for...of` would produce a sequence of promises. (However, beware of error handling and cleanup — see [Iterating over sync iterables and generators](#iterating_over_sync_iterables_and_generators))\n*   For `for await...of`, the `variable` can be the identifier `async` (e.g. `for await (async of foo)`); `for...of` forbids this case.\n\n## [Examples](#examples)\n\n### [Iterating over async iterables](#iterating_over_async_iterables)\n\nYou can also iterate over an object that explicitly implements async iterable protocol:\n\n```\nconst LIMIT = 3;\n\nconst asyncIterable = {\n  [Symbol.asyncIterator]() {\n    let i = 0;\n    return {\n      next() {\n        const done = i === LIMIT;\n        const value = done ? undefined : i++;\n        return Promise.resolve({ value, done });\n      },\n      return() {\n        // This will be reached if the consumer called 'break' or 'return' early in the loop.\n        return { done: true };\n      },\n    };\n  },\n};\n\n(async () => {\n  for await (const num of asyncIterable) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n```\n\n### [Iterating over async generators](#iterating_over_async_generators)\n\nSince the return values of async generator functions conform to the async iterable protocol, they can be looped using `for await...of`.\n\n```\nasync function* asyncGenerator() {\n  let i = 0;\n  while (i < 3) {\n    yield i++;\n  }\n}\n\n(async () => {\n  for await (const num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n```\n\nFor a more concrete example of iterating over an async generator using `for await...of`, consider iterating over data from an API.\n\nThis example first creates an async iterable for a stream of data, then uses it to find the size of the response from the API.\n\n```\nasync function* streamAsyncIterable(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) return;\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// Fetches data from URL and calculates response size using the async generator.\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  // Will hold the size of the response, in bytes.\n  let responseSize = 0;\n  // The for-await-of loop. Async iterates over each portion of the response.\n  for await (const chunk of streamAsyncIterable(response.body)) {\n    // Incrementing the total response length.\n    responseSize += chunk.length;\n  }\n\n  console.log(`Response Size: ${responseSize} bytes`); // \"Response Size: 1071472\"\n  return responseSize;\n}\ngetResponseSize(\"https://jsonplaceholder.typicode.com/photos\");\n```\n\n### [Iterating over sync iterables and generators](#iterating_over_sync_iterables_and_generators)\n\n`for await...of` loop also consumes sync iterables and generators. In that case it internally awaits emitted values before assign them to the loop control variable.\n\n```\nfunction* generator() {\n  yield 0;\n  yield 1;\n  yield Promise.resolve(2);\n  yield Promise.resolve(3);\n  yield 4;\n}\n\n(async () => {\n  for await (const num of generator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n// 3\n// 4\n\n// compare with for-of loop:\n\nfor (const numOrPromise of generator()) {\n  console.log(numOrPromise);\n}\n// 0\n// 1\n// Promise { 2 }\n// Promise { 3 }\n// 4\n```\n\n**Note:** Be aware of yielding rejected promises from a sync generator. In such case, `for await...of` throws when consuming the rejected promise and DOESN'T CALL `finally` blocks within that generator. This can be undesirable if you need to free some allocated resources with `try/finally`.\n\n```\nfunction* generatorWithRejectedPromises() {\n  try {\n    yield 0;\n    yield 1;\n    yield Promise.resolve(2);\n    yield Promise.reject(3);\n    yield 4;\n    throw 5;\n  } finally {\n    console.log(\"called finally\");\n  }\n}\n\n(async () => {\n  try {\n    for await (const num of generatorWithRejectedPromises()) {\n      console.log(num);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// 0\n// 1\n// 2\n// caught 3\n\n// compare with for-of loop:\n\ntry {\n  for (const numOrPromise of generatorWithRejectedPromises()) {\n    console.log(numOrPromise);\n  }\n} catch (e) {\n  console.log(\"caught\", e);\n}\n// 0\n// 1\n// Promise { 2 }\n// Promise { <rejected> 3 }\n// 4\n// caught 5\n// called finally\n```\n\nTo make `finally` blocks of a sync generator always called, use the appropriate form of the loop — `for await...of` for the async generator and `for...of` for the sync one — and await yielded promises explicitly inside the loop.\n\n```\n(async () => {\n  try {\n    for (const numOrPromise of generatorWithRejectedPromises()) {\n      console.log(await numOrPromise);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// 0\n// 1\n// 2\n// caught 3\n// called finally\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-for-in-and-for-of-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "for await...of - JavaScript | MDN",
    "description": "The for await...of statement creates a loop iterating over async iterable objects as well as sync iterables. This statement can only be used in contexts where await can be used, which includes inside an async function body and in a module.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
    "markdown": "# for...in - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`for...in`** statement iterates over all [enumerable string properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) of an object (ignoring properties keyed by [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)), including inherited enumerable properties.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfor (variable in object)\n  statement\n```\n\n### [Parameters](#parameters)\n\n[`variable`](#variable)\n\nReceives a string property name on each iteration. May be either a declaration with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), or an [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) target (e.g. a previously declared variable, an object property, or a [destructuring assignment pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)). Variables declared with `var` are not local to the loop, i.e. they are in the same scope the `for...in` loop is in.\n\n[`object`](#object)\n\nObject whose non-symbol enumerable properties are iterated over.\n\n[`statement`](#statement)\n\nA statement to be executed on every iteration. May reference `variable`. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nThe loop will iterate over all enumerable properties of the object itself and those the object inherits from its prototype chain (properties of nearer prototypes take precedence over those of prototypes further away from the object in its prototype chain).\n\nLike other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and goes to the next iteration of the loop.\n\nA `for...in` loop only iterates over enumerable, non-symbol properties. Objects created from built–in constructors like `Array` and `Object` have inherited non–enumerable properties from `Array.prototype` and `Object.prototype`, such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)'s [`indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method or [`Object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)'s [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method, which will not be visited in the `for...in` loop.\n\nThe traversal order, as of modern ECMAScript specification, is well-defined and consistent across implementations. Within each component of the prototype chain, all non-negative integer keys (those that can be array indices) will be traversed first in ascending order by value, then other string keys in ascending chronological order of property creation.\n\nThe `variable` part of `for...in` accepts anything that can come before the `=` operator. You can use [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) to declare the variable as long as it's not reassigned within the loop body (it can change between iterations, because those are two separate variables). Otherwise, you can use [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let). You can use [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to assign multiple local variables, or use a property accessor like `for (x.y in iterable)` to assign the value to an object property.\n\nA [legacy syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#statements) allows `var` declarations of the loop variable to have an initializer. This throws a [syntax error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer) in strict mode and is ignored in non–strict mode.\n\n### [Deleted, added, or modified properties](#deleted_added_or_modified_properties)\n\n`for...in` visits property keys in the following fashion:\n\n1.  It first gets all own string keys of the current object, in a fashion very similar to [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames).\n2.  For each key, if no string with the same value has ever been visited, the [property descriptor is retrieved](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor) and the property is only visited if it is enumerable. However, this property string will be marked as visited even if it's not enumerable.\n3.  Then, the current object is replaced with its prototype, and the process is repeated.\n\nThis means:\n\n*   Any property added to the currently visited object during iteration will not be visited, because all own properties of the current object have already been saved beforehand.\n*   If multiple objects in the prototype chain have a property with the same name, only the first one will be considered, and it is only visited if it's enumerable. If it is non-enumerable, no other properties with the same name further up the prototype chain will be visited, even if they are enumerable.\n\nIn general, it is best not to add, modify, or remove properties from the object during iteration, other than the property currently being visited. The spec explicitly allows the implementation to not follow the algorithm above in one of the following cases:\n\n*   The object's prototype chain is modified during iteration.\n*   A property is deleted from the object or its prototype chain during iteration.\n*   A property is added to the object's prototype chain during iteration.\n*   A property's enumerability is changed during iteration.\n\nIn these cases, implementations may behave differently from what you may expect, or even from each other.\n\n### [Array iteration and for...in](#array_iteration_and_for...in)\n\nArray indexes are just enumerable properties with integer names and are otherwise identical to general object properties. The `for...in` loop will traverse all integer keys before traversing other keys, and in strictly increasing order, making the behavior of `for...in` close to normal array iteration. However, the `for...in` loop will return all enumerable properties, including those with non–integer names and those that are inherited. Unlike `for...of`, `for...in` uses property enumeration instead of the array's iterator. In [sparse arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), `for...of` will visit the empty slots, but `for...in` will not.\n\nIt is better to use a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop with a numeric index, [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), or the [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop, because they will return the index as a number instead of a string, and also avoid non-index properties.\n\n### [Iterating over own properties only](#iterating_over_own_properties_only)\n\nIf you only want to consider properties attached to the object itself, and not its prototypes, you can use one of the following techniques:\n\n*   [`Object.keys()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n*   [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n\n`Object.keys` will return a list of enumerable own string properties, while `Object.getOwnPropertyNames` will also contain non-enumerable ones.\n\nMany JavaScript style guides and linters recommend against the use of `for...in`, because it iterates over the entire prototype chain which is rarely what one wants, and may be a confusion with the more widely-used `for...of` loop. `for...in` is most practically used for debugging purposes, being an easy way to check the properties of an object (by outputting to the console or otherwise). In situations where objects are used as ad hoc key-value pairs, `for...in` allows you check if any of those keys hold a particular value.\n\n## [Examples](#examples)\n\n### [Using for...in](#using_for...in)\n\nThe `for...in` loop below iterates over all of the object's enumerable, non-symbol properties and logs a string of the property names and their values.\n\n```\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n}\n\n// Logs:\n// \"obj.a = 1\"\n// \"obj.b = 2\"\n// \"obj.c = 3\"\n```\n\n### [Iterating own properties](#iterating_own_properties)\n\nThe following function illustrates the use of [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn): the inherited properties are not displayed.\n\n```\nconst triangle = { a: 1, b: 2, c: 3 };\n\nfunction ColoredTriangle() {\n  this.color = \"red\";\n}\n\nColoredTriangle.prototype = triangle;\n\nconst obj = new ColoredTriangle();\n\nfor (const prop in obj) {\n  if (Object.hasOwn(obj, prop)) {\n    console.log(`obj.${prop} = ${obj[prop]}`);\n  }\n}\n\n// Logs:\n// \"obj.color = red\"\n```\n\n### [Concurrent modification](#concurrent_modification)\n\n**Warning:** You should not write code like this yourself. It is only included here to illustrate the behavior of `for...in` in some corner cases.\n\nProperties added to the current object during iteration are never visited:\n\n```\nconst obj = { a: 1, b: 2 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n  obj.c = 3;\n}\n\n// Logs:\n// obj.a = 1\n// obj.b = 2\n```\n\nShadowed properties are only visited once:\n\n```\nconst proto = { a: 1 };\nconst obj = { __proto__: proto, a: 2 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n}\n\n// Logs:\n// obj.a = 2\n\nObject.defineProperty(obj, \"a\", { enumerable: false });\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n}\n// Logs nothing, because the first \"a\" property visited is non-enumerable.\n```\n\nIn addition, consider the following cases, where the behavior is unspecified, and implementations tend to diverge from the specified algorithm:\n\nChanging the prototype during iteration:\n\n```\nconst obj = { a: 1, b: 2 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n  Object.setPrototypeOf(obj, { c: 3 });\n}\n```\n\nDeleting a property during iteration:\n\n```\nconst obj = { a: 1, b: 2, c: 3 };\n\n// Deleting a property before it is visited\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n  delete obj.c;\n}\n\nconst obj2 = { a: 1, b: 2, c: 3 };\n\n// Deleting a property after it is visited\nfor (const prop in obj2) {\n  console.log(`obj2.${prop} = ${obj2[prop]}`);\n  delete obj2.a;\n}\n```\n\nEnumerable properties added to the prototype during iteration:\n\n```\nconst proto = {};\nconst obj = { __proto__: proto, a: 1, b: 2 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n  proto.c = 3;\n}\n```\n\nChanging the enumerability of a property during iteration:\n\n```\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (const prop in obj) {\n  console.log(`obj.${prop} = ${obj[prop]}`);\n  Object.defineProperty(obj, \"c\", { enumerable: false });\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-for-in-and-for-of-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "for...in - JavaScript | MDN",
    "description": "The for...in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion",
    "markdown": "# Input boundary assertion: ^, $ - JavaScript\n\nAn **input boundary assertion** checks if the current position in the string is an input boundary. An input boundary is the start or end of the string; or, if the `m` flag is set, the start or end of a line.\n\n## [Syntax](#syntax)\n\n## [Description](#description)\n\n`^` asserts that the current position is the start of input. `$` asserts that the current position is the end of input. Both are _assertions_, so they don't consume any characters.\n\nMore precisely, `^` asserts that the character to the left is out of bounds of the string; `$` asserts that the character to the right is out of bounds of the string. If the [`m`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) flag is set, `^` also matches if the character to the left is a [line terminator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) character, and `$` also matches if the character to the right is a line terminator.\n\nUnless the `m` flag is set, the `^` and `$` assertions only make sense when placed at the boundaries of the pattern, because any other characters to the left or right of them would necessarily cause the assertion to fail.\n\nThe `y` flag doesn't change the meaning of these assertions — see also [anchored sticky flag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky#anchored_sticky_flag).\n\n## [Examples](#examples)\n\n### [Removing trailing slashes](#removing_trailing_slashes)\n\nThe following example removes trailing slashes from a URL string:\n\n```\nfunction removeTrailingSlash(url) {\n  return url.replace(/\\/$/, \"\");\n}\n\nremoveTrailingSlash(\"https://example.com/\"); // \"https://example.com\"\nremoveTrailingSlash(\"https://example.com/docs/\"); // \"https://example.com/docs\"\n```\n\n### [Matching file extensions](#matching_file_extensions)\n\nThe following example checks file types by matching the file extension, which always comes at the end of the string:\n\n```\nfunction isImage(filename) {\n  return /\\.(?:png|jpe?g|webp|avif|gif)$/i.test(filename);\n}\n\nisImage(\"image.png\"); // true\nisImage(\"image.jpg\"); // true\nisImage(\"image.pdf\"); // false\n```\n\n### [Matching entire input](#matching_entire_input)\n\nSometimes you want to make sure that your regex matches the entire input, not just a substring of the input. For example, if you are determining if a string is a valid [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers), you can add input boundary assertions to both ends of the pattern:\n\n```\nfunction isValidIdentifier(str) {\n  return /^[$_\\p{ID_Start}][$_\\p{ID_Continue}]*$/u.test(str);\n}\n\nisValidIdentifier(\"foo\"); // true\nisValidIdentifier(\"$1\"); // true\nisValidIdentifier(\"1foo\"); // false\nisValidIdentifier(\"  foo  \"); // false\n```\n\nThis function is useful when doing codegen (generating code using code), because you can use valid identifiers differently from other string properties, such as [dot notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation) instead of [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation):\n\n```\nconst variables = [\"foo\", \"foo:bar\", \"  foo  \"];\n\nfunction toAssignment(key) {\n  if (isValidIdentifier(key)) {\n    return `globalThis.${key} = undefined;`;\n  }\n  // JSON.stringify() escapes quotes and other special characters\n  return `globalThis[${JSON.stringify(key)}] = undefined;`;\n}\n\nconst statements = variables.map(toAssignment).join(\"\\n\");\n\nconsole.log(statements);\n// globalThis.foo = undefined;\n// globalThis[\"foo:bar\"] = undefined;\n// globalThis[\"  foo  \"] = undefined;\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Assertion](https://tc39.es/ecma262/multipage/text-processing.html#prod-Assertion) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Input boundary assertion: ^, $ - JavaScript | MDN",
    "description": "An input boundary assertion checks if the current position in the string is an input boundary. An input boundary is the start or end of the string; or, if the m flag is set, the start or end of a line.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion",
    "markdown": "# Lookahead assertion: (?=...), (?!...) - JavaScript\n\nA **lookahead assertion** \"looks ahead\": it attempts to match the subsequent input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nA pattern consisting of anything you may use in a regex literal, including a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction).\n\n## [Description](#description)\n\nA regular expression generally matches from left to right. This is why lookahead and [lookbehind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) assertions are called as such — lookahead asserts what's on the right, and lookbehind asserts what's on the left.\n\nIn order for a `(?=pattern)` assertion to succeed, the `pattern` must match the text after the current position, but the current position is not changed. The `(?!pattern)` form negates the assertion — it succeeds if the `pattern` does not match at the current position.\n\nThe `pattern` can contain [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group). See the capturing groups page for more information on the behavior in this case.\n\nUnlike other regular expression operators, there's no backtracking into a lookahead — this behavior is inherited from Perl. This only matters when the `pattern` contains [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) and the pattern following the lookahead contains [backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) to those captures. For example:\n\n```\n/(?=(a+))a*b\\1/.exec(\"baabac\"); // ['aba', 'a']\n// Not ['aaba', 'a']\n```\n\nThe matching of the pattern above happens as follows:\n\n1.  The lookahead `(a+)` succeeds before the first `\"a\"` in `\"baabac\"`, and `\"aa\"` is captured because the quantifier is greedy.\n2.  `a*b` matches the `\"aab\"` in `\"baabac\"` because lookaheads don't consume their matched strings.\n3.  `\\1` does not match the following string, because that requires 2 `\"a\"`s, but only 1 is available. So the matcher backtracks, but it doesn't go into the lookahead, so the capturing group cannot be reduced to 1 `\"a\"`, and the entire match fails at this point.\n4.  `exec()` re-attempts matching at the next position — before the second `\"a\"`. This time, the lookahead matches `\"a\"`, and `a*b` matches `\"ab\"`. The backreference `\\1` matches the captured `\"a\"`, and the match succeeds.\n\nIf the regex is able to backtrack into the lookahead and revise the choice made in there, then the match would succeed at step 3 by `(a+)` matching the first `\"a\"` (instead of the first two `\"a\"`s) and `a*b` matching `\"aab\"`, without even re-attempting the next input position.\n\nNegative lookaheads can contain capturing groups as well, but backreferences only make sense within the `pattern`, because if matching continues, `pattern` would necessarily be unmatched (otherwise the assertion fails). This means outside of the `pattern`, backreferences to those capturing groups in negative lookaheads always succeed. For example:\n\n```\n/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(\"baaabaac\"); // ['baaabaac', 'ba', undefined, 'abaac']\n```\n\nThe matching of the pattern above happens as follows:\n\n1.  The `(.*?)` pattern is non-greedy, so it starts by matching nothing. However, the next character is `a`, which fails to match `\"b\"` in the input.\n2.  The `(.*?)` pattern matches `\"b\"` so that the `a` in the pattern matches the first `\"a\"` in `\"baaabaac\"`.\n3.  At this position, the lookahead succeeds to match, because if `(a+)` matches `\"aa\"`, then `(a+)b\\2c` matches `\"aabaac\"`. This causes the assertion to fail, so the matcher backtracks.\n4.  The `(.*?)` pattern matches the `\"ba\"` so that the `a` in the pattern matches the second `\"a\"` in `\"baaabaac\"`.\n5.  At this position, the lookahead fails to match, because the remaining input does not follow the pattern \"any number of `\"a\"`s, a `\"b\"`, the same number of `\"a\"`s, a `c`\". This causes the assertion to succeed.\n6.  However, because nothing was matched within the assertion, the `\\2` backreference has no value, so it matches the empty string. This causes the rest of the input to be consumed by the `(.*)` at the end.\n\nNormally, assertions cannot be [quantified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier). However, in [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), lookahead assertions can be quantified. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\n```\n/(?=a)?b/.test(\"b\"); // true; the lookahead is matched 0 time\n```\n\n## [Examples](#examples)\n\n### [Matching strings without consuming them](#matching_strings_without_consuming_them)\n\nSometimes it's useful to validate that the matched string is followed by something without returning that as the result. The following example matches a string that is followed by a comma/period, but the punctuation is not included in the result:\n\n```\nfunction getFirstSubsentence(str) {\n  return /^.*?(?=[,.])/.exec(str)?.[0];\n}\n\ngetFirstSubsentence(\"Hello, world!\"); // \"Hello\"\ngetFirstSubsentence(\"Thank you.\"); // \"Thank you\"\n```\n\nA similar effect can be achieved by [capturing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) the submatch you are interested in.\n\n### [Pattern subtraction and intersection](#pattern_subtraction_and_intersection)\n\nUsing lookahead, you can match a string multiple times with different patterns, which allows you to express complex relationships like subtraction (is X but not Y) and intersection (is both X and Y).\n\nThe following example matches any [identifier](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) that's not a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words) (only showing three reserved words here for brevity; more reserved words can be added to this disjunction). The `[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*` syntax describes exactly the set of identifier strings in the language spec; you can read more about identifiers in [lexical grammar](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) and the `\\p` escape in [Unicode character class escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape).\n\n```\nfunction isValidIdentifierName(str) {\n  const re =\n    /^(?!(?:break|case|catch)$)[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*$/u;\n  return re.test(str);\n}\n\nisValidIdentifierName(\"break\"); // false\nisValidIdentifierName(\"foo\"); // true\nisValidIdentifierName(\"cases\"); // true\n```\n\nThe following example matches a string that's both ASCII and can be used as an identifier part:\n\n```\nfunction isASCIIIDPart(char) {\n  return /^(?=\\p{ASCII}$)\\p{ID_Start}$/u.test(char);\n}\n\nisASCIIIDPart(\"a\"); // true\nisASCIIIDPart(\"α\"); // false\nisASCIIIDPart(\":\"); // false\n```\n\nIf you are doing intersection and subtraction with finitely many characters, you may want to use the [character set intersection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class) syntax enabled with the `v` flag.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Assertion](https://tc39.es/ecma262/multipage/text-processing.html#prod-Assertion) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Lookahead assertion: (?=...), (?!...) - JavaScript | MDN",
    "description": "A lookahead assertion \"looks ahead\": it attempts to match the subsequent input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
    "markdown": "# for...of - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`for...of`** statement executes a loop that operates on a sequence of values sourced from an [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). Iterable objects include instances of built-ins such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set), [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) (and other DOM collections), as well as the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object, [generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) produced by [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*), and user-defined iterables.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfor (variable of iterable)\n  statement\n```\n\n[`variable`](#variable)\n\nReceives a value from the sequence on each iteration. May be either a declaration with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var), or an [assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) target (e.g. a previously declared variable, an object property, or a [destructuring assignment pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)). Variables declared with `var` are not local to the loop, i.e. they are in the same scope the `for...of` loop is in.\n\n[`iterable`](#iterable)\n\nAn iterable object. The source of the sequence of values on which the loop operates.\n\n[`statement`](#statement)\n\nA statement to be executed on every iteration. May reference `variable`. You can use a [block statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) to execute multiple statements.\n\n## [Description](#description)\n\nA `for...of` loop operates on the values sourced from an iterable one by one in sequential order. Each operation of the loop on a value is called an _iteration_, and the loop is said to _iterate over the iterable_. Each iteration executes statements that may refer to the current sequence value.\n\nWhen a `for...of` loop iterates over an iterable, it first calls the iterable's [`[@@iterator]()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method, which returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol), and then repeatedly calls the resulting iterator's [`next()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) method to produce the sequence of values to be assigned to `variable`.\n\nA `for...of` loop exits when the iterator has completed (the `next()` result is an object with `done: true`). Like other looping statements, you can use [control flow statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#control_flow) inside `statement`:\n\n*   [`break`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) stops `statement` execution and goes to the first statement after the loop.\n*   [`continue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue) stops `statement` execution and goes to the next iteration of the loop.\n\nIf the `for...of` loop exited early (e.g. a `break` statement is encountered or an error is thrown), the [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) method of the iterator is called to perform any cleanup.\n\nThe `variable` part of `for...of` accepts anything that can come before the `=` operator. You can use [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) to declare the variable as long as it's not reassigned within the loop body (it can change between iterations, because those are two separate variables). Otherwise, you can use [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\n```\nconst iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  value += 1;\n  console.log(value);\n}\n// 11\n// 21\n// 31\n```\n\n**Note:** Each iteration creates a new variable. Reassigning the variable inside the loop body does not affect the original value in the iterable (an array, in this case).\n\nYou can use [destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to assign multiple local variables, or use a property accessor like `for (x.y of iterable)` to assign the value to an object property.\n\nHowever, a special rule forbids using `async` as the variable name. This is invalid syntax:\n\n```\nlet async;\nfor (async of [1, 2, 3]); // SyntaxError: The left-hand side of a for-of loop may not be 'async'.\n```\n\nThis is to avoid syntax ambiguity with the valid code `for (async of => {};;)`, which is a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop.\n\n## [Examples](#examples)\n\n### [Iterating over an Array](#iterating_over_an_array)\n\n```\nconst iterable = [10, 20, 30];\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 10\n// 20\n// 30\n```\n\n### [Iterating over a string](#iterating_over_a_string)\n\nStrings are [iterated by Unicode code points](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator).\n\n```\nconst iterable = \"boo\";\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// \"b\"\n// \"o\"\n// \"o\"\n```\n\n### [Iterating over a TypedArray](#iterating_over_a_typedarray)\n\n```\nconst iterable = new Uint8Array([0x00, 0xff]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 0\n// 255\n```\n\n### [Iterating over a Map](#iterating_over_a_map)\n\n```\nconst iterable = new Map([\n  [\"a\", 1],\n  [\"b\", 2],\n  [\"c\", 3],\n]);\n\nfor (const entry of iterable) {\n  console.log(entry);\n}\n// ['a', 1]\n// ['b', 2]\n// ['c', 3]\n\nfor (const [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\n### [Iterating over a Set](#iterating_over_a_set)\n\n```\nconst iterable = new Set([1, 1, 2, 2, 3, 3]);\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\n### [Iterating over the arguments object](#iterating_over_the_arguments_object)\n\nYou can iterate over the [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object to examine all parameters passed into a function.\n\n```\nfunction foo() {\n  for (const value of arguments) {\n    console.log(value);\n  }\n}\n\nfoo(1, 2, 3);\n// 1\n// 2\n// 3\n```\n\n### [Iterating over a NodeList](#iterating_over_a_nodelist)\n\nThe following example adds a `read` class to paragraphs that are direct descendants of the [`<article>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article) element by iterating over a [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) DOM collection.\n\n```\nconst articleParagraphs = document.querySelectorAll(\"article > p\");\nfor (const paragraph of articleParagraphs) {\n  paragraph.classList.add(\"read\");\n}\n```\n\n### [Iterating over a user-defined iterable](#iterating_over_a_user-defined_iterable)\n\nIterating over an object with an `@@iterator` method that returns a custom iterator:\n\n```\nconst iterable = {\n  [Symbol.iterator]() {\n    let i = 1;\n    return {\n      next() {\n        if (i <= 3) {\n          return { value: i++, done: false };\n        }\n        return { value: undefined, done: true };\n      },\n    };\n  },\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\nIterating over an object with an `@@iterator` generator method:\n\n```\nconst iterable = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\nfor (const value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\n_Iterable iterators_ (iterators with a `[@@iterator]()` method that returns `this`) are a fairly common technique to make iterators usable in syntaxes expecting iterables, such as `for...of`.\n\n```\nlet i = 1;\n\nconst iterator = {\n  next() {\n    if (i <= 3) {\n      return { value: i++, done: false };\n    }\n    return { value: undefined, done: true };\n  },\n  [Symbol.iterator]() {\n    return this;\n  },\n};\n\nfor (const value of iterator) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\n### [Iterating over a generator](#iterating_over_a_generator)\n\n```\nfunction* source() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = source();\n\nfor (const value of generator) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n\n### [Early exiting](#early_exiting)\n\nExecution of the `break` statement in the first loop causes it to exit early. The iterator is not finished yet, so the second loop will continue from where the first one stopped at.\n\n```\nconst source = [1, 2, 3];\n\nconst iterator = source[Symbol.iterator]();\n\nfor (const value of iterator) {\n  console.log(value);\n  if (value === 1) {\n    break;\n  }\n  console.log(\"This string will not be logged.\");\n}\n// 1\n\n// Another loop using the same iterator\n// picks up where the last loop left off.\nfor (const value of iterator) {\n  console.log(value);\n}\n// 2\n// 3\n\n// The iterator is used up.\n// This loop will execute no iterations.\nfor (const value of iterator) {\n  console.log(value);\n}\n// [No output]\n```\n\nGenerators implement the [`return()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return) method, which causes the generator function to early return when the loop exits. This makes generators not reusable between loops.\n\n```\nfunction* source() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = source();\n\nfor (const value of generator) {\n  console.log(value);\n  if (value === 1) {\n    break;\n  }\n  console.log(\"This string will not be logged.\");\n}\n// 1\n\n// The generator is used up.\n// This loop will execute no iterations.\nfor (const value of generator) {\n  console.log(value);\n}\n// [No output]\n```\n\n### [Difference between for...of and for...in](#difference_between_for...of_and_for...in)\n\nBoth `for...in` and `for...of` statements iterate over something. The main difference between them is in what they iterate over.\n\nThe [`for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) statement iterates over the [enumerable string properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) of an object, while the `for...of` statement iterates over values that the [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) defines to be iterated over.\n\nThe following example shows the difference between a `for...of` loop and a `for...in` loop when used with an [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\n```\nObject.prototype.objCustom = function () {};\nArray.prototype.arrCustom = function () {};\n\nconst iterable = [3, 5, 7];\niterable.foo = \"hello\";\n\nfor (const i in iterable) {\n  console.log(i);\n}\n// \"0\", \"1\", \"2\", \"foo\", \"arrCustom\", \"objCustom\"\n\nfor (const i in iterable) {\n  if (Object.hasOwn(iterable, i)) {\n    console.log(i);\n  }\n}\n// \"0\" \"1\" \"2\" \"foo\"\n\nfor (const i of iterable) {\n  console.log(i);\n}\n// 3 5 7\n```\n\nThe object `iterable` inherits the properties `objCustom` and `arrCustom` because it contains both `Object.prototype` and `Array.prototype` in its [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nThe `for...in` loop logs only [enumerable properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) of the `iterable` object. It doesn't log array _elements_ `3`, `5`, `7` or `\"hello\"` because those are not _properties_ — they are _values_. It logs array _indexes_ as well as `arrCustom` and `objCustom`, which are actual properties. If you're not sure why these properties are iterated over, there's a more thorough explanation of how [array iteration and `for...in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#array_iteration_and_for...in) work.\n\nThe second loop is similar to the first one, but it uses [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) to check if the found enumerable property is the object's own, i.e. not inherited. If it is, the property is logged. Properties `0`, `1`, `2` and `foo` are logged because they are own properties. Properties `arrCustom` and `objCustom` are not logged because they are inherited.\n\nThe `for...of` loop iterates and logs _values_ that `iterable`, as an array (which is [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)), defines to be iterated over. The object's _elements_ `3`, `5`, `7` are shown, but none of the object's _properties_ are.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-for-in-and-for-of-statements](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "for...of - JavaScript | MDN",
    "description": "The for...of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character",
    "markdown": "# Literal character: a, b - JavaScript\n\nA **literal character** specifies exactly itself to be matched in the input text.\n\n## [Syntax](#syntax)\n\n### [Parameters](#parameters)\n\n[`c`](#c)\n\nA single character that is not one of the syntax characters described below.\n\n## [Description](#description)\n\nIn regular expressions, most characters can appear literally. They are usually the most basic building blocks of patterns. For example, here is a pattern from the [Removing HTML tags](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier#removing_html_tags) example:\n\n```\nconst pattern = /<.+?>/g;\n```\n\nIn this example, `.`, `+`, and `?` are called _syntax characters_. They have special meanings in regular expressions. The rest of the characters in the pattern (`<` and `>`) are literal characters. They match themselves in the input text: the left and right angle brackets.\n\nThe following characters are syntax characters in regular expressions, and they cannot appear as literal characters:\n\n*   [`^`, `$`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion)\n*   [`\\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape)\n*   [`*`, `+`, `?`, `{`, `}`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier)\n*   [`(`, `)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group)\n*   [`[`, `]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)\n*   [`|`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)\n\nWithin character classes, more characters can appear literally. For more information, see the [Character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) page. For example `\\.` and `[.]` both match a literal `.`. In [`v`\\-mode character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class), however, there are a different set of characters reserved as syntax characters. To be most comprehensive, below is a table of ASCII characters and whether they may appear escaped or unescaped in different contexts, where \"✅\" means the character represents itself, \"❌\" means it throws a syntax error, and \"⚠️\" means the character is valid but means something other than itself.\n\n| Characters | Outside character classes in `u` or `v` mode |     | In `u`\\-mode character classes |     | In `v`\\-mode character classes |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Unescaped | Escaped | Unescaped | Escaped | Unescaped | Escaped |\n| --- | --- | --- | --- | --- | --- | --- |\n| `123456789 \"'   ACEFGHIJKLMN   OPQRTUVXYZ_   aceghijklmop   quxyz` | ✅   | ❌   | ✅   | ❌   | ✅   | ❌   |\n| ``!#%&,:;<=>@`~`` | ✅   | ❌   | ✅   | ❌   | ✅   | ✅   |\n| `]` | ❌   | ✅   | ❌   | ✅   | ❌   | ✅   |\n| `()[{}` | ❌   | ✅   | ✅   | ✅   | ❌   | ✅   |\n| `*+?` | ❌   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| `/` | ✅   | ✅   | ✅   | ✅   | ❌   | ✅   |\n| `0DSWbdfnrstvw` | ✅   | ⚠️  | ✅   | ⚠️  | ✅   | ⚠️  |\n| `B` | ✅   | ⚠️  | ✅   | ❌   | ✅   | ❌   |\n| `$.` | ⚠️  | ✅   | ✅   | ✅   | ✅   | ✅   |\n| `\\|` | ⚠️  | ✅   | ✅   | ✅   | ❌   | ✅   |\n| `-` | ✅   | ❌   | ✅⚠️ | ✅   | ❌⚠️ | ✅   |\n| `^` | ⚠️  | ✅   | ✅⚠️ | ✅   | ✅⚠️ | ✅   |\n| `\\` | ❌⚠️ | ✅   | ❌⚠️ | ✅   | ❌⚠️ | ✅   |\n\n**Note:** The characters that can both be escaped and unescaped in `v`\\-mode character classes are exactly those forbidden as \"double punctuators\". See [`v`\\-mode character classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class) for more information.\n\nWhenever you want to match a syntax character literally, you need to [escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) it with a backslash (`\\`). For example, to match a literal `*` in a pattern, you need to write `\\*` in the pattern. Using syntax characters as literal characters either leads to unexpected results or causes syntax errors — for example, `/*/` is not a valid regular expression because the quantifier is not preceded by a pattern. In [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), `]`, `{`, and `}` may appear literally if it's not possible to parse them as the end of a character class or quantifier delimiters. This is a [deprecated syntax for web compatibility](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on it.\n\nRegular expression literals cannot be specified with certain non-syntax literal characters. `/` cannot appear as a literal character in a regular expression literal, because `/` is used as the delimiter of the literal itself. You need to escape it as `\\/` if you want to match a literal `/`. Line terminators cannot appear as literal characters in a regular expression literal either, because a literal cannot span multiple lines. You need to use a [character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape) like `\\n` instead. There are no such restrictions when using the [`RegExp()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor, although string literals have their own escaping rules (for example, `\"\\\\\"` actually denotes a single backslash character, so `new RegExp(\"\\\\*\")` and `/\\*/` are equivalent).\n\nIn [Unicode-unaware mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), the pattern is interpreted as a sequence of [UTF-16 code units](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters). This means surrogate pairs actually represent two literal characters. This causes unexpected behaviors when paired with other features:\n\n```\n/^[😄]$/.test(\"😄\"); // false, because the pattern is interpreted as /^[\\ud83d\\udc04]$/\n/^😄+$/.test(\"😄😄\"); // false, because the pattern is interpreted as /^\\ud83d\\udc04+$/\n```\n\nIn Unicode-aware mode, the pattern is interpreted as a sequence of Unicode code points, and surrogate pairs do not get split. Therefore, you should always prefer to use the `u` flag.\n\n## [Examples](#examples)\n\n### [Using literal characters](#using_literal_characters)\n\nThe following example is copied from [Character escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape#using_character_escapes). The `a` and `b` characters are literal characters in the pattern, and `\\n` is an escaped character because it cannot appear literally in a regular expression literal.\n\n```\nconst pattern = /a\\nb/;\nconst string = `a\nb`;\nconsole.log(pattern.test(string)); // true\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-PatternCharacter](https://tc39.es/ecma262/multipage/text-processing.html#prod-PatternCharacter) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Literal character: a, b - JavaScript | MDN",
    "description": "A literal character specifies exactly itself to be matched in the input text.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields",
    "markdown": "# Public class fields - JavaScript\n\n**Public fields** are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.\n\n## [Syntax](#syntax)\n\n```\nclass ClassWithField {\n  instanceField;\n  instanceFieldWithInitializer = \"instance field\";\n  static staticField;\n  static staticFieldWithInitializer = \"static field\";\n}\n```\n\nThere are some additional syntax restrictions:\n\n*   The name of a static property (field or method) cannot be `prototype`.\n*   The name of a class field (static or instance) cannot be `constructor`.\n\n## [Description](#description)\n\nThis page introduces public instance fields in detail.\n\n*   For public static fields, see [`static`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static).\n*   For private fields, see [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n*   For public methods, see [method definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions).\n*   For public accessors, see [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).\n\nPublic instance fields exist on every created instance of a class. By declaring a public field, you can ensure the field is always present, and the class definition is more self-documenting.\n\nPublic instance fields are added to the instance either at construction time in the base class (before the constructor body runs), or just after `super()` returns in a subclass. Fields without initializers are initialized to `undefined`. Like properties, field names may be computed.\n\n```\nconst PREFIX = \"prefix\";\n\nclass ClassWithField {\n  field;\n  fieldWithInitializer = \"instance field\";\n  [`${PREFIX}Field`] = \"prefixed field\";\n}\n\nconst instance = new ClassWithField();\nconsole.log(Object.hasOwn(instance, \"field\")); // true\nconsole.log(instance.field); // undefined\nconsole.log(instance.fieldWithInitializer); // \"instance field\"\nconsole.log(instance.prefixField); // \"prefixed field\"\n```\n\nComputed field names are only evaluated once, at [class definition time](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#evaluation_order). This means that each class always has a fixed set of field names, and two instances cannot have different field names via computed names. The `this` value in the computed expression is the `this` surrounding the class definition, and referring to the class's name is a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) because the class is not initialized yet. [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) and [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) work as expected in this expression.\n\n```\nclass C {\n  [Math.random()] = 1;\n}\n\nconsole.log(new C());\nconsole.log(new C());\n// Both instances have the same field name\n```\n\nIn the field initializer, [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) refers to the class instance under construction, and [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) refers to the `prototype` property of the base class, which contains the base class's instance methods, but not its instance fields.\n\n```\nclass Base {\n  baseField = \"base field\";\n  anotherBaseField = this.baseField;\n  baseMethod() {\n    return \"base method output\";\n  }\n}\n\nclass Derived extends Base {\n  subField = super.baseMethod();\n}\n\nconst base = new Base();\nconst sub = new Derived();\n\nconsole.log(base.anotherBaseField); // \"base field\"\n\nconsole.log(sub.subField); // \"base method output\"\n```\n\nThe field initializer expression is evaluated each time a new instance is created. (Because the `this` value is different for each instance, the initializer expression can access instance-specific properties.)\n\n```\nclass C {\n  obj = {};\n}\n\nconst instance1 = new C();\nconst instance2 = new C();\nconsole.log(instance1.obj === instance2.obj); // false\n```\n\nThe expression is evaluated synchronously. You cannot use [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) or [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) in the initializer expression. (Think of the initializer expression as being implicitly wrapped in a function.)\n\nBecause instance fields of a class are added before the respective constructor runs, you can access the fields' values within the constructor. However, because instance fields of a derived class are defined after `super()` returns, the base class's constructor does not have access to the derived class's fields.\n\n```\nclass Base {\n  constructor() {\n    console.log(\"Base constructor:\", this.field);\n  }\n}\n\nclass Derived extends Base {\n  field = 1;\n  constructor() {\n    super();\n    console.log(\"Derived constructor:\", this.field);\n    this.field = 2;\n  }\n}\n\nconst instance = new Derived();\n// Base constructor: undefined\n// Derived constructor: 1\nconsole.log(instance.field); // 2\n```\n\nFields are added one-by-one. Field initializers can refer to field values above it, but not below it. All instance and static methods are added beforehand and can be accessed, although calling them may not behave as expected if they refer to fields below the one being initialized.\n\n```\nclass C {\n  a = 1;\n  b = this.c;\n  c = this.a + 1;\n  d = this.c + 1;\n}\n\nconst instance = new C();\nconsole.log(instance.d); // 3\nconsole.log(instance.b); // undefined\n```\n\n**Note:** This is more important with [private fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties), because accessing a non-initialized private field throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), even if the private field is declared below. (If the private field is not declared, it would be an early [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).)\n\nBecause class fields are added using the [`[[DefineOwnProperty]]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty) semantic (which is essentially [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)), field declarations in derived classes do not invoke setters in the base class. This behavior differs from using `this.field = …` in the constructor.\n\n```\nclass Base {\n  set field(val) {\n    console.log(val);\n  }\n}\n\nclass DerivedWithField extends Base {\n  field = 1;\n}\n\nconst instance = new DerivedWithField(); // No log\n\nclass DerivedWithConstructor extends Base {\n  constructor() {\n    super();\n    this.field = 1;\n  }\n}\n\nconst instance2 = new DerivedWithConstructor(); // Logs 1\n```\n\n**Note:** Before the class fields specification was finalized with the `[[DefineOwnProperty]]` semantic, most transpilers, including [Babel](https://babeljs.io/) and [tsc](https://www.typescriptlang.org/), transformed class fields to the `DerivedWithConstructor` form, which has caused subtle bugs after class fields were standardized.\n\n## [Examples](#examples)\n\n### [Using class fields](#using_class_fields)\n\nClass fields cannot depend on arguments of the constructor, so field initializers usually evaluate to the same value for each instance (unless the same expression can evaluate to different values each time, such as [`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now) or object initializers).\n\n```\nclass Person {\n  name = nameArg; // nameArg is out of scope of the constructor\n  constructor(nameArg) {}\n}\n```\n\n```\nclass Person {\n  // All instances of Person will have the same name\n  name = \"Dragomir\";\n}\n```\n\nHowever, even declaring an empty class field is beneficial, because it indicates the existence of the field, which allows type checkers as well as human readers to statically analyze the shape of the class.\n\n```\nclass Person {\n  name;\n  age;\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n```\n\nThe code above seems repetitive, but consider the case where `this` is dynamically mutated: the explicit field declaration makes it clear which fields will definitely be present on the instance.\n\n```\nclass Person {\n  name;\n  age;\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n}\n```\n\nBecause initializers are evaluated after the base class has executed, you can access properties created by the base class constructor.\n\n```\nclass Person {\n  name;\n  age;\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nclass Professor extends Person {\n  name = `Professor ${this.name}`;\n}\n\nconsole.log(new Professor(\"Radev\", 54).name); // \"Professor Radev\"\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-FieldDefinition](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-FieldDefinition) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Public class fields - JavaScript | MDN",
    "description": "Public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
    "markdown": "# function - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`function`** declaration creates a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) of a new function to a given name.\n\nYou can also define functions using the [`function` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction name(param0) {\n  statements\n}\nfunction name(param0, param1) {\n  statements\n}\nfunction name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nThe function name.\n\n[`param`](#param) Optional\n\nThe name of a formal parameter for the function. Maximum number of arguments varies in different engines. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements which comprise the body of the function.\n\n## [Description](#description)\n\nA `function` declaration creates a [`Function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) object. Each time when a function is called, it returns the value specified by the last executed [`return`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return) statement, or `undefined` if the end of the function body is reached. See [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) for detailed information on functions.\n\n`function` declarations behave like a mix of [`var`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var) and [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let):\n\n*   Like `let`, in strict mode, [function declarations are scoped to the most closely containing block](#block-level_function_declaration).\n*   Like `let`, function declarations at the top level of a module or within blocks in strict mode cannot be [redeclared](#redeclarations) by any other declaration.\n*   Like `var`, function declarations at the top level of a script (strict or non-strict) become properties on [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). Function declarations at the top level of a script or function body (strict or non-strict) can be redeclared by another `function` or `var`.\n*   Like both, function declarations can be re-assigned, but you should avoid doing so.\n*   Unlike either, function declarations are [hoisted](#hoisting) together with its value and can be called anywhere in its scope.\n\n### [Block-level function declaration](#block-level_function_declaration)\n\n**Warning:** In [non-strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), function declarations inside blocks behave strangely. Only declare functions in blocks if you are in strict mode.\n\nFunctions can be conditionally declared — that is, a function statement can be nested within an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement. However, in non-strict mode, the results are inconsistent across implementations.\n\n```\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\nif (false) {\n  function foo() {\n    return 1;\n  }\n}\n\n// In Chrome:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Firefox:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Safari:\n// 'foo' name is global. typeof foo is function\n```\n\nThe scoping and hoisting effect won't change regardless of whether the `if` body is actually executed.\n\n```\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\nif (true) {\n  function foo() {\n    return 1;\n  }\n}\n\n// In Chrome:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Firefox:\n// 'foo' name is global. typeof foo is undefined\n//\n// In Safari:\n// 'foo' name is global. typeof foo is function\n```\n\nIn [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), [block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block)\\-level function declarations are scoped to that block and are hoisted to the top of the block.\n\n```\n\"use strict\";\n\n{\n  foo(); // Logs \"foo\"\n  function foo() {\n    console.log(\"foo\");\n  }\n}\n\nconsole.log(\n  `'foo' name ${\n    \"foo\" in globalThis ? \"is\" : \"is not\"\n  } global. typeof foo is ${typeof foo}`,\n);\n// 'foo' name is not global. typeof foo is undefined\n```\n\n### [Hoisting](#hoisting)\n\nFunction declarations in JavaScript are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) to the top of the enclosing function or global scope. You can use the function before you declared it:\n\n```\nhoisted(); // Logs \"foo\"\n\nfunction hoisted() {\n  console.log(\"foo\");\n}\n```\n\nNote that [function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) are not hoisted:\n\n```\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function () {\n  console.log(\"bar\");\n};\n```\n\n### [Redeclarations](#redeclarations)\n\nWhether `function` declarations can be redeclared in the same scope depends on what scope it's contained in.\n\nAt the top level of a script, `function` declarations behave like `var` and can be redeclared by another `function` or `var` but not by [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), or [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class).\n\n```\nfunction a(b) {}\nfunction a(b, c) {}\nconsole.log(a.length); // 2\nlet a = 2; // SyntaxError: Identifier 'a' has already been declared\n```\n\nWhen `function` declarations are redeclared by `var`, the `var` declaration's initializer always overrides the function's value, regardless of their relative position. This is because function declarations are hoisted before any initializer gets evaluated, so the initializer comes later and overrides the value.\n\n```\nvar a = 1;\nfunction a() {}\nconsole.log(a); // 1\n```\n\nAt the top level of a function's body, `function` also behaves like `var` and can be redeclared or have the same name as a parameter.\n\n```\nfunction foo(a) {\n  function a() {}\n  console.log(typeof a);\n}\n\nfoo(2); // Logs \"function\"\n```\n\nAt the top level of a module or a block in strict mode, `function` declarations behave like `let` and cannot be redeclared by any other declaration.\n\n```\n// Assuming current source is a module\nfunction foo() {}\nfunction foo() {} // SyntaxError: Identifier 'foo' has already been declared\n```\n\n```\n\"use strict\";\n{\n  function foo() {}\n  function foo() {} // SyntaxError: Identifier 'foo' has already been declared\n}\n```\n\nA `function` declaration within a `catch` block cannot have the same name as the `catch`\\-bound identifier, even in non-strict mode.\n\n```\ntry {\n} catch (e) {\n  function e() {} // SyntaxError: Identifier 'e' has already been declared\n}\n```\n\n## [Examples](#examples)\n\n### [Using function](#using_function)\n\nThe following code declares a function that returns the total amount of sales, when given the number of units sold of three products.\n\n```\nfunction calcSales(unitsA, unitsB, unitsC) {\n  return unitsA * 79 + unitsB * 129 + unitsC * 699;\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "function - JavaScript | MDN",
    "description": "The function declaration creates a binding of a new function to a given name.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties",
    "markdown": "# Private properties - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n**Private properties** are counterparts of the regular class properties which are public, including [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields), class methods, etc. Private properties get created by using a hash `#` prefix and cannot be legally referenced outside of the class. The privacy encapsulation of these class properties is enforced by JavaScript itself. The only way to access a private property is via [dot notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation), and you can only do so within the class that defines the private property.\n\nPrivate properties were not native to the language before this syntax existed. In prototypal inheritance, its behavior may be emulated with [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#emulating_private_members) objects or [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#emulating_private_methods_with_closures), but they can't compare to the `#` syntax in terms of ergonomics.\n\n## [Syntax](#syntax)\n\n```\nclass ClassWithPrivate {\n  #privateField;\n  #privateFieldWithInitializer = 42;\n\n  #privateMethod() {\n    // …\n  }\n\n  static #privateStaticField;\n  static #privateStaticFieldWithInitializer = 42;\n\n  static #privateStaticMethod() {\n    // …\n  }\n}\n```\n\nThere are some additional syntax restrictions:\n\n*   All private identifiers declared within a class must be unique. The namespace is shared between static and instance properties. The only exception is when the two declarations define a getter-setter pair.\n*   The private identifier cannot be `#constructor`.\n\n## [Description](#description)\n\nMost class properties have their private counterparts:\n\n*   Private fields\n*   Private methods\n*   Private static fields\n*   Private static methods\n*   Private getters\n*   Private setters\n*   Private static getters\n*   Private static setters\n\nThese features are collectively called _private properties_. However, [constructors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) cannot be private in JavaScript. To prevent classes from being constructed outside of the class, you have to [use a private flag](#simulating_private_constructors).\n\nPrivate properties are declared with **\\# names** (pronounced \"hash names\"), which are identifiers prefixed with `#`. The hash prefix is an inherent part of the property name — you can draw relationship with the old underscore prefix convention `_privateField` — but it's not an ordinary string property, so you can't dynamically access it with the [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation).\n\nIt is a syntax error to refer to `#` names from outside of the class. It is also a syntax error to refer to private properties that were not declared in the class body, or to attempt to remove declared properties with [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete).\n\n```\nclass ClassWithPrivateField {\n  #privateField;\n\n  constructor() {\n    delete this.#privateField; // Syntax error\n    this.#undeclaredField = 42; // Syntax error\n  }\n}\n\nconst instance = new ClassWithPrivateField();\ninstance.#privateField; // Syntax error\n```\n\nJavaScript, being a dynamic language, is able to perform this compile-time check because of the special hash identifier syntax, making it different from normal properties on the syntax level.\n\n**Note:** Code run in the Chrome console can access private properties outside the class. This is a DevTools-only relaxation of the JavaScript syntax restriction.\n\nIf you access a private property from an object that doesn't have the property, a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) is thrown, instead of returning `undefined` as normal properties do.\n\n```\nclass C {\n  #x;\n\n  static getX(obj) {\n    return obj.#x;\n  }\n}\n\nconsole.log(C.getX(new C())); // undefined\nconsole.log(C.getX({})); // TypeError: Cannot read private member #x from an object whose class did not declare it\n```\n\nThis example also illustrates that you can access private properties within static functions too, and on externally defined instances of the class.\n\nYou can use the [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) operator to check whether an externally defined object possesses a private property. This will return `true` if the private field or method exists, and `false` otherwise.\n\n```\nclass C {\n  #x;\n  constructor(x) {\n    this.#x = x;\n  }\n  static getX(obj) {\n    if (#x in obj) return obj.#x;\n\n    return \"obj must be an instance of C\";\n  }\n}\nconsole.log(C.getX(new C(\"foo\"))); // \"foo\"\nconsole.log(C.getX(new C(0.196))); // 0.196\nconsole.log(C.getX(new C(new Date()))); // the current date and time\nconsole.log(C.getX({})); // \"obj must be an instance of C\"\n```\n\nNote a corollary of private names being always pre-declared and non-deletable: if you found that an object possesses one private property of the current class (either from a `try...catch` or an `in` check), it must possess all other private properties. An object possessing the private properties of a class generally means it was constructed by that class (although [not always](#returning_overriding_object)).\n\nPrivate properties are not part of the [prototypical inheritance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) model since they can only be accessed within the current class's body and aren't inherited by subclasses. Private properties with the same name within different classes are entirely different and do not interoperate with each other. See them as external metadata attached to each instance, managed by the class. For this reason, [`structuredClone()`](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone) does not clone private properties, and [`Object.freeze()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) and [`Object.seal()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) have no effect on private properties.\n\nFor more information on how and when private fields are initialized, see [public class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields).\n\n## [Examples](#examples)\n\n### [Private fields](#private_fields)\n\nPrivate fields include private instance fields and private static fields. Private fields are only accessible from inside the class declaration.\n\n#### Private instance fields\n\nLike their public counterparts, private instance fields:\n\n*   are added before the constructor runs in a base class, or immediately after [`super()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) is invoked in a subclass, and\n*   are only available on instances of the class.\n\n```\nclass ClassWithPrivateField {\n  #privateField;\n\n  constructor() {\n    this.#privateField = 42;\n  }\n}\n\nclass Subclass extends ClassWithPrivateField {\n  #subPrivateField;\n\n  constructor() {\n    super();\n    this.#subPrivateField = 23;\n  }\n}\n\nnew Subclass(); // In some dev tools, it shows Subclass {#privateField: 42, #subPrivateField: 23}\n```\n\n**Note:** `#privateField` from the `ClassWithPrivateField` base class is private to `ClassWithPrivateField` and is not accessible from the derived `Subclass`.\n\n#### Returning overriding object\n\nA class's constructor can return a different object, which will be used as the new `this` for the derived class constructor. The derived class may then define private fields on that returned object — meaning it is possible to \"stamp\" private fields onto unrelated objects.\n\n```\nclass Stamper extends class {\n  // A base class whose constructor returns the object it's given\n  constructor(obj) {\n    return obj;\n  }\n} {\n  // This declaration will \"stamp\" the private field onto the object\n  // returned by the base class constructor\n  #stamp = 42;\n  static getStamp(obj) {\n    return obj.#stamp;\n  }\n}\n\nconst obj = {};\nnew Stamper(obj);\n// `Stamper` calls `Base`, which returns `obj`, so `obj` is\n// now the `this` value. `Stamper` then defines `#stamp` on `obj`\n\nconsole.log(obj); // In some dev tools, it shows {#stamp: 42}\nconsole.log(Stamper.getStamp(obj)); // 42\nconsole.log(obj instanceof Stamper); // false\n\n// You cannot stamp private properties twice\nnew Stamper(obj); // Error: Initializing an object twice is an error with private fields\n```\n\n**Warning:** This is a potentially very confusing thing to do. You are generally advised to avoid returning anything from the constructor — especially something unrelated to `this`.\n\n#### Private static fields\n\nLike their public counterparts, private static fields:\n\n*   are added to the class constructor at class evaluation time, and\n*   are only available on the class itself.\n\n```\nclass ClassWithPrivateStaticField {\n  static #privateStaticField = 42;\n\n  static publicStaticMethod() {\n    return ClassWithPrivateStaticField.#privateStaticField;\n  }\n}\n\nconsole.log(ClassWithPrivateStaticField.publicStaticMethod()); // 42\n```\n\nThere is a restriction on private static fields: only the class which defines the private static field can access the field. This can lead to unexpected behavior when using [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this). In the following example, `this` refers to the `Subclass` class (not the `ClassWithPrivateStaticField` class) when we try to call `Subclass.publicStaticMethod()`, and so causes a `TypeError`.\n\n```\nclass ClassWithPrivateStaticField {\n  static #privateStaticField = 42;\n\n  static publicStaticMethod() {\n    return this.#privateStaticField;\n  }\n}\n\nclass Subclass extends ClassWithPrivateStaticField {}\n\nSubclass.publicStaticMethod(); // TypeError: Cannot read private member #privateStaticField from an object whose class did not declare it\n```\n\nThis is the same if you call the method with `super`, because [`super` methods are not called with the super class as `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super#calling_methods_from_super).\n\n```\nclass ClassWithPrivateStaticField {\n  static #privateStaticField = 42;\n\n  static publicStaticMethod() {\n    // When invoked through super, `this` still refers to Subclass\n    return this.#privateStaticField;\n  }\n}\n\nclass Subclass extends ClassWithPrivateStaticField {\n  static callSuperMethod() {\n    return super.publicStaticMethod();\n  }\n}\n\nSubclass.callSuperMethod(); // TypeError: Cannot read private member #privateStaticField from an object whose class did not declare it\n```\n\nYou are advised to always access private static fields through the class name, not through `this`, so inheritance doesn't break the method.\n\n### [Private methods](#private_methods)\n\nPrivate methods include private instance methods and private static methods. Private methods are only accessible from inside the class declaration.\n\n#### Private instance methods\n\nUnlike their public counterparts, private instance methods:\n\n*   are installed immediately before the instance fields are installed, and\n*   are only available on instances of the class, not on its `.prototype` property.\n\n```\nclass ClassWithPrivateMethod {\n  #privateMethod() {\n    return 42;\n  }\n\n  publicMethod() {\n    return this.#privateMethod();\n  }\n}\n\nconst instance = new ClassWithPrivateMethod();\nconsole.log(instance.publicMethod()); // 42\n```\n\nPrivate instance methods may be generator, async, or async generator functions. Private getters and setters are also possible, and follow the same syntax requirements as their public [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) counterparts.\n\n```\nclass ClassWithPrivateAccessor {\n  #message;\n\n  get #decoratedMessage() {\n    return `🎬${this.#message}🛑`;\n  }\n  set #decoratedMessage(msg) {\n    this.#message = msg;\n  }\n\n  constructor() {\n    this.#decoratedMessage = \"hello world\";\n    console.log(this.#decoratedMessage);\n  }\n}\n\nnew ClassWithPrivateAccessor(); // 🎬hello world🛑\n```\n\nUnlike public methods, private methods are not accessible on the `.prototype` property of their class.\n\n```\nclass C {\n  #method() {}\n\n  static getMethod(x) {\n    return x.#method;\n  }\n}\n\nconsole.log(C.getMethod(new C())); // [Function: #method]\nconsole.log(C.getMethod(C.prototype)); // TypeError: Receiver must be an instance of class C\n```\n\n#### Private static methods\n\nLike their public counterparts, private static methods:\n\n*   are added to the class constructor at class evaluation time, and\n*   are only available on the class itself.\n\n```\nclass ClassWithPrivateStaticMethod {\n  static #privateStaticMethod() {\n    return 42;\n  }\n\n  static publicStaticMethod() {\n    return ClassWithPrivateStaticMethod.#privateStaticMethod();\n  }\n}\n\nconsole.log(ClassWithPrivateStaticMethod.publicStaticMethod()); // 42\n```\n\nPrivate static methods may be generator, async, and async generator functions.\n\nThe same restriction previously mentioned for private static fields holds for private static methods, and similarly can lead to unexpected behavior when using `this`. In the following example, when we try to call `Subclass.publicStaticMethod()`, `this` refers to the `Subclass` class (not the `ClassWithPrivateStaticMethod` class) and so causes a `TypeError`.\n\n```\nclass ClassWithPrivateStaticMethod {\n  static #privateStaticMethod() {\n    return 42;\n  }\n\n  static publicStaticMethod() {\n    return this.#privateStaticMethod();\n  }\n}\n\nclass Subclass extends ClassWithPrivateStaticMethod {}\n\nconsole.log(Subclass.publicStaticMethod()); // TypeError: Cannot read private member #privateStaticMethod from an object whose class did not declare it\n```\n\n### [Simulating private constructors](#simulating_private_constructors)\n\nMany other languages include the capability to mark a constructor as private, which prevents the class from being instantiated outside of the class itself — you can only use static factory methods that create instances, or not be able to create instances at all. JavaScript does not have a native way to do this, but it can be accomplished by using a private static flag.\n\n```\nclass PrivateConstructor {\n  static #isInternalConstructing = false;\n\n  constructor() {\n    if (!PrivateConstructor.#isInternalConstructing) {\n      throw new TypeError(\"PrivateConstructor is not constructable\");\n    }\n    PrivateConstructor.#isInternalConstructing = false;\n    // More initialization logic\n  }\n\n  static create() {\n    PrivateConstructor.#isInternalConstructing = true;\n    const instance = new PrivateConstructor();\n    return instance;\n  }\n}\n\nnew PrivateConstructor(); // TypeError: PrivateConstructor is not constructable\nPrivateConstructor.create(); // PrivateConstructor {}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-PrivateIdentifier](https://tc39.es/ecma262/multipage/ecmascript-language-lexical-grammar.html#prod-PrivateIdentifier) |\n| [ECMAScript Language Specification  <br>\\# prod-00OK517S](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#prod-00OK517S) |\n\n## [Browser compatibility](#browser_compatibility)\n\n### [javascript.classes.private\\_class\\_fields](#javascript.classes.private_class_fields)\n\nBCD tables only load in the browser\n\n### [javascript.classes.private\\_class\\_fields\\_in](#javascript.classes.private_class_fields_in)\n\nBCD tables only load in the browser\n\n### [javascript.classes.private\\_class\\_methods](#javascript.classes.private_class_methods)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Private properties - JavaScript | MDN",
    "description": "Private properties are counterparts of the regular class properties which are public, including class fields, class methods, etc. Private properties get created by using a hash # prefix and cannot be legally referenced outside of the class. The privacy encapsulation of these class properties is enforced by JavaScript itself. The only way to access a private property is via dot notation, and you can only do so within the class that defines the private property.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion",
    "markdown": "# Lookbehind assertion: (?<=...), (?<!...) - JavaScript\n\nA **lookbehind assertion** \"looks behind\": it attempts to match the previous input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same. It matches each atom in its pattern in the reverse order.\n\n## [Syntax](#syntax)\n\n```\n(?<=pattern)\n(?<!pattern)\n```\n\n### [Parameters](#parameters)\n\n[`pattern`](#pattern)\n\nA pattern consisting of anything you may use in a regex literal, including a [disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction).\n\n## [Description](#description)\n\nA regular expression generally matches from left to right. This is why [lookahead](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) and lookbehind assertions are called as such — lookahead asserts what's on the right, and lookbehind asserts what's on the left.\n\nIn order for a `(?<=pattern)` assertion to succeed, the `pattern` must match the input immediately to the left of the current position, but the current position is not changed before matching the subsequent input. The `(?<!pattern)` form negates the assertion — it succeeds if the `pattern` does not match the input immediately to the left of the current position.\n\nLookbehind generally has the same semantics as lookahead — however, within a lookbehind assertion, the regular expression matches _backwards_. For example,\n\n```\n/(?<=([ab]+)([bc]+))$/.exec(\"abc\"); // ['', 'a', 'bc']\n// Not ['', 'ab', 'c']\n```\n\nIf the lookbehind matches from left to right, it should first greedily match `[ab]+`, which makes the first group capture `\"ab\"`, and the remaining `\"c\"` is captured by `[bc]+`. However, because `[bc]+` is matched first, it greedily grabs `\"bc\"`, leaving only `\"a\"` for `[ab]+`.\n\nThis behavior is reasonable — the matcher does not know where to _start_ the match (because the lookbehind may not be fixed-length), but it does know where to _end_ (at the current position). Therefore, it starts from the current position and works backwards. (Regexes in some other languages forbid non-fixed-length lookbehind to avoid this issue.)\n\nFor [quantified](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier) [capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) inside the lookbehind, the match furthest to the left of the input string — instead of the one on the right — is captured because of backward matching. See the capturing groups page for more information. [Backreferences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) inside the lookbehind must appear on the _left_ of the group it's referring to, also due to backward matching. However, [disjunctions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction) are still attempted left-to-right.\n\n## [Examples](#examples)\n\n### [Matching strings without consuming them](#matching_strings_without_consuming_them)\n\nSimilar to [lookaheads](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion#matching_strings_without_consuming_them), lookbehinds can be used to match strings without consuming them so that only useful information is extracted. For example, the following regex matches the number in a price label:\n\n```\nfunction getPrice(label) {\n  return /(?<=\\$)\\d+(?:\\.\\d*)?/.exec(label)?.[0];\n}\n\ngetPrice(\"$10.53\"); // \"10.53\"\ngetPrice(\"10.53\"); // undefined\n```\n\nA similar effect can be achieved by [capturing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) the submatch you are interested in.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# prod-Assertion](https://tc39.es/ecma262/multipage/text-processing.html#prod-Assertion) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "Lookbehind assertion: (?<=...), (?<!...) - JavaScript | MDN",
    "description": "A lookbehind assertion \"looks behind\": it attempts to match the previous input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same. It matches each atom in its pattern in the reverse order.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",
    "markdown": "# function\\* - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`function*`** declaration creates a [binding](https://developer.mozilla.org/en-US/docs/Glossary/Binding) of a new generator function to a given name. A generator function can be exited and later re-entered, with its context (variable [bindings](https://developer.mozilla.org/en-US/docs/Glossary/Binding)) saved across re-entrances.\n\nYou can also define generator functions using the [`function*` expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*).\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nfunction* name(param0) {\n  statements\n}\nfunction* name(param0, param1) {\n  statements\n}\nfunction* name(param0, param1, /* …, */ paramN) {\n  statements\n}\n```\n\n**Note:** Generator functions do not have arrow function counterparts.\n\n### [Parameters](#parameters)\n\n[`name`](#name)\n\nThe function name.\n\n[`param`](#param) Optional\n\nThe name of a formal parameter for the function. For the parameters' syntax, see the [Functions reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters).\n\n[`statements`](#statements) Optional\n\nThe statements comprising the body of the function.\n\n## [Description](#description)\n\nA `function*` declaration creates a [`GeneratorFunction`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction) object. Each time a generator function is called, it returns a new [`Generator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object, which conforms to the [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol). When the iterator's `next()` method is called, the generator function's body is executed until the first [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) expression, which specifies the value to be returned from the iterator or, with [`yield*`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*), delegates to another generator function. The `next()` method returns an object with a `value` property containing the yielded value and a `done` property which indicates whether the generator has yielded its last value, as a boolean. Calling the `next()` method with an argument will resume the generator function execution, replacing the `yield` expression where an execution was paused with the argument from `next()`.\n\nGenerators in JavaScript — especially when combined with Promises — are a very powerful tool for asynchronous programming as they mitigate — if not entirely eliminate -- the problems with callbacks, such as [Callback Hell](http://callbackhell.com/) and [Inversion of Control](https://frontendmasters.com/courses/rethinking-async-js/callback-problems-inversion-of-control/). However, an even simpler solution to these problems can be achieved with [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\n\nA `return` statement in a generator, when executed, will make the generator finish (i.e. the `done` property of the object returned by it will be set to `true`). If a value is returned, it will be set as the `value` property of the object returned by the generator. Much like a `return` statement, an error thrown inside the generator will make the generator finished — unless caught within the generator's body. When a generator is finished, subsequent `next()` calls will not execute any of that generator's code, they will just return an object of this form: `{value: undefined, done: true}`.\n\n`function*` declarations behave similar to [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) declarations — they are [hoisted](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting) to the top of their scope and can be called anywhere in their scope, and they can be redeclared only in certain contexts.\n\n## [Examples](#examples)\n\n### [Simple example](#simple_example)\n\n```\nfunction* idMaker() {\n  let index = 0;\n  while (true) {\n    yield index++;\n  }\n}\n\nconst gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n// …\n```\n\n### [Example with yield\\*](#example_with_yield)\n\n```\nfunction* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i) {\n  yield i;\n  yield* anotherGenerator(i);\n  yield i + 10;\n}\n\nconst gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n```\n\n### [Passing arguments into Generators](#passing_arguments_into_generators)\n\n```\nfunction* logGenerator() {\n  console.log(0);\n  console.log(1, yield);\n  console.log(2, yield);\n  console.log(3, yield);\n}\n\nconst gen = logGenerator();\n\n// the first call of next executes from the start of the function\n// until the first yield statement\ngen.next(); // 0\ngen.next(\"pretzel\"); // 1 pretzel\ngen.next(\"california\"); // 2 california\ngen.next(\"mayonnaise\"); // 3 mayonnaise\n```\n\n### [Return statement in a generator](#return_statement_in_a_generator)\n\n```\nfunction* yieldAndReturn() {\n  yield \"Y\";\n  return \"R\";\n  yield \"unreachable\";\n}\n\nconst gen = yieldAndReturn();\nconsole.log(gen.next()); // { value: \"Y\", done: false }\nconsole.log(gen.next()); // { value: \"R\", done: true }\nconsole.log(gen.next()); // { value: undefined, done: true }\n```\n\n### [Generator as an object property](#generator_as_an_object_property)\n\n```\nconst someObj = {\n  *generator() {\n    yield \"a\";\n    yield \"b\";\n  },\n};\n\nconst gen = someObj.generator();\n\nconsole.log(gen.next()); // { value: 'a', done: false }\nconsole.log(gen.next()); // { value: 'b', done: false }\nconsole.log(gen.next()); // { value: undefined, done: true }\n```\n\n### [Generator as an object method](#generator_as_an_object_method)\n\n```\nclass Foo {\n  *generator() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n\nconst f = new Foo();\nconst gen = f.generator();\n\nconsole.log(gen.next()); // { value: 1, done: false }\nconsole.log(gen.next()); // { value: 2, done: false }\nconsole.log(gen.next()); // { value: 3, done: false }\nconsole.log(gen.next()); // { value: undefined, done: true }\n```\n\n### [Generator as a computed property](#generator_as_a_computed_property)\n\n```\nclass Foo {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n  }\n}\n\nconst SomeObj = {\n  *[Symbol.iterator]() {\n    yield \"a\";\n    yield \"b\";\n  },\n};\n\nconsole.log(Array.from(new Foo())); // [ 1, 2 ]\nconsole.log(Array.from(SomeObj)); // [ 'a', 'b' ]\n```\n\n### [Generators are not constructable](#generators_are_not_constructable)\n\n```\nfunction* f() {}\nconst obj = new f(); // throws \"TypeError: f is not a constructor\n```\n\n### [Generator defined in an expression](#generator_defined_in_an_expression)\n\n```\nconst foo = function* () {\n  yield 10;\n  yield 20;\n};\n\nconst bar = foo();\nconsole.log(bar.next()); // {value: 10, done: false}\n```\n\n### [Generator example](#generator_example)\n\n```\nfunction* powers(n) {\n  //endless loop to generate\n  for (let current = n; ; current *= n) {\n    yield current;\n  }\n}\n\nfor (const power of powers(2)) {\n  // controlling generator\n  if (power > 32) {\n    break;\n  }\n  console.log(power);\n  // 2\n  // 4\n  // 8\n  // 16\n  // 32\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-generator-function-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-generator-function-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "function* - JavaScript | MDN",
    "description": "The function* declaration creates a binding of a new generator function to a given name. A generator function can be exited and later re-entered, with its context (variable bindings) saved across re-entrances.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
    "markdown": "# if...else - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\nThe **`if...else`** statement executes a statement if a specified condition is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). If the condition is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), another statement in the optional `else` clause will be executed.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nif (condition)\n  statement1\n\n// With an else clause\nif (condition)\n  statement1\nelse\n  statement2\n```\n\n[`condition`](#condition)\n\nAn expression that is considered to be either [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) or [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\n[`statement1`](#statement1)\n\nStatement that is executed if _condition_ is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). Can be any statement, including further nested `if` statements. To execute multiple statements, use a [block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block) statement (`{ /* ... */ }`) to group those statements. To execute no statements, use an [empty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty) statement.\n\n[`statement2`](#statement2)\n\nStatement that is executed if `condition` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) and the `else` clause exists. Can be any statement, including block statements and further nested `if` statements.\n\n## [Description](#description)\n\nMultiple `if...else` statements can be nested to create an `else if` clause. Note that there is no `elseif` (in one word) keyword in JavaScript.\n\n```\nif (condition1)\n  statement1\nelse if (condition2)\n  statement2\nelse if (condition3)\n  statement3\n// …\nelse\n  statementN\n```\n\nTo see how this works, this is how it would look if the nesting were properly indented:\n\n```\nif (condition1)\n  statement1\nelse\n  if (condition2)\n    statement2\n  else\n    if (condition3)\n      statement3\n// …\n```\n\nTo execute multiple statements within a clause, use a block statement (`{ /* ... */ }`) to group those statements.\n\n```\nif (condition) {\n  statements1\n} else {\n  statements2\n}\n```\n\nNot using blocks may lead to confusing behavior, especially if the code is hand-formatted. For example:\n\n```\nfunction checkValue(a, b) {\n  if (a === 1)\n    if (b === 2)\n      console.log(\"a is 1 and b is 2\");\n  else\n    console.log(\"a is not 1\");\n}\n```\n\nThis code looks innocent — however, executing `checkValue(1, 3)` will log \"a is not 1\". This is because in the case of [dangling else](https://en.wikipedia.org/wiki/Dangling_else), the `else` clause will be connected to the closest `if` clause. Therefore, the code above, with proper indentation, would look like:\n\n```\nfunction checkValue(a, b) {\n  if (a === 1)\n    if (b === 2)\n      console.log(\"a is 1 and b is 2\");\n    else\n      console.log(\"a is not 1\");\n}\n```\n\nIn general, it is a good practice to always use block statements, especially in code involving nested `if` statements.\n\n```\nfunction checkValue(a, b) {\n  if (a === 1) {\n    if (b === 2) {\n      console.log(\"a is 1 and b is 2\");\n    }\n  } else {\n    console.log(\"a is not 1\");\n  }\n}\n```\n\nDo not confuse the primitive Boolean values `true` and `false` with truthiness or falsiness of the [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) object. Any value that is not `false`, `undefined`, `null`, `0`, `-0`, `NaN`, or the empty string (`\"\"`), and any object, including a Boolean object whose value is `false`, is considered [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) when used as the condition. For example:\n\n```\nconst b = new Boolean(false);\nif (b) {\n  console.log(\"b is truthy\"); // \"b is truthy\"\n}\n```\n\n## [Examples](#examples)\n\n### [Using if...else](#using_if...else)\n\n```\nif (cipherChar === fromChar) {\n  result += toChar;\n  x++;\n} else {\n  result += clearChar;\n}\n```\n\n### [Using else if](#using_else_if)\n\nNote that there is no `elseif` syntax in JavaScript. However, you can write it with a space between `else` and `if`:\n\n```\nif (x > 50) {\n  /* do something */\n} else if (x > 5) {\n  /* do something */\n} else {\n  /* do something */\n}\n```\n\n### [Using an assignment as a condition](#using_an_assignment_as_a_condition)\n\nYou should almost never have an `if...else` with an assignment like `x = y` as a condition:\n\nBecause unlike [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) loops, the condition is only evaluated once, so the assignment is only performed once. The code above is equivalent to:\n\nWhich is much clearer. However, in the rare case you find yourself wanting to do something like that, the [`while`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while) documentation has a [Using an assignment as a condition](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while#using_an_assignment_as_a_condition) section with our recommendations.\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-if-statement](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-if-statement) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "if...else - JavaScript | MDN",
    "description": "The if...else statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.",
    "languageCode": "en-US"
  },
  {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static",
    "markdown": "# static - JavaScript | MDNMDN Web DocsMDN logoMozilla logo\n\n## Baseline Widely available\n\nThe **`static`** keyword defines a [static method or field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#static_methods_and_fields) for a class, or a [static initialization block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks) (see the link for more information about this usage). Static properties cannot be directly accessed on instances of the class. Instead, they're accessed on the class itself.\n\nStatic methods are often utility functions, such as functions to create or clone objects, whereas static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.\n\n**Note:** In the context of classes, MDN Web Docs content uses the terms properties and [fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) interchangeably.\n\n## [Try it](#try_it)\n\n## [Syntax](#syntax)\n\n```\nclass ClassWithStatic {\n  static staticField;\n  static staticFieldWithInitializer = value;\n  static staticMethod() {\n    // …\n  }\n}\n```\n\nThere are some additional syntax restrictions:\n\n*   The name of a static property (field or method) cannot be `prototype`.\n*   The name of a class field (static or instance) cannot be `constructor`.\n\n## [Description](#description)\n\nThis page introduces public static properties of classes, which include static methods, static accessors, and static fields.\n\n*   For private static features, see [private properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n*   For instance features, see [methods definitions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions), [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set), and [public class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields).\n\nPublic static features are declared using the `static` keyword. They are added to the class constructor at the time of [class evaluation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#evaluation_order) using the [`[[DefineOwnProperty]]`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty) semantic (which is essentially [`Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)). They are accessed again from the class constructor.\n\nStatic methods are often utility functions, such as functions to create or clone instances. Public static fields are useful when you want a field to exist only once per class, not on every class instance you create. This is useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.\n\nStatic field names can be [computed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names). The `this` value in the computed expression is the `this` surrounding the class definition, and referring to the class's name is a [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) because the class is not initialized yet. [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) and [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) work as expected in this expression.\n\nStatic fields can have an initializer. Static fields without initializers are initialized to `undefined`. Public static fields are not reinitialized on subclasses, but can be accessed via the prototype chain.\n\n```\nclass ClassWithStaticField {\n  static staticField;\n  static staticFieldWithInitializer = \"static field\";\n}\n\nclass SubclassWithStaticField extends ClassWithStaticField {\n  static subStaticField = \"subclass field\";\n}\n\nconsole.log(Object.hasOwn(ClassWithStaticField, \"staticField\")); // true\nconsole.log(ClassWithStaticField.staticField); // undefined\nconsole.log(ClassWithStaticField.staticFieldWithInitializer); // \"static field\"\nconsole.log(SubclassWithStaticField.staticFieldWithInitializer); // \"static field\"\nconsole.log(SubclassWithStaticField.subStaticField); // \"subclass field\"\n```\n\nIn the field initializer, [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) refers to the current class (which you can also access through its name), and [`super`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super) refers to the base class constructor.\n\n```\nclass ClassWithStaticField {\n  static baseStaticField = \"base static field\";\n  static anotherBaseStaticField = this.baseStaticField;\n\n  static baseStaticMethod() {\n    return \"base static method output\";\n  }\n}\n\nclass SubClassWithStaticField extends ClassWithStaticField {\n  static subStaticField = super.baseStaticMethod();\n}\n\nconsole.log(ClassWithStaticField.anotherBaseStaticField); // \"base static field\"\nconsole.log(SubClassWithStaticField.subStaticField); // \"base static method output\"\n```\n\nThe expression is evaluated synchronously. You cannot use [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) or [`yield`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) in the initializer expression. (Think of the initializer expression as being implicitly wrapped in a function.)\n\nStatic field initializers and [static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks) are evaluated one-by-one. Field initializers can refer to field values above it, but not below it. All static methods are added beforehand and can be accessed, although calling them may not behave as expected if they refer to fields below the one being initialized.\n\n**Note:** This is more important with [private static fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties), because accessing a non-initialized private field throws a [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError), even if the private field is declared below. (If the private field is not declared, it would be an early [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError).)\n\n## [Examples](#examples)\n\n### [Using static members in classes](#using_static_members_in_classes)\n\nThe following example demonstrates several things:\n\n1.  How a static member (method or property) is defined on a class.\n2.  That a class with a static member can be sub-classed.\n3.  How a static member can and cannot be called.\n\n```\nclass Triple {\n  static customName = \"Tripler\";\n  static description = \"I triple any number you provide\";\n  static calculate(n = 1) {\n    return n * 3;\n  }\n}\n\nclass SquaredTriple extends Triple {\n  static longDescription;\n  static description = \"I square the triple of any number you provide\";\n  static calculate(n) {\n    return super.calculate(n) * super.calculate(n);\n  }\n}\n\nconsole.log(Triple.description); // 'I triple any number you provide'\nconsole.log(Triple.calculate()); // 3\nconsole.log(Triple.calculate(6)); // 18\n\nconst tp = new Triple();\n\nconsole.log(SquaredTriple.calculate(3)); // 81 (not affected by parent's instantiation)\nconsole.log(SquaredTriple.description); // 'I square the triple of any number you provide'\nconsole.log(SquaredTriple.longDescription); // undefined\nconsole.log(SquaredTriple.customName); // 'Tripler'\n\n// This throws because calculate() is a static member, not an instance member.\nconsole.log(tp.calculate()); // 'tp.calculate is not a function'\n```\n\n### [Calling static members from another static method](#calling_static_members_from_another_static_method)\n\nIn order to call a static method or property within another static method of the same class, you can use the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) keyword.\n\n```\nclass StaticMethodCall {\n  static staticProperty = \"static property\";\n  static staticMethod() {\n    return `Static method and ${this.staticProperty} has been called`;\n  }\n  static anotherStaticMethod() {\n    return `${this.staticMethod()} from another static method`;\n  }\n}\nStaticMethodCall.staticMethod();\n// 'Static method and static property has been called'\n\nStaticMethodCall.anotherStaticMethod();\n// 'Static method and static property has been called from another static method'\n```\n\n### [Calling static members from a class constructor and other methods](#calling_static_members_from_a_class_constructor_and_other_methods)\n\nStatic members are not directly accessible using the [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) keyword from non-static methods. You need to call them using the class name: `CLASSNAME.STATIC_METHOD_NAME()` / `CLASSNAME.STATIC_PROPERTY_NAME` or by calling the method as a property of the `constructor`: `this.constructor.STATIC_METHOD_NAME()` / `this.constructor.STATIC_PROPERTY_NAME`\n\n```\nclass StaticMethodCall {\n  constructor() {\n    console.log(StaticMethodCall.staticProperty); // 'static property'\n    console.log(this.constructor.staticProperty); // 'static property'\n    console.log(StaticMethodCall.staticMethod()); // 'static method has been called.'\n    console.log(this.constructor.staticMethod()); // 'static method has been called.'\n  }\n\n  static staticProperty = \"static property\";\n  static staticMethod() {\n    return \"static method has been called.\";\n  }\n}\n```\n\n## [Specifications](#specifications)\n\n| Specification |\n| --- |\n| [ECMAScript Language Specification  <br>\\# sec-class-definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-class-definitions) |\n\n## [Browser compatibility](#browser_compatibility)\n\nBCD tables only load in the browser\n\n## [See also](#see_also)",
    "title": "static - JavaScript | MDN",
    "description": "The static keyword defines a static method or field for a class, or a static initialization block (see the link for more information about this usage). Static properties cannot be directly accessed on instances of the class. Instead, they're accessed on the class itself.",
    "languageCode": "en-US"
  }
]